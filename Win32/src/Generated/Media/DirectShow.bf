using Win32.Foundation;
using Win32.System.Com;
using Win32.Media;
using Win32.Graphics.Gdi;
using Win32.System.Com.StructuredStorage;
using Win32.System.Registry;
using Win32.Graphics.DirectDraw;
using Win32.Media.Audio.DirectSound;
using Win32.Media.KernelStreaming;
using Win32.Media.WindowsMediaFormat;
using Win32.Media.Audio;
using Win32.UI.WindowsAndMessaging;
using Win32.Graphics.Direct3D9;
using Win32.Media.MediaFoundation;
using Win32.System.Diagnostics.Etw;
using Win32.System.Ole;
using System;

namespace Win32.Media.DirectShow;

#region Constants
public static
{
	public const uint32 EC_SND_DEVICE_ERROR_BASE = 512;
	public const uint32 EC_SNDDEV_IN_ERROR = 512;
	public const uint32 EC_SNDDEV_OUT_ERROR = 513;
	public const uint32 EC_SYSTEMBASE = 0;
	public const uint32 EC_USER = 32768;
	public const uint32 EC_COMPLETE = 1;
	public const uint32 EC_USERABORT = 2;
	public const uint32 EC_ERRORABORT = 3;
	public const uint32 EC_TIME = 4;
	public const uint32 EC_REPAINT = 5;
	public const uint32 EC_STREAM_ERROR_STOPPED = 6;
	public const uint32 EC_STREAM_ERROR_STILLPLAYING = 7;
	public const uint32 EC_ERROR_STILLPLAYING = 8;
	public const uint32 EC_PALETTE_CHANGED = 9;
	public const uint32 EC_VIDEO_SIZE_CHANGED = 10;
	public const uint32 EC_QUALITY_CHANGE = 11;
	public const uint32 EC_SHUTTING_DOWN = 12;
	public const uint32 EC_CLOCK_CHANGED = 13;
	public const uint32 EC_PAUSED = 14;
	public const uint32 EC_OPENING_FILE = 16;
	public const uint32 EC_BUFFERING_DATA = 17;
	public const uint32 EC_FULLSCREEN_LOST = 18;
	public const uint32 EC_ACTIVATE = 19;
	public const uint32 EC_NEED_RESTART = 20;
	public const uint32 EC_WINDOW_DESTROYED = 21;
	public const uint32 EC_DISPLAY_CHANGED = 22;
	public const uint32 EC_STARVATION = 23;
	public const uint32 EC_OLE_EVENT = 24;
	public const uint32 EC_NOTIFY_WINDOW = 25;
	public const uint32 EC_STREAM_CONTROL_STOPPED = 26;
	public const uint32 EC_STREAM_CONTROL_STARTED = 27;
	public const uint32 EC_END_OF_SEGMENT = 28;
	public const uint32 EC_SEGMENT_STARTED = 29;
	public const uint32 EC_LENGTH_CHANGED = 30;
	public const uint32 EC_DEVICE_LOST = 31;
	public const uint32 EC_SAMPLE_NEEDED = 32;
	public const uint32 EC_PROCESSING_LATENCY = 33;
	public const uint32 EC_SAMPLE_LATENCY = 34;
	public const uint32 EC_SCRUB_TIME = 35;
	public const uint32 EC_STEP_COMPLETE = 36;
	public const uint32 EC_TIMECODE_AVAILABLE = 48;
	public const uint32 EC_EXTDEVICE_MODE_CHANGE = 49;
	public const uint32 EC_STATE_CHANGE = 50;
	public const uint32 EC_GRAPH_CHANGED = 80;
	public const uint32 EC_CLOCK_UNSET = 81;
	public const uint32 EC_VMR_RENDERDEVICE_SET = 83;
	public const uint32 VMR_RENDER_DEVICE_OVERLAY = 1;
	public const uint32 VMR_RENDER_DEVICE_VIDMEM = 2;
	public const uint32 VMR_RENDER_DEVICE_SYSMEM = 4;
	public const uint32 EC_VMR_SURFACE_FLIPPED = 84;
	public const uint32 EC_VMR_RECONNECTION_FAILED = 85;
	public const uint32 EC_PREPROCESS_COMPLETE = 86;
	public const uint32 EC_CODECAPI_EVENT = 87;
	public const uint32 EC_WMT_EVENT_BASE = 593;
	public const uint32 EC_WMT_INDEX_EVENT = 593;
	public const uint32 EC_WMT_EVENT = 594;
	public const uint32 EC_BUILT = 768;
	public const uint32 EC_UNBUILT = 769;
	public const uint32 EC_SKIP_FRAMES = 37;
	public const uint32 EC_PLEASE_REOPEN = 64;
	public const uint32 EC_STATUS = 65;
	public const uint32 EC_MARKER_HIT = 66;
	public const uint32 EC_LOADSTATUS = 67;
	public const uint32 EC_FILE_CLOSED = 68;
	public const uint32 EC_ERRORABORTEX = 69;
	public const uint32 AM_LOADSTATUS_CLOSED = 0;
	public const uint32 AM_LOADSTATUS_LOADINGDESCR = 1;
	public const uint32 AM_LOADSTATUS_LOADINGMCAST = 2;
	public const uint32 AM_LOADSTATUS_LOCATING = 3;
	public const uint32 AM_LOADSTATUS_CONNECTING = 4;
	public const uint32 AM_LOADSTATUS_OPENING = 5;
	public const uint32 AM_LOADSTATUS_OPEN = 6;
	public const uint32 EC_NEW_PIN = 32;
	public const uint32 EC_RENDER_FINISHED = 33;
	public const uint32 EC_EOS_SOON = 70;
	public const uint32 EC_CONTENTPROPERTY_CHANGED = 71;
	public const uint32 AM_CONTENTPROPERTY_TITLE = 1;
	public const uint32 AM_CONTENTPROPERTY_AUTHOR = 2;
	public const uint32 AM_CONTENTPROPERTY_COPYRIGHT = 4;
	public const uint32 AM_CONTENTPROPERTY_DESCRIPTION = 8;
	public const uint32 EC_BANDWIDTHCHANGE = 72;
	public const uint32 EC_VIDEOFRAMEREADY = 73;
	public const uint32 EC_DVDBASE = 256;
	public const uint32 EC_DVD_DOMAIN_CHANGE = 257;
	public const uint32 EC_DVD_TITLE_CHANGE = 258;
	public const uint32 EC_DVD_CHAPTER_START = 259;
	public const uint32 EC_DVD_AUDIO_STREAM_CHANGE = 260;
	public const uint32 EC_DVD_SUBPICTURE_STREAM_CHANGE = 261;
	public const uint32 EC_DVD_ANGLE_CHANGE = 262;
	public const uint32 EC_DVD_BUTTON_CHANGE = 263;
	public const uint32 EC_DVD_VALID_UOPS_CHANGE = 264;
	public const uint32 EC_DVD_STILL_ON = 265;
	public const uint32 EC_DVD_STILL_OFF = 266;
	public const uint32 EC_DVD_CURRENT_TIME = 267;
	public const uint32 EC_DVD_ERROR = 268;
	public const uint32 EC_DVD_WARNING = 269;
	public const uint32 EC_DVD_CHAPTER_AUTOSTOP = 270;
	public const uint32 EC_DVD_NO_FP_PGC = 271;
	public const uint32 EC_DVD_PLAYBACK_RATE_CHANGE = 272;
	public const uint32 EC_DVD_PARENTAL_LEVEL_CHANGE = 273;
	public const uint32 EC_DVD_PLAYBACK_STOPPED = 274;
	public const uint32 EC_DVD_ANGLES_AVAILABLE = 275;
	public const uint32 EC_DVD_PLAYPERIOD_AUTOSTOP = 276;
	public const uint32 EC_DVD_BUTTON_AUTO_ACTIVATED = 277;
	public const uint32 EC_DVD_CMD_START = 278;
	public const uint32 EC_DVD_CMD_END = 279;
	public const uint32 EC_DVD_DISC_EJECTED = 280;
	public const uint32 EC_DVD_DISC_INSERTED = 281;
	public const uint32 EC_DVD_CURRENT_HMSF_TIME = 282;
	public const uint32 EC_DVD_KARAOKE_MODE = 283;
	public const uint32 EC_DVD_PROGRAM_CELL_CHANGE = 284;
	public const uint32 EC_DVD_TITLE_SET_CHANGE = 285;
	public const uint32 EC_DVD_PROGRAM_CHAIN_CHANGE = 286;
	public const uint32 EC_DVD_VOBU_Offset = 287;
	public const uint32 EC_DVD_VOBU_Timestamp = 288;
	public const uint32 EC_DVD_GPRM_Change = 289;
	public const uint32 EC_DVD_SPRM_Change = 290;
	public const uint32 EC_DVD_BeginNavigationCommands = 291;
	public const uint32 EC_DVD_NavigationCommand = 292;
	public const uint32 AM_AC3_ALTERNATE_AUDIO_1 = 1;
	public const uint32 AM_AC3_ALTERNATE_AUDIO_2 = 2;
	public const uint32 AM_AC3_ALTERNATE_AUDIO_BOTH = 3;
	public const uint32 AM_AC3_SERVICE_MAIN_AUDIO = 0;
	public const uint32 AM_AC3_SERVICE_NO_DIALOG = 1;
	public const uint32 AM_AC3_SERVICE_VISUALLY_IMPAIRED = 2;
	public const uint32 AM_AC3_SERVICE_HEARING_IMPAIRED = 3;
	public const uint32 AM_AC3_SERVICE_DIALOG_ONLY = 4;
	public const uint32 AM_AC3_SERVICE_COMMENTARY = 5;
	public const uint32 AM_AC3_SERVICE_EMERGENCY_FLASH = 6;
	public const uint32 AM_AC3_SERVICE_VOICE_OVER = 7;
	public const uint32 AM_UseNewCSSKey = 1;
	public const uint32 AM_ReverseBlockStart = 2;
	public const uint32 AM_ReverseBlockEnd = 4;
	public const uint32 AM_DVD_CGMS_RESERVED_MASK = 120;
	public const uint32 AM_DVD_CGMS_COPY_PROTECT_MASK = 24;
	public const uint32 AM_DVD_CGMS_COPY_PERMITTED = 0;
	public const uint32 AM_DVD_CGMS_COPY_ONCE = 16;
	public const uint32 AM_DVD_CGMS_NO_COPY = 24;
	public const uint32 AM_DVD_COPYRIGHT_MASK = 64;
	public const uint32 AM_DVD_NOT_COPYRIGHTED = 0;
	public const uint32 AM_DVD_COPYRIGHTED = 64;
	public const uint32 AM_DVD_SECTOR_PROTECT_MASK = 32;
	public const uint32 AM_DVD_SECTOR_NOT_PROTECTED = 0;
	public const uint32 AM_DVD_SECTOR_PROTECTED = 32;
	public const uint32 AMINTERLACE_IsInterlaced = 1;
	public const uint32 AMINTERLACE_1FieldPerSample = 2;
	public const uint32 AMINTERLACE_Field1First = 4;
	public const uint32 AMINTERLACE_UNUSED = 8;
	public const uint32 AMINTERLACE_FieldPatternMask = 48;
	public const uint32 AMINTERLACE_FieldPatField1Only = 0;
	public const uint32 AMINTERLACE_FieldPatField2Only = 16;
	public const uint32 AMINTERLACE_FieldPatBothRegular = 32;
	public const uint32 AMINTERLACE_FieldPatBothIrregular = 48;
	public const uint32 AMINTERLACE_DisplayModeMask = 192;
	public const uint32 AMINTERLACE_DisplayModeBobOnly = 0;
	public const uint32 AMINTERLACE_DisplayModeWeaveOnly = 64;
	public const uint32 AMINTERLACE_DisplayModeBobOrWeave = 128;
	public const uint32 AMCOPYPROTECT_RestrictDuplication = 1;
	public const uint32 AMCONTROL_USED = 1;
	public const uint32 AMCONTROL_PAD_TO_4x3 = 2;
	public const uint32 AMCONTROL_PAD_TO_16x9 = 4;
	public const uint32 AMCONTROL_COLORINFO_PRESENT = 128;
	public const int32 AM_VIDEO_FLAG_FIELD_MASK = 3;
	public const int32 AM_VIDEO_FLAG_INTERLEAVED_FRAME = 0;
	public const int32 AM_VIDEO_FLAG_FIELD1 = 1;
	public const int32 AM_VIDEO_FLAG_FIELD2 = 2;
	public const int32 AM_VIDEO_FLAG_FIELD1FIRST = 4;
	public const int32 AM_VIDEO_FLAG_WEAVE = 8;
	public const int32 AM_VIDEO_FLAG_IPB_MASK = 48;
	public const int32 AM_VIDEO_FLAG_I_SAMPLE = 0;
	public const int32 AM_VIDEO_FLAG_P_SAMPLE = 16;
	public const int32 AM_VIDEO_FLAG_B_SAMPLE = 32;
	public const int32 AM_VIDEO_FLAG_REPEAT_FIELD = 64;
	public const uint32 AVIF_HASINDEX = 16;
	public const uint32 AVIF_MUSTUSEINDEX = 32;
	public const uint32 AVIF_ISINTERLEAVED = 256;
	public const uint32 AVIF_TRUSTCKTYPE = 2048;
	public const uint32 AVIF_WASCAPTUREFILE = 65536;
	public const uint32 AVIF_COPYRIGHTED = 131072;
	public const uint32 AVI_HEADERSIZE = 2048;
	public const uint32 AVISF_DISABLED = 1;
	public const uint32 AVISF_VIDEO_PALCHANGES = 65536;
	public const int32 AVIIF_LIST = 1;
	public const int32 AVIIF_KEYFRAME = 16;
	public const int32 AVIIF_FIRSTPART = 32;
	public const int32 AVIIF_LASTPART = 64;
	public const int32 AVIIF_NOTIME = 256;
	public const int32 AVIIF_COMPUSE = 268369920;
	public const uint32 AVIIF_NO_TIME = 256;
	public const uint32 AVIIF_COMPRESSOR = 268369920;
	public const uint32 TIMECODE_RATE_30DROP = 0;
	public const uint32 TIMECODE_SMPTE_BINARY_GROUP = 7;
	public const uint32 TIMECODE_SMPTE_COLOR_FRAME = 8;
	public const uint32 AVI_INDEX_OF_INDEXES = 0;
	public const uint32 AVI_INDEX_OF_CHUNKS = 1;
	public const uint32 AVI_INDEX_OF_TIMED_CHUNKS = 2;
	public const uint32 AVI_INDEX_OF_SUB_2FIELD = 3;
	public const uint32 AVI_INDEX_IS_DATA = 128;
	public const uint32 AVI_INDEX_SUB_DEFAULT = 0;
	public const uint32 AVI_INDEX_SUB_2FIELD = 1;
	public const uint32 STDINDEXSIZE = 16384;
	public const uint32 AVISTDINDEX_DELTAFRAME = 2147483648;
	public const uint32 AMVA_TYPEINDEX_OUTPUTFRAME = 4294967295;
	public const uint32 AMVA_QUERYRENDERSTATUSF_READ = 1;
	public const uint32 MIN_DIMENSION = 1;
	public const int32 BDA_PLP_ID_NOT_SET = -1;
	public const uint32 CDEF_CLASS_DEFAULT = 1;
	public const uint32 CDEF_BYPASS_CLASS_MANAGER = 2;
	public const uint32 CDEF_MERIT_ABOVE_DO_NOT_USE = 8;
	public const uint32 CDEF_DEVMON_CMGR_DEVICE = 16;
	public const uint32 CDEF_DEVMON_DMO = 32;
	public const uint32 CDEF_DEVMON_PNP_DEVICE = 64;
	public const uint32 CDEF_DEVMON_FILTER = 128;
	public const uint32 CDEF_DEVMON_SELECTIVE_MASK = 240;
	public const uint32 CHARS_IN_GUID = 39;
	public const uint32 MAX_PIN_NAME = 128;
	public const uint32 MAX_FILTER_NAME = 128;
	public const uint32 AM_GBF_PREVFRAMESKIPPED = 1;
	public const uint32 AM_GBF_NOTASYNCPOINT = 2;
	public const uint32 AM_GBF_NOWAIT = 4;
	public const uint32 AM_GBF_NODDSURFACELOCK = 8;
	public const double AMF_AUTOMATICGAIN = -1;
	public const uint32 AnalogVideo_NTSC_Mask = 7;
	public const uint32 AnalogVideo_PAL_Mask = 1052656;
	public const uint32 AnalogVideo_SECAM_Mask = 1044480;
	public const uint32 MPEG2_PROGRAM_STREAM_MAP = 0;
	public const uint32 MPEG2_PROGRAM_ELEMENTARY_STREAM = 1;
	public const uint32 MPEG2_PROGRAM_DIRECTORY_PES_PACKET = 2;
	public const uint32 MPEG2_PROGRAM_PACK_HEADER = 3;
	public const uint32 MPEG2_PROGRAM_PES_STREAM = 4;
	public const uint32 MPEG2_PROGRAM_SYSTEM_HEADER = 5;
	public const uint32 SUBSTREAM_FILTER_VAL_NONE = 268435456;
	public const uint32 AM_GETDECODERCAP_QUERY_VMR_SUPPORT = 1;
	public const uint32 VMR_NOTSUPPORTED = 0;
	public const uint32 VMR_SUPPORTED = 1;
	public const uint32 AM_QUERY_DECODER_VMR_SUPPORT = 1;
	public const uint32 AM_QUERY_DECODER_DXVA_1_SUPPORT = 2;
	public const uint32 AM_QUERY_DECODER_DVD_SUPPORT = 3;
	public const uint32 AM_QUERY_DECODER_ATSC_SD_SUPPORT = 4;
	public const uint32 AM_QUERY_DECODER_ATSC_HD_SUPPORT = 5;
	public const uint32 AM_GETDECODERCAP_QUERY_VMR9_SUPPORT = 6;
	public const uint32 AM_GETDECODERCAP_QUERY_EVR_SUPPORT = 7;
	public const uint32 DECODER_CAP_NOTSUPPORTED = 0;
	public const uint32 DECODER_CAP_SUPPORTED = 1;
	public const uint32 VMRBITMAP_DISABLE = 1;
	public const uint32 VMRBITMAP_HDC = 2;
	public const uint32 VMRBITMAP_ENTIREDDS = 4;
	public const uint32 VMRBITMAP_SRCCOLORKEY = 8;
	public const uint32 VMRBITMAP_SRCRECT = 16;
	public const uint32 DVD_TITLE_MENU = 0;
	public const uint32 DVD_STREAM_DATA_CURRENT = 2048;
	public const uint32 DVD_STREAM_DATA_VMGM = 1024;
	public const uint32 DVD_STREAM_DATA_VTSM = 1025;
	public const uint32 DVD_DEFAULT_AUDIO_STREAM = 15;
	public const uint32 DVD_AUDIO_CAPS_AC3 = 1;
	public const uint32 DVD_AUDIO_CAPS_MPEG2 = 2;
	public const uint32 DVD_AUDIO_CAPS_LPCM = 4;
	public const uint32 DVD_AUDIO_CAPS_DTS = 8;
	public const uint32 DVD_AUDIO_CAPS_SDDS = 16;
	public const Guid MEDIATYPE_MPEG2_PACK = .(0x36523b13, 0x8ee5, 0x11d1, 0x8c, 0xa3, 0x00, 0x60, 0xb0, 0x57, 0x66, 0x4a);
	public const Guid PBDA_AUX_CONNECTOR_TYPE_SVideo = .(0xa0e905f4, 0x24c9, 0x4a54, 0xb7, 0x61, 0x21, 0x33, 0x55, 0xef, 0xc1, 0x3a);
	public const Guid PBDA_AUX_CONNECTOR_TYPE_Composite = .(0xf6298b4c, 0xc725, 0x4d42, 0x84, 0x9b, 0x41, 0x0b, 0xbb, 0x14, 0xea, 0x62);
	public const Guid CLSID_PBDA_AUX_DATA_TYPE = .(0xfd456373, 0x3323, 0x4090, 0xad, 0xca, 0x8e, 0xd4, 0x5f, 0x55, 0xcf, 0x10);
	public const Guid CLSID_PBDA_Encoder_DATA_TYPE = .(0x728fd6bc, 0x5546, 0x4716, 0xb1, 0x03, 0xf8, 0x99, 0xf5, 0xa1, 0xfa, 0x68);
	public const uint32 PBDA_Encoder_Audio_AlgorithmType_MPEG1LayerII = 0;
	public const uint32 PBDA_Encoder_Audio_AlgorithmType_AC3 = 1;
	public const uint32 PBDA_Encoder_Video_MPEG2PartII = 0;
	public const uint32 PBDA_Encoder_Video_MPEG4Part10 = 1;
	public const uint32 PBDA_Encoder_Video_AVC = 1;
	public const uint32 PBDA_Encoder_Video_H264 = 1;
	public const uint32 PBDA_Encoder_BitrateMode_Constant = 1;
	public const uint32 PBDA_Encoder_BitrateMode_Variable = 2;
	public const uint32 PBDA_Encoder_BitrateMode_Average = 3;
	public const Guid CLSID_PBDA_FDC_DATA_TYPE = .(0xe7dbf9a0, 0x22ab, 0x4047, 0x8e, 0x67, 0xef, 0x9a, 0xd5, 0x04, 0xe7, 0x29);
	public const Guid CLSID_PBDA_GDDS_DATA_TYPE = .(0xc80c0df3, 0x6052, 0x4c16, 0x9f, 0x56, 0xc4, 0x4c, 0x21, 0xf7, 0x3c, 0x45);
	public const Guid LIBID_QuartzNetTypeLib = .(0x56a868b1, 0x0ad4, 0x11ce, 0xb0, 0x3a, 0x00, 0x20, 0xaf, 0x0b, 0xa7, 0x70);
	public const Guid LIBID_QuartzTypeLib = .(0x56a868b0, 0x0ad4, 0x11ce, 0xb0, 0x3a, 0x00, 0x20, 0xaf, 0x0b, 0xa7, 0x70);
	public const Guid CLSID_AMMultiMediaStream = .(0x49c47ce5, 0x9ba4, 0x11d0, 0x82, 0x12, 0x00, 0xc0, 0x4f, 0xc3, 0x2c, 0x45);
	public const Guid CLSID_AMDirectDrawStream = .(0x49c47ce4, 0x9ba4, 0x11d0, 0x82, 0x12, 0x00, 0xc0, 0x4f, 0xc3, 0x2c, 0x45);
	public const Guid CLSID_AMAudioStream = .(0x8496e040, 0xaf4c, 0x11d0, 0x82, 0x12, 0x00, 0xc0, 0x4f, 0xc3, 0x2c, 0x45);
	public const Guid CLSID_AMAudioData = .(0xf2468580, 0xaf8a, 0x11d0, 0x82, 0x12, 0x00, 0xc0, 0x4f, 0xc3, 0x2c, 0x45);
	public const Guid CLSID_AMMediaTypeStream = .(0xcf0f2f7c, 0xf7bf, 0x11d0, 0x90, 0x0d, 0x00, 0xc0, 0x4f, 0xd9, 0x18, 0x9d);
	public const uint32 AMDDS_NONE = 0;
	public const uint32 AMDDS_DCIPS = 1;
	public const uint32 AMDDS_PS = 2;
	public const uint32 AMDDS_RGBOVR = 4;
	public const uint32 AMDDS_YUVOVR = 8;
	public const uint32 AMDDS_RGBOFF = 16;
	public const uint32 AMDDS_YUVOFF = 32;
	public const uint32 AMDDS_RGBFLP = 64;
	public const uint32 AMDDS_YUVFLP = 128;
	public const uint32 AMDDS_ALL = 255;
	public const uint32 AMDDS_DEFAULT = 255;
	public const uint32 MAX_SIZE_MPEG1_SEQUENCE_INFO = 140;
	public const Guid CLSID_DMOWrapperFilter = .(0x94297043, 0xbd82, 0x4dfd, 0xb0, 0xde, 0x81, 0x77, 0x73, 0x9c, 0x6d, 0x20);
	public const Guid CLSID_DMOFilterCategory = .(0xbcd5796c, 0xbd52, 0x4d30, 0xab, 0x76, 0x70, 0xf9, 0x75, 0xb8, 0x91, 0x99);
	public const uint32 AM_MPEG_AUDIO_DUAL_MERGE = 0;
	public const uint32 AM_MPEG_AUDIO_DUAL_LEFT = 1;
	public const uint32 AM_MPEG_AUDIO_DUAL_RIGHT = 2;
	public const uint32 VFW_FIRST_CODE = 512;
	public const uint32 MAX_ERROR_TEXT_LEN = 160;
	public const uint32 MPBOOL_TRUE = 1;
	public const uint32 MPBOOL_FALSE = 0;
	public const int32 DWORD_ALLPARAMS = -1;
	public const Guid GUID_TIME_REFERENCE = .(0x93ad712b, 0xdaa0, 0x4ffe, 0xbc, 0x81, 0xb0, 0xce, 0x50, 0x0f, 0xcd, 0xd9);
	public const Guid GUID_TIME_MUSIC = .(0x0574c49d, 0x5b04, 0x4b15, 0xa5, 0x42, 0xae, 0x28, 0x20, 0x30, 0x11, 0x7b);
	public const Guid GUID_TIME_SAMPLES = .(0xa8593d05, 0x0c43, 0x4984, 0x9a, 0x63, 0x97, 0xaf, 0x9e, 0x02, 0xc4, 0xc0);
	public const uint32 MPF_ENVLP_STANDARD = 0;
	public const uint32 MPF_ENVLP_BEGIN_CURRENTVAL = 1;
	public const uint32 MPF_ENVLP_BEGIN_NEUTRALVAL = 2;
	public const uint32 MPF_PUNCHIN_REFTIME = 0;
	public const uint32 MPF_PUNCHIN_NOW = 1;
	public const uint32 MPF_PUNCHIN_STOPPED = 2;
	public const Guid MSPID_PrimaryVideo = .(0xa35ff56a, 0x9fda, 0x11d0, 0x8f, 0xdf, 0x00, 0xc0, 0x4f, 0xd9, 0x18, 0x9d);
	public const Guid MSPID_PrimaryAudio = .(0xa35ff56b, 0x9fda, 0x11d0, 0x8f, 0xdf, 0x00, 0xc0, 0x4f, 0xd9, 0x18, 0x9d);
	public const HRESULT VFW_E_INVALIDMEDIATYPE = -2147220992;
	public const HRESULT VFW_E_INVALIDSUBTYPE = -2147220991;
	public const HRESULT VFW_E_NEED_OWNER = -2147220990;
	public const HRESULT VFW_E_ENUM_OUT_OF_SYNC = -2147220989;
	public const HRESULT VFW_E_ALREADY_CONNECTED = -2147220988;
	public const HRESULT VFW_E_FILTER_ACTIVE = -2147220987;
	public const HRESULT VFW_E_NO_TYPES = -2147220986;
	public const HRESULT VFW_E_NO_ACCEPTABLE_TYPES = -2147220985;
	public const HRESULT VFW_E_INVALID_DIRECTION = -2147220984;
	public const HRESULT VFW_E_NOT_CONNECTED = -2147220983;
	public const HRESULT VFW_E_NO_ALLOCATOR = -2147220982;
	public const HRESULT VFW_E_RUNTIME_ERROR = -2147220981;
	public const HRESULT VFW_E_BUFFER_NOTSET = -2147220980;
	public const HRESULT VFW_E_BUFFER_OVERFLOW = -2147220979;
	public const HRESULT VFW_E_BADALIGN = -2147220978;
	public const HRESULT VFW_E_ALREADY_COMMITTED = -2147220977;
	public const HRESULT VFW_E_BUFFERS_OUTSTANDING = -2147220976;
	public const HRESULT VFW_E_NOT_COMMITTED = -2147220975;
	public const HRESULT VFW_E_SIZENOTSET = -2147220974;
	public const HRESULT VFW_E_NO_CLOCK = -2147220973;
	public const HRESULT VFW_E_NO_SINK = -2147220972;
	public const HRESULT VFW_E_NO_INTERFACE = -2147220971;
	public const HRESULT VFW_E_NOT_FOUND = -2147220970;
	public const HRESULT VFW_E_CANNOT_CONNECT = -2147220969;
	public const HRESULT VFW_E_CANNOT_RENDER = -2147220968;
	public const HRESULT VFW_E_CHANGING_FORMAT = -2147220967;
	public const HRESULT VFW_E_NO_COLOR_KEY_SET = -2147220966;
	public const HRESULT VFW_E_NOT_OVERLAY_CONNECTION = -2147220965;
	public const HRESULT VFW_E_NOT_SAMPLE_CONNECTION = -2147220964;
	public const HRESULT VFW_E_PALETTE_SET = -2147220963;
	public const HRESULT VFW_E_COLOR_KEY_SET = -2147220962;
	public const HRESULT VFW_E_NO_COLOR_KEY_FOUND = -2147220961;
	public const HRESULT VFW_E_NO_PALETTE_AVAILABLE = -2147220960;
	public const HRESULT VFW_E_NO_DISPLAY_PALETTE = -2147220959;
	public const HRESULT VFW_E_TOO_MANY_COLORS = -2147220958;
	public const HRESULT VFW_E_STATE_CHANGED = -2147220957;
	public const HRESULT VFW_E_NOT_STOPPED = -2147220956;
	public const HRESULT VFW_E_NOT_PAUSED = -2147220955;
	public const HRESULT VFW_E_NOT_RUNNING = -2147220954;
	public const HRESULT VFW_E_WRONG_STATE = -2147220953;
	public const HRESULT VFW_E_START_TIME_AFTER_END = -2147220952;
	public const HRESULT VFW_E_INVALID_RECT = -2147220951;
	public const HRESULT VFW_E_TYPE_NOT_ACCEPTED = -2147220950;
	public const HRESULT VFW_E_SAMPLE_REJECTED = -2147220949;
	public const HRESULT VFW_E_SAMPLE_REJECTED_EOS = -2147220948;
	public const HRESULT VFW_E_DUPLICATE_NAME = -2147220947;
	public const HRESULT VFW_S_DUPLICATE_NAME = 262701;
	public const HRESULT VFW_E_TIMEOUT = -2147220946;
	public const HRESULT VFW_E_INVALID_FILE_FORMAT = -2147220945;
	public const HRESULT VFW_E_ENUM_OUT_OF_RANGE = -2147220944;
	public const HRESULT VFW_E_CIRCULAR_GRAPH = -2147220943;
	public const HRESULT VFW_E_NOT_ALLOWED_TO_SAVE = -2147220942;
	public const HRESULT VFW_E_TIME_ALREADY_PASSED = -2147220941;
	public const HRESULT VFW_E_ALREADY_CANCELLED = -2147220940;
	public const HRESULT VFW_E_CORRUPT_GRAPH_FILE = -2147220939;
	public const HRESULT VFW_E_ADVISE_ALREADY_SET = -2147220938;
	public const HRESULT VFW_S_STATE_INTERMEDIATE = 262711;
	public const HRESULT VFW_E_NO_MODEX_AVAILABLE = -2147220936;
	public const HRESULT VFW_E_NO_ADVISE_SET = -2147220935;
	public const HRESULT VFW_E_NO_FULLSCREEN = -2147220934;
	public const HRESULT VFW_E_IN_FULLSCREEN_MODE = -2147220933;
	public const HRESULT VFW_E_UNKNOWN_FILE_TYPE = -2147220928;
	public const HRESULT VFW_E_CANNOT_LOAD_SOURCE_FILTER = -2147220927;
	public const HRESULT VFW_S_PARTIAL_RENDER = 262722;
	public const HRESULT VFW_E_FILE_TOO_SHORT = -2147220925;
	public const HRESULT VFW_E_INVALID_FILE_VERSION = -2147220924;
	public const HRESULT VFW_S_SOME_DATA_IGNORED = 262725;
	public const HRESULT VFW_S_CONNECTIONS_DEFERRED = 262726;
	public const HRESULT VFW_E_INVALID_CLSID = -2147220921;
	public const HRESULT VFW_E_INVALID_MEDIA_TYPE = -2147220920;
	public const HRESULT VFW_E_BAD_KEY = -2147220494;
	public const HRESULT VFW_S_NO_MORE_ITEMS = 262403;
	public const HRESULT VFW_E_SAMPLE_TIME_NOT_SET = -2147220919;
	public const HRESULT VFW_S_RESOURCE_NOT_NEEDED = 262736;
	public const HRESULT VFW_E_MEDIA_TIME_NOT_SET = -2147220911;
	public const HRESULT VFW_E_NO_TIME_FORMAT_SET = -2147220910;
	public const HRESULT VFW_E_MONO_AUDIO_HW = -2147220909;
	public const HRESULT VFW_S_MEDIA_TYPE_IGNORED = 262740;
	public const HRESULT VFW_E_NO_DECOMPRESSOR = -2147220907;
	public const HRESULT VFW_E_NO_AUDIO_HARDWARE = -2147220906;
	public const HRESULT VFW_S_VIDEO_NOT_RENDERED = 262743;
	public const HRESULT VFW_S_AUDIO_NOT_RENDERED = 262744;
	public const HRESULT VFW_E_RPZA = -2147220903;
	public const HRESULT VFW_S_RPZA = 262746;
	public const HRESULT VFW_E_PROCESSOR_NOT_SUITABLE = -2147220901;
	public const HRESULT VFW_E_UNSUPPORTED_AUDIO = -2147220900;
	public const HRESULT VFW_E_UNSUPPORTED_VIDEO = -2147220899;
	public const HRESULT VFW_E_MPEG_NOT_CONSTRAINED = -2147220898;
	public const HRESULT VFW_E_NOT_IN_GRAPH = -2147220897;
	public const HRESULT VFW_S_ESTIMATED = 262752;
	public const HRESULT VFW_E_NO_TIME_FORMAT = -2147220895;
	public const HRESULT VFW_E_READ_ONLY = -2147220894;
	public const HRESULT VFW_S_RESERVED = 262755;
	public const HRESULT VFW_E_BUFFER_UNDERFLOW = -2147220892;
	public const HRESULT VFW_E_UNSUPPORTED_STREAM = -2147220891;
	public const HRESULT VFW_E_NO_TRANSPORT = -2147220890;
	public const HRESULT VFW_S_STREAM_OFF = 262759;
	public const HRESULT VFW_S_CANT_CUE = 262760;
	public const HRESULT VFW_E_BAD_VIDEOCD = -2147220887;
	public const HRESULT VFW_S_NO_STOP_TIME = 262768;
	public const HRESULT VFW_E_OUT_OF_VIDEO_MEMORY = -2147220879;
	public const HRESULT VFW_E_VP_NEGOTIATION_FAILED = -2147220878;
	public const HRESULT VFW_E_DDRAW_CAPS_NOT_SUITABLE = -2147220877;
	public const HRESULT VFW_E_NO_VP_HARDWARE = -2147220876;
	public const HRESULT VFW_E_NO_CAPTURE_HARDWARE = -2147220875;
	public const HRESULT VFW_E_DVD_OPERATION_INHIBITED = -2147220874;
	public const HRESULT VFW_E_DVD_INVALIDDOMAIN = -2147220873;
	public const HRESULT VFW_E_DVD_NO_BUTTON = -2147220872;
	public const HRESULT VFW_E_DVD_GRAPHNOTREADY = -2147220871;
	public const HRESULT VFW_E_DVD_RENDERFAIL = -2147220870;
	public const HRESULT VFW_E_DVD_DECNOTENOUGH = -2147220869;
	public const HRESULT VFW_E_DDRAW_VERSION_NOT_SUITABLE = -2147220868;
	public const HRESULT VFW_E_COPYPROT_FAILED = -2147220867;
	public const HRESULT VFW_S_NOPREVIEWPIN = 262782;
	public const HRESULT VFW_E_TIME_EXPIRED = -2147220865;
	public const HRESULT VFW_S_DVD_NON_ONE_SEQUENTIAL = 262784;
	public const HRESULT VFW_E_DVD_WRONG_SPEED = -2147220863;
	public const HRESULT VFW_E_DVD_MENU_DOES_NOT_EXIST = -2147220862;
	public const HRESULT VFW_E_DVD_CMD_CANCELLED = -2147220861;
	public const HRESULT VFW_E_DVD_STATE_WRONG_VERSION = -2147220860;
	public const HRESULT VFW_E_DVD_STATE_CORRUPT = -2147220859;
	public const HRESULT VFW_E_DVD_STATE_WRONG_DISC = -2147220858;
	public const HRESULT VFW_E_DVD_INCOMPATIBLE_REGION = -2147220857;
	public const HRESULT VFW_E_DVD_NO_ATTRIBUTES = -2147220856;
	public const HRESULT VFW_E_DVD_NO_GOUP_PGC = -2147220855;
	public const HRESULT VFW_E_DVD_LOW_PARENTAL_LEVEL = -2147220854;
	public const HRESULT VFW_E_DVD_NOT_IN_KARAOKE_MODE = -2147220853;
	public const HRESULT VFW_S_DVD_CHANNEL_CONTENTS_NOT_AVAILABLE = 262796;
	public const HRESULT VFW_S_DVD_NOT_ACCURATE = 262797;
	public const HRESULT VFW_E_FRAME_STEP_UNSUPPORTED = -2147220850;
	public const HRESULT VFW_E_DVD_STREAM_DISABLED = -2147220849;
	public const HRESULT VFW_E_DVD_TITLE_UNKNOWN = -2147220848;
	public const HRESULT VFW_E_DVD_INVALID_DISC = -2147220847;
	public const HRESULT VFW_E_DVD_NO_RESUME_INFORMATION = -2147220846;
	public const HRESULT VFW_E_PIN_ALREADY_BLOCKED_ON_THIS_THREAD = -2147220845;
	public const HRESULT VFW_E_PIN_ALREADY_BLOCKED = -2147220844;
	public const HRESULT VFW_E_CERTIFICATION_FAILURE = -2147220843;
	public const HRESULT VFW_E_VMR_NOT_IN_MIXER_MODE = -2147220842;
	public const HRESULT VFW_E_VMR_NO_AP_SUPPLIED = -2147220841;
	public const HRESULT VFW_E_VMR_NO_DEINTERLACE_HW = -2147220840;
	public const HRESULT VFW_E_VMR_NO_PROCAMP_HW = -2147220839;
	public const HRESULT VFW_E_DVD_VMR9_INCOMPATIBLEDEC = -2147220838;
	public const HRESULT VFW_E_NO_COPP_HW = -2147220837;
	public const HRESULT VFW_E_DVD_NONBLOCKING = -2147220836;
	public const HRESULT VFW_E_DVD_TOO_MANY_RENDERERS_IN_FILTER_GRAPH = -2147220835;
	public const HRESULT VFW_E_DVD_NON_EVR_RENDERER_IN_FILTER_GRAPH = -2147220834;
	public const HRESULT VFW_E_DVD_RESOLUTION_ERROR = -2147220833;
	public const HRESULT E_PROP_SET_UNSUPPORTED = -2147023726;
	public const HRESULT E_PROP_ID_UNSUPPORTED = -2147023728;
	public const HRESULT VFW_E_CODECAPI_LINEAR_RANGE = -2147220720;
	public const HRESULT VFW_E_CODECAPI_ENUMERATED = -2147220719;
	public const HRESULT VFW_E_CODECAPI_NO_DEFAULT = -2147220717;
	public const HRESULT VFW_E_CODECAPI_NO_CURRENT_VALUE = -2147220716;
	public const HRESULT VFW_E_DVD_CHAPTER_DOES_NOT_EXIST = -2147220715;
	public const HRESULT VFW_S_DVD_RENDER_STATUS = 262944;
	public const Guid DXVA_ModeNone = .(0x1b81be00, 0xa0c7, 0x11d3, 0xb9, 0x84, 0x00, 0xc0, 0x4f, 0x2e, 0x73, 0xc5);
	public const Guid DXVA_ModeH261_A = .(0x1b81be01, 0xa0c7, 0x11d3, 0xb9, 0x84, 0x00, 0xc0, 0x4f, 0x2e, 0x73, 0xc5);
	public const Guid DXVA_ModeH261_B = .(0x1b81be02, 0xa0c7, 0x11d3, 0xb9, 0x84, 0x00, 0xc0, 0x4f, 0x2e, 0x73, 0xc5);
	public const Guid DXVA_ModeH263_A = .(0x1b81be03, 0xa0c7, 0x11d3, 0xb9, 0x84, 0x00, 0xc0, 0x4f, 0x2e, 0x73, 0xc5);
	public const Guid DXVA_ModeH263_B = .(0x1b81be04, 0xa0c7, 0x11d3, 0xb9, 0x84, 0x00, 0xc0, 0x4f, 0x2e, 0x73, 0xc5);
	public const Guid DXVA_ModeH263_C = .(0x1b81be05, 0xa0c7, 0x11d3, 0xb9, 0x84, 0x00, 0xc0, 0x4f, 0x2e, 0x73, 0xc5);
	public const Guid DXVA_ModeH263_D = .(0x1b81be06, 0xa0c7, 0x11d3, 0xb9, 0x84, 0x00, 0xc0, 0x4f, 0x2e, 0x73, 0xc5);
	public const Guid DXVA_ModeH263_E = .(0x1b81be07, 0xa0c7, 0x11d3, 0xb9, 0x84, 0x00, 0xc0, 0x4f, 0x2e, 0x73, 0xc5);
	public const Guid DXVA_ModeH263_F = .(0x1b81be08, 0xa0c7, 0x11d3, 0xb9, 0x84, 0x00, 0xc0, 0x4f, 0x2e, 0x73, 0xc5);
	public const Guid DXVA_ModeMPEG1_A = .(0x1b81be09, 0xa0c7, 0x11d3, 0xb9, 0x84, 0x00, 0xc0, 0x4f, 0x2e, 0x73, 0xc5);
	public const Guid DXVA_ModeMPEG1_VLD = .(0x6f3ec719, 0x3735, 0x42cc, 0x80, 0x63, 0x65, 0xcc, 0x3c, 0xb3, 0x66, 0x16);
	public const Guid DXVA_ModeMPEG2_A = .(0x1b81be0a, 0xa0c7, 0x11d3, 0xb9, 0x84, 0x00, 0xc0, 0x4f, 0x2e, 0x73, 0xc5);
	public const Guid DXVA_ModeMPEG2_B = .(0x1b81be0b, 0xa0c7, 0x11d3, 0xb9, 0x84, 0x00, 0xc0, 0x4f, 0x2e, 0x73, 0xc5);
	public const Guid DXVA_ModeMPEG2_C = .(0x1b81be0c, 0xa0c7, 0x11d3, 0xb9, 0x84, 0x00, 0xc0, 0x4f, 0x2e, 0x73, 0xc5);
	public const Guid DXVA_ModeMPEG2_D = .(0x1b81be0d, 0xa0c7, 0x11d3, 0xb9, 0x84, 0x00, 0xc0, 0x4f, 0x2e, 0x73, 0xc5);
	public const Guid DXVA_ModeMPEG2and1_VLD = .(0x86695f12, 0x340e, 0x4f04, 0x9f, 0xd3, 0x92, 0x53, 0xdd, 0x32, 0x74, 0x60);
	public const Guid DXVA_ModeH264_A = .(0x1b81be64, 0xa0c7, 0x11d3, 0xb9, 0x84, 0x00, 0xc0, 0x4f, 0x2e, 0x73, 0xc5);
	public const Guid DXVA_ModeH264_B = .(0x1b81be65, 0xa0c7, 0x11d3, 0xb9, 0x84, 0x00, 0xc0, 0x4f, 0x2e, 0x73, 0xc5);
	public const Guid DXVA_ModeH264_C = .(0x1b81be66, 0xa0c7, 0x11d3, 0xb9, 0x84, 0x00, 0xc0, 0x4f, 0x2e, 0x73, 0xc5);
	public const Guid DXVA_ModeH264_D = .(0x1b81be67, 0xa0c7, 0x11d3, 0xb9, 0x84, 0x00, 0xc0, 0x4f, 0x2e, 0x73, 0xc5);
	public const Guid DXVA_ModeH264_E = .(0x1b81be68, 0xa0c7, 0x11d3, 0xb9, 0x84, 0x00, 0xc0, 0x4f, 0x2e, 0x73, 0xc5);
	public const Guid DXVA_ModeH264_F = .(0x1b81be69, 0xa0c7, 0x11d3, 0xb9, 0x84, 0x00, 0xc0, 0x4f, 0x2e, 0x73, 0xc5);
	public const Guid DXVA_ModeH264_VLD_WithFMOASO_NoFGT = .(0xd5f04ff9, 0x3418, 0x45d8, 0x95, 0x61, 0x32, 0xa7, 0x6a, 0xae, 0x2d, 0xdd);
	public const Guid DXVA_ModeH264_VLD_Stereo_Progressive_NoFGT = .(0xd79be8da, 0x0cf1, 0x4c81, 0xb8, 0x2a, 0x69, 0xa4, 0xe2, 0x36, 0xf4, 0x3d);
	public const Guid DXVA_ModeH264_VLD_Stereo_NoFGT = .(0xf9aaccbb, 0xc2b6, 0x4cfc, 0x87, 0x79, 0x57, 0x07, 0xb1, 0x76, 0x05, 0x52);
	public const Guid DXVA_ModeH264_VLD_Multiview_NoFGT = .(0x705b9d82, 0x76cf, 0x49d6, 0xb7, 0xe6, 0xac, 0x88, 0x72, 0xdb, 0x01, 0x3c);
	public const Guid DXVA_ModeWMV8_A = .(0x1b81be80, 0xa0c7, 0x11d3, 0xb9, 0x84, 0x00, 0xc0, 0x4f, 0x2e, 0x73, 0xc5);
	public const Guid DXVA_ModeWMV8_B = .(0x1b81be81, 0xa0c7, 0x11d3, 0xb9, 0x84, 0x00, 0xc0, 0x4f, 0x2e, 0x73, 0xc5);
	public const Guid DXVA_ModeWMV9_A = .(0x1b81be90, 0xa0c7, 0x11d3, 0xb9, 0x84, 0x00, 0xc0, 0x4f, 0x2e, 0x73, 0xc5);
	public const Guid DXVA_ModeWMV9_B = .(0x1b81be91, 0xa0c7, 0x11d3, 0xb9, 0x84, 0x00, 0xc0, 0x4f, 0x2e, 0x73, 0xc5);
	public const Guid DXVA_ModeWMV9_C = .(0x1b81be94, 0xa0c7, 0x11d3, 0xb9, 0x84, 0x00, 0xc0, 0x4f, 0x2e, 0x73, 0xc5);
	public const Guid DXVA_ModeVC1_A = .(0x1b81bea0, 0xa0c7, 0x11d3, 0xb9, 0x84, 0x00, 0xc0, 0x4f, 0x2e, 0x73, 0xc5);
	public const Guid DXVA_ModeVC1_B = .(0x1b81bea1, 0xa0c7, 0x11d3, 0xb9, 0x84, 0x00, 0xc0, 0x4f, 0x2e, 0x73, 0xc5);
	public const Guid DXVA_ModeVC1_C = .(0x1b81bea2, 0xa0c7, 0x11d3, 0xb9, 0x84, 0x00, 0xc0, 0x4f, 0x2e, 0x73, 0xc5);
	public const Guid DXVA_ModeVC1_D = .(0x1b81bea3, 0xa0c7, 0x11d3, 0xb9, 0x84, 0x00, 0xc0, 0x4f, 0x2e, 0x73, 0xc5);
	public const Guid DXVA_ModeVC1_D2010 = .(0x1b81bea4, 0xa0c7, 0x11d3, 0xb9, 0x84, 0x00, 0xc0, 0x4f, 0x2e, 0x73, 0xc5);
	public const Guid DXVA_ModeMPEG4pt2_VLD_Simple = .(0xefd64d74, 0xc9e8, 0x41d7, 0xa5, 0xe9, 0xe9, 0xb0, 0xe3, 0x9f, 0xa3, 0x19);
	public const Guid DXVA_ModeMPEG4pt2_VLD_AdvSimple_NoGMC = .(0xed418a9f, 0x010d, 0x4eda, 0x9a, 0xe3, 0x9a, 0x65, 0x35, 0x8d, 0x8d, 0x2e);
	public const Guid DXVA_ModeMPEG4pt2_VLD_AdvSimple_GMC = .(0xab998b5b, 0x4258, 0x44a9, 0x9f, 0xeb, 0x94, 0xe5, 0x97, 0xa6, 0xba, 0xae);
	public const Guid DXVA_ModeHEVC_VLD_Main = .(0x5b11d51b, 0x2f4c, 0x4452, 0xbc, 0xc3, 0x09, 0xf2, 0xa1, 0x16, 0x0c, 0xc0);
	public const Guid DXVA_ModeHEVC_VLD_Main10 = .(0x107af0e0, 0xef1a, 0x4d19, 0xab, 0xa8, 0x67, 0xa1, 0x63, 0x07, 0x3d, 0x13);
	public const Guid DXVA_ModeVP9_VLD_Profile0 = .(0x463707f8, 0xa1d0, 0x4585, 0x87, 0x6d, 0x83, 0xaa, 0x6d, 0x60, 0xb8, 0x9e);
	public const Guid DXVA_ModeVP9_VLD_10bit_Profile2 = .(0xa4c749ef, 0x6ecf, 0x48aa, 0x84, 0x48, 0x50, 0xa7, 0xa1, 0x16, 0x5f, 0xf7);
	public const Guid DXVA_ModeVP8_VLD = .(0x90b899ea, 0x3a62, 0x4705, 0x88, 0xb3, 0x8d, 0xf0, 0x4b, 0x27, 0x44, 0xe7);
	public const Guid DXVA_ModeAV1_VLD_Profile0 = .(0xb8be4ccb, 0xcf53, 0x46ba, 0x8d, 0x59, 0xd6, 0xb8, 0xa6, 0xda, 0x5d, 0x2a);
	public const Guid DXVA_ModeAV1_VLD_Profile1 = .(0x6936ff0f, 0x45b1, 0x4163, 0x9c, 0xc1, 0x64, 0x6e, 0xf6, 0x94, 0x61, 0x08);
	public const Guid DXVA_ModeAV1_VLD_Profile2 = .(0x0c5f2aa1, 0xe541, 0x4089, 0xbb, 0x7b, 0x98, 0x11, 0x0a, 0x19, 0xd7, 0xc8);
	public const Guid DXVA_ModeAV1_VLD_12bit_Profile2 = .(0x17127009, 0xa00f, 0x4ce1, 0x99, 0x4e, 0xbf, 0x40, 0x81, 0xf6, 0xf3, 0xf0);
	public const Guid DXVA_ModeAV1_VLD_12bit_Profile2_420 = .(0x2d80bed6, 0x9cac, 0x4835, 0x9e, 0x91, 0x32, 0x7b, 0xbc, 0x4f, 0x9e, 0xe8);
	public const Guid DXVA_NoEncrypt = .(0x1b81bed0, 0xa0c7, 0x11d3, 0xb9, 0x84, 0x00, 0xc0, 0x4f, 0x2e, 0x73, 0xc5);
	public const uint32 DXVA_RESTRICTED_MODE_UNRESTRICTED = 65535;
	public const uint32 DXVA_RESTRICTED_MODE_H261_A = 1;
	public const uint32 DXVA_RESTRICTED_MODE_H261_B = 2;
	public const uint32 DXVA_RESTRICTED_MODE_H263_A = 3;
	public const uint32 DXVA_RESTRICTED_MODE_H263_B = 4;
	public const uint32 DXVA_RESTRICTED_MODE_H263_C = 5;
	public const uint32 DXVA_RESTRICTED_MODE_H263_D = 6;
	public const uint32 DXVA_RESTRICTED_MODE_H263_E = 7;
	public const uint32 DXVA_RESTRICTED_MODE_H263_F = 8;
	public const uint32 DXVA_RESTRICTED_MODE_MPEG1_A = 9;
	public const uint32 DXVA_RESTRICTED_MODE_MPEG2_A = 10;
	public const uint32 DXVA_RESTRICTED_MODE_MPEG2_B = 11;
	public const uint32 DXVA_RESTRICTED_MODE_MPEG2_C = 12;
	public const uint32 DXVA_RESTRICTED_MODE_MPEG2_D = 13;
	public const uint32 DXVA_RESTRICTED_MODE_MPEG1_VLD = 16;
	public const uint32 DXVA_RESTRICTED_MODE_MPEG2and1_VLD = 17;
	public const uint32 DXVA_RESTRICTED_MODE_H264_A = 100;
	public const uint32 DXVA_RESTRICTED_MODE_H264_B = 101;
	public const uint32 DXVA_RESTRICTED_MODE_H264_C = 102;
	public const uint32 DXVA_RESTRICTED_MODE_H264_D = 103;
	public const uint32 DXVA_RESTRICTED_MODE_H264_E = 104;
	public const uint32 DXVA_RESTRICTED_MODE_H264_F = 105;
	public const uint32 DXVA_RESTRICTED_MODE_H264_VLD_WITHFMOASO_NOFGT = 112;
	public const uint32 DXVA_RESTRICTED_MODE_H264_VLD_STEREO_PROGRESSIVE_NOFGT = 113;
	public const uint32 DXVA_RESTRICTED_MODE_H264_VLD_STEREO_NOFGT = 114;
	public const uint32 DXVA_RESTRICTED_MODE_H264_VLD_MULTIVIEW_NOFGT = 115;
	public const uint32 DXVA_RESTRICTED_MODE_WMV8_A = 128;
	public const uint32 DXVA_RESTRICTED_MODE_WMV8_B = 129;
	public const uint32 DXVA_RESTRICTED_MODE_WMV9_A = 144;
	public const uint32 DXVA_RESTRICTED_MODE_WMV9_B = 145;
	public const uint32 DXVA_RESTRICTED_MODE_WMV9_C = 148;
	public const uint32 DXVA_RESTRICTED_MODE_VC1_A = 160;
	public const uint32 DXVA_RESTRICTED_MODE_VC1_B = 161;
	public const uint32 DXVA_RESTRICTED_MODE_VC1_C = 162;
	public const uint32 DXVA_RESTRICTED_MODE_VC1_D = 163;
	public const uint32 DXVA_RESTRICTED_MODE_VC1_D2010 = 164;
	public const uint32 DXVA_RESTRICTED_MODE_MPEG4PT2_VLD_SIMPLE = 176;
	public const uint32 DXVA_RESTRICTED_MODE_MPEG4PT2_VLD_ADV_SIMPLE_NOGMC = 177;
	public const uint32 DXVA_RESTRICTED_MODE_MPEG4PT2_VLD_ADV_SIMPLE_GMC = 178;
	public const uint32 DXVA_RESTRICTED_MODE_WMV8_POSTPROC = 128;
	public const uint32 DXVA_RESTRICTED_MODE_WMV8_MOCOMP = 129;
	public const uint32 DXVA_RESTRICTED_MODE_WMV9_POSTPROC = 144;
	public const uint32 DXVA_RESTRICTED_MODE_WMV9_MOCOMP = 145;
	public const uint32 DXVA_RESTRICTED_MODE_WMV9_IDCT = 148;
	public const uint32 DXVA_RESTRICTED_MODE_VC1_POSTPROC = 160;
	public const uint32 DXVA_RESTRICTED_MODE_VC1_MOCOMP = 161;
	public const uint32 DXVA_RESTRICTED_MODE_VC1_IDCT = 162;
	public const uint32 DXVA_RESTRICTED_MODE_VC1_VLD = 163;
	public const uint32 DXVA_RESTRICTED_MODE_H264_MOCOMP_NOFGT = 100;
	public const uint32 DXVA_RESTRICTED_MODE_H264_MOCOMP_FGT = 101;
	public const uint32 DXVA_RESTRICTED_MODE_H264_IDCT_NOFGT = 102;
	public const uint32 DXVA_RESTRICTED_MODE_H264_IDCT_FGT = 103;
	public const uint32 DXVA_RESTRICTED_MODE_H264_VLD_NOFGT = 104;
	public const uint32 DXVA_RESTRICTED_MODE_H264_VLD_FGT = 105;
	public const uint32 DXVA_COMPBUFFER_TYPE_THAT_IS_NOT_USED = 0;
	public const uint32 DXVA_PICTURE_DECODE_BUFFER = 1;
	public const uint32 DXVA_MACROBLOCK_CONTROL_BUFFER = 2;
	public const uint32 DXVA_RESIDUAL_DIFFERENCE_BUFFER = 3;
	public const uint32 DXVA_DEBLOCKING_CONTROL_BUFFER = 4;
	public const uint32 DXVA_INVERSE_QUANTIZATION_MATRIX_BUFFER = 5;
	public const uint32 DXVA_SLICE_CONTROL_BUFFER = 6;
	public const uint32 DXVA_BITSTREAM_DATA_BUFFER = 7;
	public const uint32 DXVA_AYUV_BUFFER = 8;
	public const uint32 DXVA_IA44_SURFACE_BUFFER = 9;
	public const uint32 DXVA_DPXD_SURFACE_BUFFER = 10;
	public const uint32 DXVA_HIGHLIGHT_BUFFER = 11;
	public const uint32 DXVA_DCCMD_SURFACE_BUFFER = 12;
	public const uint32 DXVA_ALPHA_BLEND_COMBINATION_BUFFER = 13;
	public const uint32 DXVA_PICTURE_RESAMPLE_BUFFER = 14;
	public const uint32 DXVA_READ_BACK_BUFFER = 15;
	public const uint32 DXVA_MOTION_VECTOR_BUFFER = 16;
	public const uint32 DXVA_FILM_GRAIN_BUFFER = 17;
	public const uint32 DXVA_NUM_TYPES_COMP_BUFFERS = 18;
	public const uint32 DXVA_PICTURE_DECODING_FUNCTION = 1;
	public const uint32 DXVA_ALPHA_BLEND_DATA_LOAD_FUNCTION = 2;
	public const uint32 DXVA_ALPHA_BLEND_COMBINATION_FUNCTION = 3;
	public const uint32 DXVA_PICTURE_RESAMPLE_FUNCTION = 4;
	public const uint32 DXVA_DEBLOCKING_FILTER_FUNCTION = 5;
	public const uint32 DXVA_FILM_GRAIN_SYNTHESIS_FUNCTION = 6;
	public const uint32 DXVA_STATUS_REPORTING_FUNCTION = 7;
	public const uint32 DXVA_EXECUTE_RETURN_OK = 0;
	public const uint32 DXVA_EXECUTE_RETURN_DATA_ERROR_MINOR = 1;
	public const uint32 DXVA_EXECUTE_RETURN_DATA_ERROR_SIGNIF = 2;
	public const uint32 DXVA_EXECUTE_RETURN_DATA_ERROR_SEVERE = 3;
	public const uint32 DXVA_EXECUTE_RETURN_OTHER_ERROR_SEVERE = 4;
	public const uint32 DXVA_QUERYORREPLYFUNCFLAG_DECODER_PROBE_QUERY = 16777201;
	public const uint32 DXVA_QUERYORREPLYFUNCFLAG_DECODER_LOCK_QUERY = 16777205;
	public const uint32 DXVA_QUERYORREPLYFUNCFLAG_ACCEL_PROBE_OK_COPY = 16777208;
	public const uint32 DXVA_QUERYORREPLYFUNCFLAG_ACCEL_PROBE_OK_PLUS = 16777209;
	public const uint32 DXVA_QUERYORREPLYFUNCFLAG_ACCEL_LOCK_OK_COPY = 16777212;
	public const uint32 DXVA_QUERYORREPLYFUNCFLAG_ACCEL_PROBE_FALSE_PLUS = 16777211;
	public const uint32 DXVA_QUERYORREPLYFUNCFLAG_ACCEL_LOCK_FALSE_PLUS = 16777215;
	public const uint32 DXVA_ENCRYPTPROTOCOLFUNCFLAG_HOST = 16776960;
	public const uint32 DXVA_ENCRYPTPROTOCOLFUNCFLAG_ACCEL = 16776968;
	public const uint32 DXVA_CHROMA_FORMAT_420 = 1;
	public const uint32 DXVA_CHROMA_FORMAT_422 = 2;
	public const uint32 DXVA_CHROMA_FORMAT_444 = 3;
	public const uint32 DXVA_PICTURE_STRUCTURE_TOP_FIELD = 1;
	public const uint32 DXVA_PICTURE_STRUCTURE_BOTTOM_FIELD = 2;
	public const uint32 DXVA_PICTURE_STRUCTURE_FRAME = 3;
	public const uint32 DXVA_BIDIRECTIONAL_AVERAGING_MPEG2_ROUND = 0;
	public const uint32 DXVA_BIDIRECTIONAL_AVERAGING_H263_TRUNC = 1;
	public const uint32 DXVA_MV_PRECISION_AND_CHROMA_RELATION_MPEG2 = 0;
	public const uint32 DXVA_MV_PRECISION_AND_CHROMA_RELATION_H263 = 1;
	public const uint32 DXVA_MV_PRECISION_AND_CHROMA_RELATION_H261 = 2;
	public const uint32 DXVA_SCAN_METHOD_ZIG_ZAG = 0;
	public const uint32 DXVA_SCAN_METHOD_ALTERNATE_VERTICAL = 1;
	public const uint32 DXVA_SCAN_METHOD_ALTERNATE_HORIZONTAL = 2;
	public const uint32 DXVA_SCAN_METHOD_ARBITRARY = 3;
	public const uint32 DXVA_BITSTREAM_CONCEALMENT_NEED_UNLIKELY = 0;
	public const uint32 DXVA_BITSTREAM_CONCEALMENT_NEED_MILD = 1;
	public const uint32 DXVA_BITSTREAM_CONCEALMENT_NEED_LIKELY = 2;
	public const uint32 DXVA_BITSTREAM_CONCEALMENT_NEED_SEVERE = 3;
	public const uint32 DXVA_BITSTREAM_CONCEALMENT_METHOD_UNSPECIFIED = 0;
	public const uint32 DXVA_BITSTREAM_CONCEALMENT_METHOD_INTRA = 1;
	public const uint32 DXVA_BITSTREAM_CONCEALMENT_METHOD_FORWARD = 2;
	public const uint32 DXVA_BITSTREAM_CONCEALMENT_METHOD_BACKWARD = 3;
	public const uint32 DXVA_USUAL_BLOCK_WIDTH = 8;
	public const uint32 DXVA_USUAL_BLOCK_HEIGHT = 8;
	public const uint32 DXVA_NumMV_OBMC_off_BinPBwith4MV_off = 4;
	public const uint32 DXVA_NumMV_OBMC_off_BinPBwith4MV_on = 5;
	public const uint32 DXVA_NumMV_OBMC_on__BinPB_off = 10;
	public const uint32 DXVA_NumMV_OBMC_on__BinPB_on = 11;
	public const uint32 DXVA_CONFIG_DATA_TYPE_IA44 = 0;
	public const uint32 DXVA_CONFIG_DATA_TYPE_AI44 = 1;
	public const uint32 DXVA_CONFIG_DATA_TYPE_DPXD = 2;
	public const uint32 DXVA_CONFIG_DATA_TYPE_AYUV = 3;
	public const uint32 DXVA_CONFIG_BLEND_TYPE_FRONT_BUFFER = 0;
	public const uint32 DXVA_CONFIG_BLEND_TYPE_BACK_HARDWARE = 1;
	public const uint32 DXVA_ExtColorData_ShiftBase = 8;
	public const Guid DXVA_DeinterlaceBobDevice = .(0x335aa36e, 0x7884, 0x43a4, 0x9c, 0x91, 0x7f, 0x87, 0xfa, 0xf3, 0xe3, 0x7e);
	public const Guid DXVA_DeinterlaceContainerDevice = .(0x0e85cb93, 0x3046, 0x4ff0, 0xae, 0xcc, 0xd5, 0x8c, 0xb5, 0xf0, 0x35, 0xfd);
	public const uint32 MAX_DEINTERLACE_SURFACES = 32;
	public const uint32 DXVA_DeinterlaceBltFnCode = 1;
	public const uint32 DXVA_DeinterlaceBltExFnCode = 2;
	public const uint32 MAX_DEINTERLACE_DEVICE_GUIDS = 32;
	public const uint32 DXVA_DeinterlaceQueryAvailableModesFnCode = 1;
	public const uint32 DXVA_DeinterlaceQueryModeCapsFnCode = 2;
	public const Guid DXVA_ProcAmpControlDevice = .(0x9f200913, 0x2ffd, 0x4056, 0x9f, 0x1e, 0xe1, 0xb5, 0x08, 0xf2, 0x2d, 0xcf);
	public const uint32 DXVA_ProcAmpControlQueryCapsFnCode = 3;
	public const uint32 DXVA_ProcAmpControlQueryRangeFnCode = 4;
	public const uint32 DXVA_ProcAmpControlBltFnCode = 1;
	public const Guid DXVA_COPPDevice = .(0xd2457add, 0x8999, 0x45ed, 0x8a, 0x8a, 0xd1, 0xaa, 0x04, 0x7b, 0xa4, 0xd5);
	public const uint32 DXVA_COPPGetCertificateLengthFnCode = 1;
	public const uint32 DXVA_COPPKeyExchangeFnCode = 2;
	public const uint32 DXVA_COPPSequenceStartFnCode = 3;
	public const uint32 DXVA_COPPCommandFnCode = 4;
	public const Guid DXVA_COPPSetProtectionLevel = .(0x9bb9327c, 0x4eb5, 0x4727, 0x9f, 0x00, 0xb4, 0x2b, 0x09, 0x19, 0xc0, 0xda);
	public const int32 COPP_NoProtectionLevelAvailable = -1;
	public const uint32 COPP_DefaultProtectionLevel = 0;
	public const Guid DXVA_COPPSetSignaling = .(0x09a631a5, 0xd684, 0x4c60, 0x8e, 0x4d, 0xd3, 0xbb, 0x0f, 0x0b, 0xe3, 0xee);
	public const uint32 COPP_ImageAspectRatio_EN300294_Mask = 7;
	public const uint32 DXVA_COPPQueryStatusFnCode = 5;
	public const Guid DXVA_COPPQueryConnectorType = .(0x81d0bfd5, 0x6afe, 0x48c2, 0x99, 0xc0, 0x95, 0xa0, 0x8f, 0x97, 0xc5, 0xda);
	public const Guid DXVA_COPPQueryProtectionType = .(0x38f2a801, 0x9a6c, 0x48bb, 0x91, 0x07, 0xb6, 0x69, 0x6e, 0x6f, 0x17, 0x97);
	public const Guid DXVA_COPPQueryLocalProtectionLevel = .(0xb2075857, 0x3eda, 0x4d5d, 0x88, 0xdb, 0x74, 0x8f, 0x8c, 0x1a, 0x05, 0x49);
	public const Guid DXVA_COPPQueryGlobalProtectionLevel = .(0x1957210a, 0x7766, 0x452a, 0xb9, 0x9a, 0xd2, 0x7a, 0xed, 0x54, 0xf0, 0x3a);
	public const Guid DXVA_COPPQueryDisplayData = .(0xd7bf1ba3, 0xad13, 0x4f8e, 0xaf, 0x98, 0x0d, 0xcb, 0x3c, 0xa2, 0x04, 0xcc);
	public const Guid DXVA_COPPQueryHDCPKeyData = .(0x0db59d74, 0xa992, 0x492e, 0xa0, 0xbd, 0xc2, 0x3f, 0xda, 0x56, 0x4e, 0x00);
	public const Guid DXVA_COPPQueryBusData = .(0xc6f4d673, 0x6174, 0x4184, 0x8e, 0x35, 0xf6, 0xdb, 0x52, 0x00, 0xbc, 0xba);
	public const Guid DXVA_COPPQuerySignaling = .(0x6629a591, 0x3b79, 0x4cf3, 0x92, 0x4a, 0x11, 0xe8, 0xe7, 0x81, 0x16, 0x71);
	public const Guid DXVA2Trace_Control = .(0xa0386e75, 0xf70c, 0x464c, 0xa9, 0xce, 0x33, 0xc4, 0x4e, 0x09, 0x16, 0x23);
	public const Guid DXVA2Trace_DecodeDevCreated = .(0xb4de17a1, 0xc5b2, 0x44fe, 0x86, 0xd5, 0xd9, 0x7a, 0x64, 0x81, 0x14, 0xff);
	public const Guid DXVA2Trace_DecodeDevDestroyed = .(0x853ebdf2, 0x4160, 0x421d, 0x88, 0x93, 0x63, 0xdc, 0xea, 0x4f, 0x18, 0xbb);
	public const Guid DXVA2Trace_DecodeDevBeginFrame = .(0x9fd1acf6, 0x44cb, 0x4637, 0xbc, 0x62, 0x2c, 0x11, 0xa9, 0x60, 0x8f, 0x90);
	public const Guid DXVA2Trace_DecodeDevExecute = .(0x850aeb4c, 0xd19a, 0x4609, 0xb3, 0xb4, 0xbc, 0xbf, 0x0e, 0x22, 0x12, 0x1e);
	public const Guid DXVA2Trace_DecodeDevGetBuffer = .(0x57b128fb, 0x72cb, 0x4137, 0xa5, 0x75, 0xd9, 0x1f, 0xa3, 0x16, 0x08, 0x97);
	public const Guid DXVA2Trace_DecodeDevEndFrame = .(0x9fb3cb33, 0x47dc, 0x4899, 0x98, 0xc8, 0xc0, 0xc6, 0xcd, 0x7c, 0xd3, 0xcb);
	public const Guid DXVA2Trace_VideoProcessDevCreated = .(0x895508c6, 0x540d, 0x4c87, 0x98, 0xf8, 0x8d, 0xcb, 0xf2, 0xda, 0xbb, 0x2a);
	public const Guid DXVA2Trace_VideoProcessDevDestroyed = .(0xf97f30b1, 0xfb49, 0x42c7, 0x8e, 0xe8, 0x88, 0xbd, 0xfa, 0x92, 0xd4, 0xe2);
	public const Guid DXVA2Trace_VideoProcessBlt = .(0x69089cc0, 0x71ab, 0x42d0, 0x95, 0x3a, 0x28, 0x87, 0xbf, 0x05, 0xa8, 0xaf);
	public const uint32 DTV_CardStatus_Inserted = 0;
	public const uint32 DTV_CardStatus_Removed = 1;
	public const uint32 DTV_CardStatus_Error = 2;
	public const uint32 DTV_CardStatus_FirmwareDownload = 3;
	public const uint32 OCUR_PAIRING_PROTOCOL_VERSION = 2;
	public const uint32 PBDA_PAIRING_PROTOCOL_VERSION = 3;
	public const uint32 DTV_MMIMessage_Open = 0;
	public const uint32 DTV_MMIMessage_Close = 1;
	public const uint32 DTV_Entitlement_CanDecrypt = 0;
	public const uint32 DTV_Entitlement_NotEntitled = 1;
	public const uint32 DTV_Entitlement_TechnicalFailure = 2;
	public const uint32 AudioType_Standard = 0;
	public const uint32 AudioType_Music_And_Effects = 1;
	public const uint32 AudioType_Visually_Impaired = 2;
	public const uint32 AudioType_Hearing_Impaired = 3;
	public const uint32 AudioType_Dialogue = 4;
	public const uint32 AudioType_Commentary = 5;
	public const uint32 AudioType_Emergency = 6;
	public const uint32 AudioType_Voiceover = 7;
	public const int32 AudioType_Reserved = -1;
	public const uint32 MAX_COUNTRY_CODE_STRING = 3;
	public const uint32 PARENTAL_CONTROL_TIME_RANGE = 1;
	public const uint32 REQUIRED_PARENTAL_CONTROL_TIME_RANGE = 2;
	public const uint32 PARENTAL_CONTROL_CONTENT_RATING = 256;
	public const uint32 PARENTAL_CONTROL_ATTRIB_VIOLENCE = 512;
	public const uint32 PARENTAL_CONTROL_ATTRIB_LANGUAGE = 513;
	public const uint32 PARENTAL_CONTROL_ATTRIB_SEXUAL = 514;
	public const uint32 PARENTAL_CONTROL_ATTRIB_DIALOGUE = 515;
	public const uint32 PARENTAL_CONTROL_ATTRIB_FANTASY = 516;
	public const uint32 PARENTAL_CONTROL_VALUE_UNDEFINED = 0;
	public const uint32 MPEG2_FILTER_VERSION_1_SIZE = 124;
	public const uint32 MPEG2_FILTER_VERSION_2_SIZE = 133;
	public const Guid SID_MSVidCtl_CurrentAudioEndpoint = .(0xcf9a88f4, 0xabcf, 0x4ed8, 0x9b, 0x74, 0x7d, 0xb3, 0x34, 0x45, 0x45, 0x9e);
	public const uint32 STREAMBUFFER_EC_BASE = 806;
	public const Guid EVENTID_SBE2RecControlStarted = .(0x8966a89e, 0xf83e, 0x4c0e, 0xbc, 0x3b, 0xbf, 0xa7, 0x64, 0x9e, 0x04, 0xcb);
	public const Guid EVENTID_SBE2RecControlStopped = .(0x454b1ec8, 0x0c9b, 0x4caa, 0xb1, 0xa1, 0x1e, 0x7a, 0x26, 0x66, 0xf6, 0xc3);
	public const Guid SBE2_STREAM_DESC_EVENT = .(0x2313a4ed, 0xbf2d, 0x454f, 0xad, 0x8a, 0xd9, 0x5b, 0xa7, 0xf9, 0x1f, 0xee);
	public const Guid SBE2_V1_STREAMS_CREATION_EVENT = .(0x000fcf09, 0x97f5, 0x46ac, 0x97, 0x69, 0x7a, 0x83, 0xb3, 0x53, 0x84, 0xfb);
	public const Guid SBE2_V2_STREAMS_CREATION_EVENT = .(0xa72530a3, 0x0344, 0x4cab, 0xa2, 0xd0, 0xfe, 0x93, 0x7d, 0xbd, 0xca, 0xb3);
	public const uint32 SBE2_STREAM_DESC_VERSION = 1;
	public const Guid SID_DRMSecureServiceChannel = .(0xc4c4c4c4, 0x0049, 0x4e2b, 0x98, 0xfb, 0x95, 0x37, 0xf6, 0xce, 0x51, 0x6d);
	public const Guid CLSID_ETFilterEncProperties = .(0xc4c4c481, 0x0049, 0x4e2b, 0x98, 0xfb, 0x95, 0x37, 0xf6, 0xce, 0x51, 0x6d);
	public const Guid CLSID_ETFilterTagProperties = .(0xc4c4c491, 0x0049, 0x4e2b, 0x98, 0xfb, 0x95, 0x37, 0xf6, 0xce, 0x51, 0x6d);
	public const Guid CLSID_PTFilter = .(0x9cd31617, 0xb303, 0x4f96, 0x83, 0x30, 0x2e, 0xb1, 0x73, 0xea, 0x4d, 0xc6);
	public const Guid CLSID_DTFilterEncProperties = .(0xc4c4c482, 0x0049, 0x4e2b, 0x98, 0xfb, 0x95, 0x37, 0xf6, 0xce, 0x51, 0x6d);
	public const Guid CLSID_DTFilterTagProperties = .(0xc4c4c492, 0x0049, 0x4e2b, 0x98, 0xfb, 0x95, 0x37, 0xf6, 0xce, 0x51, 0x6d);
	public const Guid CLSID_XDSCodecProperties = .(0xc4c4c483, 0x0049, 0x4e2b, 0x98, 0xfb, 0x95, 0x37, 0xf6, 0xce, 0x51, 0x6d);
	public const Guid CLSID_XDSCodecTagProperties = .(0xc4c4c493, 0x0049, 0x4e2b, 0x98, 0xfb, 0x95, 0x37, 0xf6, 0xce, 0x51, 0x6d);
	public const Guid CLSID_CPCAFiltersCategory = .(0xc4c4c4fc, 0x0049, 0x4e2b, 0x98, 0xfb, 0x95, 0x37, 0xf6, 0xce, 0x51, 0x6d);
	public const Guid EVENTID_XDSCodecNewXDSRating = .(0xc4c4c4e0, 0x0049, 0x4e2b, 0x98, 0xfb, 0x95, 0x37, 0xf6, 0xce, 0x51, 0x6d);
	public const Guid EVENTID_XDSCodecDuplicateXDSRating = .(0xc4c4c4df, 0x0049, 0x4e2b, 0x98, 0xfb, 0x95, 0x37, 0xf6, 0xce, 0x51, 0x6d);
	public const Guid EVENTID_XDSCodecNewXDSPacket = .(0xc4c4c4e1, 0x0049, 0x4e2b, 0x98, 0xfb, 0x95, 0x37, 0xf6, 0xce, 0x51, 0x6d);
	public const Guid EVENTID_DTFilterRatingChange = .(0xc4c4c4e2, 0x0049, 0x4e2b, 0x98, 0xfb, 0x95, 0x37, 0xf6, 0xce, 0x51, 0x6d);
	public const Guid EVENTID_DTFilterRatingsBlock = .(0xc4c4c4e3, 0x0049, 0x4e2b, 0x98, 0xfb, 0x95, 0x37, 0xf6, 0xce, 0x51, 0x6d);
	public const Guid EVENTID_DTFilterRatingsUnblock = .(0xc4c4c4e4, 0x0049, 0x4e2b, 0x98, 0xfb, 0x95, 0x37, 0xf6, 0xce, 0x51, 0x6d);
	public const Guid EVENTID_DTFilterXDSPacket = .(0xc4c4c4e5, 0x0049, 0x4e2b, 0x98, 0xfb, 0x95, 0x37, 0xf6, 0xce, 0x51, 0x6d);
	public const Guid EVENTID_ETFilterEncryptionOn = .(0xc4c4c4e6, 0x0049, 0x4e2b, 0x98, 0xfb, 0x95, 0x37, 0xf6, 0xce, 0x51, 0x6d);
	public const Guid EVENTID_ETFilterEncryptionOff = .(0xc4c4c4e7, 0x0049, 0x4e2b, 0x98, 0xfb, 0x95, 0x37, 0xf6, 0xce, 0x51, 0x6d);
	public const Guid EVENTID_DTFilterCOPPUnblock = .(0xc4c4c4e8, 0x0049, 0x4e2b, 0x98, 0xfb, 0x95, 0x37, 0xf6, 0xce, 0x51, 0x6d);
	public const Guid EVENTID_EncDecFilterError = .(0xc4c4c4e9, 0x0049, 0x4e2b, 0x98, 0xfb, 0x95, 0x37, 0xf6, 0xce, 0x51, 0x6d);
	public const Guid EVENTID_DTFilterCOPPBlock = .(0xc4c4c4ea, 0x0049, 0x4e2b, 0x98, 0xfb, 0x95, 0x37, 0xf6, 0xce, 0x51, 0x6d);
	public const Guid EVENTID_ETFilterCopyOnce = .(0xc4c4c4eb, 0x0049, 0x4e2b, 0x98, 0xfb, 0x95, 0x37, 0xf6, 0xce, 0x51, 0x6d);
	public const Guid EVENTID_ETFilterCopyNever = .(0xc4c4c4f0, 0x0049, 0x4e2b, 0x98, 0xfb, 0x95, 0x37, 0xf6, 0xce, 0x51, 0x6d);
	public const Guid EVENTID_DTFilterDataFormatOK = .(0xc4c4c4ec, 0x0049, 0x4e2b, 0x98, 0xfb, 0x95, 0x37, 0xf6, 0xce, 0x51, 0x6d);
	public const Guid EVENTID_DTFilterDataFormatFailure = .(0xc4c4c4ed, 0x0049, 0x4e2b, 0x98, 0xfb, 0x95, 0x37, 0xf6, 0xce, 0x51, 0x6d);
	public const Guid EVENTID_ETDTFilterLicenseOK = .(0xc4c4c4ee, 0x0049, 0x4e2b, 0x98, 0xfb, 0x95, 0x37, 0xf6, 0xce, 0x51, 0x6d);
	public const Guid EVENTID_ETDTFilterLicenseFailure = .(0xc4c4c4ef, 0x0049, 0x4e2b, 0x98, 0xfb, 0x95, 0x37, 0xf6, 0xce, 0x51, 0x6d);
	public const Guid MEDIASUBTYPE_ETDTFilter_Tagged = .(0xc4c4c4d0, 0x0049, 0x4e2b, 0x98, 0xfb, 0x95, 0x37, 0xf6, 0xce, 0x51, 0x6d);
	public const Guid FORMATTYPE_ETDTFilter_Tagged = .(0xc4c4c4d1, 0x0049, 0x4e2b, 0x98, 0xfb, 0x95, 0x37, 0xf6, 0xce, 0x51, 0x6d);
	public const Guid MEDIASUBTYPE_CPFilters_Processed = .(0x46adbd28, 0x6fd0, 0x4796, 0x93, 0xb2, 0x15, 0x5c, 0x51, 0xdc, 0x04, 0x8d);
	public const Guid FORMATTYPE_CPFilters_Processed = .(0x6739b36f, 0x1d5f, 0x4ac2, 0x81, 0x92, 0x28, 0xbb, 0x0e, 0x73, 0xd1, 0x6a);
	public const Guid EVENTID_EncDecFilterEvent = .(0x4a1b465b, 0x0fb9, 0x4159, 0xaf, 0xbd, 0xe3, 0x30, 0x06, 0xa0, 0xf9, 0xf4);
	public const Guid EVENTID_FormatNotSupportedEvent = .(0x24b2280a, 0xb2aa, 0x4777, 0xbf, 0x65, 0x63, 0xf3, 0x5e, 0x7b, 0x02, 0x4a);
	public const Guid EVENTID_DemultiplexerFilterDiscontinuity = .(0x16155770, 0xaed5, 0x475c, 0xbb, 0x98, 0x95, 0xa3, 0x30, 0x70, 0xdf, 0x0c);
	public const Guid DSATTRIB_WMDRMProtectionInfo = .(0x40749583, 0x6b9d, 0x4eec, 0xb4, 0x3c, 0x67, 0xa1, 0x80, 0x1e, 0x1a, 0x9b);
	public const Guid DSATTRIB_BadSampleInfo = .(0xe4846dda, 0x5838, 0x42b4, 0xb8, 0x97, 0x6f, 0x7e, 0x5f, 0xaa, 0x2f, 0x2f);
	public const uint32 MPEG_PAT_PID = 0;
	public const uint32 MPEG_PAT_TID = 0;
	public const uint32 MPEG_CAT_PID = 1;
	public const uint32 MPEG_CAT_TID = 1;
	public const uint32 MPEG_PMT_TID = 2;
	public const uint32 MPEG_TSDT_PID = 2;
	public const uint32 MPEG_TSDT_TID = 3;
	public const uint32 ATSC_MGT_PID = 8187;
	public const uint32 ATSC_MGT_TID = 199;
	public const uint32 ATSC_VCT_PID = 8187;
	public const uint32 ATSC_VCT_TERR_TID = 200;
	public const uint32 ATSC_VCT_CABL_TID = 201;
	public const uint32 ATSC_EIT_TID = 203;
	public const uint32 ATSC_ETT_TID = 204;
	public const uint32 ATSC_RRT_TID = 202;
	public const uint32 ATSC_RRT_PID = 8187;
	public const uint32 ATSC_STT_PID = 8187;
	public const uint32 ATSC_STT_TID = 205;
	public const uint32 ATSC_PIT_TID = 208;
	public const uint32 DVB_NIT_PID = 16;
	public const uint32 DVB_NIT_ACTUAL_TID = 64;
	public const uint32 DVB_NIT_OTHER_TID = 65;
	public const uint32 DVB_SDT_PID = 17;
	public const uint32 DVB_SDT_ACTUAL_TID = 66;
	public const uint32 DVB_SDT_OTHER_TID = 70;
	public const uint32 DVB_BAT_PID = 17;
	public const uint32 DVB_BAT_TID = 74;
	public const uint32 DVB_EIT_PID = 18;
	public const uint32 DVB_EIT_ACTUAL_TID = 78;
	public const uint32 DVB_EIT_OTHER_TID = 79;
	public const uint32 DVB_RST_PID = 19;
	public const uint32 DVB_RST_TID = 113;
	public const uint32 DVB_TDT_PID = 20;
	public const uint32 DVB_TDT_TID = 112;
	public const uint32 DVB_ST_PID_16 = 16;
	public const uint32 DVB_ST_PID_17 = 17;
	public const uint32 DVB_ST_PID_18 = 18;
	public const uint32 DVB_ST_PID_19 = 19;
	public const uint32 DVB_ST_PID_20 = 20;
	public const uint32 DVB_ST_TID = 114;
	public const uint32 ISDB_ST_TID = 114;
	public const uint32 DVB_TOT_PID = 20;
	public const uint32 DVB_TOT_TID = 115;
	public const uint32 DVB_DIT_PID = 30;
	public const uint32 DVB_DIT_TID = 126;
	public const uint32 DVB_SIT_PID = 31;
	public const uint32 DVB_SIT_TID = 127;
	public const uint32 ISDB_EMM_TID = 133;
	public const uint32 ISDB_BIT_PID = 36;
	public const uint32 ISDB_BIT_TID = 196;
	public const uint32 ISDB_NBIT_PID = 37;
	public const uint32 ISDB_NBIT_MSG_TID = 197;
	public const uint32 ISDB_NBIT_REF_TID = 198;
	public const uint32 ISDB_LDT_PID = 37;
	public const uint32 ISDB_LDT_TID = 199;
	public const uint32 ISDB_SDTT_PID = 35;
	public const uint32 ISDB_SDTT_ALT_PID = 40;
	public const uint32 ISDB_SDTT_TID = 195;
	public const uint32 ISDB_CDT_PID = 41;
	public const uint32 ISDB_CDT_TID = 200;
	public const uint32 SCTE_EAS_TID = 216;
	public const uint32 SCTE_EAS_IB_PID = 8187;
	public const uint32 SCTE_EAS_OOB_PID = 8188;
	public const Guid CLSID_Mpeg2TableFilter = .(0x752845f1, 0x758f, 0x4c83, 0xa0, 0x43, 0x42, 0x70, 0xc5, 0x93, 0x30, 0x8e);
	public const uint32 ATSC_ETM_LOCATION_NOT_PRESENT = 0;
	public const uint32 ATSC_ETM_LOCATION_IN_PTC_FOR_PSIP = 1;
	public const uint32 ATSC_ETM_LOCATION_IN_PTC_FOR_EVENT = 2;
	public const uint32 ATSC_ETM_LOCATION_RESERVED = 3;
	public const uint32 SAMPLE_SEQ_SEQUENCE_HEADER = 1;
	public const uint32 SAMPLE_SEQ_GOP_HEADER = 2;
	public const uint32 SAMPLE_SEQ_PICTURE_HEADER = 3;
	public const uint32 SAMPLE_SEQ_SEQUENCE_START = 1;
	public const uint32 SAMPLE_SEQ_SEEK_POINT = 2;
	public const uint32 SAMPLE_SEQ_FRAME_START = 3;
	public const uint32 SAMPLE_SEQ_CONTENT_UNKNOWN = 0;
	public const uint32 SAMPLE_SEQ_CONTENT_I_FRAME = 1;
	public const uint32 SAMPLE_SEQ_CONTENT_P_FRAME = 2;
	public const uint32 SAMPLE_SEQ_CONTENT_B_FRAME = 3;
	public const uint32 SAMPLE_SEQ_CONTENT_STANDALONE_FRAME = 1;
	public const uint32 SAMPLE_SEQ_CONTENT_REF_FRAME = 2;
	public const uint32 SAMPLE_SEQ_CONTENT_NONREF_FRAME = 3;
	public const uint32 COMPONENT_TAG_CAPTION_MIN = 48;
	public const uint32 COMPONENT_TAG_CAPTION_MAX = 55;
	public const uint32 COMPONENT_TAG_SUPERIMPOSE_MIN = 56;
	public const uint32 COMPONENT_TAG_SUPERIMPOSE_MAX = 63;
	public const uint32 DVBS_SCAN_TABLE_MAX_SIZE = 400;
	public const String g_wszExcludeScriptStreamDeliverySynchronization = "ExcludeScriptStreamDeliverySynchronization";
	public const uint32 MPEG2_BASE = 512;
	public const HRESULT MPEG2_S_MORE_DATA_AVAILABLE = 262656;
	public const HRESULT MPEG2_S_NO_MORE_DATA_AVAILABLE = 262657;
	public const HRESULT MPEG2_S_SG_INFO_FOUND = 262658;
	public const HRESULT MPEG2_S_SG_INFO_NOT_FOUND = 262659;
	public const HRESULT MPEG2_S_MPE_INFO_FOUND = 262660;
	public const HRESULT MPEG2_S_MPE_INFO_NOT_FOUND = 262661;
	public const HRESULT MPEG2_S_NEW_MODULE_VERSION = 262662;
	public const HRESULT MPEG2_E_UNINITIALIZED = -2147220992;
	public const HRESULT MPEG2_E_ALREADY_INITIALIZED = -2147220991;
	public const HRESULT MPEG2_E_OUT_OF_BOUNDS = -2147220990;
	public const HRESULT MPEG2_E_MALFORMED_TABLE = -2147220989;
	public const HRESULT MPEG2_E_UNDEFINED = -2147220988;
	public const HRESULT MPEG2_E_NOT_PRESENT = -2147220987;
	public const HRESULT MPEG2_E_SECTION_NOT_FOUND = -2147220986;
	public const HRESULT MPEG2_E_TX_STREAM_UNAVAILABLE = -2147220985;
	public const HRESULT MPEG2_E_SERVICE_ID_NOT_FOUND = -2147220984;
	public const HRESULT MPEG2_E_SERVICE_PMT_NOT_FOUND = -2147220983;
	public const HRESULT MPEG2_E_DSI_NOT_FOUND = -2147220982;
	public const HRESULT MPEG2_E_SERVER_UNAVAILABLE = -2147220981;
	public const HRESULT MPEG2_E_INVALID_CAROUSEL_ID = -2147220980;
	public const HRESULT MPEG2_E_MALFORMED_DSMCC_MESSAGE = -2147220979;
	public const HRESULT MPEG2_E_INVALID_SG_OBJECT_KIND = -2147220978;
	public const HRESULT MPEG2_E_OBJECT_NOT_FOUND = -2147220977;
	public const HRESULT MPEG2_E_OBJECT_KIND_NOT_A_DIRECTORY = -2147220976;
	public const HRESULT MPEG2_E_OBJECT_KIND_NOT_A_FILE = -2147220975;
	public const HRESULT MPEG2_E_FILE_OFFSET_TOO_BIG = -2147220974;
	public const HRESULT MPEG2_E_STREAM_STOPPED = -2147220973;
	public const HRESULT MPEG2_E_REGISTRY_ACCESS_FAILED = -2147220972;
	public const HRESULT MPEG2_E_INVALID_UDP_PORT = -2147220971;
	public const HRESULT MPEG2_E_DATA_SOURCE_FAILED = -2147220970;
	public const HRESULT MPEG2_E_DII_NOT_FOUND = -2147220969;
	public const HRESULT MPEG2_E_DSHOW_PIN_NOT_FOUND = -2147220968;
	public const HRESULT MPEG2_E_BUFFER_TOO_SMALL = -2147220967;
	public const HRESULT MPEG2_E_MISSING_SECTIONS = -2147220966;
	public const HRESULT MPEG2_E_TOO_MANY_SECTIONS = -2147220965;
	public const HRESULT MPEG2_E_NEXT_TABLE_OPS_NOT_AVAILABLE = -2147220964;
	public const HRESULT MPEG2_E_INCORRECT_DESCRIPTOR_TAG = -2147220963;
	public const HRESULT MSDRI_S_MMI_PENDING = 2;
	public const HRESULT MSDRI_S_PENDING = 1;
	public const HRESULT BDA_E_FAILURE = -1073479679;
	public const HRESULT BDA_E_NOT_IMPLEMENTED = -1073479678;
	public const HRESULT BDA_E_NO_SUCH_COMMAND = -1073479677;
	public const HRESULT BDA_E_OUT_OF_BOUNDS = -1073479676;
	public const HRESULT BDA_E_INVALID_SCHEMA = -1073479675;
	public const HRESULT BDA_E_INVALID_HANDLE = -1073479674;
	public const HRESULT BDA_E_INVALID_TYPE = -1073479673;
	public const HRESULT BDA_E_READ_ONLY = -1073479672;
	public const HRESULT BDA_E_ACCESS_DENIED = -1073479671;
	public const HRESULT BDA_E_NOT_FOUND = -1073479670;
	public const HRESULT BDA_E_BUFFER_TOO_SMALL = -1073479669;
	public const HRESULT BDA_E_OUT_OF_RESOURCES = -1073479668;
	public const HRESULT BDA_E_OUT_OF_MEMORY = -1073479667;
	public const HRESULT BDA_E_DISABLED = -1073479666;
	public const HRESULT BDA_E_NO_HANDLER = -1073479665;
	public const HRESULT BDA_E_INVALID_LANGUAGE = -1073479664;
	public const HRESULT BDA_E_TIMEOUT_ELAPSED = -1073479663;
	public const HRESULT BDA_E_NO_MORE_EVENTS = -1073475583;
	public const HRESULT BDA_E_NO_MORE_DATA = -1073475582;
	public const HRESULT BDA_E_TUNER_INITIALIZING = -1073467391;
	public const HRESULT BDA_E_TUNER_REQUIRED = -1073467390;
	public const HRESULT BDA_E_TUNER_CONFLICT = -1073467389;
	public const HRESULT BDA_E_INVALID_TUNE_REQUEST = -1073467388;
	public const HRESULT BDA_E_INVALID_ENTITLEMENT_TOKEN = -1073463295;
	public const HRESULT BDA_E_INVALID_CAPTURE_TOKEN = -1073463294;
	public const HRESULT BDA_E_WOULD_DISRUPT_STREAMING = -1073463293;
	public const HRESULT BDA_E_INVALID_PURCHASE_TOKEN = -1073463292;
	public const HRESULT BDA_E_IPNETWORK_ERROR = -1073459199;
	public const HRESULT BDA_E_IPNETWORK_ADDRESS_NOT_FOUND = -1073459198;
	public const HRESULT BDA_E_IPNETWORK_TIMEOUT = -1073459197;
	public const HRESULT BDA_E_IPNETWORK_UNAVAILABLE = -1073459196;
	public const HRESULT BDA_E_TUNE_FAILED_SDV01 = -1073455103;
	public const HRESULT BDA_E_TUNE_FAILED_SDV02 = -1073455102;
	public const HRESULT BDA_E_TUNE_FAILED_SDV03 = -1073455101;
	public const HRESULT BDA_E_TUNE_FAILED_SDV04 = -1073455100;
	public const HRESULT BDA_E_TUNE_FAILED_SDV05 = -1073455099;
	public const HRESULT BDA_E_TUNE_FAILED_SDV06 = -1073455098;
	public const HRESULT BDA_E_TUNE_FAILED_SDV07 = -1073455097;
	public const HRESULT BDA_E_TUNE_FAILED_SDV08 = -1073455096;
	public const HRESULT BDA_E_TUNE_FAILED_SDVFF = -1073454849;
	public const HRESULT BDA_E_WMDRM_INVALID_SIGNATURE = -1073418239;
	public const HRESULT BDA_E_WMDRM_INVALID_CERTIFICATE = -1073418238;
	public const HRESULT BDA_E_WMDRM_INVALID_VERSION = -1073418236;
	public const HRESULT BDA_E_WMDRM_INVALID_DATE = -1073418235;
	public const HRESULT BDA_E_WMDRM_INVALID_PROXIMITY = -1073418234;
	public const HRESULT BDA_E_WMDRM_KEY_ID_NOT_FOUND = -1073418232;
	public const Guid SPECIFYPAGES_STATISTICS = .(0x4c437b92, 0x6e9e, 0x11d1, 0xa7, 0x04, 0x00, 0x60, 0x97, 0xc4, 0xe4, 0x76);
	public const String g_wszStreamBufferRecordingDuration = "Duration";
	public const String g_wszStreamBufferRecordingBitrate = "Bitrate";
	public const String g_wszStreamBufferRecordingSeekable = "Seekable";
	public const String g_wszStreamBufferRecordingStridable = "Stridable";
	public const String g_wszStreamBufferRecordingBroadcast = "Broadcast";
	public const String g_wszStreamBufferRecordingProtected = "Is_Protected";
	public const String g_wszStreamBufferRecordingTrusted = "Is_Trusted";
	public const String g_wszStreamBufferRecordingSignature_Name = "Signature_Name";
	public const String g_wszStreamBufferRecordingHasAudio = "HasAudio";
	public const String g_wszStreamBufferRecordingHasImage = "HasImage";
	public const String g_wszStreamBufferRecordingHasScript = "HasScript";
	public const String g_wszStreamBufferRecordingHasVideo = "HasVideo";
	public const String g_wszStreamBufferRecordingCurrentBitrate = "CurrentBitrate";
	public const String g_wszStreamBufferRecordingOptimalBitrate = "OptimalBitrate";
	public const String g_wszStreamBufferRecordingHasAttachedImages = "HasAttachedImages";
	public const String g_wszStreamBufferRecordingSkipBackward = "Can_Skip_Backward";
	public const String g_wszStreamBufferRecordingSkipForward = "Can_Skip_Forward";
	public const String g_wszStreamBufferRecordingNumberOfFrames = "NumberOfFrames";
	public const String g_wszStreamBufferRecordingFileSize = "FileSize";
	public const String g_wszStreamBufferRecordingHasArbitraryDataStream = "HasArbitraryDataStream";
	public const String g_wszStreamBufferRecordingHasFileTransferStream = "HasFileTransferStream";
	public const String g_wszStreamBufferRecordingTitle = "Title";
	public const String g_wszStreamBufferRecordingAuthor = "Author";
	public const String g_wszStreamBufferRecordingDescription = "Description";
	public const String g_wszStreamBufferRecordingRating = "Rating";
	public const String g_wszStreamBufferRecordingCopyright = "Copyright";
	public const String g_wszStreamBufferRecordingUse_DRM = "Use_DRM";
	public const String g_wszStreamBufferRecordingDRM_Flags = "DRM_Flags";
	public const String g_wszStreamBufferRecordingDRM_Level = "DRM_Level";
	public const String g_wszStreamBufferRecordingAlbumTitle = "WM/AlbumTitle";
	public const String g_wszStreamBufferRecordingTrack = "WM/Track";
	public const String g_wszStreamBufferRecordingPromotionURL = "WM/PromotionURL";
	public const String g_wszStreamBufferRecordingAlbumCoverURL = "WM/AlbumCoverURL";
	public const String g_wszStreamBufferRecordingGenre = "WM/Genre";
	public const String g_wszStreamBufferRecordingYear = "WM/Year";
	public const String g_wszStreamBufferRecordingGenreID = "WM/GenreID";
	public const String g_wszStreamBufferRecordingMCDI = "WM/MCDI";
	public const String g_wszStreamBufferRecordingComposer = "WM/Composer";
	public const String g_wszStreamBufferRecordingLyrics = "WM/Lyrics";
	public const String g_wszStreamBufferRecordingTrackNumber = "WM/TrackNumber";
	public const String g_wszStreamBufferRecordingToolName = "WM/ToolName";
	public const String g_wszStreamBufferRecordingToolVersion = "WM/ToolVersion";
	public const String g_wszStreamBufferRecordingIsVBR = "IsVBR";
	public const String g_wszStreamBufferRecordingAlbumArtist = "WM/AlbumArtist";
	public const String g_wszStreamBufferRecordingBannerImageType = "BannerImageType";
	public const String g_wszStreamBufferRecordingBannerImageData = "BannerImageData";
	public const String g_wszStreamBufferRecordingBannerImageURL = "BannerImageURL";
	public const String g_wszStreamBufferRecordingCopyrightURL = "CopyrightURL";
	public const String g_wszStreamBufferRecordingAspectRatioX = "AspectRatioX";
	public const String g_wszStreamBufferRecordingAspectRatioY = "AspectRatioY";
	public const String g_wszStreamBufferRecordingNSCName = "NSC_Name";
	public const String g_wszStreamBufferRecordingNSCAddress = "NSC_Address";
	public const String g_wszStreamBufferRecordingNSCPhone = "NSC_Phone";
	public const String g_wszStreamBufferRecordingNSCEmail = "NSC_Email";
	public const String g_wszStreamBufferRecordingNSCDescription = "NSC_Description";
	public const int32 STREAMBUFFER_EC_TIMEHOLE = 806;
	public const int32 STREAMBUFFER_EC_STALE_DATA_READ = 807;
	public const int32 STREAMBUFFER_EC_STALE_FILE_DELETED = 808;
	public const int32 STREAMBUFFER_EC_CONTENT_BECOMING_STALE = 809;
	public const int32 STREAMBUFFER_EC_WRITE_FAILURE = 810;
	public const int32 STREAMBUFFER_EC_WRITE_FAILURE_CLEAR = 811;
	public const int32 STREAMBUFFER_EC_READ_FAILURE = 812;
	public const int32 STREAMBUFFER_EC_RATE_CHANGED = 813;
	public const int32 STREAMBUFFER_EC_PRIMARY_AUDIO = 814;
	public const int32 STREAMBUFFER_EC_RATE_CHANGING_FOR_SETPOSITIONS = 815;
	public const int32 STREAMBUFFER_EC_SETPOSITIONS_EVENTS_DONE = 816;
}
#endregion

#region Enums

[AllowDuplicates]
public enum OA_BOOL : int32
{
	OATRUE = -1,
	OAFALSE = 0,
}


[AllowDuplicates]
public enum MPEG2VIDEOINFO_FLAGS : uint32
{
	AMMPEG2_DoPanScan = 1,
	AMMPEG2_DVDLine21Field1 = 2,
	AMMPEG2_DVDLine21Field2 = 4,
	AMMPEG2_SourceIsLetterboxed = 8,
	AMMPEG2_FilmCameraMode = 16,
	AMMPEG2_LetterboxAnalogOut = 32,
	AMMPEG2_DSS_UserData = 64,
	AMMPEG2_DVB_UserData = 128,
	AMMPEG2_27MhzTimebase = 256,
	AMMPEG2_WidescreenAnalogOut = 512,
}


[AllowDuplicates]
public enum MPEGLAYER3WAVEFORMAT_FLAGS : uint32
{
	MPEGLAYER3_FLAG_PADDING_ISO = 0,
	MPEGLAYER3_FLAG_PADDING_ON = 1,
	MPEGLAYER3_FLAG_PADDING_OFF = 2,
}


[AllowDuplicates]
public enum AMVP_SELECT_FORMAT_BY : int32
{
	AMVP_DO_NOT_CARE = 0,
	AMVP_BEST_BANDWIDTH = 1,
	AMVP_INPUT_SAME_AS_OUTPUT = 2,
}


[AllowDuplicates]
public enum AMVP_MODE : int32
{
	AMVP_MODE_WEAVE = 0,
	AMVP_MODE_BOBINTERLEAVED = 1,
	AMVP_MODE_BOBNONINTERLEAVED = 2,
	AMVP_MODE_SKIPEVEN = 3,
	AMVP_MODE_SKIPODD = 4,
}


[AllowDuplicates]
public enum PIN_DIRECTION : int32
{
	PINDIR_INPUT = 0,
	PINDIR_OUTPUT = 1,
}


[AllowDuplicates]
public enum FILTER_STATE : int32
{
	State_Stopped = 0,
	State_Paused = 1,
	State_Running = 2,
}


[AllowDuplicates]
public enum AM_SAMPLE_PROPERTY_FLAGS : int32
{
	AM_SAMPLE_SPLICEPOINT = 1,
	AM_SAMPLE_PREROLL = 2,
	AM_SAMPLE_DATADISCONTINUITY = 4,
	AM_SAMPLE_TYPECHANGED = 8,
	AM_SAMPLE_TIMEVALID = 16,
	AM_SAMPLE_TIMEDISCONTINUITY = 64,
	AM_SAMPLE_FLUSH_ON_PAUSE = 128,
	AM_SAMPLE_STOPVALID = 256,
	AM_SAMPLE_ENDOFSTREAM = 512,
	AM_STREAM_MEDIA = 0,
	AM_STREAM_CONTROL = 1,
}


[AllowDuplicates]
public enum AM_SEEKING_SeekingFlags : int32
{
	AM_SEEKING_NoPositioning = 0,
	AM_SEEKING_AbsolutePositioning = 1,
	AM_SEEKING_RelativePositioning = 2,
	AM_SEEKING_IncrementalPositioning = 3,
	AM_SEEKING_PositioningBitsMask = 3,
	AM_SEEKING_SeekToKeyFrame = 4,
	AM_SEEKING_ReturnTime = 8,
	AM_SEEKING_Segment = 16,
	AM_SEEKING_NoFlush = 32,
}


[AllowDuplicates]
public enum AM_SEEKING_SEEKING_CAPABILITIES : int32
{
	AM_SEEKING_CanSeekAbsolute = 1,
	AM_SEEKING_CanSeekForwards = 2,
	AM_SEEKING_CanSeekBackwards = 4,
	AM_SEEKING_CanGetCurrentPos = 8,
	AM_SEEKING_CanGetStopPos = 16,
	AM_SEEKING_CanGetDuration = 32,
	AM_SEEKING_CanPlayBackwards = 64,
	AM_SEEKING_CanDoSegments = 128,
	AM_SEEKING_Source = 256,
}


[AllowDuplicates]
public enum AM_MEDIAEVENT_FLAGS : int32
{
	AM_MEDIAEVENT_NONOTIFY = 1,
}


[AllowDuplicates]
public enum IFILTERMAPPER_MERIT : int32
{
	MERIT_PREFERRED = 8388608,
	MERIT_NORMAL = 6291456,
	MERIT_UNLIKELY = 4194304,
	MERIT_DO_NOT_USE = 2097152,
	MERIT_SW_COMPRESSOR = 1048576,
	MERIT_HW_COMPRESSOR = 1048656,
}


[AllowDuplicates]
public enum REG_PINFLAG : uint32
{
	REG_PINFLAG_B_ZERO = 1,
	REG_PINFLAG_B_RENDERER = 2,
	REG_PINFLAG_B_MANY = 4,
	REG_PINFLAG_B_OUTPUT = 8,
}


[AllowDuplicates]
public enum QualityMessageType : int32
{
	Famine = 0,
	Flood = 1,
}


[AllowDuplicates]
public enum COLORKEY_TYPE : int32
{
	CK_NOCOLORKEY = 0,
	CK_INDEX = 1,
	CK_RGB = 2,
}


[AllowDuplicates]
public enum ADVISE_TYPE : uint32
{
	ADVISE_NONE = 0,
	ADVISE_CLIPPING = 1,
	ADVISE_PALETTE = 2,
	ADVISE_COLORKEY = 4,
	ADVISE_POSITION = 8,
	ADVISE_DISPLAY_CHANGE = 16,
}


[AllowDuplicates]
public enum AM_FILESINK_FLAGS : int32
{
	AM_FILE_OVERWRITE = 1,
}


[AllowDuplicates]
public enum _AM_RENSDEREXFLAGS : int32
{
	AM_RENDEREX_RENDERTOEXISTINGRENDERERS = 1,
}


[AllowDuplicates]
public enum AM_STREAM_INFO_FLAGS : int32
{
	AM_STREAM_INFO_START_DEFINED = 1,
	AM_STREAM_INFO_STOP_DEFINED = 2,
	AM_STREAM_INFO_DISCARDING = 4,
	AM_STREAM_INFO_STOP_SEND_EXTRA = 16,
}


[AllowDuplicates]
public enum InterleavingMode : int32
{
	INTERLEAVE_NONE = 0,
	INTERLEAVE_CAPTURE = 1,
	INTERLEAVE_FULL = 2,
	INTERLEAVE_NONE_BUFFERED = 3,
}


[AllowDuplicates]
public enum CompressionCaps : int32
{
	CompressionCaps_CanQuality = 1,
	CompressionCaps_CanCrunch = 2,
	CompressionCaps_CanKeyFrame = 4,
	CompressionCaps_CanBFrame = 8,
	CompressionCaps_CanWindow = 16,
}


[AllowDuplicates]
public enum VfwCaptureDialogs : int32
{
	VfwCaptureDialog_Source = 1,
	VfwCaptureDialog_Format = 2,
	VfwCaptureDialog_Display = 4,
}


[AllowDuplicates]
public enum VfwCompressDialogs : int32
{
	VfwCompressDialog_Config = 1,
	VfwCompressDialog_About = 2,
	VfwCompressDialog_QueryConfig = 4,
	VfwCompressDialog_QueryAbout = 8,
}


[AllowDuplicates]
public enum AnalogVideoStandard : int32
{
	AnalogVideo_None = 0,
	AnalogVideo_NTSC_M = 1,
	AnalogVideo_NTSC_M_J = 2,
	AnalogVideo_NTSC_433 = 4,
	AnalogVideo_PAL_B = 16,
	AnalogVideo_PAL_D = 32,
	AnalogVideo_PAL_G = 64,
	AnalogVideo_PAL_H = 128,
	AnalogVideo_PAL_I = 256,
	AnalogVideo_PAL_M = 512,
	AnalogVideo_PAL_N = 1024,
	AnalogVideo_PAL_60 = 2048,
	AnalogVideo_SECAM_B = 4096,
	AnalogVideo_SECAM_D = 8192,
	AnalogVideo_SECAM_G = 16384,
	AnalogVideo_SECAM_H = 32768,
	AnalogVideo_SECAM_K = 65536,
	AnalogVideo_SECAM_K1 = 131072,
	AnalogVideo_SECAM_L = 262144,
	AnalogVideo_SECAM_L1 = 524288,
	AnalogVideo_PAL_N_COMBO = 1048576,
	AnalogVideoMask_MCE_NTSC = 1052167,
	AnalogVideoMask_MCE_PAL = 496,
	AnalogVideoMask_MCE_SECAM = 1044480,
}


[AllowDuplicates]
public enum TunerInputType : int32
{
	TunerInputCable = 0,
	TunerInputAntenna = 1,
}


[AllowDuplicates]
public enum VideoCopyProtectionType : int32
{
	VideoCopyProtectionMacrovisionBasic = 0,
	VideoCopyProtectionMacrovisionCBI = 1,
}


[AllowDuplicates]
public enum PhysicalConnectorType : int32
{
	PhysConn_Video_Tuner = 1,
	PhysConn_Video_Composite = 2,
	PhysConn_Video_SVideo = 3,
	PhysConn_Video_RGB = 4,
	PhysConn_Video_YRYBY = 5,
	PhysConn_Video_SerialDigital = 6,
	PhysConn_Video_ParallelDigital = 7,
	PhysConn_Video_SCSI = 8,
	PhysConn_Video_AUX = 9,
	PhysConn_Video_1394 = 10,
	PhysConn_Video_USB = 11,
	PhysConn_Video_VideoDecoder = 12,
	PhysConn_Video_VideoEncoder = 13,
	PhysConn_Video_SCART = 14,
	PhysConn_Video_Black = 15,
	PhysConn_Audio_Tuner = 4096,
	PhysConn_Audio_Line = 4097,
	PhysConn_Audio_Mic = 4098,
	PhysConn_Audio_AESDigital = 4099,
	PhysConn_Audio_SPDIFDigital = 4100,
	PhysConn_Audio_SCSI = 4101,
	PhysConn_Audio_AUX = 4102,
	PhysConn_Audio_1394 = 4103,
	PhysConn_Audio_USB = 4104,
	PhysConn_Audio_AudioDecoder = 4105,
}


[AllowDuplicates]
public enum VideoProcAmpProperty : int32
{
	VideoProcAmp_Brightness = 0,
	VideoProcAmp_Contrast = 1,
	VideoProcAmp_Hue = 2,
	VideoProcAmp_Saturation = 3,
	VideoProcAmp_Sharpness = 4,
	VideoProcAmp_Gamma = 5,
	VideoProcAmp_ColorEnable = 6,
	VideoProcAmp_WhiteBalance = 7,
	VideoProcAmp_BacklightCompensation = 8,
	VideoProcAmp_Gain = 9,
}


[AllowDuplicates]
public enum VideoProcAmpFlags : int32
{
	VideoProcAmp_Flags_Auto = 1,
	VideoProcAmp_Flags_Manual = 2,
}


[AllowDuplicates]
public enum CameraControlProperty : int32
{
	CameraControl_Pan = 0,
	CameraControl_Tilt = 1,
	CameraControl_Roll = 2,
	CameraControl_Zoom = 3,
	CameraControl_Exposure = 4,
	CameraControl_Iris = 5,
	CameraControl_Focus = 6,
}


[AllowDuplicates]
public enum CameraControlFlags : int32
{
	CameraControl_Flags_Auto = 1,
	CameraControl_Flags_Manual = 2,
}


[AllowDuplicates]
public enum VideoControlFlags : int32
{
	VideoControlFlag_FlipHorizontal = 1,
	VideoControlFlag_FlipVertical = 2,
	VideoControlFlag_ExternalTriggerEnable = 4,
	VideoControlFlag_Trigger = 8,
}


[AllowDuplicates]
public enum AMTunerSubChannel : int32
{
	AMTUNER_SUBCHAN_NO_TUNE = -2,
	AMTUNER_SUBCHAN_DEFAULT = -1,
}


[AllowDuplicates]
public enum AMTunerSignalStrength : int32
{
	AMTUNER_HASNOSIGNALSTRENGTH = -1,
	AMTUNER_NOSIGNAL = 0,
	AMTUNER_SIGNALPRESENT = 1,
}


[AllowDuplicates]
public enum AMTunerModeType : int32
{
	AMTUNER_MODE_DEFAULT = 0,
	AMTUNER_MODE_TV = 1,
	AMTUNER_MODE_FM_RADIO = 2,
	AMTUNER_MODE_AM_RADIO = 4,
	AMTUNER_MODE_DSS = 8,
}


[AllowDuplicates]
public enum AMTunerEventType : int32
{
	AMTUNER_EVENT_CHANGED = 1,
}


[AllowDuplicates]
public enum TVAudioMode : int32
{
	AMTVAUDIO_MODE_MONO = 1,
	AMTVAUDIO_MODE_STEREO = 2,
	AMTVAUDIO_MODE_LANG_A = 16,
	AMTVAUDIO_MODE_LANG_B = 32,
	AMTVAUDIO_MODE_LANG_C = 64,
	AMTVAUDIO_PRESET_STEREO = 512,
	AMTVAUDIO_PRESET_LANG_A = 4096,
	AMTVAUDIO_PRESET_LANG_B = 8192,
	AMTVAUDIO_PRESET_LANG_C = 16384,
}


[AllowDuplicates]
public enum AMTVAudioEventType : int32
{
	AMTVAUDIO_EVENT_CHANGED = 1,
}


[AllowDuplicates]
public enum AMPROPERTY_PIN : int32
{
	AMPROPERTY_PIN_CATEGORY = 0,
	AMPROPERTY_PIN_MEDIUM = 1,
}


[AllowDuplicates]
public enum _AMSTREAMSELECTINFOFLAGS : int32
{
	AMSTREAMSELECTINFO_ENABLED = 1,
	AMSTREAMSELECTINFO_EXCLUSIVE = 2,
}


[AllowDuplicates]
public enum _AMSTREAMSELECTENABLEFLAGS : int32
{
	AMSTREAMSELECTENABLE_ENABLE = 1,
	AMSTREAMSELECTENABLE_ENABLEALL = 2,
}


[AllowDuplicates]
public enum _AMRESCTL_RESERVEFLAGS : int32
{
	AMRESCTL_RESERVEFLAGS_RESERVE = 0,
	AMRESCTL_RESERVEFLAGS_UNRESERVE = 1,
}


[AllowDuplicates]
public enum _AM_FILTER_MISC_FLAGS : int32
{
	AM_FILTER_MISC_FLAGS_IS_RENDERER = 1,
	AM_FILTER_MISC_FLAGS_IS_SOURCE = 2,
}


[AllowDuplicates]
public enum DECIMATION_USAGE : int32
{
	DECIMATION_LEGACY = 0,
	DECIMATION_USE_DECODER_ONLY = 1,
	DECIMATION_USE_VIDEOPORT_ONLY = 2,
	DECIMATION_USE_OVERLAY_ONLY = 3,
	DECIMATION_DEFAULT = 4,
}


[AllowDuplicates]
public enum _AM_PUSHSOURCE_FLAGS : int32
{
	AM_PUSHSOURCECAPS_INTERNAL_RM = 1,
	AM_PUSHSOURCECAPS_NOT_LIVE = 2,
	AM_PUSHSOURCECAPS_PRIVATE_CLOCK = 4,
	AM_PUSHSOURCEREQS_USE_STREAM_CLOCK = 65536,
	AM_PUSHSOURCEREQS_USE_CLOCK_CHAIN = 131072,
}


[AllowDuplicates]
public enum _DVENCODERRESOLUTION : int32
{
	DVENCODERRESOLUTION_720x480 = 2012,
	DVENCODERRESOLUTION_360x240 = 2013,
	DVENCODERRESOLUTION_180x120 = 2014,
	DVENCODERRESOLUTION_88x60 = 2015,
}


[AllowDuplicates]
public enum _DVENCODERVIDEOFORMAT : int32
{
	DVENCODERVIDEOFORMAT_NTSC = 2000,
	DVENCODERVIDEOFORMAT_PAL = 2001,
}


[AllowDuplicates]
public enum _DVENCODERFORMAT : int32
{
	DVENCODERFORMAT_DVSD = 2007,
	DVENCODERFORMAT_DVHD = 2008,
	DVENCODERFORMAT_DVSL = 2009,
}


[AllowDuplicates]
public enum _DVDECODERRESOLUTION : int32
{
	DVDECODERRESOLUTION_720x480 = 1000,
	DVDECODERRESOLUTION_360x240 = 1001,
	DVDECODERRESOLUTION_180x120 = 1002,
	DVDECODERRESOLUTION_88x60 = 1003,
}


[AllowDuplicates]
public enum _DVRESOLUTION : int32
{
	DVRESOLUTION_FULL = 1000,
	DVRESOLUTION_HALF = 1001,
	DVRESOLUTION_QUARTER = 1002,
	DVRESOLUTION_DC = 1003,
}


[AllowDuplicates]
public enum _AM_AUDIO_RENDERER_STAT_PARAM : int32
{
	AM_AUDREND_STAT_PARAM_BREAK_COUNT = 1,
	AM_AUDREND_STAT_PARAM_SLAVE_MODE = 2,
	AM_AUDREND_STAT_PARAM_SILENCE_DUR = 3,
	AM_AUDREND_STAT_PARAM_LAST_BUFFER_DUR = 4,
	AM_AUDREND_STAT_PARAM_DISCONTINUITIES = 5,
	AM_AUDREND_STAT_PARAM_SLAVE_RATE = 6,
	AM_AUDREND_STAT_PARAM_SLAVE_DROPWRITE_DUR = 7,
	AM_AUDREND_STAT_PARAM_SLAVE_HIGHLOWERROR = 8,
	AM_AUDREND_STAT_PARAM_SLAVE_LASTHIGHLOWERROR = 9,
	AM_AUDREND_STAT_PARAM_SLAVE_ACCUMERROR = 10,
	AM_AUDREND_STAT_PARAM_BUFFERFULLNESS = 11,
	AM_AUDREND_STAT_PARAM_JITTER = 12,
}


[AllowDuplicates]
public enum _AM_INTF_SEARCH_FLAGS : int32
{
	AM_INTF_SEARCH_INPUT_PIN = 1,
	AM_INTF_SEARCH_OUTPUT_PIN = 2,
	AM_INTF_SEARCH_FILTER = 4,
}


[AllowDuplicates]
public enum AMOVERLAYFX : int32
{
	AMOVERFX_NOFX = 0,
	AMOVERFX_MIRRORLEFTRIGHT = 2,
	AMOVERFX_MIRRORUPDOWN = 4,
	AMOVERFX_DEINTERLACE = 8,
}


[AllowDuplicates]
public enum _AM_PIN_FLOW_CONTROL_BLOCK_FLAGS : int32
{
	AM_PIN_FLOW_CONTROL_BLOCK = 1,
}


[AllowDuplicates]
public enum AM_GRAPH_CONFIG_RECONNECT_FLAGS : int32
{
	AM_GRAPH_CONFIG_RECONNECT_DIRECTCONNECT = 1,
	AM_GRAPH_CONFIG_RECONNECT_CACHE_REMOVED_FILTERS = 2,
	AM_GRAPH_CONFIG_RECONNECT_USE_ONLY_CACHED_FILTERS = 4,
}


[AllowDuplicates]
public enum _REM_FILTER_FLAGS : int32
{
	REMFILTERF_LEAVECONNECTED = 1,
}


[AllowDuplicates]
public enum AM_FILTER_FLAGS : int32
{
	AM_FILTER_FLAGS_REMOVABLE = 1,
}


[AllowDuplicates]
public enum VMRPresentationFlags : int32
{
	VMRSample_SyncPoint = 1,
	VMRSample_Preroll = 2,
	VMRSample_Discontinuity = 4,
	VMRSample_TimeValid = 8,
	VMRSample_SrcDstRectsValid = 16,
}


[AllowDuplicates]
public enum VMRSurfaceAllocationFlags : int32
{
	AMAP_PIXELFORMAT_VALID = 1,
	AMAP_3D_TARGET = 2,
	AMAP_ALLOW_SYSMEM = 4,
	AMAP_FORCE_SYSMEM = 8,
	AMAP_DIRECTED_FLIP = 16,
	AMAP_DXVA_TARGET = 32,
}


[AllowDuplicates]
public enum VMR_ASPECT_RATIO_MODE : int32
{
	VMR_ARMODE_NONE = 0,
	VMR_ARMODE_LETTER_BOX = 1,
}


[AllowDuplicates]
public enum VMRMixerPrefs : int32
{
	MixerPref_NoDecimation = 1,
	MixerPref_DecimateOutput = 2,
	MixerPref_ARAdjustXorY = 4,
	MixerPref_DecimationReserved = 8,
	MixerPref_DecimateMask = 15,
	MixerPref_BiLinearFiltering = 16,
	MixerPref_PointFiltering = 32,
	MixerPref_FilteringMask = 240,
	MixerPref_RenderTargetRGB = 256,
	MixerPref_RenderTargetYUV = 4096,
	MixerPref_RenderTargetYUV420 = 512,
	MixerPref_RenderTargetYUV422 = 1024,
	MixerPref_RenderTargetYUV444 = 2048,
	MixerPref_RenderTargetReserved = 57344,
	MixerPref_RenderTargetMask = 65280,
	MixerPref_DynamicSwitchToBOB = 65536,
	MixerPref_DynamicDecimateBy2 = 131072,
	MixerPref_DynamicReserved = 786432,
	MixerPref_DynamicMask = 983040,
}


[AllowDuplicates]
public enum VMRRenderPrefs : int32
{
	RenderPrefs_RestrictToInitialMonitor = 0,
	RenderPrefs_ForceOffscreen = 1,
	RenderPrefs_ForceOverlays = 2,
	RenderPrefs_AllowOverlays = 0,
	RenderPrefs_AllowOffscreen = 0,
	RenderPrefs_DoNotRenderColorKeyAndBorder = 8,
	RenderPrefs_Reserved = 16,
	RenderPrefs_PreferAGPMemWhenMixing = 32,
	RenderPrefs_Mask = 63,
}


[AllowDuplicates]
public enum VMRMode : int32
{
	VMRMode_Windowed = 1,
	VMRMode_Windowless = 2,
	VMRMode_Renderless = 4,
	VMRMode_Mask = 7,
}


[AllowDuplicates]
public enum STREAMIF_CONSTANTS : int32
{
	MAX_NUMBER_OF_STREAMS = 16,
}


[AllowDuplicates]
public enum VMRDeinterlacePrefs : int32
{
	DeinterlacePref_NextBest = 1,
	DeinterlacePref_BOB = 2,
	DeinterlacePref_Weave = 4,
	DeinterlacePref_Mask = 7,
}


[AllowDuplicates]
public enum VMRDeinterlaceTech : int32
{
	DeinterlaceTech_Unknown = 0,
	DeinterlaceTech_BOBLineReplicate = 1,
	DeinterlaceTech_BOBVerticalStretch = 2,
	DeinterlaceTech_MedianFiltering = 4,
	DeinterlaceTech_EdgeFiltering = 16,
	DeinterlaceTech_FieldAdaptive = 32,
	DeinterlaceTech_PixelAdaptive = 64,
	DeinterlaceTech_MotionVectorSteered = 128,
}


[AllowDuplicates]
public enum DVD_DOMAIN : int32
{
	DVD_DOMAIN_FirstPlay = 1,
	DVD_DOMAIN_VideoManagerMenu = 2,
	DVD_DOMAIN_VideoTitleSetMenu = 3,
	DVD_DOMAIN_Title = 4,
	DVD_DOMAIN_Stop = 5,
}


[AllowDuplicates]
public enum DVD_MENU_ID : int32
{
	DVD_MENU_Title = 2,
	DVD_MENU_Root = 3,
	DVD_MENU_Subpicture = 4,
	DVD_MENU_Audio = 5,
	DVD_MENU_Angle = 6,
	DVD_MENU_Chapter = 7,
}


[AllowDuplicates]
public enum DVD_DISC_SIDE : int32
{
	DVD_SIDE_A = 1,
	DVD_SIDE_B = 2,
}


[AllowDuplicates]
public enum DVD_PREFERRED_DISPLAY_MODE : int32
{
	DISPLAY_CONTENT_DEFAULT = 0,
	DISPLAY_16x9 = 1,
	DISPLAY_4x3_PANSCAN_PREFERRED = 2,
	DISPLAY_4x3_LETTERBOX_PREFERRED = 3,
}


[AllowDuplicates]
public enum DVD_FRAMERATE : int32
{
	DVD_FPS_25 = 1,
	DVD_FPS_30NonDrop = 3,
}


[AllowDuplicates]
public enum DVD_NavCmdType : int32
{
	DVD_NavCmdType_Pre = 1,
	DVD_NavCmdType_Post = 2,
	DVD_NavCmdType_Cell = 3,
	DVD_NavCmdType_Button = 4,
}


[AllowDuplicates]
public enum DVD_TIMECODE_FLAGS : int32
{
	DVD_TC_FLAG_25fps = 1,
	DVD_TC_FLAG_30fps = 2,
	DVD_TC_FLAG_DropFrame = 4,
	DVD_TC_FLAG_Interpolated = 8,
}


[AllowDuplicates]
public enum VALID_UOP_FLAG : int32
{
	UOP_FLAG_Play_Title_Or_AtTime = 1,
	UOP_FLAG_Play_Chapter = 2,
	UOP_FLAG_Play_Title = 4,
	UOP_FLAG_Stop = 8,
	UOP_FLAG_ReturnFromSubMenu = 16,
	UOP_FLAG_Play_Chapter_Or_AtTime = 32,
	UOP_FLAG_PlayPrev_Or_Replay_Chapter = 64,
	UOP_FLAG_PlayNext_Chapter = 128,
	UOP_FLAG_Play_Forwards = 256,
	UOP_FLAG_Play_Backwards = 512,
	UOP_FLAG_ShowMenu_Title = 1024,
	UOP_FLAG_ShowMenu_Root = 2048,
	UOP_FLAG_ShowMenu_SubPic = 4096,
	UOP_FLAG_ShowMenu_Audio = 8192,
	UOP_FLAG_ShowMenu_Angle = 16384,
	UOP_FLAG_ShowMenu_Chapter = 32768,
	UOP_FLAG_Resume = 65536,
	UOP_FLAG_Select_Or_Activate_Button = 131072,
	UOP_FLAG_Still_Off = 262144,
	UOP_FLAG_Pause_On = 524288,
	UOP_FLAG_Select_Audio_Stream = 1048576,
	UOP_FLAG_Select_SubPic_Stream = 2097152,
	UOP_FLAG_Select_Angle = 4194304,
	UOP_FLAG_Select_Karaoke_Audio_Presentation_Mode = 8388608,
	UOP_FLAG_Select_Video_Mode_Preference = 16777216,
}


[AllowDuplicates]
public enum DVD_CMD_FLAGS : int32
{
	DVD_CMD_FLAG_None = 0,
	DVD_CMD_FLAG_Flush = 1,
	DVD_CMD_FLAG_SendEvents = 2,
	DVD_CMD_FLAG_Block = 4,
	DVD_CMD_FLAG_StartWhenRendered = 8,
	DVD_CMD_FLAG_EndAfterRendered = 16,
}


[AllowDuplicates]
public enum DVD_OPTION_FLAG : int32
{
	DVD_ResetOnStop = 1,
	DVD_NotifyParentalLevelChange = 2,
	DVD_HMSF_TimeCodeEvents = 3,
	DVD_AudioDuringFFwdRew = 4,
	DVD_EnableNonblockingAPIs = 5,
	DVD_CacheSizeInMB = 6,
	DVD_EnablePortableBookmarks = 7,
	DVD_EnableExtendedCopyProtectErrors = 8,
	DVD_NotifyPositionChange = 9,
	DVD_IncreaseOutputControl = 10,
	DVD_EnableStreaming = 11,
	DVD_EnableESOutput = 12,
	DVD_EnableTitleLength = 13,
	DVD_DisableStillThrottle = 14,
	DVD_EnableLoggingEvents = 15,
	DVD_MaxReadBurstInKB = 16,
	DVD_ReadBurstPeriodInMS = 17,
	DVD_RestartDisc = 18,
	DVD_EnableCC = 19,
}


[AllowDuplicates]
public enum DVD_RELATIVE_BUTTON : int32
{
	DVD_Relative_Upper = 1,
	DVD_Relative_Lower = 2,
	DVD_Relative_Left = 3,
	DVD_Relative_Right = 4,
}


[AllowDuplicates]
public enum DVD_PARENTAL_LEVEL : int32
{
	DVD_PARENTAL_LEVEL_8 = 32768,
	DVD_PARENTAL_LEVEL_7 = 16384,
	DVD_PARENTAL_LEVEL_6 = 8192,
	DVD_PARENTAL_LEVEL_5 = 4096,
	DVD_PARENTAL_LEVEL_4 = 2048,
	DVD_PARENTAL_LEVEL_3 = 1024,
	DVD_PARENTAL_LEVEL_2 = 512,
	DVD_PARENTAL_LEVEL_1 = 256,
}


[AllowDuplicates]
public enum DVD_AUDIO_LANG_EXT : int32
{
	DVD_AUD_EXT_NotSpecified = 0,
	DVD_AUD_EXT_Captions = 1,
	DVD_AUD_EXT_VisuallyImpaired = 2,
	DVD_AUD_EXT_DirectorComments1 = 3,
	DVD_AUD_EXT_DirectorComments2 = 4,
}


[AllowDuplicates]
public enum DVD_SUBPICTURE_LANG_EXT : int32
{
	DVD_SP_EXT_NotSpecified = 0,
	DVD_SP_EXT_Caption_Normal = 1,
	DVD_SP_EXT_Caption_Big = 2,
	DVD_SP_EXT_Caption_Children = 3,
	DVD_SP_EXT_CC_Normal = 5,
	DVD_SP_EXT_CC_Big = 6,
	DVD_SP_EXT_CC_Children = 7,
	DVD_SP_EXT_Forced = 9,
	DVD_SP_EXT_DirectorComments_Normal = 13,
	DVD_SP_EXT_DirectorComments_Big = 14,
	DVD_SP_EXT_DirectorComments_Children = 15,
}


[AllowDuplicates]
public enum DVD_AUDIO_APPMODE : int32
{
	DVD_AudioMode_None = 0,
	DVD_AudioMode_Karaoke = 1,
	DVD_AudioMode_Surround = 2,
	DVD_AudioMode_Other = 3,
}


[AllowDuplicates]
public enum DVD_AUDIO_FORMAT : int32
{
	DVD_AudioFormat_AC3 = 0,
	DVD_AudioFormat_MPEG1 = 1,
	DVD_AudioFormat_MPEG1_DRC = 2,
	DVD_AudioFormat_MPEG2 = 3,
	DVD_AudioFormat_MPEG2_DRC = 4,
	DVD_AudioFormat_LPCM = 5,
	DVD_AudioFormat_DTS = 6,
	DVD_AudioFormat_SDDS = 7,
	DVD_AudioFormat_Other = 8,
}


[AllowDuplicates]
public enum DVD_KARAOKE_DOWNMIX : int32
{
	DVD_Mix_0to0 = 1,
	DVD_Mix_1to0 = 2,
	DVD_Mix_2to0 = 4,
	DVD_Mix_3to0 = 8,
	DVD_Mix_4to0 = 16,
	DVD_Mix_Lto0 = 32,
	DVD_Mix_Rto0 = 64,
	DVD_Mix_0to1 = 256,
	DVD_Mix_1to1 = 512,
	DVD_Mix_2to1 = 1024,
	DVD_Mix_3to1 = 2048,
	DVD_Mix_4to1 = 4096,
	DVD_Mix_Lto1 = 8192,
	DVD_Mix_Rto1 = 16384,
}


[AllowDuplicates]
public enum DVD_KARAOKE_CONTENTS : int32
{
	DVD_Karaoke_GuideVocal1 = 1,
	DVD_Karaoke_GuideVocal2 = 2,
	DVD_Karaoke_GuideMelody1 = 4,
	DVD_Karaoke_GuideMelody2 = 8,
	DVD_Karaoke_GuideMelodyA = 16,
	DVD_Karaoke_GuideMelodyB = 32,
	DVD_Karaoke_SoundEffectA = 64,
	DVD_Karaoke_SoundEffectB = 128,
}


[AllowDuplicates]
public enum DVD_KARAOKE_ASSIGNMENT : int32
{
	DVD_Assignment_reserved0 = 0,
	DVD_Assignment_reserved1 = 1,
	DVD_Assignment_LR = 2,
	DVD_Assignment_LRM = 3,
	DVD_Assignment_LR1 = 4,
	DVD_Assignment_LRM1 = 5,
	DVD_Assignment_LR12 = 6,
	DVD_Assignment_LRM12 = 7,
}


[AllowDuplicates]
public enum DVD_VIDEO_COMPRESSION : int32
{
	DVD_VideoCompression_Other = 0,
	DVD_VideoCompression_MPEG1 = 1,
	DVD_VideoCompression_MPEG2 = 2,
}


[AllowDuplicates]
public enum DVD_SUBPICTURE_TYPE : int32
{
	DVD_SPType_NotSpecified = 0,
	DVD_SPType_Language = 1,
	DVD_SPType_Other = 2,
}


[AllowDuplicates]
public enum DVD_SUBPICTURE_CODING : int32
{
	DVD_SPCoding_RunLength = 0,
	DVD_SPCoding_Extended = 1,
	DVD_SPCoding_Other = 2,
}


[AllowDuplicates]
public enum DVD_TITLE_APPMODE : int32
{
	DVD_AppMode_Not_Specified = 0,
	DVD_AppMode_Karaoke = 1,
	DVD_AppMode_Other = 3,
}


[AllowDuplicates]
public enum DVD_TextStringType : int32
{
	DVD_Struct_Volume = 1,
	DVD_Struct_Title = 2,
	DVD_Struct_ParentalID = 3,
	DVD_Struct_PartOfTitle = 4,
	DVD_Struct_Cell = 5,
	DVD_Stream_Audio = 16,
	DVD_Stream_Subpicture = 17,
	DVD_Stream_Angle = 18,
	DVD_Channel_Audio = 32,
	DVD_General_Name = 48,
	DVD_General_Comments = 49,
	DVD_Title_Series = 56,
	DVD_Title_Movie = 57,
	DVD_Title_Video = 58,
	DVD_Title_Album = 59,
	DVD_Title_Song = 60,
	DVD_Title_Other = 63,
	DVD_Title_Sub_Series = 64,
	DVD_Title_Sub_Movie = 65,
	DVD_Title_Sub_Video = 66,
	DVD_Title_Sub_Album = 67,
	DVD_Title_Sub_Song = 68,
	DVD_Title_Sub_Other = 71,
	DVD_Title_Orig_Series = 72,
	DVD_Title_Orig_Movie = 73,
	DVD_Title_Orig_Video = 74,
	DVD_Title_Orig_Album = 75,
	DVD_Title_Orig_Song = 76,
	DVD_Title_Orig_Other = 79,
	DVD_Other_Scene = 80,
	DVD_Other_Cut = 81,
	DVD_Other_Take = 82,
}


[AllowDuplicates]
public enum DVD_TextCharSet : int32
{
	DVD_CharSet_Unicode = 0,
	DVD_CharSet_ISO646 = 1,
	DVD_CharSet_JIS_Roman_Kanji = 2,
	DVD_CharSet_ISO8859_1 = 3,
	DVD_CharSet_ShiftJIS_Kanji_Roman_Katakana = 4,
}


[AllowDuplicates]
public enum AM_DVD_GRAPH_FLAGS : int32
{
	AM_DVD_HWDEC_PREFER = 1,
	AM_DVD_HWDEC_ONLY = 2,
	AM_DVD_SWDEC_PREFER = 4,
	AM_DVD_SWDEC_ONLY = 8,
	AM_DVD_NOVPE = 256,
	AM_DVD_DO_NOT_CLEAR = 512,
	AM_DVD_VMR9_ONLY = 2048,
	AM_DVD_EVR_ONLY = 4096,
	AM_DVD_EVR_QOS = 8192,
	AM_DVD_ADAPT_GRAPH = 16384,
	AM_DVD_MASK = 65535,
}


[AllowDuplicates]
public enum AM_DVD_STREAM_FLAGS : int32
{
	AM_DVD_STREAM_VIDEO = 1,
	AM_DVD_STREAM_AUDIO = 2,
	AM_DVD_STREAM_SUBPIC = 4,
}


[AllowDuplicates]
public enum _AM_OVERLAY_NOTIFY_FLAGS : int32
{
	AM_OVERLAY_NOTIFY_VISIBLE_CHANGE = 1,
	AM_OVERLAY_NOTIFY_SOURCE_CHANGE = 2,
	AM_OVERLAY_NOTIFY_DEST_CHANGE = 4,
}


[AllowDuplicates]
public enum BDA_EVENT_ID : int32
{
	BDA_EVENT_SIGNAL_LOSS = 0,
	BDA_EVENT_SIGNAL_LOCK = 1,
	BDA_EVENT_DATA_START = 2,
	BDA_EVENT_DATA_STOP = 3,
	BDA_EVENT_CHANNEL_ACQUIRED = 4,
	BDA_EVENT_CHANNEL_LOST = 5,
	BDA_EVENT_CHANNEL_SOURCE_CHANGED = 6,
	BDA_EVENT_CHANNEL_ACTIVATED = 7,
	BDA_EVENT_CHANNEL_DEACTIVATED = 8,
	BDA_EVENT_SUBCHANNEL_ACQUIRED = 9,
	BDA_EVENT_SUBCHANNEL_LOST = 10,
	BDA_EVENT_SUBCHANNEL_SOURCE_CHANGED = 11,
	BDA_EVENT_SUBCHANNEL_ACTIVATED = 12,
	BDA_EVENT_SUBCHANNEL_DEACTIVATED = 13,
	BDA_EVENT_ACCESS_GRANTED = 14,
	BDA_EVENT_ACCESS_DENIED = 15,
	BDA_EVENT_OFFER_EXTENDED = 16,
	BDA_EVENT_PURCHASE_COMPLETED = 17,
	BDA_EVENT_SMART_CARD_INSERTED = 18,
	BDA_EVENT_SMART_CARD_REMOVED = 19,
}


[AllowDuplicates]
public enum BDA_MULTICAST_MODE : int32
{
	BDA_PROMISCUOUS_MULTICAST = 0,
	BDA_FILTERED_MULTICAST = 1,
	BDA_NO_MULTICAST = 2,
}


[AllowDuplicates]
public enum BDA_SIGNAL_STATE : int32
{
	BDA_SIGNAL_UNAVAILABLE = 0,
	BDA_SIGNAL_INACTIVE = 1,
	BDA_SIGNAL_ACTIVE = 2,
}


[AllowDuplicates]
public enum BDA_CHANGE_STATE : int32
{
	BDA_CHANGES_COMPLETE = 0,
	BDA_CHANGES_PENDING = 1,
}


[AllowDuplicates]
public enum MEDIA_SAMPLE_CONTENT : int32
{
	MEDIA_TRANSPORT_PACKET = 0,
	MEDIA_ELEMENTARY_STREAM = 1,
	MEDIA_MPEG2_PSI = 2,
	MEDIA_TRANSPORT_PAYLOAD = 3,
}


[AllowDuplicates]
public enum ISDBCAS_REQUEST_ID : int32
{
	ISDBCAS_REQUEST_ID_EMG = 56,
	ISDBCAS_REQUEST_ID_EMD = 58,
}


[AllowDuplicates]
public enum MUX_PID_TYPE : int32
{
	PID_OTHER = -1,
	PID_ELEMENTARY_STREAM = 0,
	PID_MPEG2_SECTION_PSI_SI = 1,
}


[AllowDuplicates]
public enum DVBSystemType : int32
{
	DVB_Cable = 0,
	DVB_Terrestrial = 1,
	DVB_Satellite = 2,
	ISDB_Terrestrial = 3,
	ISDB_Satellite = 4,
}


[AllowDuplicates]
public enum BDA_Channel : int32
{
	BDA_UNDEFINED_CHANNEL = -1,
}


[AllowDuplicates]
public enum ComponentCategory : int32
{
	CategoryNotSet = -1,
	CategoryOther = 0,
	CategoryVideo = 1,
	CategoryAudio = 2,
	CategoryText = 3,
	CategorySubtitles = 4,
	CategoryCaptions = 5,
	CategorySuperimpose = 6,
	CategoryData = 7,
	CATEGORY_COUNT = 8,
}


[AllowDuplicates]
public enum ComponentStatus : int32
{
	StatusActive = 0,
	StatusInactive = 1,
	StatusUnavailable = 2,
}


[AllowDuplicates]
public enum MPEG2StreamType : int32
{
	BDA_UNITIALIZED_MPEG2STREAMTYPE = -1,
	Reserved1 = 0,
	ISO_IEC_11172_2_VIDEO = 1,
	ISO_IEC_13818_2_VIDEO = 2,
	ISO_IEC_11172_3_AUDIO = 3,
	ISO_IEC_13818_3_AUDIO = 4,
	ISO_IEC_13818_1_PRIVATE_SECTION = 5,
	ISO_IEC_13818_1_PES = 6,
	ISO_IEC_13522_MHEG = 7,
	ANNEX_A_DSM_CC = 8,
	ITU_T_REC_H_222_1 = 9,
	ISO_IEC_13818_6_TYPE_A = 10,
	ISO_IEC_13818_6_TYPE_B = 11,
	ISO_IEC_13818_6_TYPE_C = 12,
	ISO_IEC_13818_6_TYPE_D = 13,
	ISO_IEC_13818_1_AUXILIARY = 14,
	ISO_IEC_13818_7_AUDIO = 15,
	ISO_IEC_14496_2_VISUAL = 16,
	ISO_IEC_14496_3_AUDIO = 17,
	ISO_IEC_14496_1_IN_PES = 18,
	ISO_IEC_14496_1_IN_SECTION = 19,
	ISO_IEC_13818_6_DOWNLOAD = 20,
	METADATA_IN_PES = 21,
	METADATA_IN_SECTION = 22,
	METADATA_IN_DATA_CAROUSEL = 23,
	METADATA_IN_OBJECT_CAROUSEL = 24,
	METADATA_IN_DOWNLOAD_PROTOCOL = 25,
	IRPM_STREAMM = 26,
	ITU_T_H264 = 27,
	ISO_IEC_13818_1_RESERVED = 28,
	USER_PRIVATE = 16,
	HEVC_VIDEO_OR_TEMPORAL_VIDEO = 36,
	HEVC_TEMPORAL_VIDEO_SUBSET = 37,
	ISO_IEC_USER_PRIVATE = 128,
	DOLBY_AC3_AUDIO = 129,
	DOLBY_DIGITAL_PLUS_AUDIO_ATSC = 135,
}


[AllowDuplicates]
public enum ATSCComponentTypeFlags : int32
{
	ATSCCT_AC3 = 1,
}


[AllowDuplicates]
public enum BinaryConvolutionCodeRate : int32
{
	BDA_BCC_RATE_NOT_SET = -1,
	BDA_BCC_RATE_NOT_DEFINED = 0,
	BDA_BCC_RATE_1_2 = 1,
	BDA_BCC_RATE_2_3 = 2,
	BDA_BCC_RATE_3_4 = 3,
	BDA_BCC_RATE_3_5 = 4,
	BDA_BCC_RATE_4_5 = 5,
	BDA_BCC_RATE_5_6 = 6,
	BDA_BCC_RATE_5_11 = 7,
	BDA_BCC_RATE_7_8 = 8,
	BDA_BCC_RATE_1_4 = 9,
	BDA_BCC_RATE_1_3 = 10,
	BDA_BCC_RATE_2_5 = 11,
	BDA_BCC_RATE_6_7 = 12,
	BDA_BCC_RATE_8_9 = 13,
	BDA_BCC_RATE_9_10 = 14,
	BDA_BCC_RATE_MAX = 15,
}


[AllowDuplicates]
public enum FECMethod : int32
{
	BDA_FEC_METHOD_NOT_SET = -1,
	BDA_FEC_METHOD_NOT_DEFINED = 0,
	BDA_FEC_VITERBI = 1,
	BDA_FEC_RS_204_188 = 2,
	BDA_FEC_LDPC = 3,
	BDA_FEC_BCH = 4,
	BDA_FEC_RS_147_130 = 5,
	BDA_FEC_MAX = 6,
}


[AllowDuplicates]
public enum ModulationType : int32
{
	BDA_MOD_NOT_SET = -1,
	BDA_MOD_NOT_DEFINED = 0,
	BDA_MOD_16QAM = 1,
	BDA_MOD_32QAM = 2,
	BDA_MOD_64QAM = 3,
	BDA_MOD_80QAM = 4,
	BDA_MOD_96QAM = 5,
	BDA_MOD_112QAM = 6,
	BDA_MOD_128QAM = 7,
	BDA_MOD_160QAM = 8,
	BDA_MOD_192QAM = 9,
	BDA_MOD_224QAM = 10,
	BDA_MOD_256QAM = 11,
	BDA_MOD_320QAM = 12,
	BDA_MOD_384QAM = 13,
	BDA_MOD_448QAM = 14,
	BDA_MOD_512QAM = 15,
	BDA_MOD_640QAM = 16,
	BDA_MOD_768QAM = 17,
	BDA_MOD_896QAM = 18,
	BDA_MOD_1024QAM = 19,
	BDA_MOD_QPSK = 20,
	BDA_MOD_BPSK = 21,
	BDA_MOD_OQPSK = 22,
	BDA_MOD_8VSB = 23,
	BDA_MOD_16VSB = 24,
	BDA_MOD_ANALOG_AMPLITUDE = 25,
	BDA_MOD_ANALOG_FREQUENCY = 26,
	BDA_MOD_8PSK = 27,
	BDA_MOD_RF = 28,
	BDA_MOD_16APSK = 29,
	BDA_MOD_32APSK = 30,
	BDA_MOD_NBC_QPSK = 31,
	BDA_MOD_NBC_8PSK = 32,
	BDA_MOD_DIRECTV = 33,
	BDA_MOD_ISDB_T_TMCC = 34,
	BDA_MOD_ISDB_S_TMCC = 35,
	BDA_MOD_MAX = 36,
}


[AllowDuplicates]
public enum ScanModulationTypes : int32
{
	BDA_SCAN_MOD_16QAM = 1,
	BDA_SCAN_MOD_32QAM = 2,
	BDA_SCAN_MOD_64QAM = 4,
	BDA_SCAN_MOD_80QAM = 8,
	BDA_SCAN_MOD_96QAM = 16,
	BDA_SCAN_MOD_112QAM = 32,
	BDA_SCAN_MOD_128QAM = 64,
	BDA_SCAN_MOD_160QAM = 128,
	BDA_SCAN_MOD_192QAM = 256,
	BDA_SCAN_MOD_224QAM = 512,
	BDA_SCAN_MOD_256QAM = 1024,
	BDA_SCAN_MOD_320QAM = 2048,
	BDA_SCAN_MOD_384QAM = 4096,
	BDA_SCAN_MOD_448QAM = 8192,
	BDA_SCAN_MOD_512QAM = 16384,
	BDA_SCAN_MOD_640QAM = 32768,
	BDA_SCAN_MOD_768QAM = 65536,
	BDA_SCAN_MOD_896QAM = 131072,
	BDA_SCAN_MOD_1024QAM = 262144,
	BDA_SCAN_MOD_QPSK = 524288,
	BDA_SCAN_MOD_BPSK = 1048576,
	BDA_SCAN_MOD_OQPSK = 2097152,
	BDA_SCAN_MOD_8VSB = 4194304,
	BDA_SCAN_MOD_16VSB = 8388608,
	BDA_SCAN_MOD_AM_RADIO = 16777216,
	BDA_SCAN_MOD_FM_RADIO = 33554432,
	BDA_SCAN_MOD_8PSK = 67108864,
	BDA_SCAN_MOD_RF = 134217728,
	ScanModulationTypesMask_MCE_DigitalCable = 11,
	ScanModulationTypesMask_MCE_TerrestrialATSC = 23,
	ScanModulationTypesMask_MCE_AnalogTv = 28,
	ScanModulationTypesMask_MCE_All_TV = -1,
	ScanModulationTypesMask_DVBC = 75,
	BDA_SCAN_MOD_16APSK = 268435456,
	BDA_SCAN_MOD_32APSK = 536870912,
}


[AllowDuplicates]
public enum SpectralInversion : int32
{
	BDA_SPECTRAL_INVERSION_NOT_SET = -1,
	BDA_SPECTRAL_INVERSION_NOT_DEFINED = 0,
	BDA_SPECTRAL_INVERSION_AUTOMATIC = 1,
	BDA_SPECTRAL_INVERSION_NORMAL = 2,
	BDA_SPECTRAL_INVERSION_INVERTED = 3,
	BDA_SPECTRAL_INVERSION_MAX = 4,
}


[AllowDuplicates]
public enum Polarisation : int32
{
	BDA_POLARISATION_NOT_SET = -1,
	BDA_POLARISATION_NOT_DEFINED = 0,
	BDA_POLARISATION_LINEAR_H = 1,
	BDA_POLARISATION_LINEAR_V = 2,
	BDA_POLARISATION_CIRCULAR_L = 3,
	BDA_POLARISATION_CIRCULAR_R = 4,
	BDA_POLARISATION_MAX = 5,
}


[AllowDuplicates]
public enum LNB_Source : int32
{
	BDA_LNB_SOURCE_NOT_SET = -1,
	BDA_LNB_SOURCE_NOT_DEFINED = 0,
	BDA_LNB_SOURCE_A = 1,
	BDA_LNB_SOURCE_B = 2,
	BDA_LNB_SOURCE_C = 3,
	BDA_LNB_SOURCE_D = 4,
	BDA_LNB_SOURCE_MAX = 5,
}


[AllowDuplicates]
public enum GuardInterval : int32
{
	BDA_GUARD_NOT_SET = -1,
	BDA_GUARD_NOT_DEFINED = 0,
	BDA_GUARD_1_32 = 1,
	BDA_GUARD_1_16 = 2,
	BDA_GUARD_1_8 = 3,
	BDA_GUARD_1_4 = 4,
	BDA_GUARD_1_128 = 5,
	BDA_GUARD_19_128 = 6,
	BDA_GUARD_19_256 = 7,
	BDA_GUARD_MAX = 8,
}


[AllowDuplicates]
public enum HierarchyAlpha : int32
{
	BDA_HALPHA_NOT_SET = -1,
	BDA_HALPHA_NOT_DEFINED = 0,
	BDA_HALPHA_1 = 1,
	BDA_HALPHA_2 = 2,
	BDA_HALPHA_4 = 3,
	BDA_HALPHA_MAX = 4,
}


[AllowDuplicates]
public enum TransmissionMode : int32
{
	BDA_XMIT_MODE_NOT_SET = -1,
	BDA_XMIT_MODE_NOT_DEFINED = 0,
	BDA_XMIT_MODE_2K = 1,
	BDA_XMIT_MODE_8K = 2,
	BDA_XMIT_MODE_4K = 3,
	BDA_XMIT_MODE_2K_INTERLEAVED = 4,
	BDA_XMIT_MODE_4K_INTERLEAVED = 5,
	BDA_XMIT_MODE_1K = 6,
	BDA_XMIT_MODE_16K = 7,
	BDA_XMIT_MODE_32K = 8,
	BDA_XMIT_MODE_MAX = 9,
}


[AllowDuplicates]
public enum RollOff : int32
{
	BDA_ROLL_OFF_NOT_SET = -1,
	BDA_ROLL_OFF_NOT_DEFINED = 0,
	BDA_ROLL_OFF_20 = 1,
	BDA_ROLL_OFF_25 = 2,
	BDA_ROLL_OFF_35 = 3,
	BDA_ROLL_OFF_MAX = 4,
}


[AllowDuplicates]
public enum Pilot : int32
{
	BDA_PILOT_NOT_SET = -1,
	BDA_PILOT_NOT_DEFINED = 0,
	BDA_PILOT_OFF = 1,
	BDA_PILOT_ON = 2,
	BDA_PILOT_MAX = 3,
}


[AllowDuplicates]
public enum BDA_Frequency : int32
{
	BDA_FREQUENCY_NOT_SET = -1,
	BDA_FREQUENCY_NOT_DEFINED = 0,
}


[AllowDuplicates]
public enum BDA_Range : int32
{
	BDA_RANGE_NOT_SET = -1,
	BDA_RANGE_NOT_DEFINED = 0,
}


[AllowDuplicates]
public enum BDA_Channel_Bandwidth : int32
{
	BDA_CHAN_BANDWITH_NOT_SET = -1,
	BDA_CHAN_BANDWITH_NOT_DEFINED = 0,
}


[AllowDuplicates]
public enum BDA_Frequency_Multiplier : int32
{
	BDA_FREQUENCY_MULTIPLIER_NOT_SET = -1,
	BDA_FREQUENCY_MULTIPLIER_NOT_DEFINED = 0,
}


[AllowDuplicates]
public enum BDA_Comp_Flags : int32
{
	BDACOMP_NOT_DEFINED = 0,
	BDACOMP_EXCLUDE_TS_FROM_TR = 1,
	BDACOMP_INCLUDE_LOCATOR_IN_TR = 2,
	BDACOMP_INCLUDE_COMPONENTS_IN_TR = 4,
}


[AllowDuplicates]
public enum ApplicationTypeType : int32
{
	SCTE28_ConditionalAccess = 0,
	SCTE28_POD_Host_Binding_Information = 1,
	SCTE28_IPService = 2,
	SCTE28_NetworkInterface_SCTE55_2 = 3,
	SCTE28_NetworkInterface_SCTE55_1 = 4,
	SCTE28_CopyProtection = 5,
	SCTE28_Diagnostic = 6,
	SCTE28_Undesignated = 7,
	SCTE28_Reserved = 8,
}


[AllowDuplicates]
public enum BDA_CONDITIONALACCESS_REQUESTTYPE : int32
{
	CONDITIONALACCESS_ACCESS_UNSPECIFIED = 0,
	CONDITIONALACCESS_ACCESS_NOT_POSSIBLE = 1,
	CONDITIONALACCESS_ACCESS_POSSIBLE = 2,
	CONDITIONALACCESS_ACCESS_POSSIBLE_NO_STREAMING_DISRUPTION = 3,
}


[AllowDuplicates]
public enum BDA_CONDITIONALACCESS_MMICLOSEREASON : int32
{
	CONDITIONALACCESS_UNSPECIFIED = 0,
	CONDITIONALACCESS_CLOSED_ITSELF = 1,
	CONDITIONALACCESS_TUNER_REQUESTED_CLOSE = 2,
	CONDITIONALACCESS_DIALOG_TIMEOUT = 3,
	CONDITIONALACCESS_DIALOG_FOCUS_CHANGE = 4,
	CONDITIONALACCESS_DIALOG_USER_DISMISSED = 5,
	CONDITIONALACCESS_DIALOG_USER_NOT_AVAILABLE = 6,
}


[AllowDuplicates]
public enum BDA_CONDITIONALACCESS_SESSION_RESULT : int32
{
	CONDITIONALACCESS_SUCCESSFULL = 0,
	CONDITIONALACCESS_ENDED_NOCHANGE = 1,
	CONDITIONALACCESS_ABORTED = 2,
}


[AllowDuplicates]
public enum BDA_DISCOVERY_STATE : int32
{
	BDA_DISCOVERY_UNSPECIFIED = 0,
	BDA_DISCOVERY_REQUIRED = 1,
	BDA_DISCOVERY_COMPLETE = 2,
}


[AllowDuplicates]
public enum SmartCardStatusType : int32
{
	CardInserted = 0,
	CardRemoved = 1,
	CardError = 2,
	CardDataChanged = 3,
	CardFirmwareUpgrade = 4,
}


[AllowDuplicates]
public enum SmartCardAssociationType : int32
{
	NotAssociated = 0,
	Associated = 1,
	AssociationUnknown = 2,
}


[AllowDuplicates]
public enum LocationCodeSchemeType : int32
{
	SCTE_18 = 0,
}


[AllowDuplicates]
public enum EntitlementType : int32
{
	Entitled = 0,
	NotEntitled = 1,
	TechnicalFailure = 2,
}


[AllowDuplicates]
public enum UICloseReasonType : int32
{
	NotReady = 0,
	UserClosed = 1,
	SystemClosed = 2,
	DeviceClosed = 3,
	ErrorClosed = 4,
}


[AllowDuplicates]
public enum BDA_DrmPairingError : int32
{
	BDA_DrmPairing_Succeeded = 0,
	BDA_DrmPairing_HardwareFailure = 1,
	BDA_DrmPairing_NeedRevocationData = 2,
	BDA_DrmPairing_NeedIndiv = 3,
	BDA_DrmPairing_Other = 4,
	BDA_DrmPairing_DrmInitFailed = 5,
	BDA_DrmPairing_DrmNotPaired = 6,
	BDA_DrmPairing_DrmRePairSoon = 7,
	BDA_DrmPairing_Aborted = 8,
	BDA_DrmPairing_NeedSDKUpdate = 9,
}


[AllowDuplicates]
public enum KSPROPERTY_IPSINK : uint32
{
	KSPROPERTY_IPSINK_MULTICASTLIST = 0,
	KSPROPERTY_IPSINK_ADAPTER_DESCRIPTION = 1,
	KSPROPERTY_IPSINK_ADAPTER_ADDRESS = 2,
}


[AllowDuplicates]
public enum AMExtendedSeekingCapabilities : int32
{
	AM_EXSEEK_CANSEEK = 1,
	AM_EXSEEK_CANSCAN = 2,
	AM_EXSEEK_MARKERSEEK = 4,
	AM_EXSEEK_SCANWITHOUTCLOCK = 8,
	AM_EXSEEK_NOSTANDARDREPAINT = 16,
	AM_EXSEEK_BUFFERING = 32,
	AM_EXSEEK_SENDS_VIDEOFRAMEREADY = 64,
}


[AllowDuplicates]
public enum AM_LINE21_CCLEVEL : int32
{
	AM_L21_CCLEVEL_TC2 = 0,
}


[AllowDuplicates]
public enum AM_LINE21_CCSERVICE : int32
{
	AM_L21_CCSERVICE_None = 0,
	AM_L21_CCSERVICE_Caption1 = 1,
	AM_L21_CCSERVICE_Caption2 = 2,
	AM_L21_CCSERVICE_Text1 = 3,
	AM_L21_CCSERVICE_Text2 = 4,
	AM_L21_CCSERVICE_XDS = 5,
	AM_L21_CCSERVICE_DefChannel = 10,
	AM_L21_CCSERVICE_Invalid = 11,
}


[AllowDuplicates]
public enum AM_LINE21_CCSTATE : int32
{
	AM_L21_CCSTATE_Off = 0,
	AM_L21_CCSTATE_On = 1,
}


[AllowDuplicates]
public enum AM_LINE21_CCSTYLE : int32
{
	AM_L21_CCSTYLE_None = 0,
	AM_L21_CCSTYLE_PopOn = 1,
	AM_L21_CCSTYLE_PaintOn = 2,
	AM_L21_CCSTYLE_RollUp = 3,
}


[AllowDuplicates]
public enum AM_LINE21_DRAWBGMODE : int32
{
	AM_L21_DRAWBGMODE_Opaque = 0,
	AM_L21_DRAWBGMODE_Transparent = 1,
}


[AllowDuplicates]
public enum AM_WST_LEVEL : int32
{
	AM_WST_LEVEL_1_5 = 0,
}


[AllowDuplicates]
public enum AM_WST_SERVICE : int32
{
	AM_WST_SERVICE_None = 0,
	AM_WST_SERVICE_Text = 1,
	AM_WST_SERVICE_IDS = 2,
	AM_WST_SERVICE_Invalid = 3,
}


[AllowDuplicates]
public enum AM_WST_STATE : int32
{
	AM_WST_STATE_Off = 0,
	AM_WST_STATE_On = 1,
}


[AllowDuplicates]
public enum AM_WST_STYLE : int32
{
	AM_WST_STYLE_None = 0,
	AM_WST_STYLE_Invers = 1,
}


[AllowDuplicates]
public enum AM_WST_DRAWBGMODE : int32
{
	AM_WST_DRAWBGMODE_Opaque = 0,
	AM_WST_DRAWBGMODE_Transparent = 1,
}


[AllowDuplicates]
public enum STREAM_TYPE : int32
{
	STREAMTYPE_READ = 0,
	STREAMTYPE_WRITE = 1,
	STREAMTYPE_TRANSFORM = 2,
}


[AllowDuplicates]
public enum STREAM_STATE : int32
{
	STREAMSTATE_STOP = 0,
	STREAMSTATE_RUN = 1,
}


[AllowDuplicates]
public enum COMPLETION_STATUS_FLAGS : int32
{
	COMPSTAT_NOUPDATEOK = 1,
	COMPSTAT_WAIT = 2,
	COMPSTAT_ABORT = 4,
}


[AllowDuplicates]
public enum MMSSF_GET_INFORMATION_FLAGS : uint32
{
	MMSSF_HASCLOCK = 1,
	MMSSF_SUPPORTSEEK = 2,
	MMSSF_ASYNCHRONOUS = 4,
}


[AllowDuplicates]
public enum SSUPDATE_TYPE : int32
{
	SSUPDATE_ASYNC = 1,
	SSUPDATE_CONTINUOUS = 2,
}


[AllowDuplicates]
public enum DDSFF_FLAGS : uint32
{
	DDSFF_PROGRESSIVERENDER = 1,
}


[AllowDuplicates]
public enum AMMSF_MMS_INIT_FLAGS : uint32
{
	AMMSF_NOGRAPHTHREAD = 1,
}


[AllowDuplicates]
public enum AMMSF_MS_FLAGS : uint32
{
	AMMSF_ADDDEFAULTRENDERER = 1,
	AMMSF_CREATEPEER = 2,
	AMMSF_STOPIFNOSAMPLES = 4,
	AMMSF_NOSTALL = 8,
}


[AllowDuplicates]
public enum AMMSF_RENDER_FLAGS : uint32
{
	AMMSF_RENDERTYPEMASK = 3,
	AMMSF_RENDERTOEXISTING = 0,
	AMMSF_RENDERALLSTREAMS = 1,
	AMMSF_NORENDER = 2,
	AMMSF_NOCLOCK = 4,
	AMMSF_RUN = 8,
}


[AllowDuplicates]
public enum OUTPUT_STATE : uint32
{
	Disabled = 0,
	ReadData = 1,
	RenderData = 2,
}


[AllowDuplicates]
public enum AM_PROPERTY_FRAMESTEP : int32
{
	AM_PROPERTY_FRAMESTEP_STEP = 1,
	AM_PROPERTY_FRAMESTEP_CANCEL = 2,
	AM_PROPERTY_FRAMESTEP_CANSTEP = 3,
	AM_PROPERTY_FRAMESTEP_CANSTEPMULTIPLE = 4,
}


[AllowDuplicates]
public enum AM_ASPECT_RATIO_MODE : int32
{
	AM_ARMODE_STRETCHED = 0,
	AM_ARMODE_LETTER_BOX = 1,
	AM_ARMODE_CROP = 2,
	AM_ARMODE_STRETCHED_AS_PRIMARY = 3,
}


[AllowDuplicates]
public enum VMR9PresentationFlags : int32
{
	VMR9Sample_SyncPoint = 1,
	VMR9Sample_Preroll = 2,
	VMR9Sample_Discontinuity = 4,
	VMR9Sample_TimeValid = 8,
	VMR9Sample_SrcDstRectsValid = 16,
}


[AllowDuplicates]
public enum VMR9SurfaceAllocationFlags : int32
{
	VMR9AllocFlag_3DRenderTarget = 1,
	VMR9AllocFlag_DXVATarget = 2,
	VMR9AllocFlag_TextureSurface = 4,
	VMR9AllocFlag_OffscreenSurface = 8,
	VMR9AllocFlag_RGBDynamicSwitch = 16,
	VMR9AllocFlag_UsageReserved = 224,
	VMR9AllocFlag_UsageMask = 255,
}


[AllowDuplicates]
public enum VMR9AspectRatioMode : int32
{
	VMR9ARMode_None = 0,
	VMR9ARMode_LetterBox = 1,
}


[AllowDuplicates]
public enum VMR9MixerPrefs : int32
{
	MixerPref9_NoDecimation = 1,
	MixerPref9_DecimateOutput = 2,
	MixerPref9_ARAdjustXorY = 4,
	MixerPref9_NonSquareMixing = 8,
	MixerPref9_DecimateMask = 15,
	MixerPref9_BiLinearFiltering = 16,
	MixerPref9_PointFiltering = 32,
	MixerPref9_AnisotropicFiltering = 64,
	MixerPref9_PyramidalQuadFiltering = 128,
	MixerPref9_GaussianQuadFiltering = 256,
	MixerPref9_FilteringReserved = 3584,
	MixerPref9_FilteringMask = 4080,
	MixerPref9_RenderTargetRGB = 4096,
	MixerPref9_RenderTargetYUV = 8192,
	MixerPref9_RenderTargetReserved = 1032192,
	MixerPref9_RenderTargetMask = 1044480,
	MixerPref9_DynamicSwitchToBOB = 1048576,
	MixerPref9_DynamicDecimateBy2 = 2097152,
	MixerPref9_DynamicReserved = 12582912,
	MixerPref9_DynamicMask = 15728640,
}


[AllowDuplicates]
public enum VMR9ProcAmpControlFlags : int32
{
	ProcAmpControl9_Brightness = 1,
	ProcAmpControl9_Contrast = 2,
	ProcAmpControl9_Hue = 4,
	ProcAmpControl9_Saturation = 8,
	ProcAmpControl9_Mask = 15,
}


[AllowDuplicates]
public enum VMR9AlphaBitmapFlags : int32
{
	VMR9AlphaBitmap_Disable = 1,
	VMR9AlphaBitmap_hDC = 2,
	VMR9AlphaBitmap_EntireDDS = 4,
	VMR9AlphaBitmap_SrcColorKey = 8,
	VMR9AlphaBitmap_SrcRect = 16,
	VMR9AlphaBitmap_FilterMode = 32,
}


[AllowDuplicates]
public enum VMR9RenderPrefs : int32
{
	RenderPrefs9_DoNotRenderBorder = 1,
	RenderPrefs9_Mask = 1,
}


[AllowDuplicates]
public enum VMR9Mode : int32
{
	VMR9Mode_Windowed = 1,
	VMR9Mode_Windowless = 2,
	VMR9Mode_Renderless = 4,
	VMR9Mode_Mask = 7,
}


[AllowDuplicates]
public enum VMR9DeinterlacePrefs : int32
{
	DeinterlacePref9_NextBest = 1,
	DeinterlacePref9_BOB = 2,
	DeinterlacePref9_Weave = 4,
	DeinterlacePref9_Mask = 7,
}


[AllowDuplicates]
public enum VMR9DeinterlaceTech : int32
{
	DeinterlaceTech9_Unknown = 0,
	DeinterlaceTech9_BOBLineReplicate = 1,
	DeinterlaceTech9_BOBVerticalStretch = 2,
	DeinterlaceTech9_MedianFiltering = 4,
	DeinterlaceTech9_EdgeFiltering = 16,
	DeinterlaceTech9_FieldAdaptive = 32,
	DeinterlaceTech9_PixelAdaptive = 64,
	DeinterlaceTech9_MotionVectorSteered = 128,
}


[AllowDuplicates]
public enum VMR9_SampleFormat : int32
{
	VMR9_SampleReserved = 1,
	VMR9_SampleProgressiveFrame = 2,
	VMR9_SampleFieldInterleavedEvenFirst = 3,
	VMR9_SampleFieldInterleavedOddFirst = 4,
	VMR9_SampleFieldSingleEven = 5,
	VMR9_SampleFieldSingleOdd = 6,
}


[AllowDuplicates]
public enum AM_PROPERTY_AC3 : int32
{
	AM_PROPERTY_AC3_ERROR_CONCEALMENT = 1,
	AM_PROPERTY_AC3_ALTERNATE_AUDIO = 2,
	AM_PROPERTY_AC3_DOWNMIX = 3,
	AM_PROPERTY_AC3_BIT_STREAM_MODE = 4,
	AM_PROPERTY_AC3_DIALOGUE_LEVEL = 5,
	AM_PROPERTY_AC3_LANGUAGE_CODE = 6,
	AM_PROPERTY_AC3_ROOM_TYPE = 7,
}


[AllowDuplicates]
public enum AM_PROPERTY_DVDSUBPIC : int32
{
	AM_PROPERTY_DVDSUBPIC_PALETTE = 0,
	AM_PROPERTY_DVDSUBPIC_HLI = 1,
	AM_PROPERTY_DVDSUBPIC_COMPOSIT_ON = 2,
}


[AllowDuplicates]
public enum AM_PROPERTY_DVDCOPYPROT : int32
{
	AM_PROPERTY_DVDCOPY_CHLG_KEY = 1,
	AM_PROPERTY_DVDCOPY_DVD_KEY1 = 2,
	AM_PROPERTY_DVDCOPY_DEC_KEY2 = 3,
	AM_PROPERTY_DVDCOPY_TITLE_KEY = 4,
	AM_PROPERTY_COPY_MACROVISION = 5,
	AM_PROPERTY_DVDCOPY_REGION = 6,
	AM_PROPERTY_DVDCOPY_SET_COPY_STATE = 7,
	AM_PROPERTY_COPY_ANALOG_COMPONENT = 8,
	AM_PROPERTY_COPY_DIGITAL_CP = 9,
	AM_PROPERTY_COPY_DVD_SRM = 10,
	AM_PROPERTY_DVDCOPY_SUPPORTS_NEW_KEYCOUNT = 11,
	AM_PROPERTY_DVDCOPY_DISC_KEY = 128,
}


[AllowDuplicates]
public enum AM_DIGITAL_CP : int32
{
	AM_DIGITAL_CP_OFF = 0,
	AM_DIGITAL_CP_ON = 1,
	AM_DIGITAL_CP_DVD_COMPLIANT = 2,
}


[AllowDuplicates]
public enum AM_DVDCOPYSTATE : int32
{
	AM_DVDCOPYSTATE_INITIALIZE = 0,
	AM_DVDCOPYSTATE_INITIALIZE_TITLE = 1,
	AM_DVDCOPYSTATE_AUTHENTICATION_NOT_REQUIRED = 2,
	AM_DVDCOPYSTATE_AUTHENTICATION_REQUIRED = 3,
	AM_DVDCOPYSTATE_DONE = 4,
}


[AllowDuplicates]
public enum AM_COPY_MACROVISION_LEVEL : int32
{
	AM_MACROVISION_DISABLED = 0,
	AM_MACROVISION_LEVEL1 = 1,
	AM_MACROVISION_LEVEL2 = 2,
	AM_MACROVISION_LEVEL3 = 3,
}


[AllowDuplicates]
public enum AM_MPEG2Level : int32
{
	AM_MPEG2Level_Low = 1,
	AM_MPEG2Level_Main = 2,
	AM_MPEG2Level_High1440 = 3,
	AM_MPEG2Level_High = 4,
}


[AllowDuplicates]
public enum AM_MPEG2Profile : int32
{
	AM_MPEG2Profile_Simple = 1,
	AM_MPEG2Profile_Main = 2,
	AM_MPEG2Profile_SNRScalable = 3,
	AM_MPEG2Profile_SpatiallyScalable = 4,
	AM_MPEG2Profile_High = 5,
}


[AllowDuplicates]
public enum AM_PROPERTY_DVDKARAOKE : int32
{
	AM_PROPERTY_DVDKARAOKE_ENABLE = 0,
	AM_PROPERTY_DVDKARAOKE_DATA = 1,
}


[AllowDuplicates]
public enum AM_PROPERTY_TS_RATE_CHANGE : int32
{
	AM_RATE_SimpleRateChange = 1,
	AM_RATE_ExactRateChange = 2,
	AM_RATE_MaxFullDataRate = 3,
	AM_RATE_Step = 4,
	AM_RATE_UseRateVersion = 5,
	AM_RATE_QueryFullFrameRate = 6,
	AM_RATE_QueryLastRateSegPTS = 7,
	AM_RATE_CorrectTS = 8,
	AM_RATE_ReverseMaxFullDataRate = 9,
	AM_RATE_ResetOnTimeDisc = 10,
	AM_RATE_QueryMapping = 11,
}


[AllowDuplicates]
public enum AM_PROPERTY_DVD_RATE_CHANGE : int32
{
	AM_RATE_ChangeRate = 1,
	AM_RATE_FullDataRateMax = 2,
	AM_RATE_ReverseDecode = 3,
	AM_RATE_DecoderPosition = 4,
	AM_RATE_DecoderVersion = 5,
}


[AllowDuplicates]
public enum DVD_PLAY_DIRECTION : int32
{
	DVD_DIR_FORWARD = 0,
	DVD_DIR_BACKWARD = 1,
}


[AllowDuplicates]
public enum DVD_ERROR : int32
{
	DVD_ERROR_Unexpected = 1,
	DVD_ERROR_CopyProtectFail = 2,
	DVD_ERROR_InvalidDVD1_0Disc = 3,
	DVD_ERROR_InvalidDiscRegion = 4,
	DVD_ERROR_LowParentalLevel = 5,
	DVD_ERROR_MacrovisionFail = 6,
	DVD_ERROR_IncompatibleSystemAndDecoderRegions = 7,
	DVD_ERROR_IncompatibleDiscAndDecoderRegions = 8,
	DVD_ERROR_CopyProtectOutputFail = 9,
	DVD_ERROR_CopyProtectOutputNotSupported = 10,
}


[AllowDuplicates]
public enum DVD_WARNING : int32
{
	DVD_WARNING_InvalidDVD1_0Disc = 1,
	DVD_WARNING_FormatNotSupported = 2,
	DVD_WARNING_IllegalNavCommand = 3,
	DVD_WARNING_Open = 4,
	DVD_WARNING_Seek = 5,
	DVD_WARNING_Read = 6,
}


[AllowDuplicates]
public enum DVD_PB_STOPPED : int32
{
	DVD_PB_STOPPED_Other = 0,
	DVD_PB_STOPPED_NoBranch = 1,
	DVD_PB_STOPPED_NoFirstPlayDomain = 2,
	DVD_PB_STOPPED_StopCommand = 3,
	DVD_PB_STOPPED_Reset = 4,
	DVD_PB_STOPPED_DiscEjected = 5,
	DVD_PB_STOPPED_IllegalNavCommand = 6,
	DVD_PB_STOPPED_PlayPeriodAutoStop = 7,
	DVD_PB_STOPPED_PlayChapterAutoStop = 8,
	DVD_PB_STOPPED_ParentalFailure = 9,
	DVD_PB_STOPPED_RegionFailure = 10,
	DVD_PB_STOPPED_MacrovisionFailure = 11,
	DVD_PB_STOPPED_DiscReadError = 12,
	DVD_PB_STOPPED_CopyProtectFailure = 13,
	DVD_PB_STOPPED_CopyProtectOutputFailure = 14,
	DVD_PB_STOPPED_CopyProtectOutputNotSupported = 15,
}


[AllowDuplicates]
public enum SNDDEV_ERR : int32
{
	SNDDEV_ERROR_Open = 1,
	SNDDEV_ERROR_Close = 2,
	SNDDEV_ERROR_GetCaps = 3,
	SNDDEV_ERROR_PrepareHeader = 4,
	SNDDEV_ERROR_UnprepareHeader = 5,
	SNDDEV_ERROR_Reset = 6,
	SNDDEV_ERROR_Restart = 7,
	SNDDEV_ERROR_GetPosition = 8,
	SNDDEV_ERROR_Write = 9,
	SNDDEV_ERROR_Pause = 10,
	SNDDEV_ERROR_Stop = 11,
	SNDDEV_ERROR_Start = 12,
	SNDDEV_ERROR_AddBuffer = 13,
	SNDDEV_ERROR_Query = 14,
}


[AllowDuplicates]
public enum MP_TYPE : int32
{
	MPT_INT = 0,
	MPT_FLOAT = 1,
	MPT_BOOL = 2,
	MPT_ENUM = 3,
	MPT_MAX = 4,
}


[AllowDuplicates]
public enum MP_CURVE_TYPE : int32
{
	MP_CURVE_JUMP = 1,
	MP_CURVE_LINEAR = 2,
	MP_CURVE_SQUARE = 4,
	MP_CURVE_INVSQUARE = 8,
	MP_CURVE_SINE = 16,
}


[AllowDuplicates]
public enum DXVA2_SampleFlags : int32
{
	DXVA2_SampleFlag_Palette_Changed = 1,
	DXVA2_SampleFlag_SrcRect_Changed = 2,
	DXVA2_SampleFlag_DstRect_Changed = 4,
	DXVA2_SampleFlag_ColorData_Changed = 8,
	DXVA2_SampleFlag_PlanarAlpha_Changed = 16,
	DXVA2_SampleFlag_RFF = 65536,
	DXVA2_SampleFlag_TFF = 131072,
	DXVA2_SampleFlag_RFF_TFF_Present = 262144,
	DXVA2_SampleFlagsMask = -65505,
}


[AllowDuplicates]
public enum DXVA2_DestinationFlags : int32
{
	DXVA2_DestinationFlag_Background_Changed = 1,
	DXVA2_DestinationFlag_TargetRect_Changed = 2,
	DXVA2_DestinationFlag_ColorData_Changed = 4,
	DXVA2_DestinationFlag_Alpha_Changed = 8,
	DXVA2_DestinationFlag_RFF = 65536,
	DXVA2_DestinationFlag_TFF = 131072,
	DXVA2_DestinationFlag_RFF_TFF_Present = 262144,
	DXVA2_DestinationFlagMask = -65521,
}


[AllowDuplicates]
public enum AMPlayListItemFlags : int32
{
	AMPLAYLISTITEM_CANSKIP = 1,
	AMPLAYLISTITEM_CANBIND = 2,
}


[AllowDuplicates]
public enum AMPlayListFlags : int32
{
	AMPLAYLIST_STARTINSCANMODE = 1,
	AMPLAYLIST_FORCEBANNER = 2,
}


[AllowDuplicates]
public enum AMPlayListEventFlags : int32
{
	AMPLAYLISTEVENT_RESUME = 0,
	AMPLAYLISTEVENT_BREAK = 1,
	AMPLAYLISTEVENT_NEXT = 2,
	AMPLAYLISTEVENT_MASK = 15,
	AMPLAYLISTEVENT_REFRESH = 16,
}


[AllowDuplicates]
public enum DISPID_TUNER : int32
{
	DISPID_TUNER_TS_UNIQUENAME = 1,
	DISPID_TUNER_TS_FRIENDLYNAME = 2,
	DISPID_TUNER_TS_CLSID = 3,
	DISPID_TUNER_TS_NETWORKTYPE = 4,
	DISPID_TUNER_TS__NETWORKTYPE = 5,
	DISPID_TUNER_TS_CREATETUNEREQUEST = 6,
	DISPID_TUNER_TS_ENUMCATEGORYGUIDS = 7,
	DISPID_TUNER_TS_ENUMDEVICEMONIKERS = 8,
	DISPID_TUNER_TS_DEFAULTPREFERREDCOMPONENTTYPES = 9,
	DISPID_TUNER_TS_FREQMAP = 10,
	DISPID_TUNER_TS_DEFLOCATOR = 11,
	DISPID_TUNER_TS_CLONE = 12,
	DISPID_TUNER_TR_TUNINGSPACE = 1,
	DISPID_TUNER_TR_COMPONENTS = 2,
	DISPID_TUNER_TR_CLONE = 3,
	DISPID_TUNER_TR_LOCATOR = 4,
	DISPID_TUNER_CT_CATEGORY = 1,
	DISPID_TUNER_CT_MEDIAMAJORTYPE = 2,
	DISPID_TUNER_CT__MEDIAMAJORTYPE = 3,
	DISPID_TUNER_CT_MEDIASUBTYPE = 4,
	DISPID_TUNER_CT__MEDIASUBTYPE = 5,
	DISPID_TUNER_CT_MEDIAFORMATTYPE = 6,
	DISPID_TUNER_CT__MEDIAFORMATTYPE = 7,
	DISPID_TUNER_CT_MEDIATYPE = 8,
	DISPID_TUNER_CT_CLONE = 9,
	DISPID_TUNER_LCT_LANGID = 100,
	DISPID_TUNER_MP2CT_TYPE = 200,
	DISPID_TUNER_ATSCCT_FLAGS = 300,
	DISPID_TUNER_L_CARRFREQ = 1,
	DISPID_TUNER_L_INNERFECMETHOD = 2,
	DISPID_TUNER_L_INNERFECRATE = 3,
	DISPID_TUNER_L_OUTERFECMETHOD = 4,
	DISPID_TUNER_L_OUTERFECRATE = 5,
	DISPID_TUNER_L_MOD = 6,
	DISPID_TUNER_L_SYMRATE = 7,
	DISPID_TUNER_L_CLONE = 8,
	DISPID_TUNER_L_ATSC_PHYS_CHANNEL = 201,
	DISPID_TUNER_L_ATSC_TSID = 202,
	DISPID_TUNER_L_ATSC_MP2_PROGNO = 203,
	DISPID_TUNER_L_DVBT_BANDWIDTH = 301,
	DISPID_TUNER_L_DVBT_LPINNERFECMETHOD = 302,
	DISPID_TUNER_L_DVBT_LPINNERFECRATE = 303,
	DISPID_TUNER_L_DVBT_GUARDINTERVAL = 304,
	DISPID_TUNER_L_DVBT_HALPHA = 305,
	DISPID_TUNER_L_DVBT_TRANSMISSIONMODE = 306,
	DISPID_TUNER_L_DVBT_INUSE = 307,
	DISPID_TUNER_L_DVBT2_PHYSICALLAYERPIPEID = 351,
	DISPID_TUNER_L_DVBS_POLARISATION = 401,
	DISPID_TUNER_L_DVBS_WEST = 402,
	DISPID_TUNER_L_DVBS_ORBITAL = 403,
	DISPID_TUNER_L_DVBS_AZIMUTH = 404,
	DISPID_TUNER_L_DVBS_ELEVATION = 405,
	DISPID_TUNER_L_DVBS2_DISEQ_LNB_SOURCE = 406,
	DISPID_TUNER_TS_DVBS2_LOW_OSC_FREQ_OVERRIDE = 407,
	DISPID_TUNER_TS_DVBS2_HI_OSC_FREQ_OVERRIDE = 408,
	DISPID_TUNER_TS_DVBS2_LNB_SWITCH_FREQ_OVERRIDE = 409,
	DISPID_TUNER_TS_DVBS2_SPECTRAL_INVERSION_OVERRIDE = 410,
	DISPID_TUNER_L_DVBS2_ROLLOFF = 411,
	DISPID_TUNER_L_DVBS2_PILOT = 412,
	DISPID_TUNER_L_ANALOG_STANDARD = 601,
	DISPID_TUNER_L_DTV_O_MAJOR_CHANNEL = 701,
	DISPID_TUNER_C_TYPE = 1,
	DISPID_TUNER_C_STATUS = 2,
	DISPID_TUNER_C_LANGID = 3,
	DISPID_TUNER_C_DESCRIPTION = 4,
	DISPID_TUNER_C_CLONE = 5,
	DISPID_TUNER_C_MP2_PID = 101,
	DISPID_TUNER_C_MP2_PCRPID = 102,
	DISPID_TUNER_C_MP2_PROGNO = 103,
	DISPID_TUNER_C_ANALOG_AUDIO = 201,
	DISPID_TUNER_TS_DVB_SYSTEMTYPE = 101,
	DISPID_TUNER_TS_DVB2_NETWORK_ID = 102,
	DISPID_TUNER_TS_DVBS_LOW_OSC_FREQ = 1001,
	DISPID_TUNER_TS_DVBS_HI_OSC_FREQ = 1002,
	DISPID_TUNER_TS_DVBS_LNB_SWITCH_FREQ = 1003,
	DISPID_TUNER_TS_DVBS_INPUT_RANGE = 1004,
	DISPID_TUNER_TS_DVBS_SPECTRAL_INVERSION = 1005,
	DISPID_TUNER_TS_AR_MINFREQUENCY = 101,
	DISPID_TUNER_TS_AR_MAXFREQUENCY = 102,
	DISPID_TUNER_TS_AR_STEP = 103,
	DISPID_TUNER_TS_AR_COUNTRYCODE = 104,
	DISPID_TUNER_TS_AUX_COUNTRYCODE = 101,
	DISPID_TUNER_TS_ATV_MINCHANNEL = 101,
	DISPID_TUNER_TS_ATV_MAXCHANNEL = 102,
	DISPID_TUNER_TS_ATV_INPUTTYPE = 103,
	DISPID_TUNER_TS_ATV_COUNTRYCODE = 104,
	DISPID_TUNER_TS_ATSC_MINMINORCHANNEL = 201,
	DISPID_TUNER_TS_ATSC_MAXMINORCHANNEL = 202,
	DISPID_TUNER_TS_ATSC_MINPHYSCHANNEL = 203,
	DISPID_TUNER_TS_ATSC_MAXPHYSCHANNEL = 204,
	DISPID_TUNER_TS_DC_MINMAJORCHANNEL = 301,
	DISPID_TUNER_TS_DC_MAXMAJORCHANNEL = 302,
	DISPID_TUNER_TS_DC_MINSOURCEID = 303,
	DISPID_TUNER_TS_DC_MAXSOURCEID = 304,
	DISPID_CHTUNER_ATVAC_CHANNEL = 101,
	DISPID_CHTUNER_ATVDC_SYSTEM = 101,
	DISPID_CHTUNER_ATVDC_CONTENT = 102,
	DISPID_CHTUNER_CIDTR_CHANNELID = 101,
	DISPID_CHTUNER_CTR_CHANNEL = 101,
	DISPID_CHTUNER_ACTR_MINOR_CHANNEL = 201,
	DISPID_CHTUNER_DCTR_MAJOR_CHANNEL = 301,
	DISPID_CHTUNER_DCTR_SRCID = 302,
	DISPID_DVBTUNER_DVBC_ATTRIBUTESVALID = 101,
	DISPID_DVBTUNER_DVBC_PID = 102,
	DISPID_DVBTUNER_DVBC_TAG = 103,
	DISPID_DVBTUNER_DVBC_COMPONENTTYPE = 104,
	DISPID_DVBTUNER_ONID = 101,
	DISPID_DVBTUNER_TSID = 102,
	DISPID_DVBTUNER_SID = 103,
	DISPID_MP2TUNER_TSID = 101,
	DISPID_MP2TUNER_PROGNO = 102,
	DISPID_MP2TUNERFACTORY_CREATETUNEREQUEST = 1,
}


[AllowDuplicates]
public enum EnTvRat_System : int32
{
	MPAA = 0,
	US_TV = 1,
	Canadian_English = 2,
	Canadian_French = 3,
	Reserved4 = 4,
	System5 = 5,
	System6 = 6,
	Reserved7 = 7,
	PBDA = 8,
	AgeBased = 9,
	TvRat_kSystems = 10,
	TvRat_SystemDontKnow = 255,
}


[AllowDuplicates]
public enum EnTvRat_GenericLevel : int32
{
	TvRat_0 = 0,
	TvRat_1 = 1,
	TvRat_2 = 2,
	TvRat_3 = 3,
	TvRat_4 = 4,
	TvRat_5 = 5,
	TvRat_6 = 6,
	TvRat_7 = 7,
	TvRat_8 = 8,
	TvRat_9 = 9,
	TvRat_10 = 10,
	TvRat_11 = 11,
	TvRat_12 = 12,
	TvRat_13 = 13,
	TvRat_14 = 14,
	TvRat_15 = 15,
	TvRat_16 = 16,
	TvRat_17 = 17,
	TvRat_18 = 18,
	TvRat_19 = 19,
	TvRat_20 = 20,
	TvRat_21 = 21,
	TvRat_kLevels = 22,
	TvRat_Unblock = -1,
	TvRat_LevelDontKnow = 255,
}


[AllowDuplicates]
public enum EnTvRat_MPAA : int32
{
	MPAA_NotApplicable = 0,
	MPAA_G = 1,
	MPAA_PG = 2,
	MPAA_PG13 = 3,
	MPAA_R = 4,
	MPAA_NC17 = 5,
	MPAA_X = 6,
	MPAA_NotRated = 7,
}


[AllowDuplicates]
public enum EnTvRat_US_TV : int32
{
	US_TV_None = 0,
	US_TV_Y = 1,
	US_TV_Y7 = 2,
	US_TV_G = 3,
	US_TV_PG = 4,
	US_TV_14 = 5,
	US_TV_MA = 6,
	US_TV_None7 = 7,
}


[AllowDuplicates]
public enum EnTvRat_CAE_TV : int32
{
	CAE_TV_Exempt = 0,
	CAE_TV_C = 1,
	CAE_TV_C8 = 2,
	CAE_TV_G = 3,
	CAE_TV_PG = 4,
	CAE_TV_14 = 5,
	CAE_TV_18 = 6,
	CAE_TV_Reserved = 7,
}


[AllowDuplicates]
public enum EnTvRat_CAF_TV : int32
{
	CAF_TV_Exempt = 0,
	CAF_TV_G = 1,
	CAF_TV_8 = 2,
	CAF_TV_13 = 3,
	CAF_TV_16 = 4,
	CAF_TV_18 = 5,
	CAF_TV_Reserved6 = 6,
	CAF_TV_Reserved = 7,
}


[AllowDuplicates]
public enum BfEnTvRat_GenericAttributes : int32
{
	BfAttrNone = 0,
	BfIsBlocked = 1,
	BfIsAttr_1 = 2,
	BfIsAttr_2 = 4,
	BfIsAttr_3 = 8,
	BfIsAttr_4 = 16,
	BfIsAttr_5 = 32,
	BfIsAttr_6 = 64,
	BfIsAttr_7 = 128,
	BfValidAttrSubmask = 255,
}


[AllowDuplicates]
public enum BfEnTvRat_Attributes_US_TV : int32
{
	US_TV_IsBlocked = 1,
	US_TV_IsViolent = 2,
	US_TV_IsSexualSituation = 4,
	US_TV_IsAdultLanguage = 8,
	US_TV_IsSexuallySuggestiveDialog = 16,
	US_TV_ValidAttrSubmask = 31,
}


[AllowDuplicates]
public enum BfEnTvRat_Attributes_MPAA : int32
{
	MPAA_IsBlocked = 1,
	MPAA_ValidAttrSubmask = 1,
}


[AllowDuplicates]
public enum BfEnTvRat_Attributes_CAE_TV : int32
{
	CAE_IsBlocked = 1,
	CAE_ValidAttrSubmask = 1,
}


[AllowDuplicates]
public enum BfEnTvRat_Attributes_CAF_TV : int32
{
	CAF_IsBlocked = 1,
	CAF_ValidAttrSubmask = 1,
}


[AllowDuplicates]
public enum FormatNotSupportedEvents : int32
{
	FORMATNOTSUPPORTED_CLEAR = 0,
	FORMATNOTSUPPORTED_NOTSUPPORTED = 1,
}


[AllowDuplicates]
public enum ProtType : int32
{
	PROT_COPY_FREE = 1,
	PROT_COPY_ONCE = 2,
	PROT_COPY_NEVER = 3,
	PROT_COPY_NEVER_REALLY = 4,
	PROT_COPY_NO_MORE = 5,
	PROT_COPY_FREE_CIT = 6,
	PROT_COPY_BF = 7,
	PROT_COPY_CN_RECORDING_STOP = 8,
	PROT_COPY_FREE_SECURE = 9,
	PROT_COPY_INVALID = 50,
}


[AllowDuplicates]
public enum EncDecEvents : int32
{
	ENCDEC_CPEVENT = 0,
	ENCDEC_RECORDING_STATUS = 1,
}


[AllowDuplicates]
public enum CPRecordingStatus : int32
{
	RECORDING_STOPPED = 0,
	RECORDING_STARTED = 1,
}


[AllowDuplicates]
public enum CPEventBitShift : int32
{
	CPEVENT_BITSHIFT_RATINGS = 0,
	CPEVENT_BITSHIFT_COPP = 1,
	CPEVENT_BITSHIFT_LICENSE = 2,
	CPEVENT_BITSHIFT_ROLLBACK = 3,
	CPEVENT_BITSHIFT_SAC = 4,
	CPEVENT_BITSHIFT_DOWNRES = 5,
	CPEVENT_BITSHIFT_STUBLIB = 6,
	CPEVENT_BITSHIFT_UNTRUSTEDGRAPH = 7,
	CPEVENT_BITSHIFT_PENDING_CERTIFICATE = 8,
	CPEVENT_BITSHIFT_NO_PLAYREADY = 9,
}


[AllowDuplicates]
public enum CPEvents : int32
{
	CPEVENT_NONE = 0,
	CPEVENT_RATINGS = 1,
	CPEVENT_COPP = 2,
	CPEVENT_LICENSE = 3,
	CPEVENT_ROLLBACK = 4,
	CPEVENT_SAC = 5,
	CPEVENT_DOWNRES = 6,
	CPEVENT_STUBLIB = 7,
	CPEVENT_UNTRUSTEDGRAPH = 8,
	CPEVENT_PROTECTWINDOWED = 9,
}


[AllowDuplicates]
public enum RevokedComponent : int32
{
	REVOKED_COPP = 0,
	REVOKED_SAC = 1,
	REVOKED_APP_STUB = 2,
	REVOKED_SECURE_PIPELINE = 3,
	REVOKED_MAX_TYPES = 4,
}


[AllowDuplicates]
public enum EnTag_Mode : int32
{
	EnTag_Remove = 0,
	EnTag_Once = 1,
	EnTag_Repeat = 2,
}


[AllowDuplicates]
public enum COPPEventBlockReason : int32
{
	COPP_Unknown = -1,
	COPP_BadDriver = 0,
	COPP_NoCardHDCPSupport = 1,
	COPP_NoMonitorHDCPSupport = 2,
	COPP_BadCertificate = 3,
	COPP_InvalidBusProtection = 4,
	COPP_AeroGlassOff = 5,
	COPP_RogueApp = 6,
	COPP_ForbiddenVideo = 7,
	COPP_Activate = 8,
	COPP_DigitalAudioUnprotected = 9,
}


[AllowDuplicates]
public enum LicenseEventBlockReason : int32
{
	LIC_BadLicense = 0,
	LIC_NeedIndiv = 1,
	LIC_Expired = 2,
	LIC_NeedActivation = 3,
	LIC_ExtenderBlocked = 4,
}


[AllowDuplicates]
public enum DownResEventParam : int32
{
	DOWNRES_Always = 0,
	DOWNRES_InWindowOnly = 1,
	DOWNRES_Undefined = 2,
}


[AllowDuplicates]
public enum SegDispidList : int32
{
	dispidName = 0,
	dispidStatus = 1,
	dispidDevImageSourceWidth = 2,
	dispidDevImageSourceHeight = 3,
	dispidDevCountryCode = 4,
	dispidDevOverScan = 5,
	dispidSegment = 6,
	dispidDevVolume = 7,
	dispidDevBalance = 8,
	dispidDevPower = 9,
	dispidTuneChan = 10,
	dispidDevVideoSubchannel = 11,
	dispidDevAudioSubchannel = 12,
	dispidChannelAvailable = 13,
	dispidDevVideoFrequency = 14,
	dispidDevAudioFrequency = 15,
	dispidCount = 16,
	dispidDevFileName = 17,
	dispidVisible = 18,
	dispidOwner = 19,
	dispidMessageDrain = 20,
	dispidViewable = 21,
	dispidDevView = 22,
	dispidKSCat = 23,
	dispidCLSID = 24,
	dispid_KSCat = 25,
	dispid_CLSID = 26,
	dispidTune = 27,
	dispidTS = 28,
	dispidDevSAP = 29,
	dispidClip = 30,
	dispidRequestedClipRect = 31,
	dispidClippedSourceRect = 32,
	dispidAvailableSourceRect = 33,
	dispidMediaPosition = 34,
	dispidDevRun = 35,
	dispidDevPause = 36,
	dispidDevStop = 37,
	dispidCCEnable = 38,
	dispidDevStep = 39,
	dispidDevCanStep = 40,
	dispidSourceSize = 41,
	dispid_playtitle = 42,
	dispid_playchapterintitle = 43,
	dispid_playchapter = 44,
	dispid_playchaptersautostop = 45,
	dispid_playattime = 46,
	dispid_playattimeintitle = 47,
	dispid_playperiodintitleautostop = 48,
	dispid_replaychapter = 49,
	dispid_playprevchapter = 50,
	dispid_playnextchapter = 51,
	dispid_playforwards = 52,
	dispid_playbackwards = 53,
	dispid_stilloff = 54,
	dispid_audiolanguage = 55,
	dispid_showmenu = 56,
	dispid_resume = 57,
	dispid_returnfromsubmenu = 58,
	dispid_buttonsavailable = 59,
	dispid_currentbutton = 60,
	dispid_SelectAndActivateButton = 61,
	dispid_ActivateButton = 62,
	dispid_SelectRightButton = 63,
	dispid_SelectLeftButton = 64,
	dispid_SelectLowerButton = 65,
	dispid_SelectUpperButton = 66,
	dispid_ActivateAtPosition = 67,
	dispid_SelectAtPosition = 68,
	dispid_ButtonAtPosition = 69,
	dispid_NumberOfChapters = 70,
	dispid_TotalTitleTime = 71,
	dispid_TitlesAvailable = 72,
	dispid_VolumesAvailable = 73,
	dispid_CurrentVolume = 74,
	dispid_CurrentDiscSide = 75,
	dispid_CurrentDomain = 76,
	dispid_CurrentChapter = 77,
	dispid_CurrentTitle = 78,
	dispid_CurrentTime = 79,
	dispid_FramesPerSecond = 80,
	dispid_DVDTimeCode2bstr = 81,
	dispid_DVDDirectory = 82,
	dispid_IsSubpictureStreamEnabled = 83,
	dispid_IsAudioStreamEnabled = 84,
	dispid_CurrentSubpictureStream = 85,
	dispid_SubpictureLanguage = 86,
	dispid_CurrentAudioStream = 87,
	dispid_AudioStreamsAvailable = 88,
	dispid_AnglesAvailable = 89,
	dispid_CurrentAngle = 90,
	dispid_CCActive = 91,
	dispid_CurrentCCService = 92,
	dispid_SubpictureStreamsAvailable = 93,
	dispid_SubpictureOn = 94,
	dispid_DVDUniqueID = 95,
	dispid_EnableResetOnStop = 96,
	dispid_AcceptParentalLevelChange = 97,
	dispid_NotifyParentalLevelChange = 98,
	dispid_SelectParentalCountry = 99,
	dispid_SelectParentalLevel = 100,
	dispid_TitleParentalLevels = 101,
	dispid_PlayerParentalCountry = 102,
	dispid_PlayerParentalLevel = 103,
	dispid_Eject = 104,
	dispid_UOPValid = 105,
	dispid_SPRM = 106,
	dispid_GPRM = 107,
	dispid_DVDTextStringType = 108,
	dispid_DVDTextString = 109,
	dispid_DVDTextNumberOfStrings = 110,
	dispid_DVDTextNumberOfLanguages = 111,
	dispid_DVDTextLanguageLCID = 112,
	dispid_RegionChange = 113,
	dispid_DVDAdm = 114,
	dispid_DeleteBookmark = 115,
	dispid_RestoreBookmark = 116,
	dispid_SaveBookmark = 117,
	dispid_SelectDefaultAudioLanguage = 118,
	dispid_SelectDefaultSubpictureLanguage = 119,
	dispid_PreferredSubpictureStream = 120,
	dispid_DefaultMenuLanguage = 121,
	dispid_DefaultSubpictureLanguage = 122,
	dispid_DefaultAudioLanguage = 123,
	dispid_DefaultSubpictureLanguageExt = 124,
	dispid_DefaultAudioLanguageExt = 125,
	dispid_LanguageFromLCID = 126,
	dispid_KaraokeAudioPresentationMode = 127,
	dispid_KaraokeChannelContent = 128,
	dispid_KaraokeChannelAssignment = 129,
	dispid_RestorePreferredSettings = 130,
	dispid_ButtonRect = 131,
	dispid_DVDScreenInMouseCoordinates = 132,
	dispid_CustomCompositorClass = 133,
	dispidCustomCompositorClass = 134,
	dispid_CustomCompositor = 135,
	dispidMixerBitmap = 136,
	dispid_MixerBitmap = 137,
	dispidMixerBitmapOpacity = 138,
	dispidMixerBitmapRect = 139,
	dispidSetupMixerBitmap = 140,
	dispidUsingOverlay = 141,
	dispidDisplayChange = 142,
	dispidRePaint = 143,
	dispid_IsEqualDevice = 144,
	dispidrate = 145,
	dispidposition = 146,
	dispidpositionmode = 147,
	dispidlength = 148,
	dispidChangePassword = 149,
	dispidSaveParentalLevel = 150,
	dispidSaveParentalCountry = 151,
	dispidConfirmPassword = 152,
	dispidGetParentalLevel = 153,
	dispidGetParentalCountry = 154,
	dispidDefaultAudioLCID = 155,
	dispidDefaultSubpictureLCID = 156,
	dispidDefaultMenuLCID = 157,
	dispidBookmarkOnStop = 158,
	dispidMaxVidRect = 159,
	dispidMinVidRect = 160,
	dispidCapture = 161,
	dispid_DecimateInput = 162,
	dispidAlloctor = 163,
	dispid_Allocator = 164,
	dispidAllocPresentID = 165,
	dispidSetAllocator = 166,
	dispid_SetAllocator = 167,
	dispidStreamBufferSinkName = 168,
	dispidStreamBufferSourceName = 169,
	dispidStreamBufferContentRecording = 170,
	dispidStreamBufferReferenceRecording = 171,
	dispidstarttime = 172,
	dispidstoptime = 173,
	dispidrecordingstopped = 174,
	dispidrecordingstarted = 175,
	dispidNameSetLock = 176,
	dispidrecordingtype = 177,
	dispidstart = 178,
	dispidRecordingAttribute = 179,
	dispid_RecordingAttribute = 180,
	dispidSBEConfigure = 181,
	dispid_CurrentRatings = 182,
	dispid_MaxRatingsLevel = 183,
	dispid_audioencoderint = 184,
	dispid_videoencoderint = 185,
	dispidService = 186,
	dispid_BlockUnrated = 187,
	dispid_UnratedDelay = 188,
	dispid_SuppressEffects = 189,
	dispidsbesource = 190,
	dispidSetSinkFilter = 191,
	dispid_SinkStreams = 192,
	dispidTVFormats = 193,
	dispidModes = 194,
	dispidAuxInputs = 195,
	dispidTeleTextFilter = 196,
	dispid_channelchangeint = 197,
	dispidUnlockProfile = 198,
	dispid_AddFilter = 199,
	dispidSetMinSeek = 200,
	dispidRateEx = 201,
	dispidaudiocounter = 202,
	dispidvideocounter = 203,
	dispidcccounter = 204,
	dispidwstcounter = 205,
	dispid_audiocounter = 206,
	dispid_videocounter = 207,
	dispid_cccounter = 208,
	dispid_wstcounter = 209,
	dispidaudioanalysis = 210,
	dispidvideoanalysis = 211,
	dispiddataanalysis = 212,
	dispidaudio_analysis = 213,
	dispidvideo_analysis = 214,
	dispiddata_analysis = 215,
	dispid_resetFilterList = 216,
	dispidDevicePath = 217,
	dispid_SourceFilter = 218,
	dispid__SourceFilter = 219,
	dispidUserEvent = 220,
	dispid_Bookmark = 221,
	LastReservedDeviceDispid = 16383,
}


[AllowDuplicates]
public enum SegEventidList : int32
{
	eventidStateChange = 0,
	eventidOnTuneChanged = 1,
	eventidEndOfMedia = 2,
	eventidDVDNotify = 3,
	eventidPlayForwards = 4,
	eventidPlayBackwards = 5,
	eventidShowMenu = 6,
	eventidResume = 7,
	eventidSelectOrActivateButton = 8,
	eventidStillOff = 9,
	eventidPauseOn = 10,
	eventidChangeCurrentAudioStream = 11,
	eventidChangeCurrentSubpictureStream = 12,
	eventidChangeCurrentAngle = 13,
	eventidPlayAtTimeInTitle = 14,
	eventidPlayAtTime = 15,
	eventidPlayChapterInTitle = 16,
	eventidPlayChapter = 17,
	eventidReplayChapter = 18,
	eventidPlayNextChapter = 19,
	eventidStop = 20,
	eventidReturnFromSubmenu = 21,
	eventidPlayTitle = 22,
	eventidPlayPrevChapter = 23,
	eventidChangeKaraokePresMode = 24,
	eventidChangeVideoPresMode = 25,
	eventidOverlayUnavailable = 26,
	eventidSinkCertificateFailure = 27,
	eventidSinkCertificateSuccess = 28,
	eventidSourceCertificateFailure = 29,
	eventidSourceCertificateSuccess = 30,
	eventidRatingsBlocked = 31,
	eventidRatingsUnlocked = 32,
	eventidRatingsChanged = 33,
	eventidWriteFailure = 34,
	eventidTimeHole = 35,
	eventidStaleDataRead = 36,
	eventidContentBecomingStale = 37,
	eventidStaleFileDeleted = 38,
	eventidEncryptionOn = 39,
	eventidEncryptionOff = 40,
	eventidRateChange = 41,
	eventidLicenseChange = 42,
	eventidCOPPBlocked = 43,
	eventidCOPPUnblocked = 44,
	dispidlicenseerrorcode = 45,
	eventidBroadcastEvent = 46,
	eventidBroadcastEventEx = 47,
	eventidContentPrimarilyAudio = 48,
	dispidAVDecAudioDualMonoEvent = 49,
	dispidAVAudioSampleRateEvent = 50,
	dispidAVAudioChannelConfigEvent = 51,
	dispidAVAudioChannelCountEvent = 52,
	dispidAVDecCommonMeanBitRateEvent = 53,
	dispidAVDDSurroundModeEvent = 54,
	dispidAVDecCommonInputFormatEvent = 55,
	dispidAVDecCommonOutputFormatEvent = 56,
	eventidWriteFailureClear = 57,
	LastReservedDeviceEvent = 16383,
}


[AllowDuplicates]
public enum PositionModeList : int32
{
	FrameMode = 0,
	TenthsSecondsMode = 1,
}


[AllowDuplicates]
public enum RecordingType : int32
{
	CONTENT = 0,
	REFERENCE = 1,
}


[AllowDuplicates]
public enum MSVidCCService : int32
{
	None = 0,
	Caption1 = 1,
	Caption2 = 2,
	Text1 = 3,
	Text2 = 4,
	XDS = 5,
}


[AllowDuplicates]
public enum MSVidSinkStreams : int32
{
	MSVidSink_Video = 1,
	MSVidSink_Audio = 2,
	MSVidSink_Other = 4,
}


[AllowDuplicates]
public enum MSVidSegmentType : int32
{
	MSVidSEG_SOURCE = 0,
	MSVidSEG_XFORM = 1,
	MSVidSEG_DEST = 2,
}


[AllowDuplicates]
public enum MSVidCtlButtonstate : int32
{
	MSVIDCTL_LEFT_BUTTON = 1,
	MSVIDCTL_RIGHT_BUTTON = 2,
	MSVIDCTL_MIDDLE_BUTTON = 4,
	MSVIDCTL_X_BUTTON1 = 8,
	MSVIDCTL_X_BUTTON2 = 16,
	MSVIDCTL_SHIFT = 1,
	MSVIDCTL_CTRL = 2,
	MSVIDCTL_ALT = 4,
}


[AllowDuplicates]
public enum DVDMenuIDConstants : int32
{
	dvdMenu_Title = 2,
	dvdMenu_Root = 3,
	dvdMenu_Subpicture = 4,
	dvdMenu_Audio = 5,
	dvdMenu_Angle = 6,
	dvdMenu_Chapter = 7,
}


[AllowDuplicates]
public enum DVDFilterState : int32
{
	dvdState_Undefined = -2,
	dvdState_Unitialized = -1,
	dvdState_Stopped = 0,
	dvdState_Paused = 1,
	dvdState_Running = 2,
}


[AllowDuplicates]
public enum DVDTextStringType : int32
{
	dvdStruct_Volume = 1,
	dvdStruct_Title = 2,
	dvdStruct_ParentalID = 3,
	dvdStruct_PartOfTitle = 4,
	dvdStruct_Cell = 5,
	dvdStream_Audio = 16,
	dvdStream_Subpicture = 17,
	dvdStream_Angle = 18,
	dvdChannel_Audio = 32,
	dvdGeneral_Name = 48,
	dvdGeneral_Comments = 49,
	dvdTitle_Series = 56,
	dvdTitle_Movie = 57,
	dvdTitle_Video = 58,
	dvdTitle_Album = 59,
	dvdTitle_Song = 60,
	dvdTitle_Other = 63,
	dvdTitle_Sub_Series = 64,
	dvdTitle_Sub_Movie = 65,
	dvdTitle_Sub_Video = 66,
	dvdTitle_Sub_Album = 67,
	dvdTitle_Sub_Song = 68,
	dvdTitle_Sub_Other = 71,
	dvdTitle_Orig_Series = 72,
	dvdTitle_Orig_Movie = 73,
	dvdTitle_Orig_Video = 74,
	dvdTitle_Orig_Album = 75,
	dvdTitle_Orig_Song = 76,
	dvdTitle_Orig_Other = 79,
	dvdOther_Scene = 80,
	dvdOther_Cut = 81,
	dvdOther_Take = 82,
}


[AllowDuplicates]
public enum DVDSPExt : int32
{
	dvdSPExt_NotSpecified = 0,
	dvdSPExt_Caption_Normal = 1,
	dvdSPExt_Caption_Big = 2,
	dvdSPExt_Caption_Children = 3,
	dvdSPExt_CC_Normal = 5,
	dvdSPExt_CC_Big = 6,
	dvdSPExt_CC_Children = 7,
	dvdSPExt_Forced = 9,
	dvdSPExt_DirectorComments_Normal = 13,
	dvdSPExt_DirectorComments_Big = 14,
	dvdSPExt_DirectorComments_Children = 15,
}


[AllowDuplicates]
public enum SourceSizeList : int32
{
	sslFullSize = 0,
	sslClipByOverScan = 1,
	sslClipByClipRect = 2,
}


[AllowDuplicates]
public enum MSViddispidList : int32
{
	dispidInputs = 0,
	dispidOutputs = 1,
	dispid_Inputs = 2,
	dispid_Outputs = 3,
	dispidVideoRenderers = 4,
	dispidAudioRenderers = 5,
	dispidFeatures = 6,
	dispidInput = 7,
	dispidOutput = 8,
	dispidVideoRenderer = 9,
	dispidAudioRenderer = 10,
	dispidSelectedFeatures = 11,
	dispidView = 12,
	dispidBuild = 13,
	dispidPause = 14,
	dispidRun = 15,
	dispidStop = 16,
	dispidDecompose = 17,
	dispidDisplaySize = 18,
	dispidMaintainAspectRatio = 19,
	dispidColorKey = 20,
	dispidStateChange = 21,
	dispidgetState = 22,
	dispidunbind = 23,
	dispidbind = 24,
	dispidDisableVideo = 25,
	dispidDisableAudio = 26,
	dispidViewNext = 27,
	dispidServiceP = 28,
}


[AllowDuplicates]
public enum DisplaySizeList : int32
{
	dslDefaultSize = 0,
	dslSourceSize = 0,
	dslHalfSourceSize = 1,
	dslDoubleSourceSize = 2,
	dslFullScreen = 3,
	dslHalfScreen = 4,
	dslQuarterScreen = 5,
	dslSixteenthScreen = 6,
}


[AllowDuplicates]
public enum MSVidCtlStateList : int32
{
	STATE_UNBUILT = -1,
	STATE_STOP = 0,
	STATE_PAUSE = 1,
	STATE_PLAY = 2,
}


[AllowDuplicates]
public enum RECORDING_TYPE : int32
{
	RECORDING_TYPE_CONTENT = 0,
	RECORDING_TYPE_REFERENCE = 1,
}


[AllowDuplicates]
public enum STREAMBUFFER_ATTR_DATATYPE : int32
{
	STREAMBUFFER_TYPE_DWORD = 0,
	STREAMBUFFER_TYPE_STRING = 1,
	STREAMBUFFER_TYPE_BINARY = 2,
	STREAMBUFFER_TYPE_BOOL = 3,
	STREAMBUFFER_TYPE_QWORD = 4,
	STREAMBUFFER_TYPE_WORD = 5,
	STREAMBUFFER_TYPE_GUID = 6,
}


[AllowDuplicates]
public enum CROSSBAR_DEFAULT_FLAGS : int32
{
	DEF_MODE_PROFILE = 1,
	DEF_MODE_STREAMS = 2,
}


[AllowDuplicates]
public enum MPEG_CURRENT_NEXT_BIT : int32
{
	MPEG_SECTION_IS_NEXT = 0,
	MPEG_SECTION_IS_CURRENT = 1,
}


[AllowDuplicates]
public enum MPEG_CONTEXT_TYPE : int32
{
	MPEG_CONTEXT_BCS_DEMUX = 0,
	MPEG_CONTEXT_WINSOCK = 1,
}


[AllowDuplicates]
public enum MPEG_REQUEST_TYPE : int32
{
	MPEG_RQST_UNKNOWN = 0,
	MPEG_RQST_GET_SECTION = 1,
	MPEG_RQST_GET_SECTION_ASYNC = 2,
	MPEG_RQST_GET_TABLE = 3,
	MPEG_RQST_GET_TABLE_ASYNC = 4,
	MPEG_RQST_GET_SECTIONS_STREAM = 5,
	MPEG_RQST_GET_PES_STREAM = 6,
	MPEG_RQST_GET_TS_STREAM = 7,
	MPEG_RQST_START_MPE_STREAM = 8,
}


[AllowDuplicates]
public enum VA_VIDEO_FORMAT : int32
{
	VA_VIDEO_COMPONENT = 0,
	VA_VIDEO_PAL = 1,
	VA_VIDEO_NTSC = 2,
	VA_VIDEO_SECAM = 3,
	VA_VIDEO_MAC = 4,
	VA_VIDEO_UNSPECIFIED = 5,
}


[AllowDuplicates]
public enum VA_COLOR_PRIMARIES : int32
{
	VA_PRIMARIES_ITU_R_BT_709 = 1,
	VA_PRIMARIES_UNSPECIFIED = 2,
	VA_PRIMARIES_ITU_R_BT_470_SYSTEM_M = 4,
	VA_PRIMARIES_ITU_R_BT_470_SYSTEM_B_G = 5,
	VA_PRIMARIES_SMPTE_170M = 6,
	VA_PRIMARIES_SMPTE_240M = 7,
	VA_PRIMARIES_H264_GENERIC_FILM = 8,
}


[AllowDuplicates]
public enum VA_TRANSFER_CHARACTERISTICS : int32
{
	VA_TRANSFER_CHARACTERISTICS_ITU_R_BT_709 = 1,
	VA_TRANSFER_CHARACTERISTICS_UNSPECIFIED = 2,
	VA_TRANSFER_CHARACTERISTICS_ITU_R_BT_470_SYSTEM_M = 4,
	VA_TRANSFER_CHARACTERISTICS_ITU_R_BT_470_SYSTEM_B_G = 5,
	VA_TRANSFER_CHARACTERISTICS_SMPTE_170M = 6,
	VA_TRANSFER_CHARACTERISTICS_SMPTE_240M = 7,
	VA_TRANSFER_CHARACTERISTICS_LINEAR = 8,
	VA_TRANSFER_CHARACTERISTICS_H264_LOG_100_TO_1 = 9,
	VA_TRANSFER_CHARACTERISTICS_H264_LOG_316_TO_1 = 10,
}


[AllowDuplicates]
public enum VA_MATRIX_COEFFICIENTS : int32
{
	VA_MATRIX_COEFF_H264_RGB = 0,
	VA_MATRIX_COEFF_ITU_R_BT_709 = 1,
	VA_MATRIX_COEFF_UNSPECIFIED = 2,
	VA_MATRIX_COEFF_FCC = 4,
	VA_MATRIX_COEFF_ITU_R_BT_470_SYSTEM_B_G = 5,
	VA_MATRIX_COEFF_SMPTE_170M = 6,
	VA_MATRIX_COEFF_SMPTE_240M = 7,
	VA_MATRIX_COEFF_H264_YCgCo = 8,
}


[AllowDuplicates]
public enum DVB_STRCONV_MODE : int32
{
	STRCONV_MODE_DVB = 0,
	STRCONV_MODE_DVB_EMPHASIS = 1,
	STRCONV_MODE_DVB_WITHOUT_EMPHASIS = 2,
	STRCONV_MODE_ISDB = 3,
}


[AllowDuplicates]
public enum CRID_LOCATION : int32
{
	CRID_LOCATION_IN_DESCRIPTOR = 0,
	CRID_LOCATION_IN_CIT = 1,
	CRID_LOCATION_DVB_RESERVED1 = 2,
	CRID_LOCATION_DVB_RESERVED2 = 3,
}


[AllowDuplicates]
public enum DESC_LINKAGE_TYPE : int32
{
	DESC_LINKAGE_RESERVED0 = 0,
	DESC_LINKAGE_INFORMATION = 1,
	DESC_LINKAGE_EPG = 2,
	DESC_LINKAGE_CA_REPLACEMENT = 3,
	DESC_LINKAGE_COMPLETE_NET_BOUQUET_SI = 4,
	DESC_LINKAGE_REPLACEMENT = 5,
	DESC_LINKAGE_DATA = 6,
	DESC_LINKAGE_RESERVED1 = 7,
	DESC_LINKAGE_USER = 8,
	DESC_LINKAGE_RESERVED2 = 255,
}


[AllowDuplicates]
public enum ChannelChangeSpanningEvent_State : int32
{
	ChannelChangeSpanningEvent_Start = 0,
	ChannelChangeSpanningEvent_End = 2,
}


[AllowDuplicates]
public enum ChannelType : int32
{
	ChannelTypeNone = 0,
	ChannelTypeOther = 1,
	ChannelTypeVideo = 2,
	ChannelTypeAudio = 4,
	ChannelTypeText = 8,
	ChannelTypeSubtitles = 16,
	ChannelTypeCaptions = 32,
	ChannelTypeSuperimpose = 64,
	ChannelTypeData = 128,
}


[AllowDuplicates]
public enum SignalAndServiceStatusSpanningEvent_State : int32
{
	SignalAndServiceStatusSpanningEvent_None = -1,
	SignalAndServiceStatusSpanningEvent_Clear = 0,
	SignalAndServiceStatusSpanningEvent_NoTVSignal = 1,
	SignalAndServiceStatusSpanningEvent_ServiceOffAir = 2,
	SignalAndServiceStatusSpanningEvent_WeakTVSignal = 3,
	SignalAndServiceStatusSpanningEvent_NoSubscription = 4,
	SignalAndServiceStatusSpanningEvent_AllAVScrambled = 5,
}


[AllowDuplicates]
public enum KSPROPERTY_BDA_ETHERNET_FILTER : int32
{
	KSPROPERTY_BDA_ETHERNET_FILTER_MULTICAST_LIST_SIZE = 0,
	KSPROPERTY_BDA_ETHERNET_FILTER_MULTICAST_LIST = 1,
	KSPROPERTY_BDA_ETHERNET_FILTER_MULTICAST_MODE = 2,
}


[AllowDuplicates]
public enum KSPROPERTY_BDA_IPv4_FILTER : int32
{
	KSPROPERTY_BDA_IPv4_FILTER_MULTICAST_LIST_SIZE = 0,
	KSPROPERTY_BDA_IPv4_FILTER_MULTICAST_LIST = 1,
	KSPROPERTY_BDA_IPv4_FILTER_MULTICAST_MODE = 2,
}


[AllowDuplicates]
public enum KSPROPERTY_BDA_IPv6_FILTER : int32
{
	KSPROPERTY_BDA_IPv6_FILTER_MULTICAST_LIST_SIZE = 0,
	KSPROPERTY_BDA_IPv6_FILTER_MULTICAST_LIST = 1,
	KSPROPERTY_BDA_IPv6_FILTER_MULTICAST_MODE = 2,
}


[AllowDuplicates]
public enum KSPROPERTY_BDA_SIGNAL_STATS : int32
{
	KSPROPERTY_BDA_SIGNAL_STRENGTH = 0,
	KSPROPERTY_BDA_SIGNAL_QUALITY = 1,
	KSPROPERTY_BDA_SIGNAL_PRESENT = 2,
	KSPROPERTY_BDA_SIGNAL_LOCKED = 3,
	KSPROPERTY_BDA_SAMPLE_TIME = 4,
	KSPROPERTY_BDA_SIGNAL_LOCK_CAPS = 5,
	KSPROPERTY_BDA_SIGNAL_LOCK_TYPE = 6,
}


[AllowDuplicates]
public enum BDA_LockType : int32
{
	Bda_LockType_None = 0,
	Bda_LockType_PLL = 1,
	Bda_LockType_DecoderDemod = 2,
	Bda_LockType_Complete = 128,
}


[AllowDuplicates]
public enum KSMETHOD_BDA_CHANGE_SYNC : int32
{
	KSMETHOD_BDA_START_CHANGES = 0,
	KSMETHOD_BDA_CHECK_CHANGES = 1,
	KSMETHOD_BDA_COMMIT_CHANGES = 2,
	KSMETHOD_BDA_GET_CHANGE_STATE = 3,
}


[AllowDuplicates]
public enum KSMETHOD_BDA_DEVICE_CONFIGURATION : int32
{
	KSMETHOD_BDA_CREATE_PIN_FACTORY = 0,
	KSMETHOD_BDA_DELETE_PIN_FACTORY = 1,
	KSMETHOD_BDA_CREATE_TOPOLOGY = 2,
}


[AllowDuplicates]
public enum KSPROPERTY_BDA_TOPOLOGY : int32
{
	KSPROPERTY_BDA_NODE_TYPES = 0,
	KSPROPERTY_BDA_PIN_TYPES = 1,
	KSPROPERTY_BDA_TEMPLATE_CONNECTIONS = 2,
	KSPROPERTY_BDA_NODE_METHODS = 3,
	KSPROPERTY_BDA_NODE_PROPERTIES = 4,
	KSPROPERTY_BDA_NODE_EVENTS = 5,
	KSPROPERTY_BDA_CONTROLLING_PIN_ID = 6,
	KSPROPERTY_BDA_NODE_DESCRIPTORS = 7,
}


[AllowDuplicates]
public enum KSPROPERTY_BDA_PIN_CONTROL : int32
{
	KSPROPERTY_BDA_PIN_ID = 0,
	KSPROPERTY_BDA_PIN_TYPE = 1,
}


[AllowDuplicates]
public enum KSPROPERTY_BDA_PIN_EVENT : int32
{
	KSEVENT_BDA_PIN_CONNECTED = 0,
	KSEVENT_BDA_PIN_DISCONNECTED = 1,
}


[AllowDuplicates]
public enum KSPROPERTY_BDA_VOID_TRANSFORM : int32
{
	KSPROPERTY_BDA_VOID_TRANSFORM_START = 0,
	KSPROPERTY_BDA_VOID_TRANSFORM_STOP = 1,
}


[AllowDuplicates]
public enum KSPROPERTY_BDA_NULL_TRANSFORM : int32
{
	KSPROPERTY_BDA_NULL_TRANSFORM_START = 0,
	KSPROPERTY_BDA_NULL_TRANSFORM_STOP = 1,
}


[AllowDuplicates]
public enum KSPROPERTY_BDA_FREQUENCY_FILTER : int32
{
	KSPROPERTY_BDA_RF_TUNER_FREQUENCY = 0,
	KSPROPERTY_BDA_RF_TUNER_POLARITY = 1,
	KSPROPERTY_BDA_RF_TUNER_RANGE = 2,
	KSPROPERTY_BDA_RF_TUNER_TRANSPONDER = 3,
	KSPROPERTY_BDA_RF_TUNER_BANDWIDTH = 4,
	KSPROPERTY_BDA_RF_TUNER_FREQUENCY_MULTIPLIER = 5,
	KSPROPERTY_BDA_RF_TUNER_CAPS = 6,
	KSPROPERTY_BDA_RF_TUNER_SCAN_STATUS = 7,
	KSPROPERTY_BDA_RF_TUNER_STANDARD = 8,
	KSPROPERTY_BDA_RF_TUNER_STANDARD_MODE = 9,
}


[AllowDuplicates]
public enum BDA_SignalType : int32
{
	Bda_SignalType_Unknown = 0,
	Bda_SignalType_Analog = 1,
	Bda_SignalType_Digital = 2,
}


[AllowDuplicates]
public enum BDA_DigitalSignalStandard : int32
{
	Bda_DigitalStandard_None = 0,
	Bda_DigitalStandard_DVB_T = 1,
	Bda_DigitalStandard_DVB_S = 2,
	Bda_DigitalStandard_DVB_C = 4,
	Bda_DigitalStandard_ATSC = 8,
	Bda_DigitalStandard_ISDB_T = 16,
	Bda_DigitalStandard_ISDB_S = 32,
	Bda_DigitalStandard_ISDB_C = 64,
}


[AllowDuplicates]
public enum KSEVENT_BDA_TUNER : int32
{
	KSEVENT_BDA_TUNER_SCAN = 0,
}


[AllowDuplicates]
public enum KSPROPERTY_BDA_LNB_INFO : int32
{
	KSPROPERTY_BDA_LNB_LOF_LOW_BAND = 0,
	KSPROPERTY_BDA_LNB_LOF_HIGH_BAND = 1,
	KSPROPERTY_BDA_LNB_SWITCH_FREQUENCY = 2,
}


[AllowDuplicates]
public enum KSPROPERTY_BDA_DISEQC_COMMAND : int32
{
	KSPROPERTY_BDA_DISEQC_ENABLE = 0,
	KSPROPERTY_BDA_DISEQC_LNB_SOURCE = 1,
	KSPROPERTY_BDA_DISEQC_USETONEBURST = 2,
	KSPROPERTY_BDA_DISEQC_REPEATS = 3,
	KSPROPERTY_BDA_DISEQC_SEND = 4,
	KSPROPERTY_BDA_DISEQC_RESPONSE = 5,
}


[AllowDuplicates]
public enum KSPROPERTY_BDA_DISEQC_EVENT : int32
{
	KSEVENT_BDA_DISEQC_DATA_RECEIVED = 0,
}


[AllowDuplicates]
public enum KSPROPERTY_BDA_DIGITAL_DEMODULATOR : int32
{
	KSPROPERTY_BDA_MODULATION_TYPE = 0,
	KSPROPERTY_BDA_INNER_FEC_TYPE = 1,
	KSPROPERTY_BDA_INNER_FEC_RATE = 2,
	KSPROPERTY_BDA_OUTER_FEC_TYPE = 3,
	KSPROPERTY_BDA_OUTER_FEC_RATE = 4,
	KSPROPERTY_BDA_SYMBOL_RATE = 5,
	KSPROPERTY_BDA_SPECTRAL_INVERSION = 6,
	KSPROPERTY_BDA_GUARD_INTERVAL = 7,
	KSPROPERTY_BDA_TRANSMISSION_MODE = 8,
	KSPROPERTY_BDA_ROLL_OFF = 9,
	KSPROPERTY_BDA_PILOT = 10,
	KSPROPERTY_BDA_SIGNALTIMEOUTS = 11,
	KSPROPERTY_BDA_PLP_NUMBER = 12,
}


[AllowDuplicates]
public enum KSPROPERTY_BDA_AUTODEMODULATE : int32
{
	KSPROPERTY_BDA_AUTODEMODULATE_START = 0,
	KSPROPERTY_BDA_AUTODEMODULATE_STOP = 1,
}


[AllowDuplicates]
public enum KSPROPERTY_IDS_BDA_TABLE : int32
{
	KSPROPERTY_BDA_TABLE_SECTION = 0,
}


[AllowDuplicates]
public enum KSPROPERTY_BDA_PIDFILTER : int32
{
	KSPROPERTY_BDA_PIDFILTER_MAP_PIDS = 0,
	KSPROPERTY_BDA_PIDFILTER_UNMAP_PIDS = 1,
	KSPROPERTY_BDA_PIDFILTER_LIST_PIDS = 2,
}


[AllowDuplicates]
public enum KSPROPERTY_BDA_CA : int32
{
	KSPROPERTY_BDA_ECM_MAP_STATUS = 0,
	KSPROPERTY_BDA_CA_MODULE_STATUS = 1,
	KSPROPERTY_BDA_CA_SMART_CARD_STATUS = 2,
	KSPROPERTY_BDA_CA_MODULE_UI = 3,
	KSPROPERTY_BDA_CA_SET_PROGRAM_PIDS = 4,
	KSPROPERTY_BDA_CA_REMOVE_PROGRAM = 5,
}


[AllowDuplicates]
public enum KSPROPERTY_BDA_CA_EVENT : int32
{
	KSEVENT_BDA_PROGRAM_FLOW_STATUS_CHANGED = 0,
	KSEVENT_BDA_CA_MODULE_STATUS_CHANGED = 1,
	KSEVENT_BDA_CA_SMART_CARD_STATUS_CHANGED = 2,
	KSEVENT_BDA_CA_MODULE_UI_REQUESTED = 3,
}


[AllowDuplicates]
public enum KSMETHOD_BDA_DRM : int32
{
	KSMETHOD_BDA_DRM_CURRENT = 0,
	KSMETHOD_BDA_DRM_DRMSTATUS = 1,
}


[AllowDuplicates]
public enum KSMETHOD_BDA_WMDRM : int32
{
	KSMETHOD_BDA_WMDRM_STATUS = 0,
	KSMETHOD_BDA_WMDRM_REVINFO = 1,
	KSMETHOD_BDA_WMDRM_CRL = 2,
	KSMETHOD_BDA_WMDRM_MESSAGE = 3,
	KSMETHOD_BDA_WMDRM_REISSUELICENSE = 4,
	KSMETHOD_BDA_WMDRM_RENEWLICENSE = 5,
	KSMETHOD_BDA_WMDRM_LICENSE = 6,
	KSMETHOD_BDA_WMDRM_KEYINFO = 7,
}


[AllowDuplicates]
public enum KSMETHOD_BDA_WMDRM_TUNER : int32
{
	KSMETHOD_BDA_WMDRMTUNER_CANCELCAPTURETOKEN = 0,
	KSMETHOD_BDA_WMDRMTUNER_SETPIDPROTECTION = 1,
	KSMETHOD_BDA_WMDRMTUNER_GETPIDPROTECTION = 2,
	KSMETHOD_BDA_WMDRMTUNER_SETSYNCVALUE = 3,
	KSMETHOD_BDA_WMDRMTUNER_STARTCODEPROFILE = 4,
	KSMETHOD_BDA_WMDRMTUNER_PURCHASE_ENTITLEMENT = 5,
}


[AllowDuplicates]
public enum KSMETHOD_BDA_EVENTING_SERVICE : int32
{
	KSMETHOD_BDA_EVENT_DATA = 0,
	KSMETHOD_BDA_EVENT_COMPLETE = 1,
}


[AllowDuplicates]
public enum KSEVENT_BDA_EVENT_TYPE : int32
{
	KSEVENT_BDA_EVENT_PENDINGEVENT = 0,
}


[AllowDuplicates]
public enum KSMETHOD_BDA_DEBUG_SERVICE : int32
{
	KSMETHOD_BDA_DEBUG_LEVEL = 0,
	KSMETHOD_BDA_DEBUG_DATA = 1,
}


[AllowDuplicates]
public enum KSMETHOD_BDA_TUNER_SERVICE : int32
{
	KSMETHOD_BDA_TUNER_SETTUNER = 0,
	KSMETHOD_BDA_TUNER_GETTUNERSTATE = 1,
	KSMETHOD_BDA_TUNER_SIGNALNOISERATIO = 2,
}


[AllowDuplicates]
public enum KSMETHOD_BDA_GPNV_SERVICE : int32
{
	KSMETHOD_BDA_GPNV_GETVALUE = 0,
	KSMETHOD_BDA_GPNV_SETVALUE = 1,
	KSMETHOD_BDA_GPNV_NAMEFROMINDEX = 2,
	KSMETHOD_BDA_GPNV_GETVALUEUPDATENAME = 3,
}


[AllowDuplicates]
public enum KSMETHOD_BDA_MUX_SERVICE : int32
{
	KSMETHOD_BDA_MUX_GETPIDLIST = 0,
	KSMETHOD_BDA_MUX_SETPIDLIST = 1,
}


[AllowDuplicates]
public enum KSMETHOD_BDA_SCAN_SERVICE : int32
{
	KSMETHOD_BDA_SCAN_CAPABILTIES = 0,
	KSMETHOD_BDA_SCANNING_STATE = 1,
	KSMETHOD_BDA_SCAN_FILTER = 2,
	KSMETHOD_BDA_SCAN_START = 3,
	KSMETHOD_BDA_SCAN_RESUME = 4,
	KSMETHOD_BDA_SCAN_STOP = 5,
}


[AllowDuplicates]
public enum KSMETHOD_BDA_GDDS_SERVICE : int32
{
	KSMETHOD_BDA_GDDS_DATATYPE = 0,
	KSMETHOD_BDA_GDDS_DATA = 1,
	KSMETHOD_BDA_GDDS_TUNEXMLFROMIDX = 2,
	KSMETHOD_BDA_GDDS_GETSERVICES = 3,
	KSMETHOD_BDA_GDDS_SERVICEFROMTUNEXML = 4,
	KSMETHOD_BDA_GDDS_DATAUPDATE = 5,
}


[AllowDuplicates]
public enum KSMETHOD_BDA_CAS_SERVICE : int32
{
	KSMETHOD_BDA_CAS_CHECKENTITLEMENTTOKEN = 0,
	KSMETHOD_BDA_CAS_SETCAPTURETOKEN = 1,
	KSMETHOD_BDA_CAS_OPENBROADCASTMMI = 2,
	KSMETHOD_BDA_CAS_CLOSEMMIDIALOG = 3,
}


[AllowDuplicates]
public enum KSMETHOD_BDA_ISDB_CAS : int32
{
	KSMETHOD_BDA_ISDBCAS_SETREQUEST = 0,
	KSMETHOD_BDA_ISDBCAS_RESPONSEDATA = 1,
}


[AllowDuplicates]
public enum KSMETHOD_BDA_TS_SELECTOR : int32
{
	KSMETHOD_BDA_TS_SELECTOR_SETTSID = 0,
	KSMETHOD_BDA_TS_SELECTOR_GETTSINFORMATION = 1,
}


[AllowDuplicates]
public enum KSMETHOD_BDA_USERACTIVITY_SERVICE : int32
{
	KSMETHOD_BDA_USERACTIVITY_USEREASON = 0,
	KSMETHOD_BDA_USERACTIVITY_INTERVAL = 1,
	KSMETHOD_BDA_USERACTIVITY_DETECTED = 2,
}


[AllowDuplicates]
public enum VIDEOENCODER_BITRATE_MODE : int32
{
	ConstantBitRate = 0,
	VariableBitRateAverage = 1,
	VariableBitRatePeak = 2,
}


[AllowDuplicates]
public enum COPP_HDCP_Protection_Level : int32
{
	COPP_HDCP_Level0 = 0,
	COPP_HDCP_LevelMin = 0,
	COPP_HDCP_Level1 = 1,
	COPP_HDCP_LevelMax = 1,
	COPP_HDCP_ForceDWORD = 2147483647,
}


[AllowDuplicates]
public enum COPP_CGMSA_Protection_Level : int32
{
	COPP_CGMSA_Disabled = 0,
	COPP_CGMSA_LevelMin = 0,
	COPP_CGMSA_CopyFreely = 1,
	COPP_CGMSA_CopyNoMore = 2,
	COPP_CGMSA_CopyOneGeneration = 3,
	COPP_CGMSA_CopyNever = 4,
	COPP_CGMSA_RedistributionControlRequired = 8,
	COPP_CGMSA_LevelMax = 12,
	COPP_CGMSA_ForceDWORD = 2147483647,
}


[AllowDuplicates]
public enum COPP_ACP_Protection_Level : int32
{
	COPP_ACP_Level0 = 0,
	COPP_ACP_LevelMin = 0,
	COPP_ACP_Level1 = 1,
	COPP_ACP_Level2 = 2,
	COPP_ACP_Level3 = 3,
	COPP_ACP_LevelMax = 3,
	COPP_ACP_ForceDWORD = 2147483647,
}


[AllowDuplicates]
public enum COPP_TVProtectionStandard : int32
{
	COPP_ProtectionStandard_Unknown = -2147483648,
	COPP_ProtectionStandard_None = 0,
	COPP_ProtectionStandard_IEC61880_525i = 1,
	COPP_ProtectionStandard_IEC61880_2_525i = 2,
	COPP_ProtectionStandard_IEC62375_625p = 4,
	COPP_ProtectionStandard_EIA608B_525 = 8,
	COPP_ProtectionStandard_EN300294_625i = 16,
	COPP_ProtectionStandard_CEA805A_TypeA_525p = 32,
	COPP_ProtectionStandard_CEA805A_TypeA_750p = 64,
	COPP_ProtectionStandard_CEA805A_TypeA_1125i = 128,
	COPP_ProtectionStandard_CEA805A_TypeB_525p = 256,
	COPP_ProtectionStandard_CEA805A_TypeB_750p = 512,
	COPP_ProtectionStandard_CEA805A_TypeB_1125i = 1024,
	COPP_ProtectionStandard_ARIBTRB15_525i = 2048,
	COPP_ProtectionStandard_ARIBTRB15_525p = 4096,
	COPP_ProtectionStandard_ARIBTRB15_750p = 8192,
	COPP_ProtectionStandard_ARIBTRB15_1125i = 16384,
	COPP_ProtectionStandard_Mask = -2147450881,
	COPP_ProtectionStandard_Reserved = 2147450880,
}


[AllowDuplicates]
public enum COPP_ImageAspectRatio_EN300294 : int32
{
	COPP_AspectRatio_EN300294_FullFormat4by3 = 0,
	COPP_AspectRatio_EN300294_Box14by9Center = 1,
	COPP_AspectRatio_EN300294_Box14by9Top = 2,
	COPP_AspectRatio_EN300294_Box16by9Center = 3,
	COPP_AspectRatio_EN300294_Box16by9Top = 4,
	COPP_AspectRatio_EN300294_BoxGT16by9Center = 5,
	COPP_AspectRatio_EN300294_FullFormat4by3ProtectedCenter = 6,
	COPP_AspectRatio_EN300294_FullFormat16by9Anamorphic = 7,
	COPP_AspectRatio_ForceDWORD = 2147483647,
}


[AllowDuplicates]
public enum COPP_StatusFlags : int32
{
	COPP_StatusNormal = 0,
	COPP_LinkLost = 1,
	COPP_RenegotiationRequired = 2,
	COPP_StatusFlagsReserved = -4,
}


[AllowDuplicates]
public enum COPP_StatusHDCPFlags : int32
{
	COPP_HDCPRepeater = 1,
	COPP_HDCPFlagsReserved = -2,
}


[AllowDuplicates]
public enum COPP_ConnectorType : int32
{
	COPP_ConnectorType_Unknown = -1,
	COPP_ConnectorType_VGA = 0,
	COPP_ConnectorType_SVideo = 1,
	COPP_ConnectorType_CompositeVideo = 2,
	COPP_ConnectorType_ComponentVideo = 3,
	COPP_ConnectorType_DVI = 4,
	COPP_ConnectorType_HDMI = 5,
	COPP_ConnectorType_LVDS = 6,
	COPP_ConnectorType_TMDS = 7,
	COPP_ConnectorType_D_JPN = 8,
	COPP_ConnectorType_Internal = -2147483648,
	COPP_ConnectorType_ForceDWORD = 2147483647,
}


[AllowDuplicates]
public enum COPP_BusType : int32
{
	COPP_BusType_Unknown = 0,
	COPP_BusType_PCI = 1,
	COPP_BusType_PCIX = 2,
	COPP_BusType_PCIExpress = 3,
	COPP_BusType_AGP = 4,
	COPP_BusType_Integrated = -2147483648,
	COPP_BusType_ForceDWORD = 2147483647,
}

#endregion

#region Function Pointers
public function BOOL AMGETERRORTEXTPROCA(HRESULT param0, PSTR param1, uint32 param2);

public function BOOL AMGETERRORTEXTPROCW(HRESULT param0, PWSTR param1, uint32 param2);

public function HRESULT PDXVA2SW_GETVIDEOPROCESSORRENDERTARGETCOUNT(DXVA2_VideoDesc* pVideoDesc, uint32* pCount);

public function HRESULT PDXVA2SW_GETVIDEOPROCESSORRENDERTARGETS(DXVA2_VideoDesc* pVideoDesc, uint32 Count, D3DFORMAT* pFormats);

public function HRESULT PDXVA2SW_GETVIDEOPROCESSORCAPS(DXVA2_VideoDesc* pVideoDesc, D3DFORMAT RenderTargetFormat, DXVA2_VideoProcessorCaps* pCaps);

public function HRESULT PDXVA2SW_GETVIDEOPROCESSORSUBSTREAMFORMATCOUNT(DXVA2_VideoDesc* pVideoDesc, D3DFORMAT RenderTargetFormat, uint32* pCount);

public function HRESULT PDXVA2SW_GETVIDEOPROCESSORSUBSTREAMFORMATS(DXVA2_VideoDesc* pVideoDesc, D3DFORMAT RenderTargetFormat, uint32 Count, D3DFORMAT* pFormats);

public function HRESULT PDXVA2SW_GETPROCAMPRANGE(DXVA2_VideoDesc* pVideoDesc, D3DFORMAT RenderTargetFormat, uint32 ProcAmpCap, DXVA2_ValueRange* pRange);

public function HRESULT PDXVA2SW_GETFILTERPROPERTYRANGE(DXVA2_VideoDesc* pVideoDesc, D3DFORMAT RenderTargetFormat, uint32 FilterSetting, DXVA2_ValueRange* pRange);

public function HRESULT PDXVA2SW_CREATEVIDEOPROCESSDEVICE(IDirect3DDevice9* pD3DD9, DXVA2_VideoDesc* pVideoDesc, D3DFORMAT RenderTargetFormat, uint32 MaxSubStreams, HANDLE* phDevice);

public function HRESULT PDXVA2SW_DESTROYVIDEOPROCESSDEVICE(HANDLE hDevice);

public function HRESULT PDXVA2SW_VIDEOPROCESSBEGINFRAME(HANDLE hDevice);

public function HRESULT PDXVA2SW_VIDEOPROCESSENDFRAME(HANDLE hDevice, HANDLE* pHandleComplete);

public function HRESULT PDXVA2SW_VIDEOPROCESSSETRENDERTARGET(HANDLE hDevice, IDirect3DSurface9* pRenderTarget);

public function HRESULT PDXVA2SW_VIDEOPROCESSBLT(HANDLE hDevice, DXVA2_VIDEOPROCESSBLT* pBlt);

#endregion

#region Structs
[CRepr]
public struct AMVPSIZE
{
	public uint32 dwWidth;
	public uint32 dwHeight;
}

[CRepr]
public struct AMVPDIMINFO
{
	public uint32 dwFieldWidth;
	public uint32 dwFieldHeight;
	public uint32 dwVBIWidth;
	public uint32 dwVBIHeight;
	public RECT rcValidRegion;
}

[CRepr]
public struct AMVPDATAINFO
{
	public uint32 dwSize;
	public uint32 dwMicrosecondsPerField;
	public AMVPDIMINFO amvpDimInfo;
	public uint32 dwPictAspectRatioX;
	public uint32 dwPictAspectRatioY;
	public BOOL bEnableDoubleClock;
	public BOOL bEnableVACT;
	public BOOL bDataIsInterlaced;
	public int32 lHalfLinesOdd;
	public BOOL bFieldPolarityInverted;
	public uint32 dwNumLinesInVREF;
	public int32 lHalfLinesEven;
	public uint32 dwReserved1;
}

[CRepr]
public struct AM_MEDIA_TYPE
{
	public Guid majortype;
	public Guid subtype;
	public BOOL bFixedSizeSamples;
	public BOOL bTemporalCompression;
	public uint32 lSampleSize;
	public Guid formattype;
	public IUnknown* pUnk;
	public uint32 cbFormat;
	public uint8* pbFormat;
}

[CRepr]
public struct ALLOCATOR_PROPERTIES
{
	public int32 cBuffers;
	public int32 cbBuffer;
	public int32 cbAlign;
	public int32 cbPrefix;
}

[CRepr]
public struct PIN_INFO
{
	public IBaseFilter* pFilter;
	public PIN_DIRECTION dir;
	public char16[128] achName;
}

[CRepr]
public struct FILTER_INFO
{
	public char16[128] achName;
	public IFilterGraph* pGraph;
}

[CRepr]
public struct AM_SAMPLE2_PROPERTIES
{
	public uint32 cbData;
	public uint32 dwTypeSpecificFlags;
	public uint32 dwSampleFlags;
	public int32 lActual;
	public int64 tStart;
	public int64 tStop;
	public uint32 dwStreamId;
	public AM_MEDIA_TYPE* pMediaType;
	public uint8* pbBuffer;
	public int32 cbBuffer;
}

[CRepr]
public struct REGFILTER
{
	public Guid Clsid;
	public PWSTR Name;
}

[CRepr]
public struct REGPINTYPES
{
	public Guid* clsMajorType;
	public Guid* clsMinorType;
}

[CRepr]
public struct REGFILTERPINS
{
	public PWSTR strName;
	public BOOL bRendered;
	public BOOL bOutput;
	public BOOL bZero;
	public BOOL bMany;
	public Guid* clsConnectsToFilter;
	public PWSTR strConnectsToPin;
	public uint32 nMediaTypes;
	public REGPINTYPES* lpMediaType;
}

[CRepr]
public struct REGPINMEDIUM
{
	public Guid clsMedium;
	public uint32 dw1;
	public uint32 dw2;
}

[CRepr]
public struct REGFILTERPINS2
{
	public uint32 dwFlags;
	public uint32 cInstances;
	public uint32 nMediaTypes;
	public REGPINTYPES* lpMediaType;
	public uint32 nMediums;
	public REGPINMEDIUM* lpMedium;
	public Guid* clsPinCategory;
}

[CRepr]
public struct REGFILTER2
{
	[CRepr, Union]
	public struct _Anonymous_e__Union
	{
		[CRepr]
		public struct _Anonymous1_e__Struct
		{
			public uint32 cPins;
			public REGFILTERPINS* rgPins;
		}
		[CRepr]
		public struct _Anonymous2_e__Struct
		{
			public uint32 cPins2;
			public REGFILTERPINS2* rgPins2;
		}
		public _Anonymous1_e__Struct Anonymous1;
		public _Anonymous2_e__Struct Anonymous2;
	}
	public uint32 dwVersion;
	public uint32 dwMerit;
	public using _Anonymous_e__Union Anonymous;
}

[CRepr]
public struct Quality
{
	public QualityMessageType Type;
	public int32 Proportion;
	public int64 Late;
	public int64 TimeStamp;
}

[CRepr]
public struct COLORKEY
{
	public uint32 KeyType;
	public uint32 PaletteIndex;
	public uint32 LowColorValue;
	public uint32 HighColorValue;
}

[CRepr]
public struct AM_STREAM_INFO
{
	public int64 tStart;
	public int64 tStop;
	public uint32 dwStartCookie;
	public uint32 dwStopCookie;
	public uint32 dwFlags;
}

[CRepr]
public struct VIDEO_STREAM_CONFIG_CAPS
{
	public Guid guid;
	public uint32 VideoStandard;
	public SIZE InputSize;
	public SIZE MinCroppingSize;
	public SIZE MaxCroppingSize;
	public int32 CropGranularityX;
	public int32 CropGranularityY;
	public int32 CropAlignX;
	public int32 CropAlignY;
	public SIZE MinOutputSize;
	public SIZE MaxOutputSize;
	public int32 OutputGranularityX;
	public int32 OutputGranularityY;
	public int32 StretchTapsX;
	public int32 StretchTapsY;
	public int32 ShrinkTapsX;
	public int32 ShrinkTapsY;
	public int64 MinFrameInterval;
	public int64 MaxFrameInterval;
	public int32 MinBitsPerSecond;
	public int32 MaxBitsPerSecond;
}

[CRepr]
public struct AUDIO_STREAM_CONFIG_CAPS
{
	public Guid guid;
	public uint32 MinimumChannels;
	public uint32 MaximumChannels;
	public uint32 ChannelsGranularity;
	public uint32 MinimumBitsPerSample;
	public uint32 MaximumBitsPerSample;
	public uint32 BitsPerSampleGranularity;
	public uint32 MinimumSampleFrequency;
	public uint32 MaximumSampleFrequency;
	public uint32 SampleFrequencyGranularity;
}

[CRepr]
public struct DVINFO
{
	public uint32 dwDVAAuxSrc;
	public uint32 dwDVAAuxCtl;
	public uint32 dwDVAAuxSrc1;
	public uint32 dwDVAAuxCtl1;
	public uint32 dwDVVAuxSrc;
	public uint32 dwDVVAuxCtl;
	public uint32[2] dwDVReserved;
}

[CRepr]
public struct STREAM_ID_MAP
{
	public uint32 stream_id;
	public uint32 dwMediaSampleContent;
	public uint32 ulSubstreamFilterValue;
	public int32 iDataOffset;
}

[CRepr]
public struct AMCOPPSignature
{
	public uint8[256] Signature;
}

[CRepr]
public struct AMCOPPCommand
{
	public Guid macKDI;
	public Guid guidCommandID;
	public uint32 dwSequence;
	public uint32 cbSizeData;
	public uint8[4056] CommandData;
}

[CRepr]
public struct AMCOPPStatusInput
{
	public Guid rApp;
	public Guid guidStatusRequestID;
	public uint32 dwSequence;
	public uint32 cbSizeData;
	public uint8[4056] StatusData;
}

[CRepr]
public struct AMCOPPStatusOutput
{
	public Guid macKDI;
	public uint32 cbSizeData;
	public uint8[4076] COPPStatus;
}

[CRepr]
public struct VMRPRESENTATIONINFO
{
	public uint32 dwFlags;
	public IDirectDrawSurface7* lpSurf;
	public int64 rtStart;
	public int64 rtEnd;
	public SIZE szAspectRatio;
	public RECT rcSrc;
	public RECT rcDst;
	public uint32 dwTypeSpecificFlags;
	public uint32 dwInterlaceFlags;
}

[CRepr]
public struct VMRALLOCATIONINFO
{
	public uint32 dwFlags;
	public BITMAPINFOHEADER* lpHdr;
	public DDPIXELFORMAT* lpPixFmt;
	public SIZE szAspectRatio;
	public uint32 dwMinBuffers;
	public uint32 dwMaxBuffers;
	public uint32 dwInterlaceFlags;
	public SIZE szNativeSize;
}

[CRepr]
public struct NORMALIZEDRECT
{
	public float left;
	public float top;
	public float right;
	public float bottom;
}

[CRepr]
public struct VMRGUID
{
	public Guid* pGUID;
	public Guid GUID;
}

[CRepr]
public struct VMRMONITORINFO
{
	public VMRGUID guid;
	public RECT rcMonitor;
	public HMONITOR hMon;
	public uint32 dwFlags;
	public char16[32] szDevice;
	public char16[256] szDescription;
	public LARGE_INTEGER liDriverVersion;
	public uint32 dwVendorId;
	public uint32 dwDeviceId;
	public uint32 dwSubSysId;
	public uint32 dwRevision;
}

[CRepr]
public struct VMRFrequency
{
	public uint32 dwNumerator;
	public uint32 dwDenominator;
}

[CRepr]
public struct VMRVideoDesc
{
	public uint32 dwSize;
	public uint32 dwSampleWidth;
	public uint32 dwSampleHeight;
	public BOOL SingleFieldPerSample;
	public uint32 dwFourCC;
	public VMRFrequency InputSampleFreq;
	public VMRFrequency OutputFrameFreq;
}

[CRepr]
public struct VMRDeinterlaceCaps
{
	public uint32 dwSize;
	public uint32 dwNumPreviousOutputFrames;
	public uint32 dwNumForwardRefSamples;
	public uint32 dwNumBackwardRefSamples;
	public VMRDeinterlaceTech DeinterlaceTechnology;
}

[CRepr]
public struct VMRALPHABITMAP
{
	public uint32 dwFlags;
	public HDC hdc;
	public IDirectDrawSurface7* pDDS;
	public RECT rSrc;
	public NORMALIZEDRECT rDest;
	public float fAlpha;
	public uint32 clrSrcKey;
}

[CRepr]
public struct VMRVIDEOSTREAMINFO
{
	public IDirectDrawSurface7* pddsVideoSurface;
	public uint32 dwWidth;
	public uint32 dwHeight;
	public uint32 dwStrmID;
	public float fAlpha;
	public DDCOLORKEY ddClrKey;
	public NORMALIZEDRECT rNormal;
}

[CRepr]
public struct DVD_ATR
{
	public uint32 ulCAT;
	public uint8[768] pbATRI;
}

[CRepr]
public struct DVD_TIMECODE
{
	public uint32 _bitfield;
}

[CRepr]
public struct DVD_HMSF_TIMECODE
{
	public uint8 bHours;
	public uint8 bMinutes;
	public uint8 bSeconds;
	public uint8 bFrames;
}

[CRepr]
public struct DVD_PLAYBACK_LOCATION2
{
	public uint32 TitleNum;
	public uint32 ChapterNum;
	public DVD_HMSF_TIMECODE TimeCode;
	public uint32 TimeCodeFlags;
}

[CRepr]
public struct DVD_PLAYBACK_LOCATION
{
	public uint32 TitleNum;
	public uint32 ChapterNum;
	public uint32 TimeCode;
}

[CRepr]
public struct DVD_AudioAttributes
{
	public DVD_AUDIO_APPMODE AppMode;
	public uint8 AppModeData;
	public DVD_AUDIO_FORMAT AudioFormat;
	public uint32 Language;
	public DVD_AUDIO_LANG_EXT LanguageExtension;
	public BOOL fHasMultichannelInfo;
	public uint32 dwFrequency;
	public uint8 bQuantization;
	public uint8 bNumberOfChannels;
	public uint32[2] dwReserved;
}

[CRepr]
public struct DVD_MUA_MixingInfo
{
	public BOOL fMixTo0;
	public BOOL fMixTo1;
	public BOOL fMix0InPhase;
	public BOOL fMix1InPhase;
	public uint32 dwSpeakerPosition;
}

[CRepr]
public struct DVD_MUA_Coeff
{
	public double log2_alpha;
	public double log2_beta;
}

[CRepr]
public struct DVD_MultichannelAudioAttributes
{
	public DVD_MUA_MixingInfo[8] Info;
	public DVD_MUA_Coeff[8] Coeff;
}

[CRepr]
public struct DVD_KaraokeAttributes
{
	public uint8 bVersion;
	public BOOL fMasterOfCeremoniesInGuideVocal1;
	public BOOL fDuet;
	public DVD_KARAOKE_ASSIGNMENT ChannelAssignment;
	public uint16[8] wChannelContents;
}

[CRepr]
public struct DVD_VideoAttributes
{
	public BOOL fPanscanPermitted;
	public BOOL fLetterboxPermitted;
	public uint32 ulAspectX;
	public uint32 ulAspectY;
	public uint32 ulFrameRate;
	public uint32 ulFrameHeight;
	public DVD_VIDEO_COMPRESSION Compression;
	public BOOL fLine21Field1InGOP;
	public BOOL fLine21Field2InGOP;
	public uint32 ulSourceResolutionX;
	public uint32 ulSourceResolutionY;
	public BOOL fIsSourceLetterboxed;
	public BOOL fIsFilmMode;
}

[CRepr]
public struct DVD_SubpictureAttributes
{
	public DVD_SUBPICTURE_TYPE Type;
	public DVD_SUBPICTURE_CODING CodingMode;
	public uint32 Language;
	public DVD_SUBPICTURE_LANG_EXT LanguageExtension;
}

[CRepr]
public struct DVD_TitleAttributes
{
	[CRepr, Union]
	public struct _Anonymous_e__Union
	{
		public DVD_TITLE_APPMODE AppMode;
		public DVD_HMSF_TIMECODE TitleLength;
	}
	public using _Anonymous_e__Union Anonymous;
	public DVD_VideoAttributes VideoAttributes;
	public uint32 ulNumberOfAudioStreams;
	public DVD_AudioAttributes[8] AudioAttributes;
	public DVD_MultichannelAudioAttributes[8] MultichannelAudioAttributes;
	public uint32 ulNumberOfSubpictureStreams;
	public DVD_SubpictureAttributes[32] SubpictureAttributes;
}

[CRepr]
public struct DVD_MenuAttributes
{
	public BOOL[8] fCompatibleRegion;
	public DVD_VideoAttributes VideoAttributes;
	public BOOL fAudioPresent;
	public DVD_AudioAttributes AudioAttributes;
	public BOOL fSubpicturePresent;
	public DVD_SubpictureAttributes SubpictureAttributes;
}

[CRepr]
public struct DVD_DECODER_CAPS
{
	public uint32 dwSize;
	public uint32 dwAudioCaps;
	public double dFwdMaxRateVideo;
	public double dFwdMaxRateAudio;
	public double dFwdMaxRateSP;
	public double dBwdMaxRateVideo;
	public double dBwdMaxRateAudio;
	public double dBwdMaxRateSP;
	public uint32 dwRes1;
	public uint32 dwRes2;
	public uint32 dwRes3;
	public uint32 dwRes4;
}

[CRepr]
public struct AM_DVD_RENDERSTATUS
{
	public HRESULT hrVPEStatus;
	public BOOL bDvdVolInvalid;
	public BOOL bDvdVolUnknown;
	public BOOL bNoLine21In;
	public BOOL bNoLine21Out;
	public int32 iNumStreams;
	public int32 iNumStreamsFailed;
	public uint32 dwFailedStreamsFlag;
}

[CRepr]
public struct BDA_TEMPLATE_CONNECTION
{
	public uint32 FromNodeType;
	public uint32 FromNodePinType;
	public uint32 ToNodeType;
	public uint32 ToNodePinType;
}

[CRepr]
public struct BDA_TEMPLATE_PIN_JOINT
{
	public uint32 uliTemplateConnection;
	public uint32 ulcInstancesMax;
}

[CRepr]
public struct KS_BDA_FRAME_INFO
{
	public uint32 ExtendedHeaderSize;
	public uint32 dwFrameFlags;
	public uint32 ulEvent;
	public uint32 ulChannelNumber;
	public uint32 ulSubchannelNumber;
	public uint32 ulReason;
}

[CRepr]
public struct BDA_ETHERNET_ADDRESS
{
	public uint8[6] rgbAddress;
}

[CRepr]
public struct BDA_ETHERNET_ADDRESS_LIST
{
	public uint32 ulcAddresses;
	public BDA_ETHERNET_ADDRESS* rgAddressl mut => &rgAddressl_impl;
	private BDA_ETHERNET_ADDRESS[ANYSIZE_ARRAY] rgAddressl_impl;
}

[CRepr]
public struct BDA_IPv4_ADDRESS
{
	public uint8[4] rgbAddress;
}

[CRepr]
public struct BDA_IPv4_ADDRESS_LIST
{
	public uint32 ulcAddresses;
	public BDA_IPv4_ADDRESS* rgAddressl mut => &rgAddressl_impl;
	private BDA_IPv4_ADDRESS[ANYSIZE_ARRAY] rgAddressl_impl;
}

[CRepr]
public struct BDA_IPv6_ADDRESS
{
	public uint8[6] rgbAddress;
}

[CRepr]
public struct BDA_IPv6_ADDRESS_LIST
{
	public uint32 ulcAddresses;
	public BDA_IPv6_ADDRESS* rgAddressl mut => &rgAddressl_impl;
	private BDA_IPv6_ADDRESS[ANYSIZE_ARRAY] rgAddressl_impl;
}

[CRepr]
public struct BDANODE_DESCRIPTOR
{
	public uint32 ulBdaNodeType;
	public Guid guidFunction;
	public Guid guidName;
}

[CRepr]
public struct BDA_TABLE_SECTION
{
	public uint32 ulPrimarySectionId;
	public uint32 ulSecondarySectionId;
	public uint32 ulcbSectionLength;
	public uint32* argbSectionData mut => &argbSectionData_impl;
	private uint32[ANYSIZE_ARRAY] argbSectionData_impl;
}

[CRepr]
public struct BDA_DISEQC_SEND
{
	public uint32 ulRequestId;
	public uint32 ulPacketLength;
	public uint8[8] argbPacketData;
}

[CRepr]
public struct BDA_DISEQC_RESPONSE
{
	public uint32 ulRequestId;
	public uint32 ulPacketLength;
	public uint8[8] argbPacketData;
}

[CRepr]
public struct PID_MAP
{
	public uint32 ulPID;
	public MEDIA_SAMPLE_CONTENT MediaSampleContent;
}

[CRepr]
public struct BDA_PID_MAP
{
	public MEDIA_SAMPLE_CONTENT MediaSampleContent;
	public uint32 ulcPIDs;
	public uint32* aulPIDs mut => &aulPIDs_impl;
	private uint32[ANYSIZE_ARRAY] aulPIDs_impl;
}

[CRepr]
public struct BDA_PID_UNMAP
{
	public uint32 ulcPIDs;
	public uint32* aulPIDs mut => &aulPIDs_impl;
	private uint32[ANYSIZE_ARRAY] aulPIDs_impl;
}

[CRepr]
public struct BDA_CA_MODULE_UI
{
	public uint32 ulFormat;
	public uint32 ulbcDesc;
	public uint32* ulDesc mut => &ulDesc_impl;
	private uint32[ANYSIZE_ARRAY] ulDesc_impl;
}

[CRepr]
public struct BDA_PROGRAM_PID_LIST
{
	public uint32 ulProgramNumber;
	public uint32 ulcPIDs;
	public uint32* ulPID mut => &ulPID_impl;
	private uint32[ANYSIZE_ARRAY] ulPID_impl;
}

[CRepr]
public struct BDA_DRM_DRMSTATUS
{
	public int32 lResult;
	public Guid DRMuuid;
	public uint32 ulDrmUuidListStringSize;
	public Guid* argbDrmUuidListString mut => &argbDrmUuidListString_impl;
	private Guid[ANYSIZE_ARRAY] argbDrmUuidListString_impl;
}

[CRepr]
public struct BDA_WMDRM_STATUS
{
	public int32 lResult;
	public uint32 ulMaxCaptureTokenSize;
	public uint32 uMaxStreamingPid;
	public uint32 ulMaxLicense;
	public uint32 ulMinSecurityLevel;
	public uint32 ulRevInfoSequenceNumber;
	public uint64 ulRevInfoIssuedTime;
	public uint32 ulRevListVersion;
	public uint32 ulRevInfoTTL;
	public uint32 ulState;
}

[CRepr]
public struct BDA_WMDRM_KEYINFOLIST
{
	public int32 lResult;
	public uint32 ulKeyuuidBufferLen;
	public Guid* argKeyuuidBuffer mut => &argKeyuuidBuffer_impl;
	private Guid[ANYSIZE_ARRAY] argKeyuuidBuffer_impl;
}

[CRepr]
public struct BDA_BUFFER
{
	public int32 lResult;
	public uint32 ulBufferSize;
	public uint8* argbBuffer mut => &argbBuffer_impl;
	private uint8[ANYSIZE_ARRAY] argbBuffer_impl;
}

[CRepr]
public struct BDA_WMDRM_RENEWLICENSE
{
	public int32 lResult;
	public uint32 ulDescrambleStatus;
	public uint32 ulXmrLicenseOutputLength;
	public uint8* argbXmrLicenceOutputBuffer mut => &argbXmrLicenceOutputBuffer_impl;
	private uint8[ANYSIZE_ARRAY] argbXmrLicenceOutputBuffer_impl;
}

[CRepr]
public struct BDA_WMDRMTUNER_PIDPROTECTION
{
	public int32 lResult;
	public Guid uuidKeyID;
}

[CRepr]
public struct BDA_WMDRMTUNER_PURCHASEENTITLEMENT
{
	public int32 lResult;
	public uint32 ulDescrambleStatus;
	public uint32 ulCaptureTokenLength;
	public uint8* argbCaptureTokenBuffer mut => &argbCaptureTokenBuffer_impl;
	private uint8[ANYSIZE_ARRAY] argbCaptureTokenBuffer_impl;
}

[CRepr]
public struct BDA_TUNER_TUNERSTATE
{
	public int32 lResult;
	public uint32 ulTuneLength;
	public uint8* argbTuneData mut => &argbTuneData_impl;
	private uint8[ANYSIZE_ARRAY] argbTuneData_impl;
}

[CRepr]
public struct BDA_TUNER_DIAGNOSTICS
{
	public int32 lResult;
	public uint32 ulSignalLevel;
	public uint32 ulSignalLevelQuality;
	public uint32 ulSignalNoiseRatio;
}

[CRepr]
public struct BDA_STRING
{
	public int32 lResult;
	public uint32 ulStringSize;
	public uint8* argbString mut => &argbString_impl;
	private uint8[ANYSIZE_ARRAY] argbString_impl;
}

[CRepr]
public struct BDA_SCAN_CAPABILTIES
{
	public int32 lResult;
	public uint64 ul64AnalogStandardsSupported;
}

[CRepr]
public struct BDA_SCAN_STATE
{
	public int32 lResult;
	public uint32 ulSignalLock;
	public uint32 ulSecondsLeft;
	public uint32 ulCurrentFrequency;
}

[CRepr]
public struct BDA_SCAN_START
{
	public int32 lResult;
	public uint32 LowerFrequency;
	public uint32 HigerFrequency;
}

[CRepr]
public struct BDA_GDDS_DATATYPE
{
	public int32 lResult;
	public Guid uuidDataType;
}

[CRepr]
public struct BDA_GDDS_DATA
{
	public int32 lResult;
	public uint32 ulDataLength;
	public uint32 ulPercentageProgress;
	public uint8* argbData mut => &argbData_impl;
	private uint8[ANYSIZE_ARRAY] argbData_impl;
}

[CRepr]
public struct BDA_USERACTIVITY_INTERVAL
{
	public int32 lResult;
	public uint32 ulActivityInterval;
}

[CRepr]
public struct BDA_CAS_CHECK_ENTITLEMENTTOKEN
{
	public int32 lResult;
	public uint32 ulDescrambleStatus;
}

[CRepr]
public struct BDA_CAS_CLOSE_MMIDIALOG
{
	public int32 lResult;
	public uint32 SessionResult;
}

[CRepr]
public struct BDA_CAS_REQUESTTUNERDATA
{
	public uint8 ucRequestPriority;
	public uint8 ucRequestReason;
	public uint8 ucRequestConsequences;
	public uint32 ulEstimatedTime;
}

[CRepr]
public struct BDA_CAS_OPENMMIDATA
{
	public uint32 ulDialogNumber;
	public uint32 ulDialogRequest;
	public Guid uuidDialogType;
	public uint16 usDialogDataLength;
	public uint8* argbDialogData mut => &argbDialogData_impl;
	private uint8[ANYSIZE_ARRAY] argbDialogData_impl;
}

[CRepr]
public struct BDA_CAS_CLOSEMMIDATA
{
	public uint32 ulDialogNumber;
}

[CRepr, Packed(1)]
public struct BDA_ISDBCAS_REQUESTHEADER
{
	public uint8 bInstruction;
	public uint8[3] bReserved;
	public uint32 ulDataLength;
	public uint8* argbIsdbCommand mut => &argbIsdbCommand_impl;
	private uint8[ANYSIZE_ARRAY] argbIsdbCommand_impl;
}

[CRepr, Packed(1)]
public struct BDA_ISDBCAS_RESPONSEDATA
{
	public int32 lResult;
	public uint32 ulRequestID;
	public uint32 ulIsdbStatus;
	public uint32 ulIsdbDataSize;
	public uint8* argbIsdbCommandData mut => &argbIsdbCommandData_impl;
	private uint8[ANYSIZE_ARRAY] argbIsdbCommandData_impl;
}

[CRepr]
public struct BDA_ISDBCAS_EMG_REQ
{
	public uint8 bCLA;
	public uint8 bINS;
	public uint8 bP1;
	public uint8 bP2;
	public uint8 bLC;
	public uint8[6] bCardId;
	public uint8 bProtocol;
	public uint8 bCABroadcasterGroupId;
	public uint8 bMessageControl;
	public uint8* bMessageCode mut => &bMessageCode_impl;
	private uint8[ANYSIZE_ARRAY] bMessageCode_impl;
}

[CRepr, Packed(2)]
public struct BDA_MUX_PIDLISTITEM
{
	public uint16 usPIDNumber;
	public uint16 usProgramNumber;
	public MUX_PID_TYPE ePIDType;
}

[CRepr, Packed(1)]
public struct BDA_TS_SELECTORINFO
{
	public uint8 bTSInfolength;
	public uint8[2] bReserved;
	public Guid guidNetworkType;
	public uint8 bTSIDCount;
	public uint16* usTSID mut => &usTSID_impl;
	private uint16[ANYSIZE_ARRAY] usTSID_impl;
}

[CRepr]
public struct BDA_TS_SELECTORINFO_ISDBS_EXT
{
	public uint8[48] bTMCC;
}

[CRepr]
public struct BDA_DVBT2_L1_SIGNALLING_DATA
{
	public uint8 L1Pre_TYPE;
	public uint8 L1Pre_BWT_S1_S2;
	public uint8 L1Pre_REPETITION_GUARD_PAPR;
	public uint8 L1Pre_MOD_COD_FEC;
	public uint8[5] L1Pre_POSTSIZE_INFO_PILOT;
	public uint8 L1Pre_TX_ID_AVAIL;
	public uint8[2] L1Pre_CELL_ID;
	public uint8[2] L1Pre_NETWORK_ID;
	public uint8[2] L1Pre_T2SYSTEM_ID;
	public uint8 L1Pre_NUM_T2_FRAMES;
	public uint8[2] L1Pre_NUM_DATA_REGENFLAG_L1POSTEXT;
	public uint8[2] L1Pre_NUMRF_CURRENTRF_RESERVED;
	public uint8[4] L1Pre_CRC32;
	public uint8* L1PostData mut => &L1PostData_impl;
	private uint8[ANYSIZE_ARRAY] L1PostData_impl;
}

[CRepr]
public struct BDA_RATING_PINRESET
{
	public uint8 bPinLength;
	public uint8* argbNewPin mut => &argbNewPin_impl;
	private uint8[ANYSIZE_ARRAY] argbNewPin_impl;
}

[CRepr]
public struct MPEG2_TRANSPORT_STRIDE
{
	public uint32 dwOffset;
	public uint32 dwPacketLength;
	public uint32 dwStride;
}

[CRepr]
public struct BDA_SIGNAL_TIMEOUTS
{
	public uint32 ulCarrierTimeoutMs;
	public uint32 ulScanningTimeoutMs;
	public uint32 ulTuningTimeoutMs;
}

[CRepr]
public struct EALocationCodeType
{
	public LocationCodeSchemeType LocationCodeScheme;
	public uint8 state_code;
	public uint8 county_subdivision;
	public uint16 county_code;
}

[CRepr]
public struct SmartCardApplication
{
	public ApplicationTypeType ApplicationType;
	public uint16 ApplicationVersion;
	public BSTR pbstrApplicationName;
	public BSTR pbstrApplicationURL;
}

[CRepr]
public struct AMVAUncompBufferInfo
{
	public uint32 dwMinNumSurfaces;
	public uint32 dwMaxNumSurfaces;
	public DDPIXELFORMAT ddUncompPixelFormat;
}

[CRepr]
public struct AMVAUncompDataInfo
{
	public uint32 dwUncompWidth;
	public uint32 dwUncompHeight;
	public DDPIXELFORMAT ddUncompPixelFormat;
}

[CRepr]
public struct AMVAInternalMemInfo
{
	public uint32 dwScratchMemAlloc;
}

[CRepr]
public struct AMVACompBufferInfo
{
	public uint32 dwNumCompBuffers;
	public uint32 dwWidthToCreate;
	public uint32 dwHeightToCreate;
	public uint32 dwBytesToAllocate;
	public DDSCAPS2 ddCompCaps;
	public DDPIXELFORMAT ddPixelFormat;
}

[CRepr]
public struct AMVABeginFrameInfo
{
	public uint32 dwDestSurfaceIndex;
	public void* pInputData;
	public uint32 dwSizeInputData;
	public void* pOutputData;
	public uint32 dwSizeOutputData;
}

[CRepr]
public struct AMVAEndFrameInfo
{
	public uint32 dwSizeMiscData;
	public void* pMiscData;
}

[CRepr]
public struct AMVABUFFERINFO
{
	public uint32 dwTypeIndex;
	public uint32 dwBufferIndex;
	public uint32 dwDataOffset;
	public uint32 dwDataSize;
}

[CRepr]
public struct AM_WST_PAGE
{
	public uint32 dwPageNr;
	public uint32 dwSubPageNr;
	public uint8* pucPageData;
}

[CRepr]
public struct TRUECOLORINFO
{
	public uint32[3] dwBitMasks;
	public RGBQUAD[256] bmiColors;
}

[CRepr]
public struct VIDEOINFOHEADER
{
	public RECT rcSource;
	public RECT rcTarget;
	public uint32 dwBitRate;
	public uint32 dwBitErrorRate;
	public int64 AvgTimePerFrame;
	public BITMAPINFOHEADER bmiHeader;
}

[CRepr]
public struct VIDEOINFO
{
	[CRepr, Union]
	public struct _Anonymous_e__Union
	{
		public RGBQUAD[256] bmiColors;
		public uint32[3] dwBitMasks;
		public TRUECOLORINFO TrueColorInfo;
	}
	public RECT rcSource;
	public RECT rcTarget;
	public uint32 dwBitRate;
	public uint32 dwBitErrorRate;
	public int64 AvgTimePerFrame;
	public BITMAPINFOHEADER bmiHeader;
	public using _Anonymous_e__Union Anonymous;
}

[CRepr]
public struct MPEG1VIDEOINFO
{
	public VIDEOINFOHEADER hdr;
	public uint32 dwStartTimeCode;
	public uint32 cbSequenceHeader;
	public uint8* bSequenceHeader mut => &bSequenceHeader_impl;
	private uint8[ANYSIZE_ARRAY] bSequenceHeader_impl;
}

[CRepr]
public struct ANALOGVIDEOINFO
{
	public RECT rcSource;
	public RECT rcTarget;
	public uint32 dwActiveWidth;
	public uint32 dwActiveHeight;
	public int64 AvgTimePerFrame;
}

[CRepr]
public struct AM_FRAMESTEP_STEP
{
	public uint32 dwFramesToStep;
}

[CRepr]
public struct AM_MPEGSTREAMTYPE
{
	public uint32 dwStreamId;
	public uint32 dwReserved;
	public AM_MEDIA_TYPE mt;
	public uint8* bFormat mut => &bFormat_impl;
	private uint8[ANYSIZE_ARRAY] bFormat_impl;
}

[CRepr]
public struct AM_MPEGSYSTEMTYPE
{
	public uint32 dwBitRate;
	public uint32 cStreams;
	public AM_MPEGSTREAMTYPE* Streams mut => &Streams_impl;
	private AM_MPEGSTREAMTYPE[ANYSIZE_ARRAY] Streams_impl;
}

[CRepr]
public struct VMR9PresentationInfo
{
	public uint32 dwFlags;
	public IDirect3DSurface9* lpSurf;
	public int64 rtStart;
	public int64 rtEnd;
	public SIZE szAspectRatio;
	public RECT rcSrc;
	public RECT rcDst;
	public uint32 dwReserved1;
	public uint32 dwReserved2;
}

[CRepr]
public struct VMR9AllocationInfo
{
	public uint32 dwFlags;
	public uint32 dwWidth;
	public uint32 dwHeight;
	public D3DFORMAT Format;
	public D3DPOOL Pool;
	public uint32 MinBuffers;
	public SIZE szAspectRatio;
	public SIZE szNativeSize;
}

[CRepr]
public struct VMR9NormalizedRect
{
	public float left;
	public float top;
	public float right;
	public float bottom;
}

[CRepr]
public struct VMR9ProcAmpControl
{
	public uint32 dwSize;
	public uint32 dwFlags;
	public float Brightness;
	public float Contrast;
	public float Hue;
	public float Saturation;
}

[CRepr]
public struct VMR9ProcAmpControlRange
{
	public uint32 dwSize;
	public VMR9ProcAmpControlFlags dwProperty;
	public float MinValue;
	public float MaxValue;
	public float DefaultValue;
	public float StepSize;
}

[CRepr]
public struct VMR9AlphaBitmap
{
	public uint32 dwFlags;
	public HDC hdc;
	public IDirect3DSurface9* pDDS;
	public RECT rSrc;
	public VMR9NormalizedRect rDest;
	public float fAlpha;
	public uint32 clrSrcKey;
	public uint32 dwFilterMode;
}

[CRepr]
public struct VMR9MonitorInfo
{
	public uint32 uDevID;
	public RECT rcMonitor;
	public HMONITOR hMon;
	public uint32 dwFlags;
	public char16[32] szDevice;
	public char16[512] szDescription;
	public LARGE_INTEGER liDriverVersion;
	public uint32 dwVendorId;
	public uint32 dwDeviceId;
	public uint32 dwSubSysId;
	public uint32 dwRevision;
}

[CRepr]
public struct VMR9Frequency
{
	public uint32 dwNumerator;
	public uint32 dwDenominator;
}

[CRepr]
public struct VMR9VideoDesc
{
	public uint32 dwSize;
	public uint32 dwSampleWidth;
	public uint32 dwSampleHeight;
	public VMR9_SampleFormat SampleFormat;
	public uint32 dwFourCC;
	public VMR9Frequency InputSampleFreq;
	public VMR9Frequency OutputFrameFreq;
}

[CRepr]
public struct VMR9DeinterlaceCaps
{
	public uint32 dwSize;
	public uint32 dwNumPreviousOutputFrames;
	public uint32 dwNumForwardRefSamples;
	public uint32 dwNumBackwardRefSamples;
	public VMR9DeinterlaceTech DeinterlaceTechnology;
}

[CRepr]
public struct VMR9VideoStreamInfo
{
	public IDirect3DSurface9* pddsVideoSurface;
	public uint32 dwWidth;
	public uint32 dwHeight;
	public uint32 dwStrmID;
	public float fAlpha;
	public VMR9NormalizedRect rNormal;
	public int64 rtStart;
	public int64 rtEnd;
	public VMR9_SampleFormat SampleFormat;
}

[CRepr, Packed(2)]
public struct RIFFCHUNK
{
	public uint32 fcc;
	public uint32 cb;
}

[CRepr, Packed(2)]
public struct RIFFLIST
{
	public uint32 fcc;
	public uint32 cb;
	public uint32 fccListType;
}

[CRepr, Packed(2)]
public struct AVIMAINHEADER
{
	public uint32 fcc;
	public uint32 cb;
	public uint32 dwMicroSecPerFrame;
	public uint32 dwMaxBytesPerSec;
	public uint32 dwPaddingGranularity;
	public uint32 dwFlags;
	public uint32 dwTotalFrames;
	public uint32 dwInitialFrames;
	public uint32 dwStreams;
	public uint32 dwSuggestedBufferSize;
	public uint32 dwWidth;
	public uint32 dwHeight;
	public uint32[4] dwReserved;
}

[CRepr, Packed(2)]
public struct AVIEXTHEADER
{
	public uint32 fcc;
	public uint32 cb;
	public uint32 dwGrandFrames;
	public uint32[61] dwFuture;
}

[CRepr, Packed(2)]
public struct AVISTREAMHEADER
{
	[CRepr]
	public struct _rcFrame_e__Struct
	{
		public int16 left;
		public int16 top;
		public int16 right;
		public int16 bottom;
	}
	public uint32 fcc;
	public uint32 cb;
	public uint32 fccType;
	public uint32 fccHandler;
	public uint32 dwFlags;
	public uint16 wPriority;
	public uint16 wLanguage;
	public uint32 dwInitialFrames;
	public uint32 dwScale;
	public uint32 dwRate;
	public uint32 dwStart;
	public uint32 dwLength;
	public uint32 dwSuggestedBufferSize;
	public uint32 dwQuality;
	public uint32 dwSampleSize;
	public _rcFrame_e__Struct rcFrame;
}

[CRepr, Packed(2)]
public struct AVIOLDINDEX
{
	[CRepr, Packed(2)]
	public struct _avioldindex_entry
	{
		public uint32 dwChunkId;
		public uint32 dwFlags;
		public uint32 dwOffset;
		public uint32 dwSize;
	}
	public uint32 fcc;
	public uint32 cb;
	public _avioldindex_entry* aIndex mut => &aIndex_impl;
	private _avioldindex_entry[ANYSIZE_ARRAY] aIndex_impl;
}

[CRepr, Packed(2)]
public struct TIMECODEDATA
{
	public TIMECODE time;
	public uint32 dwSMPTEflags;
	public uint32 dwUser;
}

[CRepr, Packed(2)]
public struct AVIMETAINDEX
{
	public uint32 fcc;
	public uint32 cb;
	public uint16 wLongsPerEntry;
	public uint8 bIndexSubType;
	public uint8 bIndexType;
	public uint32 nEntriesInUse;
	public uint32 dwChunkId;
	public uint32[3] dwReserved;
	public uint32* adwIndex mut => &adwIndex_impl;
	private uint32[ANYSIZE_ARRAY] adwIndex_impl;
}

[CRepr, Packed(2)]
public struct AVISUPERINDEX
{
	[CRepr, Packed(2)]
	public struct _avisuperindex_entry
	{
		public uint64 qwOffset;
		public uint32 dwSize;
		public uint32 dwDuration;
	}
	public uint32 fcc;
	public uint32 cb;
	public uint16 wLongsPerEntry;
	public uint8 bIndexSubType;
	public uint8 bIndexType;
	public uint32 nEntriesInUse;
	public uint32 dwChunkId;
	public uint32[3] dwReserved;
	public _avisuperindex_entry[1022] aIndex;
}

[CRepr, Packed(2)]
public struct AVISTDINDEX_ENTRY
{
	public uint32 dwOffset;
	public uint32 dwSize;
}

[CRepr, Packed(2)]
public struct AVISTDINDEX
{
	public uint32 fcc;
	public uint32 cb;
	public uint16 wLongsPerEntry;
	public uint8 bIndexSubType;
	public uint8 bIndexType;
	public uint32 nEntriesInUse;
	public uint32 dwChunkId;
	public uint64 qwBaseOffset;
	public uint32 dwReserved_3;
	public AVISTDINDEX_ENTRY[2044] aIndex;
}

[CRepr, Packed(2)]
public struct AVITIMEDINDEX_ENTRY
{
	public uint32 dwOffset;
	public uint32 dwSize;
	public uint32 dwDuration;
}

[CRepr, Packed(2)]
public struct _avitimedindex
{
	public uint32 fcc;
	public uint32 cb;
	public uint16 wLongsPerEntry;
	public uint8 bIndexSubType;
	public uint8 bIndexType;
	public uint32 nEntriesInUse;
	public uint32 dwChunkId;
	public uint64 qwBaseOffset;
	public uint32 dwReserved_3;
	public AVITIMEDINDEX_ENTRY[1362] aIndex;
	public uint32[2734] adwTrailingFill;
}

[CRepr, Packed(2)]
public struct AVITIMECODEINDEX
{
	public uint32 fcc;
	public uint32 cb;
	public uint16 wLongsPerEntry;
	public uint8 bIndexSubType;
	public uint8 bIndexType;
	public uint32 nEntriesInUse;
	public uint32 dwChunkId;
	public uint32[3] dwReserved;
	public TIMECODEDATA[1022] aIndex;
}

[CRepr, Packed(2)]
public struct AVITCDLINDEX_ENTRY
{
	public uint32 dwTick;
	public TIMECODE time;
	public uint32 dwSMPTEflags;
	public uint32 dwUser;
	public int8[12] szReelId;
}

[CRepr, Packed(2)]
public struct _avitcdlindex
{
	public uint32 fcc;
	public uint32 cb;
	public uint16 wLongsPerEntry;
	public uint8 bIndexSubType;
	public uint8 bIndexType;
	public uint32 nEntriesInUse;
	public uint32 dwChunkId;
	public uint32[3] dwReserved;
	public AVITCDLINDEX_ENTRY[584] aIndex;
	public uint32[3512] adwTrailingFill;
}

[CRepr, Packed(2)]
public struct AVIFIELDINDEX
{
	[CRepr, Packed(2)]
	public struct _avifieldindex_entry
	{
		public uint32 dwOffset;
		public uint32 dwSize;
		public uint32 dwOffsetField2;
	}
	public uint32 fcc;
	public uint32 cb;
	public uint16 wLongsPerEntry;
	public uint8 bIndexSubType;
	public uint8 bIndexType;
	public uint32 nEntriesInUse;
	public uint32 dwChunkId;
	public uint64 qwBaseOffset;
	public uint32 dwReserved3;
	public _avifieldindex_entry* aIndex mut => &aIndex_impl;
	private _avifieldindex_entry[ANYSIZE_ARRAY] aIndex_impl;
}

[CRepr]
public struct MainAVIHeader
{
	public uint32 dwMicroSecPerFrame;
	public uint32 dwMaxBytesPerSec;
	public uint32 dwPaddingGranularity;
	public uint32 dwFlags;
	public uint32 dwTotalFrames;
	public uint32 dwInitialFrames;
	public uint32 dwStreams;
	public uint32 dwSuggestedBufferSize;
	public uint32 dwWidth;
	public uint32 dwHeight;
	public uint32[4] dwReserved;
}

[CRepr]
public struct AVIStreamHeader
{
	public uint32 fccType;
	public uint32 fccHandler;
	public uint32 dwFlags;
	public uint16 wPriority;
	public uint16 wLanguage;
	public uint32 dwInitialFrames;
	public uint32 dwScale;
	public uint32 dwRate;
	public uint32 dwStart;
	public uint32 dwLength;
	public uint32 dwSuggestedBufferSize;
	public uint32 dwQuality;
	public uint32 dwSampleSize;
	public RECT rcFrame;
}

[CRepr]
public struct AVIINDEXENTRY
{
	public uint32 ckid;
	public uint32 dwFlags;
	public uint32 dwChunkOffset;
	public uint32 dwChunkLength;
}

[CRepr]
public struct AVIPALCHANGE
{
	public uint8 bFirstEntry;
	public uint8 bNumEntries;
	public uint16 wFlags;
	public PALETTEENTRY* peNew mut => &peNew_impl;
	private PALETTEENTRY[ANYSIZE_ARRAY] peNew_impl;
}

[CRepr]
public struct AM_AC3_ERROR_CONCEALMENT
{
	public BOOL fRepeatPreviousBlock;
	public BOOL fErrorInCurrentBlock;
}

[CRepr]
public struct AM_AC3_ALTERNATE_AUDIO
{
	public BOOL fStereo;
	public uint32 DualMode;
}

[CRepr]
public struct AM_AC3_DOWNMIX
{
	public BOOL fDownMix;
	public BOOL fDolbySurround;
}

[CRepr]
public struct AM_AC3_BIT_STREAM_MODE
{
	public int32 BitStreamMode;
}

[CRepr]
public struct AM_AC3_DIALOGUE_LEVEL
{
	public uint32 DialogueLevel;
}

[CRepr]
public struct AM_AC3_ROOM_TYPE
{
	public BOOL fLargeRoom;
}

[CRepr]
public struct AM_DVD_YUV
{
	public uint8 Reserved;
	public uint8 Y;
	public uint8 U;
	public uint8 V;
}

[CRepr]
public struct AM_PROPERTY_SPPAL
{
	public AM_DVD_YUV[16] sppal;
}

[CRepr]
public struct AM_COLCON
{
	public uint8 _bitfield1;
	public uint8 _bitfield2;
	public uint8 _bitfield3;
	public uint8 _bitfield4;
}

[CRepr]
public struct AM_PROPERTY_SPHLI
{
	public uint16 HLISS;
	public uint16 Reserved;
	public uint32 StartPTM;
	public uint32 EndPTM;
	public uint16 StartX;
	public uint16 StartY;
	public uint16 StopX;
	public uint16 StopY;
	public AM_COLCON ColCon;
}

[CRepr]
public struct AM_DVDCOPY_CHLGKEY
{
	public uint8[10] ChlgKey;
	public uint8[2] Reserved;
}

[CRepr]
public struct AM_DVDCOPY_BUSKEY
{
	public uint8[5] BusKey;
	public uint8* Reserved mut => &Reserved_impl;
	private uint8[ANYSIZE_ARRAY] Reserved_impl;
}

[CRepr]
public struct AM_DVDCOPY_DISCKEY
{
	public uint8[2048] DiscKey;
}

[CRepr]
public struct AM_DVDCOPY_TITLEKEY
{
	public uint32 KeyFlags;
	public uint32[2] Reserved1;
	public uint8[6] TitleKey;
	public uint8[2] Reserved2;
}

[CRepr]
public struct AM_COPY_MACROVISION
{
	public uint32 MACROVISIONLevel;
}

[CRepr]
public struct AM_DVDCOPY_SET_COPY_STATE
{
	public uint32 DVDCopyState;
}

[CRepr]
public struct DVD_REGION
{
	public uint8 CopySystem;
	public uint8 RegionData;
	public uint8 SystemRegion;
	public uint8 ResetCount;
}

[CRepr]
public struct VIDEOINFOHEADER2
{
	[CRepr, Union]
	public struct _Anonymous_e__Union
	{
		public uint32 dwControlFlags;
		public uint32 dwReserved1;
	}
	public RECT rcSource;
	public RECT rcTarget;
	public uint32 dwBitRate;
	public uint32 dwBitErrorRate;
	public int64 AvgTimePerFrame;
	public uint32 dwInterlaceFlags;
	public uint32 dwCopyProtectFlags;
	public uint32 dwPictAspectRatioX;
	public uint32 dwPictAspectRatioY;
	public using _Anonymous_e__Union Anonymous;
	public uint32 dwReserved2;
	public BITMAPINFOHEADER bmiHeader;
}

[CRepr]
public struct MPEG2VIDEOINFO
{
	public VIDEOINFOHEADER2 hdr;
	public uint32 dwStartTimeCode;
	public uint32 cbSequenceHeader;
	public uint32 dwProfile;
	public uint32 dwLevel;
	public MPEG2VIDEOINFO_FLAGS dwFlags;
	public uint32* dwSequenceHeader mut => &dwSequenceHeader_impl;
	private uint32[ANYSIZE_ARRAY] dwSequenceHeader_impl;
}

[CRepr]
public struct AM_DvdKaraokeData
{
	public uint32 dwDownmix;
	public uint32 dwSpeakerAssignment;
}

[CRepr]
public struct AM_SimpleRateChange
{
	public int64 StartTime;
	public int32 Rate;
}

[CRepr]
public struct AM_QueryRate
{
	public int32 lMaxForwardFullFrame;
	public int32 lMaxReverseFullFrame;
}

[CRepr]
public struct AM_ExactRateChange
{
	public int64 OutputZeroTime;
	public int32 Rate;
}

[CRepr]
public struct AM_DVD_ChangeRate
{
	public int64 StartInTime;
	public int64 StartOutTime;
	public int32 Rate;
}

[CRepr]
public struct MP_PARAMINFO
{
	public MP_TYPE mpType;
	public uint32 mopCaps;
	public float mpdMinValue;
	public float mpdMaxValue;
	public float mpdNeutralValue;
	public char16[32] szUnitText;
	public char16[32] szLabel;
}

[CRepr]
public struct MP_ENVELOPE_SEGMENT
{
	public int64 rtStart;
	public int64 rtEnd;
	public float valStart;
	public float valEnd;
	public MP_CURVE_TYPE iCurve;
	public uint32 flags;
}

[CRepr]
public struct VFW_FILTERLIST
{
	public uint32 cFilters;
	public Guid* aClsId mut => &aClsId_impl;
	private Guid[ANYSIZE_ARRAY] aClsId_impl;
}

[CRepr]
public struct DXVA2_VIDEOSAMPLE
{
	public int64 Start;
	public int64 End;
	public DXVA2_ExtendedFormat SampleFormat;
	public uint32 SampleFlags;
	public void* SrcResource;
	public RECT SrcRect;
	public RECT DstRect;
	public DXVA2_AYUVSample8[16] Pal;
	public DXVA2_Fixed32 PlanarAlpha;
}

[CRepr]
public struct DXVA2_VIDEOPROCESSBLT
{
	public int64 TargetFrame;
	public RECT TargetRect;
	public SIZE ConstrictionSize;
	public uint32 StreamingFlags;
	public DXVA2_AYUVSample16 BackgroundColor;
	public DXVA2_ExtendedFormat DestFormat;
	public uint32 DestFlags;
	public DXVA2_ProcAmpValues ProcAmpValues;
	public DXVA2_Fixed32 Alpha;
	public DXVA2_FilterValues NoiseFilterLuma;
	public DXVA2_FilterValues NoiseFilterChroma;
	public DXVA2_FilterValues DetailFilterLuma;
	public DXVA2_FilterValues DetailFilterChroma;
	public DXVA2_VIDEOSAMPLE* pSrcSurfaces;
	public uint32 NumSrcSurfaces;
}

[CRepr]
public struct DXVA2SW_CALLBACKS
{
	public uint32 Size;
	public PDXVA2SW_GETVIDEOPROCESSORRENDERTARGETCOUNT GetVideoProcessorRenderTargetCount;
	public PDXVA2SW_GETVIDEOPROCESSORRENDERTARGETS GetVideoProcessorRenderTargets;
	public PDXVA2SW_GETVIDEOPROCESSORCAPS GetVideoProcessorCaps;
	public PDXVA2SW_GETVIDEOPROCESSORSUBSTREAMFORMATCOUNT GetVideoProcessorSubStreamFormatCount;
	public PDXVA2SW_GETVIDEOPROCESSORSUBSTREAMFORMATS GetVideoProcessorSubStreamFormats;
	public PDXVA2SW_GETPROCAMPRANGE GetProcAmpRange;
	public PDXVA2SW_GETFILTERPROPERTYRANGE GetFilterPropertyRange;
	public PDXVA2SW_CREATEVIDEOPROCESSDEVICE CreateVideoProcessDevice;
	public PDXVA2SW_DESTROYVIDEOPROCESSDEVICE DestroyVideoProcessDevice;
	public PDXVA2SW_VIDEOPROCESSBEGINFRAME VideoProcessBeginFrame;
	public PDXVA2SW_VIDEOPROCESSENDFRAME VideoProcessEndFrame;
	public PDXVA2SW_VIDEOPROCESSSETRENDERTARGET VideoProcessSetRenderTarget;
	public PDXVA2SW_VIDEOPROCESSBLT VideoProcessBlt;
}

[CRepr]
public struct DXVA2Trace_DecodeDevCreatedData
{
	public EVENT_TRACE_HEADER wmiHeader;
	public uint64 pObject;
	public uint64 pD3DDevice;
	public Guid DeviceGuid;
	public uint32 Width;
	public uint32 Height;
	public BOOL Enter;
}

[CRepr]
public struct DXVA2Trace_DecodeDeviceData
{
	public EVENT_TRACE_HEADER wmiHeader;
	public uint64 pObject;
	public BOOL Enter;
}

[CRepr]
public struct DXVA2Trace_DecodeDevBeginFrameData
{
	public EVENT_TRACE_HEADER wmiHeader;
	public uint64 pObject;
	public uint64 pRenderTarget;
	public BOOL Enter;
}

[CRepr]
public struct DXVA2Trace_DecodeDevGetBufferData
{
	public EVENT_TRACE_HEADER wmiHeader;
	public uint64 pObject;
	public uint32 BufferType;
	public BOOL Enter;
}

[CRepr]
public struct DXVA2Trace_VideoProcessDevCreatedData
{
	public EVENT_TRACE_HEADER wmiHeader;
	public uint64 pObject;
	public uint64 pD3DDevice;
	public Guid DeviceGuid;
	public uint32 RTFourCC;
	public uint32 Width;
	public uint32 Height;
	public BOOL Enter;
}

[CRepr]
public struct DXVA2Trace_VideoProcessDeviceData
{
	public EVENT_TRACE_HEADER wmiHeader;
	public uint64 pObject;
	public BOOL Enter;
}

[CRepr]
public struct DXVA2TraceVideoProcessBltData
{
	public EVENT_TRACE_HEADER wmiHeader;
	public uint64 pObject;
	public uint64 pRenderTarget;
	public uint64 TargetFrameTime;
	public RECT TargetRect;
	public BOOL Enter;
}

[CRepr, Packed(1)]
public struct WMDRMProtectionInfo
{
	public uint16[25] wszKID;
	public uint64 qwCounter;
	public uint64 qwIndex;
	public uint8 bOffset;
}

[CRepr, Packed(1)]
public struct BadSampleInfo
{
	public HRESULT hrReason;
}

[CRepr]
public struct STREAMBUFFER_ATTRIBUTE
{
	public PWSTR pszName;
	public STREAMBUFFER_ATTR_DATATYPE StreamBufferAttributeType;
	public uint8* pbAttribute;
	public uint16 cbLength;
}

[CRepr]
public struct SBE_PIN_DATA
{
	public uint64 cDataBytes;
	public uint64 cSamplesProcessed;
	public uint64 cDiscontinuities;
	public uint64 cSyncPoints;
	public uint64 cTimestamps;
}

[CRepr]
public struct SBE2_STREAM_DESC
{
	public uint32 Version;
	public uint32 StreamId;
	public uint32 Default;
	public uint32 Reserved;
}

[CRepr]
public struct DVR_STREAM_DESC
{
	public uint32 Version;
	public uint32 StreamId;
	public BOOL Default;
	public BOOL Creation;
	public uint32 Reserved;
	public Guid guidSubMediaType;
	public Guid guidFormatType;
	public AM_MEDIA_TYPE MediaType;
}

[CRepr, Packed(1)]
public struct PID_BITS_MIDL
{
	public uint16 Bits;
}

[CRepr, Packed(1)]
public struct MPEG_HEADER_BITS_MIDL
{
	public uint16 Bits;
}

[CRepr]
public struct MPEG_HEADER_VERSION_BITS_MIDL
{
	public uint8 Bits;
}

[CRepr, Packed(1)]
public struct TID_EXTENSION
{
	public uint16 wTidExt;
	public uint16 wCount;
}

[CRepr]
public struct SECTION
{
	[CRepr, Union, Packed(1)]
	public struct _Header_e__Union
	{
		public MPEG_HEADER_BITS_MIDL S;
		public uint16 W;
	}
	public uint8 TableId;
	public _Header_e__Union Header;
	public uint8* SectionData mut => &SectionData_impl;
	private uint8[ANYSIZE_ARRAY] SectionData_impl;
}

[CRepr, Packed(1)]
public struct LONG_SECTION
{
	[CRepr, Union, Packed(1)]
	public struct _Header_e__Union
	{
		public MPEG_HEADER_BITS_MIDL S;
		public uint16 W;
	}
	[CRepr, Union]
	public struct _Version_e__Union
	{
		public MPEG_HEADER_VERSION_BITS_MIDL S;
		public uint8 B;
	}
	public uint8 TableId;
	public _Header_e__Union Header;
	public uint16 TableIdExtension;
	public _Version_e__Union Version;
	public uint8 SectionNumber;
	public uint8 LastSectionNumber;
	public uint8* RemainingData mut => &RemainingData_impl;
	private uint8[ANYSIZE_ARRAY] RemainingData_impl;
}

[CRepr, Packed(1)]
public struct DSMCC_SECTION
{
	[CRepr, Union, Packed(1)]
	public struct _Header_e__Union
	{
		public MPEG_HEADER_BITS_MIDL S;
		public uint16 W;
	}
	[CRepr, Union]
	public struct _Version_e__Union
	{
		public MPEG_HEADER_VERSION_BITS_MIDL S;
		public uint8 B;
	}
	public uint8 TableId;
	public _Header_e__Union Header;
	public uint16 TableIdExtension;
	public _Version_e__Union Version;
	public uint8 SectionNumber;
	public uint8 LastSectionNumber;
	public uint8 ProtocolDiscriminator;
	public uint8 DsmccType;
	public uint16 MessageId;
	public uint32 TransactionId;
	public uint8 Reserved;
	public uint8 AdaptationLength;
	public uint16 MessageLength;
	public uint8* RemainingData mut => &RemainingData_impl;
	private uint8[ANYSIZE_ARRAY] RemainingData_impl;
}

[CRepr, Packed(1)]
public struct MPEG_RQST_PACKET
{
	public uint32 dwLength;
	public SECTION* pSection;
}

[CRepr, Packed(1)]
public struct MPEG_PACKET_LIST
{
	public uint16 wPacketCount;
	public MPEG_RQST_PACKET** PacketList mut => &PacketList_impl;
	private MPEG_RQST_PACKET*[ANYSIZE_ARRAY] PacketList_impl;
}

[CRepr, Packed(1)]
public struct DSMCC_FILTER_OPTIONS
{
	public BOOL fSpecifyProtocol;
	public uint8 Protocol;
	public BOOL fSpecifyType;
	public uint8 Type;
	public BOOL fSpecifyMessageId;
	public uint16 MessageId;
	public BOOL fSpecifyTransactionId;
	public BOOL fUseTrxIdMessageIdMask;
	public uint32 TransactionId;
	public BOOL fSpecifyModuleVersion;
	public uint8 ModuleVersion;
	public BOOL fSpecifyBlockNumber;
	public uint16 BlockNumber;
	public BOOL fGetModuleCall;
	public uint16 NumberOfBlocksInModule;
}

[CRepr, Packed(1)]
public struct ATSC_FILTER_OPTIONS
{
	public BOOL fSpecifyEtmId;
	public uint32 EtmId;
}

[CRepr, Packed(1)]
public struct DVB_EIT_FILTER_OPTIONS
{
	public BOOL fSpecifySegment;
	public uint8 bSegment;
}

[CRepr, Packed(1)]
public struct MPEG2_FILTER
{
	public uint8 bVersionNumber;
	public uint16 wFilterSize;
	public BOOL fUseRawFilteringBits;
	public uint8[16] Filter;
	public uint8[16] Mask;
	public BOOL fSpecifyTableIdExtension;
	public uint16 TableIdExtension;
	public BOOL fSpecifyVersion;
	public uint8 Version;
	public BOOL fSpecifySectionNumber;
	public uint8 SectionNumber;
	public BOOL fSpecifyCurrentNext;
	public BOOL fNext;
	public BOOL fSpecifyDsmccOptions;
	public DSMCC_FILTER_OPTIONS Dsmcc;
	public BOOL fSpecifyAtscOptions;
	public ATSC_FILTER_OPTIONS Atsc;
}

[CRepr, Packed(1)]
public struct MPEG2_FILTER2
{
	[CRepr, Union]
	public struct _Anonymous_e__Union
	{
		[CRepr, Packed(1)]
		public struct _Anonymous_e__Struct
		{
			public uint8 bVersionNumber;
			public uint16 wFilterSize;
			public BOOL fUseRawFilteringBits;
			public uint8[16] Filter;
			public uint8[16] Mask;
			public BOOL fSpecifyTableIdExtension;
			public uint16 TableIdExtension;
			public BOOL fSpecifyVersion;
			public uint8 Version;
			public BOOL fSpecifySectionNumber;
			public uint8 SectionNumber;
			public BOOL fSpecifyCurrentNext;
			public BOOL fNext;
			public BOOL fSpecifyDsmccOptions;
			public DSMCC_FILTER_OPTIONS Dsmcc;
			public BOOL fSpecifyAtscOptions;
			public ATSC_FILTER_OPTIONS Atsc;
		}
		public using _Anonymous_e__Struct Anonymous;
		public uint8[124] bVersion1Bytes;
	}
	public using _Anonymous_e__Union Anonymous;
	public BOOL fSpecifyDvbEitOptions;
	public DVB_EIT_FILTER_OPTIONS DvbEit;
}

[CRepr, Packed(1)]
public struct MPEG_STREAM_BUFFER
{
	public HRESULT hr;
	public uint32 dwDataBufferSize;
	public uint32 dwSizeOfDataRead;
	public uint8* pDataBuffer;
}

[CRepr]
public struct MPEG_TIME
{
	public uint8 Hours;
	public uint8 Minutes;
	public uint8 Seconds;
}

[CRepr, Packed(1)]
public struct MPEG_DATE
{
	public uint8 Date;
	public uint8 Month;
	public uint16 Year;
}

[CRepr]
public struct MPEG_DATE_AND_TIME
{
	public MPEG_DATE D;
	public MPEG_TIME T;
}

[CRepr, Packed(1)]
public struct MPEG_BCS_DEMUX
{
	public uint32 AVMGraphId;
}

[CRepr, Packed(1)]
public struct MPEG_WINSOCK
{
	public uint32 AVMGraphId;
}

[CRepr, Packed(1)]
public struct MPEG_CONTEXT
{
	[CRepr, Union]
	public struct _U_e__Union
	{
		public MPEG_BCS_DEMUX Demux;
		public MPEG_WINSOCK Winsock;
	}
	public MPEG_CONTEXT_TYPE Type;
	public _U_e__Union U;
}

[CRepr, Packed(1)]
public struct MPEG_SERVICE_REQUEST
{
	public MPEG_REQUEST_TYPE Type;
	public MPEG_CONTEXT Context;
	public uint16 Pid;
	public uint8 TableId;
	public MPEG2_FILTER Filter;
	public uint32 Flags;
}

[CRepr, Packed(1)]
public struct MPEG_SERVICE_RESPONSE
{
	public uint32 IPAddress;
	public uint16 Port;
}

[CRepr, Packed(1)]
public struct DSMCC_ELEMENT
{
	public uint16 pid;
	public uint8 bComponentTag;
	public uint32 dwCarouselId;
	public uint32 dwTransactionId;
	public DSMCC_ELEMENT* pNext;
}

[CRepr, Packed(1)]
public struct MPE_ELEMENT
{
	public uint16 pid;
	public uint8 bComponentTag;
	public MPE_ELEMENT* pNext;
}

[CRepr, Packed(1)]
public struct MPEG_STREAM_FILTER
{
	public uint16 wPidValue;
	public uint32 dwFilterSize;
	public BOOL fCrcEnabled;
	public uint8[16] rgchFilter;
	public uint8[16] rgchMask;
}

[CRepr, Packed(1)]
public struct Mpeg2TableSampleHdr
{
	public uint8 SectionCount;
	public uint8[3] Reserved;
	public int32* SectionOffsets mut => &SectionOffsets_impl;
	private int32[ANYSIZE_ARRAY] SectionOffsets_impl;
}

[CRepr]
public struct ProgramElement
{
	public uint16 wProgramNumber;
	public uint16 wProgramMapPID;
}

[CRepr]
public struct UDCR_TAG
{
	public uint8 bVersion;
	public uint8[25] KID;
	public uint64 ullBaseCounter;
	public uint64 ullBaseCounterRange;
	public BOOL fScrambled;
	public uint8 bStreamMark;
	public uint32 dwReserved1;
	public uint32 dwReserved2;
}

[CRepr]
public struct PIC_SEQ_SAMPLE
{
	public uint32 _bitfield;
}

[CRepr]
public struct SAMPLE_SEQ_OFFSET
{
	public uint32 _bitfield;
}

[CRepr]
public struct VA_OPTIONAL_VIDEO_PROPERTIES
{
	public uint16 dwPictureHeight;
	public uint16 dwPictureWidth;
	public uint16 dwAspectRatioX;
	public uint16 dwAspectRatioY;
	public VA_VIDEO_FORMAT VAVideoFormat;
	public VA_COLOR_PRIMARIES VAColorPrimaries;
	public VA_TRANSFER_CHARACTERISTICS VATransferCharacteristics;
	public VA_MATRIX_COEFFICIENTS VAMatrixCoefficients;
}

[CRepr]
public struct TRANSPORT_PROPERTIES
{
	[CRepr, Union]
	public struct _Fields_e__Union
	{
		[CRepr]
		public struct _Others
		{
			public int64 _bitfield;
		}
		public _Others Others;
		public int64 Value;
	}
	public uint32 PID;
	public int64 PCR;
	public _Fields_e__Union Fields;
}

[CRepr]
public struct PBDA_TAG_ATTRIBUTE
{
	public Guid TableUUId;
	public uint8 TableId;
	public uint16 VersionNo;
	public uint32 TableDataSize;
	public uint8* TableData mut => &TableData_impl;
	private uint8[ANYSIZE_ARRAY] TableData_impl;
}

[CRepr]
public struct CAPTURE_STREAMTIME
{
	public int64 StreamTime;
}

[CRepr]
public struct DSHOW_STREAM_DESC
{
	public uint32 VersionNo;
	public uint32 StreamId;
	public BOOL Default;
	public BOOL Creation;
	public uint32 Reserved;
}

[CRepr]
public struct SAMPLE_LIVE_STREAM_TIME
{
	public uint64 qwStreamTime;
	public uint64 qwLiveTime;
}

[CRepr]
public struct KSP_BDA_NODE_PIN
{
	public KSIDENTIFIER Property;
	public uint32 ulNodeType;
	public uint32 ulInputPinId;
	public uint32 ulOutputPinId;
}

[CRepr]
public struct KSM_BDA_PIN
{
	[CRepr, Union]
	public struct _Anonymous_e__Union
	{
		public uint32 PinId;
		public uint32 PinType;
	}
	public KSIDENTIFIER Method;
	public using _Anonymous_e__Union Anonymous;
	public uint32 Reserved;
}

[CRepr]
public struct KSM_BDA_PIN_PAIR
{
	[CRepr, Union]
	public struct _Anonymous1_e__Union
	{
		public uint32 InputPinId;
		public uint32 InputPinType;
	}
	[CRepr, Union]
	public struct _Anonymous2_e__Union
	{
		public uint32 OutputPinId;
		public uint32 OutputPinType;
	}
	public KSIDENTIFIER Method;
	public _Anonymous1_e__Union Anonymous1;
	public _Anonymous2_e__Union Anonymous2;
}

[CRepr]
public struct KSP_NODE_ESPID
{
	public KSP_NODE Property;
	public uint32 EsPid;
}

[CRepr]
public struct KSM_BDA_DEBUG_LEVEL
{
	public KSIDENTIFIER Method;
	public uint8 ucDebugLevel;
	public uint32 ulDebugStringSize;
	public uint8* argbDebugString mut => &argbDebugString_impl;
	private uint8[ANYSIZE_ARRAY] argbDebugString_impl;
}

[CRepr]
public struct BDA_DEBUG_DATA
{
	public int32 lResult;
	public Guid uuidDebugDataType;
	public uint32 ulDataSize;
	public uint8* argbDebugData mut => &argbDebugData_impl;
	private uint8[ANYSIZE_ARRAY] argbDebugData_impl;
}

[CRepr]
public struct BDA_EVENT_DATA
{
	public int32 lResult;
	public uint32 ulEventID;
	public Guid uuidEventType;
	public uint32 ulEventDataLength;
	public uint8* argbEventData mut => &argbEventData_impl;
	private uint8[ANYSIZE_ARRAY] argbEventData_impl;
}

[CRepr]
public struct KSM_BDA_EVENT_COMPLETE
{
	public KSIDENTIFIER Method;
	public uint32 ulEventID;
	public uint32 ulEventResult;
}

[CRepr]
public struct KSM_BDA_DRM_SETDRM
{
	public KSM_NODE NodeMethod;
	public Guid NewDRMuuid;
}

[CRepr]
public struct KSM_BDA_BUFFER
{
	public KSM_NODE NodeMethod;
	public uint32 ulBufferSize;
	public uint8* argbBuffer mut => &argbBuffer_impl;
	private uint8[ANYSIZE_ARRAY] argbBuffer_impl;
}

[CRepr]
public struct KSM_BDA_WMDRM_LICENSE
{
	public KSM_NODE NodeMethod;
	public Guid uuidKeyID;
}

[CRepr]
public struct KSM_BDA_WMDRM_RENEWLICENSE
{
	public KSM_NODE NodeMethod;
	public uint32 ulXMRLicenseLength;
	public uint32 ulEntitlementTokenLength;
	public uint8* argbDataBuffer mut => &argbDataBuffer_impl;
	private uint8[ANYSIZE_ARRAY] argbDataBuffer_impl;
}

[CRepr]
public struct KSM_BDA_WMDRMTUNER_PURCHASEENTITLEMENT
{
	public KSM_NODE NodeMethod;
	public uint32 ulDialogRequest;
	public CHAR[12] cLanguage;
	public uint32 ulPurchaseTokenLength;
	public uint8* argbDataBuffer mut => &argbDataBuffer_impl;
	private uint8[ANYSIZE_ARRAY] argbDataBuffer_impl;
}

[CRepr]
public struct KSM_BDA_WMDRMTUNER_SETPIDPROTECTION
{
	public KSM_NODE NodeMethod;
	public uint32 ulPID;
	public Guid uuidKeyID;
}

[CRepr]
public struct KSM_BDA_WMDRMTUNER_GETPIDPROTECTION
{
	public KSM_NODE NodeMethod;
	public uint32 ulPID;
}

[CRepr]
public struct KSM_BDA_WMDRMTUNER_SYNCVALUE
{
	public KSM_NODE NodeMethod;
	public uint32 ulSyncValue;
}

[CRepr]
public struct KSM_BDA_TUNER_TUNEREQUEST
{
	public KSIDENTIFIER Method;
	public uint32 ulTuneLength;
	public uint8* argbTuneData mut => &argbTuneData_impl;
	private uint8[ANYSIZE_ARRAY] argbTuneData_impl;
}

[CRepr]
public struct KSM_BDA_GPNV_GETVALUE
{
	public KSIDENTIFIER Method;
	public uint32 ulNameLength;
	public CHAR[12] cLanguage;
	public uint8* argbData mut => &argbData_impl;
	private uint8[ANYSIZE_ARRAY] argbData_impl;
}

[CRepr]
public struct KSM_BDA_GPNV_SETVALUE
{
	public KSIDENTIFIER Method;
	public uint32 ulDialogRequest;
	public CHAR[12] cLanguage;
	public uint32 ulNameLength;
	public uint32 ulValueLength;
	public uint8* argbName mut => &argbName_impl;
	private uint8[ANYSIZE_ARRAY] argbName_impl;
}

[CRepr]
public struct KSM_BDA_GPNV_NAMEINDEX
{
	public KSIDENTIFIER Method;
	public uint32 ulValueNameIndex;
}

[CRepr]
public struct KSM_BDA_SCAN_CAPABILTIES
{
	public KSIDENTIFIER Method;
	public Guid uuidBroadcastStandard;
}

[CRepr]
public struct KSM_BDA_SCAN_FILTER
{
	public KSIDENTIFIER Method;
	public uint32 ulScanModulationTypeSize;
	public uint64 AnalogVideoStandards;
	public uint8* argbScanModulationTypes mut => &argbScanModulationTypes_impl;
	private uint8[ANYSIZE_ARRAY] argbScanModulationTypes_impl;
}

[CRepr]
public struct KSM_BDA_SCAN_START
{
	public KSIDENTIFIER Method;
	public uint32 LowerFrequency;
	public uint32 HigherFrequency;
}

[CRepr]
public struct KSM_BDA_GDDS_TUNEXMLFROMIDX
{
	public KSIDENTIFIER Method;
	public uint64 ulIdx;
}

[CRepr]
public struct KSM_BDA_GDDS_SERVICEFROMTUNEXML
{
	public KSIDENTIFIER Method;
	public uint32 ulTuneXmlLength;
	public uint8* argbTuneXml mut => &argbTuneXml_impl;
	private uint8[ANYSIZE_ARRAY] argbTuneXml_impl;
}

[CRepr]
public struct KSM_BDA_USERACTIVITY_USEREASON
{
	public KSIDENTIFIER Method;
	public uint32 ulUseReason;
}

[CRepr]
public struct KSM_BDA_CAS_ENTITLEMENTTOKEN
{
	public KSM_NODE NodeMethod;
	public uint32 ulDialogRequest;
	public CHAR[12] cLanguage;
	public uint32 ulRequestType;
	public uint32 ulEntitlementTokenLen;
	public uint8* argbEntitlementToken mut => &argbEntitlementToken_impl;
	private uint8[ANYSIZE_ARRAY] argbEntitlementToken_impl;
}

[CRepr]
public struct KSM_BDA_CAS_CAPTURETOKEN
{
	public KSM_NODE NodeMethod;
	public uint32 ulTokenLength;
	public uint8* argbToken mut => &argbToken_impl;
	private uint8[ANYSIZE_ARRAY] argbToken_impl;
}

[CRepr]
public struct KSM_BDA_CAS_OPENBROADCASTMMI
{
	public KSM_NODE NodeMethod;
	public uint32 ulDialogRequest;
	public CHAR[12] cLanguage;
	public uint32 ulEventId;
}

[CRepr]
public struct KSM_BDA_CAS_CLOSEMMIDIALOG
{
	public KSM_NODE NodeMethod;
	public uint32 ulDialogRequest;
	public CHAR[12] cLanguage;
	public uint32 ulDialogNumber;
	public uint32 ulReason;
}

[CRepr]
public struct KSM_BDA_ISDBCAS_REQUEST
{
	public KSM_NODE NodeMethod;
	public uint32 ulRequestID;
	public uint32 ulIsdbCommandSize;
	public uint8* argbIsdbCommandData mut => &argbIsdbCommandData_impl;
	private uint8[ANYSIZE_ARRAY] argbIsdbCommandData_impl;
}

[CRepr]
public struct KSM_BDA_TS_SELECTOR_SETTSID
{
	public KSM_NODE NodeMethod;
	public uint16 usTSID;
}

[CRepr]
public struct KS_DATARANGE_BDA_ANTENNA
{
	public KSDATAFORMAT DataRange;
}

[CRepr]
public struct BDA_TRANSPORT_INFO
{
	public uint32 ulcbPhyiscalPacket;
	public uint32 ulcbPhyiscalFrame;
	public uint32 ulcbPhyiscalFrameAlignment;
	public int64 AvgTimePerFrame;
}

[CRepr]
public struct KS_DATARANGE_BDA_TRANSPORT
{
	public KSDATAFORMAT DataRange;
	public BDA_TRANSPORT_INFO BdaTransportInfo;
}

[CRepr]
public struct ChannelChangeInfo
{
	public ChannelChangeSpanningEvent_State state;
	public uint64 TimeStamp;
}

[CRepr]
public struct ChannelTypeInfo
{
	public ChannelType channelType;
	public uint64 timeStamp;
}

[CRepr]
public struct ChannelInfo
{
	[CRepr, Union]
	public struct _Anonymous_e__Union
	{
		[CRepr]
		public struct _DC_e__Struct
		{
			public int32 lProgNumber;
		}
		[CRepr]
		public struct _DVB_e__Struct
		{
			public int32 lONID;
			public int32 lTSID;
			public int32 lSID;
		}
		[CRepr]
		public struct _ATSC_e__Struct
		{
			public int32 lProgNumber;
		}
		public _DVB_e__Struct DVB;
		public _DC_e__Struct DC;
		public _ATSC_e__Struct ATSC;
	}
	public int32 lFrequency;
	public using _Anonymous_e__Union Anonymous;
}

[CRepr]
public struct SpanningEventDescriptor
{
	public uint16 wDataLen;
	public uint16 wProgNumber;
	public uint16 wSID;
	public uint8* bDescriptor mut => &bDescriptor_impl;
	private uint8[ANYSIZE_ARRAY] bDescriptor_impl;
}

[CRepr]
public struct DVBScramblingControlSpanningEvent
{
	public uint32 ulPID;
	public BOOL fScrambled;
}

[CRepr]
public struct SpanningEventEmmMessage
{
	public uint8 bCAbroadcasterGroupId;
	public uint8 bMessageControl;
	public uint16 wServiceId;
	public uint16 wTableIdExtension;
	public uint8 bDeletionStatus;
	public uint8 bDisplayingDuration1;
	public uint8 bDisplayingDuration2;
	public uint8 bDisplayingDuration3;
	public uint8 bDisplayingCycle;
	public uint8 bFormatVersion;
	public uint8 bDisplayPosition;
	public uint16 wMessageLength;
	public char16* szMessageArea mut => &szMessageArea_impl;
	private char16[ANYSIZE_ARRAY] szMessageArea_impl;
}

[CRepr]
public struct LanguageInfo
{
	public uint16 LangID;
	public int32 lISOLangCode;
}

[CRepr]
public struct DualMonoInfo
{
	public uint16 LangID1;
	public uint16 LangID2;
	public int32 lISOLangCode1;
	public int32 lISOLangCode2;
}

[CRepr]
public struct PIDListSpanningEvent
{
	public uint16 wPIDCount;
	public uint32* pulPIDs mut => &pulPIDs_impl;
	private uint32[ANYSIZE_ARRAY] pulPIDs_impl;
}

[CRepr, Packed(1)]
public struct RATING_ATTRIBUTE
{
	public uint32 rating_attribute_id;
	public uint32 rating_attribute_value;
}

[CRepr, Packed(1)]
public struct RATING_SYSTEM
{
	public Guid rating_system_id;
	public uint8 _bitfield;
	public uint8[3] country_code;
	public uint32 rating_attribute_count;
	public RATING_ATTRIBUTE* lpratingattrib;
}

[CRepr, Packed(1)]
public struct RATING_INFO
{
	public uint32 rating_system_count;
	public RATING_SYSTEM* lpratingsystem;
}

[CRepr, Packed(1)]
public struct PBDAParentalControl
{
	public uint32 rating_system_count;
	public RATING_SYSTEM* rating_systems;
}

[CRepr]
public struct DvbParentalRatingParam
{
	public CHAR[4] szCountryCode;
	public uint8 bRating;
}

[CRepr]
public struct DvbParentalRatingDescriptor
{
	public uint32 ulNumParams;
	public DvbParentalRatingParam* pParams mut => &pParams_impl;
	private DvbParentalRatingParam[ANYSIZE_ARRAY] pParams_impl;
}

[CRepr]
public struct KSPROPERTY_BDA_RF_TUNER_CAPS_S
{
	public KSP_NODE Property;
	public uint32 Mode;
	public uint32 AnalogStandardsSupported;
	public uint32 DigitalStandardsSupported;
	public uint32 MinFrequency;
	public uint32 MaxFrequency;
	public uint32 SettlingTime;
	public uint32 AnalogSensingRange;
	public uint32 DigitalSensingRange;
	public uint32 MilliSecondsPerMHz;
}

[CRepr]
public struct KSPROPERTY_BDA_RF_TUNER_SCAN_STATUS_S
{
	public KSP_NODE Property;
	public uint32 CurrentFrequency;
	public uint32 FrequencyRangeMin;
	public uint32 FrequencyRangeMax;
	public uint32 MilliSecondsLeft;
}

[CRepr]
public struct KSPROPERTY_BDA_RF_TUNER_STANDARD_S
{
	public KSP_NODE Property;
	public BDA_SignalType SignalType;
	public uint32 SignalStandard;
}

[CRepr]
public struct KSPROPERTY_BDA_RF_TUNER_STANDARD_MODE_S
{
	public KSP_NODE Property;
	public BOOL AutoDetect;
}

[CRepr]
public struct KSEVENTDATA_BDA_RF_TUNER_SCAN_S
{
	public KSEVENTDATA EventData;
	public uint32 StartFrequency;
	public uint32 EndFrequency;
	public BDA_LockType LockRequested;
}

[CRepr, Packed(1)]
public struct PID_BITS
{
	public uint16 _bitfield;
}

[CRepr, Packed(1)]
public struct MPEG_HEADER_BITS
{
	public uint16 _bitfield;
}

[CRepr]
public struct MPEG_HEADER_VERSION_BITS
{
	public uint8 _bitfield;
}

[CRepr, Packed(1)]
public struct MPEG1WAVEFORMAT
{
	public WAVEFORMATEX wfx;
	public uint16 fwHeadLayer;
	public uint32 dwHeadBitrate;
	public uint16 fwHeadMode;
	public uint16 fwHeadModeExt;
	public uint16 wHeadEmphasis;
	public uint16 fwHeadFlags;
	public uint32 dwPTSLow;
	public uint32 dwPTSHigh;
}

[CRepr, Packed(1)]
public struct MPEGLAYER3WAVEFORMAT
{
	public WAVEFORMATEX wfx;
	public uint16 wID;
	public MPEGLAYER3WAVEFORMAT_FLAGS fdwFlags;
	public uint16 nBlockSize;
	public uint16 nFramesPerBlock;
	public uint16 nCodecDelay;
}

[CRepr, Packed(1)]
public struct HEAACWAVEINFO
{
	public WAVEFORMATEX wfx;
	public uint16 wPayloadType;
	public uint16 wAudioProfileLevelIndication;
	public uint16 wStructType;
	public uint16 wReserved1;
	public uint32 dwReserved2;
}

[CRepr]
public struct HEAACWAVEFORMAT
{
	public HEAACWAVEINFO wfInfo;
	public uint8* pbAudioSpecificConfig mut => &pbAudioSpecificConfig_impl;
	private uint8[ANYSIZE_ARRAY] pbAudioSpecificConfig_impl;
}

[CRepr]
public struct DXVA_COPPSetProtectionLevelCmdData
{
	public uint32 ProtType;
	public uint32 ProtLevel;
	public uint32 ExtendedInfoChangeMask;
	public uint32 ExtendedInfoData;
}

[CRepr]
public struct DXVA_COPPSetSignalingCmdData
{
	public uint32 ActiveTVProtectionStandard;
	public uint32 AspectRatioChangeMask1;
	public uint32 AspectRatioData1;
	public uint32 AspectRatioChangeMask2;
	public uint32 AspectRatioData2;
	public uint32 AspectRatioChangeMask3;
	public uint32 AspectRatioData3;
	public uint32[4] ExtendedInfoChangeMask;
	public uint32[4] ExtendedInfoData;
	public uint32 Reserved;
}

[CRepr]
public struct DXVA_COPPStatusData
{
	public Guid rApp;
	public uint32 dwFlags;
	public uint32 dwData;
	public uint32 ExtendedInfoValidMask;
	public uint32 ExtendedInfoData;
}

[CRepr]
public struct DXVA_COPPStatusDisplayData
{
	public Guid rApp;
	public uint32 dwFlags;
	public uint32 DisplayWidth;
	public uint32 DisplayHeight;
	public uint32 Format;
	public uint32 d3dFormat;
	public uint32 FreqNumerator;
	public uint32 FreqDenominator;
}

[CRepr]
public struct DXVA_COPPStatusHDCPKeyData
{
	public Guid rApp;
	public uint32 dwFlags;
	public uint32 dwHDCPFlags;
	public Guid BKey;
	public Guid Reserved1;
	public Guid Reserved2;
}

[CRepr]
public struct DXVA_COPPStatusSignalingCmdData
{
	public Guid rApp;
	public uint32 dwFlags;
	public uint32 AvailableTVProtectionStandards;
	public uint32 ActiveTVProtectionStandard;
	public uint32 TVType;
	public uint32 AspectRatioValidMask1;
	public uint32 AspectRatioData1;
	public uint32 AspectRatioValidMask2;
	public uint32 AspectRatioData2;
	public uint32 AspectRatioValidMask3;
	public uint32 AspectRatioData3;
	public uint32[4] ExtendedInfoValidMask;
	public uint32[4] ExtendedInfoData;
}

#endregion

#region COM Class IDs
public static
{
	public const Guid CLSID_FilgraphManager = .(0xe436ebb3, 0x524f, 0x11ce, 0x9f, 0x53, 0x00, 0x20, 0xaf, 0x0b, 0xa7, 0x70);


	public const Guid CLSID_SystemTuningSpaces = .(0xd02aac50, 0x027e, 0x11d3, 0x9d, 0x8e, 0x00, 0xc0, 0x4f, 0x72, 0xd9, 0x80);


	public const Guid CLSID_TuningSpace = .(0x5ffdc5e6, 0xb83a, 0x4b55, 0xb6, 0xe8, 0xc6, 0x9e, 0x76, 0x5f, 0xe9, 0xdb);


	public const Guid CLSID_ChannelIDTuningSpace = .(0xcc829a2f, 0x3365, 0x463f, 0xaf, 0x13, 0x81, 0xdb, 0xb6, 0xf3, 0xa5, 0x55);


	public const Guid CLSID_ATSCTuningSpace = .(0xa2e30750, 0x6c3d, 0x11d3, 0xb6, 0x53, 0x00, 0xc0, 0x4f, 0x79, 0x49, 0x8e);


	public const Guid CLSID_DigitalCableTuningSpace = .(0xd9bb4cee, 0xb87a, 0x47f1, 0xac, 0x92, 0xb0, 0x8d, 0x9c, 0x78, 0x13, 0xfc);


	public const Guid CLSID_AnalogRadioTuningSpace = .(0x8a674b4c, 0x1f63, 0x11d3, 0xb6, 0x4c, 0x00, 0xc0, 0x4f, 0x79, 0x49, 0x8e);


	public const Guid CLSID_AuxInTuningSpace = .(0xf9769a06, 0x7aca, 0x4e39, 0x9c, 0xfb, 0x97, 0xbb, 0x35, 0xf0, 0xe7, 0x7e);


	public const Guid CLSID_AnalogTVTuningSpace = .(0x8a674b4d, 0x1f63, 0x11d3, 0xb6, 0x4c, 0x00, 0xc0, 0x4f, 0x79, 0x49, 0x8e);


	public const Guid CLSID_DVBTuningSpace = .(0xc6b14b32, 0x76aa, 0x4a86, 0xa7, 0xac, 0x5c, 0x79, 0xaa, 0xf5, 0x8d, 0xa7);


	public const Guid CLSID_DVBSTuningSpace = .(0xb64016f3, 0xc9a2, 0x4066, 0x96, 0xf0, 0xbd, 0x95, 0x63, 0x31, 0x47, 0x26);


	public const Guid CLSID_ComponentTypes = .(0xa1a2b1c4, 0x0e3a, 0x11d3, 0x9d, 0x8e, 0x00, 0xc0, 0x4f, 0x72, 0xd9, 0x80);


	public const Guid CLSID_ComponentType = .(0x823535a0, 0x0318, 0x11d3, 0x9d, 0x8e, 0x00, 0xc0, 0x4f, 0x72, 0xd9, 0x80);


	public const Guid CLSID_LanguageComponentType = .(0x1be49f30, 0x0e1b, 0x11d3, 0x9d, 0x8e, 0x00, 0xc0, 0x4f, 0x72, 0xd9, 0x80);


	public const Guid CLSID_MPEG2ComponentType = .(0x418008f3, 0xcf67, 0x4668, 0x96, 0x28, 0x10, 0xdc, 0x52, 0xbe, 0x1d, 0x08);


	public const Guid CLSID_ATSCComponentType = .(0xa8dcf3d5, 0x0780, 0x4ef4, 0x8a, 0x83, 0x2c, 0xff, 0xaa, 0xcb, 0x8a, 0xce);


	public const Guid CLSID_Components = .(0x809b6661, 0x94c4, 0x49e6, 0xb6, 0xec, 0x3f, 0x0f, 0x86, 0x22, 0x15, 0xaa);


	public const Guid CLSID_Component = .(0x59dc47a8, 0x116c, 0x11d3, 0x9d, 0x8e, 0x00, 0xc0, 0x4f, 0x72, 0xd9, 0x80);


	public const Guid CLSID_MPEG2Component = .(0x055cb2d7, 0x2969, 0x45cd, 0x91, 0x4b, 0x76, 0x89, 0x07, 0x22, 0xf1, 0x12);


	public const Guid CLSID_AnalogAudioComponentType = .(0x28ab0005, 0xe845, 0x4ffa, 0xaa, 0x9b, 0xf4, 0x66, 0x52, 0x36, 0x14, 0x1c);


	public const Guid CLSID_TuneRequest = .(0xb46e0d38, 0xab35, 0x4a06, 0xa1, 0x37, 0x70, 0x57, 0x6b, 0x01, 0xb3, 0x9f);


	public const Guid CLSID_ChannelIDTuneRequest = .(0x3a9428a7, 0x31a4, 0x45e9, 0x9e, 0xfb, 0xe0, 0x55, 0xbf, 0x7b, 0xb3, 0xdb);


	public const Guid CLSID_ChannelTuneRequest = .(0x0369b4e5, 0x45b6, 0x11d3, 0xb6, 0x50, 0x00, 0xc0, 0x4f, 0x79, 0x49, 0x8e);


	public const Guid CLSID_ATSCChannelTuneRequest = .(0x0369b4e6, 0x45b6, 0x11d3, 0xb6, 0x50, 0x00, 0xc0, 0x4f, 0x79, 0x49, 0x8e);


	public const Guid CLSID_DigitalCableTuneRequest = .(0x26ec0b63, 0xaa90, 0x458a, 0x8d, 0xf4, 0x56, 0x59, 0xf2, 0xc8, 0xa1, 0x8a);


	public const Guid CLSID_MPEG2TuneRequest = .(0x0955ac62, 0xbf2e, 0x4cba, 0xa2, 0xb9, 0xa6, 0x3f, 0x77, 0x2d, 0x46, 0xcf);


	public const Guid CLSID_MPEG2TuneRequestFactory = .(0x2c63e4eb, 0x4cea, 0x41b8, 0x91, 0x9c, 0xe9, 0x47, 0xea, 0x19, 0xa7, 0x7c);


	public const Guid CLSID_Locator = .(0x0888c883, 0xac4f, 0x4943, 0xb5, 0x16, 0x2c, 0x38, 0xd9, 0xb3, 0x45, 0x62);


	public const Guid CLSID_DigitalLocator = .(0x6e50cc0d, 0xc19b, 0x4bf6, 0x81, 0x0b, 0x5b, 0xd6, 0x07, 0x61, 0xf5, 0xcc);


	public const Guid CLSID_AnalogLocator = .(0x49638b91, 0x48ab, 0x48b7, 0xa4, 0x7a, 0x7d, 0x0e, 0x75, 0xa0, 0x8e, 0xde);


	public const Guid CLSID_ATSCLocator = .(0x8872ff1b, 0x98fa, 0x4d7a, 0x8d, 0x93, 0xc9, 0xf1, 0x05, 0x5f, 0x85, 0xbb);


	public const Guid CLSID_DigitalCableLocator = .(0x03c06416, 0xd127, 0x407a, 0xab, 0x4c, 0xfd, 0xd2, 0x79, 0xab, 0xbe, 0x5d);


	public const Guid CLSID_DVBTLocator = .(0x9cd64701, 0xbdf3, 0x4d14, 0x8e, 0x03, 0xf1, 0x29, 0x83, 0xd8, 0x66, 0x64);


	public const Guid CLSID_DVBTLocator2 = .(0xefe3fa02, 0x45d7, 0x4920, 0xbe, 0x96, 0x53, 0xfa, 0x7f, 0x35, 0xb0, 0xe6);


	public const Guid CLSID_DVBSLocator = .(0x1df7d126, 0x4050, 0x47f0, 0xa7, 0xcf, 0x4c, 0x4c, 0xa9, 0x24, 0x13, 0x33);


	public const Guid CLSID_DVBCLocator = .(0xc531d9fd, 0x9685, 0x4028, 0x8b, 0x68, 0x6e, 0x12, 0x32, 0x07, 0x9f, 0x1e);


	public const Guid CLSID_ISDBSLocator = .(0x6504afed, 0xa629, 0x455c, 0xa7, 0xf1, 0x04, 0x96, 0x4d, 0xea, 0x5c, 0xc4);


	public const Guid CLSID_DVBTuneRequest = .(0x15d6504a, 0x5494, 0x499c, 0x88, 0x6c, 0x97, 0x3c, 0x9e, 0x53, 0xb9, 0xf1);


	public const Guid CLSID_CreatePropBagOnRegKey = .(0x8a674b49, 0x1f63, 0x11d3, 0xb6, 0x4c, 0x00, 0xc0, 0x4f, 0x79, 0x49, 0x8e);


	public const Guid CLSID_BroadcastEventService = .(0x0b3ffb92, 0x0919, 0x4934, 0x9d, 0x5b, 0x61, 0x9c, 0x71, 0x9d, 0x02, 0x02);


	public const Guid CLSID_TunerMarshaler = .(0x6438570b, 0x0c08, 0x4a25, 0x95, 0x04, 0x80, 0x12, 0xbb, 0x4d, 0x50, 0xcf);


	public const Guid CLSID_PersistTuneXmlUtility = .(0xe77026b0, 0xb97f, 0x4cbb, 0xb7, 0xfb, 0xf4, 0xf0, 0x3a, 0xd6, 0x9f, 0x11);


	public const Guid CLSID_ESEventService = .(0xc20447fc, 0xec60, 0x475e, 0x81, 0x3f, 0xd2, 0xb0, 0xa6, 0xde, 0xce, 0xfe);


	public const Guid CLSID_ESEventFactory = .(0x8e8a07da, 0x71f8, 0x40c1, 0xa9, 0x29, 0x5e, 0x3a, 0x86, 0x8a, 0xc2, 0xc6);


	public const Guid CLSID_XDSToRat = .(0xc5c5c5f0, 0x3abc, 0x11d6, 0xb2, 0x5b, 0x00, 0xc0, 0x4f, 0xa0, 0xc0, 0x26);


	public const Guid CLSID_EvalRat = .(0xc5c5c5f1, 0x3abc, 0x11d6, 0xb2, 0x5b, 0x00, 0xc0, 0x4f, 0xa0, 0xc0, 0x26);


	public const Guid CLSID_ETFilter = .(0xc4c4c4f1, 0x0049, 0x4e2b, 0x98, 0xfb, 0x95, 0x37, 0xf6, 0xce, 0x51, 0x6d);


	public const Guid CLSID_DTFilter = .(0xc4c4c4f2, 0x0049, 0x4e2b, 0x98, 0xfb, 0x95, 0x37, 0xf6, 0xce, 0x51, 0x6d);


	public const Guid CLSID_XDSCodec = .(0xc4c4c4f3, 0x0049, 0x4e2b, 0x98, 0xfb, 0x95, 0x37, 0xf6, 0xce, 0x51, 0x6d);


	public const Guid CLSID_CXDSData = .(0xc4c4c4f4, 0x0049, 0x4e2b, 0x98, 0xfb, 0x95, 0x37, 0xf6, 0xce, 0x51, 0x6d);


	public const Guid CLSID_MSVidAnalogTunerDevice = .(0x1c15d484, 0x911d, 0x11d2, 0xb6, 0x32, 0x00, 0xc0, 0x4f, 0x79, 0x49, 0x8e);


	public const Guid CLSID_MSVidBDATunerDevice = .(0xa2e3074e, 0x6c3d, 0x11d3, 0xb6, 0x53, 0x00, 0xc0, 0x4f, 0x79, 0x49, 0x8e);


	public const Guid CLSID_MSVidFilePlaybackDevice = .(0x37b0353c, 0xa4c8, 0x11d2, 0xb6, 0x34, 0x00, 0xc0, 0x4f, 0x79, 0x49, 0x8e);


	public const Guid CLSID_MSVidWebDVD = .(0x011b3619, 0xfe63, 0x4814, 0x8a, 0x84, 0x15, 0xa1, 0x94, 0xce, 0x9c, 0xe3);


	public const Guid CLSID_MSVidWebDVDAdm = .(0xfa7c375b, 0x66a7, 0x4280, 0x87, 0x9d, 0xfd, 0x45, 0x9c, 0x84, 0xbb, 0x02);


	public const Guid CLSID_MSVidVideoRenderer = .(0x37b03543, 0xa4c8, 0x11d2, 0xb6, 0x34, 0x00, 0xc0, 0x4f, 0x79, 0x49, 0x8e);


	public const Guid CLSID_MSVidVMR9 = .(0x24dc3975, 0x09bf, 0x4231, 0x86, 0x55, 0x3e, 0xe7, 0x1f, 0x43, 0x83, 0x7d);


	public const Guid CLSID_MSVidEVR = .(0xc45268a2, 0xfa81, 0x4e19, 0xb1, 0xe3, 0x72, 0xed, 0xbd, 0x60, 0xae, 0xda);


	public const Guid CLSID_MSVidAudioRenderer = .(0x37b03544, 0xa4c8, 0x11d2, 0xb6, 0x34, 0x00, 0xc0, 0x4f, 0x79, 0x49, 0x8e);


	public const Guid CLSID_MSVidGenericSink = .(0x4a5869cf, 0x929d, 0x4040, 0xae, 0x03, 0xfc, 0xaf, 0xc5, 0xb9, 0xcd, 0x42);


	public const Guid CLSID_MSVidStreamBufferSink = .(0x9e77aac4, 0x35e5, 0x42a1, 0xbd, 0xc2, 0x8f, 0x3f, 0xf3, 0x99, 0x84, 0x7c);


	public const Guid CLSID_MSVidStreamBufferSource = .(0xad8e510d, 0x217f, 0x409b, 0x80, 0x76, 0x29, 0xc5, 0xe7, 0x3b, 0x98, 0xe8);


	public const Guid CLSID_MSVidStreamBufferV2Source = .(0xfd351ea1, 0x4173, 0x4af4, 0x82, 0x1d, 0x80, 0xd4, 0xae, 0x97, 0x90, 0x48);


	public const Guid CLSID_MSVidEncoder = .(0xbb530c63, 0xd9df, 0x4b49, 0x94, 0x39, 0x63, 0x45, 0x39, 0x62, 0xe5, 0x98);


	public const Guid CLSID_MSVidITVCapture = .(0x5740a302, 0xef0b, 0x45ce, 0xbf, 0x3b, 0x44, 0x70, 0xa1, 0x4a, 0x89, 0x80);


	public const Guid CLSID_MSVidITVPlayback = .(0x9e797ed0, 0x5253, 0x4243, 0xa9, 0xb7, 0xbd, 0x06, 0xc5, 0x8f, 0x8e, 0xf3);


	public const Guid CLSID_MSVidCCA = .(0x86151827, 0xe47b, 0x45ee, 0x84, 0x21, 0xd1, 0x0e, 0x6e, 0x69, 0x09, 0x79);


	public const Guid CLSID_MSVidClosedCaptioning = .(0x7f9cb14d, 0x48e4, 0x43b6, 0x93, 0x46, 0x1a, 0xeb, 0xc3, 0x9c, 0x64, 0xd3);


	public const Guid CLSID_MSVidClosedCaptioningSI = .(0x92ed88bf, 0x879e, 0x448f, 0xb6, 0xb6, 0xa3, 0x85, 0xbc, 0xeb, 0x84, 0x6d);


	public const Guid CLSID_MSVidDataServices = .(0x334125c0, 0x77e5, 0x11d3, 0xb6, 0x53, 0x00, 0xc0, 0x4f, 0x79, 0x49, 0x8e);


	public const Guid CLSID_MSVidXDS = .(0x0149eedf, 0xd08f, 0x4142, 0x8d, 0x73, 0xd2, 0x39, 0x03, 0xd2, 0x1e, 0x90);


	public const Guid CLSID_MSVidAnalogCaptureToDataServices = .(0xc5702cd6, 0x9b79, 0x11d3, 0xb6, 0x54, 0x00, 0xc0, 0x4f, 0x79, 0x49, 0x8e);


	public const Guid CLSID_MSVidDataServicesToStreamBufferSink = .(0x38f03426, 0xe83b, 0x4e68, 0xb6, 0x5b, 0xdc, 0xae, 0x73, 0x30, 0x48, 0x38);


	public const Guid CLSID_MSVidDataServicesToXDS = .(0x0429ec6e, 0x1144, 0x4bed, 0xb8, 0x8b, 0x2f, 0xb9, 0x89, 0x9a, 0x4a, 0x3d);


	public const Guid CLSID_MSVidAnalogCaptureToXDS = .(0x3540d440, 0x5b1d, 0x49cb, 0x82, 0x1a, 0xe8, 0x4b, 0x8c, 0xf0, 0x65, 0xa7);


	public const Guid CLSID_MSVidCtl = .(0xb0edf163, 0x910a, 0x11d2, 0xb6, 0x32, 0x00, 0xc0, 0x4f, 0x79, 0x49, 0x8e);


	public const Guid CLSID_MSVidInputDevices = .(0xc5702ccc, 0x9b79, 0x11d3, 0xb6, 0x54, 0x00, 0xc0, 0x4f, 0x79, 0x49, 0x8e);


	public const Guid CLSID_MSVidOutputDevices = .(0xc5702ccd, 0x9b79, 0x11d3, 0xb6, 0x54, 0x00, 0xc0, 0x4f, 0x79, 0x49, 0x8e);


	public const Guid CLSID_MSVidVideoRendererDevices = .(0xc5702cce, 0x9b79, 0x11d3, 0xb6, 0x54, 0x00, 0xc0, 0x4f, 0x79, 0x49, 0x8e);


	public const Guid CLSID_MSVidAudioRendererDevices = .(0xc5702ccf, 0x9b79, 0x11d3, 0xb6, 0x54, 0x00, 0xc0, 0x4f, 0x79, 0x49, 0x8e);


	public const Guid CLSID_MSVidFeatures = .(0xc5702cd0, 0x9b79, 0x11d3, 0xb6, 0x54, 0x00, 0xc0, 0x4f, 0x79, 0x49, 0x8e);


	public const Guid CLSID_MSVidGenericComposite = .(0x2764bce5, 0xcc39, 0x11d2, 0xb6, 0x39, 0x00, 0xc0, 0x4f, 0x79, 0x49, 0x8e);


	public const Guid CLSID_MSVidAnalogCaptureToOverlayMixer = .(0xe18af75a, 0x08af, 0x11d3, 0xb6, 0x4a, 0x00, 0xc0, 0x4f, 0x79, 0x49, 0x8e);


	public const Guid CLSID_MSVidWebDVDToVideoRenderer = .(0x267db0b3, 0x55e3, 0x4902, 0x94, 0x9b, 0xdf, 0x8f, 0x5c, 0xec, 0x01, 0x91);


	public const Guid CLSID_MSVidWebDVDToAudioRenderer = .(0x8d04238e, 0x9fd1, 0x41c6, 0x8d, 0xe3, 0x9e, 0x1e, 0xe3, 0x09, 0xe9, 0x35);


	public const Guid CLSID_MSVidMPEG2DecoderToClosedCaptioning = .(0x6ad28ee1, 0x5002, 0x4e71, 0xaa, 0xf7, 0xbd, 0x07, 0x79, 0x07, 0xb1, 0xa4);


	public const Guid CLSID_MSVidAnalogCaptureToStreamBufferSink = .(0x9f50e8b1, 0x9530, 0x4ddc, 0x82, 0x5e, 0x1a, 0xf8, 0x1d, 0x47, 0xae, 0xd6);


	public const Guid CLSID_MSVidDigitalCaptureToStreamBufferSink = .(0xabe40035, 0x27c3, 0x4a2f, 0x81, 0x53, 0x66, 0x24, 0x47, 0x16, 0x08, 0xaf);


	public const Guid CLSID_MSVidITVToStreamBufferSink = .(0x92b94828, 0x1af7, 0x4e6e, 0x9e, 0xbf, 0x77, 0x06, 0x57, 0xf7, 0x7a, 0xf5);


	public const Guid CLSID_MSVidCCAToStreamBufferSink = .(0x3ef76d68, 0x8661, 0x4843, 0x8b, 0x8f, 0xc3, 0x71, 0x63, 0xd8, 0xc9, 0xce);


	public const Guid CLSID_MSVidEncoderToStreamBufferSink = .(0xa0b9b497, 0xafbc, 0x45ad, 0xa8, 0xa6, 0x9b, 0x07, 0x7c, 0x40, 0xd4, 0xf2);


	public const Guid CLSID_MSVidFilePlaybackToVideoRenderer = .(0xb401c5eb, 0x8457, 0x427f, 0x84, 0xea, 0xa4, 0xd2, 0x36, 0x33, 0x64, 0xb0);


	public const Guid CLSID_MSVidFilePlaybackToAudioRenderer = .(0xcc23f537, 0x18d4, 0x4ece, 0x93, 0xbd, 0x20, 0x7a, 0x84, 0x72, 0x69, 0x79);


	public const Guid CLSID_MSVidAnalogTVToEncoder = .(0x28953661, 0x0231, 0x41db, 0x89, 0x86, 0x21, 0xff, 0x43, 0x88, 0xee, 0x9b);


	public const Guid CLSID_MSVidStreamBufferSourceToVideoRenderer = .(0x3c4708dc, 0xb181, 0x46a8, 0x8d, 0xa8, 0x4a, 0xb0, 0x37, 0x17, 0x58, 0xcd);


	public const Guid CLSID_MSVidAnalogCaptureToCCA = .(0x942b7909, 0xa28e, 0x49a1, 0xa2, 0x07, 0x34, 0xeb, 0xcb, 0xcb, 0x4b, 0x3b);


	public const Guid CLSID_MSVidDigitalCaptureToCCA = .(0x73d14237, 0xb9db, 0x4efa, 0xa6, 0xdd, 0x84, 0x35, 0x04, 0x21, 0xfb, 0x2f);


	public const Guid CLSID_MSVidDigitalCaptureToITV = .(0x5d8e73f7, 0x4989, 0x4ac8, 0x8a, 0x98, 0x39, 0xba, 0x0d, 0x32, 0x53, 0x02);


	public const Guid CLSID_MSVidSBESourceToITV = .(0x2291478c, 0x5ee3, 0x4bef, 0xab, 0x5d, 0xb5, 0xff, 0x2c, 0xf5, 0x83, 0x52);


	public const Guid CLSID_MSVidSBESourceToCC = .(0x9193a8f9, 0x0cba, 0x400e, 0xaa, 0x97, 0xeb, 0x47, 0x09, 0x16, 0x45, 0x76);


	public const Guid CLSID_MSVidSBESourceToGenericSink = .(0x991da7e5, 0x953f, 0x435b, 0xbe, 0x5e, 0xb9, 0x2a, 0x05, 0xed, 0xfc, 0x42);


	public const Guid CLSID_MSVidCCToVMR = .(0xc4bf2784, 0xae00, 0x41ba, 0x98, 0x28, 0x9c, 0x95, 0x3b, 0xd3, 0xc5, 0x4a);


	public const Guid CLSID_MSVidCCToAR = .(0xd76334ca, 0xd89e, 0x4baf, 0x86, 0xab, 0xdd, 0xb5, 0x93, 0x72, 0xaf, 0xc2);


	public const Guid CLSID_MSEventBinder = .(0x577faa18, 0x4518, 0x445e, 0x8f, 0x70, 0x14, 0x73, 0xf8, 0xcf, 0x4b, 0xa4);


	public const Guid CLSID_MSVidStreamBufferRecordingControl = .(0xcaafdd83, 0xcefc, 0x4e3d, 0xba, 0x03, 0x17, 0x5f, 0x17, 0xa2, 0x4f, 0x91);


	public const Guid CLSID_MSVidRect = .(0xcb4276e6, 0x7d5f, 0x4cf1, 0x97, 0x27, 0x62, 0x9c, 0x5e, 0x6d, 0xb6, 0xae);


	public const Guid CLSID_MSVidDevice = .(0x6e40476f, 0x9c49, 0x4c3e, 0x8b, 0xb9, 0x85, 0x87, 0x95, 0x8e, 0xff, 0x74);


	public const Guid CLSID_MSVidDevice2 = .(0x30997f7d, 0xb3b5, 0x4a1c, 0x98, 0x3a, 0x1f, 0xe8, 0x09, 0x8c, 0xb7, 0x7d);


	public const Guid CLSID_MSVidInputDevice = .(0xac1972f2, 0x138a, 0x4ca3, 0x90, 0xda, 0xae, 0x51, 0x11, 0x2e, 0xda, 0x28);


	public const Guid CLSID_MSVidVideoInputDevice = .(0x95f4820b, 0xbb3a, 0x4e2d, 0xbc, 0x64, 0x5b, 0x81, 0x7b, 0xc2, 0xc3, 0x0e);


	public const Guid CLSID_MSVidVideoPlaybackDevice = .(0x1990d634, 0x1a5e, 0x4071, 0xa3, 0x4a, 0x53, 0xaa, 0xff, 0xce, 0x9f, 0x36);


	public const Guid CLSID_MSVidFeature = .(0x7748530b, 0xc08a, 0x47ea, 0xb2, 0x4c, 0xbe, 0x86, 0x95, 0xff, 0x40, 0x5f);


	public const Guid CLSID_MSVidOutput = .(0x87eb890d, 0x03ad, 0x4e9d, 0x98, 0x66, 0x37, 0x6e, 0x5e, 0xc5, 0x72, 0xed);


	public const Guid CLSID_SectionList = .(0x73da5d04, 0x4347, 0x45d3, 0xa9, 0xdc, 0xfa, 0xe9, 0xdd, 0xbe, 0x55, 0x8d);


	public const Guid CLSID_Mpeg2Stream = .(0xf91d96c7, 0x8509, 0x4d0b, 0xab, 0x26, 0xa0, 0xdd, 0x10, 0x90, 0x4b, 0xb7);


	public const Guid CLSID_Mpeg2Data = .(0xc666e115, 0xbb62, 0x4027, 0xa1, 0x13, 0x82, 0xd6, 0x43, 0xfe, 0x2d, 0x99);


	public const Guid CLSID_Mpeg2DataLib = .(0xdbaf6c1b, 0xb6a4, 0x4898, 0xae, 0x65, 0x20, 0x4f, 0x0d, 0x95, 0x09, 0xa1);


	public const Guid CLSID_TIFLoad = .(0x14eb8748, 0x1753, 0x4393, 0x95, 0xae, 0x4f, 0x7e, 0x7a, 0x87, 0xaa, 0xd6);


	public const Guid CLSID_EVENTID_TuningChanging = .(0x83183c03, 0xc09e, 0x45c4, 0xa7, 0x19, 0x80, 0x7a, 0x94, 0x95, 0x2b, 0xf9);


	public const Guid CLSID_EVENTID_TuningChanged = .(0x9d7e6235, 0x4b7d, 0x425d, 0xa6, 0xd1, 0xd7, 0x17, 0xc3, 0x3b, 0x9c, 0x4c);


	public const Guid CLSID_EVENTID_CandidatePostTuneData = .(0x9f02d3d0, 0x9f06, 0x4369, 0x9f, 0x1e, 0x3a, 0xd6, 0xca, 0x19, 0x80, 0x7e);


	public const Guid CLSID_EVENTID_CADenialCountChanged = .(0x2a65c528, 0x2249, 0x4070, 0xac, 0x16, 0x00, 0x39, 0x0c, 0xdf, 0xb2, 0xdd);


	public const Guid CLSID_EVENTID_SignalStatusChanged = .(0x6d9cfaf2, 0x702d, 0x4b01, 0x8d, 0xff, 0x68, 0x92, 0xad, 0x20, 0xd1, 0x91);


	public const Guid CLSID_EVENTID_NewSignalAcquired = .(0xc87ec52d, 0xcd18, 0x404a, 0xa0, 0x76, 0xc0, 0x2a, 0x27, 0x3d, 0x3d, 0xe7);


	public const Guid CLSID_EVENTID_EASMessageReceived = .(0xd10df9d5, 0xc261, 0x4b85, 0x9e, 0x8a, 0x51, 0x7b, 0x32, 0x99, 0xca, 0xb2);


	public const Guid CLSID_EVENTID_PSITable = .(0x1b9c3703, 0xd447, 0x4e16, 0x97, 0xbb, 0x01, 0x79, 0x9f, 0xc0, 0x31, 0xed);


	public const Guid CLSID_EVENTID_ServiceTerminated = .(0x0a1d591c, 0xe0d2, 0x4f8e, 0x89, 0x60, 0x23, 0x35, 0xbe, 0xf4, 0x5c, 0xcb);


	public const Guid CLSID_EVENTID_CardStatusChanged = .(0xa265faea, 0xf874, 0x4b38, 0x9f, 0xf7, 0xc5, 0x3d, 0x02, 0x96, 0x99, 0x96);


	public const Guid CLSID_EVENTID_DRMParingStatusChanged = .(0x000906f5, 0xf0d1, 0x41d6, 0xa7, 0xdf, 0x40, 0x28, 0x69, 0x76, 0x69, 0xf6);


	public const Guid CLSID_EVENTID_DRMParingStepComplete = .(0x5b2ebf78, 0xb752, 0x4420, 0xb4, 0x1e, 0xa4, 0x72, 0xdc, 0x95, 0x82, 0x8e);


	public const Guid CLSID_EVENTID_MMIMessage = .(0x052c29af, 0x09a4, 0x4b93, 0x89, 0x0f, 0xbd, 0x6a, 0x34, 0x89, 0x68, 0xa4);


	public const Guid CLSID_EVENTID_EntitlementChanged = .(0x9071ad5d, 0x2359, 0x4c95, 0x86, 0x94, 0xaf, 0xa8, 0x1d, 0x70, 0xbf, 0xd5);


	public const Guid CLSID_EVENTID_STBChannelNumber = .(0x17c4d730, 0xd0f0, 0x413a, 0x8c, 0x99, 0x50, 0x04, 0x69, 0xde, 0x35, 0xad);


	public const Guid CLSID_EVENTID_BDAEventingServicePendingEvent = .(0x5ca51711, 0x5ddc, 0x41a6, 0x94, 0x30, 0xe4, 0x1b, 0x8b, 0x3b, 0xbc, 0x5b);


	public const Guid CLSID_EVENTID_BDAConditionalAccessTAG = .(0xefc3a459, 0xae8b, 0x4b4a, 0x8f, 0xe9, 0x79, 0xa0, 0xd0, 0x97, 0xf3, 0xea);


	public const Guid CLSID_EVENTTYPE_CASDescrambleFailureEvent = .(0xb2127d42, 0x7be5, 0x4f4b, 0x91, 0x30, 0x66, 0x79, 0x89, 0x9f, 0x4f, 0x4b);


	public const Guid CLSID_EVENTID_CASFailureSpanningEvent = .(0xead831ae, 0x5529, 0x4d1f, 0xaf, 0xce, 0x0d, 0x8c, 0xd1, 0x25, 0x7d, 0x30);


	public const Guid CLSID_EVENTID_ChannelChangeSpanningEvent = .(0x9067c5e5, 0x4c5c, 0x4205, 0x86, 0xc8, 0x7a, 0xfe, 0x20, 0xfe, 0x1e, 0xfa);


	public const Guid CLSID_EVENTID_ChannelTypeSpanningEvent = .(0x72ab1d51, 0x87d2, 0x489b, 0xba, 0x11, 0x0e, 0x08, 0xdc, 0x21, 0x02, 0x43);


	public const Guid CLSID_EVENTID_ChannelInfoSpanningEvent = .(0x41f36d80, 0x4132, 0x4cc2, 0xb1, 0x21, 0x01, 0xa4, 0x32, 0x19, 0xd8, 0x1b);


	public const Guid CLSID_EVENTID_RRTSpanningEvent = .(0xf6cfc8f4, 0xda93, 0x4f2f, 0xbf, 0xf8, 0xba, 0x1e, 0xe6, 0xfc, 0xa3, 0xa2);


	public const Guid CLSID_EVENTID_CSDescriptorSpanningEvent = .(0xefe779d9, 0x97f0, 0x4786, 0x80, 0x0d, 0x95, 0xcf, 0x50, 0x5d, 0xdc, 0x66);


	public const Guid CLSID_EVENTID_CtxADescriptorSpanningEvent = .(0x3ab4a2e6, 0x4247, 0x4b34, 0x89, 0x6c, 0x30, 0xaf, 0xa5, 0xd2, 0x1c, 0x24);


	public const Guid CLSID_EVENTID_DVBScramblingControlSpanningEvent = .(0x4bd4e1c4, 0x90a1, 0x4109, 0x82, 0x36, 0x27, 0xf0, 0x0e, 0x7d, 0xcc, 0x5b);


	public const Guid CLSID_EVENTID_SignalAndServiceStatusSpanningEvent = .(0x8068c5cb, 0x3c04, 0x492b, 0xb4, 0x7d, 0x03, 0x08, 0x82, 0x0d, 0xce, 0x51);


	public const Guid CLSID_EVENTID_EmmMessageSpanningEvent = .(0x6bf00268, 0x4f7e, 0x4294, 0xaa, 0x87, 0xe9, 0xe9, 0x53, 0xe4, 0x3f, 0x14);


	public const Guid CLSID_EVENTID_AudioTypeSpanningEvent = .(0x501cbfbe, 0xb849, 0x42ce, 0x9b, 0xe9, 0x3d, 0xb8, 0x69, 0xfb, 0x82, 0xb3);


	public const Guid CLSID_EVENTID_StreamTypeSpanningEvent = .(0x82af2ebc, 0x30a6, 0x4264, 0xa8, 0x0b, 0xad, 0x2e, 0x13, 0x72, 0xac, 0x60);


	public const Guid CLSID_EVENTID_ARIBcontentSpanningEvent = .(0x3a954083, 0x93d0, 0x463e, 0x90, 0xb2, 0x07, 0x42, 0xc4, 0x96, 0xed, 0xf0);


	public const Guid CLSID_EVENTID_LanguageSpanningEvent = .(0xe292666d, 0x9c02, 0x448d, 0xaa, 0x8d, 0x78, 0x1a, 0x93, 0xfd, 0xc3, 0x95);


	public const Guid CLSID_EVENTID_DualMonoSpanningEvent = .(0xa9a29b56, 0xa84b, 0x488c, 0x89, 0xd5, 0x0d, 0x4e, 0x76, 0x57, 0xc8, 0xce);


	public const Guid CLSID_EVENTID_PIDListSpanningEvent = .(0x47fc8f65, 0xe2bb, 0x4634, 0x9c, 0xef, 0xfd, 0xbf, 0xe6, 0x26, 0x1d, 0x5c);


	public const Guid CLSID_EVENTID_AudioDescriptorSpanningEvent = .(0x107bd41c, 0xa6da, 0x4691, 0x83, 0x69, 0x11, 0xb2, 0xcd, 0xaa, 0x28, 0x8e);


	public const Guid CLSID_EVENTID_SubtitleSpanningEvent = .(0x5dcec048, 0xd0b9, 0x4163, 0x87, 0x2c, 0x4f, 0x32, 0x22, 0x3b, 0xe8, 0x8a);


	public const Guid CLSID_EVENTID_TeletextSpanningEvent = .(0x9599d950, 0x5f33, 0x4617, 0xaf, 0x7c, 0x1e, 0x54, 0xb5, 0x10, 0xda, 0xa3);


	public const Guid CLSID_EVENTID_StreamIDSpanningEvent = .(0xcaf1ab68, 0xe153, 0x4d41, 0xa6, 0xb3, 0xa7, 0xc9, 0x98, 0xdb, 0x75, 0xee);


	public const Guid CLSID_EVENTID_PBDAParentalControlEvent = .(0xf947aa85, 0xfb52, 0x48e8, 0xb9, 0xc5, 0xe1, 0xe1, 0xf4, 0x11, 0xa5, 0x1a);


	public const Guid CLSID_EVENTID_TuneFailureEvent = .(0xd97287b2, 0x2dfd, 0x436a, 0x94, 0x85, 0x99, 0xd7, 0xd4, 0xab, 0x5a, 0x69);


	public const Guid CLSID_EVENTID_TuneFailureSpanningEvent = .(0x6f8aa455, 0x5ee1, 0x48ab, 0xa2, 0x7c, 0x4c, 0x8d, 0x70, 0xb9, 0xae, 0xba);


	public const Guid CLSID_EVENTID_DvbParentalRatingDescriptor = .(0x2a67a58d, 0xeca5, 0x4eac, 0xab, 0xcb, 0xe7, 0x34, 0xd3, 0x77, 0x6d, 0x0a);


	public const Guid CLSID_EVENTID_DFNWithNoActualAVData = .(0xf5689ffe, 0x55f9, 0x4bb3, 0x96, 0xbe, 0xae, 0x97, 0x1c, 0x63, 0xba, 0xe0);


	public const Guid CLSID_KSDATAFORMAT_TYPE_BDA_ANTENNA = .(0x71985f41, 0x1ca1, 0x11d3, 0x9c, 0xc8, 0x00, 0xc0, 0x4f, 0x79, 0x71, 0xe0);


	public const Guid CLSID_KSDATAFORMAT_SUBTYPE_BDA_MPEG2_TRANSPORT = .(0xf4aeb342, 0x0329, 0x4fdd, 0xa8, 0xfd, 0x4a, 0xff, 0x49, 0x26, 0xc9, 0x78);


	public const Guid CLSID_KSDATAFORMAT_SPECIFIER_BDA_TRANSPORT = .(0x8deda6fd, 0xac5f, 0x4334, 0x8e, 0xcf, 0xa4, 0xba, 0x8f, 0xa7, 0xd0, 0xf0);


	public const Guid CLSID_KSDATAFORMAT_TYPE_BDA_IF_SIGNAL = .(0x61be0b47, 0xa5eb, 0x499b, 0x9a, 0x85, 0x5b, 0x16, 0xc0, 0x7f, 0x12, 0x58);


	public const Guid CLSID_KSDATAFORMAT_TYPE_MPEG2_SECTIONS = .(0x455f176c, 0x4b06, 0x47ce, 0x9a, 0xef, 0x8c, 0xae, 0xf7, 0x3d, 0xf7, 0xb5);


	public const Guid CLSID_KSDATAFORMAT_SUBTYPE_ATSC_SI = .(0xb3c7397c, 0xd303, 0x414d, 0xb3, 0x3c, 0x4e, 0xd2, 0xc9, 0xd2, 0x97, 0x33);


	public const Guid CLSID_KSDATAFORMAT_SUBTYPE_DVB_SI = .(0xe9dd31a3, 0x221d, 0x4adb, 0x85, 0x32, 0x9a, 0xf3, 0x09, 0xc1, 0xa4, 0x08);


	public const Guid CLSID_KSDATAFORMAT_SUBTYPE_BDA_OPENCABLE_PSIP = .(0x762e3f66, 0x336f, 0x48d1, 0xbf, 0x83, 0x2b, 0x00, 0x35, 0x2c, 0x11, 0xf0);


	public const Guid CLSID_KSDATAFORMAT_SUBTYPE_BDA_OPENCABLE_OOB_PSIP = .(0x951727db, 0xd2ce, 0x4528, 0x96, 0xf6, 0x33, 0x01, 0xfa, 0xbb, 0x2d, 0xe0);


	public const Guid CLSID_KSDATAFORMAT_SUBTYPE_ISDB_SI = .(0x4a2eeb99, 0x6458, 0x4538, 0xb1, 0x87, 0x04, 0x01, 0x7c, 0x41, 0x41, 0x3f);


	public const Guid CLSID_KSDATAFORMAT_SUBTYPE_PBDA_TRANSPORT_RAW = .(0x0d7aed42, 0xcb9a, 0x11db, 0x97, 0x05, 0x00, 0x50, 0x56, 0xc0, 0x00, 0x08);


	public const Guid CLSID_PINNAME_BDA_TRANSPORT = .(0x78216a81, 0xcfa8, 0x493e, 0x97, 0x11, 0x36, 0xa6, 0x1c, 0x08, 0xbd, 0x9d);


	public const Guid CLSID_PINNAME_BDA_ANALOG_VIDEO = .(0x5c0c8281, 0x5667, 0x486c, 0x84, 0x82, 0x63, 0xe3, 0x1f, 0x01, 0xa6, 0xe9);


	public const Guid CLSID_PINNAME_BDA_ANALOG_AUDIO = .(0xd28a580a, 0x9b1f, 0x4b0c, 0x9c, 0x33, 0x9b, 0xf0, 0xa8, 0xea, 0x63, 0x6b);


	public const Guid CLSID_PINNAME_BDA_FM_RADIO = .(0xd2855fed, 0xb2d3, 0x4eeb, 0x9b, 0xd0, 0x19, 0x34, 0x36, 0xa2, 0xf8, 0x90);


	public const Guid CLSID_PINNAME_BDA_IF_PIN = .(0x1a9d4a42, 0xf3cd, 0x48a1, 0x9a, 0xea, 0x71, 0xde, 0x13, 0x3c, 0xbe, 0x14);


	public const Guid CLSID_PINNAME_BDA_OPENCABLE_PSIP_PIN = .(0x297bb104, 0xe5c9, 0x4ace, 0xb1, 0x23, 0x95, 0xc3, 0xcb, 0xb2, 0x4d, 0x4f);


	public const Guid CLSID_KSPROPSETID_BdaEthernetFilter = .(0x71985f43, 0x1ca1, 0x11d3, 0x9c, 0xc8, 0x00, 0xc0, 0x4f, 0x79, 0x71, 0xe0);


	public const Guid CLSID_KSPROPSETID_BdaIPv4Filter = .(0x71985f44, 0x1ca1, 0x11d3, 0x9c, 0xc8, 0x00, 0xc0, 0x4f, 0x79, 0x71, 0xe0);


	public const Guid CLSID_KSPROPSETID_BdaIPv6Filter = .(0xe1785a74, 0x2a23, 0x4fb3, 0x92, 0x45, 0xa8, 0xf8, 0x80, 0x17, 0xef, 0x33);


	public const Guid CLSID_KSPROPSETID_BdaSignalStats = .(0x1347d106, 0xcf3a, 0x428a, 0xa5, 0xcb, 0xac, 0x0d, 0x9a, 0x2a, 0x43, 0x38);


	public const Guid CLSID_KSMETHODSETID_BdaChangeSync = .(0xfd0a5af3, 0xb41d, 0x11d2, 0x9c, 0x95, 0x00, 0xc0, 0x4f, 0x79, 0x71, 0xe0);


	public const Guid CLSID_KSMETHODSETID_BdaDeviceConfiguration = .(0x71985f45, 0x1ca1, 0x11d3, 0x9c, 0xc8, 0x00, 0xc0, 0x4f, 0x79, 0x71, 0xe0);


	public const Guid CLSID_KSPROPSETID_BdaTopology = .(0xa14ee835, 0x0a23, 0x11d3, 0x9c, 0xc7, 0x00, 0xc0, 0x4f, 0x79, 0x71, 0xe0);


	public const Guid CLSID_KSPROPSETID_BdaPinControl = .(0x0ded49d5, 0xa8b7, 0x4d5d, 0x97, 0xa1, 0x12, 0xb0, 0xc1, 0x95, 0x87, 0x4d);


	public const Guid CLSID_KSEVENTSETID_BdaPinEvent = .(0x104781cd, 0x50bd, 0x40d5, 0x95, 0xfb, 0x08, 0x7e, 0x0e, 0x86, 0xa5, 0x91);


	public const Guid CLSID_KSPROPSETID_BdaVoidTransform = .(0x71985f46, 0x1ca1, 0x11d3, 0x9c, 0xc8, 0x00, 0xc0, 0x4f, 0x79, 0x71, 0xe0);


	public const Guid CLSID_KSPROPSETID_BdaNullTransform = .(0xddf15b0d, 0xbd25, 0x11d2, 0x9c, 0xa0, 0x00, 0xc0, 0x4f, 0x79, 0x71, 0xe0);


	public const Guid CLSID_KSPROPSETID_BdaFrequencyFilter = .(0x71985f47, 0x1ca1, 0x11d3, 0x9c, 0xc8, 0x00, 0xc0, 0x4f, 0x79, 0x71, 0xe0);


	public const Guid CLSID_KSEVENTSETID_BdaTunerEvent = .(0xaab59e17, 0x01c9, 0x4ebf, 0x93, 0xf2, 0xfc, 0x3b, 0x79, 0xb4, 0x6f, 0x91);


	public const Guid CLSID_KSPROPSETID_BdaLNBInfo = .(0x992cf102, 0x49f9, 0x4719, 0xa6, 0x64, 0xc4, 0xf2, 0x3e, 0x24, 0x08, 0xf4);


	public const Guid CLSID_KSPROPSETID_BdaDiseqCommand = .(0xf84e2ab0, 0x3c6b, 0x45e3, 0xa0, 0xfc, 0x86, 0x69, 0xd4, 0xb8, 0x1f, 0x11);


	public const Guid CLSID_KSEVENTSETID_BdaDiseqCEvent = .(0x8b19bbf0, 0x4184, 0x43ac, 0xad, 0x3c, 0x0c, 0x88, 0x9b, 0xe4, 0xc2, 0x12);


	public const Guid CLSID_KSPROPSETID_BdaDigitalDemodulator = .(0xef30f379, 0x985b, 0x4d10, 0xb6, 0x40, 0xa7, 0x9d, 0x5e, 0x04, 0xe1, 0xe0);


	public const Guid CLSID_KSPROPSETID_BdaAutodemodulate = .(0xddf15b12, 0xbd25, 0x11d2, 0x9c, 0xa0, 0x00, 0xc0, 0x4f, 0x79, 0x71, 0xe0);


	public const Guid CLSID_KSPROPSETID_BdaTableSection = .(0x516b99c5, 0x971c, 0x4aaf, 0xb3, 0xf3, 0xd9, 0xfd, 0xa8, 0xa1, 0x5e, 0x16);


	public const Guid CLSID_KSPROPSETID_BdaPIDFilter = .(0xd0a67d65, 0x08df, 0x4fec, 0x85, 0x33, 0xe5, 0xb5, 0x50, 0x41, 0x0b, 0x85);


	public const Guid CLSID_KSPROPSETID_BdaCA = .(0xb0693766, 0x5278, 0x4ec6, 0xb9, 0xe1, 0x3c, 0xe4, 0x05, 0x60, 0xef, 0x5a);


	public const Guid CLSID_KSEVENTSETID_BdaCAEvent = .(0x488c4ccc, 0xb768, 0x4129, 0x8e, 0xb1, 0xb0, 0x0a, 0x07, 0x1f, 0x90, 0x68);


	public const Guid CLSID_KSMETHODSETID_BdaDrmService = .(0xbff6b5bb, 0xb0ae, 0x484c, 0x9d, 0xca, 0x73, 0x52, 0x8f, 0xb0, 0xb4, 0x6e);


	public const Guid CLSID_KSMETHODSETID_BdaWmdrmSession = .(0x4be6fa3d, 0x07cd, 0x4139, 0x8b, 0x80, 0x8c, 0x18, 0xba, 0x3a, 0xec, 0x88);


	public const Guid CLSID_KSMETHODSETID_BdaWmdrmTuner = .(0x86d979cf, 0xa8a7, 0x4f94, 0xb5, 0xfb, 0x14, 0xc0, 0xac, 0xa6, 0x8f, 0xe6);


	public const Guid CLSID_KSMETHODSETID_BdaEventing = .(0xf99492da, 0x6193, 0x4eb0, 0x86, 0x90, 0x66, 0x86, 0xcb, 0xff, 0x71, 0x3e);


	public const Guid CLSID_KSEVENTSETID_BdaEvent = .(0xae7e55b2, 0x96d7, 0x4e29, 0x90, 0x8f, 0x62, 0xf9, 0x5b, 0x2a, 0x16, 0x79);


	public const Guid CLSID_KSMETHODSETID_BdaDebug = .(0x0d4a90ec, 0xc69d, 0x4ee2, 0x8c, 0x5a, 0xfb, 0x1f, 0x63, 0xa5, 0x0d, 0xa1);


	public const Guid CLSID_KSMETHODSETID_BdaTuner = .(0xb774102f, 0xac07, 0x478a, 0x82, 0x28, 0x27, 0x42, 0xd9, 0x61, 0xfa, 0x7e);


	public const Guid CLSID_KSMETHODSETID_BdaNameValueA = .(0x0c24096d, 0x5ff5, 0x47de, 0xa8, 0x56, 0x06, 0x2e, 0x58, 0x7e, 0x37, 0x27);


	public const Guid CLSID_KSMETHODSETID_BdaNameValue = .(0x36e07304, 0x9f0d, 0x4e88, 0x91, 0x18, 0xac, 0x0b, 0xa3, 0x17, 0xb7, 0xf2);


	public const Guid CLSID_KSMETHODSETID_BdaMux = .(0x942aafec, 0x4c05, 0x4c74, 0xb8, 0xeb, 0x87, 0x06, 0xc2, 0xa4, 0x94, 0x3f);


	public const Guid CLSID_KSMETHODSETID_BdaScanning = .(0x12eb49df, 0x6249, 0x47f3, 0xb1, 0x90, 0xe2, 0x1e, 0x6e, 0x2f, 0x8a, 0x9c);


	public const Guid CLSID_KSMETHODSETID_BdaGuideDataDeliveryService = .(0x8d9d5562, 0x1589, 0x417d, 0x99, 0xce, 0xac, 0x53, 0x1d, 0xda, 0x19, 0xf9);


	public const Guid CLSID_KSMETHODSETID_BdaConditionalAccessService = .(0x10ced3b4, 0x320b, 0x41bf, 0x98, 0x24, 0x1b, 0x2e, 0x68, 0xe7, 0x1e, 0xb9);


	public const Guid CLSID_KSMETHODSETID_BdaIsdbConditionalAccess = .(0x5e68c627, 0x16c2, 0x4e6c, 0xb1, 0xe2, 0xd0, 0x01, 0x70, 0xcd, 0xaa, 0x0f);


	public const Guid CLSID_KSMETHODSETID_BdaTSSelector = .(0x1dcfafe9, 0xb45e, 0x41b3, 0xbb, 0x2a, 0x56, 0x1e, 0xb1, 0x29, 0xae, 0x98);


	public const Guid CLSID_KSMETHODSETID_BdaUserActivity = .(0xeda5c834, 0x4531, 0x483c, 0xbe, 0x0a, 0x94, 0xe6, 0xc9, 0x6f, 0xf3, 0x96);


	public const Guid CLSID_KSCATEGORY_BDA_RECEIVER_COMPONENT = .(0xfd0a5af4, 0xb41d, 0x11d2, 0x9c, 0x95, 0x00, 0xc0, 0x4f, 0x79, 0x71, 0xe0);


	public const Guid CLSID_KSCATEGORY_BDA_NETWORK_TUNER = .(0x71985f48, 0x1ca1, 0x11d3, 0x9c, 0xc8, 0x00, 0xc0, 0x4f, 0x79, 0x71, 0xe0);


	public const Guid CLSID_KSCATEGORY_BDA_NETWORK_EPG = .(0x71985f49, 0x1ca1, 0x11d3, 0x9c, 0xc8, 0x00, 0xc0, 0x4f, 0x79, 0x71, 0xe0);


	public const Guid CLSID_KSCATEGORY_BDA_IP_SINK = .(0x71985f4a, 0x1ca1, 0x11d3, 0x9c, 0xc8, 0x00, 0xc0, 0x4f, 0x79, 0x71, 0xe0);


	public const Guid CLSID_KSCATEGORY_BDA_NETWORK_PROVIDER = .(0x71985f4b, 0x1ca1, 0x11d3, 0x9c, 0xc8, 0x00, 0xc0, 0x4f, 0x79, 0x71, 0xe0);


	public const Guid CLSID_KSCATEGORY_BDA_TRANSPORT_INFORMATION = .(0xa2e3074f, 0x6c3d, 0x11d3, 0xb6, 0x53, 0x00, 0xc0, 0x4f, 0x79, 0x49, 0x8e);


	public const Guid CLSID_KSNODE_BDA_RF_TUNER = .(0x71985f4c, 0x1ca1, 0x11d3, 0x9c, 0xc8, 0x00, 0xc0, 0x4f, 0x79, 0x71, 0xe0);


	public const Guid CLSID_KSNODE_BDA_ANALOG_DEMODULATOR = .(0x634db199, 0x27dd, 0x46b8, 0xac, 0xfb, 0xec, 0xc9, 0x8e, 0x61, 0xa2, 0xad);


	public const Guid CLSID_KSNODE_BDA_QAM_DEMODULATOR = .(0x71985f4d, 0x1ca1, 0x11d3, 0x9c, 0xc8, 0x00, 0xc0, 0x4f, 0x79, 0x71, 0xe0);


	public const Guid CLSID_KSNODE_BDA_QPSK_DEMODULATOR = .(0x6390c905, 0x27c1, 0x4d67, 0xbd, 0xb7, 0x77, 0xc5, 0x0d, 0x07, 0x93, 0x00);


	public const Guid CLSID_KSNODE_BDA_8VSB_DEMODULATOR = .(0x71985f4f, 0x1ca1, 0x11d3, 0x9c, 0xc8, 0x00, 0xc0, 0x4f, 0x79, 0x71, 0xe0);


	public const Guid CLSID_KSNODE_BDA_COFDM_DEMODULATOR = .(0x2dac6e05, 0xedbe, 0x4b9c, 0xb3, 0x87, 0x1b, 0x6f, 0xad, 0x7d, 0x64, 0x95);


	public const Guid CLSID_KSNODE_BDA_8PSK_DEMODULATOR = .(0xe957a0e7, 0xdd98, 0x4a3c, 0x81, 0x0b, 0x35, 0x25, 0x15, 0x7a, 0xb6, 0x2e);


	public const Guid CLSID_KSNODE_BDA_ISDB_T_DEMODULATOR = .(0xfcea3ae3, 0x2cb2, 0x464d, 0x8f, 0x5d, 0x30, 0x5c, 0x0b, 0xb7, 0x78, 0xa2);


	public const Guid CLSID_KSNODE_BDA_ISDB_S_DEMODULATOR = .(0xedde230a, 0x9086, 0x432d, 0xb8, 0xa5, 0x66, 0x70, 0x26, 0x38, 0x07, 0xe9);


	public const Guid CLSID_KSNODE_BDA_OPENCABLE_POD = .(0x345812a0, 0xfb7c, 0x4790, 0xaa, 0x7e, 0xb1, 0xdb, 0x88, 0xac, 0x19, 0xc9);


	public const Guid CLSID_KSNODE_BDA_COMMON_CA_POD = .(0xd83ef8fc, 0xf3b8, 0x45ab, 0x8b, 0x71, 0xec, 0xf7, 0xc3, 0x39, 0xde, 0xb4);


	public const Guid CLSID_KSNODE_BDA_PID_FILTER = .(0xf5412789, 0xb0a0, 0x44e1, 0xae, 0x4f, 0xee, 0x99, 0x9b, 0x1b, 0x7f, 0xbe);


	public const Guid CLSID_KSNODE_BDA_IP_SINK = .(0x71985f4e, 0x1ca1, 0x11d3, 0x9c, 0xc8, 0x00, 0xc0, 0x4f, 0x79, 0x71, 0xe0);


	public const Guid CLSID_KSNODE_BDA_VIDEO_ENCODER = .(0xd98429e3, 0x65c9, 0x4ac4, 0x93, 0xaa, 0x76, 0x67, 0x82, 0x83, 0x3b, 0x7a);


	public const Guid CLSID_KSNODE_BDA_PBDA_CAS = .(0xc026869f, 0x7129, 0x4e71, 0x86, 0x96, 0xec, 0x8f, 0x75, 0x29, 0x9b, 0x77);


	public const Guid CLSID_KSNODE_BDA_PBDA_ISDBCAS = .(0xf2cf2ab3, 0x5b9d, 0x40ae, 0xab, 0x7c, 0x4e, 0x7a, 0xd0, 0xbd, 0x1c, 0x52);


	public const Guid CLSID_KSNODE_BDA_PBDA_TUNER = .(0xaa5e8286, 0x593c, 0x4979, 0x94, 0x94, 0x46, 0xa2, 0xa9, 0xdf, 0xe0, 0x76);


	public const Guid CLSID_KSNODE_BDA_PBDA_MUX = .(0xf88c7787, 0x6678, 0x4f4b, 0xa1, 0x3e, 0xda, 0x09, 0x86, 0x1d, 0x68, 0x2b);


	public const Guid CLSID_KSNODE_BDA_PBDA_DRM = .(0x9eeebd03, 0xeea1, 0x450f, 0x96, 0xae, 0x63, 0x3e, 0x6d, 0xe6, 0x3c, 0xce);


	public const Guid CLSID_KSNODE_BDA_DRI_DRM = .(0x4f95ad74, 0xcefb, 0x42d2, 0x94, 0xa9, 0x68, 0xc5, 0xb2, 0xc1, 0xaa, 0xbe);


	public const Guid CLSID_KSNODE_BDA_TS_SELECTOR = .(0x5eddf185, 0xfed1, 0x4f45, 0x96, 0x85, 0xbb, 0xb7, 0x3c, 0x32, 0x3c, 0xfc);


	public const Guid CLSID_PINNAME_IPSINK_INPUT = .(0x3fdffa70, 0xac9a, 0x11d2, 0x8f, 0x17, 0x00, 0xc0, 0x4f, 0x79, 0x71, 0xe2);


	public const Guid CLSID_KSDATAFORMAT_TYPE_BDA_IP = .(0xe25f7b8e, 0xcccc, 0x11d2, 0x8f, 0x25, 0x00, 0xc0, 0x4f, 0x79, 0x71, 0xe2);


	public const Guid CLSID_KSDATAFORMAT_SUBTYPE_BDA_IP = .(0x5a9a213c, 0xdb08, 0x11d2, 0x8f, 0x32, 0x00, 0xc0, 0x4f, 0x79, 0x71, 0xe2);


	public const Guid CLSID_KSDATAFORMAT_SPECIFIER_BDA_IP = .(0x6b891420, 0xdb09, 0x11d2, 0x8f, 0x32, 0x00, 0xc0, 0x4f, 0x79, 0x71, 0xe2);


	public const Guid CLSID_KSDATAFORMAT_TYPE_BDA_IP_CONTROL = .(0xdadd5799, 0x7d5b, 0x4b63, 0x80, 0xfb, 0xd1, 0x44, 0x2f, 0x26, 0xb6, 0x21);


	public const Guid CLSID_KSDATAFORMAT_SUBTYPE_BDA_IP_CONTROL = .(0x499856e8, 0xe85b, 0x48ed, 0x9b, 0xea, 0x41, 0x0d, 0x0d, 0xd4, 0xef, 0x81);


	public const Guid CLSID_PINNAME_MPE = .(0xc1b06d73, 0x1dbb, 0x11d3, 0x8f, 0x46, 0x00, 0xc0, 0x4f, 0x79, 0x71, 0xe2);


	public const Guid CLSID_KSDATAFORMAT_TYPE_MPE = .(0x455f176c, 0x4b06, 0x47ce, 0x9a, 0xef, 0x8c, 0xae, 0xf7, 0x3d, 0xf7, 0xb5);


	public const Guid CLSID_DIGITAL_CABLE_NETWORK_TYPE = .(0x143827ab, 0xf77b, 0x498d, 0x81, 0xca, 0x5a, 0x00, 0x7a, 0xec, 0x28, 0xbf);


	public const Guid CLSID_ANALOG_TV_NETWORK_TYPE = .(0xb820d87e, 0xe0e3, 0x478f, 0x8a, 0x38, 0x4e, 0x13, 0xf7, 0xb3, 0xdf, 0x42);


	public const Guid CLSID_ANALOG_AUXIN_NETWORK_TYPE = .(0x742ef867, 0x09e1, 0x40a3, 0x82, 0xd3, 0x96, 0x69, 0xba, 0x35, 0x32, 0x5f);


	public const Guid CLSID_ANALOG_FM_NETWORK_TYPE = .(0x7728087b, 0x2bb9, 0x4e30, 0x80, 0x78, 0x44, 0x94, 0x76, 0xe5, 0x9d, 0xbb);


	public const Guid CLSID_ISDB_TERRESTRIAL_TV_NETWORK_TYPE = .(0x95037f6f, 0x3ac7, 0x4452, 0xb6, 0xc4, 0x45, 0xa9, 0xce, 0x92, 0x92, 0xa2);


	public const Guid CLSID_ISDB_T_NETWORK_TYPE = .(0xfc3855a6, 0xc901, 0x4f2e, 0xab, 0xa8, 0x90, 0x81, 0x5a, 0xfc, 0x6c, 0x83);


	public const Guid CLSID_ISDB_SATELLITE_TV_NETWORK_TYPE = .(0xb0a4e6a0, 0x6a1a, 0x4b83, 0xbb, 0x5b, 0x90, 0x3e, 0x1d, 0x90, 0xe6, 0xb6);


	public const Guid CLSID_ISDB_S_NETWORK_TYPE = .(0xa1e78202, 0x1459, 0x41b1, 0x9c, 0xa9, 0x2a, 0x92, 0x58, 0x7a, 0x42, 0xcc);


	public const Guid CLSID_ISDB_CABLE_TV_NETWORK_TYPE = .(0xc974ddb5, 0x41fe, 0x4b25, 0x97, 0x41, 0x92, 0xf0, 0x49, 0xf1, 0xd5, 0xd1);


	public const Guid CLSID_DIRECT_TV_SATELLITE_TV_NETWORK_TYPE = .(0x93b66fb5, 0x93d4, 0x4323, 0x92, 0x1c, 0xc1, 0xf5, 0x2d, 0xf6, 0x1d, 0x3f);


	public const Guid CLSID_ECHOSTAR_SATELLITE_TV_NETWORK_TYPE = .(0xc4f6b31b, 0xc6bf, 0x4759, 0x88, 0x6f, 0xa7, 0x38, 0x6d, 0xca, 0x27, 0xa0);


	public const Guid CLSID_ATSC_TERRESTRIAL_TV_NETWORK_TYPE = .(0x0dad2fdd, 0x5fd7, 0x11d3, 0x8f, 0x50, 0x00, 0xc0, 0x4f, 0x79, 0x71, 0xe2);


	public const Guid CLSID_DVB_TERRESTRIAL_TV_NETWORK_TYPE = .(0x216c62df, 0x6d7f, 0x4e9a, 0x85, 0x71, 0x05, 0xf1, 0x4e, 0xdb, 0x76, 0x6a);


	public const Guid CLSID_BSKYB_TERRESTRIAL_TV_NETWORK_TYPE = .(0x9e9e46c6, 0x3aba, 0x4f08, 0xad, 0x0e, 0xcc, 0x5a, 0xc8, 0x14, 0x8c, 0x2b);


	public const Guid CLSID_DVB_SATELLITE_TV_NETWORK_TYPE = .(0xfa4b375a, 0x45b4, 0x4d45, 0x84, 0x40, 0x26, 0x39, 0x57, 0xb1, 0x16, 0x23);


	public const Guid CLSID_DVB_CABLE_TV_NETWORK_TYPE = .(0xdc0c0fe7, 0x0485, 0x4266, 0xb9, 0x3f, 0x68, 0xfb, 0xf8, 0x0e, 0xd8, 0x34);


	public const Guid CLSID_BDA_DEBUG_DATA_AVAILABLE = .(0x69c24f54, 0x9983, 0x497e, 0xb4, 0x15, 0x28, 0x2b, 0xe4, 0xc5, 0x55, 0xfb);


	public const Guid CLSID_BDA_DEBUG_DATA_TYPE_STRING = .(0xa806e767, 0xde5c, 0x430c, 0x80, 0xbf, 0xa2, 0x1e, 0xbe, 0x06, 0xc7, 0x48);


	public const Guid CLSID_EVENTID_BDA_IsdbCASResponse = .(0xd4cb1966, 0x41bc, 0x4ced, 0x9a, 0x20, 0xfd, 0xce, 0xac, 0x78, 0xf7, 0x0d);


	public const Guid CLSID_EVENTID_BDA_CASRequestTuner = .(0xcf39a9d8, 0xf5d3, 0x4685, 0xbe, 0x57, 0xed, 0x81, 0xdb, 0xa4, 0x6b, 0x27);


	public const Guid CLSID_EVENTID_BDA_CASReleaseTuner = .(0x20c1a16b, 0x441f, 0x49a5, 0xbb, 0x5c, 0xe9, 0xa0, 0x44, 0x95, 0xc6, 0xc1);


	public const Guid CLSID_EVENTID_BDA_CASOpenMMI = .(0x85dac915, 0xe593, 0x410d, 0x84, 0x71, 0xd6, 0x81, 0x21, 0x05, 0xf2, 0x8e);


	public const Guid CLSID_EVENTID_BDA_CASCloseMMI = .(0x5d0f550f, 0xde2e, 0x479d, 0x83, 0x45, 0xec, 0x0e, 0x95, 0x57, 0xe8, 0xa2);


	public const Guid CLSID_EVENTID_BDA_CASBroadcastMMI = .(0x676876f0, 0x1132, 0x404c, 0xa7, 0xca, 0xe7, 0x20, 0x69, 0xa9, 0xd5, 0x4f);


	public const Guid CLSID_EVENTID_BDA_TunerSignalLock = .(0x1872e740, 0xf573, 0x429b, 0xa0, 0x0e, 0xd9, 0xc1, 0xe4, 0x08, 0xaf, 0x09);


	public const Guid CLSID_EVENTID_BDA_TunerNoSignal = .(0xe29b382b, 0x1edd, 0x4930, 0xbc, 0x46, 0x68, 0x2f, 0xd7, 0x2d, 0x2d, 0xfb);


	public const Guid CLSID_EVENTID_BDA_GPNVValueUpdate = .(0xff75c68c, 0xf416, 0x4e7e, 0xbf, 0x17, 0x6d, 0x55, 0xc5, 0xdf, 0x15, 0x75);


	public const Guid CLSID_EVENTID_BDA_UpdateDrmStatus = .(0x65a6f681, 0x1462, 0x473b, 0x88, 0xce, 0xcb, 0x73, 0x14, 0x27, 0xbd, 0xb5);


	public const Guid CLSID_EVENTID_BDA_UpdateScanState = .(0x55702b50, 0x7b49, 0x42b8, 0xa8, 0x2f, 0x4a, 0xfb, 0x69, 0x1b, 0x06, 0x28);


	public const Guid CLSID_EVENTID_BDA_GuideDataAvailable = .(0x98db717a, 0x478a, 0x4cd4, 0x92, 0xd0, 0x95, 0xf6, 0x6b, 0x89, 0xe5, 0xb1);


	public const Guid CLSID_EVENTID_BDA_GuideServiceInformationUpdated = .(0xa1c3ea2b, 0x175f, 0x4458, 0xb7, 0x35, 0x50, 0x7d, 0x22, 0xdb, 0x23, 0xa6);


	public const Guid CLSID_EVENTID_BDA_GuideDataError = .(0xac33c448, 0x6f73, 0x4fd7, 0xb3, 0x41, 0x59, 0x4c, 0x36, 0x0d, 0x8d, 0x74);


	public const Guid CLSID_EVENTID_BDA_DiseqCResponseAvailable = .(0xefa628f8, 0x1f2c, 0x4b67, 0x9e, 0xa5, 0xac, 0xf6, 0xfa, 0x9a, 0x1f, 0x36);


	public const Guid CLSID_EVENTID_BDA_LbigsOpenConnection = .(0x356207b2, 0x6f31, 0x4eb0, 0xa2, 0x71, 0xb3, 0xfa, 0x6b, 0xb7, 0x68, 0x0f);


	public const Guid CLSID_EVENTID_BDA_LbigsSendData = .(0x1123277b, 0xf1c6, 0x4154, 0x8b, 0x0d, 0x48, 0xe6, 0x15, 0x70, 0x59, 0xaa);


	public const Guid CLSID_EVENTID_BDA_LbigsCloseConnectionHandle = .(0xc2f08b99, 0x65ef, 0x4314, 0x96, 0x71, 0xe9, 0x9d, 0x4c, 0xce, 0x0b, 0xae);


	public const Guid CLSID_EVENTID_BDA_EncoderSignalLock = .(0x5ec90eb9, 0x39fa, 0x4cfc, 0xb9, 0x3f, 0x00, 0xbb, 0x11, 0x07, 0x7f, 0x5e);


	public const Guid CLSID_EVENTID_BDA_FdcStatus = .(0x05f25366, 0xd0eb, 0x43d2, 0xbc, 0x3c, 0x68, 0x2b, 0x86, 0x3d, 0xf1, 0x42);


	public const Guid CLSID_EVENTID_BDA_FdcTableSection = .(0x6a0cd757, 0x4ce3, 0x4e5b, 0x94, 0x44, 0x71, 0x87, 0xb8, 0x71, 0x52, 0xc5);


	public const Guid CLSID_EVENTID_BDA_TransprtStreamSelectorInfo = .(0xc40f9f85, 0x09d0, 0x489c, 0x9e, 0x9c, 0x0a, 0xbb, 0xb5, 0x69, 0x51, 0xb0);


	public const Guid CLSID_EVENTID_BDA_RatingPinReset = .(0xc6e048c0, 0xc574, 0x4c26, 0xbc, 0xda, 0x2f, 0x4d, 0x35, 0xeb, 0x5e, 0x85);


	public const Guid CLSID_PBDA_ALWAYS_TUNE_IN_MUX = .(0x1e1d7141, 0x583f, 0x4ac2, 0xb0, 0x19, 0x1f, 0x43, 0x0e, 0xda, 0x0f, 0x4c);


	public const Guid CLSID_BDANETWORKTYPE_ATSC = .(0x71985f51, 0x1ca1, 0x11d3, 0x9c, 0xc8, 0x00, 0xc0, 0x4f, 0x79, 0x71, 0xe0);


}
#endregion

#region COM Types
[CRepr]struct ICreateDevEnum : IUnknown
{
	public new const Guid IID = .(0x29840822, 0x5b84, 0x11d0, 0xbd, 0x3b, 0x00, 0xa0, 0xc9, 0x11, 0xce, 0x86);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IUnknown.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, in Guid clsidDeviceClass, IEnumMoniker** ppEnumMoniker, uint32 dwFlags) CreateClassEnumerator;
	}


	public HRESULT CreateClassEnumerator(in Guid clsidDeviceClass, IEnumMoniker** ppEnumMoniker, uint32 dwFlags) mut => VT.[Friend]CreateClassEnumerator(&this, clsidDeviceClass, ppEnumMoniker, dwFlags);
}

[CRepr]struct IPin : IUnknown
{
	public new const Guid IID = .(0x56a86891, 0x0ad4, 0x11ce, 0xb0, 0x3a, 0x00, 0x20, 0xaf, 0x0b, 0xa7, 0x70);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IUnknown.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IPin* pReceivePin, AM_MEDIA_TYPE* pmt) Connect;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IPin* pConnector, AM_MEDIA_TYPE* pmt) ReceiveConnection;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self) Disconnect;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IPin** pPin) ConnectedTo;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, AM_MEDIA_TYPE* pmt) ConnectionMediaType;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, PIN_INFO* pInfo) QueryPinInfo;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, PIN_DIRECTION* pPinDir) QueryDirection;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, PWSTR* Id) QueryId;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, AM_MEDIA_TYPE* pmt) QueryAccept;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IEnumMediaTypes** ppEnum) EnumMediaTypes;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IPin** apPin, uint32* nPin) QueryInternalConnections;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self) EndOfStream;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self) BeginFlush;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self) EndFlush;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int64 tStart, int64 tStop, double dRate) NewSegment;
	}


	public HRESULT Connect(IPin* pReceivePin, AM_MEDIA_TYPE* pmt) mut => VT.[Friend]Connect(&this, pReceivePin, pmt);

	public HRESULT ReceiveConnection(IPin* pConnector, AM_MEDIA_TYPE* pmt) mut => VT.[Friend]ReceiveConnection(&this, pConnector, pmt);

	public HRESULT Disconnect() mut => VT.[Friend]Disconnect(&this);

	public HRESULT ConnectedTo(IPin** pPin) mut => VT.[Friend]ConnectedTo(&this, pPin);

	public HRESULT ConnectionMediaType(AM_MEDIA_TYPE* pmt) mut => VT.[Friend]ConnectionMediaType(&this, pmt);

	public HRESULT QueryPinInfo(PIN_INFO* pInfo) mut => VT.[Friend]QueryPinInfo(&this, pInfo);

	public HRESULT QueryDirection(PIN_DIRECTION* pPinDir) mut => VT.[Friend]QueryDirection(&this, pPinDir);

	public HRESULT QueryId(PWSTR* Id) mut => VT.[Friend]QueryId(&this, Id);

	public HRESULT QueryAccept(AM_MEDIA_TYPE* pmt) mut => VT.[Friend]QueryAccept(&this, pmt);

	public HRESULT EnumMediaTypes(IEnumMediaTypes** ppEnum) mut => VT.[Friend]EnumMediaTypes(&this, ppEnum);

	public HRESULT QueryInternalConnections(IPin** apPin, uint32* nPin) mut => VT.[Friend]QueryInternalConnections(&this, apPin, nPin);

	public HRESULT EndOfStream() mut => VT.[Friend]EndOfStream(&this);

	public HRESULT BeginFlush() mut => VT.[Friend]BeginFlush(&this);

	public HRESULT EndFlush() mut => VT.[Friend]EndFlush(&this);

	public HRESULT NewSegment(int64 tStart, int64 tStop, double dRate) mut => VT.[Friend]NewSegment(&this, tStart, tStop, dRate);
}

[CRepr]struct IEnumPins : IUnknown
{
	public new const Guid IID = .(0x56a86892, 0x0ad4, 0x11ce, 0xb0, 0x3a, 0x00, 0x20, 0xaf, 0x0b, 0xa7, 0x70);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IUnknown.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32 cPins, IPin** ppPins, uint32* pcFetched) Next;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32 cPins) Skip;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self) Reset;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IEnumPins** ppEnum) Clone;
	}


	public HRESULT Next(uint32 cPins, IPin** ppPins, uint32* pcFetched) mut => VT.[Friend]Next(&this, cPins, ppPins, pcFetched);

	public HRESULT Skip(uint32 cPins) mut => VT.[Friend]Skip(&this, cPins);

	public HRESULT Reset() mut => VT.[Friend]Reset(&this);

	public HRESULT Clone(IEnumPins** ppEnum) mut => VT.[Friend]Clone(&this, ppEnum);
}

[CRepr]struct IEnumMediaTypes : IUnknown
{
	public new const Guid IID = .(0x89c31040, 0x846b, 0x11ce, 0x97, 0xd3, 0x00, 0xaa, 0x00, 0x55, 0x59, 0x5a);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IUnknown.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32 cMediaTypes, AM_MEDIA_TYPE** ppMediaTypes, uint32* pcFetched) Next;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32 cMediaTypes) Skip;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self) Reset;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IEnumMediaTypes** ppEnum) Clone;
	}


	public HRESULT Next(uint32 cMediaTypes, AM_MEDIA_TYPE** ppMediaTypes, uint32* pcFetched) mut => VT.[Friend]Next(&this, cMediaTypes, ppMediaTypes, pcFetched);

	public HRESULT Skip(uint32 cMediaTypes) mut => VT.[Friend]Skip(&this, cMediaTypes);

	public HRESULT Reset() mut => VT.[Friend]Reset(&this);

	public HRESULT Clone(IEnumMediaTypes** ppEnum) mut => VT.[Friend]Clone(&this, ppEnum);
}

[CRepr]struct IFilterGraph : IUnknown
{
	public new const Guid IID = .(0x56a8689f, 0x0ad4, 0x11ce, 0xb0, 0x3a, 0x00, 0x20, 0xaf, 0x0b, 0xa7, 0x70);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IUnknown.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IBaseFilter* pFilter, PWSTR pName) AddFilter;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IBaseFilter* pFilter) RemoveFilter;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IEnumFilters** ppEnum) EnumFilters;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, PWSTR pName, IBaseFilter** ppFilter) FindFilterByName;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IPin* ppinOut, IPin* ppinIn, AM_MEDIA_TYPE* pmt) ConnectDirect;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IPin* ppin) Reconnect;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IPin* ppin) Disconnect;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self) SetDefaultSyncSource;
	}


	public HRESULT AddFilter(IBaseFilter* pFilter, PWSTR pName) mut => VT.[Friend]AddFilter(&this, pFilter, pName);

	public HRESULT RemoveFilter(IBaseFilter* pFilter) mut => VT.[Friend]RemoveFilter(&this, pFilter);

	public HRESULT EnumFilters(IEnumFilters** ppEnum) mut => VT.[Friend]EnumFilters(&this, ppEnum);

	public HRESULT FindFilterByName(PWSTR pName, IBaseFilter** ppFilter) mut => VT.[Friend]FindFilterByName(&this, pName, ppFilter);

	public HRESULT ConnectDirect(IPin* ppinOut, IPin* ppinIn, AM_MEDIA_TYPE* pmt) mut => VT.[Friend]ConnectDirect(&this, ppinOut, ppinIn, pmt);

	public HRESULT Reconnect(IPin* ppin) mut => VT.[Friend]Reconnect(&this, ppin);

	public HRESULT Disconnect(IPin* ppin) mut => VT.[Friend]Disconnect(&this, ppin);

	public HRESULT SetDefaultSyncSource() mut => VT.[Friend]SetDefaultSyncSource(&this);
}

[CRepr]struct IEnumFilters : IUnknown
{
	public new const Guid IID = .(0x56a86893, 0x0ad4, 0x11ce, 0xb0, 0x3a, 0x00, 0x20, 0xaf, 0x0b, 0xa7, 0x70);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IUnknown.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32 cFilters, IBaseFilter** ppFilter, uint32* pcFetched) Next;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32 cFilters) Skip;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self) Reset;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IEnumFilters** ppEnum) Clone;
	}


	public HRESULT Next(uint32 cFilters, IBaseFilter** ppFilter, uint32* pcFetched) mut => VT.[Friend]Next(&this, cFilters, ppFilter, pcFetched);

	public HRESULT Skip(uint32 cFilters) mut => VT.[Friend]Skip(&this, cFilters);

	public HRESULT Reset() mut => VT.[Friend]Reset(&this);

	public HRESULT Clone(IEnumFilters** ppEnum) mut => VT.[Friend]Clone(&this, ppEnum);
}

[CRepr]struct IMediaFilter : IPersist
{
	public new const Guid IID = .(0x56a86899, 0x0ad4, 0x11ce, 0xb0, 0x3a, 0x00, 0x20, 0xaf, 0x0b, 0xa7, 0x70);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IPersist.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self) Stop;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self) Pause;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int64 tStart) Run;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32 dwMilliSecsTimeout, FILTER_STATE* State) GetState;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IReferenceClock* pClock) SetSyncSource;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IReferenceClock** pClock) GetSyncSource;
	}


	public HRESULT Stop() mut => VT.[Friend]Stop(&this);

	public HRESULT Pause() mut => VT.[Friend]Pause(&this);

	public HRESULT Run(int64 tStart) mut => VT.[Friend]Run(&this, tStart);

	public HRESULT GetState(uint32 dwMilliSecsTimeout, FILTER_STATE* State) mut => VT.[Friend]GetState(&this, dwMilliSecsTimeout, State);

	public HRESULT SetSyncSource(IReferenceClock* pClock) mut => VT.[Friend]SetSyncSource(&this, pClock);

	public HRESULT GetSyncSource(IReferenceClock** pClock) mut => VT.[Friend]GetSyncSource(&this, pClock);
}

[CRepr]struct IBaseFilter : IMediaFilter
{
	public new const Guid IID = .(0x56a86895, 0x0ad4, 0x11ce, 0xb0, 0x3a, 0x00, 0x20, 0xaf, 0x0b, 0xa7, 0x70);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IMediaFilter.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IEnumPins** ppEnum) EnumPins;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, PWSTR Id, IPin** ppPin) FindPin;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, FILTER_INFO* pInfo) QueryFilterInfo;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IFilterGraph* pGraph, PWSTR pName) JoinFilterGraph;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, PWSTR* pVendorInfo) QueryVendorInfo;
	}


	public HRESULT EnumPins(IEnumPins** ppEnum) mut => VT.[Friend]EnumPins(&this, ppEnum);

	public HRESULT FindPin(PWSTR Id, IPin** ppPin) mut => VT.[Friend]FindPin(&this, Id, ppPin);

	public HRESULT QueryFilterInfo(FILTER_INFO* pInfo) mut => VT.[Friend]QueryFilterInfo(&this, pInfo);

	public HRESULT JoinFilterGraph(IFilterGraph* pGraph, PWSTR pName) mut => VT.[Friend]JoinFilterGraph(&this, pGraph, pName);

	public HRESULT QueryVendorInfo(PWSTR* pVendorInfo) mut => VT.[Friend]QueryVendorInfo(&this, pVendorInfo);
}

[CRepr]struct IMediaSample : IUnknown
{
	public new const Guid IID = .(0x56a8689a, 0x0ad4, 0x11ce, 0xb0, 0x3a, 0x00, 0x20, 0xaf, 0x0b, 0xa7, 0x70);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IUnknown.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint8** ppBuffer) GetPointer;
		protected new function [CallingConvention(.Stdcall)] int32(SelfOuter* self) GetSize;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int64* pTimeStart, int64* pTimeEnd) GetTime;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int64* pTimeStart, int64* pTimeEnd) SetTime;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self) IsSyncPoint;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BOOL bIsSyncPoint) SetSyncPoint;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self) IsPreroll;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BOOL bIsPreroll) SetPreroll;
		protected new function [CallingConvention(.Stdcall)] int32(SelfOuter* self) GetActualDataLength;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 __MIDL__IMediaSample0000) SetActualDataLength;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, AM_MEDIA_TYPE** ppMediaType) GetMediaType;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, AM_MEDIA_TYPE* pMediaType) SetMediaType;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self) IsDiscontinuity;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BOOL bDiscontinuity) SetDiscontinuity;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int64* pTimeStart, int64* pTimeEnd) GetMediaTime;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int64* pTimeStart, int64* pTimeEnd) SetMediaTime;
	}


	public HRESULT GetPointer(uint8** ppBuffer) mut => VT.[Friend]GetPointer(&this, ppBuffer);

	public int32 GetSize() mut => VT.[Friend]GetSize(&this);

	public HRESULT GetTime(int64* pTimeStart, int64* pTimeEnd) mut => VT.[Friend]GetTime(&this, pTimeStart, pTimeEnd);

	public HRESULT SetTime(int64* pTimeStart, int64* pTimeEnd) mut => VT.[Friend]SetTime(&this, pTimeStart, pTimeEnd);

	public HRESULT IsSyncPoint() mut => VT.[Friend]IsSyncPoint(&this);

	public HRESULT SetSyncPoint(BOOL bIsSyncPoint) mut => VT.[Friend]SetSyncPoint(&this, bIsSyncPoint);

	public HRESULT IsPreroll() mut => VT.[Friend]IsPreroll(&this);

	public HRESULT SetPreroll(BOOL bIsPreroll) mut => VT.[Friend]SetPreroll(&this, bIsPreroll);

	public int32 GetActualDataLength() mut => VT.[Friend]GetActualDataLength(&this);

	public HRESULT SetActualDataLength(int32 __MIDL__IMediaSample0000) mut => VT.[Friend]SetActualDataLength(&this, __MIDL__IMediaSample0000);

	public HRESULT GetMediaType(AM_MEDIA_TYPE** ppMediaType) mut => VT.[Friend]GetMediaType(&this, ppMediaType);

	public HRESULT SetMediaType(AM_MEDIA_TYPE* pMediaType) mut => VT.[Friend]SetMediaType(&this, pMediaType);

	public HRESULT IsDiscontinuity() mut => VT.[Friend]IsDiscontinuity(&this);

	public HRESULT SetDiscontinuity(BOOL bDiscontinuity) mut => VT.[Friend]SetDiscontinuity(&this, bDiscontinuity);

	public HRESULT GetMediaTime(int64* pTimeStart, int64* pTimeEnd) mut => VT.[Friend]GetMediaTime(&this, pTimeStart, pTimeEnd);

	public HRESULT SetMediaTime(int64* pTimeStart, int64* pTimeEnd) mut => VT.[Friend]SetMediaTime(&this, pTimeStart, pTimeEnd);
}

[CRepr]struct IMediaSample2 : IMediaSample
{
	public new const Guid IID = .(0x36b73884, 0xc2c8, 0x11cf, 0x8b, 0x46, 0x00, 0x80, 0x5f, 0x6c, 0xef, 0x60);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IMediaSample.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32 cbProperties, uint8* pbProperties) GetProperties;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32 cbProperties, uint8* pbProperties) SetProperties;
	}


	public HRESULT GetProperties(uint32 cbProperties, uint8* pbProperties) mut => VT.[Friend]GetProperties(&this, cbProperties, pbProperties);

	public HRESULT SetProperties(uint32 cbProperties, uint8* pbProperties) mut => VT.[Friend]SetProperties(&this, cbProperties, pbProperties);
}

[CRepr]struct IMediaSample2Config : IUnknown
{
	public new const Guid IID = .(0x68961e68, 0x832b, 0x41ea, 0xbc, 0x91, 0x63, 0x59, 0x3f, 0x3e, 0x70, 0xe3);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IUnknown.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IUnknown** ppDirect3DSurface9) GetSurface;
	}


	public HRESULT GetSurface(IUnknown** ppDirect3DSurface9) mut => VT.[Friend]GetSurface(&this, ppDirect3DSurface9);
}

[CRepr]struct IMemAllocator : IUnknown
{
	public new const Guid IID = .(0x56a8689c, 0x0ad4, 0x11ce, 0xb0, 0x3a, 0x00, 0x20, 0xaf, 0x0b, 0xa7, 0x70);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IUnknown.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, ALLOCATOR_PROPERTIES* pRequest, ALLOCATOR_PROPERTIES* pActual) SetProperties;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, ALLOCATOR_PROPERTIES* pProps) GetProperties;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self) Commit;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self) Decommit;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IMediaSample** ppBuffer, int64* pStartTime, int64* pEndTime, uint32 dwFlags) GetBuffer;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IMediaSample* pBuffer) ReleaseBuffer;
	}


	public HRESULT SetProperties(ALLOCATOR_PROPERTIES* pRequest, ALLOCATOR_PROPERTIES* pActual) mut => VT.[Friend]SetProperties(&this, pRequest, pActual);

	public HRESULT GetProperties(ALLOCATOR_PROPERTIES* pProps) mut => VT.[Friend]GetProperties(&this, pProps);

	public HRESULT Commit() mut => VT.[Friend]Commit(&this);

	public HRESULT Decommit() mut => VT.[Friend]Decommit(&this);

	public HRESULT GetBuffer(IMediaSample** ppBuffer, int64* pStartTime, int64* pEndTime, uint32 dwFlags) mut => VT.[Friend]GetBuffer(&this, ppBuffer, pStartTime, pEndTime, dwFlags);

	public HRESULT ReleaseBuffer(IMediaSample* pBuffer) mut => VT.[Friend]ReleaseBuffer(&this, pBuffer);
}

[CRepr]struct IMemAllocatorCallbackTemp : IMemAllocator
{
	public new const Guid IID = .(0x379a0cf0, 0xc1de, 0x11d2, 0xab, 0xf5, 0x00, 0xa0, 0xc9, 0x05, 0xf3, 0x75);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IMemAllocator.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IMemAllocatorNotifyCallbackTemp* pNotify) SetNotify;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* plBuffersFree) GetFreeCount;
	}


	public HRESULT SetNotify(IMemAllocatorNotifyCallbackTemp* pNotify) mut => VT.[Friend]SetNotify(&this, pNotify);

	public HRESULT GetFreeCount(int32* plBuffersFree) mut => VT.[Friend]GetFreeCount(&this, plBuffersFree);
}

[CRepr]struct IMemAllocatorNotifyCallbackTemp : IUnknown
{
	public new const Guid IID = .(0x92980b30, 0xc1de, 0x11d2, 0xab, 0xf5, 0x00, 0xa0, 0xc9, 0x05, 0xf3, 0x75);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IUnknown.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self) NotifyRelease;
	}


	public HRESULT NotifyRelease() mut => VT.[Friend]NotifyRelease(&this);
}

[CRepr]struct IMemInputPin : IUnknown
{
	public new const Guid IID = .(0x56a8689d, 0x0ad4, 0x11ce, 0xb0, 0x3a, 0x00, 0x20, 0xaf, 0x0b, 0xa7, 0x70);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IUnknown.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IMemAllocator** ppAllocator) GetAllocator;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IMemAllocator* pAllocator, BOOL bReadOnly) NotifyAllocator;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, ALLOCATOR_PROPERTIES* pProps) GetAllocatorRequirements;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IMediaSample* pSample) Receive;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IMediaSample** pSamples, int32 nSamples, int32* nSamplesProcessed) ReceiveMultiple;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self) ReceiveCanBlock;
	}


	public HRESULT GetAllocator(IMemAllocator** ppAllocator) mut => VT.[Friend]GetAllocator(&this, ppAllocator);

	public HRESULT NotifyAllocator(IMemAllocator* pAllocator, BOOL bReadOnly) mut => VT.[Friend]NotifyAllocator(&this, pAllocator, bReadOnly);

	public HRESULT GetAllocatorRequirements(ALLOCATOR_PROPERTIES* pProps) mut => VT.[Friend]GetAllocatorRequirements(&this, pProps);

	public HRESULT Receive(IMediaSample* pSample) mut => VT.[Friend]Receive(&this, pSample);

	public HRESULT ReceiveMultiple(IMediaSample** pSamples, int32 nSamples, int32* nSamplesProcessed) mut => VT.[Friend]ReceiveMultiple(&this, pSamples, nSamples, nSamplesProcessed);

	public HRESULT ReceiveCanBlock() mut => VT.[Friend]ReceiveCanBlock(&this);
}

[CRepr]struct IAMovieSetup : IUnknown
{
	public new const Guid IID = .(0xa3d8cec0, 0x7e5a, 0x11cf, 0xbb, 0xc5, 0x00, 0x80, 0x5f, 0x6c, 0xef, 0x20);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IUnknown.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self) Register;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self) Unregister;
	}


	public HRESULT Register() mut => VT.[Friend]Register(&this);

	public HRESULT Unregister() mut => VT.[Friend]Unregister(&this);
}

[CRepr]struct IMediaSeeking : IUnknown
{
	public new const Guid IID = .(0x36b73880, 0xc2c8, 0x11cf, 0x8b, 0x46, 0x00, 0x80, 0x5f, 0x6c, 0xef, 0x60);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IUnknown.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32* pCapabilities) GetCapabilities;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32* pCapabilities) CheckCapabilities;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, in Guid pFormat) IsFormatSupported;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, Guid* pFormat) QueryPreferredFormat;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, Guid* pFormat) GetTimeFormat;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, in Guid pFormat) IsUsingTimeFormat;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, in Guid pFormat) SetTimeFormat;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int64* pDuration) GetDuration;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int64* pStop) GetStopPosition;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int64* pCurrent) GetCurrentPosition;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int64* pTarget, Guid* pTargetFormat, int64 Source, Guid* pSourceFormat) ConvertTimeFormat;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int64* pCurrent, uint32 dwCurrentFlags, int64* pStop, uint32 dwStopFlags) SetPositions;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int64* pCurrent, int64* pStop) GetPositions;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int64* pEarliest, int64* pLatest) GetAvailable;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, double dRate) SetRate;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, double* pdRate) GetRate;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int64* pllPreroll) GetPreroll;
	}


	public HRESULT GetCapabilities(uint32* pCapabilities) mut => VT.[Friend]GetCapabilities(&this, pCapabilities);

	public HRESULT CheckCapabilities(uint32* pCapabilities) mut => VT.[Friend]CheckCapabilities(&this, pCapabilities);

	public HRESULT IsFormatSupported(in Guid pFormat) mut => VT.[Friend]IsFormatSupported(&this, pFormat);

	public HRESULT QueryPreferredFormat(Guid* pFormat) mut => VT.[Friend]QueryPreferredFormat(&this, pFormat);

	public HRESULT GetTimeFormat(Guid* pFormat) mut => VT.[Friend]GetTimeFormat(&this, pFormat);

	public HRESULT IsUsingTimeFormat(in Guid pFormat) mut => VT.[Friend]IsUsingTimeFormat(&this, pFormat);

	public HRESULT SetTimeFormat(in Guid pFormat) mut => VT.[Friend]SetTimeFormat(&this, pFormat);

	public HRESULT GetDuration(int64* pDuration) mut => VT.[Friend]GetDuration(&this, pDuration);

	public HRESULT GetStopPosition(int64* pStop) mut => VT.[Friend]GetStopPosition(&this, pStop);

	public HRESULT GetCurrentPosition(int64* pCurrent) mut => VT.[Friend]GetCurrentPosition(&this, pCurrent);

	public HRESULT ConvertTimeFormat(int64* pTarget, Guid* pTargetFormat, int64 Source, Guid* pSourceFormat) mut => VT.[Friend]ConvertTimeFormat(&this, pTarget, pTargetFormat, Source, pSourceFormat);

	public HRESULT SetPositions(int64* pCurrent, uint32 dwCurrentFlags, int64* pStop, uint32 dwStopFlags) mut => VT.[Friend]SetPositions(&this, pCurrent, dwCurrentFlags, pStop, dwStopFlags);

	public HRESULT GetPositions(int64* pCurrent, int64* pStop) mut => VT.[Friend]GetPositions(&this, pCurrent, pStop);

	public HRESULT GetAvailable(int64* pEarliest, int64* pLatest) mut => VT.[Friend]GetAvailable(&this, pEarliest, pLatest);

	public HRESULT SetRate(double dRate) mut => VT.[Friend]SetRate(&this, dRate);

	public HRESULT GetRate(double* pdRate) mut => VT.[Friend]GetRate(&this, pdRate);

	public HRESULT GetPreroll(int64* pllPreroll) mut => VT.[Friend]GetPreroll(&this, pllPreroll);
}

[CRepr]struct IEnumRegFilters : IUnknown
{
	public new const Guid IID = .(0x56a868a4, 0x0ad4, 0x11ce, 0xb0, 0x3a, 0x00, 0x20, 0xaf, 0x0b, 0xa7, 0x70);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IUnknown.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32 cFilters, REGFILTER** apRegFilter, uint32* pcFetched) Next;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32 cFilters) Skip;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self) Reset;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IEnumRegFilters** ppEnum) Clone;
	}


	public HRESULT Next(uint32 cFilters, REGFILTER** apRegFilter, uint32* pcFetched) mut => VT.[Friend]Next(&this, cFilters, apRegFilter, pcFetched);

	public HRESULT Skip(uint32 cFilters) mut => VT.[Friend]Skip(&this, cFilters);

	public HRESULT Reset() mut => VT.[Friend]Reset(&this);

	public HRESULT Clone(IEnumRegFilters** ppEnum) mut => VT.[Friend]Clone(&this, ppEnum);
}

[CRepr]struct IFilterMapper : IUnknown
{
	public new const Guid IID = .(0x56a868a3, 0x0ad4, 0x11ce, 0xb0, 0x3a, 0x00, 0x20, 0xaf, 0x0b, 0xa7, 0x70);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IUnknown.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, Guid clsid, PWSTR Name, uint32 dwMerit) RegisterFilter;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, Guid clsid, PWSTR Name, Guid* MRId) RegisterFilterInstance;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, Guid Filter, PWSTR Name, BOOL bRendered, BOOL bOutput, BOOL bZero, BOOL bMany, Guid ConnectsToFilter, PWSTR ConnectsToPin) RegisterPin;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, Guid clsFilter, PWSTR strName, Guid clsMajorType, Guid clsSubType) RegisterPinType;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, Guid Filter) UnregisterFilter;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, Guid MRId) UnregisterFilterInstance;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, Guid Filter, PWSTR Name) UnregisterPin;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IEnumRegFilters** ppEnum, uint32 dwMerit, BOOL bInputNeeded, Guid clsInMaj, Guid clsInSub, BOOL bRender, BOOL bOututNeeded, Guid clsOutMaj, Guid clsOutSub) EnumMatchingFilters;
	}


	public HRESULT RegisterFilter(Guid clsid, PWSTR Name, uint32 dwMerit) mut => VT.[Friend]RegisterFilter(&this, clsid, Name, dwMerit);

	public HRESULT RegisterFilterInstance(Guid clsid, PWSTR Name, Guid* MRId) mut => VT.[Friend]RegisterFilterInstance(&this, clsid, Name, MRId);

	public HRESULT RegisterPin(Guid Filter, PWSTR Name, BOOL bRendered, BOOL bOutput, BOOL bZero, BOOL bMany, Guid ConnectsToFilter, PWSTR ConnectsToPin) mut => VT.[Friend]RegisterPin(&this, Filter, Name, bRendered, bOutput, bZero, bMany, ConnectsToFilter, ConnectsToPin);

	public HRESULT RegisterPinType(Guid clsFilter, PWSTR strName, Guid clsMajorType, Guid clsSubType) mut => VT.[Friend]RegisterPinType(&this, clsFilter, strName, clsMajorType, clsSubType);

	public HRESULT UnregisterFilter(Guid Filter) mut => VT.[Friend]UnregisterFilter(&this, Filter);

	public HRESULT UnregisterFilterInstance(Guid MRId) mut => VT.[Friend]UnregisterFilterInstance(&this, MRId);

	public HRESULT UnregisterPin(Guid Filter, PWSTR Name) mut => VT.[Friend]UnregisterPin(&this, Filter, Name);

	public HRESULT EnumMatchingFilters(IEnumRegFilters** ppEnum, uint32 dwMerit, BOOL bInputNeeded, Guid clsInMaj, Guid clsInSub, BOOL bRender, BOOL bOututNeeded, Guid clsOutMaj, Guid clsOutSub) mut => VT.[Friend]EnumMatchingFilters(&this, ppEnum, dwMerit, bInputNeeded, clsInMaj, clsInSub, bRender, bOututNeeded, clsOutMaj, clsOutSub);
}

[CRepr]struct IFilterMapper2 : IUnknown
{
	public new const Guid IID = .(0xb79bb0b0, 0x33c1, 0x11d1, 0xab, 0xe1, 0x00, 0xa0, 0xc9, 0x05, 0xf3, 0x75);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IUnknown.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, in Guid clsidCategory, uint32 dwCategoryMerit, PWSTR Description) CreateCategory;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, in Guid pclsidCategory, PWSTR szInstance, in Guid Filter) UnregisterFilter;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, in Guid clsidFilter, PWSTR Name, IMoniker** ppMoniker, in Guid pclsidCategory, PWSTR szInstance, REGFILTER2* prf2) RegisterFilter;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IEnumMoniker** ppEnum, uint32 dwFlags, BOOL bExactMatch, uint32 dwMerit, BOOL bInputNeeded, uint32 cInputTypes, Guid* pInputTypes, REGPINMEDIUM* pMedIn, Guid* pPinCategoryIn, BOOL bRender, BOOL bOutputNeeded, uint32 cOutputTypes, Guid* pOutputTypes, REGPINMEDIUM* pMedOut, Guid* pPinCategoryOut) EnumMatchingFilters;
	}


	public HRESULT CreateCategory(in Guid clsidCategory, uint32 dwCategoryMerit, PWSTR Description) mut => VT.[Friend]CreateCategory(&this, clsidCategory, dwCategoryMerit, Description);

	public HRESULT UnregisterFilter(in Guid pclsidCategory, PWSTR szInstance, in Guid Filter) mut => VT.[Friend]UnregisterFilter(&this, pclsidCategory, szInstance, Filter);

	public HRESULT RegisterFilter(in Guid clsidFilter, PWSTR Name, IMoniker** ppMoniker, in Guid pclsidCategory, PWSTR szInstance, REGFILTER2* prf2) mut => VT.[Friend]RegisterFilter(&this, clsidFilter, Name, ppMoniker, pclsidCategory, szInstance, prf2);

	public HRESULT EnumMatchingFilters(IEnumMoniker** ppEnum, uint32 dwFlags, BOOL bExactMatch, uint32 dwMerit, BOOL bInputNeeded, uint32 cInputTypes, Guid* pInputTypes, REGPINMEDIUM* pMedIn, Guid* pPinCategoryIn, BOOL bRender, BOOL bOutputNeeded, uint32 cOutputTypes, Guid* pOutputTypes, REGPINMEDIUM* pMedOut, Guid* pPinCategoryOut) mut => VT.[Friend]EnumMatchingFilters(&this, ppEnum, dwFlags, bExactMatch, dwMerit, bInputNeeded, cInputTypes, pInputTypes, pMedIn, pPinCategoryIn, bRender, bOutputNeeded, cOutputTypes, pOutputTypes, pMedOut, pPinCategoryOut);
}

[CRepr]struct IFilterMapper3 : IFilterMapper2
{
	public new const Guid IID = .(0xb79bb0b1, 0x33c1, 0x11d1, 0xab, 0xe1, 0x00, 0xa0, 0xc9, 0x05, 0xf3, 0x75);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IFilterMapper2.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, ICreateDevEnum** ppEnum) GetICreateDevEnum;
	}


	public HRESULT GetICreateDevEnum(ICreateDevEnum** ppEnum) mut => VT.[Friend]GetICreateDevEnum(&this, ppEnum);
}

[CRepr]struct IQualityControl : IUnknown
{
	public new const Guid IID = .(0x56a868a5, 0x0ad4, 0x11ce, 0xb0, 0x3a, 0x00, 0x20, 0xaf, 0x0b, 0xa7, 0x70);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IUnknown.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IBaseFilter* pSelf, Quality q) Notify;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IQualityControl* piqc) SetSink;
	}


	public HRESULT Notify(IBaseFilter* pSelf, Quality q) mut => VT.[Friend]Notify(&this, pSelf, q);

	public HRESULT SetSink(IQualityControl* piqc) mut => VT.[Friend]SetSink(&this, piqc);
}

[CRepr]struct IOverlayNotify : IUnknown
{
	public new const Guid IID = .(0x56a868a0, 0x0ad4, 0x11ce, 0xb0, 0x3a, 0x00, 0x20, 0xaf, 0x0b, 0xa7, 0x70);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IUnknown.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32 dwColors, PALETTEENTRY* pPalette) OnPaletteChange;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, RECT* pSourceRect, RECT* pDestinationRect, RGNDATA* pRgnData) OnClipChange;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, COLORKEY* pColorKey) OnColorKeyChange;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, RECT* pSourceRect, RECT* pDestinationRect) OnPositionChange;
	}


	public HRESULT OnPaletteChange(uint32 dwColors, PALETTEENTRY* pPalette) mut => VT.[Friend]OnPaletteChange(&this, dwColors, pPalette);

	public HRESULT OnClipChange(RECT* pSourceRect, RECT* pDestinationRect, RGNDATA* pRgnData) mut => VT.[Friend]OnClipChange(&this, pSourceRect, pDestinationRect, pRgnData);

	public HRESULT OnColorKeyChange(COLORKEY* pColorKey) mut => VT.[Friend]OnColorKeyChange(&this, pColorKey);

	public HRESULT OnPositionChange(RECT* pSourceRect, RECT* pDestinationRect) mut => VT.[Friend]OnPositionChange(&this, pSourceRect, pDestinationRect);
}

[CRepr]struct IOverlayNotify2 : IOverlayNotify
{
	public new const Guid IID = .(0x680efa10, 0xd535, 0x11d1, 0x87, 0xc8, 0x00, 0xa0, 0xc9, 0x22, 0x31, 0x96);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IOverlayNotify.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, HMONITOR hMonitor) OnDisplayChange;
	}


	public HRESULT OnDisplayChange(HMONITOR hMonitor) mut => VT.[Friend]OnDisplayChange(&this, hMonitor);
}

[CRepr]struct IOverlay : IUnknown
{
	public new const Guid IID = .(0x56a868a1, 0x0ad4, 0x11ce, 0xb0, 0x3a, 0x00, 0x20, 0xaf, 0x0b, 0xa7, 0x70);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IUnknown.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32* pdwColors, PALETTEENTRY** ppPalette) GetPalette;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32 dwColors, PALETTEENTRY* pPalette) SetPalette;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, COLORKEY* pColorKey) GetDefaultColorKey;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, COLORKEY* pColorKey) GetColorKey;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, COLORKEY* pColorKey) SetColorKey;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, HWND* pHwnd) GetWindowHandle;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, RECT* pSourceRect, RECT* pDestinationRect, RGNDATA** ppRgnData) GetClipList;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, RECT* pSourceRect, RECT* pDestinationRect) GetVideoPosition;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IOverlayNotify* pOverlayNotify, uint32 dwInterests) Advise;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self) Unadvise;
	}


	public HRESULT GetPalette(uint32* pdwColors, PALETTEENTRY** ppPalette) mut => VT.[Friend]GetPalette(&this, pdwColors, ppPalette);

	public HRESULT SetPalette(uint32 dwColors, PALETTEENTRY* pPalette) mut => VT.[Friend]SetPalette(&this, dwColors, pPalette);

	public HRESULT GetDefaultColorKey(COLORKEY* pColorKey) mut => VT.[Friend]GetDefaultColorKey(&this, pColorKey);

	public HRESULT GetColorKey(COLORKEY* pColorKey) mut => VT.[Friend]GetColorKey(&this, pColorKey);

	public HRESULT SetColorKey(COLORKEY* pColorKey) mut => VT.[Friend]SetColorKey(&this, pColorKey);

	public HRESULT GetWindowHandle(HWND* pHwnd) mut => VT.[Friend]GetWindowHandle(&this, pHwnd);

	public HRESULT GetClipList(RECT* pSourceRect, RECT* pDestinationRect, RGNDATA** ppRgnData) mut => VT.[Friend]GetClipList(&this, pSourceRect, pDestinationRect, ppRgnData);

	public HRESULT GetVideoPosition(RECT* pSourceRect, RECT* pDestinationRect) mut => VT.[Friend]GetVideoPosition(&this, pSourceRect, pDestinationRect);

	public HRESULT Advise(IOverlayNotify* pOverlayNotify, uint32 dwInterests) mut => VT.[Friend]Advise(&this, pOverlayNotify, dwInterests);

	public HRESULT Unadvise() mut => VT.[Friend]Unadvise(&this);
}

[CRepr]struct IMediaEventSink : IUnknown
{
	public new const Guid IID = .(0x56a868a2, 0x0ad4, 0x11ce, 0xb0, 0x3a, 0x00, 0x20, 0xaf, 0x0b, 0xa7, 0x70);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IUnknown.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 EventCode, int EventParam1, int EventParam2) Notify;
	}


	public HRESULT Notify(int32 EventCode, int EventParam1, int EventParam2) mut => VT.[Friend]Notify(&this, EventCode, EventParam1, EventParam2);
}

[CRepr]struct IFileSourceFilter : IUnknown
{
	public new const Guid IID = .(0x56a868a6, 0x0ad4, 0x11ce, 0xb0, 0x3a, 0x00, 0x20, 0xaf, 0x0b, 0xa7, 0x70);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IUnknown.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, PWSTR pszFileName, AM_MEDIA_TYPE* pmt) Load;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, PWSTR* ppszFileName, AM_MEDIA_TYPE* pmt) GetCurFile;
	}


	public HRESULT Load(PWSTR pszFileName, AM_MEDIA_TYPE* pmt) mut => VT.[Friend]Load(&this, pszFileName, pmt);

	public HRESULT GetCurFile(PWSTR* ppszFileName, AM_MEDIA_TYPE* pmt) mut => VT.[Friend]GetCurFile(&this, ppszFileName, pmt);
}

[CRepr]struct IFileSinkFilter : IUnknown
{
	public new const Guid IID = .(0xa2104830, 0x7c70, 0x11cf, 0x8b, 0xce, 0x00, 0xaa, 0x00, 0xa3, 0xf1, 0xa6);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IUnknown.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, PWSTR pszFileName, AM_MEDIA_TYPE* pmt) SetFileName;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, PWSTR* ppszFileName, AM_MEDIA_TYPE* pmt) GetCurFile;
	}


	public HRESULT SetFileName(PWSTR pszFileName, AM_MEDIA_TYPE* pmt) mut => VT.[Friend]SetFileName(&this, pszFileName, pmt);

	public HRESULT GetCurFile(PWSTR* ppszFileName, AM_MEDIA_TYPE* pmt) mut => VT.[Friend]GetCurFile(&this, ppszFileName, pmt);
}

[CRepr]struct IFileSinkFilter2 : IFileSinkFilter
{
	public new const Guid IID = .(0x00855b90, 0xce1b, 0x11d0, 0xbd, 0x4f, 0x00, 0xa0, 0xc9, 0x11, 0xce, 0x86);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IFileSinkFilter.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32 dwFlags) SetMode;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32* pdwFlags) GetMode;
	}


	public HRESULT SetMode(uint32 dwFlags) mut => VT.[Friend]SetMode(&this, dwFlags);

	public HRESULT GetMode(uint32* pdwFlags) mut => VT.[Friend]GetMode(&this, pdwFlags);
}

[CRepr]struct IGraphBuilder : IFilterGraph
{
	public new const Guid IID = .(0x56a868a9, 0x0ad4, 0x11ce, 0xb0, 0x3a, 0x00, 0x20, 0xaf, 0x0b, 0xa7, 0x70);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IFilterGraph.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IPin* ppinOut, IPin* ppinIn) Connect;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IPin* ppinOut) Render;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, PWSTR lpcwstrFile, PWSTR lpcwstrPlayList) RenderFile;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, PWSTR lpcwstrFileName, PWSTR lpcwstrFilterName, IBaseFilter** ppFilter) AddSourceFilter;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint hFile) SetLogFile;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self) Abort;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self) ShouldOperationContinue;
	}


	public HRESULT Connect(IPin* ppinOut, IPin* ppinIn) mut => VT.[Friend]Connect(&this, ppinOut, ppinIn);

	public HRESULT Render(IPin* ppinOut) mut => VT.[Friend]Render(&this, ppinOut);

	public HRESULT RenderFile(PWSTR lpcwstrFile, PWSTR lpcwstrPlayList) mut => VT.[Friend]RenderFile(&this, lpcwstrFile, lpcwstrPlayList);

	public HRESULT AddSourceFilter(PWSTR lpcwstrFileName, PWSTR lpcwstrFilterName, IBaseFilter** ppFilter) mut => VT.[Friend]AddSourceFilter(&this, lpcwstrFileName, lpcwstrFilterName, ppFilter);

	public HRESULT SetLogFile(uint hFile) mut => VT.[Friend]SetLogFile(&this, hFile);

	public HRESULT Abort() mut => VT.[Friend]Abort(&this);

	public HRESULT ShouldOperationContinue() mut => VT.[Friend]ShouldOperationContinue(&this);
}

[CRepr]struct ICaptureGraphBuilder : IUnknown
{
	public new const Guid IID = .(0xbf87b6e0, 0x8c27, 0x11d0, 0xb3, 0xf0, 0x00, 0xaa, 0x00, 0x37, 0x61, 0xc5);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IUnknown.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IGraphBuilder* pfg) SetFiltergraph;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IGraphBuilder** ppfg) GetFiltergraph;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, in Guid pType, PWSTR lpstrFile, IBaseFilter** ppf, IFileSinkFilter** ppSink) SetOutputFileName;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, Guid* pCategory, IBaseFilter* pf, in Guid riid, void** ppint) FindInterface;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, Guid* pCategory, IUnknown* pSource, IBaseFilter* pfCompressor, IBaseFilter* pfRenderer) RenderStream;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, Guid* pCategory, IBaseFilter* pFilter, int64* pstart, int64* pstop, uint16 wStartCookie, uint16 wStopCookie) ControlStream;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, PWSTR lpstr, uint64 dwlSize) AllocCapFile;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, PWSTR lpwstrOld, PWSTR lpwstrNew, int32 fAllowEscAbort, IAMCopyCaptureFileProgress* pCallback) CopyCaptureFile;
	}


	public HRESULT SetFiltergraph(IGraphBuilder* pfg) mut => VT.[Friend]SetFiltergraph(&this, pfg);

	public HRESULT GetFiltergraph(IGraphBuilder** ppfg) mut => VT.[Friend]GetFiltergraph(&this, ppfg);

	public HRESULT SetOutputFileName(in Guid pType, PWSTR lpstrFile, IBaseFilter** ppf, IFileSinkFilter** ppSink) mut => VT.[Friend]SetOutputFileName(&this, pType, lpstrFile, ppf, ppSink);

	public HRESULT FindInterface(Guid* pCategory, IBaseFilter* pf, in Guid riid, void** ppint) mut => VT.[Friend]FindInterface(&this, pCategory, pf, riid, ppint);

	public HRESULT RenderStream(Guid* pCategory, IUnknown* pSource, IBaseFilter* pfCompressor, IBaseFilter* pfRenderer) mut => VT.[Friend]RenderStream(&this, pCategory, pSource, pfCompressor, pfRenderer);

	public HRESULT ControlStream(Guid* pCategory, IBaseFilter* pFilter, int64* pstart, int64* pstop, uint16 wStartCookie, uint16 wStopCookie) mut => VT.[Friend]ControlStream(&this, pCategory, pFilter, pstart, pstop, wStartCookie, wStopCookie);

	public HRESULT AllocCapFile(PWSTR lpstr, uint64 dwlSize) mut => VT.[Friend]AllocCapFile(&this, lpstr, dwlSize);

	public HRESULT CopyCaptureFile(PWSTR lpwstrOld, PWSTR lpwstrNew, int32 fAllowEscAbort, IAMCopyCaptureFileProgress* pCallback) mut => VT.[Friend]CopyCaptureFile(&this, lpwstrOld, lpwstrNew, fAllowEscAbort, pCallback);
}

[CRepr]struct IAMCopyCaptureFileProgress : IUnknown
{
	public new const Guid IID = .(0x670d1d20, 0xa068, 0x11d0, 0xb3, 0xf0, 0x00, 0xaa, 0x00, 0x37, 0x61, 0xc5);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IUnknown.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 iProgress) Progress;
	}


	public HRESULT Progress(int32 iProgress) mut => VT.[Friend]Progress(&this, iProgress);
}

[CRepr]struct ICaptureGraphBuilder2 : IUnknown
{
	public new const Guid IID = .(0x93e5a4e0, 0x2d50, 0x11d2, 0xab, 0xfa, 0x00, 0xa0, 0xc9, 0xc6, 0xe3, 0x8d);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IUnknown.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IGraphBuilder* pfg) SetFiltergraph;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IGraphBuilder** ppfg) GetFiltergraph;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, in Guid pType, PWSTR lpstrFile, IBaseFilter** ppf, IFileSinkFilter** ppSink) SetOutputFileName;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, Guid* pCategory, Guid* pType, IBaseFilter* pf, in Guid riid, void** ppint) FindInterface;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, Guid* pCategory, in Guid pType, IUnknown* pSource, IBaseFilter* pfCompressor, IBaseFilter* pfRenderer) RenderStream;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, in Guid pCategory, in Guid pType, IBaseFilter* pFilter, int64* pstart, int64* pstop, uint16 wStartCookie, uint16 wStopCookie) ControlStream;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, PWSTR lpstr, uint64 dwlSize) AllocCapFile;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, PWSTR lpwstrOld, PWSTR lpwstrNew, int32 fAllowEscAbort, IAMCopyCaptureFileProgress* pCallback) CopyCaptureFile;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IUnknown* pSource, PIN_DIRECTION pindir, Guid* pCategory, Guid* pType, BOOL fUnconnected, int32 num, IPin** ppPin) FindPin;
	}


	public HRESULT SetFiltergraph(IGraphBuilder* pfg) mut => VT.[Friend]SetFiltergraph(&this, pfg);

	public HRESULT GetFiltergraph(IGraphBuilder** ppfg) mut => VT.[Friend]GetFiltergraph(&this, ppfg);

	public HRESULT SetOutputFileName(in Guid pType, PWSTR lpstrFile, IBaseFilter** ppf, IFileSinkFilter** ppSink) mut => VT.[Friend]SetOutputFileName(&this, pType, lpstrFile, ppf, ppSink);

	public HRESULT FindInterface(Guid* pCategory, Guid* pType, IBaseFilter* pf, in Guid riid, void** ppint) mut => VT.[Friend]FindInterface(&this, pCategory, pType, pf, riid, ppint);

	public HRESULT RenderStream(Guid* pCategory, in Guid pType, IUnknown* pSource, IBaseFilter* pfCompressor, IBaseFilter* pfRenderer) mut => VT.[Friend]RenderStream(&this, pCategory, pType, pSource, pfCompressor, pfRenderer);

	public HRESULT ControlStream(in Guid pCategory, in Guid pType, IBaseFilter* pFilter, int64* pstart, int64* pstop, uint16 wStartCookie, uint16 wStopCookie) mut => VT.[Friend]ControlStream(&this, pCategory, pType, pFilter, pstart, pstop, wStartCookie, wStopCookie);

	public HRESULT AllocCapFile(PWSTR lpstr, uint64 dwlSize) mut => VT.[Friend]AllocCapFile(&this, lpstr, dwlSize);

	public HRESULT CopyCaptureFile(PWSTR lpwstrOld, PWSTR lpwstrNew, int32 fAllowEscAbort, IAMCopyCaptureFileProgress* pCallback) mut => VT.[Friend]CopyCaptureFile(&this, lpwstrOld, lpwstrNew, fAllowEscAbort, pCallback);

	public HRESULT FindPin(IUnknown* pSource, PIN_DIRECTION pindir, Guid* pCategory, Guid* pType, BOOL fUnconnected, int32 num, IPin** ppPin) mut => VT.[Friend]FindPin(&this, pSource, pindir, pCategory, pType, fUnconnected, num, ppPin);
}

[CRepr]struct IFilterGraph2 : IGraphBuilder
{
	public new const Guid IID = .(0x36b73882, 0xc2c8, 0x11cf, 0x8b, 0x46, 0x00, 0x80, 0x5f, 0x6c, 0xef, 0x60);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IGraphBuilder.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IMoniker* pMoniker, IBindCtx* pCtx, PWSTR lpcwstrFilterName, IBaseFilter** ppFilter) AddSourceFilterForMoniker;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IPin* ppin, AM_MEDIA_TYPE* pmt) ReconnectEx;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IPin* pPinOut, uint32 dwFlags, uint32* pvContext) RenderEx;
	}


	public HRESULT AddSourceFilterForMoniker(IMoniker* pMoniker, IBindCtx* pCtx, PWSTR lpcwstrFilterName, IBaseFilter** ppFilter) mut => VT.[Friend]AddSourceFilterForMoniker(&this, pMoniker, pCtx, lpcwstrFilterName, ppFilter);

	public HRESULT ReconnectEx(IPin* ppin, AM_MEDIA_TYPE* pmt) mut => VT.[Friend]ReconnectEx(&this, ppin, pmt);

	public HRESULT RenderEx(IPin* pPinOut, uint32 dwFlags, uint32* pvContext) mut => VT.[Friend]RenderEx(&this, pPinOut, dwFlags, pvContext);
}

[CRepr]struct IFilterGraph3 : IFilterGraph2
{
	public new const Guid IID = .(0xaaf38154, 0xb80b, 0x422f, 0x91, 0xe6, 0xb6, 0x64, 0x67, 0x50, 0x9a, 0x07);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IFilterGraph2.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IReferenceClock* pClockForMostOfFilterGraph, IReferenceClock* pClockForFilter, IBaseFilter* pFilter) SetSyncSourceEx;
	}


	public HRESULT SetSyncSourceEx(IReferenceClock* pClockForMostOfFilterGraph, IReferenceClock* pClockForFilter, IBaseFilter* pFilter) mut => VT.[Friend]SetSyncSourceEx(&this, pClockForMostOfFilterGraph, pClockForFilter, pFilter);
}

[CRepr]struct IStreamBuilder : IUnknown
{
	public new const Guid IID = .(0x56a868bf, 0x0ad4, 0x11ce, 0xb0, 0x3a, 0x00, 0x20, 0xaf, 0x0b, 0xa7, 0x70);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IUnknown.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IPin* ppinOut, IGraphBuilder* pGraph) Render;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IPin* ppinOut, IGraphBuilder* pGraph) Backout;
	}


	public HRESULT Render(IPin* ppinOut, IGraphBuilder* pGraph) mut => VT.[Friend]Render(&this, ppinOut, pGraph);

	public HRESULT Backout(IPin* ppinOut, IGraphBuilder* pGraph) mut => VT.[Friend]Backout(&this, ppinOut, pGraph);
}

[CRepr]struct IAsyncReader : IUnknown
{
	public new const Guid IID = .(0x56a868aa, 0x0ad4, 0x11ce, 0xb0, 0x3a, 0x00, 0x20, 0xaf, 0x0b, 0xa7, 0x70);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IUnknown.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IMemAllocator* pPreferred, ALLOCATOR_PROPERTIES* pProps, IMemAllocator** ppActual) RequestAllocator;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IMediaSample* pSample, uint dwUser) Request;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32 dwTimeout, IMediaSample** ppSample, uint* pdwUser) WaitForNext;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IMediaSample* pSample) SyncReadAligned;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int64 llPosition, int32 lLength, uint8* pBuffer) SyncRead;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int64* pTotal, int64* pAvailable) Length;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self) BeginFlush;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self) EndFlush;
	}


	public HRESULT RequestAllocator(IMemAllocator* pPreferred, ALLOCATOR_PROPERTIES* pProps, IMemAllocator** ppActual) mut => VT.[Friend]RequestAllocator(&this, pPreferred, pProps, ppActual);

	public HRESULT Request(IMediaSample* pSample, uint dwUser) mut => VT.[Friend]Request(&this, pSample, dwUser);

	public HRESULT WaitForNext(uint32 dwTimeout, IMediaSample** ppSample, uint* pdwUser) mut => VT.[Friend]WaitForNext(&this, dwTimeout, ppSample, pdwUser);

	public HRESULT SyncReadAligned(IMediaSample* pSample) mut => VT.[Friend]SyncReadAligned(&this, pSample);

	public HRESULT SyncRead(int64 llPosition, int32 lLength, uint8* pBuffer) mut => VT.[Friend]SyncRead(&this, llPosition, lLength, pBuffer);

	public HRESULT Length(int64* pTotal, int64* pAvailable) mut => VT.[Friend]Length(&this, pTotal, pAvailable);

	public HRESULT BeginFlush() mut => VT.[Friend]BeginFlush(&this);

	public HRESULT EndFlush() mut => VT.[Friend]EndFlush(&this);
}

[CRepr]struct IGraphVersion : IUnknown
{
	public new const Guid IID = .(0x56a868ab, 0x0ad4, 0x11ce, 0xb0, 0x3a, 0x00, 0x20, 0xaf, 0x0b, 0xa7, 0x70);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IUnknown.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* pVersion) QueryVersion;
	}


	public HRESULT QueryVersion(int32* pVersion) mut => VT.[Friend]QueryVersion(&this, pVersion);
}

[CRepr]struct IResourceConsumer : IUnknown
{
	public new const Guid IID = .(0x56a868ad, 0x0ad4, 0x11ce, 0xb0, 0x3a, 0x00, 0x20, 0xaf, 0x0b, 0xa7, 0x70);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IUnknown.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 idResource) AcquireResource;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 idResource) ReleaseResource;
	}


	public HRESULT AcquireResource(int32 idResource) mut => VT.[Friend]AcquireResource(&this, idResource);

	public HRESULT ReleaseResource(int32 idResource) mut => VT.[Friend]ReleaseResource(&this, idResource);
}

[CRepr]struct IResourceManager : IUnknown
{
	public new const Guid IID = .(0x56a868ac, 0x0ad4, 0x11ce, 0xb0, 0x3a, 0x00, 0x20, 0xaf, 0x0b, 0xa7, 0x70);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IUnknown.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, PWSTR pName, int32 cResource, int32* plToken) Register;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, PWSTR pName, int32 cResource, int32* palTokens, int32* plToken) RegisterGroup;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 idResource, IUnknown* pFocusObject, IResourceConsumer* pConsumer) RequestResource;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 idResource, IResourceConsumer* pConsumer, HRESULT hr) NotifyAcquire;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 idResource, IResourceConsumer* pConsumer, BOOL bStillWant) NotifyRelease;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 idResource, IResourceConsumer* pConsumer) CancelRequest;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IUnknown* pFocusObject) SetFocus;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IUnknown* pFocusObject) ReleaseFocus;
	}


	public HRESULT Register(PWSTR pName, int32 cResource, int32* plToken) mut => VT.[Friend]Register(&this, pName, cResource, plToken);

	public HRESULT RegisterGroup(PWSTR pName, int32 cResource, int32* palTokens, int32* plToken) mut => VT.[Friend]RegisterGroup(&this, pName, cResource, palTokens, plToken);

	public HRESULT RequestResource(int32 idResource, IUnknown* pFocusObject, IResourceConsumer* pConsumer) mut => VT.[Friend]RequestResource(&this, idResource, pFocusObject, pConsumer);

	public HRESULT NotifyAcquire(int32 idResource, IResourceConsumer* pConsumer, HRESULT hr) mut => VT.[Friend]NotifyAcquire(&this, idResource, pConsumer, hr);

	public HRESULT NotifyRelease(int32 idResource, IResourceConsumer* pConsumer, BOOL bStillWant) mut => VT.[Friend]NotifyRelease(&this, idResource, pConsumer, bStillWant);

	public HRESULT CancelRequest(int32 idResource, IResourceConsumer* pConsumer) mut => VT.[Friend]CancelRequest(&this, idResource, pConsumer);

	public HRESULT SetFocus(IUnknown* pFocusObject) mut => VT.[Friend]SetFocus(&this, pFocusObject);

	public HRESULT ReleaseFocus(IUnknown* pFocusObject) mut => VT.[Friend]ReleaseFocus(&this, pFocusObject);
}

[CRepr]struct IDistributorNotify : IUnknown
{
	public new const Guid IID = .(0x56a868af, 0x0ad4, 0x11ce, 0xb0, 0x3a, 0x00, 0x20, 0xaf, 0x0b, 0xa7, 0x70);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IUnknown.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self) Stop;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self) Pause;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int64 tStart) Run;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IReferenceClock* pClock) SetSyncSource;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self) NotifyGraphChange;
	}


	public HRESULT Stop() mut => VT.[Friend]Stop(&this);

	public HRESULT Pause() mut => VT.[Friend]Pause(&this);

	public HRESULT Run(int64 tStart) mut => VT.[Friend]Run(&this, tStart);

	public HRESULT SetSyncSource(IReferenceClock* pClock) mut => VT.[Friend]SetSyncSource(&this, pClock);

	public HRESULT NotifyGraphChange() mut => VT.[Friend]NotifyGraphChange(&this);
}

[CRepr]struct IAMStreamControl : IUnknown
{
	public new const Guid IID = .(0x36b73881, 0xc2c8, 0x11cf, 0x8b, 0x46, 0x00, 0x80, 0x5f, 0x6c, 0xef, 0x60);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IUnknown.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int64* ptStart, uint32 dwCookie) StartAt;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int64* ptStop, BOOL bSendExtra, uint32 dwCookie) StopAt;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, AM_STREAM_INFO* pInfo) GetInfo;
	}


	public HRESULT StartAt(int64* ptStart, uint32 dwCookie) mut => VT.[Friend]StartAt(&this, ptStart, dwCookie);

	public HRESULT StopAt(int64* ptStop, BOOL bSendExtra, uint32 dwCookie) mut => VT.[Friend]StopAt(&this, ptStop, bSendExtra, dwCookie);

	public HRESULT GetInfo(AM_STREAM_INFO* pInfo) mut => VT.[Friend]GetInfo(&this, pInfo);
}

[CRepr]struct ISeekingPassThru : IUnknown
{
	public new const Guid IID = .(0x36b73883, 0xc2c8, 0x11cf, 0x8b, 0x46, 0x00, 0x80, 0x5f, 0x6c, 0xef, 0x60);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IUnknown.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BOOL bSupportRendering, IPin* pPin) Init;
	}


	public HRESULT Init(BOOL bSupportRendering, IPin* pPin) mut => VT.[Friend]Init(&this, bSupportRendering, pPin);
}

[CRepr]struct IAMStreamConfig : IUnknown
{
	public new const Guid IID = .(0xc6e13340, 0x30ac, 0x11d0, 0xa1, 0x8c, 0x00, 0xa0, 0xc9, 0x11, 0x89, 0x56);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IUnknown.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, AM_MEDIA_TYPE* pmt) SetFormat;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, AM_MEDIA_TYPE** ppmt) GetFormat;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* piCount, int32* piSize) GetNumberOfCapabilities;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 iIndex, AM_MEDIA_TYPE** ppmt, uint8* pSCC) GetStreamCaps;
	}


	public HRESULT SetFormat(AM_MEDIA_TYPE* pmt) mut => VT.[Friend]SetFormat(&this, pmt);

	public HRESULT GetFormat(AM_MEDIA_TYPE** ppmt) mut => VT.[Friend]GetFormat(&this, ppmt);

	public HRESULT GetNumberOfCapabilities(int32* piCount, int32* piSize) mut => VT.[Friend]GetNumberOfCapabilities(&this, piCount, piSize);

	public HRESULT GetStreamCaps(int32 iIndex, AM_MEDIA_TYPE** ppmt, uint8* pSCC) mut => VT.[Friend]GetStreamCaps(&this, iIndex, ppmt, pSCC);
}

[CRepr]struct IConfigInterleaving : IUnknown
{
	public new const Guid IID = .(0xbee3d220, 0x157b, 0x11d0, 0xbd, 0x23, 0x00, 0xa0, 0xc9, 0x11, 0xce, 0x86);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IUnknown.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, InterleavingMode mode) put_Mode;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, InterleavingMode* pMode) get_Mode;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, in int64 prtInterleave, in int64 prtPreroll) put_Interleaving;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int64* prtInterleave, int64* prtPreroll) get_Interleaving;
	}


	public HRESULT put_Mode(InterleavingMode mode) mut => VT.[Friend]put_Mode(&this, mode);

	public HRESULT get_Mode(InterleavingMode* pMode) mut => VT.[Friend]get_Mode(&this, pMode);

	public HRESULT put_Interleaving(in int64 prtInterleave, in int64 prtPreroll) mut => VT.[Friend]put_Interleaving(&this, prtInterleave, prtPreroll);

	public HRESULT get_Interleaving(int64* prtInterleave, int64* prtPreroll) mut => VT.[Friend]get_Interleaving(&this, prtInterleave, prtPreroll);
}

[CRepr]struct IConfigAviMux : IUnknown
{
	public new const Guid IID = .(0x5acd6aa0, 0xf482, 0x11ce, 0x8b, 0x67, 0x00, 0xaa, 0x00, 0xa3, 0xf1, 0xa6);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IUnknown.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 iStream) SetMasterStream;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* pStream) GetMasterStream;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BOOL fOldIndex) SetOutputCompatibilityIndex;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BOOL* pfOldIndex) GetOutputCompatibilityIndex;
	}


	public HRESULT SetMasterStream(int32 iStream) mut => VT.[Friend]SetMasterStream(&this, iStream);

	public HRESULT GetMasterStream(int32* pStream) mut => VT.[Friend]GetMasterStream(&this, pStream);

	public HRESULT SetOutputCompatibilityIndex(BOOL fOldIndex) mut => VT.[Friend]SetOutputCompatibilityIndex(&this, fOldIndex);

	public HRESULT GetOutputCompatibilityIndex(BOOL* pfOldIndex) mut => VT.[Friend]GetOutputCompatibilityIndex(&this, pfOldIndex);
}

[CRepr]struct IAMVideoCompression : IUnknown
{
	public new const Guid IID = .(0xc6e13343, 0x30ac, 0x11d0, 0xa1, 0x8c, 0x00, 0xa0, 0xc9, 0x11, 0x89, 0x56);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IUnknown.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 KeyFrameRate) put_KeyFrameRate;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* pKeyFrameRate) get_KeyFrameRate;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 PFramesPerKeyFrame) put_PFramesPerKeyFrame;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* pPFramesPerKeyFrame) get_PFramesPerKeyFrame;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, double Quality) put_Quality;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, double* pQuality) get_Quality;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint64 WindowSize) put_WindowSize;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint64* pWindowSize) get_WindowSize;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, PWSTR pszVersion, int32* pcbVersion, PWSTR pszDescription, int32* pcbDescription, int32* pDefaultKeyFrameRate, int32* pDefaultPFramesPerKey, double* pDefaultQuality, int32* pCapabilities) GetInfo;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 FrameNumber) OverrideKeyFrame;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 FrameNumber, int32 Size) OverrideFrameSize;
	}


	public HRESULT put_KeyFrameRate(int32 KeyFrameRate) mut => VT.[Friend]put_KeyFrameRate(&this, KeyFrameRate);

	public HRESULT get_KeyFrameRate(int32* pKeyFrameRate) mut => VT.[Friend]get_KeyFrameRate(&this, pKeyFrameRate);

	public HRESULT put_PFramesPerKeyFrame(int32 PFramesPerKeyFrame) mut => VT.[Friend]put_PFramesPerKeyFrame(&this, PFramesPerKeyFrame);

	public HRESULT get_PFramesPerKeyFrame(int32* pPFramesPerKeyFrame) mut => VT.[Friend]get_PFramesPerKeyFrame(&this, pPFramesPerKeyFrame);

	public HRESULT put_Quality(double Quality) mut => VT.[Friend]put_Quality(&this, Quality);

	public HRESULT get_Quality(double* pQuality) mut => VT.[Friend]get_Quality(&this, pQuality);

	public HRESULT put_WindowSize(uint64 WindowSize) mut => VT.[Friend]put_WindowSize(&this, WindowSize);

	public HRESULT get_WindowSize(uint64* pWindowSize) mut => VT.[Friend]get_WindowSize(&this, pWindowSize);

	public HRESULT GetInfo(PWSTR pszVersion, int32* pcbVersion, PWSTR pszDescription, int32* pcbDescription, int32* pDefaultKeyFrameRate, int32* pDefaultPFramesPerKey, double* pDefaultQuality, int32* pCapabilities) mut => VT.[Friend]GetInfo(&this, pszVersion, pcbVersion, pszDescription, pcbDescription, pDefaultKeyFrameRate, pDefaultPFramesPerKey, pDefaultQuality, pCapabilities);

	public HRESULT OverrideKeyFrame(int32 FrameNumber) mut => VT.[Friend]OverrideKeyFrame(&this, FrameNumber);

	public HRESULT OverrideFrameSize(int32 FrameNumber, int32 Size) mut => VT.[Friend]OverrideFrameSize(&this, FrameNumber, Size);
}

[CRepr]struct IAMVfwCaptureDialogs : IUnknown
{
	public new const Guid IID = .(0xd8d715a0, 0x6e5e, 0x11d0, 0xb3, 0xf0, 0x00, 0xaa, 0x00, 0x37, 0x61, 0xc5);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IUnknown.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 iDialog) HasDialog;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 iDialog, HWND hwnd) ShowDialog;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 iDialog, int32 uMsg, int32 dw1, int32 dw2) SendDriverMessage;
	}


	public HRESULT HasDialog(int32 iDialog) mut => VT.[Friend]HasDialog(&this, iDialog);

	public HRESULT ShowDialog(int32 iDialog, HWND hwnd) mut => VT.[Friend]ShowDialog(&this, iDialog, hwnd);

	public HRESULT SendDriverMessage(int32 iDialog, int32 uMsg, int32 dw1, int32 dw2) mut => VT.[Friend]SendDriverMessage(&this, iDialog, uMsg, dw1, dw2);
}

[CRepr]struct IAMVfwCompressDialogs : IUnknown
{
	public new const Guid IID = .(0xd8d715a3, 0x6e5e, 0x11d0, 0xb3, 0xf0, 0x00, 0xaa, 0x00, 0x37, 0x61, 0xc5);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IUnknown.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 iDialog, HWND hwnd) ShowDialog;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, void* pState, int32* pcbState) GetState;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, void* pState, int32 cbState) SetState;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 uMsg, int32 dw1, int32 dw2) SendDriverMessage;
	}


	public HRESULT ShowDialog(int32 iDialog, HWND hwnd) mut => VT.[Friend]ShowDialog(&this, iDialog, hwnd);

	public HRESULT GetState(void* pState, int32* pcbState) mut => VT.[Friend]GetState(&this, pState, pcbState);

	public HRESULT SetState(void* pState, int32 cbState) mut => VT.[Friend]SetState(&this, pState, cbState);

	public HRESULT SendDriverMessage(int32 uMsg, int32 dw1, int32 dw2) mut => VT.[Friend]SendDriverMessage(&this, uMsg, dw1, dw2);
}

[CRepr]struct IAMDroppedFrames : IUnknown
{
	public new const Guid IID = .(0xc6e13344, 0x30ac, 0x11d0, 0xa1, 0x8c, 0x00, 0xa0, 0xc9, 0x11, 0x89, 0x56);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IUnknown.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* plDropped) GetNumDropped;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* plNotDropped) GetNumNotDropped;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 lSize, int32* plArray, int32* plNumCopied) GetDroppedInfo;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* plAverageSize) GetAverageFrameSize;
	}


	public HRESULT GetNumDropped(int32* plDropped) mut => VT.[Friend]GetNumDropped(&this, plDropped);

	public HRESULT GetNumNotDropped(int32* plNotDropped) mut => VT.[Friend]GetNumNotDropped(&this, plNotDropped);

	public HRESULT GetDroppedInfo(int32 lSize, int32* plArray, int32* plNumCopied) mut => VT.[Friend]GetDroppedInfo(&this, lSize, plArray, plNumCopied);

	public HRESULT GetAverageFrameSize(int32* plAverageSize) mut => VT.[Friend]GetAverageFrameSize(&this, plAverageSize);
}

[CRepr]struct IAMAudioInputMixer : IUnknown
{
	public new const Guid IID = .(0x54c39221, 0x8380, 0x11d0, 0xb3, 0xf0, 0x00, 0xaa, 0x00, 0x37, 0x61, 0xc5);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IUnknown.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BOOL fEnable) put_Enable;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BOOL* pfEnable) get_Enable;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BOOL fMono) put_Mono;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BOOL* pfMono) get_Mono;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, double Level) put_MixLevel;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, double* pLevel) get_MixLevel;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, double Pan) put_Pan;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, double* pPan) get_Pan;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BOOL fLoudness) put_Loudness;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BOOL* pfLoudness) get_Loudness;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, double Treble) put_Treble;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, double* pTreble) get_Treble;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, double* pRange) get_TrebleRange;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, double Bass) put_Bass;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, double* pBass) get_Bass;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, double* pRange) get_BassRange;
	}


	public HRESULT put_Enable(BOOL fEnable) mut => VT.[Friend]put_Enable(&this, fEnable);

	public HRESULT get_Enable(BOOL* pfEnable) mut => VT.[Friend]get_Enable(&this, pfEnable);

	public HRESULT put_Mono(BOOL fMono) mut => VT.[Friend]put_Mono(&this, fMono);

	public HRESULT get_Mono(BOOL* pfMono) mut => VT.[Friend]get_Mono(&this, pfMono);

	public HRESULT put_MixLevel(double Level) mut => VT.[Friend]put_MixLevel(&this, Level);

	public HRESULT get_MixLevel(double* pLevel) mut => VT.[Friend]get_MixLevel(&this, pLevel);

	public HRESULT put_Pan(double Pan) mut => VT.[Friend]put_Pan(&this, Pan);

	public HRESULT get_Pan(double* pPan) mut => VT.[Friend]get_Pan(&this, pPan);

	public HRESULT put_Loudness(BOOL fLoudness) mut => VT.[Friend]put_Loudness(&this, fLoudness);

	public HRESULT get_Loudness(BOOL* pfLoudness) mut => VT.[Friend]get_Loudness(&this, pfLoudness);

	public HRESULT put_Treble(double Treble) mut => VT.[Friend]put_Treble(&this, Treble);

	public HRESULT get_Treble(double* pTreble) mut => VT.[Friend]get_Treble(&this, pTreble);

	public HRESULT get_TrebleRange(double* pRange) mut => VT.[Friend]get_TrebleRange(&this, pRange);

	public HRESULT put_Bass(double Bass) mut => VT.[Friend]put_Bass(&this, Bass);

	public HRESULT get_Bass(double* pBass) mut => VT.[Friend]get_Bass(&this, pBass);

	public HRESULT get_BassRange(double* pRange) mut => VT.[Friend]get_BassRange(&this, pRange);
}

[CRepr]struct IAMBufferNegotiation : IUnknown
{
	public new const Guid IID = .(0x56ed71a0, 0xaf5f, 0x11d0, 0xb3, 0xf0, 0x00, 0xaa, 0x00, 0x37, 0x61, 0xc5);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IUnknown.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, ALLOCATOR_PROPERTIES* pprop) SuggestAllocatorProperties;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, ALLOCATOR_PROPERTIES* pprop) GetAllocatorProperties;
	}


	public HRESULT SuggestAllocatorProperties(ALLOCATOR_PROPERTIES* pprop) mut => VT.[Friend]SuggestAllocatorProperties(&this, pprop);

	public HRESULT GetAllocatorProperties(ALLOCATOR_PROPERTIES* pprop) mut => VT.[Friend]GetAllocatorProperties(&this, pprop);
}

[CRepr]struct IAMAnalogVideoDecoder : IUnknown
{
	public new const Guid IID = .(0xc6e13350, 0x30ac, 0x11d0, 0xa1, 0x8c, 0x00, 0xa0, 0xc9, 0x11, 0x89, 0x56);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IUnknown.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* lAnalogVideoStandard) get_AvailableTVFormats;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 lAnalogVideoStandard) put_TVFormat;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* plAnalogVideoStandard) get_TVFormat;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* plLocked) get_HorizontalLocked;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 lVCRHorizontalLocking) put_VCRHorizontalLocking;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* plVCRHorizontalLocking) get_VCRHorizontalLocking;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* plNumberOfLines) get_NumberOfLines;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 lOutputEnable) put_OutputEnable;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* plOutputEnable) get_OutputEnable;
	}


	public HRESULT get_AvailableTVFormats(int32* lAnalogVideoStandard) mut => VT.[Friend]get_AvailableTVFormats(&this, lAnalogVideoStandard);

	public HRESULT put_TVFormat(int32 lAnalogVideoStandard) mut => VT.[Friend]put_TVFormat(&this, lAnalogVideoStandard);

	public HRESULT get_TVFormat(int32* plAnalogVideoStandard) mut => VT.[Friend]get_TVFormat(&this, plAnalogVideoStandard);

	public HRESULT get_HorizontalLocked(int32* plLocked) mut => VT.[Friend]get_HorizontalLocked(&this, plLocked);

	public HRESULT put_VCRHorizontalLocking(int32 lVCRHorizontalLocking) mut => VT.[Friend]put_VCRHorizontalLocking(&this, lVCRHorizontalLocking);

	public HRESULT get_VCRHorizontalLocking(int32* plVCRHorizontalLocking) mut => VT.[Friend]get_VCRHorizontalLocking(&this, plVCRHorizontalLocking);

	public HRESULT get_NumberOfLines(int32* plNumberOfLines) mut => VT.[Friend]get_NumberOfLines(&this, plNumberOfLines);

	public HRESULT put_OutputEnable(int32 lOutputEnable) mut => VT.[Friend]put_OutputEnable(&this, lOutputEnable);

	public HRESULT get_OutputEnable(int32* plOutputEnable) mut => VT.[Friend]get_OutputEnable(&this, plOutputEnable);
}

[CRepr]struct IAMVideoProcAmp : IUnknown
{
	public new const Guid IID = .(0xc6e13360, 0x30ac, 0x11d0, 0xa1, 0x8c, 0x00, 0xa0, 0xc9, 0x11, 0x89, 0x56);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IUnknown.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 Property, int32* pMin, int32* pMax, int32* pSteppingDelta, int32* pDefault, int32* pCapsFlags) GetRange;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 Property, int32 lValue, int32 Flags) Set;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 Property, int32* lValue, int32* Flags) Get;
	}


	public HRESULT GetRange(int32 Property, int32* pMin, int32* pMax, int32* pSteppingDelta, int32* pDefault, int32* pCapsFlags) mut => VT.[Friend]GetRange(&this, Property, pMin, pMax, pSteppingDelta, pDefault, pCapsFlags);

	public HRESULT Set(int32 Property, int32 lValue, int32 Flags) mut => VT.[Friend]Set(&this, Property, lValue, Flags);

	public HRESULT Get(int32 Property, int32* lValue, int32* Flags) mut => VT.[Friend]Get(&this, Property, lValue, Flags);
}

[CRepr]struct IAMCameraControl : IUnknown
{
	public new const Guid IID = .(0xc6e13370, 0x30ac, 0x11d0, 0xa1, 0x8c, 0x00, 0xa0, 0xc9, 0x11, 0x89, 0x56);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IUnknown.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 Property, int32* pMin, int32* pMax, int32* pSteppingDelta, int32* pDefault, int32* pCapsFlags) GetRange;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 Property, int32 lValue, int32 Flags) Set;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 Property, int32* lValue, int32* Flags) Get;
	}


	public HRESULT GetRange(int32 Property, int32* pMin, int32* pMax, int32* pSteppingDelta, int32* pDefault, int32* pCapsFlags) mut => VT.[Friend]GetRange(&this, Property, pMin, pMax, pSteppingDelta, pDefault, pCapsFlags);

	public HRESULT Set(int32 Property, int32 lValue, int32 Flags) mut => VT.[Friend]Set(&this, Property, lValue, Flags);

	public HRESULT Get(int32 Property, int32* lValue, int32* Flags) mut => VT.[Friend]Get(&this, Property, lValue, Flags);
}

[CRepr]struct IAMVideoControl : IUnknown
{
	public new const Guid IID = .(0x6a2e0670, 0x28e4, 0x11d0, 0xa1, 0x8c, 0x00, 0xa0, 0xc9, 0x11, 0x89, 0x56);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IUnknown.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IPin* pPin, int32* pCapsFlags) GetCaps;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IPin* pPin, int32 Mode) SetMode;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IPin* pPin, int32* Mode) GetMode;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IPin* pPin, int64* ActualFrameRate) GetCurrentActualFrameRate;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IPin* pPin, int32 iIndex, SIZE Dimensions, int64* MaxAvailableFrameRate) GetMaxAvailableFrameRate;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IPin* pPin, int32 iIndex, SIZE Dimensions, int32* ListSize, int64** FrameRates) GetFrameRateList;
	}


	public HRESULT GetCaps(IPin* pPin, int32* pCapsFlags) mut => VT.[Friend]GetCaps(&this, pPin, pCapsFlags);

	public HRESULT SetMode(IPin* pPin, int32 Mode) mut => VT.[Friend]SetMode(&this, pPin, Mode);

	public HRESULT GetMode(IPin* pPin, int32* Mode) mut => VT.[Friend]GetMode(&this, pPin, Mode);

	public HRESULT GetCurrentActualFrameRate(IPin* pPin, int64* ActualFrameRate) mut => VT.[Friend]GetCurrentActualFrameRate(&this, pPin, ActualFrameRate);

	public HRESULT GetMaxAvailableFrameRate(IPin* pPin, int32 iIndex, SIZE Dimensions, int64* MaxAvailableFrameRate) mut => VT.[Friend]GetMaxAvailableFrameRate(&this, pPin, iIndex, Dimensions, MaxAvailableFrameRate);

	public HRESULT GetFrameRateList(IPin* pPin, int32 iIndex, SIZE Dimensions, int32* ListSize, int64** FrameRates) mut => VT.[Friend]GetFrameRateList(&this, pPin, iIndex, Dimensions, ListSize, FrameRates);
}

[CRepr]struct IAMCrossbar : IUnknown
{
	public new const Guid IID = .(0xc6e13380, 0x30ac, 0x11d0, 0xa1, 0x8c, 0x00, 0xa0, 0xc9, 0x11, 0x89, 0x56);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IUnknown.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* OutputPinCount, int32* InputPinCount) get_PinCounts;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 OutputPinIndex, int32 InputPinIndex) CanRoute;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 OutputPinIndex, int32 InputPinIndex) Route;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 OutputPinIndex, int32* InputPinIndex) get_IsRoutedTo;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BOOL IsInputPin, int32 PinIndex, int32* PinIndexRelated, int32* PhysicalType) get_CrossbarPinInfo;
	}


	public HRESULT get_PinCounts(int32* OutputPinCount, int32* InputPinCount) mut => VT.[Friend]get_PinCounts(&this, OutputPinCount, InputPinCount);

	public HRESULT CanRoute(int32 OutputPinIndex, int32 InputPinIndex) mut => VT.[Friend]CanRoute(&this, OutputPinIndex, InputPinIndex);

	public HRESULT Route(int32 OutputPinIndex, int32 InputPinIndex) mut => VT.[Friend]Route(&this, OutputPinIndex, InputPinIndex);

	public HRESULT get_IsRoutedTo(int32 OutputPinIndex, int32* InputPinIndex) mut => VT.[Friend]get_IsRoutedTo(&this, OutputPinIndex, InputPinIndex);

	public HRESULT get_CrossbarPinInfo(BOOL IsInputPin, int32 PinIndex, int32* PinIndexRelated, int32* PhysicalType) mut => VT.[Friend]get_CrossbarPinInfo(&this, IsInputPin, PinIndex, PinIndexRelated, PhysicalType);
}

[CRepr]struct IAMTuner : IUnknown
{
	public new const Guid IID = .(0x211a8761, 0x03ac, 0x11d1, 0x8d, 0x13, 0x00, 0xaa, 0x00, 0xbd, 0x83, 0x39);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IUnknown.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 lChannel, int32 lVideoSubChannel, int32 lAudioSubChannel) put_Channel;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* plChannel, int32* plVideoSubChannel, int32* plAudioSubChannel) get_Channel;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* lChannelMin, int32* lChannelMax) ChannelMinMax;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 lCountryCode) put_CountryCode;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* plCountryCode) get_CountryCode;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 lTuningSpace) put_TuningSpace;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* plTuningSpace) get_TuningSpace;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, HANDLE hCurrentUser) Logon;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self) Logout;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* plSignalStrength) SignalPresent;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, AMTunerModeType lMode) put_Mode;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, AMTunerModeType* plMode) get_Mode;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* plModes) GetAvailableModes;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IAMTunerNotification* pNotify, int32 lEvents) RegisterNotificationCallBack;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IAMTunerNotification* pNotify) UnRegisterNotificationCallBack;
	}


	public HRESULT put_Channel(int32 lChannel, int32 lVideoSubChannel, int32 lAudioSubChannel) mut => VT.[Friend]put_Channel(&this, lChannel, lVideoSubChannel, lAudioSubChannel);

	public HRESULT get_Channel(int32* plChannel, int32* plVideoSubChannel, int32* plAudioSubChannel) mut => VT.[Friend]get_Channel(&this, plChannel, plVideoSubChannel, plAudioSubChannel);

	public HRESULT ChannelMinMax(int32* lChannelMin, int32* lChannelMax) mut => VT.[Friend]ChannelMinMax(&this, lChannelMin, lChannelMax);

	public HRESULT put_CountryCode(int32 lCountryCode) mut => VT.[Friend]put_CountryCode(&this, lCountryCode);

	public HRESULT get_CountryCode(int32* plCountryCode) mut => VT.[Friend]get_CountryCode(&this, plCountryCode);

	public HRESULT put_TuningSpace(int32 lTuningSpace) mut => VT.[Friend]put_TuningSpace(&this, lTuningSpace);

	public HRESULT get_TuningSpace(int32* plTuningSpace) mut => VT.[Friend]get_TuningSpace(&this, plTuningSpace);

	public HRESULT Logon(HANDLE hCurrentUser) mut => VT.[Friend]Logon(&this, hCurrentUser);

	public HRESULT Logout() mut => VT.[Friend]Logout(&this);

	public HRESULT SignalPresent(int32* plSignalStrength) mut => VT.[Friend]SignalPresent(&this, plSignalStrength);

	public HRESULT put_Mode(AMTunerModeType lMode) mut => VT.[Friend]put_Mode(&this, lMode);

	public HRESULT get_Mode(AMTunerModeType* plMode) mut => VT.[Friend]get_Mode(&this, plMode);

	public HRESULT GetAvailableModes(int32* plModes) mut => VT.[Friend]GetAvailableModes(&this, plModes);

	public HRESULT RegisterNotificationCallBack(IAMTunerNotification* pNotify, int32 lEvents) mut => VT.[Friend]RegisterNotificationCallBack(&this, pNotify, lEvents);

	public HRESULT UnRegisterNotificationCallBack(IAMTunerNotification* pNotify) mut => VT.[Friend]UnRegisterNotificationCallBack(&this, pNotify);
}

[CRepr]struct IAMTunerNotification : IUnknown
{
	public new const Guid IID = .(0x211a8760, 0x03ac, 0x11d1, 0x8d, 0x13, 0x00, 0xaa, 0x00, 0xbd, 0x83, 0x39);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IUnknown.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, AMTunerEventType Event) OnEvent;
	}


	public HRESULT OnEvent(AMTunerEventType Event) mut => VT.[Friend]OnEvent(&this, Event);
}

[CRepr]struct IAMTVTuner : IAMTuner
{
	public new const Guid IID = .(0x211a8766, 0x03ac, 0x11d1, 0x8d, 0x13, 0x00, 0xaa, 0x00, 0xbd, 0x83, 0x39);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IAMTuner.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* lAnalogVideoStandard) get_AvailableTVFormats;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* plAnalogVideoStandard) get_TVFormat;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 lChannel, int32* plFoundSignal) AutoTune;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self) StoreAutoTune;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* plNumInputConnections) get_NumInputConnections;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 lIndex, TunerInputType InputType) put_InputType;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 lIndex, TunerInputType* pInputType) get_InputType;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 lIndex) put_ConnectInput;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* plIndex) get_ConnectInput;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* lFreq) get_VideoFrequency;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* lFreq) get_AudioFrequency;
	}


	public HRESULT get_AvailableTVFormats(int32* lAnalogVideoStandard) mut => VT.[Friend]get_AvailableTVFormats(&this, lAnalogVideoStandard);

	public HRESULT get_TVFormat(int32* plAnalogVideoStandard) mut => VT.[Friend]get_TVFormat(&this, plAnalogVideoStandard);

	public HRESULT AutoTune(int32 lChannel, int32* plFoundSignal) mut => VT.[Friend]AutoTune(&this, lChannel, plFoundSignal);

	public HRESULT StoreAutoTune() mut => VT.[Friend]StoreAutoTune(&this);

	public HRESULT get_NumInputConnections(int32* plNumInputConnections) mut => VT.[Friend]get_NumInputConnections(&this, plNumInputConnections);

	public HRESULT put_InputType(int32 lIndex, TunerInputType InputType) mut => VT.[Friend]put_InputType(&this, lIndex, InputType);

	public HRESULT get_InputType(int32 lIndex, TunerInputType* pInputType) mut => VT.[Friend]get_InputType(&this, lIndex, pInputType);

	public HRESULT put_ConnectInput(int32 lIndex) mut => VT.[Friend]put_ConnectInput(&this, lIndex);

	public HRESULT get_ConnectInput(int32* plIndex) mut => VT.[Friend]get_ConnectInput(&this, plIndex);

	public HRESULT get_VideoFrequency(int32* lFreq) mut => VT.[Friend]get_VideoFrequency(&this, lFreq);

	public HRESULT get_AudioFrequency(int32* lFreq) mut => VT.[Friend]get_AudioFrequency(&this, lFreq);
}

[CRepr]struct IBPCSatelliteTuner : IAMTuner
{
	public new const Guid IID = .(0x211a8765, 0x03ac, 0x11d1, 0x8d, 0x13, 0x00, 0xaa, 0x00, 0xbd, 0x83, 0x39);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IAMTuner.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* plDefaultVideoType, int32* plDefaultAudioType) get_DefaultSubChannelTypes;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 lDefaultVideoType, int32 lDefaultAudioType) put_DefaultSubChannelTypes;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self) IsTapingPermitted;
	}


	public HRESULT get_DefaultSubChannelTypes(int32* plDefaultVideoType, int32* plDefaultAudioType) mut => VT.[Friend]get_DefaultSubChannelTypes(&this, plDefaultVideoType, plDefaultAudioType);

	public HRESULT put_DefaultSubChannelTypes(int32 lDefaultVideoType, int32 lDefaultAudioType) mut => VT.[Friend]put_DefaultSubChannelTypes(&this, lDefaultVideoType, lDefaultAudioType);

	public HRESULT IsTapingPermitted() mut => VT.[Friend]IsTapingPermitted(&this);
}

[CRepr]struct IAMTVAudio : IUnknown
{
	public new const Guid IID = .(0x83ec1c30, 0x23d1, 0x11d1, 0x99, 0xe6, 0x00, 0xa0, 0xc9, 0x56, 0x02, 0x66);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IUnknown.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* plModes) GetHardwareSupportedTVAudioModes;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* plModes) GetAvailableTVAudioModes;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* plMode) get_TVAudioMode;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 lMode) put_TVAudioMode;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IAMTunerNotification* pNotify, int32 lEvents) RegisterNotificationCallBack;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IAMTunerNotification* pNotify) UnRegisterNotificationCallBack;
	}


	public HRESULT GetHardwareSupportedTVAudioModes(int32* plModes) mut => VT.[Friend]GetHardwareSupportedTVAudioModes(&this, plModes);

	public HRESULT GetAvailableTVAudioModes(int32* plModes) mut => VT.[Friend]GetAvailableTVAudioModes(&this, plModes);

	public HRESULT get_TVAudioMode(int32* plMode) mut => VT.[Friend]get_TVAudioMode(&this, plMode);

	public HRESULT put_TVAudioMode(int32 lMode) mut => VT.[Friend]put_TVAudioMode(&this, lMode);

	public HRESULT RegisterNotificationCallBack(IAMTunerNotification* pNotify, int32 lEvents) mut => VT.[Friend]RegisterNotificationCallBack(&this, pNotify, lEvents);

	public HRESULT UnRegisterNotificationCallBack(IAMTunerNotification* pNotify) mut => VT.[Friend]UnRegisterNotificationCallBack(&this, pNotify);
}

[CRepr]struct IAMTVAudioNotification : IUnknown
{
	public new const Guid IID = .(0x83ec1c33, 0x23d1, 0x11d1, 0x99, 0xe6, 0x00, 0xa0, 0xc9, 0x56, 0x02, 0x66);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IUnknown.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, AMTVAudioEventType Event) OnEvent;
	}


	public HRESULT OnEvent(AMTVAudioEventType Event) mut => VT.[Friend]OnEvent(&this, Event);
}

[CRepr]struct IAMAnalogVideoEncoder : IUnknown
{
	public new const Guid IID = .(0xc6e133b0, 0x30ac, 0x11d0, 0xa1, 0x8c, 0x00, 0xa0, 0xc9, 0x11, 0x89, 0x56);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IUnknown.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* lAnalogVideoStandard) get_AvailableTVFormats;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 lAnalogVideoStandard) put_TVFormat;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* plAnalogVideoStandard) get_TVFormat;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 lVideoCopyProtection) put_CopyProtection;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* lVideoCopyProtection) get_CopyProtection;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 lCCEnable) put_CCEnable;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* lCCEnable) get_CCEnable;
	}


	public HRESULT get_AvailableTVFormats(int32* lAnalogVideoStandard) mut => VT.[Friend]get_AvailableTVFormats(&this, lAnalogVideoStandard);

	public HRESULT put_TVFormat(int32 lAnalogVideoStandard) mut => VT.[Friend]put_TVFormat(&this, lAnalogVideoStandard);

	public HRESULT get_TVFormat(int32* plAnalogVideoStandard) mut => VT.[Friend]get_TVFormat(&this, plAnalogVideoStandard);

	public HRESULT put_CopyProtection(int32 lVideoCopyProtection) mut => VT.[Friend]put_CopyProtection(&this, lVideoCopyProtection);

	public HRESULT get_CopyProtection(int32* lVideoCopyProtection) mut => VT.[Friend]get_CopyProtection(&this, lVideoCopyProtection);

	public HRESULT put_CCEnable(int32 lCCEnable) mut => VT.[Friend]put_CCEnable(&this, lCCEnable);

	public HRESULT get_CCEnable(int32* lCCEnable) mut => VT.[Friend]get_CCEnable(&this, lCCEnable);
}

[CRepr]struct IMediaPropertyBag : IPropertyBag
{
	public new const Guid IID = .(0x6025a880, 0xc0d5, 0x11d0, 0xbd, 0x4e, 0x00, 0xa0, 0xc9, 0x11, 0xce, 0x86);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IPropertyBag.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32 iProperty, VARIANT* pvarPropertyName, VARIANT* pvarPropertyValue) EnumProperty;
	}


	public HRESULT EnumProperty(uint32 iProperty, VARIANT* pvarPropertyName, VARIANT* pvarPropertyValue) mut => VT.[Friend]EnumProperty(&this, iProperty, pvarPropertyName, pvarPropertyValue);
}

[CRepr]struct IPersistMediaPropertyBag : IPersist
{
	public new const Guid IID = .(0x5738e040, 0xb67f, 0x11d0, 0xbd, 0x4d, 0x00, 0xa0, 0xc9, 0x11, 0xce, 0x86);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IPersist.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self) InitNew;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IMediaPropertyBag* pPropBag, IErrorLog* pErrorLog) Load;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IMediaPropertyBag* pPropBag, BOOL fClearDirty, BOOL fSaveAllProperties) Save;
	}


	public HRESULT InitNew() mut => VT.[Friend]InitNew(&this);

	public HRESULT Load(IMediaPropertyBag* pPropBag, IErrorLog* pErrorLog) mut => VT.[Friend]Load(&this, pPropBag, pErrorLog);

	public HRESULT Save(IMediaPropertyBag* pPropBag, BOOL fClearDirty, BOOL fSaveAllProperties) mut => VT.[Friend]Save(&this, pPropBag, fClearDirty, fSaveAllProperties);
}

[CRepr]struct IAMPhysicalPinInfo : IUnknown
{
	public new const Guid IID = .(0xf938c991, 0x3029, 0x11cf, 0x8c, 0x44, 0x00, 0xaa, 0x00, 0x6b, 0x68, 0x14);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IUnknown.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* pType, PWSTR* ppszType) GetPhysicalType;
	}


	public HRESULT GetPhysicalType(int32* pType, PWSTR* ppszType) mut => VT.[Friend]GetPhysicalType(&this, pType, ppszType);
}

[CRepr]struct IAMExtDevice : IUnknown
{
	public new const Guid IID = .(0xb5730a90, 0x1a2c, 0x11cf, 0x8c, 0x23, 0x00, 0xaa, 0x00, 0x6b, 0x68, 0x14);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IUnknown.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 Capability, int32* pValue, double* pdblValue) GetCapability;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, PWSTR* ppszData) get_ExternalDeviceID;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, PWSTR* ppszData) get_ExternalDeviceVersion;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 PowerMode) put_DevicePower;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* pPowerMode) get_DevicePower;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint hEvent, int32 Mode, int32* pStatus) Calibrate;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 DevicePort) put_DevicePort;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* pDevicePort) get_DevicePort;
	}


	public HRESULT GetCapability(int32 Capability, int32* pValue, double* pdblValue) mut => VT.[Friend]GetCapability(&this, Capability, pValue, pdblValue);

	public HRESULT get_ExternalDeviceID(PWSTR* ppszData) mut => VT.[Friend]get_ExternalDeviceID(&this, ppszData);

	public HRESULT get_ExternalDeviceVersion(PWSTR* ppszData) mut => VT.[Friend]get_ExternalDeviceVersion(&this, ppszData);

	public HRESULT put_DevicePower(int32 PowerMode) mut => VT.[Friend]put_DevicePower(&this, PowerMode);

	public HRESULT get_DevicePower(int32* pPowerMode) mut => VT.[Friend]get_DevicePower(&this, pPowerMode);

	public HRESULT Calibrate(uint hEvent, int32 Mode, int32* pStatus) mut => VT.[Friend]Calibrate(&this, hEvent, Mode, pStatus);

	public HRESULT put_DevicePort(int32 DevicePort) mut => VT.[Friend]put_DevicePort(&this, DevicePort);

	public HRESULT get_DevicePort(int32* pDevicePort) mut => VT.[Friend]get_DevicePort(&this, pDevicePort);
}

[CRepr]struct IAMExtTransport : IUnknown
{
	public new const Guid IID = .(0xa03cd5f0, 0x3045, 0x11cf, 0x8c, 0x44, 0x00, 0xaa, 0x00, 0x6b, 0x68, 0x14);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IUnknown.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 Capability, int32* pValue, double* pdblValue) GetCapability;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 State) put_MediaState;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* pState) get_MediaState;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 State) put_LocalControl;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* pState) get_LocalControl;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 StatusItem, int32* pValue) GetStatus;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 Param, int32* pValue, PWSTR* ppszData) GetTransportBasicParameters;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 Param, int32 Value, PWSTR pszData) SetTransportBasicParameters;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 Param, int32* pValue) GetTransportVideoParameters;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 Param, int32 Value) SetTransportVideoParameters;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 Param, int32* pValue) GetTransportAudioParameters;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 Param, int32 Value) SetTransportAudioParameters;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 Mode) put_Mode;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* pMode) get_Mode;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, double dblRate) put_Rate;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, double* pdblRate) get_Rate;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* pEnabled, int32* pOffset, uint* phEvent) GetChase;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 Enable, int32 Offset, uint hEvent) SetChase;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* pSpeed, int32* pDuration) GetBump;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 Speed, int32 Duration) SetBump;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* pEnabled) get_AntiClogControl;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 Enable) put_AntiClogControl;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 EditID, int32* pState) GetEditPropertySet;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* pEditID, int32 State) SetEditPropertySet;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 EditID, int32 Param, int32* pValue) GetEditProperty;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 EditID, int32 Param, int32 Value) SetEditProperty;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* pValue) get_EditStart;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 Value) put_EditStart;
	}


	public HRESULT GetCapability(int32 Capability, int32* pValue, double* pdblValue) mut => VT.[Friend]GetCapability(&this, Capability, pValue, pdblValue);

	public HRESULT put_MediaState(int32 State) mut => VT.[Friend]put_MediaState(&this, State);

	public HRESULT get_MediaState(int32* pState) mut => VT.[Friend]get_MediaState(&this, pState);

	public HRESULT put_LocalControl(int32 State) mut => VT.[Friend]put_LocalControl(&this, State);

	public HRESULT get_LocalControl(int32* pState) mut => VT.[Friend]get_LocalControl(&this, pState);

	public HRESULT GetStatus(int32 StatusItem, int32* pValue) mut => VT.[Friend]GetStatus(&this, StatusItem, pValue);

	public HRESULT GetTransportBasicParameters(int32 Param, int32* pValue, PWSTR* ppszData) mut => VT.[Friend]GetTransportBasicParameters(&this, Param, pValue, ppszData);

	public HRESULT SetTransportBasicParameters(int32 Param, int32 Value, PWSTR pszData) mut => VT.[Friend]SetTransportBasicParameters(&this, Param, Value, pszData);

	public HRESULT GetTransportVideoParameters(int32 Param, int32* pValue) mut => VT.[Friend]GetTransportVideoParameters(&this, Param, pValue);

	public HRESULT SetTransportVideoParameters(int32 Param, int32 Value) mut => VT.[Friend]SetTransportVideoParameters(&this, Param, Value);

	public HRESULT GetTransportAudioParameters(int32 Param, int32* pValue) mut => VT.[Friend]GetTransportAudioParameters(&this, Param, pValue);

	public HRESULT SetTransportAudioParameters(int32 Param, int32 Value) mut => VT.[Friend]SetTransportAudioParameters(&this, Param, Value);

	public HRESULT put_Mode(int32 Mode) mut => VT.[Friend]put_Mode(&this, Mode);

	public HRESULT get_Mode(int32* pMode) mut => VT.[Friend]get_Mode(&this, pMode);

	public HRESULT put_Rate(double dblRate) mut => VT.[Friend]put_Rate(&this, dblRate);

	public HRESULT get_Rate(double* pdblRate) mut => VT.[Friend]get_Rate(&this, pdblRate);

	public HRESULT GetChase(int32* pEnabled, int32* pOffset, uint* phEvent) mut => VT.[Friend]GetChase(&this, pEnabled, pOffset, phEvent);

	public HRESULT SetChase(int32 Enable, int32 Offset, uint hEvent) mut => VT.[Friend]SetChase(&this, Enable, Offset, hEvent);

	public HRESULT GetBump(int32* pSpeed, int32* pDuration) mut => VT.[Friend]GetBump(&this, pSpeed, pDuration);

	public HRESULT SetBump(int32 Speed, int32 Duration) mut => VT.[Friend]SetBump(&this, Speed, Duration);

	public HRESULT get_AntiClogControl(int32* pEnabled) mut => VT.[Friend]get_AntiClogControl(&this, pEnabled);

	public HRESULT put_AntiClogControl(int32 Enable) mut => VT.[Friend]put_AntiClogControl(&this, Enable);

	public HRESULT GetEditPropertySet(int32 EditID, int32* pState) mut => VT.[Friend]GetEditPropertySet(&this, EditID, pState);

	public HRESULT SetEditPropertySet(int32* pEditID, int32 State) mut => VT.[Friend]SetEditPropertySet(&this, pEditID, State);

	public HRESULT GetEditProperty(int32 EditID, int32 Param, int32* pValue) mut => VT.[Friend]GetEditProperty(&this, EditID, Param, pValue);

	public HRESULT SetEditProperty(int32 EditID, int32 Param, int32 Value) mut => VT.[Friend]SetEditProperty(&this, EditID, Param, Value);

	public HRESULT get_EditStart(int32* pValue) mut => VT.[Friend]get_EditStart(&this, pValue);

	public HRESULT put_EditStart(int32 Value) mut => VT.[Friend]put_EditStart(&this, Value);
}

[CRepr]struct IAMTimecodeReader : IUnknown
{
	public new const Guid IID = .(0x9b496ce1, 0x811b, 0x11cf, 0x8c, 0x77, 0x00, 0xaa, 0x00, 0x6b, 0x68, 0x14);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IUnknown.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 Param, int32* pValue) GetTCRMode;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 Param, int32 Value) SetTCRMode;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 Line) put_VITCLine;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* pLine) get_VITCLine;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, TIMECODE_SAMPLE* pTimecodeSample) GetTimecode;
	}


	public HRESULT GetTCRMode(int32 Param, int32* pValue) mut => VT.[Friend]GetTCRMode(&this, Param, pValue);

	public HRESULT SetTCRMode(int32 Param, int32 Value) mut => VT.[Friend]SetTCRMode(&this, Param, Value);

	public HRESULT put_VITCLine(int32 Line) mut => VT.[Friend]put_VITCLine(&this, Line);

	public HRESULT get_VITCLine(int32* pLine) mut => VT.[Friend]get_VITCLine(&this, pLine);

	public HRESULT GetTimecode(TIMECODE_SAMPLE* pTimecodeSample) mut => VT.[Friend]GetTimecode(&this, pTimecodeSample);
}

[CRepr]struct IAMTimecodeGenerator : IUnknown
{
	public new const Guid IID = .(0x9b496ce0, 0x811b, 0x11cf, 0x8c, 0x77, 0x00, 0xaa, 0x00, 0x6b, 0x68, 0x14);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IUnknown.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 Param, int32* pValue) GetTCGMode;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 Param, int32 Value) SetTCGMode;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 Line) put_VITCLine;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* pLine) get_VITCLine;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, TIMECODE_SAMPLE* pTimecodeSample) SetTimecode;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, TIMECODE_SAMPLE* pTimecodeSample) GetTimecode;
	}


	public HRESULT GetTCGMode(int32 Param, int32* pValue) mut => VT.[Friend]GetTCGMode(&this, Param, pValue);

	public HRESULT SetTCGMode(int32 Param, int32 Value) mut => VT.[Friend]SetTCGMode(&this, Param, Value);

	public HRESULT put_VITCLine(int32 Line) mut => VT.[Friend]put_VITCLine(&this, Line);

	public HRESULT get_VITCLine(int32* pLine) mut => VT.[Friend]get_VITCLine(&this, pLine);

	public HRESULT SetTimecode(TIMECODE_SAMPLE* pTimecodeSample) mut => VT.[Friend]SetTimecode(&this, pTimecodeSample);

	public HRESULT GetTimecode(TIMECODE_SAMPLE* pTimecodeSample) mut => VT.[Friend]GetTimecode(&this, pTimecodeSample);
}

[CRepr]struct IAMTimecodeDisplay : IUnknown
{
	public new const Guid IID = .(0x9b496ce2, 0x811b, 0x11cf, 0x8c, 0x77, 0x00, 0xaa, 0x00, 0x6b, 0x68, 0x14);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IUnknown.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* pState) GetTCDisplayEnable;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 State) SetTCDisplayEnable;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 Param, int32* pValue) GetTCDisplay;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 Param, int32 Value) SetTCDisplay;
	}


	public HRESULT GetTCDisplayEnable(int32* pState) mut => VT.[Friend]GetTCDisplayEnable(&this, pState);

	public HRESULT SetTCDisplayEnable(int32 State) mut => VT.[Friend]SetTCDisplayEnable(&this, State);

	public HRESULT GetTCDisplay(int32 Param, int32* pValue) mut => VT.[Friend]GetTCDisplay(&this, Param, pValue);

	public HRESULT SetTCDisplay(int32 Param, int32 Value) mut => VT.[Friend]SetTCDisplay(&this, Param, Value);
}

[CRepr]struct IAMDevMemoryAllocator : IUnknown
{
	public new const Guid IID = .(0xc6545bf0, 0xe76b, 0x11d0, 0xbd, 0x52, 0x00, 0xa0, 0xc9, 0x11, 0xce, 0x86);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IUnknown.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32* pdwcbTotalFree, uint32* pdwcbLargestFree, uint32* pdwcbTotalMemory, uint32* pdwcbMinimumChunk) GetInfo;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, in uint8 pBuffer) CheckMemory;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint8** ppBuffer, uint32* pdwcbBuffer) Alloc;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint8* pBuffer) Free;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IUnknown** ppUnkInnner, IUnknown* pUnkOuter) GetDevMemoryObject;
	}


	public HRESULT GetInfo(uint32* pdwcbTotalFree, uint32* pdwcbLargestFree, uint32* pdwcbTotalMemory, uint32* pdwcbMinimumChunk) mut => VT.[Friend]GetInfo(&this, pdwcbTotalFree, pdwcbLargestFree, pdwcbTotalMemory, pdwcbMinimumChunk);

	public HRESULT CheckMemory(in uint8 pBuffer) mut => VT.[Friend]CheckMemory(&this, pBuffer);

	public HRESULT Alloc(uint8** ppBuffer, uint32* pdwcbBuffer) mut => VT.[Friend]Alloc(&this, ppBuffer, pdwcbBuffer);

	public HRESULT Free(uint8* pBuffer) mut => VT.[Friend]Free(&this, pBuffer);

	public HRESULT GetDevMemoryObject(IUnknown** ppUnkInnner, IUnknown* pUnkOuter) mut => VT.[Friend]GetDevMemoryObject(&this, ppUnkInnner, pUnkOuter);
}

[CRepr]struct IAMDevMemoryControl : IUnknown
{
	public new const Guid IID = .(0xc6545bf1, 0xe76b, 0x11d0, 0xbd, 0x52, 0x00, 0xa0, 0xc9, 0x11, 0xce, 0x86);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IUnknown.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self) QueryWriteSync;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self) WriteSync;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32* pdwDevId) GetDevId;
	}


	public HRESULT QueryWriteSync() mut => VT.[Friend]QueryWriteSync(&this);

	public HRESULT WriteSync() mut => VT.[Friend]WriteSync(&this);

	public HRESULT GetDevId(uint32* pdwDevId) mut => VT.[Friend]GetDevId(&this, pdwDevId);
}

[CRepr]struct IAMStreamSelect : IUnknown
{
	public new const Guid IID = .(0xc1960960, 0x17f5, 0x11d1, 0xab, 0xe1, 0x00, 0xa0, 0xc9, 0x05, 0xf3, 0x75);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IUnknown.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32* pcStreams) Count;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 lIndex, AM_MEDIA_TYPE** ppmt, uint32* pdwFlags, uint32* plcid, uint32* pdwGroup, PWSTR* ppszName, IUnknown** ppObject, IUnknown** ppUnk) Info;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 lIndex, uint32 dwFlags) Enable;
	}


	public HRESULT Count(uint32* pcStreams) mut => VT.[Friend]Count(&this, pcStreams);

	public HRESULT Info(int32 lIndex, AM_MEDIA_TYPE** ppmt, uint32* pdwFlags, uint32* plcid, uint32* pdwGroup, PWSTR* ppszName, IUnknown** ppObject, IUnknown** ppUnk) mut => VT.[Friend]Info(&this, lIndex, ppmt, pdwFlags, plcid, pdwGroup, ppszName, ppObject, ppUnk);

	public HRESULT Enable(int32 lIndex, uint32 dwFlags) mut => VT.[Friend]Enable(&this, lIndex, dwFlags);
}

[CRepr]struct IAMResourceControl : IUnknown
{
	public new const Guid IID = .(0x8389d2d0, 0x77d7, 0x11d1, 0xab, 0xe6, 0x00, 0xa0, 0xc9, 0x05, 0xf3, 0x75);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IUnknown.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32 dwFlags, void* pvReserved) Reserve;
	}


	public HRESULT Reserve(uint32 dwFlags, void* pvReserved) mut => VT.[Friend]Reserve(&this, dwFlags, pvReserved);
}

[CRepr]struct IAMClockAdjust : IUnknown
{
	public new const Guid IID = .(0x4d5466b0, 0xa49c, 0x11d1, 0xab, 0xe8, 0x00, 0xa0, 0xc9, 0x05, 0xf3, 0x75);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IUnknown.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int64 rtDelta) SetClockDelta;
	}


	public HRESULT SetClockDelta(int64 rtDelta) mut => VT.[Friend]SetClockDelta(&this, rtDelta);
}

[CRepr]struct IAMFilterMiscFlags : IUnknown
{
	public new const Guid IID = .(0x2dd74950, 0xa890, 0x11d1, 0xab, 0xe8, 0x00, 0xa0, 0xc9, 0x05, 0xf3, 0x75);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IUnknown.VTable
	{
		protected new function [CallingConvention(.Stdcall)] uint32(SelfOuter* self) GetMiscFlags;
	}


	public uint32 GetMiscFlags() mut => VT.[Friend]GetMiscFlags(&this);
}

[CRepr]struct IDrawVideoImage : IUnknown
{
	public new const Guid IID = .(0x48efb120, 0xab49, 0x11d2, 0xae, 0xd2, 0x00, 0xa0, 0xc9, 0x95, 0xe8, 0xd5);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IUnknown.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self) DrawVideoImageBegin;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self) DrawVideoImageEnd;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, HDC hdc, RECT* lprcSrc, RECT* lprcDst) DrawVideoImageDraw;
	}


	public HRESULT DrawVideoImageBegin() mut => VT.[Friend]DrawVideoImageBegin(&this);

	public HRESULT DrawVideoImageEnd() mut => VT.[Friend]DrawVideoImageEnd(&this);

	public HRESULT DrawVideoImageDraw(HDC hdc, RECT* lprcSrc, RECT* lprcDst) mut => VT.[Friend]DrawVideoImageDraw(&this, hdc, lprcSrc, lprcDst);
}

[CRepr]struct IDecimateVideoImage : IUnknown
{
	public new const Guid IID = .(0x2e5ea3e0, 0xe924, 0x11d2, 0xb6, 0xda, 0x00, 0xa0, 0xc9, 0x95, 0xe8, 0xdf);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IUnknown.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 lWidth, int32 lHeight) SetDecimationImageSize;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self) ResetDecimationImageSize;
	}


	public HRESULT SetDecimationImageSize(int32 lWidth, int32 lHeight) mut => VT.[Friend]SetDecimationImageSize(&this, lWidth, lHeight);

	public HRESULT ResetDecimationImageSize() mut => VT.[Friend]ResetDecimationImageSize(&this);
}

[CRepr]struct IAMVideoDecimationProperties : IUnknown
{
	public new const Guid IID = .(0x60d32930, 0x13da, 0x11d3, 0x9e, 0xc6, 0xc4, 0xfc, 0xae, 0xf5, 0xc7, 0xbe);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IUnknown.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, DECIMATION_USAGE* lpUsage) QueryDecimationUsage;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, DECIMATION_USAGE Usage) SetDecimationUsage;
	}


	public HRESULT QueryDecimationUsage(DECIMATION_USAGE* lpUsage) mut => VT.[Friend]QueryDecimationUsage(&this, lpUsage);

	public HRESULT SetDecimationUsage(DECIMATION_USAGE Usage) mut => VT.[Friend]SetDecimationUsage(&this, Usage);
}

[CRepr]struct IVideoFrameStep : IUnknown
{
	public new const Guid IID = .(0xe46a9787, 0x2b71, 0x444d, 0xa4, 0xb5, 0x1f, 0xab, 0x7b, 0x70, 0x8d, 0x6a);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IUnknown.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32 dwFrames, IUnknown* pStepObject) Step;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 bMultiple, IUnknown* pStepObject) CanStep;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self) CancelStep;
	}


	public HRESULT Step(uint32 dwFrames, IUnknown* pStepObject) mut => VT.[Friend]Step(&this, dwFrames, pStepObject);

	public HRESULT CanStep(int32 bMultiple, IUnknown* pStepObject) mut => VT.[Friend]CanStep(&this, bMultiple, pStepObject);

	public HRESULT CancelStep() mut => VT.[Friend]CancelStep(&this);
}

[CRepr]struct IAMLatency : IUnknown
{
	public new const Guid IID = .(0x62ea93ba, 0xec62, 0x11d2, 0xb7, 0x70, 0x00, 0xc0, 0x4f, 0xb6, 0xbd, 0x3d);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IUnknown.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int64* prtLatency) GetLatency;
	}


	public HRESULT GetLatency(int64* prtLatency) mut => VT.[Friend]GetLatency(&this, prtLatency);
}

[CRepr]struct IAMPushSource : IAMLatency
{
	public new const Guid IID = .(0xf185fe76, 0xe64e, 0x11d2, 0xb7, 0x6e, 0x00, 0xc0, 0x4f, 0xb6, 0xbd, 0x3d);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IAMLatency.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32* pFlags) GetPushSourceFlags;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32 Flags) SetPushSourceFlags;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int64 rtOffset) SetStreamOffset;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int64* prtOffset) GetStreamOffset;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int64* prtMaxOffset) GetMaxStreamOffset;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int64 rtMaxOffset) SetMaxStreamOffset;
	}


	public HRESULT GetPushSourceFlags(uint32* pFlags) mut => VT.[Friend]GetPushSourceFlags(&this, pFlags);

	public HRESULT SetPushSourceFlags(uint32 Flags) mut => VT.[Friend]SetPushSourceFlags(&this, Flags);

	public HRESULT SetStreamOffset(int64 rtOffset) mut => VT.[Friend]SetStreamOffset(&this, rtOffset);

	public HRESULT GetStreamOffset(int64* prtOffset) mut => VT.[Friend]GetStreamOffset(&this, prtOffset);

	public HRESULT GetMaxStreamOffset(int64* prtMaxOffset) mut => VT.[Friend]GetMaxStreamOffset(&this, prtMaxOffset);

	public HRESULT SetMaxStreamOffset(int64 rtMaxOffset) mut => VT.[Friend]SetMaxStreamOffset(&this, rtMaxOffset);
}

[CRepr]struct IAMDeviceRemoval : IUnknown
{
	public new const Guid IID = .(0xf90a6130, 0xb658, 0x11d2, 0xae, 0x49, 0x00, 0x00, 0xf8, 0x75, 0x4b, 0x99);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IUnknown.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, Guid* pclsidInterfaceClass, PWSTR* pwszSymbolicLink) DeviceInfo;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self) Reassociate;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self) Disassociate;
	}


	public HRESULT DeviceInfo(Guid* pclsidInterfaceClass, PWSTR* pwszSymbolicLink) mut => VT.[Friend]DeviceInfo(&this, pclsidInterfaceClass, pwszSymbolicLink);

	public HRESULT Reassociate() mut => VT.[Friend]Reassociate(&this);

	public HRESULT Disassociate() mut => VT.[Friend]Disassociate(&this);
}

[CRepr]struct IDVEnc : IUnknown
{
	public new const Guid IID = .(0xd18e17a0, 0xaacb, 0x11d0, 0xaf, 0xb0, 0x00, 0xaa, 0x00, 0xb6, 0x7a, 0x42);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IUnknown.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* VideoFormat, int32* DVFormat, int32* Resolution, uint8 fDVInfo, DVINFO* sDVInfo) get_IFormatResolution;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 VideoFormat, int32 DVFormat, int32 Resolution, uint8 fDVInfo, DVINFO* sDVInfo) put_IFormatResolution;
	}


	public HRESULT get_IFormatResolution(int32* VideoFormat, int32* DVFormat, int32* Resolution, uint8 fDVInfo, DVINFO* sDVInfo) mut => VT.[Friend]get_IFormatResolution(&this, VideoFormat, DVFormat, Resolution, fDVInfo, sDVInfo);

	public HRESULT put_IFormatResolution(int32 VideoFormat, int32 DVFormat, int32 Resolution, uint8 fDVInfo, DVINFO* sDVInfo) mut => VT.[Friend]put_IFormatResolution(&this, VideoFormat, DVFormat, Resolution, fDVInfo, sDVInfo);
}

[CRepr]struct IIPDVDec : IUnknown
{
	public new const Guid IID = .(0xb8e8bd60, 0x0bfe, 0x11d0, 0xaf, 0x91, 0x00, 0xaa, 0x00, 0xb6, 0x7a, 0x42);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IUnknown.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* displayPix) get_IPDisplay;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 displayPix) put_IPDisplay;
	}


	public HRESULT get_IPDisplay(int32* displayPix) mut => VT.[Friend]get_IPDisplay(&this, displayPix);

	public HRESULT put_IPDisplay(int32 displayPix) mut => VT.[Friend]put_IPDisplay(&this, displayPix);
}

[CRepr]struct IDVRGB219 : IUnknown
{
	public new const Guid IID = .(0x58473a19, 0x2bc8, 0x4663, 0x80, 0x12, 0x25, 0xf8, 0x1b, 0xab, 0xdd, 0xd1);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IUnknown.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BOOL bState) SetRGB219;
	}


	public HRESULT SetRGB219(BOOL bState) mut => VT.[Friend]SetRGB219(&this, bState);
}

[CRepr]struct IDVSplitter : IUnknown
{
	public new const Guid IID = .(0x92a3a302, 0xda7c, 0x4a1f, 0xba, 0x7e, 0x18, 0x02, 0xbb, 0x5d, 0x2d, 0x02);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IUnknown.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 nDiscard) DiscardAlternateVideoFrames;
	}


	public HRESULT DiscardAlternateVideoFrames(int32 nDiscard) mut => VT.[Friend]DiscardAlternateVideoFrames(&this, nDiscard);
}

[CRepr]struct IAMAudioRendererStats : IUnknown
{
	public new const Guid IID = .(0x22320cb2, 0xd41a, 0x11d2, 0xbf, 0x7c, 0xd7, 0xcb, 0x9d, 0xf0, 0xbf, 0x93);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IUnknown.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32 dwParam, uint32* pdwParam1, uint32* pdwParam2) GetStatParam;
	}


	public HRESULT GetStatParam(uint32 dwParam, uint32* pdwParam1, uint32* pdwParam2) mut => VT.[Friend]GetStatParam(&this, dwParam, pdwParam1, pdwParam2);
}

[CRepr]struct IAMGraphStreams : IUnknown
{
	public new const Guid IID = .(0x632105fa, 0x072e, 0x11d3, 0x8a, 0xf9, 0x00, 0xc0, 0x4f, 0xb6, 0xbd, 0x3d);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IUnknown.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IPin* pPin, in Guid riid, void** ppvInterface, uint32 dwFlags) FindUpstreamInterface;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BOOL bUseStreamOffset) SyncUsingStreamOffset;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int64 rtMaxGraphLatency) SetMaxGraphLatency;
	}


	public HRESULT FindUpstreamInterface(IPin* pPin, in Guid riid, void** ppvInterface, uint32 dwFlags) mut => VT.[Friend]FindUpstreamInterface(&this, pPin, riid, ppvInterface, dwFlags);

	public HRESULT SyncUsingStreamOffset(BOOL bUseStreamOffset) mut => VT.[Friend]SyncUsingStreamOffset(&this, bUseStreamOffset);

	public HRESULT SetMaxGraphLatency(int64 rtMaxGraphLatency) mut => VT.[Friend]SetMaxGraphLatency(&this, rtMaxGraphLatency);
}

[CRepr]struct IAMOverlayFX : IUnknown
{
	public new const Guid IID = .(0x62fae250, 0x7e65, 0x4460, 0xbf, 0xc9, 0x63, 0x98, 0xb3, 0x22, 0x07, 0x3c);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IUnknown.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32* lpdwOverlayFXCaps) QueryOverlayFXCaps;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32 dwOverlayFX) SetOverlayFX;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32* lpdwOverlayFX) GetOverlayFX;
	}


	public HRESULT QueryOverlayFXCaps(uint32* lpdwOverlayFXCaps) mut => VT.[Friend]QueryOverlayFXCaps(&this, lpdwOverlayFXCaps);

	public HRESULT SetOverlayFX(uint32 dwOverlayFX) mut => VT.[Friend]SetOverlayFX(&this, dwOverlayFX);

	public HRESULT GetOverlayFX(uint32* lpdwOverlayFX) mut => VT.[Friend]GetOverlayFX(&this, lpdwOverlayFX);
}

[CRepr]struct IAMOpenProgress : IUnknown
{
	public new const Guid IID = .(0x8e1c39a1, 0xde53, 0x11cf, 0xaa, 0x63, 0x00, 0x80, 0xc7, 0x44, 0x52, 0x8d);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IUnknown.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int64* pllTotal, int64* pllCurrent) QueryProgress;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self) AbortOperation;
	}


	public HRESULT QueryProgress(int64* pllTotal, int64* pllCurrent) mut => VT.[Friend]QueryProgress(&this, pllTotal, pllCurrent);

	public HRESULT AbortOperation() mut => VT.[Friend]AbortOperation(&this);
}

[CRepr]struct IMpeg2Demultiplexer : IUnknown
{
	public new const Guid IID = .(0x436eee9c, 0x264f, 0x4242, 0x90, 0xe1, 0x4e, 0x33, 0x0c, 0x10, 0x75, 0x12);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IUnknown.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, AM_MEDIA_TYPE* pMediaType, PWSTR pszPinName, IPin** ppIPin) CreateOutputPin;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, PWSTR pszPinName, AM_MEDIA_TYPE* pMediaType) SetOutputPinMediaType;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, PWSTR pszPinName) DeleteOutputPin;
	}


	public HRESULT CreateOutputPin(AM_MEDIA_TYPE* pMediaType, PWSTR pszPinName, IPin** ppIPin) mut => VT.[Friend]CreateOutputPin(&this, pMediaType, pszPinName, ppIPin);

	public HRESULT SetOutputPinMediaType(PWSTR pszPinName, AM_MEDIA_TYPE* pMediaType) mut => VT.[Friend]SetOutputPinMediaType(&this, pszPinName, pMediaType);

	public HRESULT DeleteOutputPin(PWSTR pszPinName) mut => VT.[Friend]DeleteOutputPin(&this, pszPinName);
}

[CRepr]struct IEnumStreamIdMap : IUnknown
{
	public new const Guid IID = .(0x945c1566, 0x6202, 0x46fc, 0x96, 0xc7, 0xd8, 0x7f, 0x28, 0x9c, 0x65, 0x34);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IUnknown.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32 cRequest, STREAM_ID_MAP* pStreamIdMap, uint32* pcReceived) Next;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32 cRecords) Skip;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self) Reset;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IEnumStreamIdMap** ppIEnumStreamIdMap) Clone;
	}


	public HRESULT Next(uint32 cRequest, STREAM_ID_MAP* pStreamIdMap, uint32* pcReceived) mut => VT.[Friend]Next(&this, cRequest, pStreamIdMap, pcReceived);

	public HRESULT Skip(uint32 cRecords) mut => VT.[Friend]Skip(&this, cRecords);

	public HRESULT Reset() mut => VT.[Friend]Reset(&this);

	public HRESULT Clone(IEnumStreamIdMap** ppIEnumStreamIdMap) mut => VT.[Friend]Clone(&this, ppIEnumStreamIdMap);
}

[CRepr]struct IMPEG2StreamIdMap : IUnknown
{
	public new const Guid IID = .(0xd0e04c47, 0x25b8, 0x4369, 0x92, 0x5a, 0x36, 0x2a, 0x01, 0xd9, 0x54, 0x44);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IUnknown.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32 ulStreamId, uint32 MediaSampleContent, uint32 ulSubstreamFilterValue, int32 iDataOffset) MapStreamId;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32 culStreamId, uint32* pulStreamId) UnmapStreamId;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IEnumStreamIdMap** ppIEnumStreamIdMap) EnumStreamIdMap;
	}


	public HRESULT MapStreamId(uint32 ulStreamId, uint32 MediaSampleContent, uint32 ulSubstreamFilterValue, int32 iDataOffset) mut => VT.[Friend]MapStreamId(&this, ulStreamId, MediaSampleContent, ulSubstreamFilterValue, iDataOffset);

	public HRESULT UnmapStreamId(uint32 culStreamId, uint32* pulStreamId) mut => VT.[Friend]UnmapStreamId(&this, culStreamId, pulStreamId);

	public HRESULT EnumStreamIdMap(IEnumStreamIdMap** ppIEnumStreamIdMap) mut => VT.[Friend]EnumStreamIdMap(&this, ppIEnumStreamIdMap);
}

[CRepr]struct IRegisterServiceProvider : IUnknown
{
	public new const Guid IID = .(0x7b3a2f01, 0x0751, 0x48dd, 0xb5, 0x56, 0x00, 0x47, 0x85, 0x17, 0x1c, 0x54);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IUnknown.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, in Guid guidService, IUnknown* pUnkObject) RegisterService;
	}


	public HRESULT RegisterService(in Guid guidService, IUnknown* pUnkObject) mut => VT.[Friend]RegisterService(&this, guidService, pUnkObject);
}

[CRepr]struct IAMClockSlave : IUnknown
{
	public new const Guid IID = .(0x9fd52741, 0x176d, 0x4b36, 0x8f, 0x51, 0xca, 0x8f, 0x93, 0x32, 0x23, 0xbe);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IUnknown.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32 dwTolerance) SetErrorTolerance;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32* pdwTolerance) GetErrorTolerance;
	}


	public HRESULT SetErrorTolerance(uint32 dwTolerance) mut => VT.[Friend]SetErrorTolerance(&this, dwTolerance);

	public HRESULT GetErrorTolerance(uint32* pdwTolerance) mut => VT.[Friend]GetErrorTolerance(&this, pdwTolerance);
}

[CRepr]struct IAMGraphBuilderCallback : IUnknown
{
	public new const Guid IID = .(0x4995f511, 0x9ddb, 0x4f12, 0xbd, 0x3b, 0xf0, 0x46, 0x11, 0x80, 0x7b, 0x79);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IUnknown.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IMoniker* pMon) SelectedFilter;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IBaseFilter* pFil) CreatedFilter;
	}


	public HRESULT SelectedFilter(IMoniker* pMon) mut => VT.[Friend]SelectedFilter(&this, pMon);

	public HRESULT CreatedFilter(IBaseFilter* pFil) mut => VT.[Friend]CreatedFilter(&this, pFil);
}

[CRepr]struct IAMFilterGraphCallback : IUnknown
{
	public new const Guid IID = .(0x56a868fd, 0x0ad4, 0x11ce, 0xb0, 0xa3, 0x00, 0x20, 0xaf, 0x0b, 0xa7, 0x70);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IUnknown.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IPin* pPin) UnableToRender;
	}


	public HRESULT UnableToRender(IPin* pPin) mut => VT.[Friend]UnableToRender(&this, pPin);
}

[CRepr]struct IGetCapabilitiesKey : IUnknown
{
	public new const Guid IID = .(0xa8809222, 0x07bb, 0x48ea, 0x95, 0x1c, 0x33, 0x15, 0x81, 0x00, 0x62, 0x5b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IUnknown.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, HKEY* pHKey) GetCapabilitiesKey;
	}


	public HRESULT GetCapabilitiesKey(HKEY* pHKey) mut => VT.[Friend]GetCapabilitiesKey(&this, pHKey);
}

[CRepr]struct IEncoderAPI : IUnknown
{
	public new const Guid IID = .(0x70423839, 0x6acc, 0x4b23, 0xb0, 0x79, 0x21, 0xdb, 0xf0, 0x81, 0x56, 0xa5);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IUnknown.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, in Guid Api) IsSupported;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, in Guid Api) IsAvailable;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, in Guid Api, VARIANT* ValueMin, VARIANT* ValueMax, VARIANT* SteppingDelta) GetParameterRange;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, in Guid Api, VARIANT** Values, uint32* ValuesCount) GetParameterValues;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, in Guid Api, VARIANT* Value) GetDefaultValue;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, in Guid Api, VARIANT* Value) GetValue;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, in Guid Api, VARIANT* Value) SetValue;
	}


	public HRESULT IsSupported(in Guid Api) mut => VT.[Friend]IsSupported(&this, Api);

	public HRESULT IsAvailable(in Guid Api) mut => VT.[Friend]IsAvailable(&this, Api);

	public HRESULT GetParameterRange(in Guid Api, VARIANT* ValueMin, VARIANT* ValueMax, VARIANT* SteppingDelta) mut => VT.[Friend]GetParameterRange(&this, Api, ValueMin, ValueMax, SteppingDelta);

	public HRESULT GetParameterValues(in Guid Api, VARIANT** Values, uint32* ValuesCount) mut => VT.[Friend]GetParameterValues(&this, Api, Values, ValuesCount);

	public HRESULT GetDefaultValue(in Guid Api, VARIANT* Value) mut => VT.[Friend]GetDefaultValue(&this, Api, Value);

	public HRESULT GetValue(in Guid Api, VARIANT* Value) mut => VT.[Friend]GetValue(&this, Api, Value);

	public HRESULT SetValue(in Guid Api, VARIANT* Value) mut => VT.[Friend]SetValue(&this, Api, Value);
}

[CRepr]struct IVideoEncoder : IEncoderAPI
{
	public new const Guid IID = .(0x02997c3b, 0x8e1b, 0x460e, 0x92, 0x70, 0x54, 0x5e, 0x0d, 0xe9, 0x56, 0x3e);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IEncoderAPI.VTable
	{
	}

}

[CRepr]struct IAMDecoderCaps : IUnknown
{
	public new const Guid IID = .(0xc0dff467, 0xd499, 0x4986, 0x97, 0x2b, 0xe1, 0xd9, 0x09, 0x0f, 0xa9, 0x41);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IUnknown.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32 dwCapIndex, uint32* lpdwCap) GetDecoderCaps;
	}


	public HRESULT GetDecoderCaps(uint32 dwCapIndex, uint32* lpdwCap) mut => VT.[Friend]GetDecoderCaps(&this, dwCapIndex, lpdwCap);
}

[CRepr]struct IAMCertifiedOutputProtection : IUnknown
{
	public new const Guid IID = .(0x6feded3e, 0x0ff1, 0x4901, 0xa2, 0xf1, 0x43, 0xf7, 0x01, 0x2c, 0x85, 0x15);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IUnknown.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, Guid* pRandom, uint8** VarLenCertGH, uint32* pdwLengthCertGH) KeyExchange;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, AMCOPPSignature* pSig) SessionSequenceStart;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, AMCOPPCommand* cmd) ProtectionCommand;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, AMCOPPStatusInput* pStatusInput, AMCOPPStatusOutput* pStatusOutput) ProtectionStatus;
	}


	public HRESULT KeyExchange(Guid* pRandom, uint8** VarLenCertGH, uint32* pdwLengthCertGH) mut => VT.[Friend]KeyExchange(&this, pRandom, VarLenCertGH, pdwLengthCertGH);

	public HRESULT SessionSequenceStart(AMCOPPSignature* pSig) mut => VT.[Friend]SessionSequenceStart(&this, pSig);

	public HRESULT ProtectionCommand(AMCOPPCommand* cmd) mut => VT.[Friend]ProtectionCommand(&this, cmd);

	public HRESULT ProtectionStatus(AMCOPPStatusInput* pStatusInput, AMCOPPStatusOutput* pStatusOutput) mut => VT.[Friend]ProtectionStatus(&this, pStatusInput, pStatusOutput);
}

[CRepr]struct IAMAsyncReaderTimestampScaling : IUnknown
{
	public new const Guid IID = .(0xcf7b26fc, 0x9a00, 0x485b, 0x81, 0x47, 0x3e, 0x78, 0x9d, 0x5e, 0x8f, 0x67);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IUnknown.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BOOL* pfRaw) GetTimestampMode;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BOOL fRaw) SetTimestampMode;
	}


	public HRESULT GetTimestampMode(BOOL* pfRaw) mut => VT.[Friend]GetTimestampMode(&this, pfRaw);

	public HRESULT SetTimestampMode(BOOL fRaw) mut => VT.[Friend]SetTimestampMode(&this, fRaw);
}

[CRepr]struct IAMPluginControl : IUnknown
{
	public new const Guid IID = .(0x0e26a181, 0xf40c, 0x4635, 0x87, 0x86, 0x97, 0x62, 0x84, 0xb5, 0x29, 0x81);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IUnknown.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, in Guid subType, Guid* clsid) GetPreferredClsid;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32 index, Guid* subType, Guid* clsid) GetPreferredClsidByIndex;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, in Guid subType, Guid* clsid) SetPreferredClsid;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, in Guid clsid) IsDisabled;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32 index, Guid* clsid) GetDisabledByIndex;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, in Guid clsid, BOOL disabled) SetDisabled;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, PWSTR dllName) IsLegacyDisabled;
	}


	public HRESULT GetPreferredClsid(in Guid subType, Guid* clsid) mut => VT.[Friend]GetPreferredClsid(&this, subType, clsid);

	public HRESULT GetPreferredClsidByIndex(uint32 index, Guid* subType, Guid* clsid) mut => VT.[Friend]GetPreferredClsidByIndex(&this, index, subType, clsid);

	public HRESULT SetPreferredClsid(in Guid subType, Guid* clsid) mut => VT.[Friend]SetPreferredClsid(&this, subType, clsid);

	public HRESULT IsDisabled(in Guid clsid) mut => VT.[Friend]IsDisabled(&this, clsid);

	public HRESULT GetDisabledByIndex(uint32 index, Guid* clsid) mut => VT.[Friend]GetDisabledByIndex(&this, index, clsid);

	public HRESULT SetDisabled(in Guid clsid, BOOL disabled) mut => VT.[Friend]SetDisabled(&this, clsid, disabled);

	public HRESULT IsLegacyDisabled(PWSTR dllName) mut => VT.[Friend]IsLegacyDisabled(&this, dllName);
}

[CRepr]struct IPinConnection : IUnknown
{
	public new const Guid IID = .(0x4a9a62d3, 0x27d4, 0x403d, 0x91, 0xe9, 0x89, 0xf5, 0x40, 0xe5, 0x55, 0x34);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IUnknown.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, AM_MEDIA_TYPE* pmt) DynamicQueryAccept;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, HANDLE hNotifyEvent) NotifyEndOfStream;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self) IsEndPin;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self) DynamicDisconnect;
	}


	public HRESULT DynamicQueryAccept(AM_MEDIA_TYPE* pmt) mut => VT.[Friend]DynamicQueryAccept(&this, pmt);

	public HRESULT NotifyEndOfStream(HANDLE hNotifyEvent) mut => VT.[Friend]NotifyEndOfStream(&this, hNotifyEvent);

	public HRESULT IsEndPin() mut => VT.[Friend]IsEndPin(&this);

	public HRESULT DynamicDisconnect() mut => VT.[Friend]DynamicDisconnect(&this);
}

[CRepr]struct IPinFlowControl : IUnknown
{
	public new const Guid IID = .(0xc56e9858, 0xdbf3, 0x4f6b, 0x81, 0x19, 0x38, 0x4a, 0xf2, 0x06, 0x0d, 0xeb);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IUnknown.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32 dwBlockFlags, HANDLE hEvent) Block;
	}


	public HRESULT Block(uint32 dwBlockFlags, HANDLE hEvent) mut => VT.[Friend]Block(&this, dwBlockFlags, hEvent);
}

[CRepr]struct IGraphConfig : IUnknown
{
	public new const Guid IID = .(0x03a1eb8e, 0x32bf, 0x4245, 0x85, 0x02, 0x11, 0x4d, 0x08, 0xa9, 0xcb, 0x88);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IUnknown.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IPin* pOutputPin, IPin* pInputPin, AM_MEDIA_TYPE* pmtFirstConnection, IBaseFilter* pUsingFilter, HANDLE hAbortEvent, uint32 dwFlags) Reconnect;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IGraphConfigCallback* pCallback, void* pvContext, uint32 dwFlags, HANDLE hAbortEvent) Reconfigure;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IBaseFilter* pFilter) AddFilterToCache;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IEnumFilters** pEnum) EnumCacheFilter;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IBaseFilter* pFilter) RemoveFilterFromCache;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int64* prtStart) GetStartTime;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IPin* pOutputPin, IPinConnection* pConnection, HANDLE hEventAbort) PushThroughData;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IBaseFilter* pFilter, uint32 dwFlags) SetFilterFlags;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IBaseFilter* pFilter, uint32* pdwFlags) GetFilterFlags;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IBaseFilter* pFilter, uint32 Flags) RemoveFilterEx;
	}


	public HRESULT Reconnect(IPin* pOutputPin, IPin* pInputPin, AM_MEDIA_TYPE* pmtFirstConnection, IBaseFilter* pUsingFilter, HANDLE hAbortEvent, uint32 dwFlags) mut => VT.[Friend]Reconnect(&this, pOutputPin, pInputPin, pmtFirstConnection, pUsingFilter, hAbortEvent, dwFlags);

	public HRESULT Reconfigure(IGraphConfigCallback* pCallback, void* pvContext, uint32 dwFlags, HANDLE hAbortEvent) mut => VT.[Friend]Reconfigure(&this, pCallback, pvContext, dwFlags, hAbortEvent);

	public HRESULT AddFilterToCache(IBaseFilter* pFilter) mut => VT.[Friend]AddFilterToCache(&this, pFilter);

	public HRESULT EnumCacheFilter(IEnumFilters** pEnum) mut => VT.[Friend]EnumCacheFilter(&this, pEnum);

	public HRESULT RemoveFilterFromCache(IBaseFilter* pFilter) mut => VT.[Friend]RemoveFilterFromCache(&this, pFilter);

	public HRESULT GetStartTime(int64* prtStart) mut => VT.[Friend]GetStartTime(&this, prtStart);

	public HRESULT PushThroughData(IPin* pOutputPin, IPinConnection* pConnection, HANDLE hEventAbort) mut => VT.[Friend]PushThroughData(&this, pOutputPin, pConnection, hEventAbort);

	public HRESULT SetFilterFlags(IBaseFilter* pFilter, uint32 dwFlags) mut => VT.[Friend]SetFilterFlags(&this, pFilter, dwFlags);

	public HRESULT GetFilterFlags(IBaseFilter* pFilter, uint32* pdwFlags) mut => VT.[Friend]GetFilterFlags(&this, pFilter, pdwFlags);

	public HRESULT RemoveFilterEx(IBaseFilter* pFilter, uint32 Flags) mut => VT.[Friend]RemoveFilterEx(&this, pFilter, Flags);
}

[CRepr]struct IGraphConfigCallback : IUnknown
{
	public new const Guid IID = .(0xade0fd60, 0xd19d, 0x11d2, 0xab, 0xf6, 0x00, 0xa0, 0xc9, 0x05, 0xf3, 0x75);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IUnknown.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, void* pvContext, uint32 dwFlags) Reconfigure;
	}


	public HRESULT Reconfigure(void* pvContext, uint32 dwFlags) mut => VT.[Friend]Reconfigure(&this, pvContext, dwFlags);
}

[CRepr]struct IFilterChain : IUnknown
{
	public new const Guid IID = .(0xdcfbdcf6, 0x0dc2, 0x45f5, 0x9a, 0xb2, 0x7c, 0x33, 0x0e, 0xa0, 0x9c, 0x29);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IUnknown.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IBaseFilter* pStartFilter, IBaseFilter* pEndFilter) StartChain;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IBaseFilter* pStartFilter, IBaseFilter* pEndFilter) PauseChain;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IBaseFilter* pStartFilter, IBaseFilter* pEndFilter) StopChain;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IBaseFilter* pStartFilter, IBaseFilter* pEndFilter) RemoveChain;
	}


	public HRESULT StartChain(IBaseFilter* pStartFilter, IBaseFilter* pEndFilter) mut => VT.[Friend]StartChain(&this, pStartFilter, pEndFilter);

	public HRESULT PauseChain(IBaseFilter* pStartFilter, IBaseFilter* pEndFilter) mut => VT.[Friend]PauseChain(&this, pStartFilter, pEndFilter);

	public HRESULT StopChain(IBaseFilter* pStartFilter, IBaseFilter* pEndFilter) mut => VT.[Friend]StopChain(&this, pStartFilter, pEndFilter);

	public HRESULT RemoveChain(IBaseFilter* pStartFilter, IBaseFilter* pEndFilter) mut => VT.[Friend]RemoveChain(&this, pStartFilter, pEndFilter);
}

[CRepr]struct IVMRImagePresenter : IUnknown
{
	public new const Guid IID = .(0xce704fe7, 0xe71e, 0x41fb, 0xba, 0xa2, 0xc4, 0x40, 0x3e, 0x11, 0x82, 0xf5);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IUnknown.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint dwUserID) StartPresenting;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint dwUserID) StopPresenting;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint dwUserID, VMRPRESENTATIONINFO* lpPresInfo) PresentImage;
	}


	public HRESULT StartPresenting(uint dwUserID) mut => VT.[Friend]StartPresenting(&this, dwUserID);

	public HRESULT StopPresenting(uint dwUserID) mut => VT.[Friend]StopPresenting(&this, dwUserID);

	public HRESULT PresentImage(uint dwUserID, VMRPRESENTATIONINFO* lpPresInfo) mut => VT.[Friend]PresentImage(&this, dwUserID, lpPresInfo);
}

[CRepr]struct IVMRSurfaceAllocator : IUnknown
{
	public new const Guid IID = .(0x31ce832e, 0x4484, 0x458b, 0x8c, 0xca, 0xf4, 0xd7, 0xe3, 0xdb, 0x0b, 0x52);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IUnknown.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint dwUserID, VMRALLOCATIONINFO* lpAllocInfo, uint32* lpdwActualBuffers, IDirectDrawSurface7** lplpSurface) AllocateSurface;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint dwID) FreeSurface;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint dwUserID, IDirectDrawSurface7* lpSurface, uint32 dwSurfaceFlags) PrepareSurface;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IVMRSurfaceAllocatorNotify* lpIVMRSurfAllocNotify) AdviseNotify;
	}


	public HRESULT AllocateSurface(uint dwUserID, VMRALLOCATIONINFO* lpAllocInfo, uint32* lpdwActualBuffers, IDirectDrawSurface7** lplpSurface) mut => VT.[Friend]AllocateSurface(&this, dwUserID, lpAllocInfo, lpdwActualBuffers, lplpSurface);

	public HRESULT FreeSurface(uint dwID) mut => VT.[Friend]FreeSurface(&this, dwID);

	public HRESULT PrepareSurface(uint dwUserID, IDirectDrawSurface7* lpSurface, uint32 dwSurfaceFlags) mut => VT.[Friend]PrepareSurface(&this, dwUserID, lpSurface, dwSurfaceFlags);

	public HRESULT AdviseNotify(IVMRSurfaceAllocatorNotify* lpIVMRSurfAllocNotify) mut => VT.[Friend]AdviseNotify(&this, lpIVMRSurfAllocNotify);
}

[CRepr]struct IVMRSurfaceAllocatorNotify : IUnknown
{
	public new const Guid IID = .(0xaada05a8, 0x5a4e, 0x4729, 0xaf, 0x0b, 0xce, 0xa2, 0x7a, 0xed, 0x51, 0xe2);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IUnknown.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint dwUserID, IVMRSurfaceAllocator* lpIVRMSurfaceAllocator) AdviseSurfaceAllocator;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IDirectDraw7* lpDDrawDevice, HMONITOR hMonitor) SetDDrawDevice;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IDirectDraw7* lpDDrawDevice, HMONITOR hMonitor) ChangeDDrawDevice;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self) RestoreDDrawSurfaces;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 EventCode, int Param1, int Param2) NotifyEvent;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32 clrBorder) SetBorderColor;
	}


	public HRESULT AdviseSurfaceAllocator(uint dwUserID, IVMRSurfaceAllocator* lpIVRMSurfaceAllocator) mut => VT.[Friend]AdviseSurfaceAllocator(&this, dwUserID, lpIVRMSurfaceAllocator);

	public HRESULT SetDDrawDevice(IDirectDraw7* lpDDrawDevice, HMONITOR hMonitor) mut => VT.[Friend]SetDDrawDevice(&this, lpDDrawDevice, hMonitor);

	public HRESULT ChangeDDrawDevice(IDirectDraw7* lpDDrawDevice, HMONITOR hMonitor) mut => VT.[Friend]ChangeDDrawDevice(&this, lpDDrawDevice, hMonitor);

	public HRESULT RestoreDDrawSurfaces() mut => VT.[Friend]RestoreDDrawSurfaces(&this);

	public HRESULT NotifyEvent(int32 EventCode, int Param1, int Param2) mut => VT.[Friend]NotifyEvent(&this, EventCode, Param1, Param2);

	public HRESULT SetBorderColor(uint32 clrBorder) mut => VT.[Friend]SetBorderColor(&this, clrBorder);
}

[CRepr]struct IVMRWindowlessControl : IUnknown
{
	public new const Guid IID = .(0x0eb1088c, 0x4dcd, 0x46f0, 0x87, 0x8f, 0x39, 0xda, 0xe8, 0x6a, 0x51, 0xb7);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IUnknown.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* lpWidth, int32* lpHeight, int32* lpARWidth, int32* lpARHeight) GetNativeVideoSize;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* lpWidth, int32* lpHeight) GetMinIdealVideoSize;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* lpWidth, int32* lpHeight) GetMaxIdealVideoSize;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, RECT* lpSRCRect, RECT* lpDSTRect) SetVideoPosition;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, RECT* lpSRCRect, RECT* lpDSTRect) GetVideoPosition;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32* lpAspectRatioMode) GetAspectRatioMode;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32 AspectRatioMode) SetAspectRatioMode;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, HWND hwnd) SetVideoClippingWindow;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, HWND hwnd, HDC hdc) RepaintVideo;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self) DisplayModeChanged;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint8** lpDib) GetCurrentImage;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32 Clr) SetBorderColor;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32* lpClr) GetBorderColor;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32 Clr) SetColorKey;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32* lpClr) GetColorKey;
	}


	public HRESULT GetNativeVideoSize(int32* lpWidth, int32* lpHeight, int32* lpARWidth, int32* lpARHeight) mut => VT.[Friend]GetNativeVideoSize(&this, lpWidth, lpHeight, lpARWidth, lpARHeight);

	public HRESULT GetMinIdealVideoSize(int32* lpWidth, int32* lpHeight) mut => VT.[Friend]GetMinIdealVideoSize(&this, lpWidth, lpHeight);

	public HRESULT GetMaxIdealVideoSize(int32* lpWidth, int32* lpHeight) mut => VT.[Friend]GetMaxIdealVideoSize(&this, lpWidth, lpHeight);

	public HRESULT SetVideoPosition(RECT* lpSRCRect, RECT* lpDSTRect) mut => VT.[Friend]SetVideoPosition(&this, lpSRCRect, lpDSTRect);

	public HRESULT GetVideoPosition(RECT* lpSRCRect, RECT* lpDSTRect) mut => VT.[Friend]GetVideoPosition(&this, lpSRCRect, lpDSTRect);

	public HRESULT GetAspectRatioMode(uint32* lpAspectRatioMode) mut => VT.[Friend]GetAspectRatioMode(&this, lpAspectRatioMode);

	public HRESULT SetAspectRatioMode(uint32 AspectRatioMode) mut => VT.[Friend]SetAspectRatioMode(&this, AspectRatioMode);

	public HRESULT SetVideoClippingWindow(HWND hwnd) mut => VT.[Friend]SetVideoClippingWindow(&this, hwnd);

	public HRESULT RepaintVideo(HWND hwnd, HDC hdc) mut => VT.[Friend]RepaintVideo(&this, hwnd, hdc);

	public HRESULT DisplayModeChanged() mut => VT.[Friend]DisplayModeChanged(&this);

	public HRESULT GetCurrentImage(uint8** lpDib) mut => VT.[Friend]GetCurrentImage(&this, lpDib);

	public HRESULT SetBorderColor(uint32 Clr) mut => VT.[Friend]SetBorderColor(&this, Clr);

	public HRESULT GetBorderColor(uint32* lpClr) mut => VT.[Friend]GetBorderColor(&this, lpClr);

	public HRESULT SetColorKey(uint32 Clr) mut => VT.[Friend]SetColorKey(&this, Clr);

	public HRESULT GetColorKey(uint32* lpClr) mut => VT.[Friend]GetColorKey(&this, lpClr);
}

[CRepr]struct IVMRMixerControl : IUnknown
{
	public new const Guid IID = .(0x1c1a17b0, 0xbed0, 0x415d, 0x97, 0x4b, 0xdc, 0x66, 0x96, 0x13, 0x15, 0x99);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IUnknown.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32 dwStreamID, float Alpha) SetAlpha;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32 dwStreamID, float* pAlpha) GetAlpha;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32 dwStreamID, uint32 dwZ) SetZOrder;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32 dwStreamID, uint32* pZ) GetZOrder;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32 dwStreamID, NORMALIZEDRECT* pRect) SetOutputRect;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32 dwStreamID, NORMALIZEDRECT* pRect) GetOutputRect;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32 ClrBkg) SetBackgroundClr;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32* lpClrBkg) GetBackgroundClr;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32 dwMixerPrefs) SetMixingPrefs;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32* pdwMixerPrefs) GetMixingPrefs;
	}


	public HRESULT SetAlpha(uint32 dwStreamID, float Alpha) mut => VT.[Friend]SetAlpha(&this, dwStreamID, Alpha);

	public HRESULT GetAlpha(uint32 dwStreamID, float* pAlpha) mut => VT.[Friend]GetAlpha(&this, dwStreamID, pAlpha);

	public HRESULT SetZOrder(uint32 dwStreamID, uint32 dwZ) mut => VT.[Friend]SetZOrder(&this, dwStreamID, dwZ);

	public HRESULT GetZOrder(uint32 dwStreamID, uint32* pZ) mut => VT.[Friend]GetZOrder(&this, dwStreamID, pZ);

	public HRESULT SetOutputRect(uint32 dwStreamID, NORMALIZEDRECT* pRect) mut => VT.[Friend]SetOutputRect(&this, dwStreamID, pRect);

	public HRESULT GetOutputRect(uint32 dwStreamID, NORMALIZEDRECT* pRect) mut => VT.[Friend]GetOutputRect(&this, dwStreamID, pRect);

	public HRESULT SetBackgroundClr(uint32 ClrBkg) mut => VT.[Friend]SetBackgroundClr(&this, ClrBkg);

	public HRESULT GetBackgroundClr(uint32* lpClrBkg) mut => VT.[Friend]GetBackgroundClr(&this, lpClrBkg);

	public HRESULT SetMixingPrefs(uint32 dwMixerPrefs) mut => VT.[Friend]SetMixingPrefs(&this, dwMixerPrefs);

	public HRESULT GetMixingPrefs(uint32* pdwMixerPrefs) mut => VT.[Friend]GetMixingPrefs(&this, pdwMixerPrefs);
}

[CRepr]struct IVMRMonitorConfig : IUnknown
{
	public new const Guid IID = .(0x9cf0b1b6, 0xfbaa, 0x4b7f, 0x88, 0xcf, 0xcf, 0x1f, 0x13, 0x0a, 0x0d, 0xce);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IUnknown.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VMRGUID* pGUID) SetMonitor;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VMRGUID* pGUID) GetMonitor;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VMRGUID* pGUID) SetDefaultMonitor;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VMRGUID* pGUID) GetDefaultMonitor;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VMRMONITORINFO* pInfo, uint32 dwMaxInfoArraySize, uint32* pdwNumDevices) GetAvailableMonitors;
	}


	public HRESULT SetMonitor(VMRGUID* pGUID) mut => VT.[Friend]SetMonitor(&this, pGUID);

	public HRESULT GetMonitor(VMRGUID* pGUID) mut => VT.[Friend]GetMonitor(&this, pGUID);

	public HRESULT SetDefaultMonitor(VMRGUID* pGUID) mut => VT.[Friend]SetDefaultMonitor(&this, pGUID);

	public HRESULT GetDefaultMonitor(VMRGUID* pGUID) mut => VT.[Friend]GetDefaultMonitor(&this, pGUID);

	public HRESULT GetAvailableMonitors(VMRMONITORINFO* pInfo, uint32 dwMaxInfoArraySize, uint32* pdwNumDevices) mut => VT.[Friend]GetAvailableMonitors(&this, pInfo, dwMaxInfoArraySize, pdwNumDevices);
}

[CRepr]struct IVMRFilterConfig : IUnknown
{
	public new const Guid IID = .(0x9e5530c5, 0x7034, 0x48b4, 0xbb, 0x46, 0x0b, 0x8a, 0x6e, 0xfc, 0x8e, 0x36);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IUnknown.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IVMRImageCompositor* lpVMRImgCompositor) SetImageCompositor;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32 dwMaxStreams) SetNumberOfStreams;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32* pdwMaxStreams) GetNumberOfStreams;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32 dwRenderFlags) SetRenderingPrefs;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32* pdwRenderFlags) GetRenderingPrefs;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32 Mode) SetRenderingMode;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32* pMode) GetRenderingMode;
	}


	public HRESULT SetImageCompositor(IVMRImageCompositor* lpVMRImgCompositor) mut => VT.[Friend]SetImageCompositor(&this, lpVMRImgCompositor);

	public HRESULT SetNumberOfStreams(uint32 dwMaxStreams) mut => VT.[Friend]SetNumberOfStreams(&this, dwMaxStreams);

	public HRESULT GetNumberOfStreams(uint32* pdwMaxStreams) mut => VT.[Friend]GetNumberOfStreams(&this, pdwMaxStreams);

	public HRESULT SetRenderingPrefs(uint32 dwRenderFlags) mut => VT.[Friend]SetRenderingPrefs(&this, dwRenderFlags);

	public HRESULT GetRenderingPrefs(uint32* pdwRenderFlags) mut => VT.[Friend]GetRenderingPrefs(&this, pdwRenderFlags);

	public HRESULT SetRenderingMode(uint32 Mode) mut => VT.[Friend]SetRenderingMode(&this, Mode);

	public HRESULT GetRenderingMode(uint32* pMode) mut => VT.[Friend]GetRenderingMode(&this, pMode);
}

[CRepr]struct IVMRAspectRatioControl : IUnknown
{
	public new const Guid IID = .(0xede80b5c, 0xbad6, 0x4623, 0xb5, 0x37, 0x65, 0x58, 0x6c, 0x9f, 0x8d, 0xfd);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IUnknown.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32* lpdwARMode) GetAspectRatioMode;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32 dwARMode) SetAspectRatioMode;
	}


	public HRESULT GetAspectRatioMode(uint32* lpdwARMode) mut => VT.[Friend]GetAspectRatioMode(&this, lpdwARMode);

	public HRESULT SetAspectRatioMode(uint32 dwARMode) mut => VT.[Friend]SetAspectRatioMode(&this, dwARMode);
}

[CRepr]struct IVMRDeinterlaceControl : IUnknown
{
	public new const Guid IID = .(0xbb057577, 0x0db8, 0x4e6a, 0x87, 0xa7, 0x1a, 0x8c, 0x9a, 0x50, 0x5a, 0x0f);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IUnknown.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VMRVideoDesc* lpVideoDescription, uint32* lpdwNumDeinterlaceModes, Guid* lpDeinterlaceModes) GetNumberOfDeinterlaceModes;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, Guid* lpDeinterlaceMode, VMRVideoDesc* lpVideoDescription, VMRDeinterlaceCaps* lpDeinterlaceCaps) GetDeinterlaceModeCaps;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32 dwStreamID, Guid* lpDeinterlaceMode) GetDeinterlaceMode;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32 dwStreamID, Guid* lpDeinterlaceMode) SetDeinterlaceMode;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32* lpdwDeinterlacePrefs) GetDeinterlacePrefs;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32 dwDeinterlacePrefs) SetDeinterlacePrefs;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32 dwStreamID, Guid* lpDeinterlaceMode) GetActualDeinterlaceMode;
	}


	public HRESULT GetNumberOfDeinterlaceModes(VMRVideoDesc* lpVideoDescription, uint32* lpdwNumDeinterlaceModes, Guid* lpDeinterlaceModes) mut => VT.[Friend]GetNumberOfDeinterlaceModes(&this, lpVideoDescription, lpdwNumDeinterlaceModes, lpDeinterlaceModes);

	public HRESULT GetDeinterlaceModeCaps(Guid* lpDeinterlaceMode, VMRVideoDesc* lpVideoDescription, VMRDeinterlaceCaps* lpDeinterlaceCaps) mut => VT.[Friend]GetDeinterlaceModeCaps(&this, lpDeinterlaceMode, lpVideoDescription, lpDeinterlaceCaps);

	public HRESULT GetDeinterlaceMode(uint32 dwStreamID, Guid* lpDeinterlaceMode) mut => VT.[Friend]GetDeinterlaceMode(&this, dwStreamID, lpDeinterlaceMode);

	public HRESULT SetDeinterlaceMode(uint32 dwStreamID, Guid* lpDeinterlaceMode) mut => VT.[Friend]SetDeinterlaceMode(&this, dwStreamID, lpDeinterlaceMode);

	public HRESULT GetDeinterlacePrefs(uint32* lpdwDeinterlacePrefs) mut => VT.[Friend]GetDeinterlacePrefs(&this, lpdwDeinterlacePrefs);

	public HRESULT SetDeinterlacePrefs(uint32 dwDeinterlacePrefs) mut => VT.[Friend]SetDeinterlacePrefs(&this, dwDeinterlacePrefs);

	public HRESULT GetActualDeinterlaceMode(uint32 dwStreamID, Guid* lpDeinterlaceMode) mut => VT.[Friend]GetActualDeinterlaceMode(&this, dwStreamID, lpDeinterlaceMode);
}

[CRepr]struct IVMRMixerBitmap : IUnknown
{
	public new const Guid IID = .(0x1e673275, 0x0257, 0x40aa, 0xaf, 0x20, 0x7c, 0x60, 0x8d, 0x4a, 0x04, 0x28);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IUnknown.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VMRALPHABITMAP* pBmpParms) SetAlphaBitmap;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VMRALPHABITMAP* pBmpParms) UpdateAlphaBitmapParameters;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VMRALPHABITMAP* pBmpParms) GetAlphaBitmapParameters;
	}


	public HRESULT SetAlphaBitmap(VMRALPHABITMAP* pBmpParms) mut => VT.[Friend]SetAlphaBitmap(&this, pBmpParms);

	public HRESULT UpdateAlphaBitmapParameters(VMRALPHABITMAP* pBmpParms) mut => VT.[Friend]UpdateAlphaBitmapParameters(&this, pBmpParms);

	public HRESULT GetAlphaBitmapParameters(VMRALPHABITMAP* pBmpParms) mut => VT.[Friend]GetAlphaBitmapParameters(&this, pBmpParms);
}

[CRepr]struct IVMRImageCompositor : IUnknown
{
	public new const Guid IID = .(0x7a4fb5af, 0x479f, 0x4074, 0xbb, 0x40, 0xce, 0x67, 0x22, 0xe4, 0x3c, 0x82);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IUnknown.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IUnknown* pD3DDevice, IDirectDrawSurface7* pddsRenderTarget) InitCompositionTarget;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IUnknown* pD3DDevice, IDirectDrawSurface7* pddsRenderTarget) TermCompositionTarget;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32 dwStrmID, AM_MEDIA_TYPE* pmt, BOOL fTexture) SetStreamMediaType;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IUnknown* pD3DDevice, IDirectDrawSurface7* pddsRenderTarget, AM_MEDIA_TYPE* pmtRenderTarget, int64 rtStart, int64 rtEnd, uint32 dwClrBkGnd, VMRVIDEOSTREAMINFO* pVideoStreamInfo, uint32 cStreams) CompositeImage;
	}


	public HRESULT InitCompositionTarget(IUnknown* pD3DDevice, IDirectDrawSurface7* pddsRenderTarget) mut => VT.[Friend]InitCompositionTarget(&this, pD3DDevice, pddsRenderTarget);

	public HRESULT TermCompositionTarget(IUnknown* pD3DDevice, IDirectDrawSurface7* pddsRenderTarget) mut => VT.[Friend]TermCompositionTarget(&this, pD3DDevice, pddsRenderTarget);

	public HRESULT SetStreamMediaType(uint32 dwStrmID, AM_MEDIA_TYPE* pmt, BOOL fTexture) mut => VT.[Friend]SetStreamMediaType(&this, dwStrmID, pmt, fTexture);

	public HRESULT CompositeImage(IUnknown* pD3DDevice, IDirectDrawSurface7* pddsRenderTarget, AM_MEDIA_TYPE* pmtRenderTarget, int64 rtStart, int64 rtEnd, uint32 dwClrBkGnd, VMRVIDEOSTREAMINFO* pVideoStreamInfo, uint32 cStreams) mut => VT.[Friend]CompositeImage(&this, pD3DDevice, pddsRenderTarget, pmtRenderTarget, rtStart, rtEnd, dwClrBkGnd, pVideoStreamInfo, cStreams);
}

[CRepr]struct IVMRVideoStreamControl : IUnknown
{
	public new const Guid IID = .(0x058d1f11, 0x2a54, 0x4bef, 0xbd, 0x54, 0xdf, 0x70, 0x66, 0x26, 0xb7, 0x27);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IUnknown.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, DDCOLORKEY* lpClrKey) SetColorKey;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, DDCOLORKEY* lpClrKey) GetColorKey;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BOOL fActive) SetStreamActiveState;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BOOL* lpfActive) GetStreamActiveState;
	}


	public HRESULT SetColorKey(DDCOLORKEY* lpClrKey) mut => VT.[Friend]SetColorKey(&this, lpClrKey);

	public HRESULT GetColorKey(DDCOLORKEY* lpClrKey) mut => VT.[Friend]GetColorKey(&this, lpClrKey);

	public HRESULT SetStreamActiveState(BOOL fActive) mut => VT.[Friend]SetStreamActiveState(&this, fActive);

	public HRESULT GetStreamActiveState(BOOL* lpfActive) mut => VT.[Friend]GetStreamActiveState(&this, lpfActive);
}

[CRepr]struct IVMRSurface : IUnknown
{
	public new const Guid IID = .(0xa9849bbe, 0x9ec8, 0x4263, 0xb7, 0x64, 0x62, 0x73, 0x0f, 0x0d, 0x15, 0xd0);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IUnknown.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self) IsSurfaceLocked;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint8** lpSurface) LockSurface;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self) UnlockSurface;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IDirectDrawSurface7** lplpSurface) GetSurface;
	}


	public HRESULT IsSurfaceLocked() mut => VT.[Friend]IsSurfaceLocked(&this);

	public HRESULT LockSurface(uint8** lpSurface) mut => VT.[Friend]LockSurface(&this, lpSurface);

	public HRESULT UnlockSurface() mut => VT.[Friend]UnlockSurface(&this);

	public HRESULT GetSurface(IDirectDrawSurface7** lplpSurface) mut => VT.[Friend]GetSurface(&this, lplpSurface);
}

[CRepr]struct IVMRImagePresenterConfig : IUnknown
{
	public new const Guid IID = .(0x9f3a1c85, 0x8555, 0x49ba, 0x93, 0x5f, 0xbe, 0x5b, 0x5b, 0x29, 0xd1, 0x78);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IUnknown.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32 dwRenderFlags) SetRenderingPrefs;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32* dwRenderFlags) GetRenderingPrefs;
	}


	public HRESULT SetRenderingPrefs(uint32 dwRenderFlags) mut => VT.[Friend]SetRenderingPrefs(&this, dwRenderFlags);

	public HRESULT GetRenderingPrefs(uint32* dwRenderFlags) mut => VT.[Friend]GetRenderingPrefs(&this, dwRenderFlags);
}

[CRepr]struct IVMRImagePresenterExclModeConfig : IVMRImagePresenterConfig
{
	public new const Guid IID = .(0xe6f7ce40, 0x4673, 0x44f1, 0x8f, 0x77, 0x54, 0x99, 0xd6, 0x8c, 0xb4, 0xea);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IVMRImagePresenterConfig.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IDirectDraw7* lpDDObj, IDirectDrawSurface7* lpPrimarySurf) SetXlcModeDDObjAndPrimarySurface;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IDirectDraw7** lpDDObj, IDirectDrawSurface7** lpPrimarySurf) GetXlcModeDDObjAndPrimarySurface;
	}


	public HRESULT SetXlcModeDDObjAndPrimarySurface(IDirectDraw7* lpDDObj, IDirectDrawSurface7* lpPrimarySurf) mut => VT.[Friend]SetXlcModeDDObjAndPrimarySurface(&this, lpDDObj, lpPrimarySurf);

	public HRESULT GetXlcModeDDObjAndPrimarySurface(IDirectDraw7** lpDDObj, IDirectDrawSurface7** lpPrimarySurf) mut => VT.[Friend]GetXlcModeDDObjAndPrimarySurface(&this, lpDDObj, lpPrimarySurf);
}

[CRepr]struct IVPManager : IUnknown
{
	public new const Guid IID = .(0xaac18c18, 0xe186, 0x46d2, 0x82, 0x5d, 0xa1, 0xf8, 0xdc, 0x8e, 0x39, 0x5a);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IUnknown.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32 dwVideoPortIndex) SetVideoPortIndex;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32* pdwVideoPortIndex) GetVideoPortIndex;
	}


	public HRESULT SetVideoPortIndex(uint32 dwVideoPortIndex) mut => VT.[Friend]SetVideoPortIndex(&this, dwVideoPortIndex);

	public HRESULT GetVideoPortIndex(uint32* pdwVideoPortIndex) mut => VT.[Friend]GetVideoPortIndex(&this, pdwVideoPortIndex);
}

[CRepr]struct IDvdControl : IUnknown
{
	public new const Guid IID = .(0xa70efe61, 0xe2a3, 0x11d0, 0xa9, 0xbe, 0x00, 0xaa, 0x00, 0x61, 0xbe, 0x93);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IUnknown.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32 ulTitle) TitlePlay;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32 ulTitle, uint32 ulChapter) ChapterPlay;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32 ulTitle, uint32 bcdTime) TimePlay;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self) StopForResume;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self) GoUp;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32 bcdTime) TimeSearch;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32 ulChapter) ChapterSearch;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self) PrevPGSearch;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self) TopPGSearch;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self) NextPGSearch;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, double dwSpeed) ForwardScan;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, double dwSpeed) BackwardScan;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, DVD_MENU_ID MenuID) MenuCall;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self) Resume;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self) UpperButtonSelect;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self) LowerButtonSelect;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self) LeftButtonSelect;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self) RightButtonSelect;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self) ButtonActivate;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32 ulButton) ButtonSelectAndActivate;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self) StillOff;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self) PauseOn;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self) PauseOff;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32 Language) MenuLanguageSelect;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32 ulAudio) AudioStreamChange;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32 ulSubPicture, BOOL bDisplay) SubpictureStreamChange;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32 ulAngle) AngleChange;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32 ulParentalLevel) ParentalLevelSelect;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint16 wCountry) ParentalCountrySelect;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32 ulMode) KaraokeAudioPresentationModeChange;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32 ulPreferredDisplayMode) VideoModePreferrence;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, PWSTR pszPath) SetRoot;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, POINT point) MouseActivate;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, POINT point) MouseSelect;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32 ulTitle, uint32 ulChapter, uint32 ulChaptersToPlay) ChapterPlayAutoStop;
	}


	public HRESULT TitlePlay(uint32 ulTitle) mut => VT.[Friend]TitlePlay(&this, ulTitle);

	public HRESULT ChapterPlay(uint32 ulTitle, uint32 ulChapter) mut => VT.[Friend]ChapterPlay(&this, ulTitle, ulChapter);

	public HRESULT TimePlay(uint32 ulTitle, uint32 bcdTime) mut => VT.[Friend]TimePlay(&this, ulTitle, bcdTime);

	public HRESULT StopForResume() mut => VT.[Friend]StopForResume(&this);

	public HRESULT GoUp() mut => VT.[Friend]GoUp(&this);

	public HRESULT TimeSearch(uint32 bcdTime) mut => VT.[Friend]TimeSearch(&this, bcdTime);

	public HRESULT ChapterSearch(uint32 ulChapter) mut => VT.[Friend]ChapterSearch(&this, ulChapter);

	public HRESULT PrevPGSearch() mut => VT.[Friend]PrevPGSearch(&this);

	public HRESULT TopPGSearch() mut => VT.[Friend]TopPGSearch(&this);

	public HRESULT NextPGSearch() mut => VT.[Friend]NextPGSearch(&this);

	public HRESULT ForwardScan(double dwSpeed) mut => VT.[Friend]ForwardScan(&this, dwSpeed);

	public HRESULT BackwardScan(double dwSpeed) mut => VT.[Friend]BackwardScan(&this, dwSpeed);

	public HRESULT MenuCall(DVD_MENU_ID MenuID) mut => VT.[Friend]MenuCall(&this, MenuID);

	public HRESULT Resume() mut => VT.[Friend]Resume(&this);

	public HRESULT UpperButtonSelect() mut => VT.[Friend]UpperButtonSelect(&this);

	public HRESULT LowerButtonSelect() mut => VT.[Friend]LowerButtonSelect(&this);

	public HRESULT LeftButtonSelect() mut => VT.[Friend]LeftButtonSelect(&this);

	public HRESULT RightButtonSelect() mut => VT.[Friend]RightButtonSelect(&this);

	public HRESULT ButtonActivate() mut => VT.[Friend]ButtonActivate(&this);

	public HRESULT ButtonSelectAndActivate(uint32 ulButton) mut => VT.[Friend]ButtonSelectAndActivate(&this, ulButton);

	public HRESULT StillOff() mut => VT.[Friend]StillOff(&this);

	public HRESULT PauseOn() mut => VT.[Friend]PauseOn(&this);

	public HRESULT PauseOff() mut => VT.[Friend]PauseOff(&this);

	public HRESULT MenuLanguageSelect(uint32 Language) mut => VT.[Friend]MenuLanguageSelect(&this, Language);

	public HRESULT AudioStreamChange(uint32 ulAudio) mut => VT.[Friend]AudioStreamChange(&this, ulAudio);

	public HRESULT SubpictureStreamChange(uint32 ulSubPicture, BOOL bDisplay) mut => VT.[Friend]SubpictureStreamChange(&this, ulSubPicture, bDisplay);

	public HRESULT AngleChange(uint32 ulAngle) mut => VT.[Friend]AngleChange(&this, ulAngle);

	public HRESULT ParentalLevelSelect(uint32 ulParentalLevel) mut => VT.[Friend]ParentalLevelSelect(&this, ulParentalLevel);

	public HRESULT ParentalCountrySelect(uint16 wCountry) mut => VT.[Friend]ParentalCountrySelect(&this, wCountry);

	public HRESULT KaraokeAudioPresentationModeChange(uint32 ulMode) mut => VT.[Friend]KaraokeAudioPresentationModeChange(&this, ulMode);

	public HRESULT VideoModePreferrence(uint32 ulPreferredDisplayMode) mut => VT.[Friend]VideoModePreferrence(&this, ulPreferredDisplayMode);

	public HRESULT SetRoot(PWSTR pszPath) mut => VT.[Friend]SetRoot(&this, pszPath);

	public HRESULT MouseActivate(POINT point) mut => VT.[Friend]MouseActivate(&this, point);

	public HRESULT MouseSelect(POINT point) mut => VT.[Friend]MouseSelect(&this, point);

	public HRESULT ChapterPlayAutoStop(uint32 ulTitle, uint32 ulChapter, uint32 ulChaptersToPlay) mut => VT.[Friend]ChapterPlayAutoStop(&this, ulTitle, ulChapter, ulChaptersToPlay);
}

[CRepr]struct IDvdInfo : IUnknown
{
	public new const Guid IID = .(0xa70efe60, 0xe2a3, 0x11d0, 0xa9, 0xbe, 0x00, 0xaa, 0x00, 0x61, 0xbe, 0x93);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IUnknown.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, DVD_DOMAIN* pDomain) GetCurrentDomain;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, DVD_PLAYBACK_LOCATION* pLocation) GetCurrentLocation;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32* pulTotalTime) GetTotalTitleTime;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32* pulButtonsAvailable, uint32* pulCurrentButton) GetCurrentButton;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32* pulAnglesAvailable, uint32* pulCurrentAngle) GetCurrentAngle;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32* pulStreamsAvailable, uint32* pulCurrentStream) GetCurrentAudio;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32* pulStreamsAvailable, uint32* pulCurrentStream, BOOL* pIsDisabled) GetCurrentSubpicture;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32* pUOP) GetCurrentUOPS;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint16** pRegisterArray) GetAllSPRMs;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint16** pRegisterArray) GetAllGPRMs;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32 ulStream, uint32* pLanguage) GetAudioLanguage;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32 ulStream, uint32* pLanguage) GetSubpictureLanguage;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32 ulTitle, DVD_ATR* pATR) GetTitleAttributes;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, DVD_ATR* pATR) GetVMGAttributes;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint8** pATR) GetCurrentVideoAttributes;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint8** pATR) GetCurrentAudioAttributes;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint8** pATR) GetCurrentSubpictureAttributes;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32* pulNumOfVol, uint32* pulThisVolNum, DVD_DISC_SIDE* pSide, uint32* pulNumOfTitles) GetCurrentVolumeInfo;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint8* pTextManager, uint32 ulBufSize, uint32* pulActualSize) GetDVDTextInfo;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32* pulParentalLevel, uint32* pulCountryCode) GetPlayerParentalLevel;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32 ulTitle, uint32* pulNumberOfChapters) GetNumberOfChapters;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32 ulTitle, uint32* pulParentalLevels) GetTitleParentalLevels;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint8* pRoot, uint32 ulBufSize, uint32* pulActualSize) GetRoot;
	}


	public HRESULT GetCurrentDomain(DVD_DOMAIN* pDomain) mut => VT.[Friend]GetCurrentDomain(&this, pDomain);

	public HRESULT GetCurrentLocation(DVD_PLAYBACK_LOCATION* pLocation) mut => VT.[Friend]GetCurrentLocation(&this, pLocation);

	public HRESULT GetTotalTitleTime(uint32* pulTotalTime) mut => VT.[Friend]GetTotalTitleTime(&this, pulTotalTime);

	public HRESULT GetCurrentButton(uint32* pulButtonsAvailable, uint32* pulCurrentButton) mut => VT.[Friend]GetCurrentButton(&this, pulButtonsAvailable, pulCurrentButton);

	public HRESULT GetCurrentAngle(uint32* pulAnglesAvailable, uint32* pulCurrentAngle) mut => VT.[Friend]GetCurrentAngle(&this, pulAnglesAvailable, pulCurrentAngle);

	public HRESULT GetCurrentAudio(uint32* pulStreamsAvailable, uint32* pulCurrentStream) mut => VT.[Friend]GetCurrentAudio(&this, pulStreamsAvailable, pulCurrentStream);

	public HRESULT GetCurrentSubpicture(uint32* pulStreamsAvailable, uint32* pulCurrentStream, BOOL* pIsDisabled) mut => VT.[Friend]GetCurrentSubpicture(&this, pulStreamsAvailable, pulCurrentStream, pIsDisabled);

	public HRESULT GetCurrentUOPS(uint32* pUOP) mut => VT.[Friend]GetCurrentUOPS(&this, pUOP);

	public HRESULT GetAllSPRMs(uint16** pRegisterArray) mut => VT.[Friend]GetAllSPRMs(&this, pRegisterArray);

	public HRESULT GetAllGPRMs(uint16** pRegisterArray) mut => VT.[Friend]GetAllGPRMs(&this, pRegisterArray);

	public HRESULT GetAudioLanguage(uint32 ulStream, uint32* pLanguage) mut => VT.[Friend]GetAudioLanguage(&this, ulStream, pLanguage);

	public HRESULT GetSubpictureLanguage(uint32 ulStream, uint32* pLanguage) mut => VT.[Friend]GetSubpictureLanguage(&this, ulStream, pLanguage);

	public HRESULT GetTitleAttributes(uint32 ulTitle, DVD_ATR* pATR) mut => VT.[Friend]GetTitleAttributes(&this, ulTitle, pATR);

	public HRESULT GetVMGAttributes(DVD_ATR* pATR) mut => VT.[Friend]GetVMGAttributes(&this, pATR);

	public HRESULT GetCurrentVideoAttributes(uint8** pATR) mut => VT.[Friend]GetCurrentVideoAttributes(&this, pATR);

	public HRESULT GetCurrentAudioAttributes(uint8** pATR) mut => VT.[Friend]GetCurrentAudioAttributes(&this, pATR);

	public HRESULT GetCurrentSubpictureAttributes(uint8** pATR) mut => VT.[Friend]GetCurrentSubpictureAttributes(&this, pATR);

	public HRESULT GetCurrentVolumeInfo(uint32* pulNumOfVol, uint32* pulThisVolNum, DVD_DISC_SIDE* pSide, uint32* pulNumOfTitles) mut => VT.[Friend]GetCurrentVolumeInfo(&this, pulNumOfVol, pulThisVolNum, pSide, pulNumOfTitles);

	public HRESULT GetDVDTextInfo(uint8* pTextManager, uint32 ulBufSize, uint32* pulActualSize) mut => VT.[Friend]GetDVDTextInfo(&this, pTextManager, ulBufSize, pulActualSize);

	public HRESULT GetPlayerParentalLevel(uint32* pulParentalLevel, uint32* pulCountryCode) mut => VT.[Friend]GetPlayerParentalLevel(&this, pulParentalLevel, pulCountryCode);

	public HRESULT GetNumberOfChapters(uint32 ulTitle, uint32* pulNumberOfChapters) mut => VT.[Friend]GetNumberOfChapters(&this, ulTitle, pulNumberOfChapters);

	public HRESULT GetTitleParentalLevels(uint32 ulTitle, uint32* pulParentalLevels) mut => VT.[Friend]GetTitleParentalLevels(&this, ulTitle, pulParentalLevels);

	public HRESULT GetRoot(uint8* pRoot, uint32 ulBufSize, uint32* pulActualSize) mut => VT.[Friend]GetRoot(&this, pRoot, ulBufSize, pulActualSize);
}

[CRepr]struct IDvdCmd : IUnknown
{
	public new const Guid IID = .(0x5a4a97e4, 0x94ee, 0x4a55, 0x97, 0x51, 0x74, 0xb5, 0x64, 0x3a, 0xa2, 0x7d);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IUnknown.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self) WaitForStart;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self) WaitForEnd;
	}


	public HRESULT WaitForStart() mut => VT.[Friend]WaitForStart(&this);

	public HRESULT WaitForEnd() mut => VT.[Friend]WaitForEnd(&this);
}

[CRepr]struct IDvdState : IUnknown
{
	public new const Guid IID = .(0x86303d6d, 0x1c4a, 0x4087, 0xab, 0x42, 0xf7, 0x11, 0x16, 0x70, 0x48, 0xef);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IUnknown.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint64* pullUniqueID) GetDiscID;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32* pulParentalLevel) GetParentalLevel;
	}


	public HRESULT GetDiscID(uint64* pullUniqueID) mut => VT.[Friend]GetDiscID(&this, pullUniqueID);

	public HRESULT GetParentalLevel(uint32* pulParentalLevel) mut => VT.[Friend]GetParentalLevel(&this, pulParentalLevel);
}

[CRepr]struct IDvdControl2 : IUnknown
{
	public new const Guid IID = .(0x33bc7430, 0xeec0, 0x11d2, 0x82, 0x01, 0x00, 0xa0, 0xc9, 0xd7, 0x48, 0x42);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IUnknown.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32 ulTitle, uint32 dwFlags, IDvdCmd** ppCmd) PlayTitle;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32 ulTitle, uint32 ulChapter, uint32 dwFlags, IDvdCmd** ppCmd) PlayChapterInTitle;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32 ulTitle, DVD_HMSF_TIMECODE* pStartTime, uint32 dwFlags, IDvdCmd** ppCmd) PlayAtTimeInTitle;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self) Stop;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32 dwFlags, IDvdCmd** ppCmd) ReturnFromSubmenu;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, DVD_HMSF_TIMECODE* pTime, uint32 dwFlags, IDvdCmd** ppCmd) PlayAtTime;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32 ulChapter, uint32 dwFlags, IDvdCmd** ppCmd) PlayChapter;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32 dwFlags, IDvdCmd** ppCmd) PlayPrevChapter;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32 dwFlags, IDvdCmd** ppCmd) ReplayChapter;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32 dwFlags, IDvdCmd** ppCmd) PlayNextChapter;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, double dSpeed, uint32 dwFlags, IDvdCmd** ppCmd) PlayForwards;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, double dSpeed, uint32 dwFlags, IDvdCmd** ppCmd) PlayBackwards;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, DVD_MENU_ID MenuID, uint32 dwFlags, IDvdCmd** ppCmd) ShowMenu;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32 dwFlags, IDvdCmd** ppCmd) Resume;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, DVD_RELATIVE_BUTTON buttonDir) SelectRelativeButton;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self) ActivateButton;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32 ulButton) SelectButton;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32 ulButton) SelectAndActivateButton;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self) StillOff;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BOOL bState) Pause;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32 ulAudio, uint32 dwFlags, IDvdCmd** ppCmd) SelectAudioStream;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32 ulSubPicture, uint32 dwFlags, IDvdCmd** ppCmd) SelectSubpictureStream;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BOOL bState, uint32 dwFlags, IDvdCmd** ppCmd) SetSubpictureState;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32 ulAngle, uint32 dwFlags, IDvdCmd** ppCmd) SelectAngle;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32 ulParentalLevel) SelectParentalLevel;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint8* bCountry) SelectParentalCountry;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32 ulMode) SelectKaraokeAudioPresentationMode;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32 ulPreferredDisplayMode) SelectVideoModePreference;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, PWSTR pszwPath) SetDVDDirectory;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, POINT point) ActivateAtPosition;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, POINT point) SelectAtPosition;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32 ulTitle, uint32 ulChapter, uint32 ulChaptersToPlay, uint32 dwFlags, IDvdCmd** ppCmd) PlayChaptersAutoStop;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BOOL bAccept) AcceptParentalLevelChange;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, DVD_OPTION_FLAG flag, BOOL fState) SetOption;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IDvdState* pState, uint32 dwFlags, IDvdCmd** ppCmd) SetState;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32 ulTitle, DVD_HMSF_TIMECODE* pStartTime, DVD_HMSF_TIMECODE* pEndTime, uint32 dwFlags, IDvdCmd** ppCmd) PlayPeriodInTitleAutoStop;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32 ulIndex, uint16 wValue, uint32 dwFlags, IDvdCmd** ppCmd) SetGPRM;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32 Language) SelectDefaultMenuLanguage;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32 Language, DVD_AUDIO_LANG_EXT audioExtension) SelectDefaultAudioLanguage;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32 Language, DVD_SUBPICTURE_LANG_EXT subpictureExtension) SelectDefaultSubpictureLanguage;
	}


	public HRESULT PlayTitle(uint32 ulTitle, uint32 dwFlags, IDvdCmd** ppCmd) mut => VT.[Friend]PlayTitle(&this, ulTitle, dwFlags, ppCmd);

	public HRESULT PlayChapterInTitle(uint32 ulTitle, uint32 ulChapter, uint32 dwFlags, IDvdCmd** ppCmd) mut => VT.[Friend]PlayChapterInTitle(&this, ulTitle, ulChapter, dwFlags, ppCmd);

	public HRESULT PlayAtTimeInTitle(uint32 ulTitle, DVD_HMSF_TIMECODE* pStartTime, uint32 dwFlags, IDvdCmd** ppCmd) mut => VT.[Friend]PlayAtTimeInTitle(&this, ulTitle, pStartTime, dwFlags, ppCmd);

	public HRESULT Stop() mut => VT.[Friend]Stop(&this);

	public HRESULT ReturnFromSubmenu(uint32 dwFlags, IDvdCmd** ppCmd) mut => VT.[Friend]ReturnFromSubmenu(&this, dwFlags, ppCmd);

	public HRESULT PlayAtTime(DVD_HMSF_TIMECODE* pTime, uint32 dwFlags, IDvdCmd** ppCmd) mut => VT.[Friend]PlayAtTime(&this, pTime, dwFlags, ppCmd);

	public HRESULT PlayChapter(uint32 ulChapter, uint32 dwFlags, IDvdCmd** ppCmd) mut => VT.[Friend]PlayChapter(&this, ulChapter, dwFlags, ppCmd);

	public HRESULT PlayPrevChapter(uint32 dwFlags, IDvdCmd** ppCmd) mut => VT.[Friend]PlayPrevChapter(&this, dwFlags, ppCmd);

	public HRESULT ReplayChapter(uint32 dwFlags, IDvdCmd** ppCmd) mut => VT.[Friend]ReplayChapter(&this, dwFlags, ppCmd);

	public HRESULT PlayNextChapter(uint32 dwFlags, IDvdCmd** ppCmd) mut => VT.[Friend]PlayNextChapter(&this, dwFlags, ppCmd);

	public HRESULT PlayForwards(double dSpeed, uint32 dwFlags, IDvdCmd** ppCmd) mut => VT.[Friend]PlayForwards(&this, dSpeed, dwFlags, ppCmd);

	public HRESULT PlayBackwards(double dSpeed, uint32 dwFlags, IDvdCmd** ppCmd) mut => VT.[Friend]PlayBackwards(&this, dSpeed, dwFlags, ppCmd);

	public HRESULT ShowMenu(DVD_MENU_ID MenuID, uint32 dwFlags, IDvdCmd** ppCmd) mut => VT.[Friend]ShowMenu(&this, MenuID, dwFlags, ppCmd);

	public HRESULT Resume(uint32 dwFlags, IDvdCmd** ppCmd) mut => VT.[Friend]Resume(&this, dwFlags, ppCmd);

	public HRESULT SelectRelativeButton(DVD_RELATIVE_BUTTON buttonDir) mut => VT.[Friend]SelectRelativeButton(&this, buttonDir);

	public HRESULT ActivateButton() mut => VT.[Friend]ActivateButton(&this);

	public HRESULT SelectButton(uint32 ulButton) mut => VT.[Friend]SelectButton(&this, ulButton);

	public HRESULT SelectAndActivateButton(uint32 ulButton) mut => VT.[Friend]SelectAndActivateButton(&this, ulButton);

	public HRESULT StillOff() mut => VT.[Friend]StillOff(&this);

	public HRESULT Pause(BOOL bState) mut => VT.[Friend]Pause(&this, bState);

	public HRESULT SelectAudioStream(uint32 ulAudio, uint32 dwFlags, IDvdCmd** ppCmd) mut => VT.[Friend]SelectAudioStream(&this, ulAudio, dwFlags, ppCmd);

	public HRESULT SelectSubpictureStream(uint32 ulSubPicture, uint32 dwFlags, IDvdCmd** ppCmd) mut => VT.[Friend]SelectSubpictureStream(&this, ulSubPicture, dwFlags, ppCmd);

	public HRESULT SetSubpictureState(BOOL bState, uint32 dwFlags, IDvdCmd** ppCmd) mut => VT.[Friend]SetSubpictureState(&this, bState, dwFlags, ppCmd);

	public HRESULT SelectAngle(uint32 ulAngle, uint32 dwFlags, IDvdCmd** ppCmd) mut => VT.[Friend]SelectAngle(&this, ulAngle, dwFlags, ppCmd);

	public HRESULT SelectParentalLevel(uint32 ulParentalLevel) mut => VT.[Friend]SelectParentalLevel(&this, ulParentalLevel);

	public HRESULT SelectParentalCountry(uint8* bCountry) mut => VT.[Friend]SelectParentalCountry(&this, bCountry);

	public HRESULT SelectKaraokeAudioPresentationMode(uint32 ulMode) mut => VT.[Friend]SelectKaraokeAudioPresentationMode(&this, ulMode);

	public HRESULT SelectVideoModePreference(uint32 ulPreferredDisplayMode) mut => VT.[Friend]SelectVideoModePreference(&this, ulPreferredDisplayMode);

	public HRESULT SetDVDDirectory(PWSTR pszwPath) mut => VT.[Friend]SetDVDDirectory(&this, pszwPath);

	public HRESULT ActivateAtPosition(POINT point) mut => VT.[Friend]ActivateAtPosition(&this, point);

	public HRESULT SelectAtPosition(POINT point) mut => VT.[Friend]SelectAtPosition(&this, point);

	public HRESULT PlayChaptersAutoStop(uint32 ulTitle, uint32 ulChapter, uint32 ulChaptersToPlay, uint32 dwFlags, IDvdCmd** ppCmd) mut => VT.[Friend]PlayChaptersAutoStop(&this, ulTitle, ulChapter, ulChaptersToPlay, dwFlags, ppCmd);

	public HRESULT AcceptParentalLevelChange(BOOL bAccept) mut => VT.[Friend]AcceptParentalLevelChange(&this, bAccept);

	public HRESULT SetOption(DVD_OPTION_FLAG flag, BOOL fState) mut => VT.[Friend]SetOption(&this, flag, fState);

	public HRESULT SetState(IDvdState* pState, uint32 dwFlags, IDvdCmd** ppCmd) mut => VT.[Friend]SetState(&this, pState, dwFlags, ppCmd);

	public HRESULT PlayPeriodInTitleAutoStop(uint32 ulTitle, DVD_HMSF_TIMECODE* pStartTime, DVD_HMSF_TIMECODE* pEndTime, uint32 dwFlags, IDvdCmd** ppCmd) mut => VT.[Friend]PlayPeriodInTitleAutoStop(&this, ulTitle, pStartTime, pEndTime, dwFlags, ppCmd);

	public HRESULT SetGPRM(uint32 ulIndex, uint16 wValue, uint32 dwFlags, IDvdCmd** ppCmd) mut => VT.[Friend]SetGPRM(&this, ulIndex, wValue, dwFlags, ppCmd);

	public HRESULT SelectDefaultMenuLanguage(uint32 Language) mut => VT.[Friend]SelectDefaultMenuLanguage(&this, Language);

	public HRESULT SelectDefaultAudioLanguage(uint32 Language, DVD_AUDIO_LANG_EXT audioExtension) mut => VT.[Friend]SelectDefaultAudioLanguage(&this, Language, audioExtension);

	public HRESULT SelectDefaultSubpictureLanguage(uint32 Language, DVD_SUBPICTURE_LANG_EXT subpictureExtension) mut => VT.[Friend]SelectDefaultSubpictureLanguage(&this, Language, subpictureExtension);
}

[CRepr]struct IDvdInfo2 : IUnknown
{
	public new const Guid IID = .(0x34151510, 0xeec0, 0x11d2, 0x82, 0x01, 0x00, 0xa0, 0xc9, 0xd7, 0x48, 0x42);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IUnknown.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, DVD_DOMAIN* pDomain) GetCurrentDomain;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, DVD_PLAYBACK_LOCATION2* pLocation) GetCurrentLocation;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, DVD_HMSF_TIMECODE* pTotalTime, uint32* ulTimeCodeFlags) GetTotalTitleTime;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32* pulButtonsAvailable, uint32* pulCurrentButton) GetCurrentButton;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32* pulAnglesAvailable, uint32* pulCurrentAngle) GetCurrentAngle;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32* pulStreamsAvailable, uint32* pulCurrentStream) GetCurrentAudio;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32* pulStreamsAvailable, uint32* pulCurrentStream, BOOL* pbIsDisabled) GetCurrentSubpicture;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32* pulUOPs) GetCurrentUOPS;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint16** pRegisterArray) GetAllSPRMs;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint16** pRegisterArray) GetAllGPRMs;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32 ulStream, uint32* pLanguage) GetAudioLanguage;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32 ulStream, uint32* pLanguage) GetSubpictureLanguage;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32 ulTitle, DVD_MenuAttributes* pMenu, DVD_TitleAttributes* pTitle) GetTitleAttributes;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, DVD_MenuAttributes* pATR) GetVMGAttributes;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, DVD_VideoAttributes* pATR) GetCurrentVideoAttributes;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32 ulStream, DVD_AudioAttributes* pATR) GetAudioAttributes;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32 ulStream, DVD_KaraokeAttributes* pAttributes) GetKaraokeAttributes;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32 ulStream, DVD_SubpictureAttributes* pATR) GetSubpictureAttributes;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32* pulNumOfVolumes, uint32* pulVolume, DVD_DISC_SIDE* pSide, uint32* pulNumOfTitles) GetDVDVolumeInfo;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32* pulNumOfLangs) GetDVDTextNumberOfLanguages;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32 ulLangIndex, uint32* pulNumOfStrings, uint32* pLangCode, DVD_TextCharSet* pbCharacterSet) GetDVDTextLanguageInfo;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32 ulLangIndex, uint32 ulStringIndex, uint8* pbBuffer, uint32 ulMaxBufferSize, uint32* pulActualSize, DVD_TextStringType* pType) GetDVDTextStringAsNative;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32 ulLangIndex, uint32 ulStringIndex, PWSTR pchwBuffer, uint32 ulMaxBufferSize, uint32* pulActualSize, DVD_TextStringType* pType) GetDVDTextStringAsUnicode;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32* pulParentalLevel, uint8* pbCountryCode) GetPlayerParentalLevel;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32 ulTitle, uint32* pulNumOfChapters) GetNumberOfChapters;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32 ulTitle, uint32* pulParentalLevels) GetTitleParentalLevels;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, char16* pszwPath, uint32 ulMaxSize, uint32* pulActualSize) GetDVDDirectory;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32 ulStreamNum, BOOL* pbEnabled) IsAudioStreamEnabled;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, PWSTR pszwPath, uint64* pullDiscID) GetDiscID;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IDvdState** pStateData) GetState;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32* pLanguages, uint32 ulMaxLanguages, uint32* pulActualLanguages) GetMenuLanguages;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, POINT point, uint32* pulButtonIndex) GetButtonAtPosition;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int lParam1, IDvdCmd** pCmdObj) GetCmdFromEvent;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32* pLanguage) GetDefaultMenuLanguage;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32* pLanguage, DVD_AUDIO_LANG_EXT* pAudioExtension) GetDefaultAudioLanguage;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32* pLanguage, DVD_SUBPICTURE_LANG_EXT* pSubpictureExtension) GetDefaultSubpictureLanguage;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, DVD_DECODER_CAPS* pCaps) GetDecoderCaps;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32 ulButton, RECT* pRect) GetButtonRect;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32 ulStreamNum, BOOL* pbEnabled) IsSubpictureStreamEnabled;
	}


	public HRESULT GetCurrentDomain(DVD_DOMAIN* pDomain) mut => VT.[Friend]GetCurrentDomain(&this, pDomain);

	public HRESULT GetCurrentLocation(DVD_PLAYBACK_LOCATION2* pLocation) mut => VT.[Friend]GetCurrentLocation(&this, pLocation);

	public HRESULT GetTotalTitleTime(DVD_HMSF_TIMECODE* pTotalTime, uint32* ulTimeCodeFlags) mut => VT.[Friend]GetTotalTitleTime(&this, pTotalTime, ulTimeCodeFlags);

	public HRESULT GetCurrentButton(uint32* pulButtonsAvailable, uint32* pulCurrentButton) mut => VT.[Friend]GetCurrentButton(&this, pulButtonsAvailable, pulCurrentButton);

	public HRESULT GetCurrentAngle(uint32* pulAnglesAvailable, uint32* pulCurrentAngle) mut => VT.[Friend]GetCurrentAngle(&this, pulAnglesAvailable, pulCurrentAngle);

	public HRESULT GetCurrentAudio(uint32* pulStreamsAvailable, uint32* pulCurrentStream) mut => VT.[Friend]GetCurrentAudio(&this, pulStreamsAvailable, pulCurrentStream);

	public HRESULT GetCurrentSubpicture(uint32* pulStreamsAvailable, uint32* pulCurrentStream, BOOL* pbIsDisabled) mut => VT.[Friend]GetCurrentSubpicture(&this, pulStreamsAvailable, pulCurrentStream, pbIsDisabled);

	public HRESULT GetCurrentUOPS(uint32* pulUOPs) mut => VT.[Friend]GetCurrentUOPS(&this, pulUOPs);

	public HRESULT GetAllSPRMs(uint16** pRegisterArray) mut => VT.[Friend]GetAllSPRMs(&this, pRegisterArray);

	public HRESULT GetAllGPRMs(uint16** pRegisterArray) mut => VT.[Friend]GetAllGPRMs(&this, pRegisterArray);

	public HRESULT GetAudioLanguage(uint32 ulStream, uint32* pLanguage) mut => VT.[Friend]GetAudioLanguage(&this, ulStream, pLanguage);

	public HRESULT GetSubpictureLanguage(uint32 ulStream, uint32* pLanguage) mut => VT.[Friend]GetSubpictureLanguage(&this, ulStream, pLanguage);

	public HRESULT GetTitleAttributes(uint32 ulTitle, DVD_MenuAttributes* pMenu, DVD_TitleAttributes* pTitle) mut => VT.[Friend]GetTitleAttributes(&this, ulTitle, pMenu, pTitle);

	public HRESULT GetVMGAttributes(DVD_MenuAttributes* pATR) mut => VT.[Friend]GetVMGAttributes(&this, pATR);

	public HRESULT GetCurrentVideoAttributes(DVD_VideoAttributes* pATR) mut => VT.[Friend]GetCurrentVideoAttributes(&this, pATR);

	public HRESULT GetAudioAttributes(uint32 ulStream, DVD_AudioAttributes* pATR) mut => VT.[Friend]GetAudioAttributes(&this, ulStream, pATR);

	public HRESULT GetKaraokeAttributes(uint32 ulStream, DVD_KaraokeAttributes* pAttributes) mut => VT.[Friend]GetKaraokeAttributes(&this, ulStream, pAttributes);

	public HRESULT GetSubpictureAttributes(uint32 ulStream, DVD_SubpictureAttributes* pATR) mut => VT.[Friend]GetSubpictureAttributes(&this, ulStream, pATR);

	public HRESULT GetDVDVolumeInfo(uint32* pulNumOfVolumes, uint32* pulVolume, DVD_DISC_SIDE* pSide, uint32* pulNumOfTitles) mut => VT.[Friend]GetDVDVolumeInfo(&this, pulNumOfVolumes, pulVolume, pSide, pulNumOfTitles);

	public HRESULT GetDVDTextNumberOfLanguages(uint32* pulNumOfLangs) mut => VT.[Friend]GetDVDTextNumberOfLanguages(&this, pulNumOfLangs);

	public HRESULT GetDVDTextLanguageInfo(uint32 ulLangIndex, uint32* pulNumOfStrings, uint32* pLangCode, DVD_TextCharSet* pbCharacterSet) mut => VT.[Friend]GetDVDTextLanguageInfo(&this, ulLangIndex, pulNumOfStrings, pLangCode, pbCharacterSet);

	public HRESULT GetDVDTextStringAsNative(uint32 ulLangIndex, uint32 ulStringIndex, uint8* pbBuffer, uint32 ulMaxBufferSize, uint32* pulActualSize, DVD_TextStringType* pType) mut => VT.[Friend]GetDVDTextStringAsNative(&this, ulLangIndex, ulStringIndex, pbBuffer, ulMaxBufferSize, pulActualSize, pType);

	public HRESULT GetDVDTextStringAsUnicode(uint32 ulLangIndex, uint32 ulStringIndex, PWSTR pchwBuffer, uint32 ulMaxBufferSize, uint32* pulActualSize, DVD_TextStringType* pType) mut => VT.[Friend]GetDVDTextStringAsUnicode(&this, ulLangIndex, ulStringIndex, pchwBuffer, ulMaxBufferSize, pulActualSize, pType);

	public HRESULT GetPlayerParentalLevel(uint32* pulParentalLevel, uint8* pbCountryCode) mut => VT.[Friend]GetPlayerParentalLevel(&this, pulParentalLevel, pbCountryCode);

	public HRESULT GetNumberOfChapters(uint32 ulTitle, uint32* pulNumOfChapters) mut => VT.[Friend]GetNumberOfChapters(&this, ulTitle, pulNumOfChapters);

	public HRESULT GetTitleParentalLevels(uint32 ulTitle, uint32* pulParentalLevels) mut => VT.[Friend]GetTitleParentalLevels(&this, ulTitle, pulParentalLevels);

	public HRESULT GetDVDDirectory(char16* pszwPath, uint32 ulMaxSize, uint32* pulActualSize) mut => VT.[Friend]GetDVDDirectory(&this, pszwPath, ulMaxSize, pulActualSize);

	public HRESULT IsAudioStreamEnabled(uint32 ulStreamNum, BOOL* pbEnabled) mut => VT.[Friend]IsAudioStreamEnabled(&this, ulStreamNum, pbEnabled);

	public HRESULT GetDiscID(PWSTR pszwPath, uint64* pullDiscID) mut => VT.[Friend]GetDiscID(&this, pszwPath, pullDiscID);

	public HRESULT GetState(IDvdState** pStateData) mut => VT.[Friend]GetState(&this, pStateData);

	public HRESULT GetMenuLanguages(uint32* pLanguages, uint32 ulMaxLanguages, uint32* pulActualLanguages) mut => VT.[Friend]GetMenuLanguages(&this, pLanguages, ulMaxLanguages, pulActualLanguages);

	public HRESULT GetButtonAtPosition(POINT point, uint32* pulButtonIndex) mut => VT.[Friend]GetButtonAtPosition(&this, point, pulButtonIndex);

	public HRESULT GetCmdFromEvent(int lParam1, IDvdCmd** pCmdObj) mut => VT.[Friend]GetCmdFromEvent(&this, lParam1, pCmdObj);

	public HRESULT GetDefaultMenuLanguage(uint32* pLanguage) mut => VT.[Friend]GetDefaultMenuLanguage(&this, pLanguage);

	public HRESULT GetDefaultAudioLanguage(uint32* pLanguage, DVD_AUDIO_LANG_EXT* pAudioExtension) mut => VT.[Friend]GetDefaultAudioLanguage(&this, pLanguage, pAudioExtension);

	public HRESULT GetDefaultSubpictureLanguage(uint32* pLanguage, DVD_SUBPICTURE_LANG_EXT* pSubpictureExtension) mut => VT.[Friend]GetDefaultSubpictureLanguage(&this, pLanguage, pSubpictureExtension);

	public HRESULT GetDecoderCaps(DVD_DECODER_CAPS* pCaps) mut => VT.[Friend]GetDecoderCaps(&this, pCaps);

	public HRESULT GetButtonRect(uint32 ulButton, RECT* pRect) mut => VT.[Friend]GetButtonRect(&this, ulButton, pRect);

	public HRESULT IsSubpictureStreamEnabled(uint32 ulStreamNum, BOOL* pbEnabled) mut => VT.[Friend]IsSubpictureStreamEnabled(&this, ulStreamNum, pbEnabled);
}

[CRepr]struct IDvdGraphBuilder : IUnknown
{
	public new const Guid IID = .(0xfcc152b6, 0xf372, 0x11d0, 0x8e, 0x00, 0x00, 0xc0, 0x4f, 0xd7, 0xc0, 0x8b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IUnknown.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IGraphBuilder** ppGB) GetFiltergraph;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, in Guid riid, void** ppvIF) GetDvdInterface;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, PWSTR lpcwszPathName, uint32 dwFlags, AM_DVD_RENDERSTATUS* pStatus) RenderDvdVideoVolume;
	}


	public HRESULT GetFiltergraph(IGraphBuilder** ppGB) mut => VT.[Friend]GetFiltergraph(&this, ppGB);

	public HRESULT GetDvdInterface(in Guid riid, void** ppvIF) mut => VT.[Friend]GetDvdInterface(&this, riid, ppvIF);

	public HRESULT RenderDvdVideoVolume(PWSTR lpcwszPathName, uint32 dwFlags, AM_DVD_RENDERSTATUS* pStatus) mut => VT.[Friend]RenderDvdVideoVolume(&this, lpcwszPathName, dwFlags, pStatus);
}

[CRepr]struct IDDrawExclModeVideo : IUnknown
{
	public new const Guid IID = .(0x153acc21, 0xd83b, 0x11d1, 0x82, 0xbf, 0x00, 0xa0, 0xc9, 0x69, 0x6c, 0x8f);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IUnknown.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IDirectDraw* pDDrawObject) SetDDrawObject;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IDirectDraw** ppDDrawObject, BOOL* pbUsingExternal) GetDDrawObject;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IDirectDrawSurface* pDDrawSurface) SetDDrawSurface;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IDirectDrawSurface** ppDDrawSurface, BOOL* pbUsingExternal) GetDDrawSurface;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, RECT* prcSource, RECT* prcTarget) SetDrawParameters;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32* pdwVideoWidth, uint32* pdwVideoHeight, uint32* pdwPictAspectRatioX, uint32* pdwPictAspectRatioY) GetNativeVideoProps;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IDDrawExclModeVideoCallback* pCallback, uint32 dwFlags) SetCallbackInterface;
	}


	public HRESULT SetDDrawObject(IDirectDraw* pDDrawObject) mut => VT.[Friend]SetDDrawObject(&this, pDDrawObject);

	public HRESULT GetDDrawObject(IDirectDraw** ppDDrawObject, BOOL* pbUsingExternal) mut => VT.[Friend]GetDDrawObject(&this, ppDDrawObject, pbUsingExternal);

	public HRESULT SetDDrawSurface(IDirectDrawSurface* pDDrawSurface) mut => VT.[Friend]SetDDrawSurface(&this, pDDrawSurface);

	public HRESULT GetDDrawSurface(IDirectDrawSurface** ppDDrawSurface, BOOL* pbUsingExternal) mut => VT.[Friend]GetDDrawSurface(&this, ppDDrawSurface, pbUsingExternal);

	public HRESULT SetDrawParameters(RECT* prcSource, RECT* prcTarget) mut => VT.[Friend]SetDrawParameters(&this, prcSource, prcTarget);

	public HRESULT GetNativeVideoProps(uint32* pdwVideoWidth, uint32* pdwVideoHeight, uint32* pdwPictAspectRatioX, uint32* pdwPictAspectRatioY) mut => VT.[Friend]GetNativeVideoProps(&this, pdwVideoWidth, pdwVideoHeight, pdwPictAspectRatioX, pdwPictAspectRatioY);

	public HRESULT SetCallbackInterface(IDDrawExclModeVideoCallback* pCallback, uint32 dwFlags) mut => VT.[Friend]SetCallbackInterface(&this, pCallback, dwFlags);
}

[CRepr]struct IDDrawExclModeVideoCallback : IUnknown
{
	public new const Guid IID = .(0x913c24a0, 0x20ab, 0x11d2, 0x90, 0x38, 0x00, 0xa0, 0xc9, 0x69, 0x72, 0x98);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IUnknown.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BOOL bBefore, uint32 dwFlags, BOOL bOldVisible, RECT* prcOldSrc, RECT* prcOldDest, BOOL bNewVisible, RECT* prcNewSrc, RECT* prcNewDest) OnUpdateOverlay;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, COLORKEY* pKey, uint32 dwColor) OnUpdateColorKey;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32 dwWidth, uint32 dwHeight, uint32 dwARWidth, uint32 dwARHeight) OnUpdateSize;
	}


	public HRESULT OnUpdateOverlay(BOOL bBefore, uint32 dwFlags, BOOL bOldVisible, RECT* prcOldSrc, RECT* prcOldDest, BOOL bNewVisible, RECT* prcNewSrc, RECT* prcNewDest) mut => VT.[Friend]OnUpdateOverlay(&this, bBefore, dwFlags, bOldVisible, prcOldSrc, prcOldDest, bNewVisible, prcNewSrc, prcNewDest);

	public HRESULT OnUpdateColorKey(COLORKEY* pKey, uint32 dwColor) mut => VT.[Friend]OnUpdateColorKey(&this, pKey, dwColor);

	public HRESULT OnUpdateSize(uint32 dwWidth, uint32 dwHeight, uint32 dwARWidth, uint32 dwARHeight) mut => VT.[Friend]OnUpdateSize(&this, dwWidth, dwHeight, dwARWidth, dwARHeight);
}

[CRepr]struct IBDA_NetworkProvider : IUnknown
{
	public new const Guid IID = .(0xfd501041, 0x8ebe, 0x11ce, 0x81, 0x83, 0x00, 0xaa, 0x00, 0x57, 0x7d, 0xa2);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IUnknown.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32 ulSignalSource) PutSignalSource;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32* pulSignalSource) GetSignalSource;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, Guid* pguidNetworkType) GetNetworkType;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, in Guid guidTuningSpace) PutTuningSpace;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, Guid* pguidTuingSpace) GetTuningSpace;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IUnknown* pUnkFilterControl, uint32* ppvRegisitrationContext) RegisterDeviceFilter;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32 pvRegistrationContext) UnRegisterDeviceFilter;
	}


	public HRESULT PutSignalSource(uint32 ulSignalSource) mut => VT.[Friend]PutSignalSource(&this, ulSignalSource);

	public HRESULT GetSignalSource(uint32* pulSignalSource) mut => VT.[Friend]GetSignalSource(&this, pulSignalSource);

	public HRESULT GetNetworkType(Guid* pguidNetworkType) mut => VT.[Friend]GetNetworkType(&this, pguidNetworkType);

	public HRESULT PutTuningSpace(in Guid guidTuningSpace) mut => VT.[Friend]PutTuningSpace(&this, guidTuningSpace);

	public HRESULT GetTuningSpace(Guid* pguidTuingSpace) mut => VT.[Friend]GetTuningSpace(&this, pguidTuingSpace);

	public HRESULT RegisterDeviceFilter(IUnknown* pUnkFilterControl, uint32* ppvRegisitrationContext) mut => VT.[Friend]RegisterDeviceFilter(&this, pUnkFilterControl, ppvRegisitrationContext);

	public HRESULT UnRegisterDeviceFilter(uint32 pvRegistrationContext) mut => VT.[Friend]UnRegisterDeviceFilter(&this, pvRegistrationContext);
}

[CRepr]struct IBDA_EthernetFilter : IUnknown
{
	public new const Guid IID = .(0x71985f43, 0x1ca1, 0x11d3, 0x9c, 0xc8, 0x00, 0xc0, 0x4f, 0x79, 0x71, 0xe0);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IUnknown.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32* pulcbAddresses) GetMulticastListSize;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32 ulcbAddresses, uint8* pAddressList) PutMulticastList;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32* pulcbAddresses, uint8* pAddressList) GetMulticastList;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32 ulModeMask) PutMulticastMode;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32* pulModeMask) GetMulticastMode;
	}


	public HRESULT GetMulticastListSize(uint32* pulcbAddresses) mut => VT.[Friend]GetMulticastListSize(&this, pulcbAddresses);

	public HRESULT PutMulticastList(uint32 ulcbAddresses, uint8* pAddressList) mut => VT.[Friend]PutMulticastList(&this, ulcbAddresses, pAddressList);

	public HRESULT GetMulticastList(uint32* pulcbAddresses, uint8* pAddressList) mut => VT.[Friend]GetMulticastList(&this, pulcbAddresses, pAddressList);

	public HRESULT PutMulticastMode(uint32 ulModeMask) mut => VT.[Friend]PutMulticastMode(&this, ulModeMask);

	public HRESULT GetMulticastMode(uint32* pulModeMask) mut => VT.[Friend]GetMulticastMode(&this, pulModeMask);
}

[CRepr]struct IBDA_IPV4Filter : IUnknown
{
	public new const Guid IID = .(0x71985f44, 0x1ca1, 0x11d3, 0x9c, 0xc8, 0x00, 0xc0, 0x4f, 0x79, 0x71, 0xe0);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IUnknown.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32* pulcbAddresses) GetMulticastListSize;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32 ulcbAddresses, uint8* pAddressList) PutMulticastList;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32* pulcbAddresses, uint8* pAddressList) GetMulticastList;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32 ulModeMask) PutMulticastMode;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32* pulModeMask) GetMulticastMode;
	}


	public HRESULT GetMulticastListSize(uint32* pulcbAddresses) mut => VT.[Friend]GetMulticastListSize(&this, pulcbAddresses);

	public HRESULT PutMulticastList(uint32 ulcbAddresses, uint8* pAddressList) mut => VT.[Friend]PutMulticastList(&this, ulcbAddresses, pAddressList);

	public HRESULT GetMulticastList(uint32* pulcbAddresses, uint8* pAddressList) mut => VT.[Friend]GetMulticastList(&this, pulcbAddresses, pAddressList);

	public HRESULT PutMulticastMode(uint32 ulModeMask) mut => VT.[Friend]PutMulticastMode(&this, ulModeMask);

	public HRESULT GetMulticastMode(uint32* pulModeMask) mut => VT.[Friend]GetMulticastMode(&this, pulModeMask);
}

[CRepr]struct IBDA_IPV6Filter : IUnknown
{
	public new const Guid IID = .(0xe1785a74, 0x2a23, 0x4fb3, 0x92, 0x45, 0xa8, 0xf8, 0x80, 0x17, 0xef, 0x33);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IUnknown.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32* pulcbAddresses) GetMulticastListSize;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32 ulcbAddresses, uint8* pAddressList) PutMulticastList;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32* pulcbAddresses, uint8* pAddressList) GetMulticastList;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32 ulModeMask) PutMulticastMode;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32* pulModeMask) GetMulticastMode;
	}


	public HRESULT GetMulticastListSize(uint32* pulcbAddresses) mut => VT.[Friend]GetMulticastListSize(&this, pulcbAddresses);

	public HRESULT PutMulticastList(uint32 ulcbAddresses, uint8* pAddressList) mut => VT.[Friend]PutMulticastList(&this, ulcbAddresses, pAddressList);

	public HRESULT GetMulticastList(uint32* pulcbAddresses, uint8* pAddressList) mut => VT.[Friend]GetMulticastList(&this, pulcbAddresses, pAddressList);

	public HRESULT PutMulticastMode(uint32 ulModeMask) mut => VT.[Friend]PutMulticastMode(&this, ulModeMask);

	public HRESULT GetMulticastMode(uint32* pulModeMask) mut => VT.[Friend]GetMulticastMode(&this, pulModeMask);
}

[CRepr]struct IBDA_DeviceControl : IUnknown
{
	public new const Guid IID = .(0xfd0a5af3, 0xb41d, 0x11d2, 0x9c, 0x95, 0x00, 0xc0, 0x4f, 0x79, 0x71, 0xe0);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IUnknown.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self) StartChanges;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self) CheckChanges;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self) CommitChanges;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32* pState) GetChangeState;
	}


	public HRESULT StartChanges() mut => VT.[Friend]StartChanges(&this);

	public HRESULT CheckChanges() mut => VT.[Friend]CheckChanges(&this);

	public HRESULT CommitChanges() mut => VT.[Friend]CommitChanges(&this);

	public HRESULT GetChangeState(uint32* pState) mut => VT.[Friend]GetChangeState(&this, pState);
}

[CRepr]struct IBDA_PinControl : IUnknown
{
	public new const Guid IID = .(0x0ded49d5, 0xa8b7, 0x4d5d, 0x97, 0xa1, 0x12, 0xb0, 0xc1, 0x95, 0x87, 0x4d);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IUnknown.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32* pulPinID) GetPinID;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32* pulPinType) GetPinType;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32* pulRegistrationCtx) RegistrationContext;
	}


	public HRESULT GetPinID(uint32* pulPinID) mut => VT.[Friend]GetPinID(&this, pulPinID);

	public HRESULT GetPinType(uint32* pulPinType) mut => VT.[Friend]GetPinType(&this, pulPinType);

	public HRESULT RegistrationContext(uint32* pulRegistrationCtx) mut => VT.[Friend]RegistrationContext(&this, pulRegistrationCtx);
}

[CRepr]struct IBDA_SignalProperties : IUnknown
{
	public new const Guid IID = .(0xd2f1644b, 0xb409, 0x11d2, 0xbc, 0x69, 0x00, 0xa0, 0xc9, 0xee, 0x9e, 0x16);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IUnknown.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, in Guid guidNetworkType) PutNetworkType;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, Guid* pguidNetworkType) GetNetworkType;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32 ulSignalSource) PutSignalSource;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32* pulSignalSource) GetSignalSource;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, in Guid guidTuningSpace) PutTuningSpace;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, Guid* pguidTuingSpace) GetTuningSpace;
	}


	public HRESULT PutNetworkType(in Guid guidNetworkType) mut => VT.[Friend]PutNetworkType(&this, guidNetworkType);

	public HRESULT GetNetworkType(Guid* pguidNetworkType) mut => VT.[Friend]GetNetworkType(&this, pguidNetworkType);

	public HRESULT PutSignalSource(uint32 ulSignalSource) mut => VT.[Friend]PutSignalSource(&this, ulSignalSource);

	public HRESULT GetSignalSource(uint32* pulSignalSource) mut => VT.[Friend]GetSignalSource(&this, pulSignalSource);

	public HRESULT PutTuningSpace(in Guid guidTuningSpace) mut => VT.[Friend]PutTuningSpace(&this, guidTuningSpace);

	public HRESULT GetTuningSpace(Guid* pguidTuingSpace) mut => VT.[Friend]GetTuningSpace(&this, pguidTuingSpace);
}

[CRepr]struct IBDA_SignalStatistics : IUnknown
{
	public new const Guid IID = .(0x1347d106, 0xcf3a, 0x428a, 0xa5, 0xcb, 0xac, 0x0d, 0x9a, 0x2a, 0x43, 0x38);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IUnknown.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 lDbStrength) put_SignalStrength;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* plDbStrength) get_SignalStrength;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 lPercentQuality) put_SignalQuality;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* plPercentQuality) get_SignalQuality;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BOOLEAN fPresent) put_SignalPresent;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint8* pfPresent) get_SignalPresent;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BOOLEAN fLocked) put_SignalLocked;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint8* pfLocked) get_SignalLocked;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 lmsSampleTime) put_SampleTime;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* plmsSampleTime) get_SampleTime;
	}


	public HRESULT put_SignalStrength(int32 lDbStrength) mut => VT.[Friend]put_SignalStrength(&this, lDbStrength);

	public HRESULT get_SignalStrength(int32* plDbStrength) mut => VT.[Friend]get_SignalStrength(&this, plDbStrength);

	public HRESULT put_SignalQuality(int32 lPercentQuality) mut => VT.[Friend]put_SignalQuality(&this, lPercentQuality);

	public HRESULT get_SignalQuality(int32* plPercentQuality) mut => VT.[Friend]get_SignalQuality(&this, plPercentQuality);

	public HRESULT put_SignalPresent(BOOLEAN fPresent) mut => VT.[Friend]put_SignalPresent(&this, fPresent);

	public HRESULT get_SignalPresent(uint8* pfPresent) mut => VT.[Friend]get_SignalPresent(&this, pfPresent);

	public HRESULT put_SignalLocked(BOOLEAN fLocked) mut => VT.[Friend]put_SignalLocked(&this, fLocked);

	public HRESULT get_SignalLocked(uint8* pfLocked) mut => VT.[Friend]get_SignalLocked(&this, pfLocked);

	public HRESULT put_SampleTime(int32 lmsSampleTime) mut => VT.[Friend]put_SampleTime(&this, lmsSampleTime);

	public HRESULT get_SampleTime(int32* plmsSampleTime) mut => VT.[Friend]get_SampleTime(&this, plmsSampleTime);
}

[CRepr]struct IBDA_Topology : IUnknown
{
	public new const Guid IID = .(0x79b56888, 0x7fea, 0x4690, 0xb4, 0x5d, 0x38, 0xfd, 0x3c, 0x78, 0x49, 0xbe);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IUnknown.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32* pulcNodeTypes, uint32 ulcNodeTypesMax, uint32* rgulNodeTypes) GetNodeTypes;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32* ulcNodeDescriptors, uint32 ulcNodeDescriptorsMax, BDANODE_DESCRIPTOR* rgNodeDescriptors) GetNodeDescriptors;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32 ulNodeType, uint32* pulcInterfaces, uint32 ulcInterfacesMax, Guid* rgguidInterfaces) GetNodeInterfaces;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32* pulcPinTypes, uint32 ulcPinTypesMax, uint32* rgulPinTypes) GetPinTypes;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32* pulcConnections, uint32 ulcConnectionsMax, BDA_TEMPLATE_CONNECTION* rgConnections) GetTemplateConnections;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32 ulPinType, uint32* pulPinId) CreatePin;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32 ulPinId) DeletePin;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32 ulPinId, AM_MEDIA_TYPE* pMediaType) SetMediaType;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32 ulPinId, REGPINMEDIUM* pMedium) SetMedium;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32 ulInputPinId, uint32 ulOutputPinId) CreateTopology;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32 ulInputPinId, uint32 ulOutputPinId, uint32 ulNodeType, IUnknown** ppControlNode) GetControlNode;
	}


	public HRESULT GetNodeTypes(uint32* pulcNodeTypes, uint32 ulcNodeTypesMax, uint32* rgulNodeTypes) mut => VT.[Friend]GetNodeTypes(&this, pulcNodeTypes, ulcNodeTypesMax, rgulNodeTypes);

	public HRESULT GetNodeDescriptors(uint32* ulcNodeDescriptors, uint32 ulcNodeDescriptorsMax, BDANODE_DESCRIPTOR* rgNodeDescriptors) mut => VT.[Friend]GetNodeDescriptors(&this, ulcNodeDescriptors, ulcNodeDescriptorsMax, rgNodeDescriptors);

	public HRESULT GetNodeInterfaces(uint32 ulNodeType, uint32* pulcInterfaces, uint32 ulcInterfacesMax, Guid* rgguidInterfaces) mut => VT.[Friend]GetNodeInterfaces(&this, ulNodeType, pulcInterfaces, ulcInterfacesMax, rgguidInterfaces);

	public HRESULT GetPinTypes(uint32* pulcPinTypes, uint32 ulcPinTypesMax, uint32* rgulPinTypes) mut => VT.[Friend]GetPinTypes(&this, pulcPinTypes, ulcPinTypesMax, rgulPinTypes);

	public HRESULT GetTemplateConnections(uint32* pulcConnections, uint32 ulcConnectionsMax, BDA_TEMPLATE_CONNECTION* rgConnections) mut => VT.[Friend]GetTemplateConnections(&this, pulcConnections, ulcConnectionsMax, rgConnections);

	public HRESULT CreatePin(uint32 ulPinType, uint32* pulPinId) mut => VT.[Friend]CreatePin(&this, ulPinType, pulPinId);

	public HRESULT DeletePin(uint32 ulPinId) mut => VT.[Friend]DeletePin(&this, ulPinId);

	public HRESULT SetMediaType(uint32 ulPinId, AM_MEDIA_TYPE* pMediaType) mut => VT.[Friend]SetMediaType(&this, ulPinId, pMediaType);

	public HRESULT SetMedium(uint32 ulPinId, REGPINMEDIUM* pMedium) mut => VT.[Friend]SetMedium(&this, ulPinId, pMedium);

	public HRESULT CreateTopology(uint32 ulInputPinId, uint32 ulOutputPinId) mut => VT.[Friend]CreateTopology(&this, ulInputPinId, ulOutputPinId);

	public HRESULT GetControlNode(uint32 ulInputPinId, uint32 ulOutputPinId, uint32 ulNodeType, IUnknown** ppControlNode) mut => VT.[Friend]GetControlNode(&this, ulInputPinId, ulOutputPinId, ulNodeType, ppControlNode);
}

[CRepr]struct IBDA_VoidTransform : IUnknown
{
	public new const Guid IID = .(0x71985f46, 0x1ca1, 0x11d3, 0x9c, 0xc8, 0x00, 0xc0, 0x4f, 0x79, 0x71, 0xe0);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IUnknown.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self) Start;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self) Stop;
	}


	public HRESULT Start() mut => VT.[Friend]Start(&this);

	public HRESULT Stop() mut => VT.[Friend]Stop(&this);
}

[CRepr]struct IBDA_NullTransform : IUnknown
{
	public new const Guid IID = .(0xddf15b0d, 0xbd25, 0x11d2, 0x9c, 0xa0, 0x00, 0xc0, 0x4f, 0x79, 0x71, 0xe0);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IUnknown.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self) Start;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self) Stop;
	}


	public HRESULT Start() mut => VT.[Friend]Start(&this);

	public HRESULT Stop() mut => VT.[Friend]Stop(&this);
}

[CRepr]struct IBDA_FrequencyFilter : IUnknown
{
	public new const Guid IID = .(0x71985f47, 0x1ca1, 0x11d3, 0x9c, 0xc8, 0x00, 0xc0, 0x4f, 0x79, 0x71, 0xe0);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IUnknown.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32 ulTransponder) put_Autotune;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32* pulTransponder) get_Autotune;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32 ulFrequency) put_Frequency;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32* pulFrequency) get_Frequency;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, Polarisation Polarity) put_Polarity;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, Polarisation* pPolarity) get_Polarity;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32 ulRange) put_Range;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32* pulRange) get_Range;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32 ulBandwidth) put_Bandwidth;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32* pulBandwidth) get_Bandwidth;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32 ulMultiplier) put_FrequencyMultiplier;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32* pulMultiplier) get_FrequencyMultiplier;
	}


	public HRESULT put_Autotune(uint32 ulTransponder) mut => VT.[Friend]put_Autotune(&this, ulTransponder);

	public HRESULT get_Autotune(uint32* pulTransponder) mut => VT.[Friend]get_Autotune(&this, pulTransponder);

	public HRESULT put_Frequency(uint32 ulFrequency) mut => VT.[Friend]put_Frequency(&this, ulFrequency);

	public HRESULT get_Frequency(uint32* pulFrequency) mut => VT.[Friend]get_Frequency(&this, pulFrequency);

	public HRESULT put_Polarity(Polarisation Polarity) mut => VT.[Friend]put_Polarity(&this, Polarity);

	public HRESULT get_Polarity(Polarisation* pPolarity) mut => VT.[Friend]get_Polarity(&this, pPolarity);

	public HRESULT put_Range(uint32 ulRange) mut => VT.[Friend]put_Range(&this, ulRange);

	public HRESULT get_Range(uint32* pulRange) mut => VT.[Friend]get_Range(&this, pulRange);

	public HRESULT put_Bandwidth(uint32 ulBandwidth) mut => VT.[Friend]put_Bandwidth(&this, ulBandwidth);

	public HRESULT get_Bandwidth(uint32* pulBandwidth) mut => VT.[Friend]get_Bandwidth(&this, pulBandwidth);

	public HRESULT put_FrequencyMultiplier(uint32 ulMultiplier) mut => VT.[Friend]put_FrequencyMultiplier(&this, ulMultiplier);

	public HRESULT get_FrequencyMultiplier(uint32* pulMultiplier) mut => VT.[Friend]get_FrequencyMultiplier(&this, pulMultiplier);
}

[CRepr]struct IBDA_LNBInfo : IUnknown
{
	public new const Guid IID = .(0x992cf102, 0x49f9, 0x4719, 0xa6, 0x64, 0xc4, 0xf2, 0x3e, 0x24, 0x08, 0xf4);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IUnknown.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32 ulLOFLow) put_LocalOscilatorFrequencyLowBand;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32* pulLOFLow) get_LocalOscilatorFrequencyLowBand;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32 ulLOFHigh) put_LocalOscilatorFrequencyHighBand;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32* pulLOFHigh) get_LocalOscilatorFrequencyHighBand;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32 ulSwitchFrequency) put_HighLowSwitchFrequency;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32* pulSwitchFrequency) get_HighLowSwitchFrequency;
	}


	public HRESULT put_LocalOscilatorFrequencyLowBand(uint32 ulLOFLow) mut => VT.[Friend]put_LocalOscilatorFrequencyLowBand(&this, ulLOFLow);

	public HRESULT get_LocalOscilatorFrequencyLowBand(uint32* pulLOFLow) mut => VT.[Friend]get_LocalOscilatorFrequencyLowBand(&this, pulLOFLow);

	public HRESULT put_LocalOscilatorFrequencyHighBand(uint32 ulLOFHigh) mut => VT.[Friend]put_LocalOscilatorFrequencyHighBand(&this, ulLOFHigh);

	public HRESULT get_LocalOscilatorFrequencyHighBand(uint32* pulLOFHigh) mut => VT.[Friend]get_LocalOscilatorFrequencyHighBand(&this, pulLOFHigh);

	public HRESULT put_HighLowSwitchFrequency(uint32 ulSwitchFrequency) mut => VT.[Friend]put_HighLowSwitchFrequency(&this, ulSwitchFrequency);

	public HRESULT get_HighLowSwitchFrequency(uint32* pulSwitchFrequency) mut => VT.[Friend]get_HighLowSwitchFrequency(&this, pulSwitchFrequency);
}

[CRepr]struct IBDA_DiseqCommand : IUnknown
{
	public new const Guid IID = .(0xf84e2ab0, 0x3c6b, 0x45e3, 0xa0, 0xfc, 0x86, 0x69, 0xd4, 0xb8, 0x1f, 0x11);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IUnknown.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BOOLEAN bEnable) put_EnableDiseqCommands;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32 ulLNBSource) put_DiseqLNBSource;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BOOLEAN bUseToneBurst) put_DiseqUseToneBurst;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32 ulRepeats) put_DiseqRepeats;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32 ulRequestId, uint32 ulcbCommandLen, uint8* pbCommand) put_DiseqSendCommand;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32 ulRequestId, uint32* pulcbResponseLen, uint8* pbResponse) get_DiseqResponse;
	}


	public HRESULT put_EnableDiseqCommands(BOOLEAN bEnable) mut => VT.[Friend]put_EnableDiseqCommands(&this, bEnable);

	public HRESULT put_DiseqLNBSource(uint32 ulLNBSource) mut => VT.[Friend]put_DiseqLNBSource(&this, ulLNBSource);

	public HRESULT put_DiseqUseToneBurst(BOOLEAN bUseToneBurst) mut => VT.[Friend]put_DiseqUseToneBurst(&this, bUseToneBurst);

	public HRESULT put_DiseqRepeats(uint32 ulRepeats) mut => VT.[Friend]put_DiseqRepeats(&this, ulRepeats);

	public HRESULT put_DiseqSendCommand(uint32 ulRequestId, uint32 ulcbCommandLen, uint8* pbCommand) mut => VT.[Friend]put_DiseqSendCommand(&this, ulRequestId, ulcbCommandLen, pbCommand);

	public HRESULT get_DiseqResponse(uint32 ulRequestId, uint32* pulcbResponseLen, uint8* pbResponse) mut => VT.[Friend]get_DiseqResponse(&this, ulRequestId, pulcbResponseLen, pbResponse);
}

[CRepr]struct IBDA_AutoDemodulate : IUnknown
{
	public new const Guid IID = .(0xddf15b12, 0xbd25, 0x11d2, 0x9c, 0xa0, 0x00, 0xc0, 0x4f, 0x79, 0x71, 0xe0);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IUnknown.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self) put_AutoDemodulate;
	}


	public HRESULT put_AutoDemodulate() mut => VT.[Friend]put_AutoDemodulate(&this);
}

[CRepr]struct IBDA_AutoDemodulateEx : IBDA_AutoDemodulate
{
	public new const Guid IID = .(0x34518d13, 0x1182, 0x48e6, 0xb2, 0x8f, 0xb2, 0x49, 0x87, 0x78, 0x73, 0x26);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IBDA_AutoDemodulate.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32 ulcDeviceNodeTypesMax, uint32* pulcDeviceNodeTypes, Guid* pguidDeviceNodeTypes) get_SupportedDeviceNodeTypes;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32* pulAMTunerModeType, uint32* pulAnalogVideoStandard) get_SupportedVideoFormats;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32* pulCompositeCount, uint32* pulSvideoCount) get_AuxInputCount;
	}


	public HRESULT get_SupportedDeviceNodeTypes(uint32 ulcDeviceNodeTypesMax, uint32* pulcDeviceNodeTypes, Guid* pguidDeviceNodeTypes) mut => VT.[Friend]get_SupportedDeviceNodeTypes(&this, ulcDeviceNodeTypesMax, pulcDeviceNodeTypes, pguidDeviceNodeTypes);

	public HRESULT get_SupportedVideoFormats(uint32* pulAMTunerModeType, uint32* pulAnalogVideoStandard) mut => VT.[Friend]get_SupportedVideoFormats(&this, pulAMTunerModeType, pulAnalogVideoStandard);

	public HRESULT get_AuxInputCount(uint32* pulCompositeCount, uint32* pulSvideoCount) mut => VT.[Friend]get_AuxInputCount(&this, pulCompositeCount, pulSvideoCount);
}

[CRepr]struct IBDA_DigitalDemodulator : IUnknown
{
	public new const Guid IID = .(0xef30f379, 0x985b, 0x4d10, 0xb6, 0x40, 0xa7, 0x9d, 0x5e, 0x04, 0xe1, 0xe0);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IUnknown.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, ModulationType* pModulationType) put_ModulationType;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, ModulationType* pModulationType) get_ModulationType;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, FECMethod* pFECMethod) put_InnerFECMethod;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, FECMethod* pFECMethod) get_InnerFECMethod;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BinaryConvolutionCodeRate* pFECRate) put_InnerFECRate;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BinaryConvolutionCodeRate* pFECRate) get_InnerFECRate;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, FECMethod* pFECMethod) put_OuterFECMethod;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, FECMethod* pFECMethod) get_OuterFECMethod;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BinaryConvolutionCodeRate* pFECRate) put_OuterFECRate;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BinaryConvolutionCodeRate* pFECRate) get_OuterFECRate;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32* pSymbolRate) put_SymbolRate;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32* pSymbolRate) get_SymbolRate;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, SpectralInversion* pSpectralInversion) put_SpectralInversion;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, SpectralInversion* pSpectralInversion) get_SpectralInversion;
	}


	public HRESULT put_ModulationType(ModulationType* pModulationType) mut => VT.[Friend]put_ModulationType(&this, pModulationType);

	public HRESULT get_ModulationType(ModulationType* pModulationType) mut => VT.[Friend]get_ModulationType(&this, pModulationType);

	public HRESULT put_InnerFECMethod(FECMethod* pFECMethod) mut => VT.[Friend]put_InnerFECMethod(&this, pFECMethod);

	public HRESULT get_InnerFECMethod(FECMethod* pFECMethod) mut => VT.[Friend]get_InnerFECMethod(&this, pFECMethod);

	public HRESULT put_InnerFECRate(BinaryConvolutionCodeRate* pFECRate) mut => VT.[Friend]put_InnerFECRate(&this, pFECRate);

	public HRESULT get_InnerFECRate(BinaryConvolutionCodeRate* pFECRate) mut => VT.[Friend]get_InnerFECRate(&this, pFECRate);

	public HRESULT put_OuterFECMethod(FECMethod* pFECMethod) mut => VT.[Friend]put_OuterFECMethod(&this, pFECMethod);

	public HRESULT get_OuterFECMethod(FECMethod* pFECMethod) mut => VT.[Friend]get_OuterFECMethod(&this, pFECMethod);

	public HRESULT put_OuterFECRate(BinaryConvolutionCodeRate* pFECRate) mut => VT.[Friend]put_OuterFECRate(&this, pFECRate);

	public HRESULT get_OuterFECRate(BinaryConvolutionCodeRate* pFECRate) mut => VT.[Friend]get_OuterFECRate(&this, pFECRate);

	public HRESULT put_SymbolRate(uint32* pSymbolRate) mut => VT.[Friend]put_SymbolRate(&this, pSymbolRate);

	public HRESULT get_SymbolRate(uint32* pSymbolRate) mut => VT.[Friend]get_SymbolRate(&this, pSymbolRate);

	public HRESULT put_SpectralInversion(SpectralInversion* pSpectralInversion) mut => VT.[Friend]put_SpectralInversion(&this, pSpectralInversion);

	public HRESULT get_SpectralInversion(SpectralInversion* pSpectralInversion) mut => VT.[Friend]get_SpectralInversion(&this, pSpectralInversion);
}

[CRepr]struct IBDA_DigitalDemodulator2 : IBDA_DigitalDemodulator
{
	public new const Guid IID = .(0x525ed3ee, 0x5cf3, 0x4e1e, 0x9a, 0x06, 0x53, 0x68, 0xa8, 0x4f, 0x9a, 0x6e);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IBDA_DigitalDemodulator.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, GuardInterval* pGuardInterval) put_GuardInterval;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, GuardInterval* pGuardInterval) get_GuardInterval;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, TransmissionMode* pTransmissionMode) put_TransmissionMode;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, TransmissionMode* pTransmissionMode) get_TransmissionMode;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, RollOff* pRollOff) put_RollOff;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, RollOff* pRollOff) get_RollOff;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, Pilot* pPilot) put_Pilot;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, Pilot* pPilot) get_Pilot;
	}


	public HRESULT put_GuardInterval(GuardInterval* pGuardInterval) mut => VT.[Friend]put_GuardInterval(&this, pGuardInterval);

	public HRESULT get_GuardInterval(GuardInterval* pGuardInterval) mut => VT.[Friend]get_GuardInterval(&this, pGuardInterval);

	public HRESULT put_TransmissionMode(TransmissionMode* pTransmissionMode) mut => VT.[Friend]put_TransmissionMode(&this, pTransmissionMode);

	public HRESULT get_TransmissionMode(TransmissionMode* pTransmissionMode) mut => VT.[Friend]get_TransmissionMode(&this, pTransmissionMode);

	public HRESULT put_RollOff(RollOff* pRollOff) mut => VT.[Friend]put_RollOff(&this, pRollOff);

	public HRESULT get_RollOff(RollOff* pRollOff) mut => VT.[Friend]get_RollOff(&this, pRollOff);

	public HRESULT put_Pilot(Pilot* pPilot) mut => VT.[Friend]put_Pilot(&this, pPilot);

	public HRESULT get_Pilot(Pilot* pPilot) mut => VT.[Friend]get_Pilot(&this, pPilot);
}

[CRepr]struct IBDA_DigitalDemodulator3 : IBDA_DigitalDemodulator2
{
	public new const Guid IID = .(0x13f19604, 0x7d32, 0x4359, 0x93, 0xa2, 0xa0, 0x52, 0x05, 0xd9, 0x0a, 0xc9);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IBDA_DigitalDemodulator2.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BDA_SIGNAL_TIMEOUTS* pSignalTimeouts) put_SignalTimeouts;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BDA_SIGNAL_TIMEOUTS* pSignalTimeouts) get_SignalTimeouts;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32* pPLPNumber) put_PLPNumber;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32* pPLPNumber) get_PLPNumber;
	}


	public HRESULT put_SignalTimeouts(BDA_SIGNAL_TIMEOUTS* pSignalTimeouts) mut => VT.[Friend]put_SignalTimeouts(&this, pSignalTimeouts);

	public HRESULT get_SignalTimeouts(BDA_SIGNAL_TIMEOUTS* pSignalTimeouts) mut => VT.[Friend]get_SignalTimeouts(&this, pSignalTimeouts);

	public HRESULT put_PLPNumber(uint32* pPLPNumber) mut => VT.[Friend]put_PLPNumber(&this, pPLPNumber);

	public HRESULT get_PLPNumber(uint32* pPLPNumber) mut => VT.[Friend]get_PLPNumber(&this, pPLPNumber);
}

[CRepr]struct ICCSubStreamFiltering : IUnknown
{
	public new const Guid IID = .(0x4b2bd7ea, 0x8347, 0x467b, 0x8d, 0xbf, 0x62, 0xf7, 0x84, 0x92, 0x9c, 0xc3);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IUnknown.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* pTypes) get_SubstreamTypes;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 Types) put_SubstreamTypes;
	}


	public HRESULT get_SubstreamTypes(int32* pTypes) mut => VT.[Friend]get_SubstreamTypes(&this, pTypes);

	public HRESULT put_SubstreamTypes(int32 Types) mut => VT.[Friend]put_SubstreamTypes(&this, Types);
}

[CRepr]struct IBDA_IPSinkControl : IUnknown
{
	public new const Guid IID = .(0x3f4dc8e2, 0x4050, 0x11d3, 0x8f, 0x4b, 0x00, 0xc0, 0x4f, 0x79, 0x71, 0xe2);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IUnknown.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32* pulcbSize, uint8** pbBuffer) GetMulticastList;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32* pulcbSize, uint8** pbBuffer) GetAdapterIPAddress;
	}


	public HRESULT GetMulticastList(uint32* pulcbSize, uint8** pbBuffer) mut => VT.[Friend]GetMulticastList(&this, pulcbSize, pbBuffer);

	public HRESULT GetAdapterIPAddress(uint32* pulcbSize, uint8** pbBuffer) mut => VT.[Friend]GetAdapterIPAddress(&this, pulcbSize, pbBuffer);
}

[CRepr]struct IBDA_IPSinkInfo : IUnknown
{
	public new const Guid IID = .(0xa750108f, 0x492e, 0x4d51, 0x95, 0xf7, 0x64, 0x9b, 0x23, 0xff, 0x7a, 0xd7);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IUnknown.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32* pulcbAddresses, uint8** ppbAddressList) get_MulticastList;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* pbstrBuffer) get_AdapterIPAddress;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* pbstrBuffer) get_AdapterDescription;
	}


	public HRESULT get_MulticastList(uint32* pulcbAddresses, uint8** ppbAddressList) mut => VT.[Friend]get_MulticastList(&this, pulcbAddresses, ppbAddressList);

	public HRESULT get_AdapterIPAddress(BSTR* pbstrBuffer) mut => VT.[Friend]get_AdapterIPAddress(&this, pbstrBuffer);

	public HRESULT get_AdapterDescription(BSTR* pbstrBuffer) mut => VT.[Friend]get_AdapterDescription(&this, pbstrBuffer);
}

[CRepr]struct IEnumPIDMap : IUnknown
{
	public new const Guid IID = .(0xafb6c2a2, 0x2c41, 0x11d3, 0x8a, 0x60, 0x00, 0x00, 0xf8, 0x1e, 0x0e, 0x4a);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IUnknown.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32 cRequest, PID_MAP* pPIDMap, uint32* pcReceived) Next;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32 cRecords) Skip;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self) Reset;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IEnumPIDMap** ppIEnumPIDMap) Clone;
	}


	public HRESULT Next(uint32 cRequest, PID_MAP* pPIDMap, uint32* pcReceived) mut => VT.[Friend]Next(&this, cRequest, pPIDMap, pcReceived);

	public HRESULT Skip(uint32 cRecords) mut => VT.[Friend]Skip(&this, cRecords);

	public HRESULT Reset() mut => VT.[Friend]Reset(&this);

	public HRESULT Clone(IEnumPIDMap** ppIEnumPIDMap) mut => VT.[Friend]Clone(&this, ppIEnumPIDMap);
}

[CRepr]struct IMPEG2PIDMap : IUnknown
{
	public new const Guid IID = .(0xafb6c2a1, 0x2c41, 0x11d3, 0x8a, 0x60, 0x00, 0x00, 0xf8, 0x1e, 0x0e, 0x4a);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IUnknown.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32 culPID, uint32* pulPID, MEDIA_SAMPLE_CONTENT MediaSampleContent) MapPID;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32 culPID, uint32* pulPID) UnmapPID;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IEnumPIDMap** pIEnumPIDMap) EnumPIDMap;
	}


	public HRESULT MapPID(uint32 culPID, uint32* pulPID, MEDIA_SAMPLE_CONTENT MediaSampleContent) mut => VT.[Friend]MapPID(&this, culPID, pulPID, MediaSampleContent);

	public HRESULT UnmapPID(uint32 culPID, uint32* pulPID) mut => VT.[Friend]UnmapPID(&this, culPID, pulPID);

	public HRESULT EnumPIDMap(IEnumPIDMap** pIEnumPIDMap) mut => VT.[Friend]EnumPIDMap(&this, pIEnumPIDMap);
}

[CRepr]struct IFrequencyMap : IUnknown
{
	public new const Guid IID = .(0x06fb45c1, 0x693c, 0x4ea7, 0xb7, 0x9f, 0x7a, 0x6a, 0x54, 0xd8, 0xde, 0xf2);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IUnknown.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32* ulCount, uint32** ppulList) get_FrequencyMapping;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32 ulCount, uint32* pList) put_FrequencyMapping;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32* pulCountryCode) get_CountryCode;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32 ulCountryCode) put_CountryCode;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32 ulCountryCode, uint32* pulCount, uint32** ppulList) get_DefaultFrequencyMapping;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32* pulCount, uint32** ppulList) get_CountryCodeList;
	}


	public HRESULT get_FrequencyMapping(uint32* ulCount, uint32** ppulList) mut => VT.[Friend]get_FrequencyMapping(&this, ulCount, ppulList);

	public HRESULT put_FrequencyMapping(uint32 ulCount, uint32* pList) mut => VT.[Friend]put_FrequencyMapping(&this, ulCount, pList);

	public HRESULT get_CountryCode(uint32* pulCountryCode) mut => VT.[Friend]get_CountryCode(&this, pulCountryCode);

	public HRESULT put_CountryCode(uint32 ulCountryCode) mut => VT.[Friend]put_CountryCode(&this, ulCountryCode);

	public HRESULT get_DefaultFrequencyMapping(uint32 ulCountryCode, uint32* pulCount, uint32** ppulList) mut => VT.[Friend]get_DefaultFrequencyMapping(&this, ulCountryCode, pulCount, ppulList);

	public HRESULT get_CountryCodeList(uint32* pulCount, uint32** ppulList) mut => VT.[Friend]get_CountryCodeList(&this, pulCount, ppulList);
}

[CRepr]struct IBDA_EasMessage : IUnknown
{
	public new const Guid IID = .(0xd806973d, 0x3ebe, 0x46de, 0x8f, 0xbb, 0x63, 0x58, 0xfe, 0x78, 0x42, 0x08);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IUnknown.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32 ulEventID, IUnknown** ppEASObject) get_EasMessage;
	}


	public HRESULT get_EasMessage(uint32 ulEventID, IUnknown** ppEASObject) mut => VT.[Friend]get_EasMessage(&this, ulEventID, ppEASObject);
}

[CRepr]struct IBDA_TransportStreamInfo : IUnknown
{
	public new const Guid IID = .(0x8e882535, 0x5f86, 0x47ab, 0x86, 0xcf, 0xc2, 0x81, 0xa7, 0x2a, 0x05, 0x49);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IUnknown.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32* pPatTickCount) get_PatTableTickCount;
	}


	public HRESULT get_PatTableTickCount(uint32* pPatTickCount) mut => VT.[Friend]get_PatTableTickCount(&this, pPatTickCount);
}

[CRepr]struct IBDA_ConditionalAccess : IUnknown
{
	public new const Guid IID = .(0xcd51f1e0, 0x7be9, 0x4123, 0x84, 0x82, 0xa2, 0xa7, 0x96, 0xc0, 0xa6, 0xb0);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IUnknown.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, SmartCardStatusType* pCardStatus, SmartCardAssociationType* pCardAssociation, BSTR* pbstrCardError, int16* pfOOBLocked) get_SmartCardStatus;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* pbstrCardName, BSTR* pbstrCardManufacturer, int16* pfDaylightSavings, uint8* pbyRatingRegion, int32* plTimeZoneOffsetMinutes, BSTR* pbstrLanguage, EALocationCodeType* pEALocationCode) get_SmartCardInfo;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32* pulcApplications, uint32 ulcApplicationsMax, SmartCardApplication* rgApplications) get_SmartCardApplications;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint16 usVirtualChannel, EntitlementType* pEntitlement) get_Entitlement;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint16 usVirtualChannel) TuneByChannel;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint16 usProgramNumber) SetProgram;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint16 usProgramNumber) AddProgram;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint16 usProgramNumber) RemoveProgram;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint8 byDialogNumber, BSTR* pbstrURL) GetModuleUI;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint8 byDialogNumber, UICloseReasonType CloseReason) InformUIClosed;
	}


	public HRESULT get_SmartCardStatus(SmartCardStatusType* pCardStatus, SmartCardAssociationType* pCardAssociation, BSTR* pbstrCardError, int16* pfOOBLocked) mut => VT.[Friend]get_SmartCardStatus(&this, pCardStatus, pCardAssociation, pbstrCardError, pfOOBLocked);

	public HRESULT get_SmartCardInfo(BSTR* pbstrCardName, BSTR* pbstrCardManufacturer, int16* pfDaylightSavings, uint8* pbyRatingRegion, int32* plTimeZoneOffsetMinutes, BSTR* pbstrLanguage, EALocationCodeType* pEALocationCode) mut => VT.[Friend]get_SmartCardInfo(&this, pbstrCardName, pbstrCardManufacturer, pfDaylightSavings, pbyRatingRegion, plTimeZoneOffsetMinutes, pbstrLanguage, pEALocationCode);

	public HRESULT get_SmartCardApplications(uint32* pulcApplications, uint32 ulcApplicationsMax, SmartCardApplication* rgApplications) mut => VT.[Friend]get_SmartCardApplications(&this, pulcApplications, ulcApplicationsMax, rgApplications);

	public HRESULT get_Entitlement(uint16 usVirtualChannel, EntitlementType* pEntitlement) mut => VT.[Friend]get_Entitlement(&this, usVirtualChannel, pEntitlement);

	public HRESULT TuneByChannel(uint16 usVirtualChannel) mut => VT.[Friend]TuneByChannel(&this, usVirtualChannel);

	public HRESULT SetProgram(uint16 usProgramNumber) mut => VT.[Friend]SetProgram(&this, usProgramNumber);

	public HRESULT AddProgram(uint16 usProgramNumber) mut => VT.[Friend]AddProgram(&this, usProgramNumber);

	public HRESULT RemoveProgram(uint16 usProgramNumber) mut => VT.[Friend]RemoveProgram(&this, usProgramNumber);

	public HRESULT GetModuleUI(uint8 byDialogNumber, BSTR* pbstrURL) mut => VT.[Friend]GetModuleUI(&this, byDialogNumber, pbstrURL);

	public HRESULT InformUIClosed(uint8 byDialogNumber, UICloseReasonType CloseReason) mut => VT.[Friend]InformUIClosed(&this, byDialogNumber, CloseReason);
}

[CRepr]struct IBDA_DiagnosticProperties : IPropertyBag
{
	public new const Guid IID = .(0x20e80cb5, 0xc543, 0x4c1b, 0x8e, 0xb3, 0x49, 0xe7, 0x19, 0xee, 0xe7, 0xd4);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IPropertyBag.VTable
	{
	}

}

[CRepr]struct IBDA_DRM : IUnknown
{
	public new const Guid IID = .(0xf98d88b0, 0x1992, 0x4cd6, 0xa6, 0xd9, 0xb9, 0xaf, 0xab, 0x99, 0x33, 0x0d);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IUnknown.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32* pdwStatus, HRESULT* phError) GetDRMPairingStatus;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BOOL fSync) PerformDRMPairing;
	}


	public HRESULT GetDRMPairingStatus(uint32* pdwStatus, HRESULT* phError) mut => VT.[Friend]GetDRMPairingStatus(&this, pdwStatus, phError);

	public HRESULT PerformDRMPairing(BOOL fSync) mut => VT.[Friend]PerformDRMPairing(&this, fSync);
}

[CRepr]struct IBDA_NameValueService : IUnknown
{
	public new const Guid IID = .(0x7f0b3150, 0x7b81, 0x4ad4, 0x98, 0xe3, 0x7e, 0x90, 0x97, 0x09, 0x43, 0x01);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IUnknown.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32 ulIndex, BSTR* pbstrName) GetValueNameByIndex;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR bstrName, BSTR bstrLanguage, BSTR* pbstrValue) GetValue;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32 ulDialogRequest, BSTR bstrLanguage, BSTR bstrName, BSTR bstrValue, uint32 ulReserved) SetValue;
	}


	public HRESULT GetValueNameByIndex(uint32 ulIndex, BSTR* pbstrName) mut => VT.[Friend]GetValueNameByIndex(&this, ulIndex, pbstrName);

	public HRESULT GetValue(BSTR bstrName, BSTR bstrLanguage, BSTR* pbstrValue) mut => VT.[Friend]GetValue(&this, bstrName, bstrLanguage, pbstrValue);

	public HRESULT SetValue(uint32 ulDialogRequest, BSTR bstrLanguage, BSTR bstrName, BSTR bstrValue, uint32 ulReserved) mut => VT.[Friend]SetValue(&this, ulDialogRequest, bstrLanguage, bstrName, bstrValue, ulReserved);
}

[CRepr]struct IBDA_ConditionalAccessEx : IUnknown
{
	public new const Guid IID = .(0x497c3418, 0x23cb, 0x44ba, 0xbb, 0x62, 0x76, 0x9f, 0x50, 0x6f, 0xce, 0xa7);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IUnknown.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32 ulDialogRequest, BSTR bstrLanguage, BDA_CONDITIONALACCESS_REQUESTTYPE RequestType, uint32 ulcbEntitlementTokenLen, uint8* pbEntitlementToken, uint32* pulDescrambleStatus) CheckEntitlementToken;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32 ulcbCaptureTokenLen, uint8* pbCaptureToken) SetCaptureToken;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32 ulDialogRequest, BSTR bstrLanguage, uint32 EventId) OpenBroadcastMmi;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32 ulDialogRequest, BSTR bstrLanguage, uint32 ulDialogNumber, BDA_CONDITIONALACCESS_MMICLOSEREASON ReasonCode, uint32* pulSessionResult) CloseMmiDialog;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32* pulDialogRequestNumber) CreateDialogRequestNumber;
	}


	public HRESULT CheckEntitlementToken(uint32 ulDialogRequest, BSTR bstrLanguage, BDA_CONDITIONALACCESS_REQUESTTYPE RequestType, uint32 ulcbEntitlementTokenLen, uint8* pbEntitlementToken, uint32* pulDescrambleStatus) mut => VT.[Friend]CheckEntitlementToken(&this, ulDialogRequest, bstrLanguage, RequestType, ulcbEntitlementTokenLen, pbEntitlementToken, pulDescrambleStatus);

	public HRESULT SetCaptureToken(uint32 ulcbCaptureTokenLen, uint8* pbCaptureToken) mut => VT.[Friend]SetCaptureToken(&this, ulcbCaptureTokenLen, pbCaptureToken);

	public HRESULT OpenBroadcastMmi(uint32 ulDialogRequest, BSTR bstrLanguage, uint32 EventId) mut => VT.[Friend]OpenBroadcastMmi(&this, ulDialogRequest, bstrLanguage, EventId);

	public HRESULT CloseMmiDialog(uint32 ulDialogRequest, BSTR bstrLanguage, uint32 ulDialogNumber, BDA_CONDITIONALACCESS_MMICLOSEREASON ReasonCode, uint32* pulSessionResult) mut => VT.[Friend]CloseMmiDialog(&this, ulDialogRequest, bstrLanguage, ulDialogNumber, ReasonCode, pulSessionResult);

	public HRESULT CreateDialogRequestNumber(uint32* pulDialogRequestNumber) mut => VT.[Friend]CreateDialogRequestNumber(&this, pulDialogRequestNumber);
}

[CRepr]struct IBDA_ISDBConditionalAccess : IUnknown
{
	public new const Guid IID = .(0x5e68c627, 0x16c2, 0x4e6c, 0xb1, 0xe2, 0xd0, 0x01, 0x70, 0xcd, 0xaa, 0x0f);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IUnknown.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32 ulRequestId, uint32 ulcbRequestBufferLen, uint8* pbRequestBuffer) SetIsdbCasRequest;
	}


	public HRESULT SetIsdbCasRequest(uint32 ulRequestId, uint32 ulcbRequestBufferLen, uint8* pbRequestBuffer) mut => VT.[Friend]SetIsdbCasRequest(&this, ulRequestId, ulcbRequestBufferLen, pbRequestBuffer);
}

[CRepr]struct IBDA_EventingService : IUnknown
{
	public new const Guid IID = .(0x207c413f, 0x00dc, 0x4c61, 0xba, 0xd6, 0x6f, 0xee, 0x1f, 0xf0, 0x70, 0x64);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IUnknown.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32 ulEventID, uint32 ulEventResult) CompleteEvent;
	}


	public HRESULT CompleteEvent(uint32 ulEventID, uint32 ulEventResult) mut => VT.[Friend]CompleteEvent(&this, ulEventID, ulEventResult);
}

[CRepr]struct IBDA_AUX : IUnknown
{
	public new const Guid IID = .(0x7def4c09, 0x6e66, 0x4567, 0xa8, 0x19, 0xf0, 0xe1, 0x7f, 0x4a, 0x81, 0xab);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IUnknown.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32* pdwNumAuxInputsBSTR) QueryCapabilities;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32 dwIndex, uint32* dwInputID, Guid* pConnectorType, uint32* ConnTypeNum, uint32* NumVideoStds, uint64* AnalogStds) EnumCapability;
	}


	public HRESULT QueryCapabilities(uint32* pdwNumAuxInputsBSTR) mut => VT.[Friend]QueryCapabilities(&this, pdwNumAuxInputsBSTR);

	public HRESULT EnumCapability(uint32 dwIndex, uint32* dwInputID, Guid* pConnectorType, uint32* ConnTypeNum, uint32* NumVideoStds, uint64* AnalogStds) mut => VT.[Friend]EnumCapability(&this, dwIndex, dwInputID, pConnectorType, ConnTypeNum, NumVideoStds, AnalogStds);
}

[CRepr]struct IBDA_Encoder : IUnknown
{
	public new const Guid IID = .(0x3a8bad59, 0x59fe, 0x4559, 0xa0, 0xba, 0x39, 0x6c, 0xfa, 0xa9, 0x8a, 0xe3);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IUnknown.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32* NumAudioFmts, uint32* NumVideoFmts) QueryCapabilities;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32 FmtIndex, uint32* MethodID, uint32* AlgorithmType, uint32* SamplingRate, uint32* BitDepth, uint32* NumChannels) EnumAudioCapability;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32 FmtIndex, uint32* MethodID, uint32* AlgorithmType, uint32* VerticalSize, uint32* HorizontalSize, uint32* AspectRatio, uint32* FrameRateCode, uint32* ProgressiveSequence) EnumVideoCapability;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32 AudioBitrateMode, uint32 AudioBitrate, uint32 AudioMethodID, uint32 AudioProgram, uint32 VideoBitrateMode, uint32 VideoBitrate, uint32 VideoMethodID) SetParameters;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32* AudioBitrateMax, uint32* AudioBitrateMin, uint32* AudioBitrateMode, uint32* AudioBitrateStepping, uint32* AudioBitrate, uint32* AudioMethodID, uint32* AvailableAudioPrograms, uint32* AudioProgram, uint32* VideoBitrateMax, uint32* VideoBitrateMin, uint32* VideoBitrateMode, uint32* VideoBitrate, uint32* VideoBitrateStepping, uint32* VideoMethodID, uint32* SignalSourceID, uint64* SignalFormat, BOOL* SignalLock, int32* SignalLevel, uint32* SignalToNoiseRatio) GetState;
	}


	public HRESULT QueryCapabilities(uint32* NumAudioFmts, uint32* NumVideoFmts) mut => VT.[Friend]QueryCapabilities(&this, NumAudioFmts, NumVideoFmts);

	public HRESULT EnumAudioCapability(uint32 FmtIndex, uint32* MethodID, uint32* AlgorithmType, uint32* SamplingRate, uint32* BitDepth, uint32* NumChannels) mut => VT.[Friend]EnumAudioCapability(&this, FmtIndex, MethodID, AlgorithmType, SamplingRate, BitDepth, NumChannels);

	public HRESULT EnumVideoCapability(uint32 FmtIndex, uint32* MethodID, uint32* AlgorithmType, uint32* VerticalSize, uint32* HorizontalSize, uint32* AspectRatio, uint32* FrameRateCode, uint32* ProgressiveSequence) mut => VT.[Friend]EnumVideoCapability(&this, FmtIndex, MethodID, AlgorithmType, VerticalSize, HorizontalSize, AspectRatio, FrameRateCode, ProgressiveSequence);

	public HRESULT SetParameters(uint32 AudioBitrateMode, uint32 AudioBitrate, uint32 AudioMethodID, uint32 AudioProgram, uint32 VideoBitrateMode, uint32 VideoBitrate, uint32 VideoMethodID) mut => VT.[Friend]SetParameters(&this, AudioBitrateMode, AudioBitrate, AudioMethodID, AudioProgram, VideoBitrateMode, VideoBitrate, VideoMethodID);

	public HRESULT GetState(uint32* AudioBitrateMax, uint32* AudioBitrateMin, uint32* AudioBitrateMode, uint32* AudioBitrateStepping, uint32* AudioBitrate, uint32* AudioMethodID, uint32* AvailableAudioPrograms, uint32* AudioProgram, uint32* VideoBitrateMax, uint32* VideoBitrateMin, uint32* VideoBitrateMode, uint32* VideoBitrate, uint32* VideoBitrateStepping, uint32* VideoMethodID, uint32* SignalSourceID, uint64* SignalFormat, BOOL* SignalLock, int32* SignalLevel, uint32* SignalToNoiseRatio) mut => VT.[Friend]GetState(&this, AudioBitrateMax, AudioBitrateMin, AudioBitrateMode, AudioBitrateStepping, AudioBitrate, AudioMethodID, AvailableAudioPrograms, AudioProgram, VideoBitrateMax, VideoBitrateMin, VideoBitrateMode, VideoBitrate, VideoBitrateStepping, VideoMethodID, SignalSourceID, SignalFormat, SignalLock, SignalLevel, SignalToNoiseRatio);
}

[CRepr]struct IBDA_FDC : IUnknown
{
	public new const Guid IID = .(0x138adc7e, 0x58ae, 0x437f, 0xb0, 0xb4, 0xc9, 0xfe, 0x19, 0xd5, 0xb4, 0xac);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IUnknown.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32* CurrentBitrate, BOOL* CarrierLock, uint32* CurrentFrequency, BOOL* CurrentSpectrumInversion, BSTR* CurrentPIDList, BSTR* CurrentTIDList, BOOL* Overflow) GetStatus;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR TableIDs) RequestTables;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR PidsToAdd, uint32* RemainingFilterEntries) AddPid;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR PidsToRemove) RemovePid;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR TidsToAdd, BSTR* CurrentTidList) AddTid;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR TidsToRemove) RemoveTid;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32* Pid, uint32 MaxBufferSize, uint32* ActualSize, uint8* SecBuffer) GetTableSection;
	}


	public HRESULT GetStatus(uint32* CurrentBitrate, BOOL* CarrierLock, uint32* CurrentFrequency, BOOL* CurrentSpectrumInversion, BSTR* CurrentPIDList, BSTR* CurrentTIDList, BOOL* Overflow) mut => VT.[Friend]GetStatus(&this, CurrentBitrate, CarrierLock, CurrentFrequency, CurrentSpectrumInversion, CurrentPIDList, CurrentTIDList, Overflow);

	public HRESULT RequestTables(BSTR TableIDs) mut => VT.[Friend]RequestTables(&this, TableIDs);

	public HRESULT AddPid(BSTR PidsToAdd, uint32* RemainingFilterEntries) mut => VT.[Friend]AddPid(&this, PidsToAdd, RemainingFilterEntries);

	public HRESULT RemovePid(BSTR PidsToRemove) mut => VT.[Friend]RemovePid(&this, PidsToRemove);

	public HRESULT AddTid(BSTR TidsToAdd, BSTR* CurrentTidList) mut => VT.[Friend]AddTid(&this, TidsToAdd, CurrentTidList);

	public HRESULT RemoveTid(BSTR TidsToRemove) mut => VT.[Friend]RemoveTid(&this, TidsToRemove);

	public HRESULT GetTableSection(uint32* Pid, uint32 MaxBufferSize, uint32* ActualSize, uint8* SecBuffer) mut => VT.[Friend]GetTableSection(&this, Pid, MaxBufferSize, ActualSize, SecBuffer);
}

[CRepr]struct IBDA_GuideDataDeliveryService : IUnknown
{
	public new const Guid IID = .(0xc0afcb73, 0x23e7, 0x4bc6, 0xba, 0xfa, 0xfd, 0xc1, 0x67, 0xb4, 0x71, 0x9f);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IUnknown.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, Guid* pguidDataType) GetGuideDataType;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32* pulcbBufferLen, uint8* pbBuffer, uint32* pulGuideDataPercentageProgress) GetGuideData;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self) RequestGuideDataUpdate;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint64 ul64ServiceIdx, BSTR* pbstrTuneXml) GetTuneXmlFromServiceIdx;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32* pulcbBufferLen, uint8* pbBuffer) GetServices;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR bstrTuneXml, BSTR* pbstrServiceDescription) GetServiceInfoFromTuneXml;
	}


	public HRESULT GetGuideDataType(Guid* pguidDataType) mut => VT.[Friend]GetGuideDataType(&this, pguidDataType);

	public HRESULT GetGuideData(uint32* pulcbBufferLen, uint8* pbBuffer, uint32* pulGuideDataPercentageProgress) mut => VT.[Friend]GetGuideData(&this, pulcbBufferLen, pbBuffer, pulGuideDataPercentageProgress);

	public HRESULT RequestGuideDataUpdate() mut => VT.[Friend]RequestGuideDataUpdate(&this);

	public HRESULT GetTuneXmlFromServiceIdx(uint64 ul64ServiceIdx, BSTR* pbstrTuneXml) mut => VT.[Friend]GetTuneXmlFromServiceIdx(&this, ul64ServiceIdx, pbstrTuneXml);

	public HRESULT GetServices(uint32* pulcbBufferLen, uint8* pbBuffer) mut => VT.[Friend]GetServices(&this, pulcbBufferLen, pbBuffer);

	public HRESULT GetServiceInfoFromTuneXml(BSTR bstrTuneXml, BSTR* pbstrServiceDescription) mut => VT.[Friend]GetServiceInfoFromTuneXml(&this, bstrTuneXml, pbstrServiceDescription);
}

[CRepr]struct IBDA_DRMService : IUnknown
{
	public new const Guid IID = .(0xbff6b5bb, 0xb0ae, 0x484c, 0x9d, 0xca, 0x73, 0x52, 0x8f, 0xb0, 0xb4, 0x6e);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IUnknown.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, Guid* puuidNewDrm) SetDRM;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* pbstrDrmUuidList, Guid* DrmUuid) GetDRMStatus;
	}


	public HRESULT SetDRM(Guid* puuidNewDrm) mut => VT.[Friend]SetDRM(&this, puuidNewDrm);

	public HRESULT GetDRMStatus(BSTR* pbstrDrmUuidList, Guid* DrmUuid) mut => VT.[Friend]GetDRMStatus(&this, pbstrDrmUuidList, DrmUuid);
}

[CRepr]struct IBDA_WMDRMSession : IUnknown
{
	public new const Guid IID = .(0x4be6fa3d, 0x07cd, 0x4139, 0x8b, 0x80, 0x8c, 0x18, 0xba, 0x3a, 0xec, 0x88);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IUnknown.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32* MaxCaptureToken, uint32* MaxStreamingPid, uint32* MaxLicense, uint32* MinSecurityLevel, uint32* RevInfoSequenceNumber, uint64* RevInfoIssuedTime, uint32* RevInfoTTL, uint32* RevListVersion, uint32* ulState) GetStatus;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32 ulRevInfoLen, uint8* pbRevInfo) SetRevInfo;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32 ulCrlLen, uint8* pbCrlLen) SetCrl;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32 ulcbRequest, uint8* pbRequest, uint32* pulcbResponse, uint8* pbResponse) TransactMessage;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, Guid* uuidKey, uint32* pulPackageLen, uint8* pbPackage) GetLicense;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, Guid* uuidKey) ReissueLicense;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32 ulInXmrLicenseLen, uint8* pbInXmrLicense, uint32 ulEntitlementTokenLen, uint8* pbEntitlementToken, uint32* pulDescrambleStatus, uint32* pulOutXmrLicenseLen, uint8* pbOutXmrLicense) RenewLicense;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32* pulKeyInfoLen, uint8* pbKeyInfo) GetKeyInfo;
	}


	public HRESULT GetStatus(uint32* MaxCaptureToken, uint32* MaxStreamingPid, uint32* MaxLicense, uint32* MinSecurityLevel, uint32* RevInfoSequenceNumber, uint64* RevInfoIssuedTime, uint32* RevInfoTTL, uint32* RevListVersion, uint32* ulState) mut => VT.[Friend]GetStatus(&this, MaxCaptureToken, MaxStreamingPid, MaxLicense, MinSecurityLevel, RevInfoSequenceNumber, RevInfoIssuedTime, RevInfoTTL, RevListVersion, ulState);

	public HRESULT SetRevInfo(uint32 ulRevInfoLen, uint8* pbRevInfo) mut => VT.[Friend]SetRevInfo(&this, ulRevInfoLen, pbRevInfo);

	public HRESULT SetCrl(uint32 ulCrlLen, uint8* pbCrlLen) mut => VT.[Friend]SetCrl(&this, ulCrlLen, pbCrlLen);

	public HRESULT TransactMessage(uint32 ulcbRequest, uint8* pbRequest, uint32* pulcbResponse, uint8* pbResponse) mut => VT.[Friend]TransactMessage(&this, ulcbRequest, pbRequest, pulcbResponse, pbResponse);

	public HRESULT GetLicense(Guid* uuidKey, uint32* pulPackageLen, uint8* pbPackage) mut => VT.[Friend]GetLicense(&this, uuidKey, pulPackageLen, pbPackage);

	public HRESULT ReissueLicense(Guid* uuidKey) mut => VT.[Friend]ReissueLicense(&this, uuidKey);

	public HRESULT RenewLicense(uint32 ulInXmrLicenseLen, uint8* pbInXmrLicense, uint32 ulEntitlementTokenLen, uint8* pbEntitlementToken, uint32* pulDescrambleStatus, uint32* pulOutXmrLicenseLen, uint8* pbOutXmrLicense) mut => VT.[Friend]RenewLicense(&this, ulInXmrLicenseLen, pbInXmrLicense, ulEntitlementTokenLen, pbEntitlementToken, pulDescrambleStatus, pulOutXmrLicenseLen, pbOutXmrLicense);

	public HRESULT GetKeyInfo(uint32* pulKeyInfoLen, uint8* pbKeyInfo) mut => VT.[Friend]GetKeyInfo(&this, pulKeyInfoLen, pbKeyInfo);
}

[CRepr]struct IBDA_WMDRMTuner : IUnknown
{
	public new const Guid IID = .(0x86d979cf, 0xa8a7, 0x4f94, 0xb5, 0xfb, 0x14, 0xc0, 0xac, 0xa6, 0x8f, 0xe6);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IUnknown.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32 ulDialogRequest, BSTR bstrLanguage, uint32 ulPurchaseTokenLen, uint8* pbPurchaseToken, uint32* pulDescrambleStatus, uint32* pulCaptureTokenLen, uint8* pbCaptureToken) PurchaseEntitlement;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32 ulCaptureTokenLen, uint8* pbCaptureToken) CancelCaptureToken;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32 ulPid, Guid* uuidKey) SetPidProtection;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32 pulPid, Guid* uuidKey) GetPidProtection;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32 ulSyncValue) SetSyncValue;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32* pulStartCodeProfileLen, uint8* pbStartCodeProfile) GetStartCodeProfile;
	}


	public HRESULT PurchaseEntitlement(uint32 ulDialogRequest, BSTR bstrLanguage, uint32 ulPurchaseTokenLen, uint8* pbPurchaseToken, uint32* pulDescrambleStatus, uint32* pulCaptureTokenLen, uint8* pbCaptureToken) mut => VT.[Friend]PurchaseEntitlement(&this, ulDialogRequest, bstrLanguage, ulPurchaseTokenLen, pbPurchaseToken, pulDescrambleStatus, pulCaptureTokenLen, pbCaptureToken);

	public HRESULT CancelCaptureToken(uint32 ulCaptureTokenLen, uint8* pbCaptureToken) mut => VT.[Friend]CancelCaptureToken(&this, ulCaptureTokenLen, pbCaptureToken);

	public HRESULT SetPidProtection(uint32 ulPid, Guid* uuidKey) mut => VT.[Friend]SetPidProtection(&this, ulPid, uuidKey);

	public HRESULT GetPidProtection(uint32 pulPid, Guid* uuidKey) mut => VT.[Friend]GetPidProtection(&this, pulPid, uuidKey);

	public HRESULT SetSyncValue(uint32 ulSyncValue) mut => VT.[Friend]SetSyncValue(&this, ulSyncValue);

	public HRESULT GetStartCodeProfile(uint32* pulStartCodeProfileLen, uint8* pbStartCodeProfile) mut => VT.[Friend]GetStartCodeProfile(&this, pulStartCodeProfileLen, pbStartCodeProfile);
}

[CRepr]struct IBDA_DRIDRMService : IUnknown
{
	public new const Guid IID = .(0x1f9bc2a5, 0x44a3, 0x4c52, 0xaa, 0xb1, 0x0b, 0xbc, 0xe5, 0xa1, 0x38, 0x1d);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IUnknown.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR bstrNewDrm) SetDRM;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* pbstrDrmUuidList, Guid* DrmUuid) GetDRMStatus;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BDA_DrmPairingError* penumPairingStatus) GetPairingStatus;
	}


	public HRESULT SetDRM(BSTR bstrNewDrm) mut => VT.[Friend]SetDRM(&this, bstrNewDrm);

	public HRESULT GetDRMStatus(BSTR* pbstrDrmUuidList, Guid* DrmUuid) mut => VT.[Friend]GetDRMStatus(&this, pbstrDrmUuidList, DrmUuid);

	public HRESULT GetPairingStatus(BDA_DrmPairingError* penumPairingStatus) mut => VT.[Friend]GetPairingStatus(&this, penumPairingStatus);
}

[CRepr]struct IBDA_DRIWMDRMSession : IUnknown
{
	public new const Guid IID = .(0x05c690f8, 0x56db, 0x4bb2, 0xb0, 0x53, 0x79, 0xc1, 0x20, 0x98, 0xbb, 0x26);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IUnknown.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, HRESULT hrLicenseAck) AcknowledgeLicense;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32 dwcbLicenseMessage, uint8* pbLicenseMessage, uint32* pdwcbLicenseResponse, uint8** ppbLicenseResponse) ProcessLicenseChallenge;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32 dwcbRegistrationMessage, uint8* pbRegistrationMessage, uint32* pdwcbRegistrationResponse, uint8** ppbRegistrationResponse) ProcessRegistrationChallenge;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32 dwRevInfoLen, uint8* pbRevInfo, uint32* pdwResponse) SetRevInfo;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32 dwCrlLen, uint8* pbCrlLen, uint32* pdwResponse) SetCrl;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self) GetHMSAssociationData;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32* pdwError) GetLastCardeaError;
	}


	public HRESULT AcknowledgeLicense(HRESULT hrLicenseAck) mut => VT.[Friend]AcknowledgeLicense(&this, hrLicenseAck);

	public HRESULT ProcessLicenseChallenge(uint32 dwcbLicenseMessage, uint8* pbLicenseMessage, uint32* pdwcbLicenseResponse, uint8** ppbLicenseResponse) mut => VT.[Friend]ProcessLicenseChallenge(&this, dwcbLicenseMessage, pbLicenseMessage, pdwcbLicenseResponse, ppbLicenseResponse);

	public HRESULT ProcessRegistrationChallenge(uint32 dwcbRegistrationMessage, uint8* pbRegistrationMessage, uint32* pdwcbRegistrationResponse, uint8** ppbRegistrationResponse) mut => VT.[Friend]ProcessRegistrationChallenge(&this, dwcbRegistrationMessage, pbRegistrationMessage, pdwcbRegistrationResponse, ppbRegistrationResponse);

	public HRESULT SetRevInfo(uint32 dwRevInfoLen, uint8* pbRevInfo, uint32* pdwResponse) mut => VT.[Friend]SetRevInfo(&this, dwRevInfoLen, pbRevInfo, pdwResponse);

	public HRESULT SetCrl(uint32 dwCrlLen, uint8* pbCrlLen, uint32* pdwResponse) mut => VT.[Friend]SetCrl(&this, dwCrlLen, pbCrlLen, pdwResponse);

	public HRESULT GetHMSAssociationData() mut => VT.[Friend]GetHMSAssociationData(&this);

	public HRESULT GetLastCardeaError(uint32* pdwError) mut => VT.[Friend]GetLastCardeaError(&this, pdwError);
}

[CRepr]struct IBDA_MUX : IUnknown
{
	public new const Guid IID = .(0x942aafec, 0x4c05, 0x4c74, 0xb8, 0xeb, 0x87, 0x06, 0xc2, 0xa4, 0x94, 0x3f);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IUnknown.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32 ulPidListCount, BDA_MUX_PIDLISTITEM* pbPidListBuffer) SetPidList;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32* pulPidListCount, BDA_MUX_PIDLISTITEM* pbPidListBuffer) GetPidList;
	}


	public HRESULT SetPidList(uint32 ulPidListCount, BDA_MUX_PIDLISTITEM* pbPidListBuffer) mut => VT.[Friend]SetPidList(&this, ulPidListCount, pbPidListBuffer);

	public HRESULT GetPidList(uint32* pulPidListCount, BDA_MUX_PIDLISTITEM* pbPidListBuffer) mut => VT.[Friend]GetPidList(&this, pulPidListCount, pbPidListBuffer);
}

[CRepr]struct IBDA_TransportStreamSelector : IUnknown
{
	public new const Guid IID = .(0x1dcfafe9, 0xb45e, 0x41b3, 0xbb, 0x2a, 0x56, 0x1e, 0xb1, 0x29, 0xae, 0x98);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IUnknown.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint16 usTSID) SetTSID;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32* pulTSInformationBufferLen, uint8* pbTSInformationBuffer) GetTSInformation;
	}


	public HRESULT SetTSID(uint16 usTSID) mut => VT.[Friend]SetTSID(&this, usTSID);

	public HRESULT GetTSInformation(uint32* pulTSInformationBufferLen, uint8* pbTSInformationBuffer) mut => VT.[Friend]GetTSInformation(&this, pulTSInformationBufferLen, pbTSInformationBuffer);
}

[CRepr]struct IBDA_UserActivityService : IUnknown
{
	public new const Guid IID = .(0x53b14189, 0xe478, 0x4b7a, 0xa1, 0xff, 0x50, 0x6d, 0xb4, 0xb9, 0x9d, 0xfe);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IUnknown.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32 dwUseReason) SetCurrentTunerUseReason;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32* pdwActivityInterval) GetUserActivityInterval;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self) UserActivityDetected;
	}


	public HRESULT SetCurrentTunerUseReason(uint32 dwUseReason) mut => VT.[Friend]SetCurrentTunerUseReason(&this, dwUseReason);

	public HRESULT GetUserActivityInterval(uint32* pdwActivityInterval) mut => VT.[Friend]GetUserActivityInterval(&this, pdwActivityInterval);

	public HRESULT UserActivityDetected() mut => VT.[Friend]UserActivityDetected(&this);
}

[CRepr]struct IESEvent : IUnknown
{
	public new const Guid IID = .(0x1f0e5357, 0xaf43, 0x44e6, 0x85, 0x47, 0x65, 0x4c, 0x64, 0x51, 0x45, 0xd2);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IUnknown.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32* pdwEventId) GetEventId;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, Guid* pguidEventType) GetEventType;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32 dwResult) SetCompletionStatus;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, SAFEARRAY** pbData) GetData;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* pbstrData) GetStringData;
	}


	public HRESULT GetEventId(uint32* pdwEventId) mut => VT.[Friend]GetEventId(&this, pdwEventId);

	public HRESULT GetEventType(Guid* pguidEventType) mut => VT.[Friend]GetEventType(&this, pguidEventType);

	public HRESULT SetCompletionStatus(uint32 dwResult) mut => VT.[Friend]SetCompletionStatus(&this, dwResult);

	public HRESULT GetData(SAFEARRAY** pbData) mut => VT.[Friend]GetData(&this, pbData);

	public HRESULT GetStringData(BSTR* pbstrData) mut => VT.[Friend]GetStringData(&this, pbstrData);
}

[CRepr]struct IESEvents : IUnknown
{
	public new const Guid IID = .(0xabd414bf, 0xcfe5, 0x4e5e, 0xaf, 0x5b, 0x4b, 0x4e, 0x49, 0xc5, 0xbf, 0xeb);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IUnknown.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, Guid guidEventType, IESEvent* pESEvent) OnESEventReceived;
	}


	public HRESULT OnESEventReceived(Guid guidEventType, IESEvent* pESEvent) mut => VT.[Friend]OnESEventReceived(&this, guidEventType, pESEvent);
}

[CRepr]struct IBroadcastEvent : IUnknown
{
	public new const Guid IID = .(0x3b21263f, 0x26e8, 0x489d, 0xaa, 0xc4, 0x92, 0x4f, 0x7e, 0xfd, 0x95, 0x11);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IUnknown.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, Guid EventID) Fire;
	}


	public HRESULT Fire(Guid EventID) mut => VT.[Friend]Fire(&this, EventID);
}

[CRepr]struct IBroadcastEventEx : IBroadcastEvent
{
	public new const Guid IID = .(0x3d9e3887, 0x1929, 0x423f, 0x80, 0x21, 0x43, 0x68, 0x2d, 0xe9, 0x54, 0x48);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IBroadcastEvent.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, Guid EventID, uint32 Param1, uint32 Param2, uint32 Param3, uint32 Param4) FireEx;
	}


	public HRESULT FireEx(Guid EventID, uint32 Param1, uint32 Param2, uint32 Param3, uint32 Param4) mut => VT.[Friend]FireEx(&this, EventID, Param1, Param2, Param3, Param4);
}

[CRepr]struct IAMNetShowConfig : IDispatch
{
	public new const Guid IID = .(0xfa2aa8f1, 0x8b62, 0x11d0, 0xa5, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, double* pBufferingTime) get_BufferingTime;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, double BufferingTime) put_BufferingTime;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16* pUseFixedUDPPort) get_UseFixedUDPPort;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16 UseFixedUDPPort) put_UseFixedUDPPort;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* pFixedUDPPort) get_FixedUDPPort;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 FixedUDPPort) put_FixedUDPPort;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16* pUseHTTPProxy) get_UseHTTPProxy;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16 UseHTTPProxy) put_UseHTTPProxy;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16* pEnableAutoProxy) get_EnableAutoProxy;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16 EnableAutoProxy) put_EnableAutoProxy;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* pbstrHTTPProxyHost) get_HTTPProxyHost;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR bstrHTTPProxyHost) put_HTTPProxyHost;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* pHTTPProxyPort) get_HTTPProxyPort;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 HTTPProxyPort) put_HTTPProxyPort;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16* pEnableMulticast) get_EnableMulticast;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16 EnableMulticast) put_EnableMulticast;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16* pEnableUDP) get_EnableUDP;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16 EnableUDP) put_EnableUDP;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16* pEnableTCP) get_EnableTCP;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16 EnableTCP) put_EnableTCP;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16* pEnableHTTP) get_EnableHTTP;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16 EnableHTTP) put_EnableHTTP;
	}


	public HRESULT get_BufferingTime(double* pBufferingTime) mut => VT.[Friend]get_BufferingTime(&this, pBufferingTime);

	public HRESULT put_BufferingTime(double BufferingTime) mut => VT.[Friend]put_BufferingTime(&this, BufferingTime);

	public HRESULT get_UseFixedUDPPort(int16* pUseFixedUDPPort) mut => VT.[Friend]get_UseFixedUDPPort(&this, pUseFixedUDPPort);

	public HRESULT put_UseFixedUDPPort(int16 UseFixedUDPPort) mut => VT.[Friend]put_UseFixedUDPPort(&this, UseFixedUDPPort);

	public HRESULT get_FixedUDPPort(int32* pFixedUDPPort) mut => VT.[Friend]get_FixedUDPPort(&this, pFixedUDPPort);

	public HRESULT put_FixedUDPPort(int32 FixedUDPPort) mut => VT.[Friend]put_FixedUDPPort(&this, FixedUDPPort);

	public HRESULT get_UseHTTPProxy(int16* pUseHTTPProxy) mut => VT.[Friend]get_UseHTTPProxy(&this, pUseHTTPProxy);

	public HRESULT put_UseHTTPProxy(int16 UseHTTPProxy) mut => VT.[Friend]put_UseHTTPProxy(&this, UseHTTPProxy);

	public HRESULT get_EnableAutoProxy(int16* pEnableAutoProxy) mut => VT.[Friend]get_EnableAutoProxy(&this, pEnableAutoProxy);

	public HRESULT put_EnableAutoProxy(int16 EnableAutoProxy) mut => VT.[Friend]put_EnableAutoProxy(&this, EnableAutoProxy);

	public HRESULT get_HTTPProxyHost(BSTR* pbstrHTTPProxyHost) mut => VT.[Friend]get_HTTPProxyHost(&this, pbstrHTTPProxyHost);

	public HRESULT put_HTTPProxyHost(BSTR bstrHTTPProxyHost) mut => VT.[Friend]put_HTTPProxyHost(&this, bstrHTTPProxyHost);

	public HRESULT get_HTTPProxyPort(int32* pHTTPProxyPort) mut => VT.[Friend]get_HTTPProxyPort(&this, pHTTPProxyPort);

	public HRESULT put_HTTPProxyPort(int32 HTTPProxyPort) mut => VT.[Friend]put_HTTPProxyPort(&this, HTTPProxyPort);

	public HRESULT get_EnableMulticast(int16* pEnableMulticast) mut => VT.[Friend]get_EnableMulticast(&this, pEnableMulticast);

	public HRESULT put_EnableMulticast(int16 EnableMulticast) mut => VT.[Friend]put_EnableMulticast(&this, EnableMulticast);

	public HRESULT get_EnableUDP(int16* pEnableUDP) mut => VT.[Friend]get_EnableUDP(&this, pEnableUDP);

	public HRESULT put_EnableUDP(int16 EnableUDP) mut => VT.[Friend]put_EnableUDP(&this, EnableUDP);

	public HRESULT get_EnableTCP(int16* pEnableTCP) mut => VT.[Friend]get_EnableTCP(&this, pEnableTCP);

	public HRESULT put_EnableTCP(int16 EnableTCP) mut => VT.[Friend]put_EnableTCP(&this, EnableTCP);

	public HRESULT get_EnableHTTP(int16* pEnableHTTP) mut => VT.[Friend]get_EnableHTTP(&this, pEnableHTTP);

	public HRESULT put_EnableHTTP(int16 EnableHTTP) mut => VT.[Friend]put_EnableHTTP(&this, EnableHTTP);
}

[CRepr]struct IAMChannelInfo : IDispatch
{
	public new const Guid IID = .(0xfa2aa8f2, 0x8b62, 0x11d0, 0xa5, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* pbstrChannelName) get_ChannelName;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* pbstrChannelDescription) get_ChannelDescription;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* pbstrChannelURL) get_ChannelURL;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* pbstrContactAddress) get_ContactAddress;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* pbstrContactPhone) get_ContactPhone;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* pbstrContactEmail) get_ContactEmail;
	}


	public HRESULT get_ChannelName(BSTR* pbstrChannelName) mut => VT.[Friend]get_ChannelName(&this, pbstrChannelName);

	public HRESULT get_ChannelDescription(BSTR* pbstrChannelDescription) mut => VT.[Friend]get_ChannelDescription(&this, pbstrChannelDescription);

	public HRESULT get_ChannelURL(BSTR* pbstrChannelURL) mut => VT.[Friend]get_ChannelURL(&this, pbstrChannelURL);

	public HRESULT get_ContactAddress(BSTR* pbstrContactAddress) mut => VT.[Friend]get_ContactAddress(&this, pbstrContactAddress);

	public HRESULT get_ContactPhone(BSTR* pbstrContactPhone) mut => VT.[Friend]get_ContactPhone(&this, pbstrContactPhone);

	public HRESULT get_ContactEmail(BSTR* pbstrContactEmail) mut => VT.[Friend]get_ContactEmail(&this, pbstrContactEmail);
}

[CRepr]struct IAMNetworkStatus : IDispatch
{
	public new const Guid IID = .(0xfa2aa8f3, 0x8b62, 0x11d0, 0xa5, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* pReceivedPackets) get_ReceivedPackets;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* pRecoveredPackets) get_RecoveredPackets;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* pLostPackets) get_LostPackets;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* pReceptionQuality) get_ReceptionQuality;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* pBufferingCount) get_BufferingCount;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16* pIsBroadcast) get_IsBroadcast;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* pBufferingProgress) get_BufferingProgress;
	}


	public HRESULT get_ReceivedPackets(int32* pReceivedPackets) mut => VT.[Friend]get_ReceivedPackets(&this, pReceivedPackets);

	public HRESULT get_RecoveredPackets(int32* pRecoveredPackets) mut => VT.[Friend]get_RecoveredPackets(&this, pRecoveredPackets);

	public HRESULT get_LostPackets(int32* pLostPackets) mut => VT.[Friend]get_LostPackets(&this, pLostPackets);

	public HRESULT get_ReceptionQuality(int32* pReceptionQuality) mut => VT.[Friend]get_ReceptionQuality(&this, pReceptionQuality);

	public HRESULT get_BufferingCount(int32* pBufferingCount) mut => VT.[Friend]get_BufferingCount(&this, pBufferingCount);

	public HRESULT get_IsBroadcast(int16* pIsBroadcast) mut => VT.[Friend]get_IsBroadcast(&this, pIsBroadcast);

	public HRESULT get_BufferingProgress(int32* pBufferingProgress) mut => VT.[Friend]get_BufferingProgress(&this, pBufferingProgress);
}

[CRepr]struct IAMExtendedSeeking : IDispatch
{
	public new const Guid IID = .(0xfa2aa8f9, 0x8b62, 0x11d0, 0xa5, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* pExCapabilities) get_ExSeekCapabilities;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* pMarkerCount) get_MarkerCount;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* pCurrentMarker) get_CurrentMarker;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 MarkerNum, double* pMarkerTime) GetMarkerTime;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 MarkerNum, BSTR* pbstrMarkerName) GetMarkerName;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, double Speed) put_PlaybackSpeed;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, double* pSpeed) get_PlaybackSpeed;
	}


	public HRESULT get_ExSeekCapabilities(int32* pExCapabilities) mut => VT.[Friend]get_ExSeekCapabilities(&this, pExCapabilities);

	public HRESULT get_MarkerCount(int32* pMarkerCount) mut => VT.[Friend]get_MarkerCount(&this, pMarkerCount);

	public HRESULT get_CurrentMarker(int32* pCurrentMarker) mut => VT.[Friend]get_CurrentMarker(&this, pCurrentMarker);

	public HRESULT GetMarkerTime(int32 MarkerNum, double* pMarkerTime) mut => VT.[Friend]GetMarkerTime(&this, MarkerNum, pMarkerTime);

	public HRESULT GetMarkerName(int32 MarkerNum, BSTR* pbstrMarkerName) mut => VT.[Friend]GetMarkerName(&this, MarkerNum, pbstrMarkerName);

	public HRESULT put_PlaybackSpeed(double Speed) mut => VT.[Friend]put_PlaybackSpeed(&this, Speed);

	public HRESULT get_PlaybackSpeed(double* pSpeed) mut => VT.[Friend]get_PlaybackSpeed(&this, pSpeed);
}

[CRepr]struct IAMNetShowExProps : IDispatch
{
	public new const Guid IID = .(0xfa2aa8f5, 0x8b62, 0x11d0, 0xa5, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* pSourceProtocol) get_SourceProtocol;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* pBandwidth) get_Bandwidth;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* pbstrErrorCorrection) get_ErrorCorrection;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* pCodecCount) get_CodecCount;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 CodecNum, int16* pCodecInstalled) GetCodecInstalled;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 CodecNum, BSTR* pbstrCodecDescription) GetCodecDescription;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 CodecNum, BSTR* pbstrCodecURL) GetCodecURL;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, double* pCreationDate) get_CreationDate;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* pbstrSourceLink) get_SourceLink;
	}


	public HRESULT get_SourceProtocol(int32* pSourceProtocol) mut => VT.[Friend]get_SourceProtocol(&this, pSourceProtocol);

	public HRESULT get_Bandwidth(int32* pBandwidth) mut => VT.[Friend]get_Bandwidth(&this, pBandwidth);

	public HRESULT get_ErrorCorrection(BSTR* pbstrErrorCorrection) mut => VT.[Friend]get_ErrorCorrection(&this, pbstrErrorCorrection);

	public HRESULT get_CodecCount(int32* pCodecCount) mut => VT.[Friend]get_CodecCount(&this, pCodecCount);

	public HRESULT GetCodecInstalled(int32 CodecNum, int16* pCodecInstalled) mut => VT.[Friend]GetCodecInstalled(&this, CodecNum, pCodecInstalled);

	public HRESULT GetCodecDescription(int32 CodecNum, BSTR* pbstrCodecDescription) mut => VT.[Friend]GetCodecDescription(&this, CodecNum, pbstrCodecDescription);

	public HRESULT GetCodecURL(int32 CodecNum, BSTR* pbstrCodecURL) mut => VT.[Friend]GetCodecURL(&this, CodecNum, pbstrCodecURL);

	public HRESULT get_CreationDate(double* pCreationDate) mut => VT.[Friend]get_CreationDate(&this, pCreationDate);

	public HRESULT get_SourceLink(BSTR* pbstrSourceLink) mut => VT.[Friend]get_SourceLink(&this, pbstrSourceLink);
}

[CRepr]struct IAMExtendedErrorInfo : IDispatch
{
	public new const Guid IID = .(0xfa2aa8f6, 0x8b62, 0x11d0, 0xa5, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16* pHasError) get_HasError;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* pbstrErrorDescription) get_ErrorDescription;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* pErrorCode) get_ErrorCode;
	}


	public HRESULT get_HasError(int16* pHasError) mut => VT.[Friend]get_HasError(&this, pHasError);

	public HRESULT get_ErrorDescription(BSTR* pbstrErrorDescription) mut => VT.[Friend]get_ErrorDescription(&this, pbstrErrorDescription);

	public HRESULT get_ErrorCode(int32* pErrorCode) mut => VT.[Friend]get_ErrorCode(&this, pErrorCode);
}

[CRepr]struct IAMMediaContent : IDispatch
{
	public new const Guid IID = .(0xfa2aa8f4, 0x8b62, 0x11d0, 0xa5, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* pbstrAuthorName) get_AuthorName;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* pbstrTitle) get_Title;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* pbstrRating) get_Rating;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* pbstrDescription) get_Description;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* pbstrCopyright) get_Copyright;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* pbstrBaseURL) get_BaseURL;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* pbstrLogoURL) get_LogoURL;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* pbstrLogoURL) get_LogoIconURL;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* pbstrWatermarkURL) get_WatermarkURL;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* pbstrMoreInfoURL) get_MoreInfoURL;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* pbstrMoreInfoBannerImage) get_MoreInfoBannerImage;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* pbstrMoreInfoBannerURL) get_MoreInfoBannerURL;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* pbstrMoreInfoText) get_MoreInfoText;
	}


	public HRESULT get_AuthorName(BSTR* pbstrAuthorName) mut => VT.[Friend]get_AuthorName(&this, pbstrAuthorName);

	public HRESULT get_Title(BSTR* pbstrTitle) mut => VT.[Friend]get_Title(&this, pbstrTitle);

	public HRESULT get_Rating(BSTR* pbstrRating) mut => VT.[Friend]get_Rating(&this, pbstrRating);

	public HRESULT get_Description(BSTR* pbstrDescription) mut => VT.[Friend]get_Description(&this, pbstrDescription);

	public HRESULT get_Copyright(BSTR* pbstrCopyright) mut => VT.[Friend]get_Copyright(&this, pbstrCopyright);

	public HRESULT get_BaseURL(BSTR* pbstrBaseURL) mut => VT.[Friend]get_BaseURL(&this, pbstrBaseURL);

	public HRESULT get_LogoURL(BSTR* pbstrLogoURL) mut => VT.[Friend]get_LogoURL(&this, pbstrLogoURL);

	public HRESULT get_LogoIconURL(BSTR* pbstrLogoURL) mut => VT.[Friend]get_LogoIconURL(&this, pbstrLogoURL);

	public HRESULT get_WatermarkURL(BSTR* pbstrWatermarkURL) mut => VT.[Friend]get_WatermarkURL(&this, pbstrWatermarkURL);

	public HRESULT get_MoreInfoURL(BSTR* pbstrMoreInfoURL) mut => VT.[Friend]get_MoreInfoURL(&this, pbstrMoreInfoURL);

	public HRESULT get_MoreInfoBannerImage(BSTR* pbstrMoreInfoBannerImage) mut => VT.[Friend]get_MoreInfoBannerImage(&this, pbstrMoreInfoBannerImage);

	public HRESULT get_MoreInfoBannerURL(BSTR* pbstrMoreInfoBannerURL) mut => VT.[Friend]get_MoreInfoBannerURL(&this, pbstrMoreInfoBannerURL);

	public HRESULT get_MoreInfoText(BSTR* pbstrMoreInfoText) mut => VT.[Friend]get_MoreInfoText(&this, pbstrMoreInfoText);
}

[CRepr]struct IAMMediaContent2 : IDispatch
{
	public new const Guid IID = .(0xce8f78c1, 0x74d9, 0x11d2, 0xb0, 0x9d, 0x00, 0xa0, 0xc9, 0xa8, 0x11, 0x17);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 EntryNum, BSTR bstrName, BSTR* pbstrValue) get_MediaParameter;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 EntryNum, int32 Index, BSTR* pbstrName) get_MediaParameterName;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* pNumberEntries) get_PlaylistCount;
	}


	public HRESULT get_MediaParameter(int32 EntryNum, BSTR bstrName, BSTR* pbstrValue) mut => VT.[Friend]get_MediaParameter(&this, EntryNum, bstrName, pbstrValue);

	public HRESULT get_MediaParameterName(int32 EntryNum, int32 Index, BSTR* pbstrName) mut => VT.[Friend]get_MediaParameterName(&this, EntryNum, Index, pbstrName);

	public HRESULT get_PlaylistCount(int32* pNumberEntries) mut => VT.[Friend]get_PlaylistCount(&this, pNumberEntries);
}

[CRepr]struct IAMNetShowPreroll : IDispatch
{
	public new const Guid IID = .(0xaae7e4e2, 0x6388, 0x11d1, 0x8d, 0x93, 0x00, 0x60, 0x97, 0xc9, 0xa2, 0xb2);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16 fPreroll) put_Preroll;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16* pfPreroll) get_Preroll;
	}


	public HRESULT put_Preroll(int16 fPreroll) mut => VT.[Friend]put_Preroll(&this, fPreroll);

	public HRESULT get_Preroll(int16* pfPreroll) mut => VT.[Friend]get_Preroll(&this, pfPreroll);
}

[CRepr]struct IDShowPlugin : IUnknown
{
	public new const Guid IID = .(0x4746b7c8, 0x700e, 0x11d1, 0xbe, 0xcc, 0x00, 0xc0, 0x4f, 0xb6, 0xe9, 0x37);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IUnknown.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* pURL) get_URL;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* pUserAgent) get_UserAgent;
	}


	public HRESULT get_URL(BSTR* pURL) mut => VT.[Friend]get_URL(&this, pURL);

	public HRESULT get_UserAgent(BSTR* pUserAgent) mut => VT.[Friend]get_UserAgent(&this, pUserAgent);
}

[CRepr]struct IAMDirectSound : IUnknown
{
	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IUnknown.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IDirectSound** lplpds) GetDirectSoundInterface;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IDirectSoundBuffer** lplpdsb) GetPrimaryBufferInterface;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IDirectSoundBuffer** lplpdsb) GetSecondaryBufferInterface;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IDirectSound* lpds) ReleaseDirectSoundInterface;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IDirectSoundBuffer* lpdsb) ReleasePrimaryBufferInterface;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IDirectSoundBuffer* lpdsb) ReleaseSecondaryBufferInterface;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, HWND param0, BOOL param1) SetFocusWindow;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, HWND* param0, BOOL* param1) GetFocusWindow;
	}


	public HRESULT GetDirectSoundInterface(IDirectSound** lplpds) mut => VT.[Friend]GetDirectSoundInterface(&this, lplpds);

	public HRESULT GetPrimaryBufferInterface(IDirectSoundBuffer** lplpdsb) mut => VT.[Friend]GetPrimaryBufferInterface(&this, lplpdsb);

	public HRESULT GetSecondaryBufferInterface(IDirectSoundBuffer** lplpdsb) mut => VT.[Friend]GetSecondaryBufferInterface(&this, lplpdsb);

	public HRESULT ReleaseDirectSoundInterface(IDirectSound* lpds) mut => VT.[Friend]ReleaseDirectSoundInterface(&this, lpds);

	public HRESULT ReleasePrimaryBufferInterface(IDirectSoundBuffer* lpdsb) mut => VT.[Friend]ReleasePrimaryBufferInterface(&this, lpdsb);

	public HRESULT ReleaseSecondaryBufferInterface(IDirectSoundBuffer* lpdsb) mut => VT.[Friend]ReleaseSecondaryBufferInterface(&this, lpdsb);

	public HRESULT SetFocusWindow(HWND param0, BOOL param1) mut => VT.[Friend]SetFocusWindow(&this, param0, param1);

	public HRESULT GetFocusWindow(HWND* param0, BOOL* param1) mut => VT.[Friend]GetFocusWindow(&this, param0, param1);
}

[CRepr]struct IAMLine21Decoder : IUnknown
{
	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IUnknown.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, AM_LINE21_CCLEVEL* lpLevel) GetDecoderLevel;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, AM_LINE21_CCSERVICE* lpService) GetCurrentService;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, AM_LINE21_CCSERVICE Service) SetCurrentService;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, AM_LINE21_CCSTATE* lpState) GetServiceState;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, AM_LINE21_CCSTATE State) SetServiceState;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BITMAPINFOHEADER* lpbmih) GetOutputFormat;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BITMAPINFO* lpbmi) SetOutputFormat;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32* pdwPhysColor) GetBackgroundColor;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32 dwPhysColor) SetBackgroundColor;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* lpbOption) GetRedrawAlways;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BOOL bOption) SetRedrawAlways;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, AM_LINE21_DRAWBGMODE* lpMode) GetDrawBackgroundMode;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, AM_LINE21_DRAWBGMODE Mode) SetDrawBackgroundMode;
	}


	public HRESULT GetDecoderLevel(AM_LINE21_CCLEVEL* lpLevel) mut => VT.[Friend]GetDecoderLevel(&this, lpLevel);

	public HRESULT GetCurrentService(AM_LINE21_CCSERVICE* lpService) mut => VT.[Friend]GetCurrentService(&this, lpService);

	public HRESULT SetCurrentService(AM_LINE21_CCSERVICE Service) mut => VT.[Friend]SetCurrentService(&this, Service);

	public HRESULT GetServiceState(AM_LINE21_CCSTATE* lpState) mut => VT.[Friend]GetServiceState(&this, lpState);

	public HRESULT SetServiceState(AM_LINE21_CCSTATE State) mut => VT.[Friend]SetServiceState(&this, State);

	public HRESULT GetOutputFormat(BITMAPINFOHEADER* lpbmih) mut => VT.[Friend]GetOutputFormat(&this, lpbmih);

	public HRESULT SetOutputFormat(BITMAPINFO* lpbmi) mut => VT.[Friend]SetOutputFormat(&this, lpbmi);

	public HRESULT GetBackgroundColor(uint32* pdwPhysColor) mut => VT.[Friend]GetBackgroundColor(&this, pdwPhysColor);

	public HRESULT SetBackgroundColor(uint32 dwPhysColor) mut => VT.[Friend]SetBackgroundColor(&this, dwPhysColor);

	public HRESULT GetRedrawAlways(int32* lpbOption) mut => VT.[Friend]GetRedrawAlways(&this, lpbOption);

	public HRESULT SetRedrawAlways(BOOL bOption) mut => VT.[Friend]SetRedrawAlways(&this, bOption);

	public HRESULT GetDrawBackgroundMode(AM_LINE21_DRAWBGMODE* lpMode) mut => VT.[Friend]GetDrawBackgroundMode(&this, lpMode);

	public HRESULT SetDrawBackgroundMode(AM_LINE21_DRAWBGMODE Mode) mut => VT.[Friend]SetDrawBackgroundMode(&this, Mode);
}

[CRepr]struct IAMParse : IUnknown
{
	public new const Guid IID = .(0xc47a3420, 0x005c, 0x11d2, 0x90, 0x38, 0x00, 0xa0, 0xc9, 0x69, 0x72, 0x98);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IUnknown.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int64* prtCurrent) GetParseTime;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int64 rtCurrent) SetParseTime;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self) Flush;
	}


	public HRESULT GetParseTime(int64* prtCurrent) mut => VT.[Friend]GetParseTime(&this, prtCurrent);

	public HRESULT SetParseTime(int64 rtCurrent) mut => VT.[Friend]SetParseTime(&this, rtCurrent);

	public HRESULT Flush() mut => VT.[Friend]Flush(&this);
}

[CRepr]struct IAMCollection : IDispatch
{
	public new const Guid IID = .(0x56a868b9, 0x0ad4, 0x11ce, 0xb0, 0x3a, 0x00, 0x20, 0xaf, 0x0b, 0xa7, 0x70);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* plCount) get_Count;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 lItem, IUnknown** ppUnk) Item;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IUnknown** ppUnk) get__NewEnum;
	}


	public HRESULT get_Count(int32* plCount) mut => VT.[Friend]get_Count(&this, plCount);

	public HRESULT Item(int32 lItem, IUnknown** ppUnk) mut => VT.[Friend]Item(&this, lItem, ppUnk);

	public HRESULT get__NewEnum(IUnknown** ppUnk) mut => VT.[Friend]get__NewEnum(&this, ppUnk);
}

[CRepr]struct IMediaControl : IDispatch
{
	public new const Guid IID = .(0x56a868b1, 0x0ad4, 0x11ce, 0xb0, 0x3a, 0x00, 0x20, 0xaf, 0x0b, 0xa7, 0x70);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self) Run;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self) Pause;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self) Stop;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 msTimeout, int32* pfs) GetState;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR strFilename) RenderFile;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR strFilename, IDispatch** ppUnk) AddSourceFilter;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IDispatch** ppUnk) get_FilterCollection;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IDispatch** ppUnk) get_RegFilterCollection;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self) StopWhenReady;
	}


	public HRESULT Run() mut => VT.[Friend]Run(&this);

	public HRESULT Pause() mut => VT.[Friend]Pause(&this);

	public HRESULT Stop() mut => VT.[Friend]Stop(&this);

	public HRESULT GetState(int32 msTimeout, int32* pfs) mut => VT.[Friend]GetState(&this, msTimeout, pfs);

	public HRESULT RenderFile(BSTR strFilename) mut => VT.[Friend]RenderFile(&this, strFilename);

	public HRESULT AddSourceFilter(BSTR strFilename, IDispatch** ppUnk) mut => VT.[Friend]AddSourceFilter(&this, strFilename, ppUnk);

	public HRESULT get_FilterCollection(IDispatch** ppUnk) mut => VT.[Friend]get_FilterCollection(&this, ppUnk);

	public HRESULT get_RegFilterCollection(IDispatch** ppUnk) mut => VT.[Friend]get_RegFilterCollection(&this, ppUnk);

	public HRESULT StopWhenReady() mut => VT.[Friend]StopWhenReady(&this);
}

[CRepr]struct IMediaEvent : IDispatch
{
	public new const Guid IID = .(0x56a868b6, 0x0ad4, 0x11ce, 0xb0, 0x3a, 0x00, 0x20, 0xaf, 0x0b, 0xa7, 0x70);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int* hEvent) GetEventHandle;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* lEventCode, int* lParam1, int* lParam2, int32 msTimeout) GetEvent;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 msTimeout, int32* pEvCode) WaitForCompletion;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 lEvCode) CancelDefaultHandling;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 lEvCode) RestoreDefaultHandling;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 lEvCode, int lParam1, int lParam2) FreeEventParams;
	}


	public HRESULT GetEventHandle(int* hEvent) mut => VT.[Friend]GetEventHandle(&this, hEvent);

	public HRESULT GetEvent(int32* lEventCode, int* lParam1, int* lParam2, int32 msTimeout) mut => VT.[Friend]GetEvent(&this, lEventCode, lParam1, lParam2, msTimeout);

	public HRESULT WaitForCompletion(int32 msTimeout, int32* pEvCode) mut => VT.[Friend]WaitForCompletion(&this, msTimeout, pEvCode);

	public HRESULT CancelDefaultHandling(int32 lEvCode) mut => VT.[Friend]CancelDefaultHandling(&this, lEvCode);

	public HRESULT RestoreDefaultHandling(int32 lEvCode) mut => VT.[Friend]RestoreDefaultHandling(&this, lEvCode);

	public HRESULT FreeEventParams(int32 lEvCode, int lParam1, int lParam2) mut => VT.[Friend]FreeEventParams(&this, lEvCode, lParam1, lParam2);
}

[CRepr]struct IMediaEventEx : IMediaEvent
{
	public new const Guid IID = .(0x56a868c0, 0x0ad4, 0x11ce, 0xb0, 0x3a, 0x00, 0x20, 0xaf, 0x0b, 0xa7, 0x70);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IMediaEvent.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int hwnd, int32 lMsg, int lInstanceData) SetNotifyWindow;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 lNoNotifyFlags) SetNotifyFlags;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* lplNoNotifyFlags) GetNotifyFlags;
	}


	public HRESULT SetNotifyWindow(int hwnd, int32 lMsg, int lInstanceData) mut => VT.[Friend]SetNotifyWindow(&this, hwnd, lMsg, lInstanceData);

	public HRESULT SetNotifyFlags(int32 lNoNotifyFlags) mut => VT.[Friend]SetNotifyFlags(&this, lNoNotifyFlags);

	public HRESULT GetNotifyFlags(int32* lplNoNotifyFlags) mut => VT.[Friend]GetNotifyFlags(&this, lplNoNotifyFlags);
}

[CRepr]struct IMediaPosition : IDispatch
{
	public new const Guid IID = .(0x56a868b2, 0x0ad4, 0x11ce, 0xb0, 0x3a, 0x00, 0x20, 0xaf, 0x0b, 0xa7, 0x70);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, double* plength) get_Duration;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, double llTime) put_CurrentPosition;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, double* pllTime) get_CurrentPosition;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, double* pllTime) get_StopTime;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, double llTime) put_StopTime;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, double* pllTime) get_PrerollTime;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, double llTime) put_PrerollTime;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, double dRate) put_Rate;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, double* pdRate) get_Rate;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* pCanSeekForward) CanSeekForward;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* pCanSeekBackward) CanSeekBackward;
	}


	public HRESULT get_Duration(double* plength) mut => VT.[Friend]get_Duration(&this, plength);

	public HRESULT put_CurrentPosition(double llTime) mut => VT.[Friend]put_CurrentPosition(&this, llTime);

	public HRESULT get_CurrentPosition(double* pllTime) mut => VT.[Friend]get_CurrentPosition(&this, pllTime);

	public HRESULT get_StopTime(double* pllTime) mut => VT.[Friend]get_StopTime(&this, pllTime);

	public HRESULT put_StopTime(double llTime) mut => VT.[Friend]put_StopTime(&this, llTime);

	public HRESULT get_PrerollTime(double* pllTime) mut => VT.[Friend]get_PrerollTime(&this, pllTime);

	public HRESULT put_PrerollTime(double llTime) mut => VT.[Friend]put_PrerollTime(&this, llTime);

	public HRESULT put_Rate(double dRate) mut => VT.[Friend]put_Rate(&this, dRate);

	public HRESULT get_Rate(double* pdRate) mut => VT.[Friend]get_Rate(&this, pdRate);

	public HRESULT CanSeekForward(int32* pCanSeekForward) mut => VT.[Friend]CanSeekForward(&this, pCanSeekForward);

	public HRESULT CanSeekBackward(int32* pCanSeekBackward) mut => VT.[Friend]CanSeekBackward(&this, pCanSeekBackward);
}

[CRepr]struct IBasicAudio : IDispatch
{
	public new const Guid IID = .(0x56a868b3, 0x0ad4, 0x11ce, 0xb0, 0x3a, 0x00, 0x20, 0xaf, 0x0b, 0xa7, 0x70);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 lVolume) put_Volume;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* plVolume) get_Volume;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 lBalance) put_Balance;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* plBalance) get_Balance;
	}


	public HRESULT put_Volume(int32 lVolume) mut => VT.[Friend]put_Volume(&this, lVolume);

	public HRESULT get_Volume(int32* plVolume) mut => VT.[Friend]get_Volume(&this, plVolume);

	public HRESULT put_Balance(int32 lBalance) mut => VT.[Friend]put_Balance(&this, lBalance);

	public HRESULT get_Balance(int32* plBalance) mut => VT.[Friend]get_Balance(&this, plBalance);
}

[CRepr]struct IVideoWindow : IDispatch
{
	public new const Guid IID = .(0x56a868b4, 0x0ad4, 0x11ce, 0xb0, 0x3a, 0x00, 0x20, 0xaf, 0x0b, 0xa7, 0x70);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR strCaption) put_Caption;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* strCaption) get_Caption;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 WindowStyle) put_WindowStyle;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* WindowStyle) get_WindowStyle;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 WindowStyleEx) put_WindowStyleEx;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* WindowStyleEx) get_WindowStyleEx;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 AutoShow) put_AutoShow;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* AutoShow) get_AutoShow;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 WindowState) put_WindowState;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* WindowState) get_WindowState;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 BackgroundPalette) put_BackgroundPalette;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* pBackgroundPalette) get_BackgroundPalette;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 Visible) put_Visible;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* pVisible) get_Visible;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 Left) put_Left;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* pLeft) get_Left;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 Width) put_Width;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* pWidth) get_Width;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 Top) put_Top;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* pTop) get_Top;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 Height) put_Height;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* pHeight) get_Height;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int Owner) put_Owner;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int* Owner) get_Owner;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int Drain) put_MessageDrain;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int* Drain) get_MessageDrain;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* Color) get_BorderColor;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 Color) put_BorderColor;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* FullScreenMode) get_FullScreenMode;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 FullScreenMode) put_FullScreenMode;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 Focus) SetWindowForeground;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int hwnd, int32 uMsg, int wParam, int lParam) NotifyOwnerMessage;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 Left, int32 Top, int32 Width, int32 Height) SetWindowPosition;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* pLeft, int32* pTop, int32* pWidth, int32* pHeight) GetWindowPosition;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* pWidth, int32* pHeight) GetMinIdealImageSize;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* pWidth, int32* pHeight) GetMaxIdealImageSize;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* pLeft, int32* pTop, int32* pWidth, int32* pHeight) GetRestorePosition;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, OA_BOOL HideCursor) HideCursor;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* CursorHidden) IsCursorHidden;
	}


	public HRESULT put_Caption(BSTR strCaption) mut => VT.[Friend]put_Caption(&this, strCaption);

	public HRESULT get_Caption(BSTR* strCaption) mut => VT.[Friend]get_Caption(&this, strCaption);

	public HRESULT put_WindowStyle(int32 WindowStyle) mut => VT.[Friend]put_WindowStyle(&this, WindowStyle);

	public HRESULT get_WindowStyle(int32* WindowStyle) mut => VT.[Friend]get_WindowStyle(&this, WindowStyle);

	public HRESULT put_WindowStyleEx(int32 WindowStyleEx) mut => VT.[Friend]put_WindowStyleEx(&this, WindowStyleEx);

	public HRESULT get_WindowStyleEx(int32* WindowStyleEx) mut => VT.[Friend]get_WindowStyleEx(&this, WindowStyleEx);

	public HRESULT put_AutoShow(int32 AutoShow) mut => VT.[Friend]put_AutoShow(&this, AutoShow);

	public HRESULT get_AutoShow(int32* AutoShow) mut => VT.[Friend]get_AutoShow(&this, AutoShow);

	public HRESULT put_WindowState(int32 WindowState) mut => VT.[Friend]put_WindowState(&this, WindowState);

	public HRESULT get_WindowState(int32* WindowState) mut => VT.[Friend]get_WindowState(&this, WindowState);

	public HRESULT put_BackgroundPalette(int32 BackgroundPalette) mut => VT.[Friend]put_BackgroundPalette(&this, BackgroundPalette);

	public HRESULT get_BackgroundPalette(int32* pBackgroundPalette) mut => VT.[Friend]get_BackgroundPalette(&this, pBackgroundPalette);

	public HRESULT put_Visible(int32 Visible) mut => VT.[Friend]put_Visible(&this, Visible);

	public HRESULT get_Visible(int32* pVisible) mut => VT.[Friend]get_Visible(&this, pVisible);

	public HRESULT put_Left(int32 Left) mut => VT.[Friend]put_Left(&this, Left);

	public HRESULT get_Left(int32* pLeft) mut => VT.[Friend]get_Left(&this, pLeft);

	public HRESULT put_Width(int32 Width) mut => VT.[Friend]put_Width(&this, Width);

	public HRESULT get_Width(int32* pWidth) mut => VT.[Friend]get_Width(&this, pWidth);

	public HRESULT put_Top(int32 Top) mut => VT.[Friend]put_Top(&this, Top);

	public HRESULT get_Top(int32* pTop) mut => VT.[Friend]get_Top(&this, pTop);

	public HRESULT put_Height(int32 Height) mut => VT.[Friend]put_Height(&this, Height);

	public HRESULT get_Height(int32* pHeight) mut => VT.[Friend]get_Height(&this, pHeight);

	public HRESULT put_Owner(int Owner) mut => VT.[Friend]put_Owner(&this, Owner);

	public HRESULT get_Owner(int* Owner) mut => VT.[Friend]get_Owner(&this, Owner);

	public HRESULT put_MessageDrain(int Drain) mut => VT.[Friend]put_MessageDrain(&this, Drain);

	public HRESULT get_MessageDrain(int* Drain) mut => VT.[Friend]get_MessageDrain(&this, Drain);

	public HRESULT get_BorderColor(int32* Color) mut => VT.[Friend]get_BorderColor(&this, Color);

	public HRESULT put_BorderColor(int32 Color) mut => VT.[Friend]put_BorderColor(&this, Color);

	public HRESULT get_FullScreenMode(int32* FullScreenMode) mut => VT.[Friend]get_FullScreenMode(&this, FullScreenMode);

	public HRESULT put_FullScreenMode(int32 FullScreenMode) mut => VT.[Friend]put_FullScreenMode(&this, FullScreenMode);

	public HRESULT SetWindowForeground(int32 Focus) mut => VT.[Friend]SetWindowForeground(&this, Focus);

	public HRESULT NotifyOwnerMessage(int hwnd, int32 uMsg, int wParam, int lParam) mut => VT.[Friend]NotifyOwnerMessage(&this, hwnd, uMsg, wParam, lParam);

	public HRESULT SetWindowPosition(int32 Left, int32 Top, int32 Width, int32 Height) mut => VT.[Friend]SetWindowPosition(&this, Left, Top, Width, Height);

	public HRESULT GetWindowPosition(int32* pLeft, int32* pTop, int32* pWidth, int32* pHeight) mut => VT.[Friend]GetWindowPosition(&this, pLeft, pTop, pWidth, pHeight);

	public HRESULT GetMinIdealImageSize(int32* pWidth, int32* pHeight) mut => VT.[Friend]GetMinIdealImageSize(&this, pWidth, pHeight);

	public HRESULT GetMaxIdealImageSize(int32* pWidth, int32* pHeight) mut => VT.[Friend]GetMaxIdealImageSize(&this, pWidth, pHeight);

	public HRESULT GetRestorePosition(int32* pLeft, int32* pTop, int32* pWidth, int32* pHeight) mut => VT.[Friend]GetRestorePosition(&this, pLeft, pTop, pWidth, pHeight);

	public HRESULT HideCursor(OA_BOOL HideCursor) mut => VT.[Friend]HideCursor(&this, HideCursor);

	public HRESULT IsCursorHidden(int32* CursorHidden) mut => VT.[Friend]IsCursorHidden(&this, CursorHidden);
}

[CRepr]struct IBasicVideo : IDispatch
{
	public new const Guid IID = .(0x56a868b5, 0x0ad4, 0x11ce, 0xb0, 0x3a, 0x00, 0x20, 0xaf, 0x0b, 0xa7, 0x70);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, double* pAvgTimePerFrame) get_AvgTimePerFrame;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* pBitRate) get_BitRate;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* pBitErrorRate) get_BitErrorRate;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* pVideoWidth) get_VideoWidth;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* pVideoHeight) get_VideoHeight;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 SourceLeft) put_SourceLeft;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* pSourceLeft) get_SourceLeft;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 SourceWidth) put_SourceWidth;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* pSourceWidth) get_SourceWidth;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 SourceTop) put_SourceTop;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* pSourceTop) get_SourceTop;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 SourceHeight) put_SourceHeight;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* pSourceHeight) get_SourceHeight;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 DestinationLeft) put_DestinationLeft;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* pDestinationLeft) get_DestinationLeft;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 DestinationWidth) put_DestinationWidth;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* pDestinationWidth) get_DestinationWidth;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 DestinationTop) put_DestinationTop;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* pDestinationTop) get_DestinationTop;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 DestinationHeight) put_DestinationHeight;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* pDestinationHeight) get_DestinationHeight;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 Left, int32 Top, int32 Width, int32 Height) SetSourcePosition;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* pLeft, int32* pTop, int32* pWidth, int32* pHeight) GetSourcePosition;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self) SetDefaultSourcePosition;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 Left, int32 Top, int32 Width, int32 Height) SetDestinationPosition;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* pLeft, int32* pTop, int32* pWidth, int32* pHeight) GetDestinationPosition;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self) SetDefaultDestinationPosition;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* pWidth, int32* pHeight) GetVideoSize;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 StartIndex, int32 Entries, int32* pRetrieved, int32* pPalette) GetVideoPaletteEntries;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* pBufferSize, int32* pDIBImage) GetCurrentImage;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self) IsUsingDefaultSource;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self) IsUsingDefaultDestination;
	}


	public HRESULT get_AvgTimePerFrame(double* pAvgTimePerFrame) mut => VT.[Friend]get_AvgTimePerFrame(&this, pAvgTimePerFrame);

	public HRESULT get_BitRate(int32* pBitRate) mut => VT.[Friend]get_BitRate(&this, pBitRate);

	public HRESULT get_BitErrorRate(int32* pBitErrorRate) mut => VT.[Friend]get_BitErrorRate(&this, pBitErrorRate);

	public HRESULT get_VideoWidth(int32* pVideoWidth) mut => VT.[Friend]get_VideoWidth(&this, pVideoWidth);

	public HRESULT get_VideoHeight(int32* pVideoHeight) mut => VT.[Friend]get_VideoHeight(&this, pVideoHeight);

	public HRESULT put_SourceLeft(int32 SourceLeft) mut => VT.[Friend]put_SourceLeft(&this, SourceLeft);

	public HRESULT get_SourceLeft(int32* pSourceLeft) mut => VT.[Friend]get_SourceLeft(&this, pSourceLeft);

	public HRESULT put_SourceWidth(int32 SourceWidth) mut => VT.[Friend]put_SourceWidth(&this, SourceWidth);

	public HRESULT get_SourceWidth(int32* pSourceWidth) mut => VT.[Friend]get_SourceWidth(&this, pSourceWidth);

	public HRESULT put_SourceTop(int32 SourceTop) mut => VT.[Friend]put_SourceTop(&this, SourceTop);

	public HRESULT get_SourceTop(int32* pSourceTop) mut => VT.[Friend]get_SourceTop(&this, pSourceTop);

	public HRESULT put_SourceHeight(int32 SourceHeight) mut => VT.[Friend]put_SourceHeight(&this, SourceHeight);

	public HRESULT get_SourceHeight(int32* pSourceHeight) mut => VT.[Friend]get_SourceHeight(&this, pSourceHeight);

	public HRESULT put_DestinationLeft(int32 DestinationLeft) mut => VT.[Friend]put_DestinationLeft(&this, DestinationLeft);

	public HRESULT get_DestinationLeft(int32* pDestinationLeft) mut => VT.[Friend]get_DestinationLeft(&this, pDestinationLeft);

	public HRESULT put_DestinationWidth(int32 DestinationWidth) mut => VT.[Friend]put_DestinationWidth(&this, DestinationWidth);

	public HRESULT get_DestinationWidth(int32* pDestinationWidth) mut => VT.[Friend]get_DestinationWidth(&this, pDestinationWidth);

	public HRESULT put_DestinationTop(int32 DestinationTop) mut => VT.[Friend]put_DestinationTop(&this, DestinationTop);

	public HRESULT get_DestinationTop(int32* pDestinationTop) mut => VT.[Friend]get_DestinationTop(&this, pDestinationTop);

	public HRESULT put_DestinationHeight(int32 DestinationHeight) mut => VT.[Friend]put_DestinationHeight(&this, DestinationHeight);

	public HRESULT get_DestinationHeight(int32* pDestinationHeight) mut => VT.[Friend]get_DestinationHeight(&this, pDestinationHeight);

	public HRESULT SetSourcePosition(int32 Left, int32 Top, int32 Width, int32 Height) mut => VT.[Friend]SetSourcePosition(&this, Left, Top, Width, Height);

	public HRESULT GetSourcePosition(int32* pLeft, int32* pTop, int32* pWidth, int32* pHeight) mut => VT.[Friend]GetSourcePosition(&this, pLeft, pTop, pWidth, pHeight);

	public HRESULT SetDefaultSourcePosition() mut => VT.[Friend]SetDefaultSourcePosition(&this);

	public HRESULT SetDestinationPosition(int32 Left, int32 Top, int32 Width, int32 Height) mut => VT.[Friend]SetDestinationPosition(&this, Left, Top, Width, Height);

	public HRESULT GetDestinationPosition(int32* pLeft, int32* pTop, int32* pWidth, int32* pHeight) mut => VT.[Friend]GetDestinationPosition(&this, pLeft, pTop, pWidth, pHeight);

	public HRESULT SetDefaultDestinationPosition() mut => VT.[Friend]SetDefaultDestinationPosition(&this);

	public HRESULT GetVideoSize(int32* pWidth, int32* pHeight) mut => VT.[Friend]GetVideoSize(&this, pWidth, pHeight);

	public HRESULT GetVideoPaletteEntries(int32 StartIndex, int32 Entries, int32* pRetrieved, int32* pPalette) mut => VT.[Friend]GetVideoPaletteEntries(&this, StartIndex, Entries, pRetrieved, pPalette);

	public HRESULT GetCurrentImage(int32* pBufferSize, int32* pDIBImage) mut => VT.[Friend]GetCurrentImage(&this, pBufferSize, pDIBImage);

	public HRESULT IsUsingDefaultSource() mut => VT.[Friend]IsUsingDefaultSource(&this);

	public HRESULT IsUsingDefaultDestination() mut => VT.[Friend]IsUsingDefaultDestination(&this);
}

[CRepr]struct IBasicVideo2 : IBasicVideo
{
	public new const Guid IID = .(0x329bb360, 0xf6ea, 0x11d1, 0x90, 0x38, 0x00, 0xa0, 0xc9, 0x69, 0x72, 0x98);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IBasicVideo.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* plAspectX, int32* plAspectY) GetPreferredAspectRatio;
	}


	public HRESULT GetPreferredAspectRatio(int32* plAspectX, int32* plAspectY) mut => VT.[Friend]GetPreferredAspectRatio(&this, plAspectX, plAspectY);
}

[CRepr]struct IDeferredCommand : IUnknown
{
	public new const Guid IID = .(0x56a868b8, 0x0ad4, 0x11ce, 0xb0, 0x3a, 0x00, 0x20, 0xaf, 0x0b, 0xa7, 0x70);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IUnknown.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self) Cancel;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* pConfidence) Confidence;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, double newtime) Postpone;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, HRESULT* phrResult) GetHResult;
	}


	public HRESULT Cancel() mut => VT.[Friend]Cancel(&this);

	public HRESULT Confidence(int32* pConfidence) mut => VT.[Friend]Confidence(&this, pConfidence);

	public HRESULT Postpone(double newtime) mut => VT.[Friend]Postpone(&this, newtime);

	public HRESULT GetHResult(HRESULT* phrResult) mut => VT.[Friend]GetHResult(&this, phrResult);
}

[CRepr]struct IQueueCommand : IUnknown
{
	public new const Guid IID = .(0x56a868b7, 0x0ad4, 0x11ce, 0xb0, 0x3a, 0x00, 0x20, 0xaf, 0x0b, 0xa7, 0x70);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IUnknown.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IDeferredCommand** pCmd, double time, Guid* iid, int32 dispidMethod, int16 wFlags, int32 cArgs, VARIANT* pDispParams, VARIANT* pvarResult, int16* puArgErr) InvokeAtStreamTime;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IDeferredCommand** pCmd, double time, Guid* iid, int32 dispidMethod, int16 wFlags, int32 cArgs, VARIANT* pDispParams, VARIANT* pvarResult, int16* puArgErr) InvokeAtPresentationTime;
	}


	public HRESULT InvokeAtStreamTime(IDeferredCommand** pCmd, double time, Guid* iid, int32 dispidMethod, int16 wFlags, int32 cArgs, VARIANT* pDispParams, VARIANT* pvarResult, int16* puArgErr) mut => VT.[Friend]InvokeAtStreamTime(&this, pCmd, time, iid, dispidMethod, wFlags, cArgs, pDispParams, pvarResult, puArgErr);

	public HRESULT InvokeAtPresentationTime(IDeferredCommand** pCmd, double time, Guid* iid, int32 dispidMethod, int16 wFlags, int32 cArgs, VARIANT* pDispParams, VARIANT* pvarResult, int16* puArgErr) mut => VT.[Friend]InvokeAtPresentationTime(&this, pCmd, time, iid, dispidMethod, wFlags, cArgs, pDispParams, pvarResult, puArgErr);
}

[CRepr]struct IFilterInfo : IDispatch
{
	public new const Guid IID = .(0x56a868ba, 0x0ad4, 0x11ce, 0xb0, 0x3a, 0x00, 0x20, 0xaf, 0x0b, 0xa7, 0x70);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR strPinID, IDispatch** ppUnk) FindPin;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* strName) get_Name;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* strVendorInfo) get_VendorInfo;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IUnknown** ppUnk) get_Filter;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IDispatch** ppUnk) get_Pins;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* pbIsSource) get_IsFileSource;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* pstrFilename) get_Filename;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR strFilename) put_Filename;
	}


	public HRESULT FindPin(BSTR strPinID, IDispatch** ppUnk) mut => VT.[Friend]FindPin(&this, strPinID, ppUnk);

	public HRESULT get_Name(BSTR* strName) mut => VT.[Friend]get_Name(&this, strName);

	public HRESULT get_VendorInfo(BSTR* strVendorInfo) mut => VT.[Friend]get_VendorInfo(&this, strVendorInfo);

	public HRESULT get_Filter(IUnknown** ppUnk) mut => VT.[Friend]get_Filter(&this, ppUnk);

	public HRESULT get_Pins(IDispatch** ppUnk) mut => VT.[Friend]get_Pins(&this, ppUnk);

	public HRESULT get_IsFileSource(int32* pbIsSource) mut => VT.[Friend]get_IsFileSource(&this, pbIsSource);

	public HRESULT get_Filename(BSTR* pstrFilename) mut => VT.[Friend]get_Filename(&this, pstrFilename);

	public HRESULT put_Filename(BSTR strFilename) mut => VT.[Friend]put_Filename(&this, strFilename);
}

[CRepr]struct IRegFilterInfo : IDispatch
{
	public new const Guid IID = .(0x56a868bb, 0x0ad4, 0x11ce, 0xb0, 0x3a, 0x00, 0x20, 0xaf, 0x0b, 0xa7, 0x70);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* strName) get_Name;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IDispatch** ppUnk) Filter;
	}


	public HRESULT get_Name(BSTR* strName) mut => VT.[Friend]get_Name(&this, strName);

	public HRESULT Filter(IDispatch** ppUnk) mut => VT.[Friend]Filter(&this, ppUnk);
}

[CRepr]struct IMediaTypeInfo : IDispatch
{
	public new const Guid IID = .(0x56a868bc, 0x0ad4, 0x11ce, 0xb0, 0x3a, 0x00, 0x20, 0xaf, 0x0b, 0xa7, 0x70);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* strType) get_Type;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* strType) get_Subtype;
	}


	public HRESULT get_Type(BSTR* strType) mut => VT.[Friend]get_Type(&this, strType);

	public HRESULT get_Subtype(BSTR* strType) mut => VT.[Friend]get_Subtype(&this, strType);
}

[CRepr]struct IPinInfo : IDispatch
{
	public new const Guid IID = .(0x56a868bd, 0x0ad4, 0x11ce, 0xb0, 0x3a, 0x00, 0x20, 0xaf, 0x0b, 0xa7, 0x70);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IUnknown** ppUnk) get_Pin;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IDispatch** ppUnk) get_ConnectedTo;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IDispatch** ppUnk) get_ConnectionMediaType;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IDispatch** ppUnk) get_FilterInfo;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* ppUnk) get_Name;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* ppDirection) get_Direction;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* strPinID) get_PinID;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IDispatch** ppUnk) get_MediaTypes;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IUnknown* pPin) Connect;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IUnknown* pPin) ConnectDirect;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IUnknown* pPin, IDispatch* pMediaType) ConnectWithType;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self) Disconnect;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self) Render;
	}


	public HRESULT get_Pin(IUnknown** ppUnk) mut => VT.[Friend]get_Pin(&this, ppUnk);

	public HRESULT get_ConnectedTo(IDispatch** ppUnk) mut => VT.[Friend]get_ConnectedTo(&this, ppUnk);

	public HRESULT get_ConnectionMediaType(IDispatch** ppUnk) mut => VT.[Friend]get_ConnectionMediaType(&this, ppUnk);

	public HRESULT get_FilterInfo(IDispatch** ppUnk) mut => VT.[Friend]get_FilterInfo(&this, ppUnk);

	public HRESULT get_Name(BSTR* ppUnk) mut => VT.[Friend]get_Name(&this, ppUnk);

	public HRESULT get_Direction(int32* ppDirection) mut => VT.[Friend]get_Direction(&this, ppDirection);

	public HRESULT get_PinID(BSTR* strPinID) mut => VT.[Friend]get_PinID(&this, strPinID);

	public HRESULT get_MediaTypes(IDispatch** ppUnk) mut => VT.[Friend]get_MediaTypes(&this, ppUnk);

	public HRESULT Connect(IUnknown* pPin) mut => VT.[Friend]Connect(&this, pPin);

	public HRESULT ConnectDirect(IUnknown* pPin) mut => VT.[Friend]ConnectDirect(&this, pPin);

	public HRESULT ConnectWithType(IUnknown* pPin, IDispatch* pMediaType) mut => VT.[Friend]ConnectWithType(&this, pPin, pMediaType);

	public HRESULT Disconnect() mut => VT.[Friend]Disconnect(&this);

	public HRESULT Render() mut => VT.[Friend]Render(&this);
}

[CRepr]struct IAMStats : IDispatch
{
	public new const Guid IID = .(0xbc9bcf80, 0xdcd2, 0x11d2, 0xab, 0xf6, 0x00, 0xa0, 0xc9, 0x05, 0xf3, 0x75);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self) Reset;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* plCount) get_Count;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 lIndex, BSTR* szName, int32* lCount, double* dLast, double* dAverage, double* dStdDev, double* dMin, double* dMax) GetValueByIndex;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR szName, int32* lIndex, int32* lCount, double* dLast, double* dAverage, double* dStdDev, double* dMin, double* dMax) GetValueByName;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR szName, int32 lCreate, int32* plIndex) GetIndex;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 lIndex, double dValue) AddValue;
	}


	public HRESULT Reset() mut => VT.[Friend]Reset(&this);

	public HRESULT get_Count(int32* plCount) mut => VT.[Friend]get_Count(&this, plCount);

	public HRESULT GetValueByIndex(int32 lIndex, BSTR* szName, int32* lCount, double* dLast, double* dAverage, double* dStdDev, double* dMin, double* dMax) mut => VT.[Friend]GetValueByIndex(&this, lIndex, szName, lCount, dLast, dAverage, dStdDev, dMin, dMax);

	public HRESULT GetValueByName(BSTR szName, int32* lIndex, int32* lCount, double* dLast, double* dAverage, double* dStdDev, double* dMin, double* dMax) mut => VT.[Friend]GetValueByName(&this, szName, lIndex, lCount, dLast, dAverage, dStdDev, dMin, dMax);

	public HRESULT GetIndex(BSTR szName, int32 lCreate, int32* plIndex) mut => VT.[Friend]GetIndex(&this, szName, lCreate, plIndex);

	public HRESULT AddValue(int32 lIndex, double dValue) mut => VT.[Friend]AddValue(&this, lIndex, dValue);
}

[CRepr]struct IAMVideoAcceleratorNotify : IUnknown
{
	public new const Guid IID = .(0x256a6a21, 0xfbad, 0x11d1, 0x82, 0xbf, 0x00, 0xa0, 0xc9, 0x69, 0x6c, 0x8f);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IUnknown.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, in Guid pGuid, AMVAUncompBufferInfo* pUncompBufferInfo) GetUncompSurfacesInfo;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32 dwActualUncompSurfacesAllocated) SetUncompSurfacesInfo;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, in Guid pGuid, uint32* pdwSizeMiscData, void** ppMiscData) GetCreateVideoAcceleratorData;
	}


	public HRESULT GetUncompSurfacesInfo(in Guid pGuid, AMVAUncompBufferInfo* pUncompBufferInfo) mut => VT.[Friend]GetUncompSurfacesInfo(&this, pGuid, pUncompBufferInfo);

	public HRESULT SetUncompSurfacesInfo(uint32 dwActualUncompSurfacesAllocated) mut => VT.[Friend]SetUncompSurfacesInfo(&this, dwActualUncompSurfacesAllocated);

	public HRESULT GetCreateVideoAcceleratorData(in Guid pGuid, uint32* pdwSizeMiscData, void** ppMiscData) mut => VT.[Friend]GetCreateVideoAcceleratorData(&this, pGuid, pdwSizeMiscData, ppMiscData);
}

[CRepr]struct IAMVideoAccelerator : IUnknown
{
	public new const Guid IID = .(0x256a6a22, 0xfbad, 0x11d1, 0x82, 0xbf, 0x00, 0xa0, 0xc9, 0x69, 0x6c, 0x8f);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IUnknown.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32* pdwNumGuidsSupported, Guid* pGuidsSupported) GetVideoAcceleratorGUIDs;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, in Guid pGuid, uint32* pdwNumFormatsSupported, DDPIXELFORMAT* pFormatsSupported) GetUncompFormatsSupported;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, in Guid pGuid, AMVAUncompDataInfo* pamvaUncompDataInfo, AMVAInternalMemInfo* pamvaInternalMemInfo) GetInternalMemInfo;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, in Guid pGuid, AMVAUncompDataInfo* pamvaUncompDataInfo, uint32* pdwNumTypesCompBuffers, AMVACompBufferInfo* pamvaCompBufferInfo) GetCompBufferInfo;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32* pdwNumTypesCompBuffers, AMVACompBufferInfo* pamvaCompBufferInfo) GetInternalCompBufferInfo;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, AMVABeginFrameInfo* amvaBeginFrameInfo) BeginFrame;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, AMVAEndFrameInfo* pEndFrameInfo) EndFrame;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32 dwTypeIndex, uint32 dwBufferIndex, BOOL bReadOnly, void** ppBuffer, int32* lpStride) GetBuffer;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32 dwTypeIndex, uint32 dwBufferIndex) ReleaseBuffer;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32 dwFunction, void* lpPrivateInputData, uint32 cbPrivateInputData, void* lpPrivateOutputDat, uint32 cbPrivateOutputData, uint32 dwNumBuffers, AMVABUFFERINFO* pamvaBufferInfo) Execute;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32 dwTypeIndex, uint32 dwBufferIndex, uint32 dwFlags) QueryRenderStatus;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32 dwFlipToIndex, IMediaSample* pMediaSample) DisplayFrame;
	}


	public HRESULT GetVideoAcceleratorGUIDs(uint32* pdwNumGuidsSupported, Guid* pGuidsSupported) mut => VT.[Friend]GetVideoAcceleratorGUIDs(&this, pdwNumGuidsSupported, pGuidsSupported);

	public HRESULT GetUncompFormatsSupported(in Guid pGuid, uint32* pdwNumFormatsSupported, DDPIXELFORMAT* pFormatsSupported) mut => VT.[Friend]GetUncompFormatsSupported(&this, pGuid, pdwNumFormatsSupported, pFormatsSupported);

	public HRESULT GetInternalMemInfo(in Guid pGuid, AMVAUncompDataInfo* pamvaUncompDataInfo, AMVAInternalMemInfo* pamvaInternalMemInfo) mut => VT.[Friend]GetInternalMemInfo(&this, pGuid, pamvaUncompDataInfo, pamvaInternalMemInfo);

	public HRESULT GetCompBufferInfo(in Guid pGuid, AMVAUncompDataInfo* pamvaUncompDataInfo, uint32* pdwNumTypesCompBuffers, AMVACompBufferInfo* pamvaCompBufferInfo) mut => VT.[Friend]GetCompBufferInfo(&this, pGuid, pamvaUncompDataInfo, pdwNumTypesCompBuffers, pamvaCompBufferInfo);

	public HRESULT GetInternalCompBufferInfo(uint32* pdwNumTypesCompBuffers, AMVACompBufferInfo* pamvaCompBufferInfo) mut => VT.[Friend]GetInternalCompBufferInfo(&this, pdwNumTypesCompBuffers, pamvaCompBufferInfo);

	public HRESULT BeginFrame(AMVABeginFrameInfo* amvaBeginFrameInfo) mut => VT.[Friend]BeginFrame(&this, amvaBeginFrameInfo);

	public HRESULT EndFrame(AMVAEndFrameInfo* pEndFrameInfo) mut => VT.[Friend]EndFrame(&this, pEndFrameInfo);

	public HRESULT GetBuffer(uint32 dwTypeIndex, uint32 dwBufferIndex, BOOL bReadOnly, void** ppBuffer, int32* lpStride) mut => VT.[Friend]GetBuffer(&this, dwTypeIndex, dwBufferIndex, bReadOnly, ppBuffer, lpStride);

	public HRESULT ReleaseBuffer(uint32 dwTypeIndex, uint32 dwBufferIndex) mut => VT.[Friend]ReleaseBuffer(&this, dwTypeIndex, dwBufferIndex);

	public HRESULT Execute(uint32 dwFunction, void* lpPrivateInputData, uint32 cbPrivateInputData, void* lpPrivateOutputDat, uint32 cbPrivateOutputData, uint32 dwNumBuffers, AMVABUFFERINFO* pamvaBufferInfo) mut => VT.[Friend]Execute(&this, dwFunction, lpPrivateInputData, cbPrivateInputData, lpPrivateOutputDat, cbPrivateOutputData, dwNumBuffers, pamvaBufferInfo);

	public HRESULT QueryRenderStatus(uint32 dwTypeIndex, uint32 dwBufferIndex, uint32 dwFlags) mut => VT.[Friend]QueryRenderStatus(&this, dwTypeIndex, dwBufferIndex, dwFlags);

	public HRESULT DisplayFrame(uint32 dwFlipToIndex, IMediaSample* pMediaSample) mut => VT.[Friend]DisplayFrame(&this, dwFlipToIndex, pMediaSample);
}

[CRepr]struct IAMWstDecoder : IUnknown
{
	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IUnknown.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, AM_WST_LEVEL* lpLevel) GetDecoderLevel;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, AM_WST_SERVICE* lpService) GetCurrentService;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, AM_WST_STATE* lpState) GetServiceState;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, AM_WST_STATE State) SetServiceState;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BITMAPINFOHEADER* lpbmih) GetOutputFormat;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BITMAPINFO* lpbmi) SetOutputFormat;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32* pdwPhysColor) GetBackgroundColor;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32 dwPhysColor) SetBackgroundColor;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* lpbOption) GetRedrawAlways;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BOOL bOption) SetRedrawAlways;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, AM_WST_DRAWBGMODE* lpMode) GetDrawBackgroundMode;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, AM_WST_DRAWBGMODE Mode) SetDrawBackgroundMode;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BOOL bAnswer) SetAnswerMode;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BOOL* pbAnswer) GetAnswerMode;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BOOL bHoldPage) SetHoldPage;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BOOL* pbHoldPage) GetHoldPage;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, AM_WST_PAGE* pWstPage) GetCurrentPage;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, AM_WST_PAGE WstPage) SetCurrentPage;
	}


	public HRESULT GetDecoderLevel(AM_WST_LEVEL* lpLevel) mut => VT.[Friend]GetDecoderLevel(&this, lpLevel);

	public HRESULT GetCurrentService(AM_WST_SERVICE* lpService) mut => VT.[Friend]GetCurrentService(&this, lpService);

	public HRESULT GetServiceState(AM_WST_STATE* lpState) mut => VT.[Friend]GetServiceState(&this, lpState);

	public HRESULT SetServiceState(AM_WST_STATE State) mut => VT.[Friend]SetServiceState(&this, State);

	public HRESULT GetOutputFormat(BITMAPINFOHEADER* lpbmih) mut => VT.[Friend]GetOutputFormat(&this, lpbmih);

	public HRESULT SetOutputFormat(BITMAPINFO* lpbmi) mut => VT.[Friend]SetOutputFormat(&this, lpbmi);

	public HRESULT GetBackgroundColor(uint32* pdwPhysColor) mut => VT.[Friend]GetBackgroundColor(&this, pdwPhysColor);

	public HRESULT SetBackgroundColor(uint32 dwPhysColor) mut => VT.[Friend]SetBackgroundColor(&this, dwPhysColor);

	public HRESULT GetRedrawAlways(int32* lpbOption) mut => VT.[Friend]GetRedrawAlways(&this, lpbOption);

	public HRESULT SetRedrawAlways(BOOL bOption) mut => VT.[Friend]SetRedrawAlways(&this, bOption);

	public HRESULT GetDrawBackgroundMode(AM_WST_DRAWBGMODE* lpMode) mut => VT.[Friend]GetDrawBackgroundMode(&this, lpMode);

	public HRESULT SetDrawBackgroundMode(AM_WST_DRAWBGMODE Mode) mut => VT.[Friend]SetDrawBackgroundMode(&this, Mode);

	public HRESULT SetAnswerMode(BOOL bAnswer) mut => VT.[Friend]SetAnswerMode(&this, bAnswer);

	public HRESULT GetAnswerMode(BOOL* pbAnswer) mut => VT.[Friend]GetAnswerMode(&this, pbAnswer);

	public HRESULT SetHoldPage(BOOL bHoldPage) mut => VT.[Friend]SetHoldPage(&this, bHoldPage);

	public HRESULT GetHoldPage(BOOL* pbHoldPage) mut => VT.[Friend]GetHoldPage(&this, pbHoldPage);

	public HRESULT GetCurrentPage(AM_WST_PAGE* pWstPage) mut => VT.[Friend]GetCurrentPage(&this, pWstPage);

	public HRESULT SetCurrentPage(AM_WST_PAGE WstPage) mut => VT.[Friend]SetCurrentPage(&this, WstPage);
}

[CRepr]struct IKsTopologyInfo : IUnknown
{
	public new const Guid IID = .(0x720d4ac0, 0x7533, 0x11d0, 0xa5, 0xd6, 0x28, 0xdb, 0x04, 0xc1, 0x00, 0x00);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IUnknown.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32* pdwNumCategories) get_NumCategories;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32 dwIndex, Guid* pCategory) get_Category;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32* pdwNumConnections) get_NumConnections;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32 dwIndex, KSTOPOLOGY_CONNECTION* pConnectionInfo) get_ConnectionInfo;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32 dwNodeId, PWSTR pwchNodeName, uint32 dwBufSize, uint32* pdwNameLen) get_NodeName;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32* pdwNumNodes) get_NumNodes;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32 dwNodeId, Guid* pNodeType) get_NodeType;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32 dwNodeId, in Guid iid, void** ppvObject) CreateNodeInstance;
	}


	public HRESULT get_NumCategories(uint32* pdwNumCategories) mut => VT.[Friend]get_NumCategories(&this, pdwNumCategories);

	public HRESULT get_Category(uint32 dwIndex, Guid* pCategory) mut => VT.[Friend]get_Category(&this, dwIndex, pCategory);

	public HRESULT get_NumConnections(uint32* pdwNumConnections) mut => VT.[Friend]get_NumConnections(&this, pdwNumConnections);

	public HRESULT get_ConnectionInfo(uint32 dwIndex, KSTOPOLOGY_CONNECTION* pConnectionInfo) mut => VT.[Friend]get_ConnectionInfo(&this, dwIndex, pConnectionInfo);

	public HRESULT get_NodeName(uint32 dwNodeId, PWSTR pwchNodeName, uint32 dwBufSize, uint32* pdwNameLen) mut => VT.[Friend]get_NodeName(&this, dwNodeId, pwchNodeName, dwBufSize, pdwNameLen);

	public HRESULT get_NumNodes(uint32* pdwNumNodes) mut => VT.[Friend]get_NumNodes(&this, pdwNumNodes);

	public HRESULT get_NodeType(uint32 dwNodeId, Guid* pNodeType) mut => VT.[Friend]get_NodeType(&this, dwNodeId, pNodeType);

	public HRESULT CreateNodeInstance(uint32 dwNodeId, in Guid iid, void** ppvObject) mut => VT.[Friend]CreateNodeInstance(&this, dwNodeId, iid, ppvObject);
}

[CRepr]struct ISelector : IUnknown
{
	public new const Guid IID = .(0x1abdaeca, 0x68b6, 0x4f83, 0x93, 0x71, 0xb4, 0x13, 0x90, 0x7c, 0x7b, 0x9f);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IUnknown.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32* pdwNumSources) get_NumSources;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32* pdwPinId) get_SourceNodeId;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32 dwPinId) put_SourceNodeId;
	}


	public HRESULT get_NumSources(uint32* pdwNumSources) mut => VT.[Friend]get_NumSources(&this, pdwNumSources);

	public HRESULT get_SourceNodeId(uint32* pdwPinId) mut => VT.[Friend]get_SourceNodeId(&this, pdwPinId);

	public HRESULT put_SourceNodeId(uint32 dwPinId) mut => VT.[Friend]put_SourceNodeId(&this, dwPinId);
}

[CRepr]struct ICameraControl : IUnknown
{
	public new const Guid IID = .(0x2ba1785d, 0x4d1b, 0x44ef, 0x85, 0xe8, 0xc7, 0xf1, 0xd3, 0xf2, 0x01, 0x84);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IUnknown.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* pValue, int32* pFlags) get_Exposure;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 Value, int32 Flags) put_Exposure;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* pMin, int32* pMax, int32* pSteppingDelta, int32* pDefault, int32* pCapsFlag) getRange_Exposure;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* pValue, int32* pFlags) get_Focus;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 Value, int32 Flags) put_Focus;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* pMin, int32* pMax, int32* pSteppingDelta, int32* pDefault, int32* pCapsFlag) getRange_Focus;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* pValue, int32* pFlags) get_Iris;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 Value, int32 Flags) put_Iris;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* pMin, int32* pMax, int32* pSteppingDelta, int32* pDefault, int32* pCapsFlag) getRange_Iris;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* pValue, int32* pFlags) get_Zoom;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 Value, int32 Flags) put_Zoom;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* pMin, int32* pMax, int32* pSteppingDelta, int32* pDefault, int32* pCapsFlag) getRange_Zoom;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* plOcularFocalLength, int32* plObjectiveFocalLengthMin, int32* plObjectiveFocalLengthMax) get_FocalLengths;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* pValue, int32* pFlags) get_Pan;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 Value, int32 Flags) put_Pan;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* pMin, int32* pMax, int32* pSteppingDelta, int32* pDefault, int32* pCapsFlag) getRange_Pan;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* pValue, int32* pFlags) get_Tilt;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 Value, int32 Flags) put_Tilt;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* pMin, int32* pMax, int32* pSteppingDelta, int32* pDefault, int32* pCapsFlag) getRange_Tilt;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* pPanValue, int32* pTiltValue, int32* pFlags) get_PanTilt;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 PanValue, int32 TiltValue, int32 Flags) put_PanTilt;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* pValue, int32* pFlags) get_Roll;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 Value, int32 Flags) put_Roll;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* pMin, int32* pMax, int32* pSteppingDelta, int32* pDefault, int32* pCapsFlag) getRange_Roll;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* pValue, int32* pFlags) get_ExposureRelative;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 Value, int32 Flags) put_ExposureRelative;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* pMin, int32* pMax, int32* pSteppingDelta, int32* pDefault, int32* pCapsFlag) getRange_ExposureRelative;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* pValue, int32* pFlags) get_FocusRelative;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 Value, int32 Flags) put_FocusRelative;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* pMin, int32* pMax, int32* pSteppingDelta, int32* pDefault, int32* pCapsFlag) getRange_FocusRelative;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* pValue, int32* pFlags) get_IrisRelative;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 Value, int32 Flags) put_IrisRelative;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* pMin, int32* pMax, int32* pSteppingDelta, int32* pDefault, int32* pCapsFlag) getRange_IrisRelative;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* pValue, int32* pFlags) get_ZoomRelative;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 Value, int32 Flags) put_ZoomRelative;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* pMin, int32* pMax, int32* pSteppingDelta, int32* pDefault, int32* pCapsFlag) getRange_ZoomRelative;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* pValue, int32* pFlags) get_PanRelative;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 Value, int32 Flags) put_PanRelative;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* pValue, int32* pFlags) get_TiltRelative;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 Value, int32 Flags) put_TiltRelative;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* pMin, int32* pMax, int32* pSteppingDelta, int32* pDefault, int32* pCapsFlag) getRange_TiltRelative;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* pPanValue, int32* pTiltValue, int32* pFlags) get_PanTiltRelative;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 PanValue, int32 TiltValue, int32 Flags) put_PanTiltRelative;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* pMin, int32* pMax, int32* pSteppingDelta, int32* pDefault, int32* pCapsFlag) getRange_PanRelative;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* pValue, int32* pFlags) get_RollRelative;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 Value, int32 Flags) put_RollRelative;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* pMin, int32* pMax, int32* pSteppingDelta, int32* pDefault, int32* pCapsFlag) getRange_RollRelative;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* pValue, int32* pFlags) get_ScanMode;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 Value, int32 Flags) put_ScanMode;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* pValue, int32* pFlags) get_PrivacyMode;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 Value, int32 Flags) put_PrivacyMode;
	}


	public HRESULT get_Exposure(int32* pValue, int32* pFlags) mut => VT.[Friend]get_Exposure(&this, pValue, pFlags);

	public HRESULT put_Exposure(int32 Value, int32 Flags) mut => VT.[Friend]put_Exposure(&this, Value, Flags);

	public HRESULT getRange_Exposure(int32* pMin, int32* pMax, int32* pSteppingDelta, int32* pDefault, int32* pCapsFlag) mut => VT.[Friend]getRange_Exposure(&this, pMin, pMax, pSteppingDelta, pDefault, pCapsFlag);

	public HRESULT get_Focus(int32* pValue, int32* pFlags) mut => VT.[Friend]get_Focus(&this, pValue, pFlags);

	public HRESULT put_Focus(int32 Value, int32 Flags) mut => VT.[Friend]put_Focus(&this, Value, Flags);

	public HRESULT getRange_Focus(int32* pMin, int32* pMax, int32* pSteppingDelta, int32* pDefault, int32* pCapsFlag) mut => VT.[Friend]getRange_Focus(&this, pMin, pMax, pSteppingDelta, pDefault, pCapsFlag);

	public HRESULT get_Iris(int32* pValue, int32* pFlags) mut => VT.[Friend]get_Iris(&this, pValue, pFlags);

	public HRESULT put_Iris(int32 Value, int32 Flags) mut => VT.[Friend]put_Iris(&this, Value, Flags);

	public HRESULT getRange_Iris(int32* pMin, int32* pMax, int32* pSteppingDelta, int32* pDefault, int32* pCapsFlag) mut => VT.[Friend]getRange_Iris(&this, pMin, pMax, pSteppingDelta, pDefault, pCapsFlag);

	public HRESULT get_Zoom(int32* pValue, int32* pFlags) mut => VT.[Friend]get_Zoom(&this, pValue, pFlags);

	public HRESULT put_Zoom(int32 Value, int32 Flags) mut => VT.[Friend]put_Zoom(&this, Value, Flags);

	public HRESULT getRange_Zoom(int32* pMin, int32* pMax, int32* pSteppingDelta, int32* pDefault, int32* pCapsFlag) mut => VT.[Friend]getRange_Zoom(&this, pMin, pMax, pSteppingDelta, pDefault, pCapsFlag);

	public HRESULT get_FocalLengths(int32* plOcularFocalLength, int32* plObjectiveFocalLengthMin, int32* plObjectiveFocalLengthMax) mut => VT.[Friend]get_FocalLengths(&this, plOcularFocalLength, plObjectiveFocalLengthMin, plObjectiveFocalLengthMax);

	public HRESULT get_Pan(int32* pValue, int32* pFlags) mut => VT.[Friend]get_Pan(&this, pValue, pFlags);

	public HRESULT put_Pan(int32 Value, int32 Flags) mut => VT.[Friend]put_Pan(&this, Value, Flags);

	public HRESULT getRange_Pan(int32* pMin, int32* pMax, int32* pSteppingDelta, int32* pDefault, int32* pCapsFlag) mut => VT.[Friend]getRange_Pan(&this, pMin, pMax, pSteppingDelta, pDefault, pCapsFlag);

	public HRESULT get_Tilt(int32* pValue, int32* pFlags) mut => VT.[Friend]get_Tilt(&this, pValue, pFlags);

	public HRESULT put_Tilt(int32 Value, int32 Flags) mut => VT.[Friend]put_Tilt(&this, Value, Flags);

	public HRESULT getRange_Tilt(int32* pMin, int32* pMax, int32* pSteppingDelta, int32* pDefault, int32* pCapsFlag) mut => VT.[Friend]getRange_Tilt(&this, pMin, pMax, pSteppingDelta, pDefault, pCapsFlag);

	public HRESULT get_PanTilt(int32* pPanValue, int32* pTiltValue, int32* pFlags) mut => VT.[Friend]get_PanTilt(&this, pPanValue, pTiltValue, pFlags);

	public HRESULT put_PanTilt(int32 PanValue, int32 TiltValue, int32 Flags) mut => VT.[Friend]put_PanTilt(&this, PanValue, TiltValue, Flags);

	public HRESULT get_Roll(int32* pValue, int32* pFlags) mut => VT.[Friend]get_Roll(&this, pValue, pFlags);

	public HRESULT put_Roll(int32 Value, int32 Flags) mut => VT.[Friend]put_Roll(&this, Value, Flags);

	public HRESULT getRange_Roll(int32* pMin, int32* pMax, int32* pSteppingDelta, int32* pDefault, int32* pCapsFlag) mut => VT.[Friend]getRange_Roll(&this, pMin, pMax, pSteppingDelta, pDefault, pCapsFlag);

	public HRESULT get_ExposureRelative(int32* pValue, int32* pFlags) mut => VT.[Friend]get_ExposureRelative(&this, pValue, pFlags);

	public HRESULT put_ExposureRelative(int32 Value, int32 Flags) mut => VT.[Friend]put_ExposureRelative(&this, Value, Flags);

	public HRESULT getRange_ExposureRelative(int32* pMin, int32* pMax, int32* pSteppingDelta, int32* pDefault, int32* pCapsFlag) mut => VT.[Friend]getRange_ExposureRelative(&this, pMin, pMax, pSteppingDelta, pDefault, pCapsFlag);

	public HRESULT get_FocusRelative(int32* pValue, int32* pFlags) mut => VT.[Friend]get_FocusRelative(&this, pValue, pFlags);

	public HRESULT put_FocusRelative(int32 Value, int32 Flags) mut => VT.[Friend]put_FocusRelative(&this, Value, Flags);

	public HRESULT getRange_FocusRelative(int32* pMin, int32* pMax, int32* pSteppingDelta, int32* pDefault, int32* pCapsFlag) mut => VT.[Friend]getRange_FocusRelative(&this, pMin, pMax, pSteppingDelta, pDefault, pCapsFlag);

	public HRESULT get_IrisRelative(int32* pValue, int32* pFlags) mut => VT.[Friend]get_IrisRelative(&this, pValue, pFlags);

	public HRESULT put_IrisRelative(int32 Value, int32 Flags) mut => VT.[Friend]put_IrisRelative(&this, Value, Flags);

	public HRESULT getRange_IrisRelative(int32* pMin, int32* pMax, int32* pSteppingDelta, int32* pDefault, int32* pCapsFlag) mut => VT.[Friend]getRange_IrisRelative(&this, pMin, pMax, pSteppingDelta, pDefault, pCapsFlag);

	public HRESULT get_ZoomRelative(int32* pValue, int32* pFlags) mut => VT.[Friend]get_ZoomRelative(&this, pValue, pFlags);

	public HRESULT put_ZoomRelative(int32 Value, int32 Flags) mut => VT.[Friend]put_ZoomRelative(&this, Value, Flags);

	public HRESULT getRange_ZoomRelative(int32* pMin, int32* pMax, int32* pSteppingDelta, int32* pDefault, int32* pCapsFlag) mut => VT.[Friend]getRange_ZoomRelative(&this, pMin, pMax, pSteppingDelta, pDefault, pCapsFlag);

	public HRESULT get_PanRelative(int32* pValue, int32* pFlags) mut => VT.[Friend]get_PanRelative(&this, pValue, pFlags);

	public HRESULT put_PanRelative(int32 Value, int32 Flags) mut => VT.[Friend]put_PanRelative(&this, Value, Flags);

	public HRESULT get_TiltRelative(int32* pValue, int32* pFlags) mut => VT.[Friend]get_TiltRelative(&this, pValue, pFlags);

	public HRESULT put_TiltRelative(int32 Value, int32 Flags) mut => VT.[Friend]put_TiltRelative(&this, Value, Flags);

	public HRESULT getRange_TiltRelative(int32* pMin, int32* pMax, int32* pSteppingDelta, int32* pDefault, int32* pCapsFlag) mut => VT.[Friend]getRange_TiltRelative(&this, pMin, pMax, pSteppingDelta, pDefault, pCapsFlag);

	public HRESULT get_PanTiltRelative(int32* pPanValue, int32* pTiltValue, int32* pFlags) mut => VT.[Friend]get_PanTiltRelative(&this, pPanValue, pTiltValue, pFlags);

	public HRESULT put_PanTiltRelative(int32 PanValue, int32 TiltValue, int32 Flags) mut => VT.[Friend]put_PanTiltRelative(&this, PanValue, TiltValue, Flags);

	public HRESULT getRange_PanRelative(int32* pMin, int32* pMax, int32* pSteppingDelta, int32* pDefault, int32* pCapsFlag) mut => VT.[Friend]getRange_PanRelative(&this, pMin, pMax, pSteppingDelta, pDefault, pCapsFlag);

	public HRESULT get_RollRelative(int32* pValue, int32* pFlags) mut => VT.[Friend]get_RollRelative(&this, pValue, pFlags);

	public HRESULT put_RollRelative(int32 Value, int32 Flags) mut => VT.[Friend]put_RollRelative(&this, Value, Flags);

	public HRESULT getRange_RollRelative(int32* pMin, int32* pMax, int32* pSteppingDelta, int32* pDefault, int32* pCapsFlag) mut => VT.[Friend]getRange_RollRelative(&this, pMin, pMax, pSteppingDelta, pDefault, pCapsFlag);

	public HRESULT get_ScanMode(int32* pValue, int32* pFlags) mut => VT.[Friend]get_ScanMode(&this, pValue, pFlags);

	public HRESULT put_ScanMode(int32 Value, int32 Flags) mut => VT.[Friend]put_ScanMode(&this, Value, Flags);

	public HRESULT get_PrivacyMode(int32* pValue, int32* pFlags) mut => VT.[Friend]get_PrivacyMode(&this, pValue, pFlags);

	public HRESULT put_PrivacyMode(int32 Value, int32 Flags) mut => VT.[Friend]put_PrivacyMode(&this, Value, Flags);
}

[CRepr]struct IVideoProcAmp : IUnknown
{
	public new const Guid IID = .(0x4050560e, 0x42a7, 0x413a, 0x85, 0xc2, 0x09, 0x26, 0x9a, 0x2d, 0x0f, 0x44);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IUnknown.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* pValue, int32* pFlags) get_BacklightCompensation;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 Value, int32 Flags) put_BacklightCompensation;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* pMin, int32* pMax, int32* pSteppingDelta, int32* pDefault, int32* pCapsFlag) getRange_BacklightCompensation;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* pValue, int32* pFlags) get_Brightness;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 Value, int32 Flags) put_Brightness;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* pMin, int32* pMax, int32* pSteppingDelta, int32* pDefault, int32* pCapsFlag) getRange_Brightness;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* pValue, int32* pFlags) get_ColorEnable;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 Value, int32 Flags) put_ColorEnable;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* pMin, int32* pMax, int32* pSteppingDelta, int32* pDefault, int32* pCapsFlag) getRange_ColorEnable;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* pValue, int32* pFlags) get_Contrast;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 Value, int32 Flags) put_Contrast;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* pMin, int32* pMax, int32* pSteppingDelta, int32* pDefault, int32* pCapsFlag) getRange_Contrast;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* pValue, int32* pFlags) get_Gamma;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 Value, int32 Flags) put_Gamma;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* pMin, int32* pMax, int32* pSteppingDelta, int32* pDefault, int32* pCapsFlag) getRange_Gamma;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* pValue, int32* pFlags) get_Saturation;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 Value, int32 Flags) put_Saturation;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* pMin, int32* pMax, int32* pSteppingDelta, int32* pDefault, int32* pCapsFlag) getRange_Saturation;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* pValue, int32* pFlags) get_Sharpness;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 Value, int32 Flags) put_Sharpness;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* pMin, int32* pMax, int32* pSteppingDelta, int32* pDefault, int32* pCapsFlag) getRange_Sharpness;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* pValue, int32* pFlags) get_WhiteBalance;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 Value, int32 Flags) put_WhiteBalance;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* pMin, int32* pMax, int32* pSteppingDelta, int32* pDefault, int32* pCapsFlag) getRange_WhiteBalance;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* pValue, int32* pFlags) get_Gain;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 Value, int32 Flags) put_Gain;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* pMin, int32* pMax, int32* pSteppingDelta, int32* pDefault, int32* pCapsFlag) getRange_Gain;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* pValue, int32* pFlags) get_Hue;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 Value, int32 Flags) put_Hue;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* pMin, int32* pMax, int32* pSteppingDelta, int32* pDefault, int32* pCapsFlag) getRange_Hue;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* pValue, int32* pFlags) get_DigitalMultiplier;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 Value, int32 Flags) put_DigitalMultiplier;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* pMin, int32* pMax, int32* pSteppingDelta, int32* pDefault, int32* pCapsFlag) getRange_DigitalMultiplier;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* pValue, int32* pFlags) get_PowerlineFrequency;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 Value, int32 Flags) put_PowerlineFrequency;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* pMin, int32* pMax, int32* pSteppingDelta, int32* pDefault, int32* pCapsFlag) getRange_PowerlineFrequency;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* pValue1, int32* pValue2, int32* pFlags) get_WhiteBalanceComponent;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 Value1, int32 Value2, int32 Flags) put_WhiteBalanceComponent;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* pMin, int32* pMax, int32* pSteppingDelta, int32* pDefault, int32* pCapsFlag) getRange_WhiteBalanceComponent;
	}


	public HRESULT get_BacklightCompensation(int32* pValue, int32* pFlags) mut => VT.[Friend]get_BacklightCompensation(&this, pValue, pFlags);

	public HRESULT put_BacklightCompensation(int32 Value, int32 Flags) mut => VT.[Friend]put_BacklightCompensation(&this, Value, Flags);

	public HRESULT getRange_BacklightCompensation(int32* pMin, int32* pMax, int32* pSteppingDelta, int32* pDefault, int32* pCapsFlag) mut => VT.[Friend]getRange_BacklightCompensation(&this, pMin, pMax, pSteppingDelta, pDefault, pCapsFlag);

	public HRESULT get_Brightness(int32* pValue, int32* pFlags) mut => VT.[Friend]get_Brightness(&this, pValue, pFlags);

	public HRESULT put_Brightness(int32 Value, int32 Flags) mut => VT.[Friend]put_Brightness(&this, Value, Flags);

	public HRESULT getRange_Brightness(int32* pMin, int32* pMax, int32* pSteppingDelta, int32* pDefault, int32* pCapsFlag) mut => VT.[Friend]getRange_Brightness(&this, pMin, pMax, pSteppingDelta, pDefault, pCapsFlag);

	public HRESULT get_ColorEnable(int32* pValue, int32* pFlags) mut => VT.[Friend]get_ColorEnable(&this, pValue, pFlags);

	public HRESULT put_ColorEnable(int32 Value, int32 Flags) mut => VT.[Friend]put_ColorEnable(&this, Value, Flags);

	public HRESULT getRange_ColorEnable(int32* pMin, int32* pMax, int32* pSteppingDelta, int32* pDefault, int32* pCapsFlag) mut => VT.[Friend]getRange_ColorEnable(&this, pMin, pMax, pSteppingDelta, pDefault, pCapsFlag);

	public HRESULT get_Contrast(int32* pValue, int32* pFlags) mut => VT.[Friend]get_Contrast(&this, pValue, pFlags);

	public HRESULT put_Contrast(int32 Value, int32 Flags) mut => VT.[Friend]put_Contrast(&this, Value, Flags);

	public HRESULT getRange_Contrast(int32* pMin, int32* pMax, int32* pSteppingDelta, int32* pDefault, int32* pCapsFlag) mut => VT.[Friend]getRange_Contrast(&this, pMin, pMax, pSteppingDelta, pDefault, pCapsFlag);

	public HRESULT get_Gamma(int32* pValue, int32* pFlags) mut => VT.[Friend]get_Gamma(&this, pValue, pFlags);

	public HRESULT put_Gamma(int32 Value, int32 Flags) mut => VT.[Friend]put_Gamma(&this, Value, Flags);

	public HRESULT getRange_Gamma(int32* pMin, int32* pMax, int32* pSteppingDelta, int32* pDefault, int32* pCapsFlag) mut => VT.[Friend]getRange_Gamma(&this, pMin, pMax, pSteppingDelta, pDefault, pCapsFlag);

	public HRESULT get_Saturation(int32* pValue, int32* pFlags) mut => VT.[Friend]get_Saturation(&this, pValue, pFlags);

	public HRESULT put_Saturation(int32 Value, int32 Flags) mut => VT.[Friend]put_Saturation(&this, Value, Flags);

	public HRESULT getRange_Saturation(int32* pMin, int32* pMax, int32* pSteppingDelta, int32* pDefault, int32* pCapsFlag) mut => VT.[Friend]getRange_Saturation(&this, pMin, pMax, pSteppingDelta, pDefault, pCapsFlag);

	public HRESULT get_Sharpness(int32* pValue, int32* pFlags) mut => VT.[Friend]get_Sharpness(&this, pValue, pFlags);

	public HRESULT put_Sharpness(int32 Value, int32 Flags) mut => VT.[Friend]put_Sharpness(&this, Value, Flags);

	public HRESULT getRange_Sharpness(int32* pMin, int32* pMax, int32* pSteppingDelta, int32* pDefault, int32* pCapsFlag) mut => VT.[Friend]getRange_Sharpness(&this, pMin, pMax, pSteppingDelta, pDefault, pCapsFlag);

	public HRESULT get_WhiteBalance(int32* pValue, int32* pFlags) mut => VT.[Friend]get_WhiteBalance(&this, pValue, pFlags);

	public HRESULT put_WhiteBalance(int32 Value, int32 Flags) mut => VT.[Friend]put_WhiteBalance(&this, Value, Flags);

	public HRESULT getRange_WhiteBalance(int32* pMin, int32* pMax, int32* pSteppingDelta, int32* pDefault, int32* pCapsFlag) mut => VT.[Friend]getRange_WhiteBalance(&this, pMin, pMax, pSteppingDelta, pDefault, pCapsFlag);

	public HRESULT get_Gain(int32* pValue, int32* pFlags) mut => VT.[Friend]get_Gain(&this, pValue, pFlags);

	public HRESULT put_Gain(int32 Value, int32 Flags) mut => VT.[Friend]put_Gain(&this, Value, Flags);

	public HRESULT getRange_Gain(int32* pMin, int32* pMax, int32* pSteppingDelta, int32* pDefault, int32* pCapsFlag) mut => VT.[Friend]getRange_Gain(&this, pMin, pMax, pSteppingDelta, pDefault, pCapsFlag);

	public HRESULT get_Hue(int32* pValue, int32* pFlags) mut => VT.[Friend]get_Hue(&this, pValue, pFlags);

	public HRESULT put_Hue(int32 Value, int32 Flags) mut => VT.[Friend]put_Hue(&this, Value, Flags);

	public HRESULT getRange_Hue(int32* pMin, int32* pMax, int32* pSteppingDelta, int32* pDefault, int32* pCapsFlag) mut => VT.[Friend]getRange_Hue(&this, pMin, pMax, pSteppingDelta, pDefault, pCapsFlag);

	public HRESULT get_DigitalMultiplier(int32* pValue, int32* pFlags) mut => VT.[Friend]get_DigitalMultiplier(&this, pValue, pFlags);

	public HRESULT put_DigitalMultiplier(int32 Value, int32 Flags) mut => VT.[Friend]put_DigitalMultiplier(&this, Value, Flags);

	public HRESULT getRange_DigitalMultiplier(int32* pMin, int32* pMax, int32* pSteppingDelta, int32* pDefault, int32* pCapsFlag) mut => VT.[Friend]getRange_DigitalMultiplier(&this, pMin, pMax, pSteppingDelta, pDefault, pCapsFlag);

	public HRESULT get_PowerlineFrequency(int32* pValue, int32* pFlags) mut => VT.[Friend]get_PowerlineFrequency(&this, pValue, pFlags);

	public HRESULT put_PowerlineFrequency(int32 Value, int32 Flags) mut => VT.[Friend]put_PowerlineFrequency(&this, Value, Flags);

	public HRESULT getRange_PowerlineFrequency(int32* pMin, int32* pMax, int32* pSteppingDelta, int32* pDefault, int32* pCapsFlag) mut => VT.[Friend]getRange_PowerlineFrequency(&this, pMin, pMax, pSteppingDelta, pDefault, pCapsFlag);

	public HRESULT get_WhiteBalanceComponent(int32* pValue1, int32* pValue2, int32* pFlags) mut => VT.[Friend]get_WhiteBalanceComponent(&this, pValue1, pValue2, pFlags);

	public HRESULT put_WhiteBalanceComponent(int32 Value1, int32 Value2, int32 Flags) mut => VT.[Friend]put_WhiteBalanceComponent(&this, Value1, Value2, Flags);

	public HRESULT getRange_WhiteBalanceComponent(int32* pMin, int32* pMax, int32* pSteppingDelta, int32* pDefault, int32* pCapsFlag) mut => VT.[Friend]getRange_WhiteBalanceComponent(&this, pMin, pMax, pSteppingDelta, pDefault, pCapsFlag);
}

[CRepr]struct IKsNodeControl : IUnknown
{
	public new const Guid IID = .(0x11737c14, 0x24a7, 0x4bb5, 0x81, 0xa0, 0x0d, 0x00, 0x38, 0x13, 0xb0, 0xc4);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IUnknown.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32 dwNodeId) put_NodeId;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, void* pKsControl) put_KsControl;
	}


	public HRESULT put_NodeId(uint32 dwNodeId) mut => VT.[Friend]put_NodeId(&this, dwNodeId);

	public HRESULT put_KsControl(void* pKsControl) mut => VT.[Friend]put_KsControl(&this, pKsControl);
}

[CRepr]struct IConfigAsfWriter : IUnknown
{
	public new const Guid IID = .(0x45086030, 0xf7e4, 0x486a, 0xb5, 0x04, 0x82, 0x6b, 0xb5, 0x79, 0x2a, 0x3b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IUnknown.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32 dwProfileId) ConfigureFilterUsingProfileId;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32* pdwProfileId) GetCurrentProfileId;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, in Guid guidProfile) ConfigureFilterUsingProfileGuid;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, Guid* pProfileGuid) GetCurrentProfileGuid;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IWMProfile* pProfile) ConfigureFilterUsingProfile;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IWMProfile** ppProfile) GetCurrentProfile;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BOOL bIndexFile) SetIndexMode;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BOOL* pbIndexFile) GetIndexMode;
	}


	public HRESULT ConfigureFilterUsingProfileId(uint32 dwProfileId) mut => VT.[Friend]ConfigureFilterUsingProfileId(&this, dwProfileId);

	public HRESULT GetCurrentProfileId(uint32* pdwProfileId) mut => VT.[Friend]GetCurrentProfileId(&this, pdwProfileId);

	public HRESULT ConfigureFilterUsingProfileGuid(in Guid guidProfile) mut => VT.[Friend]ConfigureFilterUsingProfileGuid(&this, guidProfile);

	public HRESULT GetCurrentProfileGuid(Guid* pProfileGuid) mut => VT.[Friend]GetCurrentProfileGuid(&this, pProfileGuid);

	public HRESULT ConfigureFilterUsingProfile(IWMProfile* pProfile) mut => VT.[Friend]ConfigureFilterUsingProfile(&this, pProfile);

	public HRESULT GetCurrentProfile(IWMProfile** ppProfile) mut => VT.[Friend]GetCurrentProfile(&this, ppProfile);

	public HRESULT SetIndexMode(BOOL bIndexFile) mut => VT.[Friend]SetIndexMode(&this, bIndexFile);

	public HRESULT GetIndexMode(BOOL* pbIndexFile) mut => VT.[Friend]GetIndexMode(&this, pbIndexFile);
}

[CRepr]struct IConfigAsfWriter2 : IConfigAsfWriter
{
	public new const Guid IID = .(0x7989ccaa, 0x53f0, 0x44f0, 0x88, 0x4a, 0xf3, 0xb0, 0x3f, 0x6a, 0xe0, 0x66);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IConfigAsfWriter.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IPin* pPin, uint16* pwStreamNum) StreamNumFromPin;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32 dwParam, uint32 dwParam1, uint32 dwParam2) SetParam;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32 dwParam, uint32* pdwParam1, uint32* pdwParam2) GetParam;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self) ResetMultiPassState;
	}


	public HRESULT StreamNumFromPin(IPin* pPin, uint16* pwStreamNum) mut => VT.[Friend]StreamNumFromPin(&this, pPin, pwStreamNum);

	public HRESULT SetParam(uint32 dwParam, uint32 dwParam1, uint32 dwParam2) mut => VT.[Friend]SetParam(&this, dwParam, dwParam1, dwParam2);

	public HRESULT GetParam(uint32 dwParam, uint32* pdwParam1, uint32* pdwParam2) mut => VT.[Friend]GetParam(&this, dwParam, pdwParam1, pdwParam2);

	public HRESULT ResetMultiPassState() mut => VT.[Friend]ResetMultiPassState(&this);
}

[CRepr]struct IMultiMediaStream : IUnknown
{
	public new const Guid IID = .(0xb502d1bc, 0x9a57, 0x11d0, 0x8f, 0xde, 0x00, 0xc0, 0x4f, 0xd9, 0x18, 0x9d);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IUnknown.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, MMSSF_GET_INFORMATION_FLAGS* pdwFlags, STREAM_TYPE* pStreamType) GetInformation;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, Guid* idPurpose, IMediaStream** ppMediaStream) GetMediaStream;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 Index, IMediaStream** ppMediaStream) EnumMediaStreams;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, STREAM_STATE* pCurrentState) GetState;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, STREAM_STATE NewState) SetState;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int64* pCurrentTime) GetTime;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int64* pDuration) GetDuration;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int64 SeekTime) Seek;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, HANDLE* phEOS) GetEndOfStreamEventHandle;
	}


	public HRESULT GetInformation(MMSSF_GET_INFORMATION_FLAGS* pdwFlags, STREAM_TYPE* pStreamType) mut => VT.[Friend]GetInformation(&this, pdwFlags, pStreamType);

	public HRESULT GetMediaStream(Guid* idPurpose, IMediaStream** ppMediaStream) mut => VT.[Friend]GetMediaStream(&this, idPurpose, ppMediaStream);

	public HRESULT EnumMediaStreams(int32 Index, IMediaStream** ppMediaStream) mut => VT.[Friend]EnumMediaStreams(&this, Index, ppMediaStream);

	public HRESULT GetState(STREAM_STATE* pCurrentState) mut => VT.[Friend]GetState(&this, pCurrentState);

	public HRESULT SetState(STREAM_STATE NewState) mut => VT.[Friend]SetState(&this, NewState);

	public HRESULT GetTime(int64* pCurrentTime) mut => VT.[Friend]GetTime(&this, pCurrentTime);

	public HRESULT GetDuration(int64* pDuration) mut => VT.[Friend]GetDuration(&this, pDuration);

	public HRESULT Seek(int64 SeekTime) mut => VT.[Friend]Seek(&this, SeekTime);

	public HRESULT GetEndOfStreamEventHandle(HANDLE* phEOS) mut => VT.[Friend]GetEndOfStreamEventHandle(&this, phEOS);
}

[CRepr]struct IMediaStream : IUnknown
{
	public new const Guid IID = .(0xb502d1bd, 0x9a57, 0x11d0, 0x8f, 0xde, 0x00, 0xc0, 0x4f, 0xd9, 0x18, 0x9d);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IUnknown.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IMultiMediaStream** ppMultiMediaStream) GetMultiMediaStream;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, Guid* pPurposeId, STREAM_TYPE* pType) GetInformation;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IMediaStream* pStreamThatHasDesiredFormat, uint32 dwFlags) SetSameFormat;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32 dwFlags, IStreamSample** ppSample) AllocateSample;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IStreamSample* pExistingSample, uint32 dwFlags, IStreamSample** ppNewSample) CreateSharedSample;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32 dwFlags) SendEndOfStream;
	}


	public HRESULT GetMultiMediaStream(IMultiMediaStream** ppMultiMediaStream) mut => VT.[Friend]GetMultiMediaStream(&this, ppMultiMediaStream);

	public HRESULT GetInformation(Guid* pPurposeId, STREAM_TYPE* pType) mut => VT.[Friend]GetInformation(&this, pPurposeId, pType);

	public HRESULT SetSameFormat(IMediaStream* pStreamThatHasDesiredFormat, uint32 dwFlags) mut => VT.[Friend]SetSameFormat(&this, pStreamThatHasDesiredFormat, dwFlags);

	public HRESULT AllocateSample(uint32 dwFlags, IStreamSample** ppSample) mut => VT.[Friend]AllocateSample(&this, dwFlags, ppSample);

	public HRESULT CreateSharedSample(IStreamSample* pExistingSample, uint32 dwFlags, IStreamSample** ppNewSample) mut => VT.[Friend]CreateSharedSample(&this, pExistingSample, dwFlags, ppNewSample);

	public HRESULT SendEndOfStream(uint32 dwFlags) mut => VT.[Friend]SendEndOfStream(&this, dwFlags);
}

[CRepr]struct IStreamSample : IUnknown
{
	public new const Guid IID = .(0xb502d1be, 0x9a57, 0x11d0, 0x8f, 0xde, 0x00, 0xc0, 0x4f, 0xd9, 0x18, 0x9d);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IUnknown.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IMediaStream** ppMediaStream) GetMediaStream;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int64* pStartTime, int64* pEndTime, int64* pCurrentTime) GetSampleTimes;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, in int64 pStartTime, in int64 pEndTime) SetSampleTimes;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32 dwFlags, HANDLE hEvent, PAPCFUNC pfnAPC, uint dwAPCData) Update;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32 dwFlags, uint32 dwMilliseconds) CompletionStatus;
	}


	public HRESULT GetMediaStream(IMediaStream** ppMediaStream) mut => VT.[Friend]GetMediaStream(&this, ppMediaStream);

	public HRESULT GetSampleTimes(int64* pStartTime, int64* pEndTime, int64* pCurrentTime) mut => VT.[Friend]GetSampleTimes(&this, pStartTime, pEndTime, pCurrentTime);

	public HRESULT SetSampleTimes(in int64 pStartTime, in int64 pEndTime) mut => VT.[Friend]SetSampleTimes(&this, pStartTime, pEndTime);

	public HRESULT Update(uint32 dwFlags, HANDLE hEvent, PAPCFUNC pfnAPC, uint dwAPCData) mut => VT.[Friend]Update(&this, dwFlags, hEvent, pfnAPC, dwAPCData);

	public HRESULT CompletionStatus(uint32 dwFlags, uint32 dwMilliseconds) mut => VT.[Friend]CompletionStatus(&this, dwFlags, dwMilliseconds);
}

[CRepr]struct IDirectDrawMediaStream : IMediaStream
{
	public new const Guid IID = .(0xf4104fce, 0x9a70, 0x11d0, 0x8f, 0xde, 0x00, 0xc0, 0x4f, 0xd9, 0x18, 0x9d);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IMediaStream.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, DDSURFACEDESC* pDDSDCurrent, IDirectDrawPalette** ppDirectDrawPalette, DDSURFACEDESC* pDDSDDesired, uint32* pdwFlags) GetFormat;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, DDSURFACEDESC* pDDSurfaceDesc, IDirectDrawPalette* pDirectDrawPalette) SetFormat;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IDirectDraw** ppDirectDraw) GetDirectDraw;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IDirectDraw* pDirectDraw) SetDirectDraw;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IDirectDrawSurface* pSurface, RECT* pRect, uint32 dwFlags, IDirectDrawStreamSample** ppSample) CreateSample;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int64* pFrameTime) GetTimePerFrame;
	}


	public HRESULT GetFormat(DDSURFACEDESC* pDDSDCurrent, IDirectDrawPalette** ppDirectDrawPalette, DDSURFACEDESC* pDDSDDesired, uint32* pdwFlags) mut => VT.[Friend]GetFormat(&this, pDDSDCurrent, ppDirectDrawPalette, pDDSDDesired, pdwFlags);

	public HRESULT SetFormat(DDSURFACEDESC* pDDSurfaceDesc, IDirectDrawPalette* pDirectDrawPalette) mut => VT.[Friend]SetFormat(&this, pDDSurfaceDesc, pDirectDrawPalette);

	public HRESULT GetDirectDraw(IDirectDraw** ppDirectDraw) mut => VT.[Friend]GetDirectDraw(&this, ppDirectDraw);

	public HRESULT SetDirectDraw(IDirectDraw* pDirectDraw) mut => VT.[Friend]SetDirectDraw(&this, pDirectDraw);

	public HRESULT CreateSample(IDirectDrawSurface* pSurface, RECT* pRect, uint32 dwFlags, IDirectDrawStreamSample** ppSample) mut => VT.[Friend]CreateSample(&this, pSurface, pRect, dwFlags, ppSample);

	public HRESULT GetTimePerFrame(int64* pFrameTime) mut => VT.[Friend]GetTimePerFrame(&this, pFrameTime);
}

[CRepr]struct IDirectDrawStreamSample : IStreamSample
{
	public new const Guid IID = .(0xf4104fcf, 0x9a70, 0x11d0, 0x8f, 0xde, 0x00, 0xc0, 0x4f, 0xd9, 0x18, 0x9d);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IStreamSample.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IDirectDrawSurface** ppDirectDrawSurface, RECT* pRect) GetSurface;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, RECT* pRect) SetRect;
	}


	public HRESULT GetSurface(IDirectDrawSurface** ppDirectDrawSurface, RECT* pRect) mut => VT.[Friend]GetSurface(&this, ppDirectDrawSurface, pRect);

	public HRESULT SetRect(RECT* pRect) mut => VT.[Friend]SetRect(&this, pRect);
}

[CRepr]struct IAudioMediaStream : IMediaStream
{
	public new const Guid IID = .(0xf7537560, 0xa3be, 0x11d0, 0x82, 0x12, 0x00, 0xc0, 0x4f, 0xc3, 0x2c, 0x45);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IMediaStream.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, WAVEFORMATEX* pWaveFormatCurrent) GetFormat;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, WAVEFORMATEX* lpWaveFormat) SetFormat;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IAudioData* pAudioData, uint32 dwFlags, IAudioStreamSample** ppSample) CreateSample;
	}


	public HRESULT GetFormat(WAVEFORMATEX* pWaveFormatCurrent) mut => VT.[Friend]GetFormat(&this, pWaveFormatCurrent);

	public HRESULT SetFormat(WAVEFORMATEX* lpWaveFormat) mut => VT.[Friend]SetFormat(&this, lpWaveFormat);

	public HRESULT CreateSample(IAudioData* pAudioData, uint32 dwFlags, IAudioStreamSample** ppSample) mut => VT.[Friend]CreateSample(&this, pAudioData, dwFlags, ppSample);
}

[CRepr]struct IAudioStreamSample : IStreamSample
{
	public new const Guid IID = .(0x345fee00, 0xaba5, 0x11d0, 0x82, 0x12, 0x00, 0xc0, 0x4f, 0xc3, 0x2c, 0x45);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IStreamSample.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IAudioData** ppAudio) GetAudioData;
	}


	public HRESULT GetAudioData(IAudioData** ppAudio) mut => VT.[Friend]GetAudioData(&this, ppAudio);
}

[CRepr]struct IMemoryData : IUnknown
{
	public new const Guid IID = .(0x327fc560, 0xaf60, 0x11d0, 0x82, 0x12, 0x00, 0xc0, 0x4f, 0xc3, 0x2c, 0x45);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IUnknown.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32 cbSize, uint8* pbData, uint32 dwFlags) SetBuffer;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32* pdwLength, uint8** ppbData, uint32* pcbActualData) GetInfo;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32 cbDataValid) SetActual;
	}


	public HRESULT SetBuffer(uint32 cbSize, uint8* pbData, uint32 dwFlags) mut => VT.[Friend]SetBuffer(&this, cbSize, pbData, dwFlags);

	public HRESULT GetInfo(uint32* pdwLength, uint8** ppbData, uint32* pcbActualData) mut => VT.[Friend]GetInfo(&this, pdwLength, ppbData, pcbActualData);

	public HRESULT SetActual(uint32 cbDataValid) mut => VT.[Friend]SetActual(&this, cbDataValid);
}

[CRepr]struct IAudioData : IMemoryData
{
	public new const Guid IID = .(0x54c719c0, 0xaf60, 0x11d0, 0x82, 0x12, 0x00, 0xc0, 0x4f, 0xc3, 0x2c, 0x45);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IMemoryData.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, WAVEFORMATEX* pWaveFormatCurrent) GetFormat;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, WAVEFORMATEX* lpWaveFormat) SetFormat;
	}


	public HRESULT GetFormat(WAVEFORMATEX* pWaveFormatCurrent) mut => VT.[Friend]GetFormat(&this, pWaveFormatCurrent);

	public HRESULT SetFormat(WAVEFORMATEX* lpWaveFormat) mut => VT.[Friend]SetFormat(&this, lpWaveFormat);
}

[CRepr]struct IAMMultiMediaStream : IMultiMediaStream
{
	public new const Guid IID = .(0xbebe595c, 0x9a6f, 0x11d0, 0x8f, 0xde, 0x00, 0xc0, 0x4f, 0xd9, 0x18, 0x9d);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IMultiMediaStream.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, STREAM_TYPE StreamType, AMMSF_MMS_INIT_FLAGS dwFlags, IGraphBuilder* pFilterGraph) Initialize;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IGraphBuilder** ppGraphBuilder) GetFilterGraph;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IMediaStreamFilter** ppFilter) GetFilter;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IUnknown* pStreamObject, in Guid PurposeId, AMMSF_MS_FLAGS dwFlags, IMediaStream** ppNewStream) AddMediaStream;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, PWSTR pszFileName, uint32 dwFlags) OpenFile;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IBindCtx* pCtx, IMoniker* pMoniker, uint32 dwFlags) OpenMoniker;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32 dwFlags) Render;
	}


	public HRESULT Initialize(STREAM_TYPE StreamType, AMMSF_MMS_INIT_FLAGS dwFlags, IGraphBuilder* pFilterGraph) mut => VT.[Friend]Initialize(&this, StreamType, dwFlags, pFilterGraph);

	public HRESULT GetFilterGraph(IGraphBuilder** ppGraphBuilder) mut => VT.[Friend]GetFilterGraph(&this, ppGraphBuilder);

	public HRESULT GetFilter(IMediaStreamFilter** ppFilter) mut => VT.[Friend]GetFilter(&this, ppFilter);

	public HRESULT AddMediaStream(IUnknown* pStreamObject, in Guid PurposeId, AMMSF_MS_FLAGS dwFlags, IMediaStream** ppNewStream) mut => VT.[Friend]AddMediaStream(&this, pStreamObject, PurposeId, dwFlags, ppNewStream);

	public HRESULT OpenFile(PWSTR pszFileName, uint32 dwFlags) mut => VT.[Friend]OpenFile(&this, pszFileName, dwFlags);

	public HRESULT OpenMoniker(IBindCtx* pCtx, IMoniker* pMoniker, uint32 dwFlags) mut => VT.[Friend]OpenMoniker(&this, pCtx, pMoniker, dwFlags);

	public HRESULT Render(uint32 dwFlags) mut => VT.[Friend]Render(&this, dwFlags);
}

[CRepr]struct IAMMediaStream : IMediaStream
{
	public new const Guid IID = .(0xbebe595d, 0x9a6f, 0x11d0, 0x8f, 0xde, 0x00, 0xc0, 0x4f, 0xd9, 0x18, 0x9d);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IMediaStream.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IUnknown* pSourceObject, uint32 dwFlags, Guid* PurposeId, STREAM_TYPE StreamType) Initialize;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, FILTER_STATE State) SetState;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IAMMultiMediaStream* pAMMultiMediaStream) JoinAMMultiMediaStream;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IMediaStreamFilter* pMediaStreamFilter) JoinFilter;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IFilterGraph* pFilterGraph) JoinFilterGraph;
	}


	public HRESULT Initialize(IUnknown* pSourceObject, uint32 dwFlags, Guid* PurposeId, STREAM_TYPE StreamType) mut => VT.[Friend]Initialize(&this, pSourceObject, dwFlags, PurposeId, StreamType);

	public HRESULT SetState(FILTER_STATE State) mut => VT.[Friend]SetState(&this, State);

	public HRESULT JoinAMMultiMediaStream(IAMMultiMediaStream* pAMMultiMediaStream) mut => VT.[Friend]JoinAMMultiMediaStream(&this, pAMMultiMediaStream);

	public HRESULT JoinFilter(IMediaStreamFilter* pMediaStreamFilter) mut => VT.[Friend]JoinFilter(&this, pMediaStreamFilter);

	public HRESULT JoinFilterGraph(IFilterGraph* pFilterGraph) mut => VT.[Friend]JoinFilterGraph(&this, pFilterGraph);
}

[CRepr]struct IMediaStreamFilter : IBaseFilter
{
	public new const Guid IID = .(0xbebe595e, 0x9a6f, 0x11d0, 0x8f, 0xde, 0x00, 0xc0, 0x4f, 0xd9, 0x18, 0x9d);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IBaseFilter.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IAMMediaStream* pAMMediaStream) AddMediaStream;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, Guid* idPurpose, IMediaStream** ppMediaStream) GetMediaStream;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 Index, IMediaStream** ppMediaStream) EnumMediaStreams;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BOOL bRenderer) SupportSeeking;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int64* pTime) ReferenceTimeToStreamTime;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int64* pCurrentStreamTime) GetCurrentStreamTime;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int64 WaitStreamTime) WaitUntil;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BOOL bCancelEOS) Flush;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self) EndOfStream;
	}


	public HRESULT AddMediaStream(IAMMediaStream* pAMMediaStream) mut => VT.[Friend]AddMediaStream(&this, pAMMediaStream);

	public HRESULT GetMediaStream(Guid* idPurpose, IMediaStream** ppMediaStream) mut => VT.[Friend]GetMediaStream(&this, idPurpose, ppMediaStream);

	public HRESULT EnumMediaStreams(int32 Index, IMediaStream** ppMediaStream) mut => VT.[Friend]EnumMediaStreams(&this, Index, ppMediaStream);

	public HRESULT SupportSeeking(BOOL bRenderer) mut => VT.[Friend]SupportSeeking(&this, bRenderer);

	public HRESULT ReferenceTimeToStreamTime(int64* pTime) mut => VT.[Friend]ReferenceTimeToStreamTime(&this, pTime);

	public HRESULT GetCurrentStreamTime(int64* pCurrentStreamTime) mut => VT.[Friend]GetCurrentStreamTime(&this, pCurrentStreamTime);

	public HRESULT WaitUntil(int64 WaitStreamTime) mut => VT.[Friend]WaitUntil(&this, WaitStreamTime);

	public HRESULT Flush(BOOL bCancelEOS) mut => VT.[Friend]Flush(&this, bCancelEOS);

	public HRESULT EndOfStream() mut => VT.[Friend]EndOfStream(&this);
}

[CRepr]struct IDirectDrawMediaSampleAllocator : IUnknown
{
	public new const Guid IID = .(0xab6b4afc, 0xf6e4, 0x11d0, 0x90, 0x0d, 0x00, 0xc0, 0x4f, 0xd9, 0x18, 0x9d);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IUnknown.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IDirectDraw** ppDirectDraw) GetDirectDraw;
	}


	public HRESULT GetDirectDraw(IDirectDraw** ppDirectDraw) mut => VT.[Friend]GetDirectDraw(&this, ppDirectDraw);
}

[CRepr]struct IDirectDrawMediaSample : IUnknown
{
	public new const Guid IID = .(0xab6b4afe, 0xf6e4, 0x11d0, 0x90, 0x0d, 0x00, 0xc0, 0x4f, 0xd9, 0x18, 0x9d);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IUnknown.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IDirectDrawSurface** ppDirectDrawSurface, RECT* pRect) GetSurfaceAndReleaseLock;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self) LockMediaSamplePointer;
	}


	public HRESULT GetSurfaceAndReleaseLock(IDirectDrawSurface** ppDirectDrawSurface, RECT* pRect) mut => VT.[Friend]GetSurfaceAndReleaseLock(&this, ppDirectDrawSurface, pRect);

	public HRESULT LockMediaSamplePointer() mut => VT.[Friend]LockMediaSamplePointer(&this);
}

[CRepr]struct IAMMediaTypeStream : IMediaStream
{
	public new const Guid IID = .(0xab6b4afa, 0xf6e4, 0x11d0, 0x90, 0x0d, 0x00, 0xc0, 0x4f, 0xd9, 0x18, 0x9d);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IMediaStream.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, AM_MEDIA_TYPE* pMediaType, uint32 dwFlags) GetFormat;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, AM_MEDIA_TYPE* pMediaType, uint32 dwFlags) SetFormat;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 lSampleSize, uint8* pbBuffer, uint32 dwFlags, IUnknown* pUnkOuter, IAMMediaTypeSample** ppAMMediaTypeSample) CreateSample;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, ALLOCATOR_PROPERTIES* pProps) GetStreamAllocatorRequirements;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, ALLOCATOR_PROPERTIES* pProps) SetStreamAllocatorRequirements;
	}


	public HRESULT GetFormat(AM_MEDIA_TYPE* pMediaType, uint32 dwFlags) mut => VT.[Friend]GetFormat(&this, pMediaType, dwFlags);

	public HRESULT SetFormat(AM_MEDIA_TYPE* pMediaType, uint32 dwFlags) mut => VT.[Friend]SetFormat(&this, pMediaType, dwFlags);

	public HRESULT CreateSample(int32 lSampleSize, uint8* pbBuffer, uint32 dwFlags, IUnknown* pUnkOuter, IAMMediaTypeSample** ppAMMediaTypeSample) mut => VT.[Friend]CreateSample(&this, lSampleSize, pbBuffer, dwFlags, pUnkOuter, ppAMMediaTypeSample);

	public HRESULT GetStreamAllocatorRequirements(ALLOCATOR_PROPERTIES* pProps) mut => VT.[Friend]GetStreamAllocatorRequirements(&this, pProps);

	public HRESULT SetStreamAllocatorRequirements(ALLOCATOR_PROPERTIES* pProps) mut => VT.[Friend]SetStreamAllocatorRequirements(&this, pProps);
}

[CRepr]struct IAMMediaTypeSample : IStreamSample
{
	public new const Guid IID = .(0xab6b4afb, 0xf6e4, 0x11d0, 0x90, 0x0d, 0x00, 0xc0, 0x4f, 0xd9, 0x18, 0x9d);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IStreamSample.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint8* pBuffer, int32 lSize) SetPointer;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint8** ppBuffer) GetPointer;
		protected new function [CallingConvention(.Stdcall)] int32(SelfOuter* self) GetSize;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int64* pTimeStart, int64* pTimeEnd) GetTime;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int64* pTimeStart, int64* pTimeEnd) SetTime;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self) IsSyncPoint;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BOOL bIsSyncPoint) SetSyncPoint;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self) IsPreroll;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BOOL bIsPreroll) SetPreroll;
		protected new function [CallingConvention(.Stdcall)] int32(SelfOuter* self) GetActualDataLength;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 __MIDL__IAMMediaTypeSample0000) SetActualDataLength;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, AM_MEDIA_TYPE** ppMediaType) GetMediaType;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, AM_MEDIA_TYPE* pMediaType) SetMediaType;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self) IsDiscontinuity;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BOOL bDiscontinuity) SetDiscontinuity;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int64* pTimeStart, int64* pTimeEnd) GetMediaTime;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int64* pTimeStart, int64* pTimeEnd) SetMediaTime;
	}


	public HRESULT SetPointer(uint8* pBuffer, int32 lSize) mut => VT.[Friend]SetPointer(&this, pBuffer, lSize);

	public HRESULT GetPointer(uint8** ppBuffer) mut => VT.[Friend]GetPointer(&this, ppBuffer);

	public int32 GetSize() mut => VT.[Friend]GetSize(&this);

	public HRESULT GetTime(int64* pTimeStart, int64* pTimeEnd) mut => VT.[Friend]GetTime(&this, pTimeStart, pTimeEnd);

	public HRESULT SetTime(int64* pTimeStart, int64* pTimeEnd) mut => VT.[Friend]SetTime(&this, pTimeStart, pTimeEnd);

	public HRESULT IsSyncPoint() mut => VT.[Friend]IsSyncPoint(&this);

	public HRESULT SetSyncPoint(BOOL bIsSyncPoint) mut => VT.[Friend]SetSyncPoint(&this, bIsSyncPoint);

	public HRESULT IsPreroll() mut => VT.[Friend]IsPreroll(&this);

	public HRESULT SetPreroll(BOOL bIsPreroll) mut => VT.[Friend]SetPreroll(&this, bIsPreroll);

	public int32 GetActualDataLength() mut => VT.[Friend]GetActualDataLength(&this);

	public HRESULT SetActualDataLength(int32 __MIDL__IAMMediaTypeSample0000) mut => VT.[Friend]SetActualDataLength(&this, __MIDL__IAMMediaTypeSample0000);

	public HRESULT GetMediaType(AM_MEDIA_TYPE** ppMediaType) mut => VT.[Friend]GetMediaType(&this, ppMediaType);

	public HRESULT SetMediaType(AM_MEDIA_TYPE* pMediaType) mut => VT.[Friend]SetMediaType(&this, pMediaType);

	public HRESULT IsDiscontinuity() mut => VT.[Friend]IsDiscontinuity(&this);

	public HRESULT SetDiscontinuity(BOOL bDiscontinuity) mut => VT.[Friend]SetDiscontinuity(&this, bDiscontinuity);

	public HRESULT GetMediaTime(int64* pTimeStart, int64* pTimeEnd) mut => VT.[Friend]GetMediaTime(&this, pTimeStart, pTimeEnd);

	public HRESULT SetMediaTime(int64* pTimeStart, int64* pTimeEnd) mut => VT.[Friend]SetMediaTime(&this, pTimeStart, pTimeEnd);
}

[CRepr]struct IDirectDrawVideo : IUnknown
{
	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IUnknown.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32* pSwitches) GetSwitches;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32 Switches) SetSwitches;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, DDCAPS_DX7* pCaps) GetCaps;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, DDCAPS_DX7* pCaps) GetEmulatedCaps;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, DDSURFACEDESC* pSurfaceDesc) GetSurfaceDesc;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32* pCount, uint32* pCodes) GetFourCCCodes;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IDirectDraw* pDirectDraw) SetDirectDraw;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IDirectDraw** ppDirectDraw) GetDirectDraw;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32* pSurfaceType) GetSurfaceType;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self) SetDefault;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 UseScanLine) UseScanLine;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* UseScanLine) CanUseScanLine;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 UseOverlayStretch) UseOverlayStretch;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* UseOverlayStretch) CanUseOverlayStretch;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 UseWhenFullScreen) UseWhenFullScreen;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* UseWhenFullScreen) WillUseFullScreen;
	}


	public HRESULT GetSwitches(uint32* pSwitches) mut => VT.[Friend]GetSwitches(&this, pSwitches);

	public HRESULT SetSwitches(uint32 Switches) mut => VT.[Friend]SetSwitches(&this, Switches);

	public HRESULT GetCaps(DDCAPS_DX7* pCaps) mut => VT.[Friend]GetCaps(&this, pCaps);

	public HRESULT GetEmulatedCaps(DDCAPS_DX7* pCaps) mut => VT.[Friend]GetEmulatedCaps(&this, pCaps);

	public HRESULT GetSurfaceDesc(DDSURFACEDESC* pSurfaceDesc) mut => VT.[Friend]GetSurfaceDesc(&this, pSurfaceDesc);

	public HRESULT GetFourCCCodes(uint32* pCount, uint32* pCodes) mut => VT.[Friend]GetFourCCCodes(&this, pCount, pCodes);

	public HRESULT SetDirectDraw(IDirectDraw* pDirectDraw) mut => VT.[Friend]SetDirectDraw(&this, pDirectDraw);

	public HRESULT GetDirectDraw(IDirectDraw** ppDirectDraw) mut => VT.[Friend]GetDirectDraw(&this, ppDirectDraw);

	public HRESULT GetSurfaceType(uint32* pSurfaceType) mut => VT.[Friend]GetSurfaceType(&this, pSurfaceType);

	public HRESULT SetDefault() mut => VT.[Friend]SetDefault(&this);

	public HRESULT UseScanLine(int32 UseScanLine) mut => VT.[Friend]UseScanLine(&this, UseScanLine);

	public HRESULT CanUseScanLine(int32* UseScanLine) mut => VT.[Friend]CanUseScanLine(&this, UseScanLine);

	public HRESULT UseOverlayStretch(int32 UseOverlayStretch) mut => VT.[Friend]UseOverlayStretch(&this, UseOverlayStretch);

	public HRESULT CanUseOverlayStretch(int32* UseOverlayStretch) mut => VT.[Friend]CanUseOverlayStretch(&this, UseOverlayStretch);

	public HRESULT UseWhenFullScreen(int32 UseWhenFullScreen) mut => VT.[Friend]UseWhenFullScreen(&this, UseWhenFullScreen);

	public HRESULT WillUseFullScreen(int32* UseWhenFullScreen) mut => VT.[Friend]WillUseFullScreen(&this, UseWhenFullScreen);
}

[CRepr]struct IQualProp : IUnknown
{
	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IUnknown.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* pcFrames) get_FramesDroppedInRenderer;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* pcFramesDrawn) get_FramesDrawn;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* piAvgFrameRate) get_AvgFrameRate;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* iJitter) get_Jitter;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* piAvg) get_AvgSyncOffset;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* piDev) get_DevSyncOffset;
	}


	public HRESULT get_FramesDroppedInRenderer(int32* pcFrames) mut => VT.[Friend]get_FramesDroppedInRenderer(&this, pcFrames);

	public HRESULT get_FramesDrawn(int32* pcFramesDrawn) mut => VT.[Friend]get_FramesDrawn(&this, pcFramesDrawn);

	public HRESULT get_AvgFrameRate(int32* piAvgFrameRate) mut => VT.[Friend]get_AvgFrameRate(&this, piAvgFrameRate);

	public HRESULT get_Jitter(int32* iJitter) mut => VT.[Friend]get_Jitter(&this, iJitter);

	public HRESULT get_AvgSyncOffset(int32* piAvg) mut => VT.[Friend]get_AvgSyncOffset(&this, piAvg);

	public HRESULT get_DevSyncOffset(int32* piDev) mut => VT.[Friend]get_DevSyncOffset(&this, piDev);
}

[CRepr]struct IFullScreenVideo : IUnknown
{
	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IUnknown.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* pModes) CountModes;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 Mode, int32* pWidth, int32* pHeight, int32* pDepth) GetModeInfo;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* pMode) GetCurrentMode;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 Mode) IsModeAvailable;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 Mode) IsModeEnabled;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 Mode, int32 bEnabled) SetEnabled;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* pClipFactor) GetClipFactor;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 ClipFactor) SetClipFactor;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, HWND hwnd) SetMessageDrain;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, HWND* hwnd) GetMessageDrain;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 Monitor) SetMonitor;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* Monitor) GetMonitor;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 Hide) HideOnDeactivate;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self) IsHideOnDeactivate;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR strCaption) SetCaption;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* pstrCaption) GetCaption;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self) SetDefault;
	}


	public HRESULT CountModes(int32* pModes) mut => VT.[Friend]CountModes(&this, pModes);

	public HRESULT GetModeInfo(int32 Mode, int32* pWidth, int32* pHeight, int32* pDepth) mut => VT.[Friend]GetModeInfo(&this, Mode, pWidth, pHeight, pDepth);

	public HRESULT GetCurrentMode(int32* pMode) mut => VT.[Friend]GetCurrentMode(&this, pMode);

	public HRESULT IsModeAvailable(int32 Mode) mut => VT.[Friend]IsModeAvailable(&this, Mode);

	public HRESULT IsModeEnabled(int32 Mode) mut => VT.[Friend]IsModeEnabled(&this, Mode);

	public HRESULT SetEnabled(int32 Mode, int32 bEnabled) mut => VT.[Friend]SetEnabled(&this, Mode, bEnabled);

	public HRESULT GetClipFactor(int32* pClipFactor) mut => VT.[Friend]GetClipFactor(&this, pClipFactor);

	public HRESULT SetClipFactor(int32 ClipFactor) mut => VT.[Friend]SetClipFactor(&this, ClipFactor);

	public HRESULT SetMessageDrain(HWND hwnd) mut => VT.[Friend]SetMessageDrain(&this, hwnd);

	public HRESULT GetMessageDrain(HWND* hwnd) mut => VT.[Friend]GetMessageDrain(&this, hwnd);

	public HRESULT SetMonitor(int32 Monitor) mut => VT.[Friend]SetMonitor(&this, Monitor);

	public HRESULT GetMonitor(int32* Monitor) mut => VT.[Friend]GetMonitor(&this, Monitor);

	public HRESULT HideOnDeactivate(int32 Hide) mut => VT.[Friend]HideOnDeactivate(&this, Hide);

	public HRESULT IsHideOnDeactivate() mut => VT.[Friend]IsHideOnDeactivate(&this);

	public HRESULT SetCaption(BSTR strCaption) mut => VT.[Friend]SetCaption(&this, strCaption);

	public HRESULT GetCaption(BSTR* pstrCaption) mut => VT.[Friend]GetCaption(&this, pstrCaption);

	public HRESULT SetDefault() mut => VT.[Friend]SetDefault(&this);
}

[CRepr]struct IFullScreenVideoEx : IFullScreenVideo
{
	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IFullScreenVideo.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, HWND hwnd, HACCEL hAccel) SetAcceleratorTable;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, HWND* phwnd, HACCEL* phAccel) GetAcceleratorTable;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 KeepAspect) KeepPixelAspectRatio;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* pKeepAspect) IsKeepPixelAspectRatio;
	}


	public HRESULT SetAcceleratorTable(HWND hwnd, HACCEL hAccel) mut => VT.[Friend]SetAcceleratorTable(&this, hwnd, hAccel);

	public HRESULT GetAcceleratorTable(HWND* phwnd, HACCEL* phAccel) mut => VT.[Friend]GetAcceleratorTable(&this, phwnd, phAccel);

	public HRESULT KeepPixelAspectRatio(int32 KeepAspect) mut => VT.[Friend]KeepPixelAspectRatio(&this, KeepAspect);

	public HRESULT IsKeepPixelAspectRatio(int32* pKeepAspect) mut => VT.[Friend]IsKeepPixelAspectRatio(&this, pKeepAspect);
}

[CRepr]struct IBaseVideoMixer : IUnknown
{
	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IUnknown.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 iPin) SetLeadPin;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* piPin) GetLeadPin;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* piPinCount) GetInputPinCount;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* pbValue) IsUsingClock;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 bValue) SetUsingClock;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* pbValue) GetClockPeriod;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 bValue) SetClockPeriod;
	}


	public HRESULT SetLeadPin(int32 iPin) mut => VT.[Friend]SetLeadPin(&this, iPin);

	public HRESULT GetLeadPin(int32* piPin) mut => VT.[Friend]GetLeadPin(&this, piPin);

	public HRESULT GetInputPinCount(int32* piPinCount) mut => VT.[Friend]GetInputPinCount(&this, piPinCount);

	public HRESULT IsUsingClock(int32* pbValue) mut => VT.[Friend]IsUsingClock(&this, pbValue);

	public HRESULT SetUsingClock(int32 bValue) mut => VT.[Friend]SetUsingClock(&this, bValue);

	public HRESULT GetClockPeriod(int32* pbValue) mut => VT.[Friend]GetClockPeriod(&this, pbValue);

	public HRESULT SetClockPeriod(int32 bValue) mut => VT.[Friend]SetClockPeriod(&this, bValue);
}

[CRepr]struct IDMOWrapperFilter : IUnknown
{
	public new const Guid IID = .(0x52d6f586, 0x9f0f, 0x4824, 0x8f, 0xc8, 0xe3, 0x2c, 0xa0, 0x49, 0x30, 0xc2);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IUnknown.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, in Guid clsidDMO, in Guid catDMO) Init;
	}


	public HRESULT Init(in Guid clsidDMO, in Guid catDMO) mut => VT.[Friend]Init(&this, clsidDMO, catDMO);
}

[CRepr]struct IMixerOCXNotify : IUnknown
{
	public new const Guid IID = .(0x81a3bd31, 0xdee1, 0x11d1, 0x85, 0x08, 0x00, 0xa0, 0xc9, 0x1f, 0x9c, 0xa0);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IUnknown.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, RECT* lpcRect) OnInvalidateRect;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32 ulStatusFlags) OnStatusChange;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32 ulDataFlags) OnDataChange;
	}


	public HRESULT OnInvalidateRect(RECT* lpcRect) mut => VT.[Friend]OnInvalidateRect(&this, lpcRect);

	public HRESULT OnStatusChange(uint32 ulStatusFlags) mut => VT.[Friend]OnStatusChange(&this, ulStatusFlags);

	public HRESULT OnDataChange(uint32 ulDataFlags) mut => VT.[Friend]OnDataChange(&this, ulDataFlags);
}

[CRepr]struct IMixerOCX : IUnknown
{
	public new const Guid IID = .(0x81a3bd32, 0xdee1, 0x11d1, 0x85, 0x08, 0x00, 0xa0, 0xc9, 0x1f, 0x9c, 0xa0);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IUnknown.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32 ulBitsPerPixel, uint32 ulScreenWidth, uint32 ulScreenHeight) OnDisplayChange;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32* pdwPictAspectRatioX, uint32* pdwPictAspectRatioY) GetAspectRatio;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32* pdwVideoWidth, uint32* pdwVideoHeight) GetVideoSize;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32** pdwStatus) GetStatus;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, HDC hdcDraw, RECT* prcDraw) OnDraw;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, POINT* lpptTopLeftSC, RECT* prcDrawCC, RECT* lprcClip) SetDrawRegion;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IMixerOCXNotify* pmdns) Advise;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self) UnAdvise;
	}


	public HRESULT OnDisplayChange(uint32 ulBitsPerPixel, uint32 ulScreenWidth, uint32 ulScreenHeight) mut => VT.[Friend]OnDisplayChange(&this, ulBitsPerPixel, ulScreenWidth, ulScreenHeight);

	public HRESULT GetAspectRatio(uint32* pdwPictAspectRatioX, uint32* pdwPictAspectRatioY) mut => VT.[Friend]GetAspectRatio(&this, pdwPictAspectRatioX, pdwPictAspectRatioY);

	public HRESULT GetVideoSize(uint32* pdwVideoWidth, uint32* pdwVideoHeight) mut => VT.[Friend]GetVideoSize(&this, pdwVideoWidth, pdwVideoHeight);

	public HRESULT GetStatus(uint32** pdwStatus) mut => VT.[Friend]GetStatus(&this, pdwStatus);

	public HRESULT OnDraw(HDC hdcDraw, RECT* prcDraw) mut => VT.[Friend]OnDraw(&this, hdcDraw, prcDraw);

	public HRESULT SetDrawRegion(POINT* lpptTopLeftSC, RECT* prcDrawCC, RECT* lprcClip) mut => VT.[Friend]SetDrawRegion(&this, lpptTopLeftSC, prcDrawCC, lprcClip);

	public HRESULT Advise(IMixerOCXNotify* pmdns) mut => VT.[Friend]Advise(&this, pmdns);

	public HRESULT UnAdvise() mut => VT.[Friend]UnAdvise(&this);
}

[CRepr]struct IMixerPinConfig : IUnknown
{
	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IUnknown.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32 dwLeft, uint32 dwTop, uint32 dwRight, uint32 dwBottom) SetRelativePosition;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32* pdwLeft, uint32* pdwTop, uint32* pdwRight, uint32* pdwBottom) GetRelativePosition;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32 dwZOrder) SetZOrder;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32* pdwZOrder) GetZOrder;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, COLORKEY* pColorKey) SetColorKey;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, COLORKEY* pColorKey, uint32* pColor) GetColorKey;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32 dwBlendingParameter) SetBlendingParameter;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32* pdwBlendingParameter) GetBlendingParameter;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, AM_ASPECT_RATIO_MODE amAspectRatioMode) SetAspectRatioMode;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, AM_ASPECT_RATIO_MODE* pamAspectRatioMode) GetAspectRatioMode;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BOOL bStreamTransparent) SetStreamTransparent;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BOOL* pbStreamTransparent) GetStreamTransparent;
	}


	public HRESULT SetRelativePosition(uint32 dwLeft, uint32 dwTop, uint32 dwRight, uint32 dwBottom) mut => VT.[Friend]SetRelativePosition(&this, dwLeft, dwTop, dwRight, dwBottom);

	public HRESULT GetRelativePosition(uint32* pdwLeft, uint32* pdwTop, uint32* pdwRight, uint32* pdwBottom) mut => VT.[Friend]GetRelativePosition(&this, pdwLeft, pdwTop, pdwRight, pdwBottom);

	public HRESULT SetZOrder(uint32 dwZOrder) mut => VT.[Friend]SetZOrder(&this, dwZOrder);

	public HRESULT GetZOrder(uint32* pdwZOrder) mut => VT.[Friend]GetZOrder(&this, pdwZOrder);

	public HRESULT SetColorKey(COLORKEY* pColorKey) mut => VT.[Friend]SetColorKey(&this, pColorKey);

	public HRESULT GetColorKey(COLORKEY* pColorKey, uint32* pColor) mut => VT.[Friend]GetColorKey(&this, pColorKey, pColor);

	public HRESULT SetBlendingParameter(uint32 dwBlendingParameter) mut => VT.[Friend]SetBlendingParameter(&this, dwBlendingParameter);

	public HRESULT GetBlendingParameter(uint32* pdwBlendingParameter) mut => VT.[Friend]GetBlendingParameter(&this, pdwBlendingParameter);

	public HRESULT SetAspectRatioMode(AM_ASPECT_RATIO_MODE amAspectRatioMode) mut => VT.[Friend]SetAspectRatioMode(&this, amAspectRatioMode);

	public HRESULT GetAspectRatioMode(AM_ASPECT_RATIO_MODE* pamAspectRatioMode) mut => VT.[Friend]GetAspectRatioMode(&this, pamAspectRatioMode);

	public HRESULT SetStreamTransparent(BOOL bStreamTransparent) mut => VT.[Friend]SetStreamTransparent(&this, bStreamTransparent);

	public HRESULT GetStreamTransparent(BOOL* pbStreamTransparent) mut => VT.[Friend]GetStreamTransparent(&this, pbStreamTransparent);
}

[CRepr]struct IMixerPinConfig2 : IMixerPinConfig
{
	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IMixerPinConfig.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, DDCOLORCONTROL* pColorControl) SetOverlaySurfaceColorControls;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, DDCOLORCONTROL* pColorControl) GetOverlaySurfaceColorControls;
	}


	public HRESULT SetOverlaySurfaceColorControls(DDCOLORCONTROL* pColorControl) mut => VT.[Friend]SetOverlaySurfaceColorControls(&this, pColorControl);

	public HRESULT GetOverlaySurfaceColorControls(DDCOLORCONTROL* pColorControl) mut => VT.[Friend]GetOverlaySurfaceColorControls(&this, pColorControl);
}

[CRepr]struct IMpegAudioDecoder : IUnknown
{
	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IUnknown.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32* pDivider) get_FrequencyDivider;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32 Divider) put_FrequencyDivider;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32* pAccuracy) get_DecoderAccuracy;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32 Accuracy) put_DecoderAccuracy;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32* pStereo) get_Stereo;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32 Stereo) put_Stereo;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32* pWordSize) get_DecoderWordSize;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32 WordSize) put_DecoderWordSize;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32* pIntDecode) get_IntegerDecode;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32 IntDecode) put_IntegerDecode;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32* pIntDecode) get_DualMode;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32 IntDecode) put_DualMode;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, MPEG1WAVEFORMAT* lpFmt) get_AudioFormat;
	}


	public HRESULT get_FrequencyDivider(uint32* pDivider) mut => VT.[Friend]get_FrequencyDivider(&this, pDivider);

	public HRESULT put_FrequencyDivider(uint32 Divider) mut => VT.[Friend]put_FrequencyDivider(&this, Divider);

	public HRESULT get_DecoderAccuracy(uint32* pAccuracy) mut => VT.[Friend]get_DecoderAccuracy(&this, pAccuracy);

	public HRESULT put_DecoderAccuracy(uint32 Accuracy) mut => VT.[Friend]put_DecoderAccuracy(&this, Accuracy);

	public HRESULT get_Stereo(uint32* pStereo) mut => VT.[Friend]get_Stereo(&this, pStereo);

	public HRESULT put_Stereo(uint32 Stereo) mut => VT.[Friend]put_Stereo(&this, Stereo);

	public HRESULT get_DecoderWordSize(uint32* pWordSize) mut => VT.[Friend]get_DecoderWordSize(&this, pWordSize);

	public HRESULT put_DecoderWordSize(uint32 WordSize) mut => VT.[Friend]put_DecoderWordSize(&this, WordSize);

	public HRESULT get_IntegerDecode(uint32* pIntDecode) mut => VT.[Friend]get_IntegerDecode(&this, pIntDecode);

	public HRESULT put_IntegerDecode(uint32 IntDecode) mut => VT.[Friend]put_IntegerDecode(&this, IntDecode);

	public HRESULT get_DualMode(uint32* pIntDecode) mut => VT.[Friend]get_DualMode(&this, pIntDecode);

	public HRESULT put_DualMode(uint32 IntDecode) mut => VT.[Friend]put_DualMode(&this, IntDecode);

	public HRESULT get_AudioFormat(MPEG1WAVEFORMAT* lpFmt) mut => VT.[Friend]get_AudioFormat(&this, lpFmt);
}

[CRepr]struct IVMRImagePresenter9 : IUnknown
{
	public new const Guid IID = .(0x69188c61, 0x12a3, 0x40f0, 0x8f, 0xfc, 0x34, 0x2e, 0x7b, 0x43, 0x3f, 0xd7);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IUnknown.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint dwUserID) StartPresenting;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint dwUserID) StopPresenting;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint dwUserID, VMR9PresentationInfo* lpPresInfo) PresentImage;
	}


	public HRESULT StartPresenting(uint dwUserID) mut => VT.[Friend]StartPresenting(&this, dwUserID);

	public HRESULT StopPresenting(uint dwUserID) mut => VT.[Friend]StopPresenting(&this, dwUserID);

	public HRESULT PresentImage(uint dwUserID, VMR9PresentationInfo* lpPresInfo) mut => VT.[Friend]PresentImage(&this, dwUserID, lpPresInfo);
}

[CRepr]struct IVMRSurfaceAllocator9 : IUnknown
{
	public new const Guid IID = .(0x8d5148ea, 0x3f5d, 0x46cf, 0x9d, 0xf1, 0xd1, 0xb8, 0x96, 0xee, 0xdb, 0x1f);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IUnknown.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint dwUserID, VMR9AllocationInfo* lpAllocInfo, uint32* lpNumBuffers) InitializeDevice;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint dwID) TerminateDevice;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint dwUserID, uint32 SurfaceIndex, uint32 SurfaceFlags, IDirect3DSurface9** lplpSurface) GetSurface;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IVMRSurfaceAllocatorNotify9* lpIVMRSurfAllocNotify) AdviseNotify;
	}


	public HRESULT InitializeDevice(uint dwUserID, VMR9AllocationInfo* lpAllocInfo, uint32* lpNumBuffers) mut => VT.[Friend]InitializeDevice(&this, dwUserID, lpAllocInfo, lpNumBuffers);

	public HRESULT TerminateDevice(uint dwID) mut => VT.[Friend]TerminateDevice(&this, dwID);

	public HRESULT GetSurface(uint dwUserID, uint32 SurfaceIndex, uint32 SurfaceFlags, IDirect3DSurface9** lplpSurface) mut => VT.[Friend]GetSurface(&this, dwUserID, SurfaceIndex, SurfaceFlags, lplpSurface);

	public HRESULT AdviseNotify(IVMRSurfaceAllocatorNotify9* lpIVMRSurfAllocNotify) mut => VT.[Friend]AdviseNotify(&this, lpIVMRSurfAllocNotify);
}

[CRepr]struct IVMRSurfaceAllocatorEx9 : IVMRSurfaceAllocator9
{
	public new const Guid IID = .(0x6de9a68a, 0xa928, 0x4522, 0xbf, 0x57, 0x65, 0x5a, 0xe3, 0x86, 0x64, 0x56);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IVMRSurfaceAllocator9.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint dwUserID, uint32 SurfaceIndex, uint32 SurfaceFlags, IDirect3DSurface9** lplpSurface, RECT* lprcDst) GetSurfaceEx;
	}


	public HRESULT GetSurfaceEx(uint dwUserID, uint32 SurfaceIndex, uint32 SurfaceFlags, IDirect3DSurface9** lplpSurface, RECT* lprcDst) mut => VT.[Friend]GetSurfaceEx(&this, dwUserID, SurfaceIndex, SurfaceFlags, lplpSurface, lprcDst);
}

[CRepr]struct IVMRSurfaceAllocatorNotify9 : IUnknown
{
	public new const Guid IID = .(0xdca3f5df, 0xbb3a, 0x4d03, 0xbd, 0x81, 0x84, 0x61, 0x4b, 0xfb, 0xfa, 0x0c);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IUnknown.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint dwUserID, IVMRSurfaceAllocator9* lpIVRMSurfaceAllocator) AdviseSurfaceAllocator;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IDirect3DDevice9* lpD3DDevice, HMONITOR hMonitor) SetD3DDevice;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IDirect3DDevice9* lpD3DDevice, HMONITOR hMonitor) ChangeD3DDevice;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VMR9AllocationInfo* lpAllocInfo, uint32* lpNumBuffers, IDirect3DSurface9** lplpSurface) AllocateSurfaceHelper;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 EventCode, int Param1, int Param2) NotifyEvent;
	}


	public HRESULT AdviseSurfaceAllocator(uint dwUserID, IVMRSurfaceAllocator9* lpIVRMSurfaceAllocator) mut => VT.[Friend]AdviseSurfaceAllocator(&this, dwUserID, lpIVRMSurfaceAllocator);

	public HRESULT SetD3DDevice(IDirect3DDevice9* lpD3DDevice, HMONITOR hMonitor) mut => VT.[Friend]SetD3DDevice(&this, lpD3DDevice, hMonitor);

	public HRESULT ChangeD3DDevice(IDirect3DDevice9* lpD3DDevice, HMONITOR hMonitor) mut => VT.[Friend]ChangeD3DDevice(&this, lpD3DDevice, hMonitor);

	public HRESULT AllocateSurfaceHelper(VMR9AllocationInfo* lpAllocInfo, uint32* lpNumBuffers, IDirect3DSurface9** lplpSurface) mut => VT.[Friend]AllocateSurfaceHelper(&this, lpAllocInfo, lpNumBuffers, lplpSurface);

	public HRESULT NotifyEvent(int32 EventCode, int Param1, int Param2) mut => VT.[Friend]NotifyEvent(&this, EventCode, Param1, Param2);
}

[CRepr]struct IVMRWindowlessControl9 : IUnknown
{
	public new const Guid IID = .(0x8f537d09, 0xf85e, 0x4414, 0xb2, 0x3b, 0x50, 0x2e, 0x54, 0xc7, 0x99, 0x27);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IUnknown.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* lpWidth, int32* lpHeight, int32* lpARWidth, int32* lpARHeight) GetNativeVideoSize;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* lpWidth, int32* lpHeight) GetMinIdealVideoSize;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* lpWidth, int32* lpHeight) GetMaxIdealVideoSize;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, RECT* lpSRCRect, RECT* lpDSTRect) SetVideoPosition;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, RECT* lpSRCRect, RECT* lpDSTRect) GetVideoPosition;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32* lpAspectRatioMode) GetAspectRatioMode;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32 AspectRatioMode) SetAspectRatioMode;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, HWND hwnd) SetVideoClippingWindow;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, HWND hwnd, HDC hdc) RepaintVideo;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self) DisplayModeChanged;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint8** lpDib) GetCurrentImage;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32 Clr) SetBorderColor;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32* lpClr) GetBorderColor;
	}


	public HRESULT GetNativeVideoSize(int32* lpWidth, int32* lpHeight, int32* lpARWidth, int32* lpARHeight) mut => VT.[Friend]GetNativeVideoSize(&this, lpWidth, lpHeight, lpARWidth, lpARHeight);

	public HRESULT GetMinIdealVideoSize(int32* lpWidth, int32* lpHeight) mut => VT.[Friend]GetMinIdealVideoSize(&this, lpWidth, lpHeight);

	public HRESULT GetMaxIdealVideoSize(int32* lpWidth, int32* lpHeight) mut => VT.[Friend]GetMaxIdealVideoSize(&this, lpWidth, lpHeight);

	public HRESULT SetVideoPosition(RECT* lpSRCRect, RECT* lpDSTRect) mut => VT.[Friend]SetVideoPosition(&this, lpSRCRect, lpDSTRect);

	public HRESULT GetVideoPosition(RECT* lpSRCRect, RECT* lpDSTRect) mut => VT.[Friend]GetVideoPosition(&this, lpSRCRect, lpDSTRect);

	public HRESULT GetAspectRatioMode(uint32* lpAspectRatioMode) mut => VT.[Friend]GetAspectRatioMode(&this, lpAspectRatioMode);

	public HRESULT SetAspectRatioMode(uint32 AspectRatioMode) mut => VT.[Friend]SetAspectRatioMode(&this, AspectRatioMode);

	public HRESULT SetVideoClippingWindow(HWND hwnd) mut => VT.[Friend]SetVideoClippingWindow(&this, hwnd);

	public HRESULT RepaintVideo(HWND hwnd, HDC hdc) mut => VT.[Friend]RepaintVideo(&this, hwnd, hdc);

	public HRESULT DisplayModeChanged() mut => VT.[Friend]DisplayModeChanged(&this);

	public HRESULT GetCurrentImage(uint8** lpDib) mut => VT.[Friend]GetCurrentImage(&this, lpDib);

	public HRESULT SetBorderColor(uint32 Clr) mut => VT.[Friend]SetBorderColor(&this, Clr);

	public HRESULT GetBorderColor(uint32* lpClr) mut => VT.[Friend]GetBorderColor(&this, lpClr);
}

[CRepr]struct IVMRMixerControl9 : IUnknown
{
	public new const Guid IID = .(0x1a777eaa, 0x47c8, 0x4930, 0xb2, 0xc9, 0x8f, 0xee, 0x1c, 0x1b, 0x0f, 0x3b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IUnknown.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32 dwStreamID, float Alpha) SetAlpha;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32 dwStreamID, float* pAlpha) GetAlpha;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32 dwStreamID, uint32 dwZ) SetZOrder;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32 dwStreamID, uint32* pZ) GetZOrder;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32 dwStreamID, VMR9NormalizedRect* pRect) SetOutputRect;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32 dwStreamID, VMR9NormalizedRect* pRect) GetOutputRect;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32 ClrBkg) SetBackgroundClr;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32* lpClrBkg) GetBackgroundClr;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32 dwMixerPrefs) SetMixingPrefs;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32* pdwMixerPrefs) GetMixingPrefs;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32 dwStreamID, VMR9ProcAmpControl* lpClrControl) SetProcAmpControl;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32 dwStreamID, VMR9ProcAmpControl* lpClrControl) GetProcAmpControl;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32 dwStreamID, VMR9ProcAmpControlRange* lpClrControl) GetProcAmpControlRange;
	}


	public HRESULT SetAlpha(uint32 dwStreamID, float Alpha) mut => VT.[Friend]SetAlpha(&this, dwStreamID, Alpha);

	public HRESULT GetAlpha(uint32 dwStreamID, float* pAlpha) mut => VT.[Friend]GetAlpha(&this, dwStreamID, pAlpha);

	public HRESULT SetZOrder(uint32 dwStreamID, uint32 dwZ) mut => VT.[Friend]SetZOrder(&this, dwStreamID, dwZ);

	public HRESULT GetZOrder(uint32 dwStreamID, uint32* pZ) mut => VT.[Friend]GetZOrder(&this, dwStreamID, pZ);

	public HRESULT SetOutputRect(uint32 dwStreamID, VMR9NormalizedRect* pRect) mut => VT.[Friend]SetOutputRect(&this, dwStreamID, pRect);

	public HRESULT GetOutputRect(uint32 dwStreamID, VMR9NormalizedRect* pRect) mut => VT.[Friend]GetOutputRect(&this, dwStreamID, pRect);

	public HRESULT SetBackgroundClr(uint32 ClrBkg) mut => VT.[Friend]SetBackgroundClr(&this, ClrBkg);

	public HRESULT GetBackgroundClr(uint32* lpClrBkg) mut => VT.[Friend]GetBackgroundClr(&this, lpClrBkg);

	public HRESULT SetMixingPrefs(uint32 dwMixerPrefs) mut => VT.[Friend]SetMixingPrefs(&this, dwMixerPrefs);

	public HRESULT GetMixingPrefs(uint32* pdwMixerPrefs) mut => VT.[Friend]GetMixingPrefs(&this, pdwMixerPrefs);

	public HRESULT SetProcAmpControl(uint32 dwStreamID, VMR9ProcAmpControl* lpClrControl) mut => VT.[Friend]SetProcAmpControl(&this, dwStreamID, lpClrControl);

	public HRESULT GetProcAmpControl(uint32 dwStreamID, VMR9ProcAmpControl* lpClrControl) mut => VT.[Friend]GetProcAmpControl(&this, dwStreamID, lpClrControl);

	public HRESULT GetProcAmpControlRange(uint32 dwStreamID, VMR9ProcAmpControlRange* lpClrControl) mut => VT.[Friend]GetProcAmpControlRange(&this, dwStreamID, lpClrControl);
}

[CRepr]struct IVMRMixerBitmap9 : IUnknown
{
	public new const Guid IID = .(0xced175e5, 0x1935, 0x4820, 0x81, 0xbd, 0xff, 0x6a, 0xd0, 0x0c, 0x91, 0x08);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IUnknown.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VMR9AlphaBitmap* pBmpParms) SetAlphaBitmap;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VMR9AlphaBitmap* pBmpParms) UpdateAlphaBitmapParameters;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VMR9AlphaBitmap* pBmpParms) GetAlphaBitmapParameters;
	}


	public HRESULT SetAlphaBitmap(VMR9AlphaBitmap* pBmpParms) mut => VT.[Friend]SetAlphaBitmap(&this, pBmpParms);

	public HRESULT UpdateAlphaBitmapParameters(VMR9AlphaBitmap* pBmpParms) mut => VT.[Friend]UpdateAlphaBitmapParameters(&this, pBmpParms);

	public HRESULT GetAlphaBitmapParameters(VMR9AlphaBitmap* pBmpParms) mut => VT.[Friend]GetAlphaBitmapParameters(&this, pBmpParms);
}

[CRepr]struct IVMRSurface9 : IUnknown
{
	public new const Guid IID = .(0xdfc581a1, 0x6e1f, 0x4c3a, 0x8d, 0x0a, 0x5e, 0x97, 0x92, 0xea, 0x2a, 0xfc);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IUnknown.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self) IsSurfaceLocked;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint8** lpSurface) LockSurface;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self) UnlockSurface;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IDirect3DSurface9** lplpSurface) GetSurface;
	}


	public HRESULT IsSurfaceLocked() mut => VT.[Friend]IsSurfaceLocked(&this);

	public HRESULT LockSurface(uint8** lpSurface) mut => VT.[Friend]LockSurface(&this, lpSurface);

	public HRESULT UnlockSurface() mut => VT.[Friend]UnlockSurface(&this);

	public HRESULT GetSurface(IDirect3DSurface9** lplpSurface) mut => VT.[Friend]GetSurface(&this, lplpSurface);
}

[CRepr]struct IVMRImagePresenterConfig9 : IUnknown
{
	public new const Guid IID = .(0x45c15cab, 0x6e22, 0x420a, 0x80, 0x43, 0xae, 0x1f, 0x0a, 0xc0, 0x2c, 0x7d);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IUnknown.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32 dwRenderFlags) SetRenderingPrefs;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32* dwRenderFlags) GetRenderingPrefs;
	}


	public HRESULT SetRenderingPrefs(uint32 dwRenderFlags) mut => VT.[Friend]SetRenderingPrefs(&this, dwRenderFlags);

	public HRESULT GetRenderingPrefs(uint32* dwRenderFlags) mut => VT.[Friend]GetRenderingPrefs(&this, dwRenderFlags);
}

[CRepr]struct IVMRVideoStreamControl9 : IUnknown
{
	public new const Guid IID = .(0xd0cfe38b, 0x93e7, 0x4772, 0x89, 0x57, 0x04, 0x00, 0xc4, 0x9a, 0x44, 0x85);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IUnknown.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BOOL fActive) SetStreamActiveState;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BOOL* lpfActive) GetStreamActiveState;
	}


	public HRESULT SetStreamActiveState(BOOL fActive) mut => VT.[Friend]SetStreamActiveState(&this, fActive);

	public HRESULT GetStreamActiveState(BOOL* lpfActive) mut => VT.[Friend]GetStreamActiveState(&this, lpfActive);
}

[CRepr]struct IVMRFilterConfig9 : IUnknown
{
	public new const Guid IID = .(0x5a804648, 0x4f66, 0x4867, 0x9c, 0x43, 0x4f, 0x5c, 0x82, 0x2c, 0xf1, 0xb8);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IUnknown.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IVMRImageCompositor9* lpVMRImgCompositor) SetImageCompositor;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32 dwMaxStreams) SetNumberOfStreams;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32* pdwMaxStreams) GetNumberOfStreams;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32 dwRenderFlags) SetRenderingPrefs;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32* pdwRenderFlags) GetRenderingPrefs;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32 Mode) SetRenderingMode;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32* pMode) GetRenderingMode;
	}


	public HRESULT SetImageCompositor(IVMRImageCompositor9* lpVMRImgCompositor) mut => VT.[Friend]SetImageCompositor(&this, lpVMRImgCompositor);

	public HRESULT SetNumberOfStreams(uint32 dwMaxStreams) mut => VT.[Friend]SetNumberOfStreams(&this, dwMaxStreams);

	public HRESULT GetNumberOfStreams(uint32* pdwMaxStreams) mut => VT.[Friend]GetNumberOfStreams(&this, pdwMaxStreams);

	public HRESULT SetRenderingPrefs(uint32 dwRenderFlags) mut => VT.[Friend]SetRenderingPrefs(&this, dwRenderFlags);

	public HRESULT GetRenderingPrefs(uint32* pdwRenderFlags) mut => VT.[Friend]GetRenderingPrefs(&this, pdwRenderFlags);

	public HRESULT SetRenderingMode(uint32 Mode) mut => VT.[Friend]SetRenderingMode(&this, Mode);

	public HRESULT GetRenderingMode(uint32* pMode) mut => VT.[Friend]GetRenderingMode(&this, pMode);
}

[CRepr]struct IVMRAspectRatioControl9 : IUnknown
{
	public new const Guid IID = .(0x00d96c29, 0xbbde, 0x4efc, 0x99, 0x01, 0xbb, 0x50, 0x36, 0x39, 0x21, 0x46);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IUnknown.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32* lpdwARMode) GetAspectRatioMode;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32 dwARMode) SetAspectRatioMode;
	}


	public HRESULT GetAspectRatioMode(uint32* lpdwARMode) mut => VT.[Friend]GetAspectRatioMode(&this, lpdwARMode);

	public HRESULT SetAspectRatioMode(uint32 dwARMode) mut => VT.[Friend]SetAspectRatioMode(&this, dwARMode);
}

[CRepr]struct IVMRMonitorConfig9 : IUnknown
{
	public new const Guid IID = .(0x46c2e457, 0x8ba0, 0x4eef, 0xb8, 0x0b, 0x06, 0x80, 0xf0, 0x97, 0x87, 0x49);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IUnknown.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32 uDev) SetMonitor;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32* puDev) GetMonitor;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32 uDev) SetDefaultMonitor;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32* puDev) GetDefaultMonitor;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VMR9MonitorInfo* pInfo, uint32 dwMaxInfoArraySize, uint32* pdwNumDevices) GetAvailableMonitors;
	}


	public HRESULT SetMonitor(uint32 uDev) mut => VT.[Friend]SetMonitor(&this, uDev);

	public HRESULT GetMonitor(uint32* puDev) mut => VT.[Friend]GetMonitor(&this, puDev);

	public HRESULT SetDefaultMonitor(uint32 uDev) mut => VT.[Friend]SetDefaultMonitor(&this, uDev);

	public HRESULT GetDefaultMonitor(uint32* puDev) mut => VT.[Friend]GetDefaultMonitor(&this, puDev);

	public HRESULT GetAvailableMonitors(VMR9MonitorInfo* pInfo, uint32 dwMaxInfoArraySize, uint32* pdwNumDevices) mut => VT.[Friend]GetAvailableMonitors(&this, pInfo, dwMaxInfoArraySize, pdwNumDevices);
}

[CRepr]struct IVMRDeinterlaceControl9 : IUnknown
{
	public new const Guid IID = .(0xa215fb8d, 0x13c2, 0x4f7f, 0x99, 0x3c, 0x00, 0x3d, 0x62, 0x71, 0xa4, 0x59);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IUnknown.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VMR9VideoDesc* lpVideoDescription, uint32* lpdwNumDeinterlaceModes, Guid* lpDeinterlaceModes) GetNumberOfDeinterlaceModes;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, Guid* lpDeinterlaceMode, VMR9VideoDesc* lpVideoDescription, VMR9DeinterlaceCaps* lpDeinterlaceCaps) GetDeinterlaceModeCaps;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32 dwStreamID, Guid* lpDeinterlaceMode) GetDeinterlaceMode;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32 dwStreamID, Guid* lpDeinterlaceMode) SetDeinterlaceMode;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32* lpdwDeinterlacePrefs) GetDeinterlacePrefs;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32 dwDeinterlacePrefs) SetDeinterlacePrefs;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32 dwStreamID, Guid* lpDeinterlaceMode) GetActualDeinterlaceMode;
	}


	public HRESULT GetNumberOfDeinterlaceModes(VMR9VideoDesc* lpVideoDescription, uint32* lpdwNumDeinterlaceModes, Guid* lpDeinterlaceModes) mut => VT.[Friend]GetNumberOfDeinterlaceModes(&this, lpVideoDescription, lpdwNumDeinterlaceModes, lpDeinterlaceModes);

	public HRESULT GetDeinterlaceModeCaps(Guid* lpDeinterlaceMode, VMR9VideoDesc* lpVideoDescription, VMR9DeinterlaceCaps* lpDeinterlaceCaps) mut => VT.[Friend]GetDeinterlaceModeCaps(&this, lpDeinterlaceMode, lpVideoDescription, lpDeinterlaceCaps);

	public HRESULT GetDeinterlaceMode(uint32 dwStreamID, Guid* lpDeinterlaceMode) mut => VT.[Friend]GetDeinterlaceMode(&this, dwStreamID, lpDeinterlaceMode);

	public HRESULT SetDeinterlaceMode(uint32 dwStreamID, Guid* lpDeinterlaceMode) mut => VT.[Friend]SetDeinterlaceMode(&this, dwStreamID, lpDeinterlaceMode);

	public HRESULT GetDeinterlacePrefs(uint32* lpdwDeinterlacePrefs) mut => VT.[Friend]GetDeinterlacePrefs(&this, lpdwDeinterlacePrefs);

	public HRESULT SetDeinterlacePrefs(uint32 dwDeinterlacePrefs) mut => VT.[Friend]SetDeinterlacePrefs(&this, dwDeinterlacePrefs);

	public HRESULT GetActualDeinterlaceMode(uint32 dwStreamID, Guid* lpDeinterlaceMode) mut => VT.[Friend]GetActualDeinterlaceMode(&this, dwStreamID, lpDeinterlaceMode);
}

[CRepr]struct IVMRImageCompositor9 : IUnknown
{
	public new const Guid IID = .(0x4a5c89eb, 0xdf51, 0x4654, 0xac, 0x2a, 0xe4, 0x8e, 0x02, 0xbb, 0xab, 0xf6);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IUnknown.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IUnknown* pD3DDevice) InitCompositionDevice;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IUnknown* pD3DDevice) TermCompositionDevice;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32 dwStrmID, AM_MEDIA_TYPE* pmt, BOOL fTexture) SetStreamMediaType;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IUnknown* pD3DDevice, IDirect3DSurface9* pddsRenderTarget, AM_MEDIA_TYPE* pmtRenderTarget, int64 rtStart, int64 rtEnd, uint32 dwClrBkGnd, VMR9VideoStreamInfo* pVideoStreamInfo, uint32 cStreams) CompositeImage;
	}


	public HRESULT InitCompositionDevice(IUnknown* pD3DDevice) mut => VT.[Friend]InitCompositionDevice(&this, pD3DDevice);

	public HRESULT TermCompositionDevice(IUnknown* pD3DDevice) mut => VT.[Friend]TermCompositionDevice(&this, pD3DDevice);

	public HRESULT SetStreamMediaType(uint32 dwStrmID, AM_MEDIA_TYPE* pmt, BOOL fTexture) mut => VT.[Friend]SetStreamMediaType(&this, dwStrmID, pmt, fTexture);

	public HRESULT CompositeImage(IUnknown* pD3DDevice, IDirect3DSurface9* pddsRenderTarget, AM_MEDIA_TYPE* pmtRenderTarget, int64 rtStart, int64 rtEnd, uint32 dwClrBkGnd, VMR9VideoStreamInfo* pVideoStreamInfo, uint32 cStreams) mut => VT.[Friend]CompositeImage(&this, pD3DDevice, pddsRenderTarget, pmtRenderTarget, rtStart, rtEnd, dwClrBkGnd, pVideoStreamInfo, cStreams);
}

[CRepr]struct IVPBaseConfig : IUnknown
{
	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IUnknown.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32* pdwNumConnectInfo, DDVIDEOPORTCONNECT* pddVPConnectInfo) GetConnectInfo;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32 dwChosenEntry) SetConnectInfo;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, AMVPDATAINFO* pamvpDataInfo) GetVPDataInfo;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, AMVPSIZE* pamvpSize, uint32* pdwMaxPixelsPerSecond) GetMaxPixelRate;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32 dwNumFormats, DDPIXELFORMAT* pDDPixelFormats) InformVPInputFormats;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32* pdwNumFormats, DDPIXELFORMAT* pddPixelFormats) GetVideoFormats;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32 dwChosenEntry) SetVideoFormat;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self) SetInvertPolarity;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IDirectDrawSurface** ppddOverlaySurface) GetOverlaySurface;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint dwDDKernelHandle) SetDirectDrawKernelHandle;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32 dwVideoPortID) SetVideoPortID;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32 cHandles, uint* rgDDKernelHandles) SetDDSurfaceKernelHandles;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32 dwPitch, uint32 dwXOrigin, uint32 dwYOrigin) SetSurfaceParameters;
	}


	public HRESULT GetConnectInfo(uint32* pdwNumConnectInfo, DDVIDEOPORTCONNECT* pddVPConnectInfo) mut => VT.[Friend]GetConnectInfo(&this, pdwNumConnectInfo, pddVPConnectInfo);

	public HRESULT SetConnectInfo(uint32 dwChosenEntry) mut => VT.[Friend]SetConnectInfo(&this, dwChosenEntry);

	public HRESULT GetVPDataInfo(AMVPDATAINFO* pamvpDataInfo) mut => VT.[Friend]GetVPDataInfo(&this, pamvpDataInfo);

	public HRESULT GetMaxPixelRate(AMVPSIZE* pamvpSize, uint32* pdwMaxPixelsPerSecond) mut => VT.[Friend]GetMaxPixelRate(&this, pamvpSize, pdwMaxPixelsPerSecond);

	public HRESULT InformVPInputFormats(uint32 dwNumFormats, DDPIXELFORMAT* pDDPixelFormats) mut => VT.[Friend]InformVPInputFormats(&this, dwNumFormats, pDDPixelFormats);

	public HRESULT GetVideoFormats(uint32* pdwNumFormats, DDPIXELFORMAT* pddPixelFormats) mut => VT.[Friend]GetVideoFormats(&this, pdwNumFormats, pddPixelFormats);

	public HRESULT SetVideoFormat(uint32 dwChosenEntry) mut => VT.[Friend]SetVideoFormat(&this, dwChosenEntry);

	public HRESULT SetInvertPolarity() mut => VT.[Friend]SetInvertPolarity(&this);

	public HRESULT GetOverlaySurface(IDirectDrawSurface** ppddOverlaySurface) mut => VT.[Friend]GetOverlaySurface(&this, ppddOverlaySurface);

	public HRESULT SetDirectDrawKernelHandle(uint dwDDKernelHandle) mut => VT.[Friend]SetDirectDrawKernelHandle(&this, dwDDKernelHandle);

	public HRESULT SetVideoPortID(uint32 dwVideoPortID) mut => VT.[Friend]SetVideoPortID(&this, dwVideoPortID);

	public HRESULT SetDDSurfaceKernelHandles(uint32 cHandles, uint* rgDDKernelHandles) mut => VT.[Friend]SetDDSurfaceKernelHandles(&this, cHandles, rgDDKernelHandles);

	public HRESULT SetSurfaceParameters(uint32 dwPitch, uint32 dwXOrigin, uint32 dwYOrigin) mut => VT.[Friend]SetSurfaceParameters(&this, dwPitch, dwXOrigin, dwYOrigin);
}

[CRepr]struct IVPConfig : IVPBaseConfig
{
	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IVPBaseConfig.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* pbIsDecimationAllowed) IsVPDecimationAllowed;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, AMVPSIZE* pamvpSize) SetScalingFactors;
	}


	public HRESULT IsVPDecimationAllowed(int32* pbIsDecimationAllowed) mut => VT.[Friend]IsVPDecimationAllowed(&this, pbIsDecimationAllowed);

	public HRESULT SetScalingFactors(AMVPSIZE* pamvpSize) mut => VT.[Friend]SetScalingFactors(&this, pamvpSize);
}

[CRepr]struct IVPVBIConfig : IVPBaseConfig
{
	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IVPBaseConfig.VTable
	{
	}

}

[CRepr]struct IVPBaseNotify : IUnknown
{
	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IUnknown.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self) RenegotiateVPParameters;
	}


	public HRESULT RenegotiateVPParameters() mut => VT.[Friend]RenegotiateVPParameters(&this);
}

[CRepr]struct IVPNotify : IVPBaseNotify
{
	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IVPBaseNotify.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, AMVP_MODE mode) SetDeinterlaceMode;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, AMVP_MODE* pMode) GetDeinterlaceMode;
	}


	public HRESULT SetDeinterlaceMode(AMVP_MODE mode) mut => VT.[Friend]SetDeinterlaceMode(&this, mode);

	public HRESULT GetDeinterlaceMode(AMVP_MODE* pMode) mut => VT.[Friend]GetDeinterlaceMode(&this, pMode);
}

[CRepr]struct IVPNotify2 : IVPNotify
{
	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IVPNotify.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BOOL bVPSyncMaster) SetVPSyncMaster;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BOOL* pbVPSyncMaster) GetVPSyncMaster;
	}


	public HRESULT SetVPSyncMaster(BOOL bVPSyncMaster) mut => VT.[Friend]SetVPSyncMaster(&this, bVPSyncMaster);

	public HRESULT GetVPSyncMaster(BOOL* pbVPSyncMaster) mut => VT.[Friend]GetVPSyncMaster(&this, pbVPSyncMaster);
}

[CRepr]struct IVPVBINotify : IVPBaseNotify
{
	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IVPBaseNotify.VTable
	{
	}

}

[CRepr]struct IMediaParamInfo : IUnknown
{
	public new const Guid IID = .(0x6d6cbb60, 0xa223, 0x44aa, 0x84, 0x2f, 0xa2, 0xf0, 0x67, 0x50, 0xbe, 0x6d);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IUnknown.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32* pdwParams) GetParamCount;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32 dwParamIndex, MP_PARAMINFO* pInfo) GetParamInfo;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32 dwParamIndex, uint16** ppwchText) GetParamText;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32* pdwNumTimeFormats) GetNumTimeFormats;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32 dwFormatIndex, Guid* pguidTimeFormat) GetSupportedTimeFormat;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, Guid* pguidTimeFormat, uint32* pTimeData) GetCurrentTimeFormat;
	}


	public HRESULT GetParamCount(uint32* pdwParams) mut => VT.[Friend]GetParamCount(&this, pdwParams);

	public HRESULT GetParamInfo(uint32 dwParamIndex, MP_PARAMINFO* pInfo) mut => VT.[Friend]GetParamInfo(&this, dwParamIndex, pInfo);

	public HRESULT GetParamText(uint32 dwParamIndex, uint16** ppwchText) mut => VT.[Friend]GetParamText(&this, dwParamIndex, ppwchText);

	public HRESULT GetNumTimeFormats(uint32* pdwNumTimeFormats) mut => VT.[Friend]GetNumTimeFormats(&this, pdwNumTimeFormats);

	public HRESULT GetSupportedTimeFormat(uint32 dwFormatIndex, Guid* pguidTimeFormat) mut => VT.[Friend]GetSupportedTimeFormat(&this, dwFormatIndex, pguidTimeFormat);

	public HRESULT GetCurrentTimeFormat(Guid* pguidTimeFormat, uint32* pTimeData) mut => VT.[Friend]GetCurrentTimeFormat(&this, pguidTimeFormat, pTimeData);
}

[CRepr]struct IMediaParams : IUnknown
{
	public new const Guid IID = .(0x6d6cbb61, 0xa223, 0x44aa, 0x84, 0x2f, 0xa2, 0xf0, 0x67, 0x50, 0xbe, 0x6e);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IUnknown.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32 dwParamIndex, float* pValue) GetParam;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32 dwParamIndex, float value) SetParam;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32 dwParamIndex, uint32 cSegments, MP_ENVELOPE_SEGMENT* pEnvelopeSegments) AddEnvelope;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32 dwParamIndex, int64 refTimeStart, int64 refTimeEnd) FlushEnvelope;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, Guid guidTimeFormat, uint32 mpTimeData) SetTimeFormat;
	}


	public HRESULT GetParam(uint32 dwParamIndex, float* pValue) mut => VT.[Friend]GetParam(&this, dwParamIndex, pValue);

	public HRESULT SetParam(uint32 dwParamIndex, float value) mut => VT.[Friend]SetParam(&this, dwParamIndex, value);

	public HRESULT AddEnvelope(uint32 dwParamIndex, uint32 cSegments, MP_ENVELOPE_SEGMENT* pEnvelopeSegments) mut => VT.[Friend]AddEnvelope(&this, dwParamIndex, cSegments, pEnvelopeSegments);

	public HRESULT FlushEnvelope(uint32 dwParamIndex, int64 refTimeStart, int64 refTimeEnd) mut => VT.[Friend]FlushEnvelope(&this, dwParamIndex, refTimeStart, refTimeEnd);

	public HRESULT SetTimeFormat(Guid guidTimeFormat, uint32 mpTimeData) mut => VT.[Friend]SetTimeFormat(&this, guidTimeFormat, mpTimeData);
}

[CRepr]struct IAMPlayListItem : IUnknown
{
	public new const Guid IID = .(0x56a868ff, 0x0ad4, 0x11ce, 0xb0, 0x3a, 0x00, 0x20, 0xaf, 0x0b, 0xa7, 0x70);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IUnknown.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32* pdwFlags) COM_GetFlags;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32* pdwSources) GetSourceCount;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32 dwSourceIndex, BSTR* pbstrURL) GetSourceURL;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32 dwSourceIndex, int64* prtStart) GetSourceStart;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32 dwSourceIndex, int64* prtDuration) GetSourceDuration;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32 dwSourceIndex, uint32* pdwMarker) GetSourceStartMarker;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32 dwSourceIndex, uint32* pdwMarker) GetSourceEndMarker;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32 dwSourceIndex, BSTR* pbstrStartMarker) GetSourceStartMarkerName;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32 dwSourceIndex, BSTR* pbstrEndMarker) GetSourceEndMarkerName;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* pbstrURL) GetLinkURL;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32 dwSourceIndex, int64* prtScanDuration) GetScanDuration;
	}


	public HRESULT GetFlags(uint32* pdwFlags) mut => VT.[Friend]COM_GetFlags(&this, pdwFlags);

	public HRESULT GetSourceCount(uint32* pdwSources) mut => VT.[Friend]GetSourceCount(&this, pdwSources);

	public HRESULT GetSourceURL(uint32 dwSourceIndex, BSTR* pbstrURL) mut => VT.[Friend]GetSourceURL(&this, dwSourceIndex, pbstrURL);

	public HRESULT GetSourceStart(uint32 dwSourceIndex, int64* prtStart) mut => VT.[Friend]GetSourceStart(&this, dwSourceIndex, prtStart);

	public HRESULT GetSourceDuration(uint32 dwSourceIndex, int64* prtDuration) mut => VT.[Friend]GetSourceDuration(&this, dwSourceIndex, prtDuration);

	public HRESULT GetSourceStartMarker(uint32 dwSourceIndex, uint32* pdwMarker) mut => VT.[Friend]GetSourceStartMarker(&this, dwSourceIndex, pdwMarker);

	public HRESULT GetSourceEndMarker(uint32 dwSourceIndex, uint32* pdwMarker) mut => VT.[Friend]GetSourceEndMarker(&this, dwSourceIndex, pdwMarker);

	public HRESULT GetSourceStartMarkerName(uint32 dwSourceIndex, BSTR* pbstrStartMarker) mut => VT.[Friend]GetSourceStartMarkerName(&this, dwSourceIndex, pbstrStartMarker);

	public HRESULT GetSourceEndMarkerName(uint32 dwSourceIndex, BSTR* pbstrEndMarker) mut => VT.[Friend]GetSourceEndMarkerName(&this, dwSourceIndex, pbstrEndMarker);

	public HRESULT GetLinkURL(BSTR* pbstrURL) mut => VT.[Friend]GetLinkURL(&this, pbstrURL);

	public HRESULT GetScanDuration(uint32 dwSourceIndex, int64* prtScanDuration) mut => VT.[Friend]GetScanDuration(&this, dwSourceIndex, prtScanDuration);
}

[CRepr]struct IAMPlayList : IUnknown
{
	public new const Guid IID = .(0x56a868fe, 0x0ad4, 0x11ce, 0xb0, 0x3a, 0x00, 0x20, 0xaf, 0x0b, 0xa7, 0x70);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IUnknown.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32* pdwFlags) COM_GetFlags;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32* pdwItems) GetItemCount;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32 dwItemIndex, IAMPlayListItem** ppItem) GetItem;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, PWSTR pwszEventName, uint32 dwItemIndex, IAMPlayListItem** ppItem, uint32* pdwFlags) GetNamedEvent;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32* pdwRepeatCount, uint32* pdwRepeatStart, uint32* pdwRepeatEnd) GetRepeatInfo;
	}


	public HRESULT GetFlags(uint32* pdwFlags) mut => VT.[Friend]COM_GetFlags(&this, pdwFlags);

	public HRESULT GetItemCount(uint32* pdwItems) mut => VT.[Friend]GetItemCount(&this, pdwItems);

	public HRESULT GetItem(uint32 dwItemIndex, IAMPlayListItem** ppItem) mut => VT.[Friend]GetItem(&this, dwItemIndex, ppItem);

	public HRESULT GetNamedEvent(PWSTR pwszEventName, uint32 dwItemIndex, IAMPlayListItem** ppItem, uint32* pdwFlags) mut => VT.[Friend]GetNamedEvent(&this, pwszEventName, dwItemIndex, ppItem, pdwFlags);

	public HRESULT GetRepeatInfo(uint32* pdwRepeatCount, uint32* pdwRepeatStart, uint32* pdwRepeatEnd) mut => VT.[Friend]GetRepeatInfo(&this, pdwRepeatCount, pdwRepeatStart, pdwRepeatEnd);
}

[CRepr]struct ISpecifyParticularPages : IUnknown
{
	public new const Guid IID = .(0x4c437b91, 0x6e9e, 0x11d1, 0xa7, 0x04, 0x00, 0x60, 0x97, 0xc4, 0xe4, 0x76);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IUnknown.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, in Guid guidWhatPages, CAUUID* pPages) GetPages;
	}


	public HRESULT GetPages(in Guid guidWhatPages, CAUUID* pPages) mut => VT.[Friend]GetPages(&this, guidWhatPages, pPages);
}

[CRepr]struct IAMRebuild : IUnknown
{
	public new const Guid IID = .(0x02ef04dd, 0x7580, 0x11d1, 0xbe, 0xce, 0x00, 0xc0, 0x4f, 0xb6, 0xe9, 0x37);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IUnknown.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self) RebuildNow;
	}


	public HRESULT RebuildNow() mut => VT.[Friend]RebuildNow(&this);
}

[CRepr]struct IBufferingTime : IUnknown
{
	public new const Guid IID = .(0x1e00486a, 0x78dd, 0x11d2, 0x8d, 0xd3, 0x00, 0x60, 0x97, 0xc9, 0xa2, 0xb2);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IUnknown.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32* pdwMilliseconds) GetBufferingTime;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32 dwMilliseconds) SetBufferingTime;
	}


	public HRESULT GetBufferingTime(uint32* pdwMilliseconds) mut => VT.[Friend]GetBufferingTime(&this, pdwMilliseconds);

	public HRESULT SetBufferingTime(uint32 dwMilliseconds) mut => VT.[Friend]SetBufferingTime(&this, dwMilliseconds);
}

[CRepr]struct ICreatePropBagOnRegKey : IUnknown
{
	public new const Guid IID = .(0x8a674b48, 0x1f63, 0x11d3, 0xb6, 0x4c, 0x00, 0xc0, 0x4f, 0x79, 0x49, 0x8e);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IUnknown.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, HKEY hkey, PWSTR subkey, uint32 ulOptions, uint32 samDesired, in Guid iid, void** ppBag) Create;
	}


	public HRESULT Create(HKEY hkey, PWSTR subkey, uint32 ulOptions, uint32 samDesired, in Guid iid, void** ppBag) mut => VT.[Friend]Create(&this, hkey, subkey, ulOptions, samDesired, iid, ppBag);
}

[CRepr]struct ITuningSpaces : IDispatch
{
	public new const Guid IID = .(0x901284e4, 0x33fe, 0x4b69, 0x8d, 0x63, 0x63, 0x4a, 0x59, 0x6f, 0x37, 0x56);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* Count) get_Count;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IEnumVARIANT** NewEnum) get__NewEnum;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT varIndex, ITuningSpace** TuningSpace) get_Item;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IEnumTuningSpaces** NewEnum) get_EnumTuningSpaces;
	}


	public HRESULT get_Count(int32* Count) mut => VT.[Friend]get_Count(&this, Count);

	public HRESULT get__NewEnum(IEnumVARIANT** NewEnum) mut => VT.[Friend]get__NewEnum(&this, NewEnum);

	public HRESULT get_Item(VARIANT varIndex, ITuningSpace** TuningSpace) mut => VT.[Friend]get_Item(&this, varIndex, TuningSpace);

	public HRESULT get_EnumTuningSpaces(IEnumTuningSpaces** NewEnum) mut => VT.[Friend]get_EnumTuningSpaces(&this, NewEnum);
}

[CRepr]struct ITuningSpaceContainer : IDispatch
{
	public new const Guid IID = .(0x5b692e84, 0xe2f1, 0x11d2, 0x94, 0x93, 0x00, 0xc0, 0x4f, 0x72, 0xd9, 0x80);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* Count) get_Count;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IEnumVARIANT** NewEnum) get__NewEnum;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT varIndex, ITuningSpace** TuningSpace) get_Item;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT varIndex, ITuningSpace* TuningSpace) put_Item;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR SpaceCLSID, ITuningSpaces** NewColl) TuningSpacesForCLSID;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, in Guid SpaceCLSID, ITuningSpaces** NewColl) _TuningSpacesForCLSID2;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR Name, ITuningSpaces** NewColl) TuningSpacesForName;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, ITuningSpace* TuningSpace, int32* ID) FindID;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, ITuningSpace* TuningSpace, VARIANT* NewIndex) Add;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IEnumTuningSpaces** ppEnum) get_EnumTuningSpaces;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT Index) Remove;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* MaxCount) get_MaxCount;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 MaxCount) put_MaxCount;
	}


	public HRESULT get_Count(int32* Count) mut => VT.[Friend]get_Count(&this, Count);

	public HRESULT get__NewEnum(IEnumVARIANT** NewEnum) mut => VT.[Friend]get__NewEnum(&this, NewEnum);

	public HRESULT get_Item(VARIANT varIndex, ITuningSpace** TuningSpace) mut => VT.[Friend]get_Item(&this, varIndex, TuningSpace);

	public HRESULT put_Item(VARIANT varIndex, ITuningSpace* TuningSpace) mut => VT.[Friend]put_Item(&this, varIndex, TuningSpace);

	public HRESULT TuningSpacesForCLSID(BSTR SpaceCLSID, ITuningSpaces** NewColl) mut => VT.[Friend]TuningSpacesForCLSID(&this, SpaceCLSID, NewColl);

	public HRESULT _TuningSpacesForCLSID2(in Guid SpaceCLSID, ITuningSpaces** NewColl) mut => VT.[Friend]_TuningSpacesForCLSID2(&this, SpaceCLSID, NewColl);

	public HRESULT TuningSpacesForName(BSTR Name, ITuningSpaces** NewColl) mut => VT.[Friend]TuningSpacesForName(&this, Name, NewColl);

	public HRESULT FindID(ITuningSpace* TuningSpace, int32* ID) mut => VT.[Friend]FindID(&this, TuningSpace, ID);

	public HRESULT Add(ITuningSpace* TuningSpace, VARIANT* NewIndex) mut => VT.[Friend]Add(&this, TuningSpace, NewIndex);

	public HRESULT get_EnumTuningSpaces(IEnumTuningSpaces** ppEnum) mut => VT.[Friend]get_EnumTuningSpaces(&this, ppEnum);

	public HRESULT Remove(VARIANT Index) mut => VT.[Friend]Remove(&this, Index);

	public HRESULT get_MaxCount(int32* MaxCount) mut => VT.[Friend]get_MaxCount(&this, MaxCount);

	public HRESULT put_MaxCount(int32 MaxCount) mut => VT.[Friend]put_MaxCount(&this, MaxCount);
}

[CRepr]struct ITuningSpace : IDispatch
{
	public new const Guid IID = .(0x061c6e30, 0xe622, 0x11d2, 0x94, 0x93, 0x00, 0xc0, 0x4f, 0x72, 0xd9, 0x80);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* Name) get_UniqueName;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR Name) put_UniqueName;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* Name) get_FriendlyName;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR Name) put_FriendlyName;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* SpaceCLSID) get_CLSID;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* NetworkTypeGuid) get_NetworkType;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR NetworkTypeGuid) put_NetworkType;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, Guid* NetworkTypeGuid) get__NetworkType;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, in Guid NetworkTypeGuid) put__NetworkType;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, ITuneRequest** TuneRequest) CreateTuneRequest;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IEnumGUID** ppEnum) EnumCategoryGUIDs;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IEnumMoniker** ppEnum) EnumDeviceMonikers;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IComponentTypes** ComponentTypes) get_DefaultPreferredComponentTypes;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IComponentTypes* NewComponentTypes) put_DefaultPreferredComponentTypes;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* pMapping) get_FrequencyMapping;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR Mapping) put_FrequencyMapping;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, ILocator** LocatorVal) get_DefaultLocator;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, ILocator* LocatorVal) put_DefaultLocator;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, ITuningSpace** NewTS) Clone;
	}


	public HRESULT get_UniqueName(BSTR* Name) mut => VT.[Friend]get_UniqueName(&this, Name);

	public HRESULT put_UniqueName(BSTR Name) mut => VT.[Friend]put_UniqueName(&this, Name);

	public HRESULT get_FriendlyName(BSTR* Name) mut => VT.[Friend]get_FriendlyName(&this, Name);

	public HRESULT put_FriendlyName(BSTR Name) mut => VT.[Friend]put_FriendlyName(&this, Name);

	public HRESULT get_CLSID(BSTR* SpaceCLSID) mut => VT.[Friend]get_CLSID(&this, SpaceCLSID);

	public HRESULT get_NetworkType(BSTR* NetworkTypeGuid) mut => VT.[Friend]get_NetworkType(&this, NetworkTypeGuid);

	public HRESULT put_NetworkType(BSTR NetworkTypeGuid) mut => VT.[Friend]put_NetworkType(&this, NetworkTypeGuid);

	public HRESULT get__NetworkType(Guid* NetworkTypeGuid) mut => VT.[Friend]get__NetworkType(&this, NetworkTypeGuid);

	public HRESULT put__NetworkType(in Guid NetworkTypeGuid) mut => VT.[Friend]put__NetworkType(&this, NetworkTypeGuid);

	public HRESULT CreateTuneRequest(ITuneRequest** TuneRequest) mut => VT.[Friend]CreateTuneRequest(&this, TuneRequest);

	public HRESULT EnumCategoryGUIDs(IEnumGUID** ppEnum) mut => VT.[Friend]EnumCategoryGUIDs(&this, ppEnum);

	public HRESULT EnumDeviceMonikers(IEnumMoniker** ppEnum) mut => VT.[Friend]EnumDeviceMonikers(&this, ppEnum);

	public HRESULT get_DefaultPreferredComponentTypes(IComponentTypes** ComponentTypes) mut => VT.[Friend]get_DefaultPreferredComponentTypes(&this, ComponentTypes);

	public HRESULT put_DefaultPreferredComponentTypes(IComponentTypes* NewComponentTypes) mut => VT.[Friend]put_DefaultPreferredComponentTypes(&this, NewComponentTypes);

	public HRESULT get_FrequencyMapping(BSTR* pMapping) mut => VT.[Friend]get_FrequencyMapping(&this, pMapping);

	public HRESULT put_FrequencyMapping(BSTR Mapping) mut => VT.[Friend]put_FrequencyMapping(&this, Mapping);

	public HRESULT get_DefaultLocator(ILocator** LocatorVal) mut => VT.[Friend]get_DefaultLocator(&this, LocatorVal);

	public HRESULT put_DefaultLocator(ILocator* LocatorVal) mut => VT.[Friend]put_DefaultLocator(&this, LocatorVal);

	public HRESULT Clone(ITuningSpace** NewTS) mut => VT.[Friend]Clone(&this, NewTS);
}

[CRepr]struct IEnumTuningSpaces : IUnknown
{
	public new const Guid IID = .(0x8b8eb248, 0xfc2b, 0x11d2, 0x9d, 0x8c, 0x00, 0xc0, 0x4f, 0x72, 0xd9, 0x80);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IUnknown.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32 celt, ITuningSpace** rgelt, uint32* pceltFetched) Next;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32 celt) Skip;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self) Reset;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IEnumTuningSpaces** ppEnum) Clone;
	}


	public HRESULT Next(uint32 celt, ITuningSpace** rgelt, uint32* pceltFetched) mut => VT.[Friend]Next(&this, celt, rgelt, pceltFetched);

	public HRESULT Skip(uint32 celt) mut => VT.[Friend]Skip(&this, celt);

	public HRESULT Reset() mut => VT.[Friend]Reset(&this);

	public HRESULT Clone(IEnumTuningSpaces** ppEnum) mut => VT.[Friend]Clone(&this, ppEnum);
}

[CRepr]struct IDVBTuningSpace : ITuningSpace
{
	public new const Guid IID = .(0xada0b268, 0x3b19, 0x4e5b, 0xac, 0xc4, 0x49, 0xf8, 0x52, 0xbe, 0x13, 0xba);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : ITuningSpace.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, DVBSystemType* SysType) get_SystemType;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, DVBSystemType SysType) put_SystemType;
	}


	public HRESULT get_SystemType(DVBSystemType* SysType) mut => VT.[Friend]get_SystemType(&this, SysType);

	public HRESULT put_SystemType(DVBSystemType SysType) mut => VT.[Friend]put_SystemType(&this, SysType);
}

[CRepr]struct IDVBTuningSpace2 : IDVBTuningSpace
{
	public new const Guid IID = .(0x843188b4, 0xce62, 0x43db, 0x96, 0x6b, 0x81, 0x45, 0xa0, 0x94, 0xe0, 0x40);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDVBTuningSpace.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* NetworkID) get_NetworkID;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 NetworkID) put_NetworkID;
	}


	public HRESULT get_NetworkID(int32* NetworkID) mut => VT.[Friend]get_NetworkID(&this, NetworkID);

	public HRESULT put_NetworkID(int32 NetworkID) mut => VT.[Friend]put_NetworkID(&this, NetworkID);
}

[CRepr]struct IDVBSTuningSpace : IDVBTuningSpace2
{
	public new const Guid IID = .(0xcdf7be60, 0xd954, 0x42fd, 0xa9, 0x72, 0x78, 0x97, 0x19, 0x58, 0xe4, 0x70);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDVBTuningSpace2.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* LowOscillator) get_LowOscillator;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 LowOscillator) put_LowOscillator;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* HighOscillator) get_HighOscillator;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 HighOscillator) put_HighOscillator;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* LNBSwitch) get_LNBSwitch;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 LNBSwitch) put_LNBSwitch;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* InputRange) get_InputRange;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR InputRange) put_InputRange;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, SpectralInversion* SpectralInversionVal) get_SpectralInversion;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, SpectralInversion SpectralInversionVal) put_SpectralInversion;
	}


	public HRESULT get_LowOscillator(int32* LowOscillator) mut => VT.[Friend]get_LowOscillator(&this, LowOscillator);

	public HRESULT put_LowOscillator(int32 LowOscillator) mut => VT.[Friend]put_LowOscillator(&this, LowOscillator);

	public HRESULT get_HighOscillator(int32* HighOscillator) mut => VT.[Friend]get_HighOscillator(&this, HighOscillator);

	public HRESULT put_HighOscillator(int32 HighOscillator) mut => VT.[Friend]put_HighOscillator(&this, HighOscillator);

	public HRESULT get_LNBSwitch(int32* LNBSwitch) mut => VT.[Friend]get_LNBSwitch(&this, LNBSwitch);

	public HRESULT put_LNBSwitch(int32 LNBSwitch) mut => VT.[Friend]put_LNBSwitch(&this, LNBSwitch);

	public HRESULT get_InputRange(BSTR* InputRange) mut => VT.[Friend]get_InputRange(&this, InputRange);

	public HRESULT put_InputRange(BSTR InputRange) mut => VT.[Friend]put_InputRange(&this, InputRange);

	public HRESULT get_SpectralInversion(SpectralInversion* SpectralInversionVal) mut => VT.[Friend]get_SpectralInversion(&this, SpectralInversionVal);

	public HRESULT put_SpectralInversion(SpectralInversion SpectralInversionVal) mut => VT.[Friend]put_SpectralInversion(&this, SpectralInversionVal);
}

[CRepr]struct IAuxInTuningSpace : ITuningSpace
{
	public new const Guid IID = .(0xe48244b8, 0x7e17, 0x4f76, 0xa7, 0x63, 0x50, 0x90, 0xff, 0x1e, 0x2f, 0x30);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : ITuningSpace.VTable
	{
	}

}

[CRepr]struct IAuxInTuningSpace2 : IAuxInTuningSpace
{
	public new const Guid IID = .(0xb10931ed, 0x8bfe, 0x4ab0, 0x9d, 0xce, 0xe4, 0x69, 0xc2, 0x9a, 0x97, 0x29);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IAuxInTuningSpace.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* CountryCodeVal) get_CountryCode;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 NewCountryCodeVal) put_CountryCode;
	}


	public HRESULT get_CountryCode(int32* CountryCodeVal) mut => VT.[Friend]get_CountryCode(&this, CountryCodeVal);

	public HRESULT put_CountryCode(int32 NewCountryCodeVal) mut => VT.[Friend]put_CountryCode(&this, NewCountryCodeVal);
}

[CRepr]struct IAnalogTVTuningSpace : ITuningSpace
{
	public new const Guid IID = .(0x2a6e293c, 0x2595, 0x11d3, 0xb6, 0x4c, 0x00, 0xc0, 0x4f, 0x79, 0x49, 0x8e);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : ITuningSpace.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* MinChannelVal) get_MinChannel;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 NewMinChannelVal) put_MinChannel;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* MaxChannelVal) get_MaxChannel;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 NewMaxChannelVal) put_MaxChannel;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, TunerInputType* InputTypeVal) get_InputType;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, TunerInputType NewInputTypeVal) put_InputType;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* CountryCodeVal) get_CountryCode;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 NewCountryCodeVal) put_CountryCode;
	}


	public HRESULT get_MinChannel(int32* MinChannelVal) mut => VT.[Friend]get_MinChannel(&this, MinChannelVal);

	public HRESULT put_MinChannel(int32 NewMinChannelVal) mut => VT.[Friend]put_MinChannel(&this, NewMinChannelVal);

	public HRESULT get_MaxChannel(int32* MaxChannelVal) mut => VT.[Friend]get_MaxChannel(&this, MaxChannelVal);

	public HRESULT put_MaxChannel(int32 NewMaxChannelVal) mut => VT.[Friend]put_MaxChannel(&this, NewMaxChannelVal);

	public HRESULT get_InputType(TunerInputType* InputTypeVal) mut => VT.[Friend]get_InputType(&this, InputTypeVal);

	public HRESULT put_InputType(TunerInputType NewInputTypeVal) mut => VT.[Friend]put_InputType(&this, NewInputTypeVal);

	public HRESULT get_CountryCode(int32* CountryCodeVal) mut => VT.[Friend]get_CountryCode(&this, CountryCodeVal);

	public HRESULT put_CountryCode(int32 NewCountryCodeVal) mut => VT.[Friend]put_CountryCode(&this, NewCountryCodeVal);
}

[CRepr]struct IATSCTuningSpace : IAnalogTVTuningSpace
{
	public new const Guid IID = .(0x0369b4e2, 0x45b6, 0x11d3, 0xb6, 0x50, 0x00, 0xc0, 0x4f, 0x79, 0x49, 0x8e);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IAnalogTVTuningSpace.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* MinMinorChannelVal) get_MinMinorChannel;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 NewMinMinorChannelVal) put_MinMinorChannel;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* MaxMinorChannelVal) get_MaxMinorChannel;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 NewMaxMinorChannelVal) put_MaxMinorChannel;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* MinPhysicalChannelVal) get_MinPhysicalChannel;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 NewMinPhysicalChannelVal) put_MinPhysicalChannel;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* MaxPhysicalChannelVal) get_MaxPhysicalChannel;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 NewMaxPhysicalChannelVal) put_MaxPhysicalChannel;
	}


	public HRESULT get_MinMinorChannel(int32* MinMinorChannelVal) mut => VT.[Friend]get_MinMinorChannel(&this, MinMinorChannelVal);

	public HRESULT put_MinMinorChannel(int32 NewMinMinorChannelVal) mut => VT.[Friend]put_MinMinorChannel(&this, NewMinMinorChannelVal);

	public HRESULT get_MaxMinorChannel(int32* MaxMinorChannelVal) mut => VT.[Friend]get_MaxMinorChannel(&this, MaxMinorChannelVal);

	public HRESULT put_MaxMinorChannel(int32 NewMaxMinorChannelVal) mut => VT.[Friend]put_MaxMinorChannel(&this, NewMaxMinorChannelVal);

	public HRESULT get_MinPhysicalChannel(int32* MinPhysicalChannelVal) mut => VT.[Friend]get_MinPhysicalChannel(&this, MinPhysicalChannelVal);

	public HRESULT put_MinPhysicalChannel(int32 NewMinPhysicalChannelVal) mut => VT.[Friend]put_MinPhysicalChannel(&this, NewMinPhysicalChannelVal);

	public HRESULT get_MaxPhysicalChannel(int32* MaxPhysicalChannelVal) mut => VT.[Friend]get_MaxPhysicalChannel(&this, MaxPhysicalChannelVal);

	public HRESULT put_MaxPhysicalChannel(int32 NewMaxPhysicalChannelVal) mut => VT.[Friend]put_MaxPhysicalChannel(&this, NewMaxPhysicalChannelVal);
}

[CRepr]struct IDigitalCableTuningSpace : IATSCTuningSpace
{
	public new const Guid IID = .(0x013f9f9c, 0xb449, 0x4ec7, 0xa6, 0xd2, 0x9d, 0x4f, 0x2f, 0xc7, 0x0a, 0xe5);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IATSCTuningSpace.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* MinMajorChannelVal) get_MinMajorChannel;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 NewMinMajorChannelVal) put_MinMajorChannel;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* MaxMajorChannelVal) get_MaxMajorChannel;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 NewMaxMajorChannelVal) put_MaxMajorChannel;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* MinSourceIDVal) get_MinSourceID;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 NewMinSourceIDVal) put_MinSourceID;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* MaxSourceIDVal) get_MaxSourceID;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 NewMaxSourceIDVal) put_MaxSourceID;
	}


	public HRESULT get_MinMajorChannel(int32* MinMajorChannelVal) mut => VT.[Friend]get_MinMajorChannel(&this, MinMajorChannelVal);

	public HRESULT put_MinMajorChannel(int32 NewMinMajorChannelVal) mut => VT.[Friend]put_MinMajorChannel(&this, NewMinMajorChannelVal);

	public HRESULT get_MaxMajorChannel(int32* MaxMajorChannelVal) mut => VT.[Friend]get_MaxMajorChannel(&this, MaxMajorChannelVal);

	public HRESULT put_MaxMajorChannel(int32 NewMaxMajorChannelVal) mut => VT.[Friend]put_MaxMajorChannel(&this, NewMaxMajorChannelVal);

	public HRESULT get_MinSourceID(int32* MinSourceIDVal) mut => VT.[Friend]get_MinSourceID(&this, MinSourceIDVal);

	public HRESULT put_MinSourceID(int32 NewMinSourceIDVal) mut => VT.[Friend]put_MinSourceID(&this, NewMinSourceIDVal);

	public HRESULT get_MaxSourceID(int32* MaxSourceIDVal) mut => VT.[Friend]get_MaxSourceID(&this, MaxSourceIDVal);

	public HRESULT put_MaxSourceID(int32 NewMaxSourceIDVal) mut => VT.[Friend]put_MaxSourceID(&this, NewMaxSourceIDVal);
}

[CRepr]struct IAnalogRadioTuningSpace : ITuningSpace
{
	public new const Guid IID = .(0x2a6e293b, 0x2595, 0x11d3, 0xb6, 0x4c, 0x00, 0xc0, 0x4f, 0x79, 0x49, 0x8e);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : ITuningSpace.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* MinFrequencyVal) get_MinFrequency;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 NewMinFrequencyVal) put_MinFrequency;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* MaxFrequencyVal) get_MaxFrequency;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 NewMaxFrequencyVal) put_MaxFrequency;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* StepVal) get_Step;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 NewStepVal) put_Step;
	}


	public HRESULT get_MinFrequency(int32* MinFrequencyVal) mut => VT.[Friend]get_MinFrequency(&this, MinFrequencyVal);

	public HRESULT put_MinFrequency(int32 NewMinFrequencyVal) mut => VT.[Friend]put_MinFrequency(&this, NewMinFrequencyVal);

	public HRESULT get_MaxFrequency(int32* MaxFrequencyVal) mut => VT.[Friend]get_MaxFrequency(&this, MaxFrequencyVal);

	public HRESULT put_MaxFrequency(int32 NewMaxFrequencyVal) mut => VT.[Friend]put_MaxFrequency(&this, NewMaxFrequencyVal);

	public HRESULT get_Step(int32* StepVal) mut => VT.[Friend]get_Step(&this, StepVal);

	public HRESULT put_Step(int32 NewStepVal) mut => VT.[Friend]put_Step(&this, NewStepVal);
}

[CRepr]struct IAnalogRadioTuningSpace2 : IAnalogRadioTuningSpace
{
	public new const Guid IID = .(0x39dd45da, 0x2da8, 0x46ba, 0x8a, 0x8a, 0x87, 0xe2, 0xb7, 0x3d, 0x98, 0x3a);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IAnalogRadioTuningSpace.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* CountryCodeVal) get_CountryCode;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 NewCountryCodeVal) put_CountryCode;
	}


	public HRESULT get_CountryCode(int32* CountryCodeVal) mut => VT.[Friend]get_CountryCode(&this, CountryCodeVal);

	public HRESULT put_CountryCode(int32 NewCountryCodeVal) mut => VT.[Friend]put_CountryCode(&this, NewCountryCodeVal);
}

[CRepr]struct ITuneRequest : IDispatch
{
	public new const Guid IID = .(0x07ddc146, 0xfc3d, 0x11d2, 0x9d, 0x8c, 0x00, 0xc0, 0x4f, 0x72, 0xd9, 0x80);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, ITuningSpace** TuningSpace) get_TuningSpace;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IComponents** Components) get_Components;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, ITuneRequest** NewTuneRequest) Clone;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, ILocator** Locator) get_Locator;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, ILocator* Locator) put_Locator;
	}


	public HRESULT get_TuningSpace(ITuningSpace** TuningSpace) mut => VT.[Friend]get_TuningSpace(&this, TuningSpace);

	public HRESULT get_Components(IComponents** Components) mut => VT.[Friend]get_Components(&this, Components);

	public HRESULT Clone(ITuneRequest** NewTuneRequest) mut => VT.[Friend]Clone(&this, NewTuneRequest);

	public HRESULT get_Locator(ILocator** Locator) mut => VT.[Friend]get_Locator(&this, Locator);

	public HRESULT put_Locator(ILocator* Locator) mut => VT.[Friend]put_Locator(&this, Locator);
}

[CRepr]struct IChannelIDTuneRequest : ITuneRequest
{
	public new const Guid IID = .(0x156eff60, 0x86f4, 0x4e28, 0x89, 0xfc, 0x10, 0x97, 0x99, 0xfd, 0x57, 0xee);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : ITuneRequest.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* ChannelID) get_ChannelID;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR ChannelID) put_ChannelID;
	}


	public HRESULT get_ChannelID(BSTR* ChannelID) mut => VT.[Friend]get_ChannelID(&this, ChannelID);

	public HRESULT put_ChannelID(BSTR ChannelID) mut => VT.[Friend]put_ChannelID(&this, ChannelID);
}

[CRepr]struct IChannelTuneRequest : ITuneRequest
{
	public new const Guid IID = .(0x0369b4e0, 0x45b6, 0x11d3, 0xb6, 0x50, 0x00, 0xc0, 0x4f, 0x79, 0x49, 0x8e);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : ITuneRequest.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* Channel) get_Channel;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 Channel) put_Channel;
	}


	public HRESULT get_Channel(int32* Channel) mut => VT.[Friend]get_Channel(&this, Channel);

	public HRESULT put_Channel(int32 Channel) mut => VT.[Friend]put_Channel(&this, Channel);
}

[CRepr]struct IATSCChannelTuneRequest : IChannelTuneRequest
{
	public new const Guid IID = .(0x0369b4e1, 0x45b6, 0x11d3, 0xb6, 0x50, 0x00, 0xc0, 0x4f, 0x79, 0x49, 0x8e);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IChannelTuneRequest.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* MinorChannel) get_MinorChannel;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 MinorChannel) put_MinorChannel;
	}


	public HRESULT get_MinorChannel(int32* MinorChannel) mut => VT.[Friend]get_MinorChannel(&this, MinorChannel);

	public HRESULT put_MinorChannel(int32 MinorChannel) mut => VT.[Friend]put_MinorChannel(&this, MinorChannel);
}

[CRepr]struct IDigitalCableTuneRequest : IATSCChannelTuneRequest
{
	public new const Guid IID = .(0xbad7753b, 0x6b37, 0x4810, 0xae, 0x57, 0x3c, 0xe0, 0xc4, 0xa9, 0xe6, 0xcb);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IATSCChannelTuneRequest.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* pMajorChannel) get_MajorChannel;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 MajorChannel) put_MajorChannel;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* pSourceID) get_SourceID;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 SourceID) put_SourceID;
	}


	public HRESULT get_MajorChannel(int32* pMajorChannel) mut => VT.[Friend]get_MajorChannel(&this, pMajorChannel);

	public HRESULT put_MajorChannel(int32 MajorChannel) mut => VT.[Friend]put_MajorChannel(&this, MajorChannel);

	public HRESULT get_SourceID(int32* pSourceID) mut => VT.[Friend]get_SourceID(&this, pSourceID);

	public HRESULT put_SourceID(int32 SourceID) mut => VT.[Friend]put_SourceID(&this, SourceID);
}

[CRepr]struct IDVBTuneRequest : ITuneRequest
{
	public new const Guid IID = .(0x0d6f567e, 0xa636, 0x42bb, 0x83, 0xba, 0xce, 0x4c, 0x17, 0x04, 0xaf, 0xa2);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : ITuneRequest.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* ONID) get_ONID;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 ONID) put_ONID;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* TSID) get_TSID;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 TSID) put_TSID;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* SID) get_SID;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 SID) put_SID;
	}


	public HRESULT get_ONID(int32* ONID) mut => VT.[Friend]get_ONID(&this, ONID);

	public HRESULT put_ONID(int32 ONID) mut => VT.[Friend]put_ONID(&this, ONID);

	public HRESULT get_TSID(int32* TSID) mut => VT.[Friend]get_TSID(&this, TSID);

	public HRESULT put_TSID(int32 TSID) mut => VT.[Friend]put_TSID(&this, TSID);

	public HRESULT get_SID(int32* SID) mut => VT.[Friend]get_SID(&this, SID);

	public HRESULT put_SID(int32 SID) mut => VT.[Friend]put_SID(&this, SID);
}

[CRepr]struct IMPEG2TuneRequest : ITuneRequest
{
	public new const Guid IID = .(0xeb7d987f, 0x8a01, 0x42ad, 0xb8, 0xae, 0x57, 0x4d, 0xee, 0xe4, 0x4d, 0x1a);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : ITuneRequest.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* TSID) get_TSID;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 TSID) put_TSID;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* ProgNo) get_ProgNo;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 ProgNo) put_ProgNo;
	}


	public HRESULT get_TSID(int32* TSID) mut => VT.[Friend]get_TSID(&this, TSID);

	public HRESULT put_TSID(int32 TSID) mut => VT.[Friend]put_TSID(&this, TSID);

	public HRESULT get_ProgNo(int32* ProgNo) mut => VT.[Friend]get_ProgNo(&this, ProgNo);

	public HRESULT put_ProgNo(int32 ProgNo) mut => VT.[Friend]put_ProgNo(&this, ProgNo);
}

[CRepr]struct IMPEG2TuneRequestFactory : IDispatch
{
	public new const Guid IID = .(0x14e11abd, 0xee37, 0x4893, 0x9e, 0xa1, 0x69, 0x64, 0xde, 0x93, 0x3e, 0x39);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, ITuningSpace* TuningSpace, IMPEG2TuneRequest** TuneRequest) CreateTuneRequest;
	}


	public HRESULT CreateTuneRequest(ITuningSpace* TuningSpace, IMPEG2TuneRequest** TuneRequest) mut => VT.[Friend]CreateTuneRequest(&this, TuningSpace, TuneRequest);
}

[CRepr]struct IMPEG2TuneRequestSupport : IUnknown
{
	public new const Guid IID = .(0x1b9d5fc3, 0x5bbc, 0x4b6c, 0xbb, 0x18, 0xb9, 0xd1, 0x0e, 0x3e, 0xee, 0xbf);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IUnknown.VTable
	{
	}

}

[CRepr]struct ITunerCap : IUnknown
{
	public new const Guid IID = .(0xe60dfa45, 0x8d56, 0x4e65, 0xa8, 0xab, 0xd6, 0xbe, 0x94, 0x12, 0xc2, 0x49);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IUnknown.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32 ulcNetworkTypesMax, uint32* pulcNetworkTypes, Guid* pguidNetworkTypes) get_SupportedNetworkTypes;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32* pulAMTunerModeType, uint32* pulAnalogVideoStandard) get_SupportedVideoFormats;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32* pulCompositeCount, uint32* pulSvideoCount) get_AuxInputCount;
	}


	public HRESULT get_SupportedNetworkTypes(uint32 ulcNetworkTypesMax, uint32* pulcNetworkTypes, Guid* pguidNetworkTypes) mut => VT.[Friend]get_SupportedNetworkTypes(&this, ulcNetworkTypesMax, pulcNetworkTypes, pguidNetworkTypes);

	public HRESULT get_SupportedVideoFormats(uint32* pulAMTunerModeType, uint32* pulAnalogVideoStandard) mut => VT.[Friend]get_SupportedVideoFormats(&this, pulAMTunerModeType, pulAnalogVideoStandard);

	public HRESULT get_AuxInputCount(uint32* pulCompositeCount, uint32* pulSvideoCount) mut => VT.[Friend]get_AuxInputCount(&this, pulCompositeCount, pulSvideoCount);
}

[CRepr]struct ITunerCapEx : IUnknown
{
	public new const Guid IID = .(0xed3e0c66, 0x18c8, 0x4ea6, 0x93, 0x00, 0xf6, 0x84, 0x1f, 0xdd, 0x35, 0xdc);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IUnknown.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16* pbHasCaption) get_Has608_708Caption;
	}


	public HRESULT get_Has608_708Caption(int16* pbHasCaption) mut => VT.[Friend]get_Has608_708Caption(&this, pbHasCaption);
}

[CRepr]struct ITuner : IUnknown
{
	public new const Guid IID = .(0x28c52640, 0x018a, 0x11d3, 0x9d, 0x8e, 0x00, 0xc0, 0x4f, 0x72, 0xd9, 0x80);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IUnknown.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, ITuningSpace** TuningSpace) get_TuningSpace;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, ITuningSpace* TuningSpace) put_TuningSpace;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IEnumTuningSpaces** ppEnum) EnumTuningSpaces;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, ITuneRequest** TuneRequest) get_TuneRequest;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, ITuneRequest* TuneRequest) put_TuneRequest;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, ITuneRequest* TuneRequest) Validate;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IComponentTypes** ComponentTypes) get_PreferredComponentTypes;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IComponentTypes* ComponentTypes) put_PreferredComponentTypes;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* Strength) get_SignalStrength;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 Interval) TriggerSignalEvents;
	}


	public HRESULT get_TuningSpace(ITuningSpace** TuningSpace) mut => VT.[Friend]get_TuningSpace(&this, TuningSpace);

	public HRESULT put_TuningSpace(ITuningSpace* TuningSpace) mut => VT.[Friend]put_TuningSpace(&this, TuningSpace);

	public HRESULT EnumTuningSpaces(IEnumTuningSpaces** ppEnum) mut => VT.[Friend]EnumTuningSpaces(&this, ppEnum);

	public HRESULT get_TuneRequest(ITuneRequest** TuneRequest) mut => VT.[Friend]get_TuneRequest(&this, TuneRequest);

	public HRESULT put_TuneRequest(ITuneRequest* TuneRequest) mut => VT.[Friend]put_TuneRequest(&this, TuneRequest);

	public HRESULT Validate(ITuneRequest* TuneRequest) mut => VT.[Friend]Validate(&this, TuneRequest);

	public HRESULT get_PreferredComponentTypes(IComponentTypes** ComponentTypes) mut => VT.[Friend]get_PreferredComponentTypes(&this, ComponentTypes);

	public HRESULT put_PreferredComponentTypes(IComponentTypes* ComponentTypes) mut => VT.[Friend]put_PreferredComponentTypes(&this, ComponentTypes);

	public HRESULT get_SignalStrength(int32* Strength) mut => VT.[Friend]get_SignalStrength(&this, Strength);

	public HRESULT TriggerSignalEvents(int32 Interval) mut => VT.[Friend]TriggerSignalEvents(&this, Interval);
}

[CRepr]struct IScanningTuner : ITuner
{
	public new const Guid IID = .(0x1dfd0a5c, 0x0284, 0x11d3, 0x9d, 0x8e, 0x00, 0xc0, 0x4f, 0x72, 0xd9, 0x80);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : ITuner.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self) SeekUp;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self) SeekDown;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 MillisecondsPause) ScanUp;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 MillisecondsPause) ScanDown;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self) AutoProgram;
	}


	public HRESULT SeekUp() mut => VT.[Friend]SeekUp(&this);

	public HRESULT SeekDown() mut => VT.[Friend]SeekDown(&this);

	public HRESULT ScanUp(int32 MillisecondsPause) mut => VT.[Friend]ScanUp(&this, MillisecondsPause);

	public HRESULT ScanDown(int32 MillisecondsPause) mut => VT.[Friend]ScanDown(&this, MillisecondsPause);

	public HRESULT AutoProgram() mut => VT.[Friend]AutoProgram(&this);
}

[CRepr]struct IScanningTunerEx : IScanningTuner
{
	public new const Guid IID = .(0x04bbd195, 0x0e2d, 0x4593, 0x9b, 0xd5, 0x4f, 0x90, 0x8b, 0xc3, 0x3c, 0xf5);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IScanningTuner.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, ILocator** pILocator) GetCurrentLocator;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 dwLowerFreq, int32 dwHigherFreq, int16 bFineTune, uint hEvent) PerformExhaustiveScan;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* pcurrentFreq) TerminateCurrentScan;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint hEvent) ResumeCurrentScan;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* HardwareAssistedScanning, int32* NumStandardsSupported, Guid* BroadcastStandards) GetTunerScanningCapability;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* SecondsLeft, int32* CurrentLockType, int32* AutoDetect, int32* CurrentFreq) GetTunerStatus;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, Guid CurrentBroadcastStandard, int32* SettlingTime, int32* TvStandardsSupported) GetCurrentTunerStandardCapability;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 ScanModulationTypes, int32 AnalogVideoStandard) SetScanSignalTypeFilter;
	}


	public HRESULT GetCurrentLocator(ILocator** pILocator) mut => VT.[Friend]GetCurrentLocator(&this, pILocator);

	public HRESULT PerformExhaustiveScan(int32 dwLowerFreq, int32 dwHigherFreq, int16 bFineTune, uint hEvent) mut => VT.[Friend]PerformExhaustiveScan(&this, dwLowerFreq, dwHigherFreq, bFineTune, hEvent);

	public HRESULT TerminateCurrentScan(int32* pcurrentFreq) mut => VT.[Friend]TerminateCurrentScan(&this, pcurrentFreq);

	public HRESULT ResumeCurrentScan(uint hEvent) mut => VT.[Friend]ResumeCurrentScan(&this, hEvent);

	public HRESULT GetTunerScanningCapability(int32* HardwareAssistedScanning, int32* NumStandardsSupported, Guid* BroadcastStandards) mut => VT.[Friend]GetTunerScanningCapability(&this, HardwareAssistedScanning, NumStandardsSupported, BroadcastStandards);

	public HRESULT GetTunerStatus(int32* SecondsLeft, int32* CurrentLockType, int32* AutoDetect, int32* CurrentFreq) mut => VT.[Friend]GetTunerStatus(&this, SecondsLeft, CurrentLockType, AutoDetect, CurrentFreq);

	public HRESULT GetCurrentTunerStandardCapability(Guid CurrentBroadcastStandard, int32* SettlingTime, int32* TvStandardsSupported) mut => VT.[Friend]GetCurrentTunerStandardCapability(&this, CurrentBroadcastStandard, SettlingTime, TvStandardsSupported);

	public HRESULT SetScanSignalTypeFilter(int32 ScanModulationTypes, int32 AnalogVideoStandard) mut => VT.[Friend]SetScanSignalTypeFilter(&this, ScanModulationTypes, AnalogVideoStandard);
}

[CRepr]struct IComponentType : IDispatch
{
	public new const Guid IID = .(0x6a340dc0, 0x0311, 0x11d3, 0x9d, 0x8e, 0x00, 0xc0, 0x4f, 0x72, 0xd9, 0x80);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, ComponentCategory* Category) get_Category;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, ComponentCategory Category) put_Category;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* MediaMajorType) get_MediaMajorType;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR MediaMajorType) put_MediaMajorType;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, Guid* MediaMajorTypeGuid) get__MediaMajorType;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, in Guid MediaMajorTypeGuid) put__MediaMajorType;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* MediaSubType) get_MediaSubType;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR MediaSubType) put_MediaSubType;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, Guid* MediaSubTypeGuid) get__MediaSubType;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, in Guid MediaSubTypeGuid) put__MediaSubType;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* MediaFormatType) get_MediaFormatType;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR MediaFormatType) put_MediaFormatType;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, Guid* MediaFormatTypeGuid) get__MediaFormatType;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, in Guid MediaFormatTypeGuid) put__MediaFormatType;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, AM_MEDIA_TYPE* MediaType) get_MediaType;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, AM_MEDIA_TYPE* MediaType) put_MediaType;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IComponentType** NewCT) Clone;
	}


	public HRESULT get_Category(ComponentCategory* Category) mut => VT.[Friend]get_Category(&this, Category);

	public HRESULT put_Category(ComponentCategory Category) mut => VT.[Friend]put_Category(&this, Category);

	public HRESULT get_MediaMajorType(BSTR* MediaMajorType) mut => VT.[Friend]get_MediaMajorType(&this, MediaMajorType);

	public HRESULT put_MediaMajorType(BSTR MediaMajorType) mut => VT.[Friend]put_MediaMajorType(&this, MediaMajorType);

	public HRESULT get__MediaMajorType(Guid* MediaMajorTypeGuid) mut => VT.[Friend]get__MediaMajorType(&this, MediaMajorTypeGuid);

	public HRESULT put__MediaMajorType(in Guid MediaMajorTypeGuid) mut => VT.[Friend]put__MediaMajorType(&this, MediaMajorTypeGuid);

	public HRESULT get_MediaSubType(BSTR* MediaSubType) mut => VT.[Friend]get_MediaSubType(&this, MediaSubType);

	public HRESULT put_MediaSubType(BSTR MediaSubType) mut => VT.[Friend]put_MediaSubType(&this, MediaSubType);

	public HRESULT get__MediaSubType(Guid* MediaSubTypeGuid) mut => VT.[Friend]get__MediaSubType(&this, MediaSubTypeGuid);

	public HRESULT put__MediaSubType(in Guid MediaSubTypeGuid) mut => VT.[Friend]put__MediaSubType(&this, MediaSubTypeGuid);

	public HRESULT get_MediaFormatType(BSTR* MediaFormatType) mut => VT.[Friend]get_MediaFormatType(&this, MediaFormatType);

	public HRESULT put_MediaFormatType(BSTR MediaFormatType) mut => VT.[Friend]put_MediaFormatType(&this, MediaFormatType);

	public HRESULT get__MediaFormatType(Guid* MediaFormatTypeGuid) mut => VT.[Friend]get__MediaFormatType(&this, MediaFormatTypeGuid);

	public HRESULT put__MediaFormatType(in Guid MediaFormatTypeGuid) mut => VT.[Friend]put__MediaFormatType(&this, MediaFormatTypeGuid);

	public HRESULT get_MediaType(AM_MEDIA_TYPE* MediaType) mut => VT.[Friend]get_MediaType(&this, MediaType);

	public HRESULT put_MediaType(AM_MEDIA_TYPE* MediaType) mut => VT.[Friend]put_MediaType(&this, MediaType);

	public HRESULT Clone(IComponentType** NewCT) mut => VT.[Friend]Clone(&this, NewCT);
}

[CRepr]struct ILanguageComponentType : IComponentType
{
	public new const Guid IID = .(0xb874c8ba, 0x0fa2, 0x11d3, 0x9d, 0x8e, 0x00, 0xc0, 0x4f, 0x72, 0xd9, 0x80);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IComponentType.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* LangID) get_LangID;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 LangID) put_LangID;
	}


	public HRESULT get_LangID(int32* LangID) mut => VT.[Friend]get_LangID(&this, LangID);

	public HRESULT put_LangID(int32 LangID) mut => VT.[Friend]put_LangID(&this, LangID);
}

[CRepr]struct IMPEG2ComponentType : ILanguageComponentType
{
	public new const Guid IID = .(0x2c073d84, 0xb51c, 0x48c9, 0xaa, 0x9f, 0x68, 0x97, 0x1e, 0x1f, 0x6e, 0x38);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : ILanguageComponentType.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, MPEG2StreamType* MP2StreamType) get_StreamType;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, MPEG2StreamType MP2StreamType) put_StreamType;
	}


	public HRESULT get_StreamType(MPEG2StreamType* MP2StreamType) mut => VT.[Friend]get_StreamType(&this, MP2StreamType);

	public HRESULT put_StreamType(MPEG2StreamType MP2StreamType) mut => VT.[Friend]put_StreamType(&this, MP2StreamType);
}

[CRepr]struct IATSCComponentType : IMPEG2ComponentType
{
	public new const Guid IID = .(0xfc189e4d, 0x7bd4, 0x4125, 0xb3, 0xb3, 0x3a, 0x76, 0xa3, 0x32, 0xcc, 0x96);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IMPEG2ComponentType.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* Flags) get_Flags;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 flags) put_Flags;
	}


	public HRESULT get_Flags(int32* Flags) mut => VT.[Friend]get_Flags(&this, Flags);

	public HRESULT put_Flags(int32 flags) mut => VT.[Friend]put_Flags(&this, flags);
}

[CRepr]struct IEnumComponentTypes : IUnknown
{
	public new const Guid IID = .(0x8a674b4a, 0x1f63, 0x11d3, 0xb6, 0x4c, 0x00, 0xc0, 0x4f, 0x79, 0x49, 0x8e);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IUnknown.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32 celt, IComponentType** rgelt, uint32* pceltFetched) Next;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32 celt) Skip;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self) Reset;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IEnumComponentTypes** ppEnum) Clone;
	}


	public HRESULT Next(uint32 celt, IComponentType** rgelt, uint32* pceltFetched) mut => VT.[Friend]Next(&this, celt, rgelt, pceltFetched);

	public HRESULT Skip(uint32 celt) mut => VT.[Friend]Skip(&this, celt);

	public HRESULT Reset() mut => VT.[Friend]Reset(&this);

	public HRESULT Clone(IEnumComponentTypes** ppEnum) mut => VT.[Friend]Clone(&this, ppEnum);
}

[CRepr]struct IComponentTypes : IDispatch
{
	public new const Guid IID = .(0x0dc13d4a, 0x0313, 0x11d3, 0x9d, 0x8e, 0x00, 0xc0, 0x4f, 0x72, 0xd9, 0x80);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* Count) get_Count;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IEnumVARIANT** ppNewEnum) get__NewEnum;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IEnumComponentTypes** ppNewEnum) EnumComponentTypes;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT Index, IComponentType** ComponentType) get_Item;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT Index, IComponentType* ComponentType) put_Item;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IComponentType* ComponentType, VARIANT* NewIndex) Add;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT Index) Remove;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IComponentTypes** NewList) Clone;
	}


	public HRESULT get_Count(int32* Count) mut => VT.[Friend]get_Count(&this, Count);

	public HRESULT get__NewEnum(IEnumVARIANT** ppNewEnum) mut => VT.[Friend]get__NewEnum(&this, ppNewEnum);

	public HRESULT EnumComponentTypes(IEnumComponentTypes** ppNewEnum) mut => VT.[Friend]EnumComponentTypes(&this, ppNewEnum);

	public HRESULT get_Item(VARIANT Index, IComponentType** ComponentType) mut => VT.[Friend]get_Item(&this, Index, ComponentType);

	public HRESULT put_Item(VARIANT Index, IComponentType* ComponentType) mut => VT.[Friend]put_Item(&this, Index, ComponentType);

	public HRESULT Add(IComponentType* ComponentType, VARIANT* NewIndex) mut => VT.[Friend]Add(&this, ComponentType, NewIndex);

	public HRESULT Remove(VARIANT Index) mut => VT.[Friend]Remove(&this, Index);

	public HRESULT Clone(IComponentTypes** NewList) mut => VT.[Friend]Clone(&this, NewList);
}

[CRepr]struct IComponent : IDispatch
{
	public new const Guid IID = .(0x1a5576fc, 0x0e19, 0x11d3, 0x9d, 0x8e, 0x00, 0xc0, 0x4f, 0x72, 0xd9, 0x80);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IComponentType** CT) get_Type;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IComponentType* CT) put_Type;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* LangID) get_DescLangID;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 LangID) put_DescLangID;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, ComponentStatus* Status) get_Status;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, ComponentStatus Status) put_Status;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* Description) get_Description;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR Description) put_Description;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IComponent** NewComponent) Clone;
	}


	public HRESULT get_Type(IComponentType** CT) mut => VT.[Friend]get_Type(&this, CT);

	public HRESULT put_Type(IComponentType* CT) mut => VT.[Friend]put_Type(&this, CT);

	public HRESULT get_DescLangID(int32* LangID) mut => VT.[Friend]get_DescLangID(&this, LangID);

	public HRESULT put_DescLangID(int32 LangID) mut => VT.[Friend]put_DescLangID(&this, LangID);

	public HRESULT get_Status(ComponentStatus* Status) mut => VT.[Friend]get_Status(&this, Status);

	public HRESULT put_Status(ComponentStatus Status) mut => VT.[Friend]put_Status(&this, Status);

	public HRESULT get_Description(BSTR* Description) mut => VT.[Friend]get_Description(&this, Description);

	public HRESULT put_Description(BSTR Description) mut => VT.[Friend]put_Description(&this, Description);

	public HRESULT Clone(IComponent** NewComponent) mut => VT.[Friend]Clone(&this, NewComponent);
}

[CRepr]struct IAnalogAudioComponentType : IComponentType
{
	public new const Guid IID = .(0x2cfeb2a8, 0x1787, 0x4a24, 0xa9, 0x41, 0xc6, 0xea, 0xec, 0x39, 0xc8, 0x42);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IComponentType.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, TVAudioMode* Mode) get_AnalogAudioMode;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, TVAudioMode Mode) put_AnalogAudioMode;
	}


	public HRESULT get_AnalogAudioMode(TVAudioMode* Mode) mut => VT.[Friend]get_AnalogAudioMode(&this, Mode);

	public HRESULT put_AnalogAudioMode(TVAudioMode Mode) mut => VT.[Friend]put_AnalogAudioMode(&this, Mode);
}

[CRepr]struct IMPEG2Component : IComponent
{
	public new const Guid IID = .(0x1493e353, 0x1eb6, 0x473c, 0x80, 0x2d, 0x8e, 0x6b, 0x8e, 0xc9, 0xd2, 0xa9);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IComponent.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* PID) get_PID;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 PID) put_PID;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* PCRPID) get_PCRPID;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 PCRPID) put_PCRPID;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* ProgramNumber) get_ProgramNumber;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 ProgramNumber) put_ProgramNumber;
	}


	public HRESULT get_PID(int32* PID) mut => VT.[Friend]get_PID(&this, PID);

	public HRESULT put_PID(int32 PID) mut => VT.[Friend]put_PID(&this, PID);

	public HRESULT get_PCRPID(int32* PCRPID) mut => VT.[Friend]get_PCRPID(&this, PCRPID);

	public HRESULT put_PCRPID(int32 PCRPID) mut => VT.[Friend]put_PCRPID(&this, PCRPID);

	public HRESULT get_ProgramNumber(int32* ProgramNumber) mut => VT.[Friend]get_ProgramNumber(&this, ProgramNumber);

	public HRESULT put_ProgramNumber(int32 ProgramNumber) mut => VT.[Friend]put_ProgramNumber(&this, ProgramNumber);
}

[CRepr]struct IEnumComponents : IUnknown
{
	public new const Guid IID = .(0x2a6e2939, 0x2595, 0x11d3, 0xb6, 0x4c, 0x00, 0xc0, 0x4f, 0x79, 0x49, 0x8e);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IUnknown.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32 celt, IComponent** rgelt, uint32* pceltFetched) Next;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32 celt) Skip;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self) Reset;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IEnumComponents** ppEnum) Clone;
	}


	public HRESULT Next(uint32 celt, IComponent** rgelt, uint32* pceltFetched) mut => VT.[Friend]Next(&this, celt, rgelt, pceltFetched);

	public HRESULT Skip(uint32 celt) mut => VT.[Friend]Skip(&this, celt);

	public HRESULT Reset() mut => VT.[Friend]Reset(&this);

	public HRESULT Clone(IEnumComponents** ppEnum) mut => VT.[Friend]Clone(&this, ppEnum);
}

[CRepr]struct IComponents : IDispatch
{
	public new const Guid IID = .(0x39a48091, 0xfffe, 0x4182, 0xa1, 0x61, 0x3f, 0xf8, 0x02, 0x64, 0x0e, 0x26);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* Count) get_Count;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IEnumVARIANT** ppNewEnum) get__NewEnum;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IEnumComponents** ppNewEnum) EnumComponents;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT Index, IComponent** ppComponent) get_Item;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IComponent* Component, VARIANT* NewIndex) Add;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT Index) Remove;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IComponents** NewList) Clone;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT Index, IComponent* ppComponent) put_Item;
	}


	public HRESULT get_Count(int32* Count) mut => VT.[Friend]get_Count(&this, Count);

	public HRESULT get__NewEnum(IEnumVARIANT** ppNewEnum) mut => VT.[Friend]get__NewEnum(&this, ppNewEnum);

	public HRESULT EnumComponents(IEnumComponents** ppNewEnum) mut => VT.[Friend]EnumComponents(&this, ppNewEnum);

	public HRESULT get_Item(VARIANT Index, IComponent** ppComponent) mut => VT.[Friend]get_Item(&this, Index, ppComponent);

	public HRESULT Add(IComponent* Component, VARIANT* NewIndex) mut => VT.[Friend]Add(&this, Component, NewIndex);

	public HRESULT Remove(VARIANT Index) mut => VT.[Friend]Remove(&this, Index);

	public HRESULT Clone(IComponents** NewList) mut => VT.[Friend]Clone(&this, NewList);

	public HRESULT put_Item(VARIANT Index, IComponent* ppComponent) mut => VT.[Friend]put_Item(&this, Index, ppComponent);
}

[CRepr]struct IComponentsOld : IDispatch
{
	public new const Guid IID = .(0xfcd01846, 0x0e19, 0x11d3, 0x9d, 0x8e, 0x00, 0xc0, 0x4f, 0x72, 0xd9, 0x80);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* Count) get_Count;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IEnumVARIANT** ppNewEnum) get__NewEnum;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IEnumComponents** ppNewEnum) EnumComponents;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT Index, IComponent** ppComponent) get_Item;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IComponent* Component, VARIANT* NewIndex) Add;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT Index) Remove;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IComponents** NewList) Clone;
	}


	public HRESULT get_Count(int32* Count) mut => VT.[Friend]get_Count(&this, Count);

	public HRESULT get__NewEnum(IEnumVARIANT** ppNewEnum) mut => VT.[Friend]get__NewEnum(&this, ppNewEnum);

	public HRESULT EnumComponents(IEnumComponents** ppNewEnum) mut => VT.[Friend]EnumComponents(&this, ppNewEnum);

	public HRESULT get_Item(VARIANT Index, IComponent** ppComponent) mut => VT.[Friend]get_Item(&this, Index, ppComponent);

	public HRESULT Add(IComponent* Component, VARIANT* NewIndex) mut => VT.[Friend]Add(&this, Component, NewIndex);

	public HRESULT Remove(VARIANT Index) mut => VT.[Friend]Remove(&this, Index);

	public HRESULT Clone(IComponents** NewList) mut => VT.[Friend]Clone(&this, NewList);
}

[CRepr]struct ILocator : IDispatch
{
	public new const Guid IID = .(0x286d7f89, 0x760c, 0x4f89, 0x80, 0xc4, 0x66, 0x84, 0x1d, 0x25, 0x07, 0xaa);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* Frequency) get_CarrierFrequency;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 Frequency) put_CarrierFrequency;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, FECMethod* FEC) get_InnerFEC;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, FECMethod FEC) put_InnerFEC;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BinaryConvolutionCodeRate* FEC) get_InnerFECRate;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BinaryConvolutionCodeRate FEC) put_InnerFECRate;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, FECMethod* FEC) get_OuterFEC;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, FECMethod FEC) put_OuterFEC;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BinaryConvolutionCodeRate* FEC) get_OuterFECRate;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BinaryConvolutionCodeRate FEC) put_OuterFECRate;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, ModulationType* Modulation) get_Modulation;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, ModulationType Modulation) put_Modulation;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* Rate) get_SymbolRate;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 Rate) put_SymbolRate;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, ILocator** NewLocator) Clone;
	}


	public HRESULT get_CarrierFrequency(int32* Frequency) mut => VT.[Friend]get_CarrierFrequency(&this, Frequency);

	public HRESULT put_CarrierFrequency(int32 Frequency) mut => VT.[Friend]put_CarrierFrequency(&this, Frequency);

	public HRESULT get_InnerFEC(FECMethod* FEC) mut => VT.[Friend]get_InnerFEC(&this, FEC);

	public HRESULT put_InnerFEC(FECMethod FEC) mut => VT.[Friend]put_InnerFEC(&this, FEC);

	public HRESULT get_InnerFECRate(BinaryConvolutionCodeRate* FEC) mut => VT.[Friend]get_InnerFECRate(&this, FEC);

	public HRESULT put_InnerFECRate(BinaryConvolutionCodeRate FEC) mut => VT.[Friend]put_InnerFECRate(&this, FEC);

	public HRESULT get_OuterFEC(FECMethod* FEC) mut => VT.[Friend]get_OuterFEC(&this, FEC);

	public HRESULT put_OuterFEC(FECMethod FEC) mut => VT.[Friend]put_OuterFEC(&this, FEC);

	public HRESULT get_OuterFECRate(BinaryConvolutionCodeRate* FEC) mut => VT.[Friend]get_OuterFECRate(&this, FEC);

	public HRESULT put_OuterFECRate(BinaryConvolutionCodeRate FEC) mut => VT.[Friend]put_OuterFECRate(&this, FEC);

	public HRESULT get_Modulation(ModulationType* Modulation) mut => VT.[Friend]get_Modulation(&this, Modulation);

	public HRESULT put_Modulation(ModulationType Modulation) mut => VT.[Friend]put_Modulation(&this, Modulation);

	public HRESULT get_SymbolRate(int32* Rate) mut => VT.[Friend]get_SymbolRate(&this, Rate);

	public HRESULT put_SymbolRate(int32 Rate) mut => VT.[Friend]put_SymbolRate(&this, Rate);

	public HRESULT Clone(ILocator** NewLocator) mut => VT.[Friend]Clone(&this, NewLocator);
}

[CRepr]struct IAnalogLocator : ILocator
{
	public new const Guid IID = .(0x34d1f26b, 0xe339, 0x430d, 0xab, 0xce, 0x73, 0x8c, 0xb4, 0x89, 0x84, 0xdc);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : ILocator.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, AnalogVideoStandard* AVS) get_VideoStandard;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, AnalogVideoStandard AVS) put_VideoStandard;
	}


	public HRESULT get_VideoStandard(AnalogVideoStandard* AVS) mut => VT.[Friend]get_VideoStandard(&this, AVS);

	public HRESULT put_VideoStandard(AnalogVideoStandard AVS) mut => VT.[Friend]put_VideoStandard(&this, AVS);
}

[CRepr]struct IDigitalLocator : ILocator
{
	public new const Guid IID = .(0x19b595d8, 0x839a, 0x47f0, 0x96, 0xdf, 0x4f, 0x19, 0x4f, 0x3c, 0x76, 0x8c);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : ILocator.VTable
	{
	}

}

[CRepr]struct IATSCLocator : IDigitalLocator
{
	public new const Guid IID = .(0xbf8d986f, 0x8c2b, 0x4131, 0x94, 0xd7, 0x4d, 0x3d, 0x9f, 0xcc, 0x21, 0xef);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDigitalLocator.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* PhysicalChannel) get_PhysicalChannel;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 PhysicalChannel) put_PhysicalChannel;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* TSID) get_TSID;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 TSID) put_TSID;
	}


	public HRESULT get_PhysicalChannel(int32* PhysicalChannel) mut => VT.[Friend]get_PhysicalChannel(&this, PhysicalChannel);

	public HRESULT put_PhysicalChannel(int32 PhysicalChannel) mut => VT.[Friend]put_PhysicalChannel(&this, PhysicalChannel);

	public HRESULT get_TSID(int32* TSID) mut => VT.[Friend]get_TSID(&this, TSID);

	public HRESULT put_TSID(int32 TSID) mut => VT.[Friend]put_TSID(&this, TSID);
}

[CRepr]struct IATSCLocator2 : IATSCLocator
{
	public new const Guid IID = .(0x612aa885, 0x66cf, 0x4090, 0xba, 0x0a, 0x56, 0x6f, 0x53, 0x12, 0xe4, 0xca);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IATSCLocator.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* ProgramNumber) get_ProgramNumber;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 ProgramNumber) put_ProgramNumber;
	}


	public HRESULT get_ProgramNumber(int32* ProgramNumber) mut => VT.[Friend]get_ProgramNumber(&this, ProgramNumber);

	public HRESULT put_ProgramNumber(int32 ProgramNumber) mut => VT.[Friend]put_ProgramNumber(&this, ProgramNumber);
}

[CRepr]struct IDigitalCableLocator : IATSCLocator2
{
	public new const Guid IID = .(0x48f66a11, 0x171a, 0x419a, 0x95, 0x25, 0xbe, 0xee, 0xcd, 0x51, 0x58, 0x4c);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IATSCLocator2.VTable
	{
	}

}

[CRepr]struct IDVBTLocator : IDigitalLocator
{
	public new const Guid IID = .(0x8664da16, 0xdda2, 0x42ac, 0x92, 0x6a, 0xc1, 0x8f, 0x91, 0x27, 0xc3, 0x02);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDigitalLocator.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* BandWidthVal) get_Bandwidth;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 BandwidthVal) put_Bandwidth;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, FECMethod* FEC) get_LPInnerFEC;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, FECMethod FEC) put_LPInnerFEC;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BinaryConvolutionCodeRate* FEC) get_LPInnerFECRate;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BinaryConvolutionCodeRate FEC) put_LPInnerFECRate;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, HierarchyAlpha* Alpha) get_HAlpha;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, HierarchyAlpha Alpha) put_HAlpha;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, GuardInterval* GI) get_Guard;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, GuardInterval GI) put_Guard;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, TransmissionMode* mode) get_Mode;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, TransmissionMode mode) put_Mode;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16* OtherFrequencyInUseVal) get_OtherFrequencyInUse;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16 OtherFrequencyInUseVal) put_OtherFrequencyInUse;
	}


	public HRESULT get_Bandwidth(int32* BandWidthVal) mut => VT.[Friend]get_Bandwidth(&this, BandWidthVal);

	public HRESULT put_Bandwidth(int32 BandwidthVal) mut => VT.[Friend]put_Bandwidth(&this, BandwidthVal);

	public HRESULT get_LPInnerFEC(FECMethod* FEC) mut => VT.[Friend]get_LPInnerFEC(&this, FEC);

	public HRESULT put_LPInnerFEC(FECMethod FEC) mut => VT.[Friend]put_LPInnerFEC(&this, FEC);

	public HRESULT get_LPInnerFECRate(BinaryConvolutionCodeRate* FEC) mut => VT.[Friend]get_LPInnerFECRate(&this, FEC);

	public HRESULT put_LPInnerFECRate(BinaryConvolutionCodeRate FEC) mut => VT.[Friend]put_LPInnerFECRate(&this, FEC);

	public HRESULT get_HAlpha(HierarchyAlpha* Alpha) mut => VT.[Friend]get_HAlpha(&this, Alpha);

	public HRESULT put_HAlpha(HierarchyAlpha Alpha) mut => VT.[Friend]put_HAlpha(&this, Alpha);

	public HRESULT get_Guard(GuardInterval* GI) mut => VT.[Friend]get_Guard(&this, GI);

	public HRESULT put_Guard(GuardInterval GI) mut => VT.[Friend]put_Guard(&this, GI);

	public HRESULT get_Mode(TransmissionMode* mode) mut => VT.[Friend]get_Mode(&this, mode);

	public HRESULT put_Mode(TransmissionMode mode) mut => VT.[Friend]put_Mode(&this, mode);

	public HRESULT get_OtherFrequencyInUse(int16* OtherFrequencyInUseVal) mut => VT.[Friend]get_OtherFrequencyInUse(&this, OtherFrequencyInUseVal);

	public HRESULT put_OtherFrequencyInUse(int16 OtherFrequencyInUseVal) mut => VT.[Friend]put_OtherFrequencyInUse(&this, OtherFrequencyInUseVal);
}

[CRepr]struct IDVBTLocator2 : IDVBTLocator
{
	public new const Guid IID = .(0x448a2edf, 0xae95, 0x4b43, 0xa3, 0xcc, 0x74, 0x78, 0x43, 0xc4, 0x53, 0xd4);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDVBTLocator.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* PhysicalLayerPipeIdVal) get_PhysicalLayerPipeId;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 PhysicalLayerPipeIdVal) put_PhysicalLayerPipeId;
	}


	public HRESULT get_PhysicalLayerPipeId(int32* PhysicalLayerPipeIdVal) mut => VT.[Friend]get_PhysicalLayerPipeId(&this, PhysicalLayerPipeIdVal);

	public HRESULT put_PhysicalLayerPipeId(int32 PhysicalLayerPipeIdVal) mut => VT.[Friend]put_PhysicalLayerPipeId(&this, PhysicalLayerPipeIdVal);
}

[CRepr]struct IDVBSLocator : IDigitalLocator
{
	public new const Guid IID = .(0x3d7c353c, 0x0d04, 0x45f1, 0xa7, 0x42, 0xf9, 0x7c, 0xc1, 0x18, 0x8d, 0xc8);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDigitalLocator.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, Polarisation* PolarisationVal) get_SignalPolarisation;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, Polarisation PolarisationVal) put_SignalPolarisation;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16* WestLongitude) get_WestPosition;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16 WestLongitude) put_WestPosition;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* longitude) get_OrbitalPosition;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 longitude) put_OrbitalPosition;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* Azimuth) get_Azimuth;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 Azimuth) put_Azimuth;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* Elevation) get_Elevation;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 Elevation) put_Elevation;
	}


	public HRESULT get_SignalPolarisation(Polarisation* PolarisationVal) mut => VT.[Friend]get_SignalPolarisation(&this, PolarisationVal);

	public HRESULT put_SignalPolarisation(Polarisation PolarisationVal) mut => VT.[Friend]put_SignalPolarisation(&this, PolarisationVal);

	public HRESULT get_WestPosition(int16* WestLongitude) mut => VT.[Friend]get_WestPosition(&this, WestLongitude);

	public HRESULT put_WestPosition(int16 WestLongitude) mut => VT.[Friend]put_WestPosition(&this, WestLongitude);

	public HRESULT get_OrbitalPosition(int32* longitude) mut => VT.[Friend]get_OrbitalPosition(&this, longitude);

	public HRESULT put_OrbitalPosition(int32 longitude) mut => VT.[Friend]put_OrbitalPosition(&this, longitude);

	public HRESULT get_Azimuth(int32* Azimuth) mut => VT.[Friend]get_Azimuth(&this, Azimuth);

	public HRESULT put_Azimuth(int32 Azimuth) mut => VT.[Friend]put_Azimuth(&this, Azimuth);

	public HRESULT get_Elevation(int32* Elevation) mut => VT.[Friend]get_Elevation(&this, Elevation);

	public HRESULT put_Elevation(int32 Elevation) mut => VT.[Friend]put_Elevation(&this, Elevation);
}

[CRepr]struct IDVBSLocator2 : IDVBSLocator
{
	public new const Guid IID = .(0x6044634a, 0x1733, 0x4f99, 0xb9, 0x82, 0x5f, 0xb1, 0x2a, 0xfc, 0xe4, 0xf0);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDVBSLocator.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, LNB_Source* DiseqLNBSourceVal) get_DiseqLNBSource;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, LNB_Source DiseqLNBSourceVal) put_DiseqLNBSource;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* LocalOscillatorOverrideLowVal) get_LocalOscillatorOverrideLow;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 LocalOscillatorOverrideLowVal) put_LocalOscillatorOverrideLow;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* LocalOscillatorOverrideHighVal) get_LocalOscillatorOverrideHigh;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 LocalOscillatorOverrideHighVal) put_LocalOscillatorOverrideHigh;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* LocalLNBSwitchOverrideVal) get_LocalLNBSwitchOverride;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 LocalLNBSwitchOverrideVal) put_LocalLNBSwitchOverride;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, SpectralInversion* LocalSpectralInversionOverrideVal) get_LocalSpectralInversionOverride;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, SpectralInversion LocalSpectralInversionOverrideVal) put_LocalSpectralInversionOverride;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, RollOff* RollOffVal) get_SignalRollOff;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, RollOff RollOffVal) put_SignalRollOff;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, Pilot* PilotVal) get_SignalPilot;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, Pilot PilotVal) put_SignalPilot;
	}


	public HRESULT get_DiseqLNBSource(LNB_Source* DiseqLNBSourceVal) mut => VT.[Friend]get_DiseqLNBSource(&this, DiseqLNBSourceVal);

	public HRESULT put_DiseqLNBSource(LNB_Source DiseqLNBSourceVal) mut => VT.[Friend]put_DiseqLNBSource(&this, DiseqLNBSourceVal);

	public HRESULT get_LocalOscillatorOverrideLow(int32* LocalOscillatorOverrideLowVal) mut => VT.[Friend]get_LocalOscillatorOverrideLow(&this, LocalOscillatorOverrideLowVal);

	public HRESULT put_LocalOscillatorOverrideLow(int32 LocalOscillatorOverrideLowVal) mut => VT.[Friend]put_LocalOscillatorOverrideLow(&this, LocalOscillatorOverrideLowVal);

	public HRESULT get_LocalOscillatorOverrideHigh(int32* LocalOscillatorOverrideHighVal) mut => VT.[Friend]get_LocalOscillatorOverrideHigh(&this, LocalOscillatorOverrideHighVal);

	public HRESULT put_LocalOscillatorOverrideHigh(int32 LocalOscillatorOverrideHighVal) mut => VT.[Friend]put_LocalOscillatorOverrideHigh(&this, LocalOscillatorOverrideHighVal);

	public HRESULT get_LocalLNBSwitchOverride(int32* LocalLNBSwitchOverrideVal) mut => VT.[Friend]get_LocalLNBSwitchOverride(&this, LocalLNBSwitchOverrideVal);

	public HRESULT put_LocalLNBSwitchOverride(int32 LocalLNBSwitchOverrideVal) mut => VT.[Friend]put_LocalLNBSwitchOverride(&this, LocalLNBSwitchOverrideVal);

	public HRESULT get_LocalSpectralInversionOverride(SpectralInversion* LocalSpectralInversionOverrideVal) mut => VT.[Friend]get_LocalSpectralInversionOverride(&this, LocalSpectralInversionOverrideVal);

	public HRESULT put_LocalSpectralInversionOverride(SpectralInversion LocalSpectralInversionOverrideVal) mut => VT.[Friend]put_LocalSpectralInversionOverride(&this, LocalSpectralInversionOverrideVal);

	public HRESULT get_SignalRollOff(RollOff* RollOffVal) mut => VT.[Friend]get_SignalRollOff(&this, RollOffVal);

	public HRESULT put_SignalRollOff(RollOff RollOffVal) mut => VT.[Friend]put_SignalRollOff(&this, RollOffVal);

	public HRESULT get_SignalPilot(Pilot* PilotVal) mut => VT.[Friend]get_SignalPilot(&this, PilotVal);

	public HRESULT put_SignalPilot(Pilot PilotVal) mut => VT.[Friend]put_SignalPilot(&this, PilotVal);
}

[CRepr]struct IDVBCLocator : IDigitalLocator
{
	public new const Guid IID = .(0x6e42f36e, 0x1dd2, 0x43c4, 0x9f, 0x78, 0x69, 0xd2, 0x5a, 0xe3, 0x90, 0x34);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDigitalLocator.VTable
	{
	}

}

[CRepr]struct IISDBSLocator : IDVBSLocator
{
	public new const Guid IID = .(0xc9897087, 0xe29c, 0x473f, 0x9e, 0x4b, 0x70, 0x72, 0x12, 0x3d, 0xea, 0x14);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDVBSLocator.VTable
	{
	}

}

[CRepr]struct IESOpenMmiEvent : IESEvent
{
	public new const Guid IID = .(0xba4b6526, 0x1a35, 0x4635, 0x8b, 0x56, 0x3e, 0xc6, 0x12, 0x74, 0x6a, 0x8c);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IESEvent.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32* pDialogRequest, uint32* pDialogNumber) GetDialogNumber;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, Guid* guidDialogType) GetDialogType;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, SAFEARRAY** pbData) GetDialogData;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* pbstrBaseUrl, BSTR* pbstrData) GetDialogStringData;
	}


	public HRESULT GetDialogNumber(uint32* pDialogRequest, uint32* pDialogNumber) mut => VT.[Friend]GetDialogNumber(&this, pDialogRequest, pDialogNumber);

	public HRESULT GetDialogType(Guid* guidDialogType) mut => VT.[Friend]GetDialogType(&this, guidDialogType);

	public HRESULT GetDialogData(SAFEARRAY** pbData) mut => VT.[Friend]GetDialogData(&this, pbData);

	public HRESULT GetDialogStringData(BSTR* pbstrBaseUrl, BSTR* pbstrData) mut => VT.[Friend]GetDialogStringData(&this, pbstrBaseUrl, pbstrData);
}

[CRepr]struct IESCloseMmiEvent : IESEvent
{
	public new const Guid IID = .(0x6b80e96f, 0x55e2, 0x45aa, 0xb7, 0x54, 0x0c, 0x23, 0xc8, 0xe7, 0xd5, 0xc1);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IESEvent.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32* pDialogNumber) GetDialogNumber;
	}


	public HRESULT GetDialogNumber(uint32* pDialogNumber) mut => VT.[Friend]GetDialogNumber(&this, pDialogNumber);
}

[CRepr]struct IESValueUpdatedEvent : IESEvent
{
	public new const Guid IID = .(0x8a24c46e, 0xbb63, 0x4664, 0x86, 0x02, 0x5d, 0x9c, 0x71, 0x8c, 0x14, 0x6d);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IESEvent.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, SAFEARRAY** pbstrNames) GetValueNames;
	}


	public HRESULT GetValueNames(SAFEARRAY** pbstrNames) mut => VT.[Friend]GetValueNames(&this, pbstrNames);
}

[CRepr]struct IESRequestTunerEvent : IESEvent
{
	public new const Guid IID = .(0x54c7a5e8, 0xc3bb, 0x4f51, 0xaf, 0x14, 0xe0, 0xe2, 0xc0, 0xe3, 0x4c, 0x6d);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IESEvent.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint8* pbyPriority) GetPriority;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint8* pbyReason) GetReason;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint8* pbyConsequences) GetConsequences;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32* pdwEstimatedTime) GetEstimatedTime;
	}


	public HRESULT GetPriority(uint8* pbyPriority) mut => VT.[Friend]GetPriority(&this, pbyPriority);

	public HRESULT GetReason(uint8* pbyReason) mut => VT.[Friend]GetReason(&this, pbyReason);

	public HRESULT GetConsequences(uint8* pbyConsequences) mut => VT.[Friend]GetConsequences(&this, pbyConsequences);

	public HRESULT GetEstimatedTime(uint32* pdwEstimatedTime) mut => VT.[Friend]GetEstimatedTime(&this, pdwEstimatedTime);
}

[CRepr]struct IESIsdbCasResponseEvent : IESEvent
{
	public new const Guid IID = .(0x2017cb03, 0xdc0f, 0x4c24, 0x83, 0xca, 0x36, 0x30, 0x7b, 0x2c, 0xd1, 0x9f);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IESEvent.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32* pRequestId) GetRequestId;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32* pStatus) GetStatus;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32* pRequestLength) GetDataLength;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, SAFEARRAY** pbData) GetResponseData;
	}


	public HRESULT GetRequestId(uint32* pRequestId) mut => VT.[Friend]GetRequestId(&this, pRequestId);

	public HRESULT GetStatus(uint32* pStatus) mut => VT.[Friend]GetStatus(&this, pStatus);

	public HRESULT GetDataLength(uint32* pRequestLength) mut => VT.[Friend]GetDataLength(&this, pRequestLength);

	public HRESULT GetResponseData(SAFEARRAY** pbData) mut => VT.[Friend]GetResponseData(&this, pbData);
}

[CRepr]struct IGpnvsCommonBase : IUnknown
{
	public new const Guid IID = .(0x907e0b5c, 0xe42d, 0x4f04, 0x91, 0xf0, 0x26, 0xf4, 0x01, 0xf3, 0x69, 0x07);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IUnknown.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* pbstrName) GetValueUpdateName;
	}


	public HRESULT GetValueUpdateName(BSTR* pbstrName) mut => VT.[Friend]GetValueUpdateName(&this, pbstrName);
}

[CRepr]struct IESEventFactory : IUnknown
{
	public new const Guid IID = .(0x506a09b8, 0x7f86, 0x4e04, 0xac, 0x05, 0x33, 0x03, 0xbf, 0xe8, 0xfc, 0x49);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IUnknown.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IUnknown* pServiceProvider, uint32 dwEventId, Guid guidEventType, uint32 dwEventDataLength, uint8* pEventData, BSTR bstrBaseUrl, IUnknown* pInitContext, IESEvent** ppESEvent) CreateESEvent;
	}


	public HRESULT CreateESEvent(IUnknown* pServiceProvider, uint32 dwEventId, Guid guidEventType, uint32 dwEventDataLength, uint8* pEventData, BSTR bstrBaseUrl, IUnknown* pInitContext, IESEvent** ppESEvent) mut => VT.[Friend]CreateESEvent(&this, pServiceProvider, dwEventId, guidEventType, dwEventDataLength, pEventData, bstrBaseUrl, pInitContext, ppESEvent);
}

[CRepr]struct IESLicenseRenewalResultEvent : IESEvent
{
	public new const Guid IID = .(0xd5a48ef5, 0xa81b, 0x4df0, 0xac, 0xaa, 0x5e, 0x35, 0xe7, 0xea, 0x45, 0xd4);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IESEvent.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32* pdwCallersId) GetCallersId;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* pbstrFilename) GetFileName;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BOOL* pfRenewalSuccessful) IsRenewalSuccessful;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BOOL* pfCheckEntTokenCallNeeded) IsCheckEntitlementCallRequired;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32* pDescrambledStatus) GetDescrambledStatus;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32* pdwRenewalResultCode) GetRenewalResultCode;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32* pdwCASFailureCode) GetCASFailureCode;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, HRESULT* phr) GetRenewalHResult;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32* pdwLength) GetEntitlementTokenLength;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, SAFEARRAY** pbData) GetEntitlementToken;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint64* pqwExpiryDate) GetExpiryDate;
	}


	public HRESULT GetCallersId(uint32* pdwCallersId) mut => VT.[Friend]GetCallersId(&this, pdwCallersId);

	public HRESULT GetFileName(BSTR* pbstrFilename) mut => VT.[Friend]GetFileName(&this, pbstrFilename);

	public HRESULT IsRenewalSuccessful(BOOL* pfRenewalSuccessful) mut => VT.[Friend]IsRenewalSuccessful(&this, pfRenewalSuccessful);

	public HRESULT IsCheckEntitlementCallRequired(BOOL* pfCheckEntTokenCallNeeded) mut => VT.[Friend]IsCheckEntitlementCallRequired(&this, pfCheckEntTokenCallNeeded);

	public HRESULT GetDescrambledStatus(uint32* pDescrambledStatus) mut => VT.[Friend]GetDescrambledStatus(&this, pDescrambledStatus);

	public HRESULT GetRenewalResultCode(uint32* pdwRenewalResultCode) mut => VT.[Friend]GetRenewalResultCode(&this, pdwRenewalResultCode);

	public HRESULT GetCASFailureCode(uint32* pdwCASFailureCode) mut => VT.[Friend]GetCASFailureCode(&this, pdwCASFailureCode);

	public HRESULT GetRenewalHResult(HRESULT* phr) mut => VT.[Friend]GetRenewalHResult(&this, phr);

	public HRESULT GetEntitlementTokenLength(uint32* pdwLength) mut => VT.[Friend]GetEntitlementTokenLength(&this, pdwLength);

	public HRESULT GetEntitlementToken(SAFEARRAY** pbData) mut => VT.[Friend]GetEntitlementToken(&this, pbData);

	public HRESULT GetExpiryDate(uint64* pqwExpiryDate) mut => VT.[Friend]GetExpiryDate(&this, pqwExpiryDate);
}

[CRepr]struct IESFileExpiryDateEvent : IESEvent
{
	public new const Guid IID = .(0xba9edcb6, 0x4d36, 0x4cfe, 0x8c, 0x56, 0x87, 0xa6, 0xb0, 0xca, 0x48, 0xe1);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IESEvent.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, Guid* pguidTunerId) GetTunerId;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint64* pqwExpiryDate) GetExpiryDate;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint64* pqwExpiryDate) GetFinalExpiryDate;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32* dwMaxRenewalCount) GetMaxRenewalCount;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BOOL* pfEntTokenPresent) IsEntitlementTokenPresent;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BOOL* pfExpireAfterFirstUse) DoesExpireAfterFirstUse;
	}


	public HRESULT GetTunerId(Guid* pguidTunerId) mut => VT.[Friend]GetTunerId(&this, pguidTunerId);

	public HRESULT GetExpiryDate(uint64* pqwExpiryDate) mut => VT.[Friend]GetExpiryDate(&this, pqwExpiryDate);

	public HRESULT GetFinalExpiryDate(uint64* pqwExpiryDate) mut => VT.[Friend]GetFinalExpiryDate(&this, pqwExpiryDate);

	public HRESULT GetMaxRenewalCount(uint32* dwMaxRenewalCount) mut => VT.[Friend]GetMaxRenewalCount(&this, dwMaxRenewalCount);

	public HRESULT IsEntitlementTokenPresent(BOOL* pfEntTokenPresent) mut => VT.[Friend]IsEntitlementTokenPresent(&this, pfEntTokenPresent);

	public HRESULT DoesExpireAfterFirstUse(BOOL* pfExpireAfterFirstUse) mut => VT.[Friend]DoesExpireAfterFirstUse(&this, pfExpireAfterFirstUse);
}

[CRepr]struct IESEventService : IUnknown
{
	public new const Guid IID = .(0xed89a619, 0x4c06, 0x4b2f, 0x99, 0xeb, 0xc7, 0x66, 0x9b, 0x13, 0x04, 0x7c);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IUnknown.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IESEvent* pESEvent) FireESEvent;
	}


	public HRESULT FireESEvent(IESEvent* pESEvent) mut => VT.[Friend]FireESEvent(&this, pESEvent);
}

[CRepr]struct IESEventServiceConfiguration : IUnknown
{
	public new const Guid IID = .(0x33b9daae, 0x9309, 0x491d, 0xa0, 0x51, 0xbc, 0xad, 0x2a, 0x70, 0xcd, 0x66);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IUnknown.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IESEventService* pEventService) SetParent;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self) RemoveParent;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IESEvents* pESEvents) SetOwner;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self) RemoveOwner;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IFilterGraph* pGraph) SetGraph;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IFilterGraph* pGraph) RemoveGraph;
	}


	public HRESULT SetParent(IESEventService* pEventService) mut => VT.[Friend]SetParent(&this, pEventService);

	public HRESULT RemoveParent() mut => VT.[Friend]RemoveParent(&this);

	public HRESULT SetOwner(IESEvents* pESEvents) mut => VT.[Friend]SetOwner(&this, pESEvents);

	public HRESULT RemoveOwner() mut => VT.[Friend]RemoveOwner(&this);

	public HRESULT SetGraph(IFilterGraph* pGraph) mut => VT.[Friend]SetGraph(&this, pGraph);

	public HRESULT RemoveGraph(IFilterGraph* pGraph) mut => VT.[Friend]RemoveGraph(&this, pGraph);
}

[CRepr]struct IRegisterTuner : IUnknown
{
	public new const Guid IID = .(0x359b3901, 0x572c, 0x4854, 0xbb, 0x49, 0xcd, 0xef, 0x66, 0x60, 0x6a, 0x25);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IUnknown.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, ITuner* pTuner, IGraphBuilder* pGraph) Register;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self) Unregister;
	}


	public HRESULT Register(ITuner* pTuner, IGraphBuilder* pGraph) mut => VT.[Friend]Register(&this, pTuner, pGraph);

	public HRESULT Unregister() mut => VT.[Friend]Unregister(&this);
}

[CRepr]struct IBDAComparable : IUnknown
{
	public new const Guid IID = .(0xb34505e0, 0x2f0e, 0x497b, 0x80, 0xbc, 0xd4, 0x3f, 0x3b, 0x24, 0xed, 0x7f);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IUnknown.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IDispatch* CompareTo, int32* Result) CompareExact;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IDispatch* CompareTo, uint32 dwFlags, int32* Result) CompareEquivalent;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int64* Result) HashExact;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int64 PartialResult, int64* Result) HashExactIncremental;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32 dwFlags, int64* Result) HashEquivalent;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int64 PartialResult, uint32 dwFlags, int64* Result) HashEquivalentIncremental;
	}


	public HRESULT CompareExact(IDispatch* CompareTo, int32* Result) mut => VT.[Friend]CompareExact(&this, CompareTo, Result);

	public HRESULT CompareEquivalent(IDispatch* CompareTo, uint32 dwFlags, int32* Result) mut => VT.[Friend]CompareEquivalent(&this, CompareTo, dwFlags, Result);

	public HRESULT HashExact(int64* Result) mut => VT.[Friend]HashExact(&this, Result);

	public HRESULT HashExactIncremental(int64 PartialResult, int64* Result) mut => VT.[Friend]HashExactIncremental(&this, PartialResult, Result);

	public HRESULT HashEquivalent(uint32 dwFlags, int64* Result) mut => VT.[Friend]HashEquivalent(&this, dwFlags, Result);

	public HRESULT HashEquivalentIncremental(int64 PartialResult, uint32 dwFlags, int64* Result) mut => VT.[Friend]HashEquivalentIncremental(&this, PartialResult, dwFlags, Result);
}

[CRepr]struct IPersistTuneXml : IPersist
{
	public new const Guid IID = .(0x0754cd31, 0x8d15, 0x47a9, 0x82, 0x15, 0xd2, 0x00, 0x64, 0x15, 0x72, 0x44);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IPersist.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self) InitNew;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT varValue) Load;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* pvarFragment) Save;
	}


	public HRESULT InitNew() mut => VT.[Friend]InitNew(&this);

	public HRESULT Load(VARIANT varValue) mut => VT.[Friend]Load(&this, varValue);

	public HRESULT Save(VARIANT* pvarFragment) mut => VT.[Friend]Save(&this, pvarFragment);
}

[CRepr]struct IPersistTuneXmlUtility : IUnknown
{
	public new const Guid IID = .(0x990237ae, 0xac11, 0x4614, 0xbe, 0x8f, 0xdd, 0x21, 0x7a, 0x4c, 0xb4, 0xcb);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IUnknown.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT varValue, IUnknown** ppObject) Deserialize;
	}


	public HRESULT Deserialize(VARIANT varValue, IUnknown** ppObject) mut => VT.[Friend]Deserialize(&this, varValue, ppObject);
}

[CRepr]struct IPersistTuneXmlUtility2 : IPersistTuneXmlUtility
{
	public new const Guid IID = .(0x992e165f, 0xea24, 0x4b2f, 0x9a, 0x1d, 0x00, 0x9d, 0x92, 0x12, 0x04, 0x51);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IPersistTuneXmlUtility.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, ITuneRequest* piTuneRequest, BSTR* pString) Serialize;
	}


	public HRESULT Serialize(ITuneRequest* piTuneRequest, BSTR* pString) mut => VT.[Friend]Serialize(&this, piTuneRequest, pString);
}

[CRepr]struct IBDACreateTuneRequestEx : IUnknown
{
	public new const Guid IID = .(0xc0a4a1d4, 0x2b3c, 0x491a, 0xba, 0x22, 0x49, 0x9f, 0xba, 0xdd, 0x4d, 0x12);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IUnknown.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, in Guid TuneRequestIID, ITuneRequest** TuneRequest) CreateTuneRequestEx;
	}


	public HRESULT CreateTuneRequestEx(in Guid TuneRequestIID, ITuneRequest** TuneRequest) mut => VT.[Friend]CreateTuneRequestEx(&this, TuneRequestIID, TuneRequest);
}

[CRepr]struct IETFilterConfig : IUnknown
{
	public new const Guid IID = .(0xc4c4c4d1, 0x0049, 0x4e2b, 0x98, 0xfb, 0x95, 0x37, 0xf6, 0xce, 0x51, 0x6d);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IUnknown.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 LicenseId) InitLicense;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IUnknown** ppUnkDRMSecureChannel) GetSecureChannelObject;
	}


	public HRESULT InitLicense(int32 LicenseId) mut => VT.[Friend]InitLicense(&this, LicenseId);

	public HRESULT GetSecureChannelObject(IUnknown** ppUnkDRMSecureChannel) mut => VT.[Friend]GetSecureChannelObject(&this, ppUnkDRMSecureChannel);
}

[CRepr]struct IDTFilterConfig : IUnknown
{
	public new const Guid IID = .(0xc4c4c4d2, 0x0049, 0x4e2b, 0x98, 0xfb, 0x95, 0x37, 0xf6, 0xce, 0x51, 0x6d);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IUnknown.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IUnknown** ppUnkDRMSecureChannel) GetSecureChannelObject;
	}


	public HRESULT GetSecureChannelObject(IUnknown** ppUnkDRMSecureChannel) mut => VT.[Friend]GetSecureChannelObject(&this, ppUnkDRMSecureChannel);
}

[CRepr]struct IXDSCodecConfig : IUnknown
{
	public new const Guid IID = .(0xc4c4c4d3, 0x0049, 0x4e2b, 0x98, 0xfb, 0x95, 0x37, 0xf6, 0xce, 0x51, 0x6d);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IUnknown.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IUnknown** ppUnkDRMSecureChannel) GetSecureChannelObject;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32 dwPauseBufferTime) SetPauseBufferTime;
	}


	public HRESULT GetSecureChannelObject(IUnknown** ppUnkDRMSecureChannel) mut => VT.[Friend]GetSecureChannelObject(&this, ppUnkDRMSecureChannel);

	public HRESULT SetPauseBufferTime(uint32 dwPauseBufferTime) mut => VT.[Friend]SetPauseBufferTime(&this, dwPauseBufferTime);
}

[CRepr]struct IDTFilterLicenseRenewal : IUnknown
{
	public new const Guid IID = .(0x8a78b317, 0xe405, 0x4a43, 0x99, 0x4a, 0x62, 0x0d, 0x8f, 0x5c, 0xe2, 0x5e);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IUnknown.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, PWSTR* ppwszFileName, PWSTR* ppwszExpiredKid, PWSTR* ppwszTunerId) GetLicenseRenewalData;
	}


	public HRESULT GetLicenseRenewalData(PWSTR* ppwszFileName, PWSTR* ppwszExpiredKid, PWSTR* ppwszTunerId) mut => VT.[Friend]GetLicenseRenewalData(&this, ppwszFileName, ppwszExpiredKid, ppwszTunerId);
}

[CRepr]struct IPTFilterLicenseRenewal : IUnknown
{
	public new const Guid IID = .(0x26d836a5, 0x0c15, 0x44c7, 0xac, 0x59, 0xb0, 0xda, 0x87, 0x28, 0xf2, 0x40);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IUnknown.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, PWSTR wszFileName, PWSTR wszExpiredKid, uint32 dwCallersId, BOOL bHighPriority) RenewLicenses;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self) CancelLicenseRenewal;
	}


	public HRESULT RenewLicenses(PWSTR wszFileName, PWSTR wszExpiredKid, uint32 dwCallersId, BOOL bHighPriority) mut => VT.[Friend]RenewLicenses(&this, wszFileName, wszExpiredKid, dwCallersId, bHighPriority);

	public HRESULT CancelLicenseRenewal() mut => VT.[Friend]CancelLicenseRenewal(&this);
}

[CRepr]struct IMceBurnerControl : IUnknown
{
	public new const Guid IID = .(0x5a86b91a, 0xe71e, 0x46c1, 0x88, 0xa9, 0x9b, 0xb3, 0x38, 0x71, 0x05, 0x52);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IUnknown.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self) GetBurnerNoDecryption;
	}


	public HRESULT GetBurnerNoDecryption() mut => VT.[Friend]GetBurnerNoDecryption(&this);
}

[CRepr]struct IETFilter : IUnknown
{
	public new const Guid IID = .(0xc4c4c4b1, 0x0049, 0x4e2b, 0x98, 0xfb, 0x95, 0x37, 0xf6, 0xce, 0x51, 0x6d);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IUnknown.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, HRESULT* pHrCoCreateRetVal) get_EvalRatObjOK;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, EnTvRat_System* pEnSystem, EnTvRat_GenericLevel* pEnRating, int32* plbfEnAttr) GetCurrRating;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, ProtType* protType, int32* lpDateTime) GetCurrLicenseExpDate;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self) GetLastErrorCode;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BOOL fRecState) SetRecordingOn;
	}


	public HRESULT get_EvalRatObjOK(HRESULT* pHrCoCreateRetVal) mut => VT.[Friend]get_EvalRatObjOK(&this, pHrCoCreateRetVal);

	public HRESULT GetCurrRating(EnTvRat_System* pEnSystem, EnTvRat_GenericLevel* pEnRating, int32* plbfEnAttr) mut => VT.[Friend]GetCurrRating(&this, pEnSystem, pEnRating, plbfEnAttr);

	public HRESULT GetCurrLicenseExpDate(ProtType* protType, int32* lpDateTime) mut => VT.[Friend]GetCurrLicenseExpDate(&this, protType, lpDateTime);

	public HRESULT GetLastErrorCode() mut => VT.[Friend]GetLastErrorCode(&this);

	public HRESULT SetRecordingOn(BOOL fRecState) mut => VT.[Friend]SetRecordingOn(&this, fRecState);
}

[CRepr]struct IETFilterEvents : IDispatch
{
	public new const Guid IID = .(0xc4c4c4c1, 0x0049, 0x4e2b, 0x98, 0xfb, 0x95, 0x37, 0xf6, 0xce, 0x51, 0x6d);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
	}

}

[CRepr]struct IDTFilter : IUnknown
{
	public new const Guid IID = .(0xc4c4c4b2, 0x0049, 0x4e2b, 0x98, 0xfb, 0x95, 0x37, 0xf6, 0xce, 0x51, 0x6d);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IUnknown.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, HRESULT* pHrCoCreateRetVal) get_EvalRatObjOK;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, EnTvRat_System* pEnSystem, EnTvRat_GenericLevel* pEnRating, int32* plbfEnAttr) GetCurrRating;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, EnTvRat_System enSystem, EnTvRat_GenericLevel enLevel, int32* plbfEnAttr) get_BlockedRatingAttributes;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, EnTvRat_System enSystem, EnTvRat_GenericLevel enLevel, int32 lbfAttrs) put_BlockedRatingAttributes;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BOOL* pfBlockUnRatedShows) get_BlockUnRated;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BOOL fBlockUnRatedShows) put_BlockUnRated;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* pmsecsDelayBeforeBlock) get_BlockUnRatedDelay;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 msecsDelayBeforeBlock) put_BlockUnRatedDelay;
	}


	public HRESULT get_EvalRatObjOK(HRESULT* pHrCoCreateRetVal) mut => VT.[Friend]get_EvalRatObjOK(&this, pHrCoCreateRetVal);

	public HRESULT GetCurrRating(EnTvRat_System* pEnSystem, EnTvRat_GenericLevel* pEnRating, int32* plbfEnAttr) mut => VT.[Friend]GetCurrRating(&this, pEnSystem, pEnRating, plbfEnAttr);

	public HRESULT get_BlockedRatingAttributes(EnTvRat_System enSystem, EnTvRat_GenericLevel enLevel, int32* plbfEnAttr) mut => VT.[Friend]get_BlockedRatingAttributes(&this, enSystem, enLevel, plbfEnAttr);

	public HRESULT put_BlockedRatingAttributes(EnTvRat_System enSystem, EnTvRat_GenericLevel enLevel, int32 lbfAttrs) mut => VT.[Friend]put_BlockedRatingAttributes(&this, enSystem, enLevel, lbfAttrs);

	public HRESULT get_BlockUnRated(BOOL* pfBlockUnRatedShows) mut => VT.[Friend]get_BlockUnRated(&this, pfBlockUnRatedShows);

	public HRESULT put_BlockUnRated(BOOL fBlockUnRatedShows) mut => VT.[Friend]put_BlockUnRated(&this, fBlockUnRatedShows);

	public HRESULT get_BlockUnRatedDelay(int32* pmsecsDelayBeforeBlock) mut => VT.[Friend]get_BlockUnRatedDelay(&this, pmsecsDelayBeforeBlock);

	public HRESULT put_BlockUnRatedDelay(int32 msecsDelayBeforeBlock) mut => VT.[Friend]put_BlockUnRatedDelay(&this, msecsDelayBeforeBlock);
}

[CRepr]struct IDTFilter2 : IDTFilter
{
	public new const Guid IID = .(0xc4c4c4b4, 0x0049, 0x4e2b, 0x98, 0xfb, 0x95, 0x37, 0xf6, 0xce, 0x51, 0x6d);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDTFilter.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* pbstrChallengeUrl) get_ChallengeUrl;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, ProtType* protType, int32* lpDateTime) GetCurrLicenseExpDate;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self) GetLastErrorCode;
	}


	public HRESULT get_ChallengeUrl(BSTR* pbstrChallengeUrl) mut => VT.[Friend]get_ChallengeUrl(&this, pbstrChallengeUrl);

	public HRESULT GetCurrLicenseExpDate(ProtType* protType, int32* lpDateTime) mut => VT.[Friend]GetCurrLicenseExpDate(&this, protType, lpDateTime);

	public HRESULT GetLastErrorCode() mut => VT.[Friend]GetLastErrorCode(&this);
}

[CRepr]struct IDTFilter3 : IDTFilter2
{
	public new const Guid IID = .(0x513998cc, 0xe929, 0x4cdf, 0x9f, 0xbd, 0xba, 0xd1, 0xe0, 0x31, 0x48, 0x66);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDTFilter2.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, ProtType* pProtectionType) GetProtectionType;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BOOL* pfLicenseHasExpirationDate) LicenseHasExpirationDate;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR bstrRights) SetRights;
	}


	public HRESULT GetProtectionType(ProtType* pProtectionType) mut => VT.[Friend]GetProtectionType(&this, pProtectionType);

	public HRESULT LicenseHasExpirationDate(BOOL* pfLicenseHasExpirationDate) mut => VT.[Friend]LicenseHasExpirationDate(&this, pfLicenseHasExpirationDate);

	public HRESULT SetRights(BSTR bstrRights) mut => VT.[Friend]SetRights(&this, bstrRights);
}

[CRepr]struct IDTFilterEvents : IDispatch
{
	public new const Guid IID = .(0xc4c4c4c2, 0x0049, 0x4e2b, 0x98, 0xfb, 0x95, 0x37, 0xf6, 0xce, 0x51, 0x6d);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
	}

}

[CRepr]struct IXDSCodec : IUnknown
{
	public new const Guid IID = .(0xc4c4c4b3, 0x0049, 0x4e2b, 0x98, 0xfb, 0x95, 0x37, 0xf6, 0xce, 0x51, 0x6d);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IUnknown.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, HRESULT* pHrCoCreateRetVal) get_XDSToRatObjOK;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 SubstreamMask) put_CCSubstreamService;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* pSubstreamMask) get_CCSubstreamService;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* pRat, int32* pPktSeqID, int32* pCallSeqID, int64* pTimeStart, int64* pTimeEnd) GetContentAdvisoryRating;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* pXDSClassPkt, int32* pXDSTypePkt, BSTR* pBstrXDSPkt, int32* pPktSeqID, int32* pCallSeqID, int64* pTimeStart, int64* pTimeEnd) GetXDSPacket;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, ProtType* protType, int32* lpDateTime) GetCurrLicenseExpDate;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self) GetLastErrorCode;
	}


	public HRESULT get_XDSToRatObjOK(HRESULT* pHrCoCreateRetVal) mut => VT.[Friend]get_XDSToRatObjOK(&this, pHrCoCreateRetVal);

	public HRESULT put_CCSubstreamService(int32 SubstreamMask) mut => VT.[Friend]put_CCSubstreamService(&this, SubstreamMask);

	public HRESULT get_CCSubstreamService(int32* pSubstreamMask) mut => VT.[Friend]get_CCSubstreamService(&this, pSubstreamMask);

	public HRESULT GetContentAdvisoryRating(int32* pRat, int32* pPktSeqID, int32* pCallSeqID, int64* pTimeStart, int64* pTimeEnd) mut => VT.[Friend]GetContentAdvisoryRating(&this, pRat, pPktSeqID, pCallSeqID, pTimeStart, pTimeEnd);

	public HRESULT GetXDSPacket(int32* pXDSClassPkt, int32* pXDSTypePkt, BSTR* pBstrXDSPkt, int32* pPktSeqID, int32* pCallSeqID, int64* pTimeStart, int64* pTimeEnd) mut => VT.[Friend]GetXDSPacket(&this, pXDSClassPkt, pXDSTypePkt, pBstrXDSPkt, pPktSeqID, pCallSeqID, pTimeStart, pTimeEnd);

	public HRESULT GetCurrLicenseExpDate(ProtType* protType, int32* lpDateTime) mut => VT.[Friend]GetCurrLicenseExpDate(&this, protType, lpDateTime);

	public HRESULT GetLastErrorCode() mut => VT.[Friend]GetLastErrorCode(&this);
}

[CRepr]struct IXDSCodecEvents : IDispatch
{
	public new const Guid IID = .(0xc4c4c4c3, 0x0049, 0x4e2b, 0x98, 0xfb, 0x95, 0x37, 0xf6, 0xce, 0x51, 0x6d);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
	}

}

[CRepr]struct IXDSToRat : IDispatch
{
	public new const Guid IID = .(0xc5c5c5b0, 0x3abc, 0x11d6, 0xb2, 0x5b, 0x00, 0xc0, 0x4f, 0xa0, 0xc0, 0x26);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self) Init;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint8 byte1, uint8 byte2, EnTvRat_System* pEnSystem, EnTvRat_GenericLevel* pEnLevel, int32* plBfEnAttributes) ParseXDSBytePair;
	}


	public HRESULT Init() mut => VT.[Friend]Init(&this);

	public HRESULT ParseXDSBytePair(uint8 byte1, uint8 byte2, EnTvRat_System* pEnSystem, EnTvRat_GenericLevel* pEnLevel, int32* plBfEnAttributes) mut => VT.[Friend]ParseXDSBytePair(&this, byte1, byte2, pEnSystem, pEnLevel, plBfEnAttributes);
}

[CRepr]struct IEvalRat : IDispatch
{
	public new const Guid IID = .(0xc5c5c5b1, 0x3abc, 0x11d6, 0xb2, 0x5b, 0x00, 0xc0, 0x4f, 0xa0, 0xc0, 0x26);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, EnTvRat_System enSystem, EnTvRat_GenericLevel enLevel, int32* plbfAttrs) get_BlockedRatingAttributes;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, EnTvRat_System enSystem, EnTvRat_GenericLevel enLevel, int32 lbfAttrs) put_BlockedRatingAttributes;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BOOL* pfBlockUnRatedShows) get_BlockUnRated;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BOOL fBlockUnRatedShows) put_BlockUnRated;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, EnTvRat_System enSystem1, EnTvRat_GenericLevel enEnLevel1, int32 lbfEnAttr1, EnTvRat_System enSystem2, EnTvRat_GenericLevel enEnLevel2, int32 lbfEnAttr2, EnTvRat_System* penSystem, EnTvRat_GenericLevel* penEnLevel, int32* plbfEnAttr) MostRestrictiveRating;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, EnTvRat_System enShowSystem, EnTvRat_GenericLevel enShowLevel, int32 lbfEnShowAttributes) TestRating;
	}


	public HRESULT get_BlockedRatingAttributes(EnTvRat_System enSystem, EnTvRat_GenericLevel enLevel, int32* plbfAttrs) mut => VT.[Friend]get_BlockedRatingAttributes(&this, enSystem, enLevel, plbfAttrs);

	public HRESULT put_BlockedRatingAttributes(EnTvRat_System enSystem, EnTvRat_GenericLevel enLevel, int32 lbfAttrs) mut => VT.[Friend]put_BlockedRatingAttributes(&this, enSystem, enLevel, lbfAttrs);

	public HRESULT get_BlockUnRated(BOOL* pfBlockUnRatedShows) mut => VT.[Friend]get_BlockUnRated(&this, pfBlockUnRatedShows);

	public HRESULT put_BlockUnRated(BOOL fBlockUnRatedShows) mut => VT.[Friend]put_BlockUnRated(&this, fBlockUnRatedShows);

	public HRESULT MostRestrictiveRating(EnTvRat_System enSystem1, EnTvRat_GenericLevel enEnLevel1, int32 lbfEnAttr1, EnTvRat_System enSystem2, EnTvRat_GenericLevel enEnLevel2, int32 lbfEnAttr2, EnTvRat_System* penSystem, EnTvRat_GenericLevel* penEnLevel, int32* plbfEnAttr) mut => VT.[Friend]MostRestrictiveRating(&this, enSystem1, enEnLevel1, lbfEnAttr1, enSystem2, enEnLevel2, lbfEnAttr2, penSystem, penEnLevel, plbfEnAttr);

	public HRESULT TestRating(EnTvRat_System enShowSystem, EnTvRat_GenericLevel enShowLevel, int32 lbfEnShowAttributes) mut => VT.[Friend]TestRating(&this, enShowSystem, enShowLevel, lbfEnShowAttributes);
}

[CRepr]struct IMSVidRect : IDispatch
{
	public new const Guid IID = .(0x7f5000a6, 0xa440, 0x47ca, 0x8a, 0xcc, 0xc0, 0xe7, 0x55, 0x31, 0xa2, 0xc2);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* TopVal) get_Top;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 TopVal) put_Top;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* LeftVal) get_Left;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 LeftVal) put_Left;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* WidthVal) get_Width;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 WidthVal) put_Width;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* HeightVal) get_Height;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 HeightVal) put_Height;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, HWND* HWndVal) get_HWnd;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, HWND HWndVal) put_HWnd;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IMSVidRect* RectVal) put_Rect;
	}


	public HRESULT get_Top(int32* TopVal) mut => VT.[Friend]get_Top(&this, TopVal);

	public HRESULT put_Top(int32 TopVal) mut => VT.[Friend]put_Top(&this, TopVal);

	public HRESULT get_Left(int32* LeftVal) mut => VT.[Friend]get_Left(&this, LeftVal);

	public HRESULT put_Left(int32 LeftVal) mut => VT.[Friend]put_Left(&this, LeftVal);

	public HRESULT get_Width(int32* WidthVal) mut => VT.[Friend]get_Width(&this, WidthVal);

	public HRESULT put_Width(int32 WidthVal) mut => VT.[Friend]put_Width(&this, WidthVal);

	public HRESULT get_Height(int32* HeightVal) mut => VT.[Friend]get_Height(&this, HeightVal);

	public HRESULT put_Height(int32 HeightVal) mut => VT.[Friend]put_Height(&this, HeightVal);

	public HRESULT get_HWnd(HWND* HWndVal) mut => VT.[Friend]get_HWnd(&this, HWndVal);

	public HRESULT put_HWnd(HWND HWndVal) mut => VT.[Friend]put_HWnd(&this, HWndVal);

	public HRESULT put_Rect(IMSVidRect* RectVal) mut => VT.[Friend]put_Rect(&this, RectVal);
}

[CRepr]struct IMSVidGraphSegmentContainer : IUnknown
{
	public new const Guid IID = .(0x3dd2903d, 0xe0aa, 0x11d2, 0xb6, 0x3a, 0x00, 0xc0, 0x4f, 0x79, 0x49, 0x8e);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IUnknown.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IGraphBuilder** ppGraph) get_Graph;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IMSVidGraphSegment** ppInput) get_Input;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IEnumMSVidGraphSegment** ppOutputs) get_Outputs;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IMSVidGraphSegment** ppVR) get_VideoRenderer;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IMSVidGraphSegment** ppAR) get_AudioRenderer;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IEnumMSVidGraphSegment** ppFeatures) get_Features;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IEnumMSVidGraphSegment** ppComposites) get_Composites;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IUnknown** ppContainer) get_ParentContainer;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IMSVidGraphSegment* pSegment) Decompose;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self) IsWindowless;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self) GetFocus;
	}


	public HRESULT get_Graph(IGraphBuilder** ppGraph) mut => VT.[Friend]get_Graph(&this, ppGraph);

	public HRESULT get_Input(IMSVidGraphSegment** ppInput) mut => VT.[Friend]get_Input(&this, ppInput);

	public HRESULT get_Outputs(IEnumMSVidGraphSegment** ppOutputs) mut => VT.[Friend]get_Outputs(&this, ppOutputs);

	public HRESULT get_VideoRenderer(IMSVidGraphSegment** ppVR) mut => VT.[Friend]get_VideoRenderer(&this, ppVR);

	public HRESULT get_AudioRenderer(IMSVidGraphSegment** ppAR) mut => VT.[Friend]get_AudioRenderer(&this, ppAR);

	public HRESULT get_Features(IEnumMSVidGraphSegment** ppFeatures) mut => VT.[Friend]get_Features(&this, ppFeatures);

	public HRESULT get_Composites(IEnumMSVidGraphSegment** ppComposites) mut => VT.[Friend]get_Composites(&this, ppComposites);

	public HRESULT get_ParentContainer(IUnknown** ppContainer) mut => VT.[Friend]get_ParentContainer(&this, ppContainer);

	public HRESULT Decompose(IMSVidGraphSegment* pSegment) mut => VT.[Friend]Decompose(&this, pSegment);

	public HRESULT IsWindowless() mut => VT.[Friend]IsWindowless(&this);

	public HRESULT GetFocus() mut => VT.[Friend]GetFocus(&this);
}

[CRepr]struct IMSVidGraphSegment : IPersist
{
	public new const Guid IID = .(0x238dec54, 0xadeb, 0x4005, 0xa3, 0x49, 0xf7, 0x72, 0xb9, 0xaf, 0xeb, 0xc4);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IPersist.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IUnknown** pInit) get_Init;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IUnknown* pInit) put_Init;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IEnumFilters** pNewEnum) EnumFilters;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IMSVidGraphSegmentContainer** ppCtl) get_Container;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IMSVidGraphSegmentContainer* pCtl) put_Container;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, MSVidSegmentType* pType) get_Type;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, Guid* pGuid) get_Category;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self) Build;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self) PostBuild;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self) PreRun;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self) PostRun;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self) PreStop;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self) PostStop;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 lEventCode, int lEventParm1, int lEventParm2) OnEventNotify;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self) Decompose;
	}


	public HRESULT get_Init(IUnknown** pInit) mut => VT.[Friend]get_Init(&this, pInit);

	public HRESULT put_Init(IUnknown* pInit) mut => VT.[Friend]put_Init(&this, pInit);

	public HRESULT EnumFilters(IEnumFilters** pNewEnum) mut => VT.[Friend]EnumFilters(&this, pNewEnum);

	public HRESULT get_Container(IMSVidGraphSegmentContainer** ppCtl) mut => VT.[Friend]get_Container(&this, ppCtl);

	public HRESULT put_Container(IMSVidGraphSegmentContainer* pCtl) mut => VT.[Friend]put_Container(&this, pCtl);

	public HRESULT get_Type(MSVidSegmentType* pType) mut => VT.[Friend]get_Type(&this, pType);

	public HRESULT get_Category(Guid* pGuid) mut => VT.[Friend]get_Category(&this, pGuid);

	public HRESULT Build() mut => VT.[Friend]Build(&this);

	public HRESULT PostBuild() mut => VT.[Friend]PostBuild(&this);

	public HRESULT PreRun() mut => VT.[Friend]PreRun(&this);

	public HRESULT PostRun() mut => VT.[Friend]PostRun(&this);

	public HRESULT PreStop() mut => VT.[Friend]PreStop(&this);

	public HRESULT PostStop() mut => VT.[Friend]PostStop(&this);

	public HRESULT OnEventNotify(int32 lEventCode, int lEventParm1, int lEventParm2) mut => VT.[Friend]OnEventNotify(&this, lEventCode, lEventParm1, lEventParm2);

	public HRESULT Decompose() mut => VT.[Friend]Decompose(&this);
}

[CRepr]struct IMSVidGraphSegmentUserInput : IUnknown
{
	public new const Guid IID = .(0x301c060e, 0x20d9, 0x4587, 0x9b, 0x03, 0xf8, 0x2e, 0xd9, 0xa9, 0x94, 0x3c);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IUnknown.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self) Click;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self) DblClick;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16* KeyCode, int16 ShiftState) KeyDown;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16* KeyAscii) KeyPress;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16* KeyCode, int16 ShiftState) KeyUp;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16 ButtonState, int16 ShiftState, int32 x, int32 y) MouseDown;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16 ButtonState, int16 ShiftState, int32 x, int32 y) MouseMove;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16 ButtonState, int16 ShiftState, int32 x, int32 y) MouseUp;
	}


	public HRESULT Click() mut => VT.[Friend]Click(&this);

	public HRESULT DblClick() mut => VT.[Friend]DblClick(&this);

	public HRESULT KeyDown(int16* KeyCode, int16 ShiftState) mut => VT.[Friend]KeyDown(&this, KeyCode, ShiftState);

	public HRESULT KeyPress(int16* KeyAscii) mut => VT.[Friend]KeyPress(&this, KeyAscii);

	public HRESULT KeyUp(int16* KeyCode, int16 ShiftState) mut => VT.[Friend]KeyUp(&this, KeyCode, ShiftState);

	public HRESULT MouseDown(int16 ButtonState, int16 ShiftState, int32 x, int32 y) mut => VT.[Friend]MouseDown(&this, ButtonState, ShiftState, x, y);

	public HRESULT MouseMove(int16 ButtonState, int16 ShiftState, int32 x, int32 y) mut => VT.[Friend]MouseMove(&this, ButtonState, ShiftState, x, y);

	public HRESULT MouseUp(int16 ButtonState, int16 ShiftState, int32 x, int32 y) mut => VT.[Friend]MouseUp(&this, ButtonState, ShiftState, x, y);
}

[CRepr]struct IMSVidCompositionSegment : IMSVidGraphSegment
{
	public new const Guid IID = .(0x1c15d483, 0x911d, 0x11d2, 0xb6, 0x32, 0x00, 0xc0, 0x4f, 0x79, 0x49, 0x8e);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IMSVidGraphSegment.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IMSVidGraphSegment* upstream, IMSVidGraphSegment* downstream) Compose;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IMSVidGraphSegment** upstream) get_Up;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IMSVidGraphSegment** downstream) get_Down;
	}


	public HRESULT Compose(IMSVidGraphSegment* upstream, IMSVidGraphSegment* downstream) mut => VT.[Friend]Compose(&this, upstream, downstream);

	public HRESULT get_Up(IMSVidGraphSegment** upstream) mut => VT.[Friend]get_Up(&this, upstream);

	public HRESULT get_Down(IMSVidGraphSegment** downstream) mut => VT.[Friend]get_Down(&this, downstream);
}

[CRepr]struct IEnumMSVidGraphSegment : IUnknown
{
	public new const Guid IID = .(0x3dd2903e, 0xe0aa, 0x11d2, 0xb6, 0x3a, 0x00, 0xc0, 0x4f, 0x79, 0x49, 0x8e);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IUnknown.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32 celt, IMSVidGraphSegment** rgelt, uint32* pceltFetched) Next;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32 celt) Skip;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self) Reset;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IEnumMSVidGraphSegment** ppenum) Clone;
	}


	public HRESULT Next(uint32 celt, IMSVidGraphSegment** rgelt, uint32* pceltFetched) mut => VT.[Friend]Next(&this, celt, rgelt, pceltFetched);

	public HRESULT Skip(uint32 celt) mut => VT.[Friend]Skip(&this, celt);

	public HRESULT Reset() mut => VT.[Friend]Reset(&this);

	public HRESULT Clone(IEnumMSVidGraphSegment** ppenum) mut => VT.[Friend]Clone(&this, ppenum);
}

[CRepr]struct IMSVidVRGraphSegment : IMSVidGraphSegment
{
	public new const Guid IID = .(0xdd47de3f, 0x9874, 0x4f7b, 0x8b, 0x22, 0x7c, 0xb2, 0x68, 0x84, 0x61, 0xe7);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IMSVidGraphSegment.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 dwMode) put__VMRendererMode;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, HWND Window) put_Owner;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, HWND* Window) get_Owner;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16* UseOverlayVal) get_UseOverlay;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16 UseOverlayVal) put_UseOverlay;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16* Visible) get_Visible;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16 Visible) put_Visible;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32* ColorKey) get_ColorKey;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32 ColorKey) put_ColorKey;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, RECT* r) get_Source;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, RECT r) put_Source;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, RECT* r) get_Destination;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, RECT r) put_Destination;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, SIZE* sizeval, SIZE* aspectratio) get_NativeSize;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32* color) get_BorderColor;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32 color) put_BorderColor;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16* fMaintain) get_MaintainAspectRatio;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16 fMaintain) put_MaintainAspectRatio;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self) Refresh;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self) DisplayChange;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, HDC hdc) RePaint;
	}


	public HRESULT put__VMRendererMode(int32 dwMode) mut => VT.[Friend]put__VMRendererMode(&this, dwMode);

	public HRESULT put_Owner(HWND Window) mut => VT.[Friend]put_Owner(&this, Window);

	public HRESULT get_Owner(HWND* Window) mut => VT.[Friend]get_Owner(&this, Window);

	public HRESULT get_UseOverlay(int16* UseOverlayVal) mut => VT.[Friend]get_UseOverlay(&this, UseOverlayVal);

	public HRESULT put_UseOverlay(int16 UseOverlayVal) mut => VT.[Friend]put_UseOverlay(&this, UseOverlayVal);

	public HRESULT get_Visible(int16* Visible) mut => VT.[Friend]get_Visible(&this, Visible);

	public HRESULT put_Visible(int16 Visible) mut => VT.[Friend]put_Visible(&this, Visible);

	public HRESULT get_ColorKey(uint32* ColorKey) mut => VT.[Friend]get_ColorKey(&this, ColorKey);

	public HRESULT put_ColorKey(uint32 ColorKey) mut => VT.[Friend]put_ColorKey(&this, ColorKey);

	public HRESULT get_Source(RECT* r) mut => VT.[Friend]get_Source(&this, r);

	public HRESULT put_Source(RECT r) mut => VT.[Friend]put_Source(&this, r);

	public HRESULT get_Destination(RECT* r) mut => VT.[Friend]get_Destination(&this, r);

	public HRESULT put_Destination(RECT r) mut => VT.[Friend]put_Destination(&this, r);

	public HRESULT get_NativeSize(SIZE* sizeval, SIZE* aspectratio) mut => VT.[Friend]get_NativeSize(&this, sizeval, aspectratio);

	public HRESULT get_BorderColor(uint32* color) mut => VT.[Friend]get_BorderColor(&this, color);

	public HRESULT put_BorderColor(uint32 color) mut => VT.[Friend]put_BorderColor(&this, color);

	public HRESULT get_MaintainAspectRatio(int16* fMaintain) mut => VT.[Friend]get_MaintainAspectRatio(&this, fMaintain);

	public HRESULT put_MaintainAspectRatio(int16 fMaintain) mut => VT.[Friend]put_MaintainAspectRatio(&this, fMaintain);

	public HRESULT Refresh() mut => VT.[Friend]Refresh(&this);

	public HRESULT DisplayChange() mut => VT.[Friend]DisplayChange(&this);

	public HRESULT RePaint(HDC hdc) mut => VT.[Friend]RePaint(&this, hdc);
}

[CRepr]struct IMSVidDevice : IDispatch
{
	public new const Guid IID = .(0x1c15d47c, 0x911d, 0x11d2, 0xb6, 0x32, 0x00, 0xc0, 0x4f, 0x79, 0x49, 0x8e);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* Name) get_Name;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* Status) get_Status;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16 Power) put_Power;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16* Power) get_Power;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* Guid) get_Category;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* Clsid) get_ClassID;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, Guid* Guid) get__Category;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, Guid* Clsid) get__ClassID;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IMSVidDevice* Device, int16* IsEqual) IsEqualDevice;
	}


	public HRESULT get_Name(BSTR* Name) mut => VT.[Friend]get_Name(&this, Name);

	public HRESULT get_Status(int32* Status) mut => VT.[Friend]get_Status(&this, Status);

	public HRESULT put_Power(int16 Power) mut => VT.[Friend]put_Power(&this, Power);

	public HRESULT get_Power(int16* Power) mut => VT.[Friend]get_Power(&this, Power);

	public HRESULT get_Category(BSTR* Guid) mut => VT.[Friend]get_Category(&this, Guid);

	public HRESULT get_ClassID(BSTR* Clsid) mut => VT.[Friend]get_ClassID(&this, Clsid);

	public HRESULT get__Category(Guid* Guid) mut => VT.[Friend]get__Category(&this, Guid);

	public HRESULT get__ClassID(Guid* Clsid) mut => VT.[Friend]get__ClassID(&this, Clsid);

	public HRESULT IsEqualDevice(IMSVidDevice* Device, int16* IsEqual) mut => VT.[Friend]IsEqualDevice(&this, Device, IsEqual);
}

[CRepr]struct IMSVidDevice2 : IUnknown
{
	public new const Guid IID = .(0x87bd2783, 0xebc0, 0x478c, 0xb4, 0xa0, 0xe8, 0xe7, 0xf4, 0x3a, 0xb7, 0x8e);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IUnknown.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* DevPath) get_DevicePath;
	}


	public HRESULT get_DevicePath(BSTR* DevPath) mut => VT.[Friend]get_DevicePath(&this, DevPath);
}

[CRepr]struct IMSVidInputDevice : IMSVidDevice
{
	public new const Guid IID = .(0x37b0353d, 0xa4c8, 0x11d2, 0xb6, 0x34, 0x00, 0xc0, 0x4f, 0x79, 0x49, 0x8e);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IMSVidDevice.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* v, int16* pfViewable) IsViewable;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* v) View;
	}


	public HRESULT IsViewable(VARIANT* v, int16* pfViewable) mut => VT.[Friend]IsViewable(&this, v, pfViewable);

	public HRESULT View(VARIANT* v) mut => VT.[Friend]View(&this, v);
}

[CRepr]struct IMSVidDeviceEvent : IDispatch
{
	public new const Guid IID = .(0x1c15d480, 0x911d, 0x11d2, 0xb6, 0x32, 0x00, 0xc0, 0x4f, 0x79, 0x49, 0x8e);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IMSVidDevice* lpd, int32 oldState, int32 newState) StateChange;
	}


	public HRESULT StateChange(IMSVidDevice* lpd, int32 oldState, int32 newState) mut => VT.[Friend]StateChange(&this, lpd, oldState, newState);
}

[CRepr]struct IMSVidInputDeviceEvent : IDispatch
{
	public new const Guid IID = .(0x37b0353e, 0xa4c8, 0x11d2, 0xb6, 0x34, 0x00, 0xc0, 0x4f, 0x79, 0x49, 0x8e);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
	}

}

[CRepr]struct IMSVidVideoInputDevice : IMSVidInputDevice
{
	public new const Guid IID = .(0x1c15d47f, 0x911d, 0x11d2, 0xb6, 0x32, 0x00, 0xc0, 0x4f, 0x79, 0x49, 0x8e);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IMSVidInputDevice.VTable
	{
	}

}

[CRepr]struct IMSVidPlayback : IMSVidInputDevice
{
	public new const Guid IID = .(0x37b03538, 0xa4c8, 0x11d2, 0xb6, 0x34, 0x00, 0xc0, 0x4f, 0x79, 0x49, 0x8e);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IMSVidInputDevice.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16* pVal) get_EnableResetOnStop;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16 newVal) put_EnableResetOnStop;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self) Run;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self) Pause;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self) Stop;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16 fBackwards, int16* pfCan) get_CanStep;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 lStep) Step;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, double plRate) put_Rate;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, double* plRate) get_Rate;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 lPosition) put_CurrentPosition;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* lPosition) get_CurrentPosition;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, PositionModeList lPositionMode) put_PositionMode;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, PositionModeList* lPositionMode) get_PositionMode;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* lLength) get_Length;
	}


	public HRESULT get_EnableResetOnStop(int16* pVal) mut => VT.[Friend]get_EnableResetOnStop(&this, pVal);

	public HRESULT put_EnableResetOnStop(int16 newVal) mut => VT.[Friend]put_EnableResetOnStop(&this, newVal);

	public HRESULT Run() mut => VT.[Friend]Run(&this);

	public HRESULT Pause() mut => VT.[Friend]Pause(&this);

	public HRESULT Stop() mut => VT.[Friend]Stop(&this);

	public HRESULT get_CanStep(int16 fBackwards, int16* pfCan) mut => VT.[Friend]get_CanStep(&this, fBackwards, pfCan);

	public HRESULT Step(int32 lStep) mut => VT.[Friend]Step(&this, lStep);

	public HRESULT put_Rate(double plRate) mut => VT.[Friend]put_Rate(&this, plRate);

	public HRESULT get_Rate(double* plRate) mut => VT.[Friend]get_Rate(&this, plRate);

	public HRESULT put_CurrentPosition(int32 lPosition) mut => VT.[Friend]put_CurrentPosition(&this, lPosition);

	public HRESULT get_CurrentPosition(int32* lPosition) mut => VT.[Friend]get_CurrentPosition(&this, lPosition);

	public HRESULT put_PositionMode(PositionModeList lPositionMode) mut => VT.[Friend]put_PositionMode(&this, lPositionMode);

	public HRESULT get_PositionMode(PositionModeList* lPositionMode) mut => VT.[Friend]get_PositionMode(&this, lPositionMode);

	public HRESULT get_Length(int32* lLength) mut => VT.[Friend]get_Length(&this, lLength);
}

[CRepr]struct IMSVidPlaybackEvent : IMSVidInputDeviceEvent
{
	public new const Guid IID = .(0x37b0353b, 0xa4c8, 0x11d2, 0xb6, 0x34, 0x00, 0xc0, 0x4f, 0x79, 0x49, 0x8e);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IMSVidInputDeviceEvent.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IMSVidPlayback* lpd) EndOfMedia;
	}


	public HRESULT EndOfMedia(IMSVidPlayback* lpd) mut => VT.[Friend]EndOfMedia(&this, lpd);
}

[CRepr]struct IMSVidTuner : IMSVidVideoInputDevice
{
	public new const Guid IID = .(0x1c15d47d, 0x911d, 0x11d2, 0xb6, 0x32, 0x00, 0xc0, 0x4f, 0x79, 0x49, 0x8e);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IMSVidVideoInputDevice.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, ITuneRequest** ppTR) get_Tune;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, ITuneRequest* pTR) put_Tune;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, ITuningSpace** plTS) get_TuningSpace;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, ITuningSpace* plTS) put_TuningSpace;
	}


	public HRESULT get_Tune(ITuneRequest** ppTR) mut => VT.[Friend]get_Tune(&this, ppTR);

	public HRESULT put_Tune(ITuneRequest* pTR) mut => VT.[Friend]put_Tune(&this, pTR);

	public HRESULT get_TuningSpace(ITuningSpace** plTS) mut => VT.[Friend]get_TuningSpace(&this, plTS);

	public HRESULT put_TuningSpace(ITuningSpace* plTS) mut => VT.[Friend]put_TuningSpace(&this, plTS);
}

[CRepr]struct IMSVidTunerEvent : IMSVidInputDeviceEvent
{
	public new const Guid IID = .(0x1c15d485, 0x911d, 0x11d2, 0xb6, 0x32, 0x00, 0xc0, 0x4f, 0x79, 0x49, 0x8e);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IMSVidInputDeviceEvent.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IMSVidTuner* lpd) TuneChanged;
	}


	public HRESULT TuneChanged(IMSVidTuner* lpd) mut => VT.[Friend]TuneChanged(&this, lpd);
}

[CRepr]struct IMSVidAnalogTuner : IMSVidTuner
{
	public new const Guid IID = .(0x1c15d47e, 0x911d, 0x11d2, 0xb6, 0x32, 0x00, 0xc0, 0x4f, 0x79, 0x49, 0x8e);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IMSVidTuner.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* Channel) get_Channel;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 Channel) put_Channel;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* lcc) get_VideoFrequency;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* lcc) get_AudioFrequency;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* lcc) get_CountryCode;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 lcc) put_CountryCode;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16* pfSapOn) get_SAP;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16 fSapOn) put_SAP;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 nChannel, int32* SignalStrength, int16* fSignalPresent) ChannelAvailable;
	}


	public HRESULT get_Channel(int32* Channel) mut => VT.[Friend]get_Channel(&this, Channel);

	public HRESULT put_Channel(int32 Channel) mut => VT.[Friend]put_Channel(&this, Channel);

	public HRESULT get_VideoFrequency(int32* lcc) mut => VT.[Friend]get_VideoFrequency(&this, lcc);

	public HRESULT get_AudioFrequency(int32* lcc) mut => VT.[Friend]get_AudioFrequency(&this, lcc);

	public HRESULT get_CountryCode(int32* lcc) mut => VT.[Friend]get_CountryCode(&this, lcc);

	public HRESULT put_CountryCode(int32 lcc) mut => VT.[Friend]put_CountryCode(&this, lcc);

	public HRESULT get_SAP(int16* pfSapOn) mut => VT.[Friend]get_SAP(&this, pfSapOn);

	public HRESULT put_SAP(int16 fSapOn) mut => VT.[Friend]put_SAP(&this, fSapOn);

	public HRESULT ChannelAvailable(int32 nChannel, int32* SignalStrength, int16* fSignalPresent) mut => VT.[Friend]ChannelAvailable(&this, nChannel, SignalStrength, fSignalPresent);
}

[CRepr]struct IMSVidAnalogTuner2 : IMSVidAnalogTuner
{
	public new const Guid IID = .(0x37647bf7, 0x3dde, 0x4cc8, 0xa4, 0xdc, 0x0d, 0x53, 0x4d, 0x3d, 0x00, 0x37);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IMSVidAnalogTuner.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* Formats) get_TVFormats;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* Modes) get_TunerModes;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* Inputs) get_NumAuxInputs;
	}


	public HRESULT get_TVFormats(int32* Formats) mut => VT.[Friend]get_TVFormats(&this, Formats);

	public HRESULT get_TunerModes(int32* Modes) mut => VT.[Friend]get_TunerModes(&this, Modes);

	public HRESULT get_NumAuxInputs(int32* Inputs) mut => VT.[Friend]get_NumAuxInputs(&this, Inputs);
}

[CRepr]struct IMSVidAnalogTunerEvent : IMSVidTunerEvent
{
	public new const Guid IID = .(0x1c15d486, 0x911d, 0x11d2, 0xb6, 0x32, 0x00, 0xc0, 0x4f, 0x79, 0x49, 0x8e);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IMSVidTunerEvent.VTable
	{
	}

}

[CRepr]struct IMSVidFilePlayback : IMSVidPlayback
{
	public new const Guid IID = .(0x37b03539, 0xa4c8, 0x11d2, 0xb6, 0x34, 0x00, 0xc0, 0x4f, 0x79, 0x49, 0x8e);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IMSVidPlayback.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* FileName) get_FileName;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR FileName) put_FileName;
	}


	public HRESULT get_FileName(BSTR* FileName) mut => VT.[Friend]get_FileName(&this, FileName);

	public HRESULT put_FileName(BSTR FileName) mut => VT.[Friend]put_FileName(&this, FileName);
}

[CRepr]struct IMSVidFilePlayback2 : IMSVidFilePlayback
{
	public new const Guid IID = .(0x2f7e44af, 0x6e52, 0x4660, 0xbc, 0x08, 0xd8, 0xd5, 0x42, 0x58, 0x7d, 0x72);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IMSVidFilePlayback.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR FileName) put__SourceFilter;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, Guid FileName) put___SourceFilter;
	}


	public HRESULT put__SourceFilter(BSTR FileName) mut => VT.[Friend]put__SourceFilter(&this, FileName);

	public HRESULT put___SourceFilter(Guid FileName) mut => VT.[Friend]put___SourceFilter(&this, FileName);
}

[CRepr]struct IMSVidFilePlaybackEvent : IMSVidPlaybackEvent
{
	public new const Guid IID = .(0x37b0353a, 0xa4c8, 0x11d2, 0xb6, 0x34, 0x00, 0xc0, 0x4f, 0x79, 0x49, 0x8e);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IMSVidPlaybackEvent.VTable
	{
	}

}

[CRepr]struct IMSVidWebDVD : IMSVidPlayback
{
	public new const Guid IID = .(0xcf45f88b, 0xac56, 0x4ee2, 0xa7, 0x3a, 0xed, 0x04, 0xe2, 0x88, 0x5d, 0x3c);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IMSVidPlayback.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 lEvent, int lParam1, int lParam2) OnDVDEvent;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 lTitle) PlayTitle;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 lTitle, int32 lChapter) PlayChapterInTitle;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 lChapter) PlayChapter;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 lTitle, int32 lstrChapter, int32 lChapterCount) PlayChaptersAutoStop;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR strTime) PlayAtTime;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 lTitle, BSTR strTime) PlayAtTimeInTitle;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 lTitle, BSTR strStartTime, BSTR strEndTime) PlayPeriodInTitleAutoStop;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self) ReplayChapter;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self) PlayPrevChapter;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self) PlayNextChapter;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self) StillOff;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 lStream, int16 fFormat, BSTR* strAudioLang) get_AudioLanguage;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, DVDMenuIDConstants MenuID) ShowMenu;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self) Resume;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self) ReturnFromSubmenu;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* pVal) get_ButtonsAvailable;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* pVal) get_CurrentButton;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 lButton) SelectAndActivateButton;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self) ActivateButton;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self) SelectRightButton;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self) SelectLeftButton;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self) SelectLowerButton;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self) SelectUpperButton;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 xPos, int32 yPos) ActivateAtPosition;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 xPos, int32 yPos) SelectAtPosition;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 xPos, int32 yPos, int32* plButton) get_ButtonAtPosition;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 lTitle, int32* pVal) get_NumberOfChapters;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* pVal) get_TotalTitleTime;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* pVal) get_TitlesAvailable;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* pVal) get_VolumesAvailable;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* pVal) get_CurrentVolume;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* pVal) get_CurrentDiscSide;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* pVal) get_CurrentDomain;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* pVal) get_CurrentChapter;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* pVal) get_CurrentTitle;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* pVal) get_CurrentTime;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 timeCode, BSTR* pTimeStr) DVDTimeCode2bstr;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* pVal) get_DVDDirectory;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR newVal) put_DVDDirectory;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 lstream, int16* fEnabled) IsSubpictureStreamEnabled;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 lstream, int16* fEnabled) IsAudioStreamEnabled;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* pVal) get_CurrentSubpictureStream;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 newVal) put_CurrentSubpictureStream;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 lStream, BSTR* strLanguage) get_SubpictureLanguage;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* pVal) get_CurrentAudioStream;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 newVal) put_CurrentAudioStream;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* pVal) get_AudioStreamsAvailable;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* pVal) get_AnglesAvailable;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* pVal) get_CurrentAngle;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 newVal) put_CurrentAngle;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* pVal) get_SubpictureStreamsAvailable;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16* pVal) get_SubpictureOn;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16 newVal) put_SubpictureOn;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* pVal) get_DVDUniqueID;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16 fAccept, BSTR strUserName, BSTR strPassword) AcceptParentalLevelChange;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16 newVal) NotifyParentalLevelChange;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 lCountry, BSTR strUserName, BSTR strPassword) SelectParentalCountry;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 lParentalLevel, BSTR strUserName, BSTR strPassword) SelectParentalLevel;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 lTitle, int32* plParentalLevels) get_TitleParentalLevels;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* plCountryCode) get_PlayerParentalCountry;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* plParentalLevel) get_PlayerParentalLevel;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self) Eject;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 lUOP, int16* pfValid) UOPValid;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 lIndex, int16* psSPRM) get_SPRM;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 lIndex, int16* psSPRM) get_GPRM;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 lIndex, int16 sValue) put_GPRM;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 lLangIndex, int32 lStringIndex, DVDTextStringType* pType) get_DVDTextStringType;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 lLangIndex, int32 lStringIndex, BSTR* pstrText) get_DVDTextString;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 lLangIndex, int32* plNumOfStrings) get_DVDTextNumberOfStrings;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* plNumOfLangs) get_DVDTextNumberOfLanguages;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 lLangIndex, int32* lcid) get_DVDTextLanguageLCID;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self) RegionChange;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IDispatch** pVal) get_DVDAdm;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self) DeleteBookmark;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self) RestoreBookmark;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self) SaveBookmark;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 lang, int32 ext) SelectDefaultAudioLanguage;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 lang, DVDSPExt ext) SelectDefaultSubpictureLanguage;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* pVal) get_PreferredSubpictureStream;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* lang) get_DefaultMenuLanguage;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 lang) put_DefaultMenuLanguage;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* lang) get_DefaultSubpictureLanguage;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* lang) get_DefaultAudioLanguage;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, DVDSPExt* ext) get_DefaultSubpictureLanguageExt;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* ext) get_DefaultAudioLanguageExt;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 lcid, BSTR* lang) get_LanguageFromLCID;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* pVal) get_KaraokeAudioPresentationMode;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 newVal) put_KaraokeAudioPresentationMode;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 lStream, int32 lChan, int32* lContent) get_KaraokeChannelContent;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 lStream, int32* lChannelAssignment) get_KaraokeChannelAssignment;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self) RestorePreferredSettings;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 lButton, IMSVidRect** pRect) get_ButtonRect;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IMSVidRect** ppRect) get_DVDScreenInMouseCoordinates;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IMSVidRect* pRect) put_DVDScreenInMouseCoordinates;
	}


	public HRESULT OnDVDEvent(int32 lEvent, int lParam1, int lParam2) mut => VT.[Friend]OnDVDEvent(&this, lEvent, lParam1, lParam2);

	public HRESULT PlayTitle(int32 lTitle) mut => VT.[Friend]PlayTitle(&this, lTitle);

	public HRESULT PlayChapterInTitle(int32 lTitle, int32 lChapter) mut => VT.[Friend]PlayChapterInTitle(&this, lTitle, lChapter);

	public HRESULT PlayChapter(int32 lChapter) mut => VT.[Friend]PlayChapter(&this, lChapter);

	public HRESULT PlayChaptersAutoStop(int32 lTitle, int32 lstrChapter, int32 lChapterCount) mut => VT.[Friend]PlayChaptersAutoStop(&this, lTitle, lstrChapter, lChapterCount);

	public HRESULT PlayAtTime(BSTR strTime) mut => VT.[Friend]PlayAtTime(&this, strTime);

	public HRESULT PlayAtTimeInTitle(int32 lTitle, BSTR strTime) mut => VT.[Friend]PlayAtTimeInTitle(&this, lTitle, strTime);

	public HRESULT PlayPeriodInTitleAutoStop(int32 lTitle, BSTR strStartTime, BSTR strEndTime) mut => VT.[Friend]PlayPeriodInTitleAutoStop(&this, lTitle, strStartTime, strEndTime);

	public HRESULT ReplayChapter() mut => VT.[Friend]ReplayChapter(&this);

	public HRESULT PlayPrevChapter() mut => VT.[Friend]PlayPrevChapter(&this);

	public HRESULT PlayNextChapter() mut => VT.[Friend]PlayNextChapter(&this);

	public HRESULT StillOff() mut => VT.[Friend]StillOff(&this);

	public HRESULT get_AudioLanguage(int32 lStream, int16 fFormat, BSTR* strAudioLang) mut => VT.[Friend]get_AudioLanguage(&this, lStream, fFormat, strAudioLang);

	public HRESULT ShowMenu(DVDMenuIDConstants MenuID) mut => VT.[Friend]ShowMenu(&this, MenuID);

	public HRESULT Resume() mut => VT.[Friend]Resume(&this);

	public HRESULT ReturnFromSubmenu() mut => VT.[Friend]ReturnFromSubmenu(&this);

	public HRESULT get_ButtonsAvailable(int32* pVal) mut => VT.[Friend]get_ButtonsAvailable(&this, pVal);

	public HRESULT get_CurrentButton(int32* pVal) mut => VT.[Friend]get_CurrentButton(&this, pVal);

	public HRESULT SelectAndActivateButton(int32 lButton) mut => VT.[Friend]SelectAndActivateButton(&this, lButton);

	public HRESULT ActivateButton() mut => VT.[Friend]ActivateButton(&this);

	public HRESULT SelectRightButton() mut => VT.[Friend]SelectRightButton(&this);

	public HRESULT SelectLeftButton() mut => VT.[Friend]SelectLeftButton(&this);

	public HRESULT SelectLowerButton() mut => VT.[Friend]SelectLowerButton(&this);

	public HRESULT SelectUpperButton() mut => VT.[Friend]SelectUpperButton(&this);

	public HRESULT ActivateAtPosition(int32 xPos, int32 yPos) mut => VT.[Friend]ActivateAtPosition(&this, xPos, yPos);

	public HRESULT SelectAtPosition(int32 xPos, int32 yPos) mut => VT.[Friend]SelectAtPosition(&this, xPos, yPos);

	public HRESULT get_ButtonAtPosition(int32 xPos, int32 yPos, int32* plButton) mut => VT.[Friend]get_ButtonAtPosition(&this, xPos, yPos, plButton);

	public HRESULT get_NumberOfChapters(int32 lTitle, int32* pVal) mut => VT.[Friend]get_NumberOfChapters(&this, lTitle, pVal);

	public HRESULT get_TotalTitleTime(BSTR* pVal) mut => VT.[Friend]get_TotalTitleTime(&this, pVal);

	public HRESULT get_TitlesAvailable(int32* pVal) mut => VT.[Friend]get_TitlesAvailable(&this, pVal);

	public HRESULT get_VolumesAvailable(int32* pVal) mut => VT.[Friend]get_VolumesAvailable(&this, pVal);

	public HRESULT get_CurrentVolume(int32* pVal) mut => VT.[Friend]get_CurrentVolume(&this, pVal);

	public HRESULT get_CurrentDiscSide(int32* pVal) mut => VT.[Friend]get_CurrentDiscSide(&this, pVal);

	public HRESULT get_CurrentDomain(int32* pVal) mut => VT.[Friend]get_CurrentDomain(&this, pVal);

	public HRESULT get_CurrentChapter(int32* pVal) mut => VT.[Friend]get_CurrentChapter(&this, pVal);

	public HRESULT get_CurrentTitle(int32* pVal) mut => VT.[Friend]get_CurrentTitle(&this, pVal);

	public HRESULT get_CurrentTime(BSTR* pVal) mut => VT.[Friend]get_CurrentTime(&this, pVal);

	public HRESULT DVDTimeCode2bstr(int32 timeCode, BSTR* pTimeStr) mut => VT.[Friend]DVDTimeCode2bstr(&this, timeCode, pTimeStr);

	public HRESULT get_DVDDirectory(BSTR* pVal) mut => VT.[Friend]get_DVDDirectory(&this, pVal);

	public HRESULT put_DVDDirectory(BSTR newVal) mut => VT.[Friend]put_DVDDirectory(&this, newVal);

	public HRESULT IsSubpictureStreamEnabled(int32 lstream, int16* fEnabled) mut => VT.[Friend]IsSubpictureStreamEnabled(&this, lstream, fEnabled);

	public HRESULT IsAudioStreamEnabled(int32 lstream, int16* fEnabled) mut => VT.[Friend]IsAudioStreamEnabled(&this, lstream, fEnabled);

	public HRESULT get_CurrentSubpictureStream(int32* pVal) mut => VT.[Friend]get_CurrentSubpictureStream(&this, pVal);

	public HRESULT put_CurrentSubpictureStream(int32 newVal) mut => VT.[Friend]put_CurrentSubpictureStream(&this, newVal);

	public HRESULT get_SubpictureLanguage(int32 lStream, BSTR* strLanguage) mut => VT.[Friend]get_SubpictureLanguage(&this, lStream, strLanguage);

	public HRESULT get_CurrentAudioStream(int32* pVal) mut => VT.[Friend]get_CurrentAudioStream(&this, pVal);

	public HRESULT put_CurrentAudioStream(int32 newVal) mut => VT.[Friend]put_CurrentAudioStream(&this, newVal);

	public HRESULT get_AudioStreamsAvailable(int32* pVal) mut => VT.[Friend]get_AudioStreamsAvailable(&this, pVal);

	public HRESULT get_AnglesAvailable(int32* pVal) mut => VT.[Friend]get_AnglesAvailable(&this, pVal);

	public HRESULT get_CurrentAngle(int32* pVal) mut => VT.[Friend]get_CurrentAngle(&this, pVal);

	public HRESULT put_CurrentAngle(int32 newVal) mut => VT.[Friend]put_CurrentAngle(&this, newVal);

	public HRESULT get_SubpictureStreamsAvailable(int32* pVal) mut => VT.[Friend]get_SubpictureStreamsAvailable(&this, pVal);

	public HRESULT get_SubpictureOn(int16* pVal) mut => VT.[Friend]get_SubpictureOn(&this, pVal);

	public HRESULT put_SubpictureOn(int16 newVal) mut => VT.[Friend]put_SubpictureOn(&this, newVal);

	public HRESULT get_DVDUniqueID(BSTR* pVal) mut => VT.[Friend]get_DVDUniqueID(&this, pVal);

	public HRESULT AcceptParentalLevelChange(int16 fAccept, BSTR strUserName, BSTR strPassword) mut => VT.[Friend]AcceptParentalLevelChange(&this, fAccept, strUserName, strPassword);

	public HRESULT NotifyParentalLevelChange(int16 newVal) mut => VT.[Friend]NotifyParentalLevelChange(&this, newVal);

	public HRESULT SelectParentalCountry(int32 lCountry, BSTR strUserName, BSTR strPassword) mut => VT.[Friend]SelectParentalCountry(&this, lCountry, strUserName, strPassword);

	public HRESULT SelectParentalLevel(int32 lParentalLevel, BSTR strUserName, BSTR strPassword) mut => VT.[Friend]SelectParentalLevel(&this, lParentalLevel, strUserName, strPassword);

	public HRESULT get_TitleParentalLevels(int32 lTitle, int32* plParentalLevels) mut => VT.[Friend]get_TitleParentalLevels(&this, lTitle, plParentalLevels);

	public HRESULT get_PlayerParentalCountry(int32* plCountryCode) mut => VT.[Friend]get_PlayerParentalCountry(&this, plCountryCode);

	public HRESULT get_PlayerParentalLevel(int32* plParentalLevel) mut => VT.[Friend]get_PlayerParentalLevel(&this, plParentalLevel);

	public HRESULT Eject() mut => VT.[Friend]Eject(&this);

	public HRESULT UOPValid(int32 lUOP, int16* pfValid) mut => VT.[Friend]UOPValid(&this, lUOP, pfValid);

	public HRESULT get_SPRM(int32 lIndex, int16* psSPRM) mut => VT.[Friend]get_SPRM(&this, lIndex, psSPRM);

	public HRESULT get_GPRM(int32 lIndex, int16* psSPRM) mut => VT.[Friend]get_GPRM(&this, lIndex, psSPRM);

	public HRESULT put_GPRM(int32 lIndex, int16 sValue) mut => VT.[Friend]put_GPRM(&this, lIndex, sValue);

	public HRESULT get_DVDTextStringType(int32 lLangIndex, int32 lStringIndex, DVDTextStringType* pType) mut => VT.[Friend]get_DVDTextStringType(&this, lLangIndex, lStringIndex, pType);

	public HRESULT get_DVDTextString(int32 lLangIndex, int32 lStringIndex, BSTR* pstrText) mut => VT.[Friend]get_DVDTextString(&this, lLangIndex, lStringIndex, pstrText);

	public HRESULT get_DVDTextNumberOfStrings(int32 lLangIndex, int32* plNumOfStrings) mut => VT.[Friend]get_DVDTextNumberOfStrings(&this, lLangIndex, plNumOfStrings);

	public HRESULT get_DVDTextNumberOfLanguages(int32* plNumOfLangs) mut => VT.[Friend]get_DVDTextNumberOfLanguages(&this, plNumOfLangs);

	public HRESULT get_DVDTextLanguageLCID(int32 lLangIndex, int32* lcid) mut => VT.[Friend]get_DVDTextLanguageLCID(&this, lLangIndex, lcid);

	public HRESULT RegionChange() mut => VT.[Friend]RegionChange(&this);

	public HRESULT get_DVDAdm(IDispatch** pVal) mut => VT.[Friend]get_DVDAdm(&this, pVal);

	public HRESULT DeleteBookmark() mut => VT.[Friend]DeleteBookmark(&this);

	public HRESULT RestoreBookmark() mut => VT.[Friend]RestoreBookmark(&this);

	public HRESULT SaveBookmark() mut => VT.[Friend]SaveBookmark(&this);

	public HRESULT SelectDefaultAudioLanguage(int32 lang, int32 ext) mut => VT.[Friend]SelectDefaultAudioLanguage(&this, lang, ext);

	public HRESULT SelectDefaultSubpictureLanguage(int32 lang, DVDSPExt ext) mut => VT.[Friend]SelectDefaultSubpictureLanguage(&this, lang, ext);

	public HRESULT get_PreferredSubpictureStream(int32* pVal) mut => VT.[Friend]get_PreferredSubpictureStream(&this, pVal);

	public HRESULT get_DefaultMenuLanguage(int32* lang) mut => VT.[Friend]get_DefaultMenuLanguage(&this, lang);

	public HRESULT put_DefaultMenuLanguage(int32 lang) mut => VT.[Friend]put_DefaultMenuLanguage(&this, lang);

	public HRESULT get_DefaultSubpictureLanguage(int32* lang) mut => VT.[Friend]get_DefaultSubpictureLanguage(&this, lang);

	public HRESULT get_DefaultAudioLanguage(int32* lang) mut => VT.[Friend]get_DefaultAudioLanguage(&this, lang);

	public HRESULT get_DefaultSubpictureLanguageExt(DVDSPExt* ext) mut => VT.[Friend]get_DefaultSubpictureLanguageExt(&this, ext);

	public HRESULT get_DefaultAudioLanguageExt(int32* ext) mut => VT.[Friend]get_DefaultAudioLanguageExt(&this, ext);

	public HRESULT get_LanguageFromLCID(int32 lcid, BSTR* lang) mut => VT.[Friend]get_LanguageFromLCID(&this, lcid, lang);

	public HRESULT get_KaraokeAudioPresentationMode(int32* pVal) mut => VT.[Friend]get_KaraokeAudioPresentationMode(&this, pVal);

	public HRESULT put_KaraokeAudioPresentationMode(int32 newVal) mut => VT.[Friend]put_KaraokeAudioPresentationMode(&this, newVal);

	public HRESULT get_KaraokeChannelContent(int32 lStream, int32 lChan, int32* lContent) mut => VT.[Friend]get_KaraokeChannelContent(&this, lStream, lChan, lContent);

	public HRESULT get_KaraokeChannelAssignment(int32 lStream, int32* lChannelAssignment) mut => VT.[Friend]get_KaraokeChannelAssignment(&this, lStream, lChannelAssignment);

	public HRESULT RestorePreferredSettings() mut => VT.[Friend]RestorePreferredSettings(&this);

	public HRESULT get_ButtonRect(int32 lButton, IMSVidRect** pRect) mut => VT.[Friend]get_ButtonRect(&this, lButton, pRect);

	public HRESULT get_DVDScreenInMouseCoordinates(IMSVidRect** ppRect) mut => VT.[Friend]get_DVDScreenInMouseCoordinates(&this, ppRect);

	public HRESULT put_DVDScreenInMouseCoordinates(IMSVidRect* pRect) mut => VT.[Friend]put_DVDScreenInMouseCoordinates(&this, pRect);
}

[CRepr]struct IMSVidWebDVD2 : IMSVidWebDVD
{
	public new const Guid IID = .(0x7027212f, 0xee9a, 0x4a7c, 0x8b, 0x67, 0xf0, 0x23, 0x71, 0x4c, 0xda, 0xff);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IMSVidWebDVD.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint8** ppData, uint32* pDataLength) get_Bookmark;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint8* pData, uint32 dwDataLength) put_Bookmark;
	}


	public HRESULT get_Bookmark(uint8** ppData, uint32* pDataLength) mut => VT.[Friend]get_Bookmark(&this, ppData, pDataLength);

	public HRESULT put_Bookmark(uint8* pData, uint32 dwDataLength) mut => VT.[Friend]put_Bookmark(&this, pData, dwDataLength);
}

[CRepr]struct IMSVidWebDVDEvent : IMSVidPlaybackEvent
{
	public new const Guid IID = .(0xb4f7a674, 0x9b83, 0x49cb, 0xa3, 0x57, 0xc6, 0x3b, 0x87, 0x1b, 0xe9, 0x58);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IMSVidPlaybackEvent.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 lEventCode, VARIANT lParam1, VARIANT lParam2) DVDNotify;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16 bEnabled) PlayForwards;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16 bEnabled) PlayBackwards;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, DVDMenuIDConstants MenuID, int16 bEnabled) ShowMenu;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16 bEnabled) Resume;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16 bEnabled) SelectOrActivateButton;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16 bEnabled) StillOff;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16 bEnabled) PauseOn;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16 bEnabled) ChangeCurrentAudioStream;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16 bEnabled) ChangeCurrentSubpictureStream;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16 bEnabled) ChangeCurrentAngle;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16 bEnabled) PlayAtTimeInTitle;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16 bEnabled) PlayAtTime;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16 bEnabled) PlayChapterInTitle;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16 bEnabled) PlayChapter;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16 bEnabled) ReplayChapter;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16 bEnabled) PlayNextChapter;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16 bEnabled) Stop;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16 bEnabled) ReturnFromSubmenu;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16 bEnabled) PlayTitle;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16 bEnabled) PlayPrevChapter;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16 bEnabled) ChangeKaraokePresMode;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16 bEnabled) ChangeVideoPresMode;
	}


	public HRESULT DVDNotify(int32 lEventCode, VARIANT lParam1, VARIANT lParam2) mut => VT.[Friend]DVDNotify(&this, lEventCode, lParam1, lParam2);

	public HRESULT PlayForwards(int16 bEnabled) mut => VT.[Friend]PlayForwards(&this, bEnabled);

	public HRESULT PlayBackwards(int16 bEnabled) mut => VT.[Friend]PlayBackwards(&this, bEnabled);

	public HRESULT ShowMenu(DVDMenuIDConstants MenuID, int16 bEnabled) mut => VT.[Friend]ShowMenu(&this, MenuID, bEnabled);

	public HRESULT Resume(int16 bEnabled) mut => VT.[Friend]Resume(&this, bEnabled);

	public HRESULT SelectOrActivateButton(int16 bEnabled) mut => VT.[Friend]SelectOrActivateButton(&this, bEnabled);

	public HRESULT StillOff(int16 bEnabled) mut => VT.[Friend]StillOff(&this, bEnabled);

	public HRESULT PauseOn(int16 bEnabled) mut => VT.[Friend]PauseOn(&this, bEnabled);

	public HRESULT ChangeCurrentAudioStream(int16 bEnabled) mut => VT.[Friend]ChangeCurrentAudioStream(&this, bEnabled);

	public HRESULT ChangeCurrentSubpictureStream(int16 bEnabled) mut => VT.[Friend]ChangeCurrentSubpictureStream(&this, bEnabled);

	public HRESULT ChangeCurrentAngle(int16 bEnabled) mut => VT.[Friend]ChangeCurrentAngle(&this, bEnabled);

	public HRESULT PlayAtTimeInTitle(int16 bEnabled) mut => VT.[Friend]PlayAtTimeInTitle(&this, bEnabled);

	public HRESULT PlayAtTime(int16 bEnabled) mut => VT.[Friend]PlayAtTime(&this, bEnabled);

	public HRESULT PlayChapterInTitle(int16 bEnabled) mut => VT.[Friend]PlayChapterInTitle(&this, bEnabled);

	public HRESULT PlayChapter(int16 bEnabled) mut => VT.[Friend]PlayChapter(&this, bEnabled);

	public HRESULT ReplayChapter(int16 bEnabled) mut => VT.[Friend]ReplayChapter(&this, bEnabled);

	public HRESULT PlayNextChapter(int16 bEnabled) mut => VT.[Friend]PlayNextChapter(&this, bEnabled);

	public HRESULT Stop(int16 bEnabled) mut => VT.[Friend]Stop(&this, bEnabled);

	public HRESULT ReturnFromSubmenu(int16 bEnabled) mut => VT.[Friend]ReturnFromSubmenu(&this, bEnabled);

	public HRESULT PlayTitle(int16 bEnabled) mut => VT.[Friend]PlayTitle(&this, bEnabled);

	public HRESULT PlayPrevChapter(int16 bEnabled) mut => VT.[Friend]PlayPrevChapter(&this, bEnabled);

	public HRESULT ChangeKaraokePresMode(int16 bEnabled) mut => VT.[Friend]ChangeKaraokePresMode(&this, bEnabled);

	public HRESULT ChangeVideoPresMode(int16 bEnabled) mut => VT.[Friend]ChangeVideoPresMode(&this, bEnabled);
}

[CRepr]struct IMSVidWebDVDAdm : IDispatch
{
	public new const Guid IID = .(0xb8be681a, 0xeb2c, 0x47f0, 0xb4, 0x15, 0x94, 0xd5, 0x45, 0x2f, 0x0e, 0x05);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR strUserName, BSTR strOld, BSTR strNew) ChangePassword;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 level, BSTR strUserName, BSTR strPassword) SaveParentalLevel;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 country, BSTR strUserName, BSTR strPassword) SaveParentalCountry;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR strUserName, BSTR strPassword, int16* pVal) ConfirmPassword;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* lLevel) GetParentalLevel;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* lCountry) GetParentalCountry;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* pVal) get_DefaultAudioLCID;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 newVal) put_DefaultAudioLCID;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* pVal) get_DefaultSubpictureLCID;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 newVal) put_DefaultSubpictureLCID;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* pVal) get_DefaultMenuLCID;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 newVal) put_DefaultMenuLCID;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16* pVal) get_BookmarkOnStop;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16 newVal) put_BookmarkOnStop;
	}


	public HRESULT ChangePassword(BSTR strUserName, BSTR strOld, BSTR strNew) mut => VT.[Friend]ChangePassword(&this, strUserName, strOld, strNew);

	public HRESULT SaveParentalLevel(int32 level, BSTR strUserName, BSTR strPassword) mut => VT.[Friend]SaveParentalLevel(&this, level, strUserName, strPassword);

	public HRESULT SaveParentalCountry(int32 country, BSTR strUserName, BSTR strPassword) mut => VT.[Friend]SaveParentalCountry(&this, country, strUserName, strPassword);

	public HRESULT ConfirmPassword(BSTR strUserName, BSTR strPassword, int16* pVal) mut => VT.[Friend]ConfirmPassword(&this, strUserName, strPassword, pVal);

	public HRESULT GetParentalLevel(int32* lLevel) mut => VT.[Friend]GetParentalLevel(&this, lLevel);

	public HRESULT GetParentalCountry(int32* lCountry) mut => VT.[Friend]GetParentalCountry(&this, lCountry);

	public HRESULT get_DefaultAudioLCID(int32* pVal) mut => VT.[Friend]get_DefaultAudioLCID(&this, pVal);

	public HRESULT put_DefaultAudioLCID(int32 newVal) mut => VT.[Friend]put_DefaultAudioLCID(&this, newVal);

	public HRESULT get_DefaultSubpictureLCID(int32* pVal) mut => VT.[Friend]get_DefaultSubpictureLCID(&this, pVal);

	public HRESULT put_DefaultSubpictureLCID(int32 newVal) mut => VT.[Friend]put_DefaultSubpictureLCID(&this, newVal);

	public HRESULT get_DefaultMenuLCID(int32* pVal) mut => VT.[Friend]get_DefaultMenuLCID(&this, pVal);

	public HRESULT put_DefaultMenuLCID(int32 newVal) mut => VT.[Friend]put_DefaultMenuLCID(&this, newVal);

	public HRESULT get_BookmarkOnStop(int16* pVal) mut => VT.[Friend]get_BookmarkOnStop(&this, pVal);

	public HRESULT put_BookmarkOnStop(int16 newVal) mut => VT.[Friend]put_BookmarkOnStop(&this, newVal);
}

[CRepr]struct IMSVidOutputDevice : IMSVidDevice
{
	public new const Guid IID = .(0x37b03546, 0xa4c8, 0x11d2, 0xb6, 0x34, 0x00, 0xc0, 0x4f, 0x79, 0x49, 0x8e);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IMSVidDevice.VTable
	{
	}

}

[CRepr]struct IMSVidOutputDeviceEvent : IMSVidDeviceEvent
{
	public new const Guid IID = .(0x2e6a14e2, 0x571c, 0x11d3, 0xb6, 0x52, 0x00, 0xc0, 0x4f, 0x79, 0x49, 0x8e);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IMSVidDeviceEvent.VTable
	{
	}

}

[CRepr]struct IMSVidFeature : IMSVidDevice
{
	public new const Guid IID = .(0x37b03547, 0xa4c8, 0x11d2, 0xb6, 0x34, 0x00, 0xc0, 0x4f, 0x79, 0x49, 0x8e);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IMSVidDevice.VTable
	{
	}

}

[CRepr]struct IMSVidFeatureEvent : IMSVidDeviceEvent
{
	public new const Guid IID = .(0x3dd2903c, 0xe0aa, 0x11d2, 0xb6, 0x3a, 0x00, 0xc0, 0x4f, 0x79, 0x49, 0x8e);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IMSVidDeviceEvent.VTable
	{
	}

}

[CRepr]struct IMSVidEncoder : IMSVidFeature
{
	public new const Guid IID = .(0xc0020fd4, 0xbee7, 0x43d9, 0xa4, 0x95, 0x9f, 0x21, 0x31, 0x17, 0x10, 0x3d);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IMSVidFeature.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IUnknown** ppEncInt) get_VideoEncoderInterface;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IUnknown** ppEncInt) get_AudioEncoderInterface;
	}


	public HRESULT get_VideoEncoderInterface(IUnknown** ppEncInt) mut => VT.[Friend]get_VideoEncoderInterface(&this, ppEncInt);

	public HRESULT get_AudioEncoderInterface(IUnknown** ppEncInt) mut => VT.[Friend]get_AudioEncoderInterface(&this, ppEncInt);
}

[CRepr]struct IMSVidClosedCaptioning : IMSVidFeature
{
	public new const Guid IID = .(0x99652ea1, 0xc1f7, 0x414f, 0xbb, 0x7b, 0x1c, 0x96, 0x7d, 0xe7, 0x59, 0x83);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IMSVidFeature.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16* On) get_Enable;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16 On) put_Enable;
	}


	public HRESULT get_Enable(int16* On) mut => VT.[Friend]get_Enable(&this, On);

	public HRESULT put_Enable(int16 On) mut => VT.[Friend]put_Enable(&this, On);
}

[CRepr]struct IMSVidClosedCaptioning2 : IMSVidClosedCaptioning
{
	public new const Guid IID = .(0xe00cb864, 0xa029, 0x4310, 0x99, 0x87, 0xa8, 0x73, 0xf5, 0x88, 0x7d, 0x97);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IMSVidClosedCaptioning.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, MSVidCCService* On) get_Service;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, MSVidCCService On) put_Service;
	}


	public HRESULT get_Service(MSVidCCService* On) mut => VT.[Friend]get_Service(&this, On);

	public HRESULT put_Service(MSVidCCService On) mut => VT.[Friend]put_Service(&this, On);
}

[CRepr]struct IMSVidClosedCaptioning3 : IMSVidClosedCaptioning2
{
	public new const Guid IID = .(0xc8638e8a, 0x7625, 0x4c51, 0x93, 0x66, 0x2f, 0x40, 0xa9, 0x83, 0x1f, 0xc0);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IMSVidClosedCaptioning2.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IUnknown** punkTTFilter) get_TeleTextFilter;
	}


	public HRESULT get_TeleTextFilter(IUnknown** punkTTFilter) mut => VT.[Friend]get_TeleTextFilter(&this, punkTTFilter);
}

[CRepr]struct IMSVidXDS : IMSVidFeature
{
	public new const Guid IID = .(0x11ebc158, 0xe712, 0x4d1f, 0x8b, 0xb3, 0x01, 0xed, 0x52, 0x74, 0xc4, 0xce);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IMSVidFeature.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IUnknown** punkCC) get_ChannelChangeInterface;
	}


	public HRESULT get_ChannelChangeInterface(IUnknown** punkCC) mut => VT.[Friend]get_ChannelChangeInterface(&this, punkCC);
}

[CRepr]struct IMSVidXDSEvent : IMSVidFeatureEvent
{
	public new const Guid IID = .(0x6db2317d, 0x3b23, 0x41ec, 0xba, 0x4b, 0x70, 0x1f, 0x40, 0x7e, 0xaf, 0x3a);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IMSVidFeatureEvent.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, EnTvRat_System PrevRatingSystem, EnTvRat_GenericLevel PrevLevel, BfEnTvRat_GenericAttributes PrevAttributes, EnTvRat_System NewRatingSystem, EnTvRat_GenericLevel NewLevel, BfEnTvRat_GenericAttributes NewAttributes) RatingChange;
	}


	public HRESULT RatingChange(EnTvRat_System PrevRatingSystem, EnTvRat_GenericLevel PrevLevel, BfEnTvRat_GenericAttributes PrevAttributes, EnTvRat_System NewRatingSystem, EnTvRat_GenericLevel NewLevel, BfEnTvRat_GenericAttributes NewAttributes) mut => VT.[Friend]RatingChange(&this, PrevRatingSystem, PrevLevel, PrevAttributes, NewRatingSystem, NewLevel, NewAttributes);
}

[CRepr]struct IMSVidDataServices : IMSVidFeature
{
	public new const Guid IID = .(0x334125c1, 0x77e5, 0x11d3, 0xb6, 0x53, 0x00, 0xc0, 0x4f, 0x79, 0x49, 0x8e);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IMSVidFeature.VTable
	{
	}

}

[CRepr]struct IMSVidDataServicesEvent : IMSVidDeviceEvent
{
	public new const Guid IID = .(0x334125c2, 0x77e5, 0x11d3, 0xb6, 0x53, 0x00, 0xc0, 0x4f, 0x79, 0x49, 0x8e);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IMSVidDeviceEvent.VTable
	{
	}

}

[CRepr]struct IMSVidVideoRenderer : IMSVidOutputDevice
{
	public new const Guid IID = .(0x37b03540, 0xa4c8, 0x11d2, 0xb6, 0x34, 0x00, 0xc0, 0x4f, 0x79, 0x49, 0x8e);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IMSVidOutputDevice.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* CompositorCLSID) get_CustomCompositorClass;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR CompositorCLSID) put_CustomCompositorClass;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, Guid* CompositorCLSID) get__CustomCompositorClass;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, in Guid CompositorCLSID) put__CustomCompositorClass;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IVMRImageCompositor** Compositor) get__CustomCompositor;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IVMRImageCompositor* Compositor) put__CustomCompositor;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IPictureDisp** MixerPictureDisp) get_MixerBitmap;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IVMRMixerBitmap** MixerPicture) get__MixerBitmap;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IPictureDisp* MixerPictureDisp) put_MixerBitmap;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VMRALPHABITMAP* MixerPicture) put__MixerBitmap;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IMSVidRect** rDest) get_MixerBitmapPositionRect;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IMSVidRect* rDest) put_MixerBitmapPositionRect;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* opacity) get_MixerBitmapOpacity;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 opacity) put_MixerBitmapOpacity;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IPictureDisp* MixerPictureDisp, int32 Opacity, IMSVidRect* rDest) SetupMixerBitmap;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, SourceSizeList* CurrentSize) get_SourceSize;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, SourceSizeList NewSize) put_SourceSize;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* plPercent) get_OverScan;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 lPercent) put_OverScan;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IMSVidRect** pRect) get_AvailableSourceRect;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IMSVidRect** ppVidRect) get_MaxVidRect;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IMSVidRect** ppVidRect) get_MinVidRect;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IMSVidRect** pRect) get_ClippedSourceRect;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IMSVidRect* pRect) put_ClippedSourceRect;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16* UseOverlayVal) get_UsingOverlay;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16 UseOverlayVal) put_UsingOverlay;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IPictureDisp** currentImage) Capture;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* pVal) get_FramesPerSecond;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16* pDeci) get_DecimateInput;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16 pDeci) put_DecimateInput;
	}


	public HRESULT get_CustomCompositorClass(BSTR* CompositorCLSID) mut => VT.[Friend]get_CustomCompositorClass(&this, CompositorCLSID);

	public HRESULT put_CustomCompositorClass(BSTR CompositorCLSID) mut => VT.[Friend]put_CustomCompositorClass(&this, CompositorCLSID);

	public HRESULT get__CustomCompositorClass(Guid* CompositorCLSID) mut => VT.[Friend]get__CustomCompositorClass(&this, CompositorCLSID);

	public HRESULT put__CustomCompositorClass(in Guid CompositorCLSID) mut => VT.[Friend]put__CustomCompositorClass(&this, CompositorCLSID);

	public HRESULT get__CustomCompositor(IVMRImageCompositor** Compositor) mut => VT.[Friend]get__CustomCompositor(&this, Compositor);

	public HRESULT put__CustomCompositor(IVMRImageCompositor* Compositor) mut => VT.[Friend]put__CustomCompositor(&this, Compositor);

	public HRESULT get_MixerBitmap(IPictureDisp** MixerPictureDisp) mut => VT.[Friend]get_MixerBitmap(&this, MixerPictureDisp);

	public HRESULT get__MixerBitmap(IVMRMixerBitmap** MixerPicture) mut => VT.[Friend]get__MixerBitmap(&this, MixerPicture);

	public HRESULT put_MixerBitmap(IPictureDisp* MixerPictureDisp) mut => VT.[Friend]put_MixerBitmap(&this, MixerPictureDisp);

	public HRESULT put__MixerBitmap(VMRALPHABITMAP* MixerPicture) mut => VT.[Friend]put__MixerBitmap(&this, MixerPicture);

	public HRESULT get_MixerBitmapPositionRect(IMSVidRect** rDest) mut => VT.[Friend]get_MixerBitmapPositionRect(&this, rDest);

	public HRESULT put_MixerBitmapPositionRect(IMSVidRect* rDest) mut => VT.[Friend]put_MixerBitmapPositionRect(&this, rDest);

	public HRESULT get_MixerBitmapOpacity(int32* opacity) mut => VT.[Friend]get_MixerBitmapOpacity(&this, opacity);

	public HRESULT put_MixerBitmapOpacity(int32 opacity) mut => VT.[Friend]put_MixerBitmapOpacity(&this, opacity);

	public HRESULT SetupMixerBitmap(IPictureDisp* MixerPictureDisp, int32 Opacity, IMSVidRect* rDest) mut => VT.[Friend]SetupMixerBitmap(&this, MixerPictureDisp, Opacity, rDest);

	public HRESULT get_SourceSize(SourceSizeList* CurrentSize) mut => VT.[Friend]get_SourceSize(&this, CurrentSize);

	public HRESULT put_SourceSize(SourceSizeList NewSize) mut => VT.[Friend]put_SourceSize(&this, NewSize);

	public HRESULT get_OverScan(int32* plPercent) mut => VT.[Friend]get_OverScan(&this, plPercent);

	public HRESULT put_OverScan(int32 lPercent) mut => VT.[Friend]put_OverScan(&this, lPercent);

	public HRESULT get_AvailableSourceRect(IMSVidRect** pRect) mut => VT.[Friend]get_AvailableSourceRect(&this, pRect);

	public HRESULT get_MaxVidRect(IMSVidRect** ppVidRect) mut => VT.[Friend]get_MaxVidRect(&this, ppVidRect);

	public HRESULT get_MinVidRect(IMSVidRect** ppVidRect) mut => VT.[Friend]get_MinVidRect(&this, ppVidRect);

	public HRESULT get_ClippedSourceRect(IMSVidRect** pRect) mut => VT.[Friend]get_ClippedSourceRect(&this, pRect);

	public HRESULT put_ClippedSourceRect(IMSVidRect* pRect) mut => VT.[Friend]put_ClippedSourceRect(&this, pRect);

	public HRESULT get_UsingOverlay(int16* UseOverlayVal) mut => VT.[Friend]get_UsingOverlay(&this, UseOverlayVal);

	public HRESULT put_UsingOverlay(int16 UseOverlayVal) mut => VT.[Friend]put_UsingOverlay(&this, UseOverlayVal);

	public HRESULT Capture(IPictureDisp** currentImage) mut => VT.[Friend]Capture(&this, currentImage);

	public HRESULT get_FramesPerSecond(int32* pVal) mut => VT.[Friend]get_FramesPerSecond(&this, pVal);

	public HRESULT get_DecimateInput(int16* pDeci) mut => VT.[Friend]get_DecimateInput(&this, pDeci);

	public HRESULT put_DecimateInput(int16 pDeci) mut => VT.[Friend]put_DecimateInput(&this, pDeci);
}

[CRepr]struct IMSVidVideoRendererEvent : IMSVidOutputDeviceEvent
{
	public new const Guid IID = .(0x37b03545, 0xa4c8, 0x11d2, 0xb6, 0x34, 0x00, 0xc0, 0x4f, 0x79, 0x49, 0x8e);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IMSVidOutputDeviceEvent.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self) OverlayUnavailable;
	}


	public HRESULT OverlayUnavailable() mut => VT.[Friend]OverlayUnavailable(&this);
}

[CRepr]struct IMSVidGenericSink : IMSVidOutputDevice
{
	public new const Guid IID = .(0x6c29b41d, 0x455b, 0x4c33, 0x96, 0x3a, 0x0d, 0x28, 0xe5, 0xe5, 0x55, 0xea);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IMSVidOutputDevice.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR bstrName) SetSinkFilter;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, MSVidSinkStreams* pStreams) get_SinkStreams;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, MSVidSinkStreams Streams) put_SinkStreams;
	}


	public HRESULT SetSinkFilter(BSTR bstrName) mut => VT.[Friend]SetSinkFilter(&this, bstrName);

	public HRESULT get_SinkStreams(MSVidSinkStreams* pStreams) mut => VT.[Friend]get_SinkStreams(&this, pStreams);

	public HRESULT put_SinkStreams(MSVidSinkStreams Streams) mut => VT.[Friend]put_SinkStreams(&this, Streams);
}

[CRepr]struct IMSVidGenericSink2 : IMSVidGenericSink
{
	public new const Guid IID = .(0x6b5a28f3, 0x47f1, 0x4092, 0xb1, 0x68, 0x60, 0xca, 0xbe, 0xc0, 0x8f, 0x1c);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IMSVidGenericSink.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR bstrName) AddFilter;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self) ResetFilterList;
	}


	public HRESULT AddFilter(BSTR bstrName) mut => VT.[Friend]AddFilter(&this, bstrName);

	public HRESULT ResetFilterList() mut => VT.[Friend]ResetFilterList(&this);
}

[CRepr]struct IMSVidStreamBufferRecordingControl : IDispatch
{
	public new const Guid IID = .(0x160621aa, 0xbbbc, 0x4326, 0xa8, 0x24, 0xc3, 0x95, 0xae, 0xbc, 0x6e, 0x74);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* rtStart) get_StartTime;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 rtStart) put_StartTime;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* rtStop) get_StopTime;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 rtStop) put_StopTime;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16* phResult) get_RecordingStopped;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16* phResult) get_RecordingStarted;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, RecordingType* dwType) get_RecordingType;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IUnknown** pRecordingAttribute) get_RecordingAttribute;
	}


	public HRESULT get_StartTime(int32* rtStart) mut => VT.[Friend]get_StartTime(&this, rtStart);

	public HRESULT put_StartTime(int32 rtStart) mut => VT.[Friend]put_StartTime(&this, rtStart);

	public HRESULT get_StopTime(int32* rtStop) mut => VT.[Friend]get_StopTime(&this, rtStop);

	public HRESULT put_StopTime(int32 rtStop) mut => VT.[Friend]put_StopTime(&this, rtStop);

	public HRESULT get_RecordingStopped(int16* phResult) mut => VT.[Friend]get_RecordingStopped(&this, phResult);

	public HRESULT get_RecordingStarted(int16* phResult) mut => VT.[Friend]get_RecordingStarted(&this, phResult);

	public HRESULT get_RecordingType(RecordingType* dwType) mut => VT.[Friend]get_RecordingType(&this, dwType);

	public HRESULT get_RecordingAttribute(IUnknown** pRecordingAttribute) mut => VT.[Friend]get_RecordingAttribute(&this, pRecordingAttribute);
}

[CRepr]struct IMSVidStreamBufferSink : IMSVidOutputDevice
{
	public new const Guid IID = .(0x159dbb45, 0xcd1b, 0x4dab, 0x83, 0xea, 0x5c, 0xb1, 0xf4, 0xf2, 0x1d, 0x07);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IMSVidOutputDevice.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR pszFilename, IMSVidStreamBufferRecordingControl** pRecordingIUnknown) get_ContentRecorder;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR pszFilename, IMSVidStreamBufferRecordingControl** pRecordingIUnknown) get_ReferenceRecorder;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* pName) get_SinkName;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR Name) put_SinkName;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self) NameSetLock;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IUnknown** sbeConfig) get_SBESink;
	}


	public HRESULT get_ContentRecorder(BSTR pszFilename, IMSVidStreamBufferRecordingControl** pRecordingIUnknown) mut => VT.[Friend]get_ContentRecorder(&this, pszFilename, pRecordingIUnknown);

	public HRESULT get_ReferenceRecorder(BSTR pszFilename, IMSVidStreamBufferRecordingControl** pRecordingIUnknown) mut => VT.[Friend]get_ReferenceRecorder(&this, pszFilename, pRecordingIUnknown);

	public HRESULT get_SinkName(BSTR* pName) mut => VT.[Friend]get_SinkName(&this, pName);

	public HRESULT put_SinkName(BSTR Name) mut => VT.[Friend]put_SinkName(&this, Name);

	public HRESULT NameSetLock() mut => VT.[Friend]NameSetLock(&this);

	public HRESULT get_SBESink(IUnknown** sbeConfig) mut => VT.[Friend]get_SBESink(&this, sbeConfig);
}

[CRepr]struct IMSVidStreamBufferSink2 : IMSVidStreamBufferSink
{
	public new const Guid IID = .(0x2ca9fc63, 0xc131, 0x4e5a, 0x95, 0x5a, 0x54, 0x4a, 0x47, 0xc6, 0x71, 0x46);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IMSVidStreamBufferSink.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self) UnlockProfile;
	}


	public HRESULT UnlockProfile() mut => VT.[Friend]UnlockProfile(&this);
}

[CRepr]struct IMSVidStreamBufferSink3 : IMSVidStreamBufferSink2
{
	public new const Guid IID = .(0x4f8721d7, 0x7d59, 0x4d8b, 0x99, 0xf5, 0xa7, 0x77, 0x75, 0x58, 0x6b, 0xd5);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IMSVidStreamBufferSink2.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* pdwMin) SetMinSeek;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IUnknown** ppUnk) get_AudioCounter;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IUnknown** ppUnk) get_VideoCounter;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IUnknown** ppUnk) get_CCCounter;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IUnknown** ppUnk) get_WSTCounter;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR szCLSID) put_AudioAnalysisFilter;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* pszCLSID) get_AudioAnalysisFilter;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, Guid guid) put__AudioAnalysisFilter;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, Guid* pGuid) get__AudioAnalysisFilter;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR szCLSID) put_VideoAnalysisFilter;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* pszCLSID) get_VideoAnalysisFilter;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, Guid guid) put__VideoAnalysisFilter;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, Guid* pGuid) get__VideoAnalysisFilter;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR szCLSID) put_DataAnalysisFilter;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* pszCLSID) get_DataAnalysisFilter;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, Guid guid) put__DataAnalysisFilter;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, Guid* pGuid) get__DataAnalysisFilter;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, HRESULT* hres) get_LicenseErrorCode;
	}


	public HRESULT SetMinSeek(int32* pdwMin) mut => VT.[Friend]SetMinSeek(&this, pdwMin);

	public HRESULT get_AudioCounter(IUnknown** ppUnk) mut => VT.[Friend]get_AudioCounter(&this, ppUnk);

	public HRESULT get_VideoCounter(IUnknown** ppUnk) mut => VT.[Friend]get_VideoCounter(&this, ppUnk);

	public HRESULT get_CCCounter(IUnknown** ppUnk) mut => VT.[Friend]get_CCCounter(&this, ppUnk);

	public HRESULT get_WSTCounter(IUnknown** ppUnk) mut => VT.[Friend]get_WSTCounter(&this, ppUnk);

	public HRESULT put_AudioAnalysisFilter(BSTR szCLSID) mut => VT.[Friend]put_AudioAnalysisFilter(&this, szCLSID);

	public HRESULT get_AudioAnalysisFilter(BSTR* pszCLSID) mut => VT.[Friend]get_AudioAnalysisFilter(&this, pszCLSID);

	public HRESULT put__AudioAnalysisFilter(Guid guid) mut => VT.[Friend]put__AudioAnalysisFilter(&this, guid);

	public HRESULT get__AudioAnalysisFilter(Guid* pGuid) mut => VT.[Friend]get__AudioAnalysisFilter(&this, pGuid);

	public HRESULT put_VideoAnalysisFilter(BSTR szCLSID) mut => VT.[Friend]put_VideoAnalysisFilter(&this, szCLSID);

	public HRESULT get_VideoAnalysisFilter(BSTR* pszCLSID) mut => VT.[Friend]get_VideoAnalysisFilter(&this, pszCLSID);

	public HRESULT put__VideoAnalysisFilter(Guid guid) mut => VT.[Friend]put__VideoAnalysisFilter(&this, guid);

	public HRESULT get__VideoAnalysisFilter(Guid* pGuid) mut => VT.[Friend]get__VideoAnalysisFilter(&this, pGuid);

	public HRESULT put_DataAnalysisFilter(BSTR szCLSID) mut => VT.[Friend]put_DataAnalysisFilter(&this, szCLSID);

	public HRESULT get_DataAnalysisFilter(BSTR* pszCLSID) mut => VT.[Friend]get_DataAnalysisFilter(&this, pszCLSID);

	public HRESULT put__DataAnalysisFilter(Guid guid) mut => VT.[Friend]put__DataAnalysisFilter(&this, guid);

	public HRESULT get__DataAnalysisFilter(Guid* pGuid) mut => VT.[Friend]get__DataAnalysisFilter(&this, pGuid);

	public HRESULT get_LicenseErrorCode(HRESULT* hres) mut => VT.[Friend]get_LicenseErrorCode(&this, hres);
}

[CRepr]struct IMSVidStreamBufferSinkEvent : IMSVidOutputDeviceEvent
{
	public new const Guid IID = .(0xf798a36b, 0xb05b, 0x4bbe, 0x97, 0x03, 0xea, 0xea, 0x7d, 0x61, 0xcd, 0x51);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IMSVidOutputDeviceEvent.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self) CertificateFailure;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self) CertificateSuccess;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self) WriteFailure;
	}


	public HRESULT CertificateFailure() mut => VT.[Friend]CertificateFailure(&this);

	public HRESULT CertificateSuccess() mut => VT.[Friend]CertificateSuccess(&this);

	public HRESULT WriteFailure() mut => VT.[Friend]WriteFailure(&this);
}

[CRepr]struct IMSVidStreamBufferSinkEvent2 : IMSVidStreamBufferSinkEvent
{
	public new const Guid IID = .(0x3d7a5166, 0x72d7, 0x484b, 0xa0, 0x6f, 0x28, 0x61, 0x87, 0xb8, 0x0c, 0xa1);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IMSVidStreamBufferSinkEvent.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self) EncryptionOn;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self) EncryptionOff;
	}


	public HRESULT EncryptionOn() mut => VT.[Friend]EncryptionOn(&this);

	public HRESULT EncryptionOff() mut => VT.[Friend]EncryptionOff(&this);
}

[CRepr]struct IMSVidStreamBufferSinkEvent3 : IMSVidStreamBufferSinkEvent2
{
	public new const Guid IID = .(0x735ad8d5, 0xc259, 0x48e9, 0x81, 0xe7, 0xd2, 0x79, 0x53, 0x66, 0x5b, 0x23);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IMSVidStreamBufferSinkEvent2.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 dwProt) LicenseChange;
	}


	public HRESULT LicenseChange(int32 dwProt) mut => VT.[Friend]LicenseChange(&this, dwProt);
}

[CRepr]struct IMSVidStreamBufferSinkEvent4 : IMSVidStreamBufferSinkEvent3
{
	public new const Guid IID = .(0x1b01dcb0, 0xdaf0, 0x412c, 0xa5, 0xd1, 0x59, 0x0c, 0x7f, 0x62, 0xe2, 0xb8);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IMSVidStreamBufferSinkEvent3.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self) WriteFailureClear;
	}


	public HRESULT WriteFailureClear() mut => VT.[Friend]WriteFailureClear(&this);
}

[CRepr]struct IMSVidStreamBufferSource : IMSVidFilePlayback
{
	public new const Guid IID = .(0xeb0c8cf9, 0x6950, 0x4772, 0x87, 0xb1, 0x47, 0xd1, 0x1c, 0xf3, 0xa0, 0x2f);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IMSVidFilePlayback.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* lStart) get_Start;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IUnknown** pRecordingAttribute) get_RecordingAttribute;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, EnTvRat_System* pEnSystem, EnTvRat_GenericLevel* pEnRating, int32* pBfEnAttr) CurrentRatings;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, EnTvRat_System enSystem, EnTvRat_GenericLevel enRating, int32 lbfEnAttr) MaxRatingsLevel;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16 bBlock) put_BlockUnrated;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 dwDelay) put_UnratedDelay;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IUnknown** sbeFilter) get_SBESource;
	}


	public HRESULT get_Start(int32* lStart) mut => VT.[Friend]get_Start(&this, lStart);

	public HRESULT get_RecordingAttribute(IUnknown** pRecordingAttribute) mut => VT.[Friend]get_RecordingAttribute(&this, pRecordingAttribute);

	public HRESULT CurrentRatings(EnTvRat_System* pEnSystem, EnTvRat_GenericLevel* pEnRating, int32* pBfEnAttr) mut => VT.[Friend]CurrentRatings(&this, pEnSystem, pEnRating, pBfEnAttr);

	public HRESULT MaxRatingsLevel(EnTvRat_System enSystem, EnTvRat_GenericLevel enRating, int32 lbfEnAttr) mut => VT.[Friend]MaxRatingsLevel(&this, enSystem, enRating, lbfEnAttr);

	public HRESULT put_BlockUnrated(int16 bBlock) mut => VT.[Friend]put_BlockUnrated(&this, bBlock);

	public HRESULT put_UnratedDelay(int32 dwDelay) mut => VT.[Friend]put_UnratedDelay(&this, dwDelay);

	public HRESULT get_SBESource(IUnknown** sbeFilter) mut => VT.[Friend]get_SBESource(&this, sbeFilter);
}

[CRepr]struct IMSVidStreamBufferSource2 : IMSVidStreamBufferSource
{
	public new const Guid IID = .(0xe4ba9059, 0xb1ce, 0x40d8, 0xb9, 0xa0, 0xd4, 0xea, 0x4a, 0x99, 0x89, 0xd3);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IMSVidStreamBufferSource.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, double dwRate, uint32 dwFramesPerSecond) put_RateEx;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IUnknown** ppUnk) get_AudioCounter;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IUnknown** ppUnk) get_VideoCounter;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IUnknown** ppUnk) get_CCCounter;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IUnknown** ppUnk) get_WSTCounter;
	}


	public HRESULT put_RateEx(double dwRate, uint32 dwFramesPerSecond) mut => VT.[Friend]put_RateEx(&this, dwRate, dwFramesPerSecond);

	public HRESULT get_AudioCounter(IUnknown** ppUnk) mut => VT.[Friend]get_AudioCounter(&this, ppUnk);

	public HRESULT get_VideoCounter(IUnknown** ppUnk) mut => VT.[Friend]get_VideoCounter(&this, ppUnk);

	public HRESULT get_CCCounter(IUnknown** ppUnk) mut => VT.[Friend]get_CCCounter(&this, ppUnk);

	public HRESULT get_WSTCounter(IUnknown** ppUnk) mut => VT.[Friend]get_WSTCounter(&this, ppUnk);
}

[CRepr]struct IMSVidStreamBufferSourceEvent : IMSVidFilePlaybackEvent
{
	public new const Guid IID = .(0x50ce8a7d, 0x9c28, 0x4da8, 0x90, 0x42, 0xcd, 0xfa, 0x71, 0x16, 0xf9, 0x79);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IMSVidFilePlaybackEvent.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self) CertificateFailure;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self) CertificateSuccess;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self) RatingsBlocked;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self) RatingsUnblocked;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self) RatingsChanged;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 StreamOffsetMS, int32 SizeMS) TimeHole;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self) StaleDataRead;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self) ContentBecomingStale;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self) StaleFileDeleted;
	}


	public HRESULT CertificateFailure() mut => VT.[Friend]CertificateFailure(&this);

	public HRESULT CertificateSuccess() mut => VT.[Friend]CertificateSuccess(&this);

	public HRESULT RatingsBlocked() mut => VT.[Friend]RatingsBlocked(&this);

	public HRESULT RatingsUnblocked() mut => VT.[Friend]RatingsUnblocked(&this);

	public HRESULT RatingsChanged() mut => VT.[Friend]RatingsChanged(&this);

	public HRESULT TimeHole(int32 StreamOffsetMS, int32 SizeMS) mut => VT.[Friend]TimeHole(&this, StreamOffsetMS, SizeMS);

	public HRESULT StaleDataRead() mut => VT.[Friend]StaleDataRead(&this);

	public HRESULT ContentBecomingStale() mut => VT.[Friend]ContentBecomingStale(&this);

	public HRESULT StaleFileDeleted() mut => VT.[Friend]StaleFileDeleted(&this);
}

[CRepr]struct IMSVidStreamBufferSourceEvent2 : IMSVidStreamBufferSourceEvent
{
	public new const Guid IID = .(0x7aef50ce, 0x8e22, 0x4ba8, 0xbc, 0x06, 0xa9, 0x2a, 0x45, 0x8b, 0x4e, 0xf2);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IMSVidStreamBufferSourceEvent.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, double qwNewRate, double qwOldRate) RateChange;
	}


	public HRESULT RateChange(double qwNewRate, double qwOldRate) mut => VT.[Friend]RateChange(&this, qwNewRate, qwOldRate);
}

[CRepr]struct IMSVidStreamBufferSourceEvent3 : IMSVidStreamBufferSourceEvent2
{
	public new const Guid IID = .(0xceabd6ab, 0x9b90, 0x4570, 0xad, 0xf1, 0x3c, 0xe7, 0x6e, 0x00, 0xa7, 0x63);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IMSVidStreamBufferSourceEvent2.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR Guid) BroadcastEvent;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR Guid, uint32 Param1, uint32 Param2, uint32 Param3, uint32 Param4) BroadcastEventEx;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self) COPPBlocked;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self) COPPUnblocked;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self) ContentPrimarilyAudio;
	}


	public HRESULT BroadcastEvent(BSTR Guid) mut => VT.[Friend]BroadcastEvent(&this, Guid);

	public HRESULT BroadcastEventEx(BSTR Guid, uint32 Param1, uint32 Param2, uint32 Param3, uint32 Param4) mut => VT.[Friend]BroadcastEventEx(&this, Guid, Param1, Param2, Param3, Param4);

	public HRESULT COPPBlocked() mut => VT.[Friend]COPPBlocked(&this);

	public HRESULT COPPUnblocked() mut => VT.[Friend]COPPUnblocked(&this);

	public HRESULT ContentPrimarilyAudio() mut => VT.[Friend]ContentPrimarilyAudio(&this);
}

[CRepr]struct IMSVidStreamBufferV2SourceEvent : IMSVidFilePlaybackEvent
{
	public new const Guid IID = .(0x49c771f9, 0x41b2, 0x4cf7, 0x9f, 0x9a, 0xa3, 0x13, 0xa8, 0xf6, 0x02, 0x7e);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IMSVidFilePlaybackEvent.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self) RatingsChanged;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 StreamOffsetMS, int32 SizeMS) TimeHole;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self) StaleDataRead;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self) ContentBecomingStale;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self) StaleFileDeleted;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, double qwNewRate, double qwOldRate) RateChange;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR Guid) BroadcastEvent;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR Guid, uint32 Param1, uint32 Param2, uint32 Param3, uint32 Param4) BroadcastEventEx;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self) ContentPrimarilyAudio;
	}


	public HRESULT RatingsChanged() mut => VT.[Friend]RatingsChanged(&this);

	public HRESULT TimeHole(int32 StreamOffsetMS, int32 SizeMS) mut => VT.[Friend]TimeHole(&this, StreamOffsetMS, SizeMS);

	public HRESULT StaleDataRead() mut => VT.[Friend]StaleDataRead(&this);

	public HRESULT ContentBecomingStale() mut => VT.[Friend]ContentBecomingStale(&this);

	public HRESULT StaleFileDeleted() mut => VT.[Friend]StaleFileDeleted(&this);

	public HRESULT RateChange(double qwNewRate, double qwOldRate) mut => VT.[Friend]RateChange(&this, qwNewRate, qwOldRate);

	public HRESULT BroadcastEvent(BSTR Guid) mut => VT.[Friend]BroadcastEvent(&this, Guid);

	public HRESULT BroadcastEventEx(BSTR Guid, uint32 Param1, uint32 Param2, uint32 Param3, uint32 Param4) mut => VT.[Friend]BroadcastEventEx(&this, Guid, Param1, Param2, Param3, Param4);

	public HRESULT ContentPrimarilyAudio() mut => VT.[Friend]ContentPrimarilyAudio(&this);
}

[CRepr]struct IMSVidVideoRenderer2 : IMSVidVideoRenderer
{
	public new const Guid IID = .(0x6bdd5c1e, 0x2810, 0x4159, 0x94, 0xbc, 0x05, 0x51, 0x1a, 0xe8, 0x54, 0x9b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IMSVidVideoRenderer.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IUnknown** AllocPresent) get_Allocator;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IVMRSurfaceAllocator** AllocPresent) get__Allocator;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* ID) get_Allocator_ID;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IUnknown* AllocPresent, int32 ID) SetAllocator;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IVMRSurfaceAllocator* AllocPresent, int32 ID) _SetAllocator2;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16 bSuppress) put_SuppressEffects;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16* bSuppress) get_SuppressEffects;
	}


	public HRESULT get_Allocator(IUnknown** AllocPresent) mut => VT.[Friend]get_Allocator(&this, AllocPresent);

	public HRESULT get__Allocator(IVMRSurfaceAllocator** AllocPresent) mut => VT.[Friend]get__Allocator(&this, AllocPresent);

	public HRESULT get_Allocator_ID(int32* ID) mut => VT.[Friend]get_Allocator_ID(&this, ID);

	public HRESULT SetAllocator(IUnknown* AllocPresent, int32 ID) mut => VT.[Friend]SetAllocator(&this, AllocPresent, ID);

	public HRESULT _SetAllocator2(IVMRSurfaceAllocator* AllocPresent, int32 ID) mut => VT.[Friend]_SetAllocator2(&this, AllocPresent, ID);

	public HRESULT put_SuppressEffects(int16 bSuppress) mut => VT.[Friend]put_SuppressEffects(&this, bSuppress);

	public HRESULT get_SuppressEffects(int16* bSuppress) mut => VT.[Friend]get_SuppressEffects(&this, bSuppress);
}

[CRepr]struct IMSVidVideoRendererEvent2 : IMSVidOutputDeviceEvent
{
	public new const Guid IID = .(0x7145ed66, 0x4730, 0x4fdb, 0x8a, 0x53, 0xfd, 0xe7, 0x50, 0x8d, 0x3e, 0x5e);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IMSVidOutputDeviceEvent.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self) OverlayUnavailable;
	}


	public HRESULT OverlayUnavailable() mut => VT.[Friend]OverlayUnavailable(&this);
}

[CRepr]struct IMSVidVMR9 : IMSVidVideoRenderer
{
	public new const Guid IID = .(0xd58b0015, 0xebef, 0x44bb, 0xbb, 0xdd, 0x3f, 0x36, 0x99, 0xd7, 0x6e, 0xa1);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IMSVidVideoRenderer.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* ID) get_Allocator_ID;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IUnknown* AllocPresent, int32 ID) SetAllocator;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16 bSuppress) put_SuppressEffects;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16* bSuppress) get_SuppressEffects;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IUnknown** AllocPresent) get_Allocator;
	}


	public HRESULT get_Allocator_ID(int32* ID) mut => VT.[Friend]get_Allocator_ID(&this, ID);

	public HRESULT SetAllocator(IUnknown* AllocPresent, int32 ID) mut => VT.[Friend]SetAllocator(&this, AllocPresent, ID);

	public HRESULT put_SuppressEffects(int16 bSuppress) mut => VT.[Friend]put_SuppressEffects(&this, bSuppress);

	public HRESULT get_SuppressEffects(int16* bSuppress) mut => VT.[Friend]get_SuppressEffects(&this, bSuppress);

	public HRESULT get_Allocator(IUnknown** AllocPresent) mut => VT.[Friend]get_Allocator(&this, AllocPresent);
}

[CRepr]struct IMSVidEVR : IMSVidVideoRenderer
{
	public new const Guid IID = .(0x15e496ae, 0x82a8, 0x4cf9, 0xa6, 0xb6, 0xc5, 0x61, 0xdc, 0x60, 0x39, 0x8f);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IMSVidVideoRenderer.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IMFVideoPresenter** ppAllocPresent) get_Presenter;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IMFVideoPresenter* pAllocPresent) put_Presenter;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16 bSuppress) put_SuppressEffects;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16* bSuppress) get_SuppressEffects;
	}


	public HRESULT get_Presenter(IMFVideoPresenter** ppAllocPresent) mut => VT.[Friend]get_Presenter(&this, ppAllocPresent);

	public HRESULT put_Presenter(IMFVideoPresenter* pAllocPresent) mut => VT.[Friend]put_Presenter(&this, pAllocPresent);

	public HRESULT put_SuppressEffects(int16 bSuppress) mut => VT.[Friend]put_SuppressEffects(&this, bSuppress);

	public HRESULT get_SuppressEffects(int16* bSuppress) mut => VT.[Friend]get_SuppressEffects(&this, bSuppress);
}

[CRepr]struct IMSVidEVREvent : IMSVidOutputDeviceEvent
{
	public new const Guid IID = .(0x349abb10, 0x883c, 0x4f22, 0x87, 0x14, 0xce, 0xca, 0xee, 0xe4, 0x5d, 0x62);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IMSVidOutputDeviceEvent.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 lEventCode) OnUserEvent;
	}


	public HRESULT OnUserEvent(int32 lEventCode) mut => VT.[Friend]OnUserEvent(&this, lEventCode);
}

[CRepr]struct IMSVidAudioRenderer : IMSVidOutputDevice
{
	public new const Guid IID = .(0x37b0353f, 0xa4c8, 0x11d2, 0xb6, 0x34, 0x00, 0xc0, 0x4f, 0x79, 0x49, 0x8e);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IMSVidOutputDevice.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 lVol) put_Volume;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* lVol) get_Volume;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 lBal) put_Balance;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* lBal) get_Balance;
	}


	public HRESULT put_Volume(int32 lVol) mut => VT.[Friend]put_Volume(&this, lVol);

	public HRESULT get_Volume(int32* lVol) mut => VT.[Friend]get_Volume(&this, lVol);

	public HRESULT put_Balance(int32 lBal) mut => VT.[Friend]put_Balance(&this, lBal);

	public HRESULT get_Balance(int32* lBal) mut => VT.[Friend]get_Balance(&this, lBal);
}

[CRepr]struct IMSVidAudioRendererEvent : IMSVidOutputDeviceEvent
{
	public new const Guid IID = .(0x37b03541, 0xa4c8, 0x11d2, 0xb6, 0x34, 0x00, 0xc0, 0x4f, 0x79, 0x49, 0x8e);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IMSVidOutputDeviceEvent.VTable
	{
	}

}

[CRepr]struct IMSVidAudioRendererEvent2 : IMSVidAudioRendererEvent
{
	public new const Guid IID = .(0xe3f55729, 0x353b, 0x4c43, 0xa0, 0x28, 0x50, 0xf7, 0x9a, 0xa9, 0xa9, 0x07);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IMSVidAudioRendererEvent.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self) AVDecAudioDualMono;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self) AVAudioSampleRate;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self) AVAudioChannelConfig;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self) AVAudioChannelCount;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self) AVDecCommonMeanBitRate;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self) AVDDSurroundMode;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self) AVDecCommonInputFormat;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self) AVDecCommonOutputFormat;
	}


	public HRESULT AVDecAudioDualMono() mut => VT.[Friend]AVDecAudioDualMono(&this);

	public HRESULT AVAudioSampleRate() mut => VT.[Friend]AVAudioSampleRate(&this);

	public HRESULT AVAudioChannelConfig() mut => VT.[Friend]AVAudioChannelConfig(&this);

	public HRESULT AVAudioChannelCount() mut => VT.[Friend]AVAudioChannelCount(&this);

	public HRESULT AVDecCommonMeanBitRate() mut => VT.[Friend]AVDecCommonMeanBitRate(&this);

	public HRESULT AVDDSurroundMode() mut => VT.[Friend]AVDDSurroundMode(&this);

	public HRESULT AVDecCommonInputFormat() mut => VT.[Friend]AVDecCommonInputFormat(&this);

	public HRESULT AVDecCommonOutputFormat() mut => VT.[Friend]AVDecCommonOutputFormat(&this);
}

[CRepr]struct IMSVidInputDevices : IDispatch
{
	public new const Guid IID = .(0xc5702cd1, 0x9b79, 0x11d3, 0xb6, 0x54, 0x00, 0xc0, 0x4f, 0x79, 0x49, 0x8e);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* lCount) get_Count;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IEnumVARIANT** pD) get__NewEnum;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v, IMSVidInputDevice** pDB) get_Item;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IMSVidInputDevice* pDB) Add;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) Remove;
	}


	public HRESULT get_Count(int32* lCount) mut => VT.[Friend]get_Count(&this, lCount);

	public HRESULT get__NewEnum(IEnumVARIANT** pD) mut => VT.[Friend]get__NewEnum(&this, pD);

	public HRESULT get_Item(VARIANT v, IMSVidInputDevice** pDB) mut => VT.[Friend]get_Item(&this, v, pDB);

	public HRESULT Add(IMSVidInputDevice* pDB) mut => VT.[Friend]Add(&this, pDB);

	public HRESULT Remove(VARIANT v) mut => VT.[Friend]Remove(&this, v);
}

[CRepr]struct IMSVidOutputDevices : IDispatch
{
	public new const Guid IID = .(0xc5702cd2, 0x9b79, 0x11d3, 0xb6, 0x54, 0x00, 0xc0, 0x4f, 0x79, 0x49, 0x8e);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* lCount) get_Count;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IEnumVARIANT** pD) get__NewEnum;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v, IMSVidOutputDevice** pDB) get_Item;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IMSVidOutputDevice* pDB) Add;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) Remove;
	}


	public HRESULT get_Count(int32* lCount) mut => VT.[Friend]get_Count(&this, lCount);

	public HRESULT get__NewEnum(IEnumVARIANT** pD) mut => VT.[Friend]get__NewEnum(&this, pD);

	public HRESULT get_Item(VARIANT v, IMSVidOutputDevice** pDB) mut => VT.[Friend]get_Item(&this, v, pDB);

	public HRESULT Add(IMSVidOutputDevice* pDB) mut => VT.[Friend]Add(&this, pDB);

	public HRESULT Remove(VARIANT v) mut => VT.[Friend]Remove(&this, v);
}

[CRepr]struct IMSVidVideoRendererDevices : IDispatch
{
	public new const Guid IID = .(0xc5702cd3, 0x9b79, 0x11d3, 0xb6, 0x54, 0x00, 0xc0, 0x4f, 0x79, 0x49, 0x8e);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* lCount) get_Count;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IEnumVARIANT** pD) get__NewEnum;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v, IMSVidVideoRenderer** pDB) get_Item;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IMSVidVideoRenderer* pDB) Add;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) Remove;
	}


	public HRESULT get_Count(int32* lCount) mut => VT.[Friend]get_Count(&this, lCount);

	public HRESULT get__NewEnum(IEnumVARIANT** pD) mut => VT.[Friend]get__NewEnum(&this, pD);

	public HRESULT get_Item(VARIANT v, IMSVidVideoRenderer** pDB) mut => VT.[Friend]get_Item(&this, v, pDB);

	public HRESULT Add(IMSVidVideoRenderer* pDB) mut => VT.[Friend]Add(&this, pDB);

	public HRESULT Remove(VARIANT v) mut => VT.[Friend]Remove(&this, v);
}

[CRepr]struct IMSVidAudioRendererDevices : IDispatch
{
	public new const Guid IID = .(0xc5702cd4, 0x9b79, 0x11d3, 0xb6, 0x54, 0x00, 0xc0, 0x4f, 0x79, 0x49, 0x8e);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* lCount) get_Count;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IEnumVARIANT** pD) get__NewEnum;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v, IMSVidAudioRenderer** pDB) get_Item;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IMSVidAudioRenderer* pDB) Add;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) Remove;
	}


	public HRESULT get_Count(int32* lCount) mut => VT.[Friend]get_Count(&this, lCount);

	public HRESULT get__NewEnum(IEnumVARIANT** pD) mut => VT.[Friend]get__NewEnum(&this, pD);

	public HRESULT get_Item(VARIANT v, IMSVidAudioRenderer** pDB) mut => VT.[Friend]get_Item(&this, v, pDB);

	public HRESULT Add(IMSVidAudioRenderer* pDB) mut => VT.[Friend]Add(&this, pDB);

	public HRESULT Remove(VARIANT v) mut => VT.[Friend]Remove(&this, v);
}

[CRepr]struct IMSVidFeatures : IDispatch
{
	public new const Guid IID = .(0xc5702cd5, 0x9b79, 0x11d3, 0xb6, 0x54, 0x00, 0xc0, 0x4f, 0x79, 0x49, 0x8e);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* lCount) get_Count;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IEnumVARIANT** pD) get__NewEnum;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v, IMSVidFeature** pDB) get_Item;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IMSVidFeature* pDB) Add;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) Remove;
	}


	public HRESULT get_Count(int32* lCount) mut => VT.[Friend]get_Count(&this, lCount);

	public HRESULT get__NewEnum(IEnumVARIANT** pD) mut => VT.[Friend]get__NewEnum(&this, pD);

	public HRESULT get_Item(VARIANT v, IMSVidFeature** pDB) mut => VT.[Friend]get_Item(&this, v, pDB);

	public HRESULT Add(IMSVidFeature* pDB) mut => VT.[Friend]Add(&this, pDB);

	public HRESULT Remove(VARIANT v) mut => VT.[Friend]Remove(&this, v);
}

[CRepr]struct IMSVidCtl : IDispatch
{
	public new const Guid IID = .(0xb0edf162, 0x910a, 0x11d2, 0xb6, 0x32, 0x00, 0xc0, 0x4f, 0x79, 0x49, 0x8e);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16* pbool) get_AutoSize;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16 vbool) put_AutoSize;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32* backcolor) get_BackColor;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32 backcolor) put_BackColor;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16* pbool) get_Enabled;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16 vbool) put_Enabled;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16* pbool) get_TabStop;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16 vbool) put_TabStop;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, HWND* phwnd) get_Window;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self) Refresh;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, DisplaySizeList* CurrentValue) get_DisplaySize;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, DisplaySizeList NewValue) put_DisplaySize;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16* CurrentValue) get_MaintainAspectRatio;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16 NewValue) put_MaintainAspectRatio;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32* CurrentValue) get_ColorKey;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32 NewValue) put_ColorKey;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR CategoryGuid, IMSVidInputDevices** pVal) get_InputsAvailable;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR CategoryGuid, IMSVidOutputDevices** pVal) get_OutputsAvailable;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, in Guid CategoryGuid, IMSVidInputDevices** pVal) get__InputsAvailable;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, in Guid CategoryGuid, IMSVidOutputDevices** pVal) get__OutputsAvailable;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IMSVidVideoRendererDevices** pVal) get_VideoRenderersAvailable;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IMSVidAudioRendererDevices** pVal) get_AudioRenderersAvailable;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IMSVidFeatures** pVal) get_FeaturesAvailable;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IMSVidInputDevice** pVal) get_InputActive;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IMSVidInputDevice* pVal) put_InputActive;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IMSVidOutputDevices** pVal) get_OutputsActive;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IMSVidOutputDevices* pVal) put_OutputsActive;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IMSVidVideoRenderer** pVal) get_VideoRendererActive;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IMSVidVideoRenderer* pVal) put_VideoRendererActive;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IMSVidAudioRenderer** pVal) get_AudioRendererActive;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IMSVidAudioRenderer* pVal) put_AudioRendererActive;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IMSVidFeatures** pVal) get_FeaturesActive;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IMSVidFeatures* pVal) put_FeaturesActive;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, MSVidCtlStateList* lState) get_State;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* v) View;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self) Build;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self) Pause;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self) Run;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self) Stop;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self) Decompose;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self) DisableVideo;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self) DisableAudio;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* v) ViewNext;
	}


	public HRESULT get_AutoSize(int16* pbool) mut => VT.[Friend]get_AutoSize(&this, pbool);

	public HRESULT put_AutoSize(int16 vbool) mut => VT.[Friend]put_AutoSize(&this, vbool);

	public HRESULT get_BackColor(uint32* backcolor) mut => VT.[Friend]get_BackColor(&this, backcolor);

	public HRESULT put_BackColor(uint32 backcolor) mut => VT.[Friend]put_BackColor(&this, backcolor);

	public HRESULT get_Enabled(int16* pbool) mut => VT.[Friend]get_Enabled(&this, pbool);

	public HRESULT put_Enabled(int16 vbool) mut => VT.[Friend]put_Enabled(&this, vbool);

	public HRESULT get_TabStop(int16* pbool) mut => VT.[Friend]get_TabStop(&this, pbool);

	public HRESULT put_TabStop(int16 vbool) mut => VT.[Friend]put_TabStop(&this, vbool);

	public HRESULT get_Window(HWND* phwnd) mut => VT.[Friend]get_Window(&this, phwnd);

	public HRESULT Refresh() mut => VT.[Friend]Refresh(&this);

	public HRESULT get_DisplaySize(DisplaySizeList* CurrentValue) mut => VT.[Friend]get_DisplaySize(&this, CurrentValue);

	public HRESULT put_DisplaySize(DisplaySizeList NewValue) mut => VT.[Friend]put_DisplaySize(&this, NewValue);

	public HRESULT get_MaintainAspectRatio(int16* CurrentValue) mut => VT.[Friend]get_MaintainAspectRatio(&this, CurrentValue);

	public HRESULT put_MaintainAspectRatio(int16 NewValue) mut => VT.[Friend]put_MaintainAspectRatio(&this, NewValue);

	public HRESULT get_ColorKey(uint32* CurrentValue) mut => VT.[Friend]get_ColorKey(&this, CurrentValue);

	public HRESULT put_ColorKey(uint32 NewValue) mut => VT.[Friend]put_ColorKey(&this, NewValue);

	public HRESULT get_InputsAvailable(BSTR CategoryGuid, IMSVidInputDevices** pVal) mut => VT.[Friend]get_InputsAvailable(&this, CategoryGuid, pVal);

	public HRESULT get_OutputsAvailable(BSTR CategoryGuid, IMSVidOutputDevices** pVal) mut => VT.[Friend]get_OutputsAvailable(&this, CategoryGuid, pVal);

	public HRESULT get__InputsAvailable(in Guid CategoryGuid, IMSVidInputDevices** pVal) mut => VT.[Friend]get__InputsAvailable(&this, CategoryGuid, pVal);

	public HRESULT get__OutputsAvailable(in Guid CategoryGuid, IMSVidOutputDevices** pVal) mut => VT.[Friend]get__OutputsAvailable(&this, CategoryGuid, pVal);

	public HRESULT get_VideoRenderersAvailable(IMSVidVideoRendererDevices** pVal) mut => VT.[Friend]get_VideoRenderersAvailable(&this, pVal);

	public HRESULT get_AudioRenderersAvailable(IMSVidAudioRendererDevices** pVal) mut => VT.[Friend]get_AudioRenderersAvailable(&this, pVal);

	public HRESULT get_FeaturesAvailable(IMSVidFeatures** pVal) mut => VT.[Friend]get_FeaturesAvailable(&this, pVal);

	public HRESULT get_InputActive(IMSVidInputDevice** pVal) mut => VT.[Friend]get_InputActive(&this, pVal);

	public HRESULT put_InputActive(IMSVidInputDevice* pVal) mut => VT.[Friend]put_InputActive(&this, pVal);

	public HRESULT get_OutputsActive(IMSVidOutputDevices** pVal) mut => VT.[Friend]get_OutputsActive(&this, pVal);

	public HRESULT put_OutputsActive(IMSVidOutputDevices* pVal) mut => VT.[Friend]put_OutputsActive(&this, pVal);

	public HRESULT get_VideoRendererActive(IMSVidVideoRenderer** pVal) mut => VT.[Friend]get_VideoRendererActive(&this, pVal);

	public HRESULT put_VideoRendererActive(IMSVidVideoRenderer* pVal) mut => VT.[Friend]put_VideoRendererActive(&this, pVal);

	public HRESULT get_AudioRendererActive(IMSVidAudioRenderer** pVal) mut => VT.[Friend]get_AudioRendererActive(&this, pVal);

	public HRESULT put_AudioRendererActive(IMSVidAudioRenderer* pVal) mut => VT.[Friend]put_AudioRendererActive(&this, pVal);

	public HRESULT get_FeaturesActive(IMSVidFeatures** pVal) mut => VT.[Friend]get_FeaturesActive(&this, pVal);

	public HRESULT put_FeaturesActive(IMSVidFeatures* pVal) mut => VT.[Friend]put_FeaturesActive(&this, pVal);

	public HRESULT get_State(MSVidCtlStateList* lState) mut => VT.[Friend]get_State(&this, lState);

	public HRESULT View(VARIANT* v) mut => VT.[Friend]View(&this, v);

	public HRESULT Build() mut => VT.[Friend]Build(&this);

	public HRESULT Pause() mut => VT.[Friend]Pause(&this);

	public HRESULT Run() mut => VT.[Friend]Run(&this);

	public HRESULT Stop() mut => VT.[Friend]Stop(&this);

	public HRESULT Decompose() mut => VT.[Friend]Decompose(&this);

	public HRESULT DisableVideo() mut => VT.[Friend]DisableVideo(&this);

	public HRESULT DisableAudio() mut => VT.[Friend]DisableAudio(&this);

	public HRESULT ViewNext(VARIANT* v) mut => VT.[Friend]ViewNext(&this, v);
}

[CRepr]struct IMSEventBinder : IDispatch
{
	public new const Guid IID = .(0xc3a9f406, 0x2222, 0x436d, 0x86, 0xd5, 0xba, 0x32, 0x29, 0x27, 0x9e, 0xfb);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IDispatch* pEventObject, BSTR EventName, BSTR EventHandler, int32* CancelID) Bind;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32 CancelCookie) Unbind;
	}


	public HRESULT Bind(IDispatch* pEventObject, BSTR EventName, BSTR EventHandler, int32* CancelID) mut => VT.[Friend]Bind(&this, pEventObject, EventName, EventHandler, CancelID);

	public HRESULT Unbind(uint32 CancelCookie) mut => VT.[Friend]Unbind(&this, CancelCookie);
}

[CRepr]struct _IMSVidCtlEvents : IDispatch
{
	public new const Guid IID = .(0xb0edf164, 0x910a, 0x11d2, 0xb6, 0x32, 0x00, 0xc0, 0x4f, 0x79, 0x49, 0x8e);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
	}

}

[CRepr]struct IStreamBufferInitialize : IUnknown
{
	public new const Guid IID = .(0x9ce50f2d, 0x6ba7, 0x40fb, 0xa0, 0x34, 0x50, 0xb1, 0xa6, 0x74, 0xec, 0x78);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IUnknown.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, HKEY hkeyRoot) SetHKEY;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32 cSIDs, PSID* ppSID) SetSIDs;
	}


	public HRESULT SetHKEY(HKEY hkeyRoot) mut => VT.[Friend]SetHKEY(&this, hkeyRoot);

	public HRESULT SetSIDs(uint32 cSIDs, PSID* ppSID) mut => VT.[Friend]SetSIDs(&this, cSIDs, ppSID);
}

[CRepr]struct IStreamBufferSink : IUnknown
{
	public new const Guid IID = .(0xafd1f242, 0x7efd, 0x45ee, 0xba, 0x4e, 0x40, 0x7a, 0x25, 0xc9, 0xa7, 0x7a);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IUnknown.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, PWSTR pszStreamBufferFilename) LockProfile;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, PWSTR pszFilename, uint32 dwRecordType, IUnknown** pRecordingIUnknown) CreateRecorder;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self) IsProfileLocked;
	}


	public HRESULT LockProfile(PWSTR pszStreamBufferFilename) mut => VT.[Friend]LockProfile(&this, pszStreamBufferFilename);

	public HRESULT CreateRecorder(PWSTR pszFilename, uint32 dwRecordType, IUnknown** pRecordingIUnknown) mut => VT.[Friend]CreateRecorder(&this, pszFilename, dwRecordType, pRecordingIUnknown);

	public HRESULT IsProfileLocked() mut => VT.[Friend]IsProfileLocked(&this);
}

[CRepr]struct IStreamBufferSink2 : IStreamBufferSink
{
	public new const Guid IID = .(0xdb94a660, 0xf4fb, 0x4bfa, 0xbc, 0xc6, 0xfe, 0x15, 0x9a, 0x4e, 0xea, 0x93);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IStreamBufferSink.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self) UnlockProfile;
	}


	public HRESULT UnlockProfile() mut => VT.[Friend]UnlockProfile(&this);
}

[CRepr]struct IStreamBufferSink3 : IStreamBufferSink2
{
	public new const Guid IID = .(0x974723f2, 0x887a, 0x4452, 0x93, 0x66, 0x2c, 0xff, 0x30, 0x57, 0xbc, 0x8f);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IStreamBufferSink2.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int64* prtMin) SetAvailableFilter;
	}


	public HRESULT SetAvailableFilter(int64* prtMin) mut => VT.[Friend]SetAvailableFilter(&this, prtMin);
}

[CRepr]struct IStreamBufferSource : IUnknown
{
	public new const Guid IID = .(0x1c5bd776, 0x6ced, 0x4f44, 0x81, 0x64, 0x5e, 0xab, 0x0e, 0x98, 0xdb, 0x12);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IUnknown.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IStreamBufferSink* pIStreamBufferSink) SetStreamSink;
	}


	public HRESULT SetStreamSink(IStreamBufferSink* pIStreamBufferSink) mut => VT.[Friend]SetStreamSink(&this, pIStreamBufferSink);
}

[CRepr]struct IStreamBufferRecordControl : IUnknown
{
	public new const Guid IID = .(0xba9b6c99, 0xf3c7, 0x4ff2, 0x92, 0xdb, 0xcf, 0xdd, 0x48, 0x51, 0xbf, 0x31);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IUnknown.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int64* prtStart) Start;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int64 rtStop) Stop;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, HRESULT* phResult, BOOL* pbStarted, BOOL* pbStopped) GetRecordingStatus;
	}


	public HRESULT Start(int64* prtStart) mut => VT.[Friend]Start(&this, prtStart);

	public HRESULT Stop(int64 rtStop) mut => VT.[Friend]Stop(&this, rtStop);

	public HRESULT GetRecordingStatus(HRESULT* phResult, BOOL* pbStarted, BOOL* pbStopped) mut => VT.[Friend]GetRecordingStatus(&this, phResult, pbStarted, pbStopped);
}

[CRepr]struct IStreamBufferRecComp : IUnknown
{
	public new const Guid IID = .(0x9e259a9b, 0x8815, 0x42ae, 0xb0, 0x9f, 0x22, 0x19, 0x70, 0xb1, 0x54, 0xfd);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IUnknown.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, PWSTR pszTargetFilename, PWSTR pszSBRecProfileRef) Initialize;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, PWSTR pszSBRecording) Append;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, PWSTR pszSBRecording, int64 rtStart, int64 rtStop) AppendEx;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32* pcSeconds) GetCurrentLength;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self) Close;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self) Cancel;
	}


	public HRESULT Initialize(PWSTR pszTargetFilename, PWSTR pszSBRecProfileRef) mut => VT.[Friend]Initialize(&this, pszTargetFilename, pszSBRecProfileRef);

	public HRESULT Append(PWSTR pszSBRecording) mut => VT.[Friend]Append(&this, pszSBRecording);

	public HRESULT AppendEx(PWSTR pszSBRecording, int64 rtStart, int64 rtStop) mut => VT.[Friend]AppendEx(&this, pszSBRecording, rtStart, rtStop);

	public HRESULT GetCurrentLength(uint32* pcSeconds) mut => VT.[Friend]GetCurrentLength(&this, pcSeconds);

	public HRESULT Close() mut => VT.[Friend]Close(&this);

	public HRESULT Cancel() mut => VT.[Friend]Cancel(&this);
}

[CRepr]struct IStreamBufferRecordingAttribute : IUnknown
{
	public new const Guid IID = .(0x16ca4e03, 0xfe69, 0x4705, 0xbd, 0x41, 0x5b, 0x7d, 0xfc, 0x0c, 0x95, 0xf3);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IUnknown.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32 ulReserved, PWSTR pszAttributeName, STREAMBUFFER_ATTR_DATATYPE StreamBufferAttributeType, uint8* pbAttribute, uint16 cbAttributeLength) SetAttribute;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32 ulReserved, uint16* pcAttributes) GetAttributeCount;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, PWSTR pszAttributeName, uint32* pulReserved, STREAMBUFFER_ATTR_DATATYPE* pStreamBufferAttributeType, uint8* pbAttribute, uint16* pcbLength) GetAttributeByName;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint16 wIndex, uint32* pulReserved, PWSTR pszAttributeName, uint16* pcchNameLength, STREAMBUFFER_ATTR_DATATYPE* pStreamBufferAttributeType, uint8* pbAttribute, uint16* pcbLength) GetAttributeByIndex;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IEnumStreamBufferRecordingAttrib** ppIEnumStreamBufferAttrib) EnumAttributes;
	}


	public HRESULT SetAttribute(uint32 ulReserved, PWSTR pszAttributeName, STREAMBUFFER_ATTR_DATATYPE StreamBufferAttributeType, uint8* pbAttribute, uint16 cbAttributeLength) mut => VT.[Friend]SetAttribute(&this, ulReserved, pszAttributeName, StreamBufferAttributeType, pbAttribute, cbAttributeLength);

	public HRESULT GetAttributeCount(uint32 ulReserved, uint16* pcAttributes) mut => VT.[Friend]GetAttributeCount(&this, ulReserved, pcAttributes);

	public HRESULT GetAttributeByName(PWSTR pszAttributeName, uint32* pulReserved, STREAMBUFFER_ATTR_DATATYPE* pStreamBufferAttributeType, uint8* pbAttribute, uint16* pcbLength) mut => VT.[Friend]GetAttributeByName(&this, pszAttributeName, pulReserved, pStreamBufferAttributeType, pbAttribute, pcbLength);

	public HRESULT GetAttributeByIndex(uint16 wIndex, uint32* pulReserved, PWSTR pszAttributeName, uint16* pcchNameLength, STREAMBUFFER_ATTR_DATATYPE* pStreamBufferAttributeType, uint8* pbAttribute, uint16* pcbLength) mut => VT.[Friend]GetAttributeByIndex(&this, wIndex, pulReserved, pszAttributeName, pcchNameLength, pStreamBufferAttributeType, pbAttribute, pcbLength);

	public HRESULT EnumAttributes(IEnumStreamBufferRecordingAttrib** ppIEnumStreamBufferAttrib) mut => VT.[Friend]EnumAttributes(&this, ppIEnumStreamBufferAttrib);
}

[CRepr]struct IEnumStreamBufferRecordingAttrib : IUnknown
{
	public new const Guid IID = .(0xc18a9162, 0x1e82, 0x4142, 0x8c, 0x73, 0x56, 0x90, 0xfa, 0x62, 0xfe, 0x33);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IUnknown.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32 cRequest, STREAMBUFFER_ATTRIBUTE* pStreamBufferAttribute, uint32* pcReceived) Next;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32 cRecords) Skip;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self) Reset;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IEnumStreamBufferRecordingAttrib** ppIEnumStreamBufferAttrib) Clone;
	}


	public HRESULT Next(uint32 cRequest, STREAMBUFFER_ATTRIBUTE* pStreamBufferAttribute, uint32* pcReceived) mut => VT.[Friend]Next(&this, cRequest, pStreamBufferAttribute, pcReceived);

	public HRESULT Skip(uint32 cRecords) mut => VT.[Friend]Skip(&this, cRecords);

	public HRESULT Reset() mut => VT.[Friend]Reset(&this);

	public HRESULT Clone(IEnumStreamBufferRecordingAttrib** ppIEnumStreamBufferAttrib) mut => VT.[Friend]Clone(&this, ppIEnumStreamBufferAttrib);
}

[CRepr]struct IStreamBufferConfigure : IUnknown
{
	public new const Guid IID = .(0xce14dfae, 0x4098, 0x4af7, 0xbb, 0xf7, 0xd6, 0x51, 0x1f, 0x83, 0x54, 0x14);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IUnknown.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, PWSTR pszDirectoryName) SetDirectory;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, PWSTR* ppszDirectoryName) GetDirectory;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32 dwMin, uint32 dwMax) SetBackingFileCount;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32* pdwMin, uint32* pdwMax) GetBackingFileCount;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32 dwSeconds) SetBackingFileDuration;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32* pdwSeconds) GetBackingFileDuration;
	}


	public HRESULT SetDirectory(PWSTR pszDirectoryName) mut => VT.[Friend]SetDirectory(&this, pszDirectoryName);

	public HRESULT GetDirectory(PWSTR* ppszDirectoryName) mut => VT.[Friend]GetDirectory(&this, ppszDirectoryName);

	public HRESULT SetBackingFileCount(uint32 dwMin, uint32 dwMax) mut => VT.[Friend]SetBackingFileCount(&this, dwMin, dwMax);

	public HRESULT GetBackingFileCount(uint32* pdwMin, uint32* pdwMax) mut => VT.[Friend]GetBackingFileCount(&this, pdwMin, pdwMax);

	public HRESULT SetBackingFileDuration(uint32 dwSeconds) mut => VT.[Friend]SetBackingFileDuration(&this, dwSeconds);

	public HRESULT GetBackingFileDuration(uint32* pdwSeconds) mut => VT.[Friend]GetBackingFileDuration(&this, pdwSeconds);
}

[CRepr]struct IStreamBufferConfigure2 : IStreamBufferConfigure
{
	public new const Guid IID = .(0x53e037bf, 0x3992, 0x4282, 0xae, 0x34, 0x24, 0x87, 0xb4, 0xda, 0xe0, 0x6b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IStreamBufferConfigure.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32 cbBytesPerPacket) SetMultiplexedPacketSize;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32* pcbBytesPerPacket) GetMultiplexedPacketSize;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32 dwMaxFullFrameRate, uint32 dwMaxNonSkippingRate) SetFFTransitionRates;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32* pdwMaxFullFrameRate, uint32* pdwMaxNonSkippingRate) GetFFTransitionRates;
	}


	public HRESULT SetMultiplexedPacketSize(uint32 cbBytesPerPacket) mut => VT.[Friend]SetMultiplexedPacketSize(&this, cbBytesPerPacket);

	public HRESULT GetMultiplexedPacketSize(uint32* pcbBytesPerPacket) mut => VT.[Friend]GetMultiplexedPacketSize(&this, pcbBytesPerPacket);

	public HRESULT SetFFTransitionRates(uint32 dwMaxFullFrameRate, uint32 dwMaxNonSkippingRate) mut => VT.[Friend]SetFFTransitionRates(&this, dwMaxFullFrameRate, dwMaxNonSkippingRate);

	public HRESULT GetFFTransitionRates(uint32* pdwMaxFullFrameRate, uint32* pdwMaxNonSkippingRate) mut => VT.[Friend]GetFFTransitionRates(&this, pdwMaxFullFrameRate, pdwMaxNonSkippingRate);
}

[CRepr]struct IStreamBufferConfigure3 : IStreamBufferConfigure2
{
	public new const Guid IID = .(0x7e2d2a1e, 0x7192, 0x4bd7, 0x80, 0xc1, 0x06, 0x1f, 0xd1, 0xd1, 0x04, 0x02);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IStreamBufferConfigure2.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BOOL fStartStopsCur) SetStartRecConfig;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BOOL* pfStartStopsCur) GetStartRecConfig;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, PWSTR pszNamespace) SetNamespace;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, PWSTR* ppszNamespace) GetNamespace;
	}


	public HRESULT SetStartRecConfig(BOOL fStartStopsCur) mut => VT.[Friend]SetStartRecConfig(&this, fStartStopsCur);

	public HRESULT GetStartRecConfig(BOOL* pfStartStopsCur) mut => VT.[Friend]GetStartRecConfig(&this, pfStartStopsCur);

	public HRESULT SetNamespace(PWSTR pszNamespace) mut => VT.[Friend]SetNamespace(&this, pszNamespace);

	public HRESULT GetNamespace(PWSTR* ppszNamespace) mut => VT.[Friend]GetNamespace(&this, ppszNamespace);
}

[CRepr]struct IStreamBufferMediaSeeking : IMediaSeeking
{
	public new const Guid IID = .(0xf61f5c26, 0x863d, 0x4afa, 0xb0, 0xba, 0x2f, 0x81, 0xdc, 0x97, 0x85, 0x96);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IMediaSeeking.VTable
	{
	}

}

[CRepr]struct IStreamBufferMediaSeeking2 : IStreamBufferMediaSeeking
{
	public new const Guid IID = .(0x3a439ab0, 0x155f, 0x470a, 0x86, 0xa6, 0x9e, 0xa5, 0x4a, 0xfd, 0x6e, 0xaf);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IStreamBufferMediaSeeking.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, double dRate, uint32 dwFramesPerSec) SetRateEx;
	}


	public HRESULT SetRateEx(double dRate, uint32 dwFramesPerSec) mut => VT.[Friend]SetRateEx(&this, dRate, dwFramesPerSec);
}

[CRepr]struct IStreamBufferDataCounters : IUnknown
{
	public new const Guid IID = .(0x9d2a2563, 0x31ab, 0x402e, 0x9a, 0x6b, 0xad, 0xb9, 0x03, 0x48, 0x94, 0x40);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IUnknown.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, SBE_PIN_DATA* pPinData) GetData;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self) ResetData;
	}


	public HRESULT GetData(SBE_PIN_DATA* pPinData) mut => VT.[Friend]GetData(&this, pPinData);

	public HRESULT ResetData() mut => VT.[Friend]ResetData(&this);
}

[CRepr]struct ISBE2GlobalEvent : IUnknown
{
	public new const Guid IID = .(0xcaede759, 0xb6b1, 0x11db, 0xa5, 0x78, 0x00, 0x18, 0xf3, 0xfa, 0x24, 0xc6);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IUnknown.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, in Guid idEvt, uint32 param1, uint32 param2, uint32 param3, uint32 param4, BOOL* pSpanning, uint32* pcb, uint8* pb) GetEvent;
	}


	public HRESULT GetEvent(in Guid idEvt, uint32 param1, uint32 param2, uint32 param3, uint32 param4, BOOL* pSpanning, uint32* pcb, uint8* pb) mut => VT.[Friend]GetEvent(&this, idEvt, param1, param2, param3, param4, pSpanning, pcb, pb);
}

[CRepr]struct ISBE2GlobalEvent2 : ISBE2GlobalEvent
{
	public new const Guid IID = .(0x6d8309bf, 0x00fe, 0x4506, 0x8b, 0x03, 0xf8, 0xc6, 0x5b, 0x5c, 0x9b, 0x39);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : ISBE2GlobalEvent.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, in Guid idEvt, uint32 param1, uint32 param2, uint32 param3, uint32 param4, BOOL* pSpanning, uint32* pcb, uint8* pb, int64* pStreamTime) GetEventEx;
	}


	public HRESULT GetEventEx(in Guid idEvt, uint32 param1, uint32 param2, uint32 param3, uint32 param4, BOOL* pSpanning, uint32* pcb, uint8* pb, int64* pStreamTime) mut => VT.[Friend]GetEventEx(&this, idEvt, param1, param2, param3, param4, pSpanning, pcb, pb, pStreamTime);
}

[CRepr]struct ISBE2SpanningEvent : IUnknown
{
	public new const Guid IID = .(0xcaede760, 0xb6b1, 0x11db, 0xa5, 0x78, 0x00, 0x18, 0xf3, 0xfa, 0x24, 0xc6);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IUnknown.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, in Guid idEvt, uint32 streamId, uint32* pcb, uint8* pb) GetEvent;
	}


	public HRESULT GetEvent(in Guid idEvt, uint32 streamId, uint32* pcb, uint8* pb) mut => VT.[Friend]GetEvent(&this, idEvt, streamId, pcb, pb);
}

[CRepr]struct ISBE2Crossbar : IUnknown
{
	public new const Guid IID = .(0x547b6d26, 0x3226, 0x487e, 0x82, 0x53, 0x8a, 0xa1, 0x68, 0x74, 0x94, 0x34);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IUnknown.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32 DefaultFlags) EnableDefaultMode;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, ISBE2MediaTypeProfile** ppProfile) GetInitialProfile;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, ISBE2MediaTypeProfile* pProfile, uint32* pcOutputPins, IPin** ppOutputPins) SetOutputProfile;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, ISBE2EnumStream** ppStreams) EnumStreams;
	}


	public HRESULT EnableDefaultMode(uint32 DefaultFlags) mut => VT.[Friend]EnableDefaultMode(&this, DefaultFlags);

	public HRESULT GetInitialProfile(ISBE2MediaTypeProfile** ppProfile) mut => VT.[Friend]GetInitialProfile(&this, ppProfile);

	public HRESULT SetOutputProfile(ISBE2MediaTypeProfile* pProfile, uint32* pcOutputPins, IPin** ppOutputPins) mut => VT.[Friend]SetOutputProfile(&this, pProfile, pcOutputPins, ppOutputPins);

	public HRESULT EnumStreams(ISBE2EnumStream** ppStreams) mut => VT.[Friend]EnumStreams(&this, ppStreams);
}

[CRepr]struct ISBE2StreamMap : IUnknown
{
	public new const Guid IID = .(0x667c7745, 0x85b1, 0x4c55, 0xae, 0x55, 0x4e, 0x25, 0x05, 0x61, 0x59, 0xfc);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IUnknown.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32 Stream) MapStream;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32 Stream) UnmapStream;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, ISBE2EnumStream** ppStreams) EnumMappedStreams;
	}


	public HRESULT MapStream(uint32 Stream) mut => VT.[Friend]MapStream(&this, Stream);

	public HRESULT UnmapStream(uint32 Stream) mut => VT.[Friend]UnmapStream(&this, Stream);

	public HRESULT EnumMappedStreams(ISBE2EnumStream** ppStreams) mut => VT.[Friend]EnumMappedStreams(&this, ppStreams);
}

[CRepr]struct ISBE2EnumStream : IUnknown
{
	public new const Guid IID = .(0xf7611092, 0x9fbc, 0x46ec, 0xa7, 0xc7, 0x54, 0x8e, 0xa7, 0x8b, 0x71, 0xa4);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IUnknown.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32 cRequest, SBE2_STREAM_DESC* pStreamDesc, uint32* pcReceived) Next;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32 cRecords) Skip;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self) Reset;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, ISBE2EnumStream** ppIEnumStream) Clone;
	}


	public HRESULT Next(uint32 cRequest, SBE2_STREAM_DESC* pStreamDesc, uint32* pcReceived) mut => VT.[Friend]Next(&this, cRequest, pStreamDesc, pcReceived);

	public HRESULT Skip(uint32 cRecords) mut => VT.[Friend]Skip(&this, cRecords);

	public HRESULT Reset() mut => VT.[Friend]Reset(&this);

	public HRESULT Clone(ISBE2EnumStream** ppIEnumStream) mut => VT.[Friend]Clone(&this, ppIEnumStream);
}

[CRepr]struct ISBE2MediaTypeProfile : IUnknown
{
	public new const Guid IID = .(0xf238267d, 0x4671, 0x40d7, 0x99, 0x7e, 0x25, 0xdc, 0x32, 0xcf, 0xed, 0x2a);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IUnknown.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32* pCount) GetStreamCount;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32 Index, AM_MEDIA_TYPE** ppMediaType) GetStream;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, AM_MEDIA_TYPE* pMediaType) AddStream;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32 Index) DeleteStream;
	}


	public HRESULT GetStreamCount(uint32* pCount) mut => VT.[Friend]GetStreamCount(&this, pCount);

	public HRESULT GetStream(uint32 Index, AM_MEDIA_TYPE** ppMediaType) mut => VT.[Friend]GetStream(&this, Index, ppMediaType);

	public HRESULT AddStream(AM_MEDIA_TYPE* pMediaType) mut => VT.[Friend]AddStream(&this, pMediaType);

	public HRESULT DeleteStream(uint32 Index) mut => VT.[Friend]DeleteStream(&this, Index);
}

[CRepr]struct ISBE2FileScan : IUnknown
{
	public new const Guid IID = .(0x3e2bf5a5, 0x4f96, 0x4899, 0xa1, 0xa3, 0x75, 0xe8, 0xbe, 0x9a, 0x5a, 0xc0);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IUnknown.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, PWSTR filename) RepairFile;
	}


	public HRESULT RepairFile(PWSTR filename) mut => VT.[Friend]RepairFile(&this, filename);
}

[CRepr]struct IMpeg2TableFilter : IUnknown
{
	public new const Guid IID = .(0xbdcdd913, 0x9ecd, 0x4fb2, 0x81, 0xae, 0xad, 0xf7, 0x47, 0xea, 0x75, 0xa5);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IUnknown.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint16 p) AddPID;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint16 p, uint8 t) AddTable;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint16 p, uint8 t, uint16 e) AddExtension;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint16 p) RemovePID;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint16 p, uint8 t) RemoveTable;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint16 p, uint8 t, uint16 e) RemoveExtension;
	}


	public HRESULT AddPID(uint16 p) mut => VT.[Friend]AddPID(&this, p);

	public HRESULT AddTable(uint16 p, uint8 t) mut => VT.[Friend]AddTable(&this, p, t);

	public HRESULT AddExtension(uint16 p, uint8 t, uint16 e) mut => VT.[Friend]AddExtension(&this, p, t, e);

	public HRESULT RemovePID(uint16 p) mut => VT.[Friend]RemovePID(&this, p);

	public HRESULT RemoveTable(uint16 p, uint8 t) mut => VT.[Friend]RemoveTable(&this, p, t);

	public HRESULT RemoveExtension(uint16 p, uint8 t, uint16 e) mut => VT.[Friend]RemoveExtension(&this, p, t, e);
}

[CRepr]struct IMpeg2Data : IUnknown
{
	public new const Guid IID = .(0x9b396d40, 0xf380, 0x4e3c, 0xa5, 0x14, 0x1a, 0x82, 0xbf, 0x6e, 0xbf, 0xe6);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IUnknown.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint16 pid, uint8 tid, MPEG2_FILTER* pFilter, uint32 dwTimeout, ISectionList** ppSectionList) GetSection;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint16 pid, uint8 tid, MPEG2_FILTER* pFilter, uint32 dwTimeout, ISectionList** ppSectionList) GetTable;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint16 pid, uint8 tid, MPEG2_FILTER* pFilter, HANDLE hDataReadyEvent, IMpeg2Stream** ppMpegStream) GetStreamOfSections;
	}


	public HRESULT GetSection(uint16 pid, uint8 tid, MPEG2_FILTER* pFilter, uint32 dwTimeout, ISectionList** ppSectionList) mut => VT.[Friend]GetSection(&this, pid, tid, pFilter, dwTimeout, ppSectionList);

	public HRESULT GetTable(uint16 pid, uint8 tid, MPEG2_FILTER* pFilter, uint32 dwTimeout, ISectionList** ppSectionList) mut => VT.[Friend]GetTable(&this, pid, tid, pFilter, dwTimeout, ppSectionList);

	public HRESULT GetStreamOfSections(uint16 pid, uint8 tid, MPEG2_FILTER* pFilter, HANDLE hDataReadyEvent, IMpeg2Stream** ppMpegStream) mut => VT.[Friend]GetStreamOfSections(&this, pid, tid, pFilter, hDataReadyEvent, ppMpegStream);
}

[CRepr]struct ISectionList : IUnknown
{
	public new const Guid IID = .(0xafec1eb5, 0x2a64, 0x46c6, 0xbf, 0x4b, 0xae, 0x3c, 0xcb, 0x6a, 0xfd, 0xb0);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IUnknown.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, MPEG_REQUEST_TYPE requestType, IMpeg2Data* pMpeg2Data, MPEG_CONTEXT* pContext, uint16 pid, uint8 tid, MPEG2_FILTER* pFilter, uint32 timeout, HANDLE hDoneEvent) Initialize;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, MPEG_PACKET_LIST* pmplSections) InitializeWithRawSections;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self) CancelPendingRequest;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint16* pCount) GetNumberOfSections;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint16 sectionNumber, uint32* pdwRawPacketLength, SECTION** ppSection) GetSectionData;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint16* pPid) GetProgramIdentifier;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint8* pTableId) GetTableIdentifier;
	}


	public HRESULT Initialize(MPEG_REQUEST_TYPE requestType, IMpeg2Data* pMpeg2Data, MPEG_CONTEXT* pContext, uint16 pid, uint8 tid, MPEG2_FILTER* pFilter, uint32 timeout, HANDLE hDoneEvent) mut => VT.[Friend]Initialize(&this, requestType, pMpeg2Data, pContext, pid, tid, pFilter, timeout, hDoneEvent);

	public HRESULT InitializeWithRawSections(MPEG_PACKET_LIST* pmplSections) mut => VT.[Friend]InitializeWithRawSections(&this, pmplSections);

	public HRESULT CancelPendingRequest() mut => VT.[Friend]CancelPendingRequest(&this);

	public HRESULT GetNumberOfSections(uint16* pCount) mut => VT.[Friend]GetNumberOfSections(&this, pCount);

	public HRESULT GetSectionData(uint16 sectionNumber, uint32* pdwRawPacketLength, SECTION** ppSection) mut => VT.[Friend]GetSectionData(&this, sectionNumber, pdwRawPacketLength, ppSection);

	public HRESULT GetProgramIdentifier(uint16* pPid) mut => VT.[Friend]GetProgramIdentifier(&this, pPid);

	public HRESULT GetTableIdentifier(uint8* pTableId) mut => VT.[Friend]GetTableIdentifier(&this, pTableId);
}

[CRepr]struct IMpeg2Stream : IUnknown
{
	public new const Guid IID = .(0x400cc286, 0x32a0, 0x4ce4, 0x90, 0x41, 0x39, 0x57, 0x11, 0x25, 0xa6, 0x35);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IUnknown.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, MPEG_REQUEST_TYPE requestType, IMpeg2Data* pMpeg2Data, MPEG_CONTEXT* pContext, uint16 pid, uint8 tid, MPEG2_FILTER* pFilter, HANDLE hDataReadyEvent) Initialize;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, MPEG_STREAM_BUFFER* pStreamBuffer) SupplyDataBuffer;
	}


	public HRESULT Initialize(MPEG_REQUEST_TYPE requestType, IMpeg2Data* pMpeg2Data, MPEG_CONTEXT* pContext, uint16 pid, uint8 tid, MPEG2_FILTER* pFilter, HANDLE hDataReadyEvent) mut => VT.[Friend]Initialize(&this, requestType, pMpeg2Data, pContext, pid, tid, pFilter, hDataReadyEvent);

	public HRESULT SupplyDataBuffer(MPEG_STREAM_BUFFER* pStreamBuffer) mut => VT.[Friend]SupplyDataBuffer(&this, pStreamBuffer);
}

[CRepr]struct IGenericDescriptor : IUnknown
{
	public new const Guid IID = .(0x6a5918f8, 0xa77a, 0x4f61, 0xae, 0xd0, 0x57, 0x02, 0xbd, 0xcd, 0xa3, 0xe6);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IUnknown.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint8* pbDesc, int32 bCount) Initialize;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint8* pbVal) GetTag;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint8* pbVal) GetLength;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint8** ppbVal) GetBody;
	}


	public HRESULT Initialize(uint8* pbDesc, int32 bCount) mut => VT.[Friend]Initialize(&this, pbDesc, bCount);

	public HRESULT GetTag(uint8* pbVal) mut => VT.[Friend]GetTag(&this, pbVal);

	public HRESULT GetLength(uint8* pbVal) mut => VT.[Friend]GetLength(&this, pbVal);

	public HRESULT GetBody(uint8** ppbVal) mut => VT.[Friend]GetBody(&this, ppbVal);
}

[CRepr]struct IGenericDescriptor2 : IGenericDescriptor
{
	public new const Guid IID = .(0xbf02fb7e, 0x9792, 0x4e10, 0xa6, 0x8d, 0x03, 0x3a, 0x2c, 0xc2, 0x46, 0xa5);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IGenericDescriptor.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint8* pbDesc, uint16 wCount) Initialize;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint16* pwVal) GetLength;
	}


	public HRESULT Initialize(uint8* pbDesc, uint16 wCount) mut => VT.[Friend]Initialize(&this, pbDesc, wCount);

	public HRESULT GetLength(uint16* pwVal) mut => VT.[Friend]GetLength(&this, pwVal);
}

[CRepr]struct IPAT : IUnknown
{
	public new const Guid IID = .(0x6623b511, 0x4b5f, 0x43c3, 0x9a, 0x01, 0xe8, 0xff, 0x84, 0x18, 0x80, 0x60);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IUnknown.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, ISectionList* pSectionList, IMpeg2Data* pMPEGData) Initialize;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint16* pwVal) GetTransportStreamId;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint8* pbVal) GetVersionNumber;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32* pdwVal) GetCountOfRecords;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32 dwIndex, uint16* pwVal) GetRecordProgramNumber;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32 dwIndex, uint16* pwVal) GetRecordProgramMapPid;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint16 wProgramNumber, uint16* pwVal) FindRecordProgramMapPid;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, HANDLE hNextTableAvailable) RegisterForNextTable;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IPAT** ppPAT) GetNextTable;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, HANDLE hNextTableIsCurrent) RegisterForWhenCurrent;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self) ConvertNextToCurrent;
	}


	public HRESULT Initialize(ISectionList* pSectionList, IMpeg2Data* pMPEGData) mut => VT.[Friend]Initialize(&this, pSectionList, pMPEGData);

	public HRESULT GetTransportStreamId(uint16* pwVal) mut => VT.[Friend]GetTransportStreamId(&this, pwVal);

	public HRESULT GetVersionNumber(uint8* pbVal) mut => VT.[Friend]GetVersionNumber(&this, pbVal);

	public HRESULT GetCountOfRecords(uint32* pdwVal) mut => VT.[Friend]GetCountOfRecords(&this, pdwVal);

	public HRESULT GetRecordProgramNumber(uint32 dwIndex, uint16* pwVal) mut => VT.[Friend]GetRecordProgramNumber(&this, dwIndex, pwVal);

	public HRESULT GetRecordProgramMapPid(uint32 dwIndex, uint16* pwVal) mut => VT.[Friend]GetRecordProgramMapPid(&this, dwIndex, pwVal);

	public HRESULT FindRecordProgramMapPid(uint16 wProgramNumber, uint16* pwVal) mut => VT.[Friend]FindRecordProgramMapPid(&this, wProgramNumber, pwVal);

	public HRESULT RegisterForNextTable(HANDLE hNextTableAvailable) mut => VT.[Friend]RegisterForNextTable(&this, hNextTableAvailable);

	public HRESULT GetNextTable(IPAT** ppPAT) mut => VT.[Friend]GetNextTable(&this, ppPAT);

	public HRESULT RegisterForWhenCurrent(HANDLE hNextTableIsCurrent) mut => VT.[Friend]RegisterForWhenCurrent(&this, hNextTableIsCurrent);

	public HRESULT ConvertNextToCurrent() mut => VT.[Friend]ConvertNextToCurrent(&this);
}

[CRepr]struct ICAT : IUnknown
{
	public new const Guid IID = .(0x7c6995fb, 0x2a31, 0x4bd7, 0x95, 0x3e, 0xb1, 0xad, 0x7f, 0xb7, 0xd3, 0x1c);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IUnknown.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, ISectionList* pSectionList, IMpeg2Data* pMPEGData) Initialize;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint8* pbVal) GetVersionNumber;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32* pdwVal) GetCountOfTableDescriptors;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32 dwIndex, IGenericDescriptor** ppDescriptor) GetTableDescriptorByIndex;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint8 bTag, uint32* pdwCookie, IGenericDescriptor** ppDescriptor) GetTableDescriptorByTag;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, HANDLE hNextTableAvailable) RegisterForNextTable;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32 dwTimeout, ICAT** ppCAT) GetNextTable;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, HANDLE hNextTableIsCurrent) RegisterForWhenCurrent;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self) ConvertNextToCurrent;
	}


	public HRESULT Initialize(ISectionList* pSectionList, IMpeg2Data* pMPEGData) mut => VT.[Friend]Initialize(&this, pSectionList, pMPEGData);

	public HRESULT GetVersionNumber(uint8* pbVal) mut => VT.[Friend]GetVersionNumber(&this, pbVal);

	public HRESULT GetCountOfTableDescriptors(uint32* pdwVal) mut => VT.[Friend]GetCountOfTableDescriptors(&this, pdwVal);

	public HRESULT GetTableDescriptorByIndex(uint32 dwIndex, IGenericDescriptor** ppDescriptor) mut => VT.[Friend]GetTableDescriptorByIndex(&this, dwIndex, ppDescriptor);

	public HRESULT GetTableDescriptorByTag(uint8 bTag, uint32* pdwCookie, IGenericDescriptor** ppDescriptor) mut => VT.[Friend]GetTableDescriptorByTag(&this, bTag, pdwCookie, ppDescriptor);

	public HRESULT RegisterForNextTable(HANDLE hNextTableAvailable) mut => VT.[Friend]RegisterForNextTable(&this, hNextTableAvailable);

	public HRESULT GetNextTable(uint32 dwTimeout, ICAT** ppCAT) mut => VT.[Friend]GetNextTable(&this, dwTimeout, ppCAT);

	public HRESULT RegisterForWhenCurrent(HANDLE hNextTableIsCurrent) mut => VT.[Friend]RegisterForWhenCurrent(&this, hNextTableIsCurrent);

	public HRESULT ConvertNextToCurrent() mut => VT.[Friend]ConvertNextToCurrent(&this);
}

[CRepr]struct IPMT : IUnknown
{
	public new const Guid IID = .(0x01f3b398, 0x9527, 0x4736, 0x94, 0xdb, 0x51, 0x95, 0x87, 0x8e, 0x97, 0xa8);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IUnknown.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, ISectionList* pSectionList, IMpeg2Data* pMPEGData) Initialize;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint16* pwVal) GetProgramNumber;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint8* pbVal) GetVersionNumber;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint16* pPidVal) GetPcrPid;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32* pdwVal) GetCountOfTableDescriptors;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32 dwIndex, IGenericDescriptor** ppDescriptor) GetTableDescriptorByIndex;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint8 bTag, uint32* pdwCookie, IGenericDescriptor** ppDescriptor) GetTableDescriptorByTag;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint16* pwVal) GetCountOfRecords;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32 dwRecordIndex, uint8* pbVal) GetRecordStreamType;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32 dwRecordIndex, uint16* pPidVal) GetRecordElementaryPid;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32 dwRecordIndex, uint32* pdwVal) GetRecordCountOfDescriptors;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32 dwRecordIndex, uint32 dwDescIndex, IGenericDescriptor** ppDescriptor) GetRecordDescriptorByIndex;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32 dwRecordIndex, uint8 bTag, uint32* pdwCookie, IGenericDescriptor** ppDescriptor) GetRecordDescriptorByTag;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, DSMCC_ELEMENT** ppDSMCCList, uint32* puiCount) QueryServiceGatewayInfo;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, MPE_ELEMENT** ppMPEList, uint32* puiCount) QueryMPEInfo;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, HANDLE hNextTableAvailable) RegisterForNextTable;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IPMT** ppPMT) GetNextTable;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, HANDLE hNextTableIsCurrent) RegisterForWhenCurrent;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self) ConvertNextToCurrent;
	}


	public HRESULT Initialize(ISectionList* pSectionList, IMpeg2Data* pMPEGData) mut => VT.[Friend]Initialize(&this, pSectionList, pMPEGData);

	public HRESULT GetProgramNumber(uint16* pwVal) mut => VT.[Friend]GetProgramNumber(&this, pwVal);

	public HRESULT GetVersionNumber(uint8* pbVal) mut => VT.[Friend]GetVersionNumber(&this, pbVal);

	public HRESULT GetPcrPid(uint16* pPidVal) mut => VT.[Friend]GetPcrPid(&this, pPidVal);

	public HRESULT GetCountOfTableDescriptors(uint32* pdwVal) mut => VT.[Friend]GetCountOfTableDescriptors(&this, pdwVal);

	public HRESULT GetTableDescriptorByIndex(uint32 dwIndex, IGenericDescriptor** ppDescriptor) mut => VT.[Friend]GetTableDescriptorByIndex(&this, dwIndex, ppDescriptor);

	public HRESULT GetTableDescriptorByTag(uint8 bTag, uint32* pdwCookie, IGenericDescriptor** ppDescriptor) mut => VT.[Friend]GetTableDescriptorByTag(&this, bTag, pdwCookie, ppDescriptor);

	public HRESULT GetCountOfRecords(uint16* pwVal) mut => VT.[Friend]GetCountOfRecords(&this, pwVal);

	public HRESULT GetRecordStreamType(uint32 dwRecordIndex, uint8* pbVal) mut => VT.[Friend]GetRecordStreamType(&this, dwRecordIndex, pbVal);

	public HRESULT GetRecordElementaryPid(uint32 dwRecordIndex, uint16* pPidVal) mut => VT.[Friend]GetRecordElementaryPid(&this, dwRecordIndex, pPidVal);

	public HRESULT GetRecordCountOfDescriptors(uint32 dwRecordIndex, uint32* pdwVal) mut => VT.[Friend]GetRecordCountOfDescriptors(&this, dwRecordIndex, pdwVal);

	public HRESULT GetRecordDescriptorByIndex(uint32 dwRecordIndex, uint32 dwDescIndex, IGenericDescriptor** ppDescriptor) mut => VT.[Friend]GetRecordDescriptorByIndex(&this, dwRecordIndex, dwDescIndex, ppDescriptor);

	public HRESULT GetRecordDescriptorByTag(uint32 dwRecordIndex, uint8 bTag, uint32* pdwCookie, IGenericDescriptor** ppDescriptor) mut => VT.[Friend]GetRecordDescriptorByTag(&this, dwRecordIndex, bTag, pdwCookie, ppDescriptor);

	public HRESULT QueryServiceGatewayInfo(DSMCC_ELEMENT** ppDSMCCList, uint32* puiCount) mut => VT.[Friend]QueryServiceGatewayInfo(&this, ppDSMCCList, puiCount);

	public HRESULT QueryMPEInfo(MPE_ELEMENT** ppMPEList, uint32* puiCount) mut => VT.[Friend]QueryMPEInfo(&this, ppMPEList, puiCount);

	public HRESULT RegisterForNextTable(HANDLE hNextTableAvailable) mut => VT.[Friend]RegisterForNextTable(&this, hNextTableAvailable);

	public HRESULT GetNextTable(IPMT** ppPMT) mut => VT.[Friend]GetNextTable(&this, ppPMT);

	public HRESULT RegisterForWhenCurrent(HANDLE hNextTableIsCurrent) mut => VT.[Friend]RegisterForWhenCurrent(&this, hNextTableIsCurrent);

	public HRESULT ConvertNextToCurrent() mut => VT.[Friend]ConvertNextToCurrent(&this);
}

[CRepr]struct ITSDT : IUnknown
{
	public new const Guid IID = .(0xd19bdb43, 0x405b, 0x4a7c, 0xa7, 0x91, 0xc8, 0x91, 0x10, 0xc3, 0x31, 0x65);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IUnknown.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, ISectionList* pSectionList, IMpeg2Data* pMPEGData) Initialize;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint8* pbVal) GetVersionNumber;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32* pdwVal) GetCountOfTableDescriptors;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32 dwIndex, IGenericDescriptor** ppDescriptor) GetTableDescriptorByIndex;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint8 bTag, uint32* pdwCookie, IGenericDescriptor** ppDescriptor) GetTableDescriptorByTag;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, HANDLE hNextTableAvailable) RegisterForNextTable;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, ITSDT** ppTSDT) GetNextTable;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, HANDLE hNextTableIsCurrent) RegisterForWhenCurrent;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self) ConvertNextToCurrent;
	}


	public HRESULT Initialize(ISectionList* pSectionList, IMpeg2Data* pMPEGData) mut => VT.[Friend]Initialize(&this, pSectionList, pMPEGData);

	public HRESULT GetVersionNumber(uint8* pbVal) mut => VT.[Friend]GetVersionNumber(&this, pbVal);

	public HRESULT GetCountOfTableDescriptors(uint32* pdwVal) mut => VT.[Friend]GetCountOfTableDescriptors(&this, pdwVal);

	public HRESULT GetTableDescriptorByIndex(uint32 dwIndex, IGenericDescriptor** ppDescriptor) mut => VT.[Friend]GetTableDescriptorByIndex(&this, dwIndex, ppDescriptor);

	public HRESULT GetTableDescriptorByTag(uint8 bTag, uint32* pdwCookie, IGenericDescriptor** ppDescriptor) mut => VT.[Friend]GetTableDescriptorByTag(&this, bTag, pdwCookie, ppDescriptor);

	public HRESULT RegisterForNextTable(HANDLE hNextTableAvailable) mut => VT.[Friend]RegisterForNextTable(&this, hNextTableAvailable);

	public HRESULT GetNextTable(ITSDT** ppTSDT) mut => VT.[Friend]GetNextTable(&this, ppTSDT);

	public HRESULT RegisterForWhenCurrent(HANDLE hNextTableIsCurrent) mut => VT.[Friend]RegisterForWhenCurrent(&this, hNextTableIsCurrent);

	public HRESULT ConvertNextToCurrent() mut => VT.[Friend]ConvertNextToCurrent(&this);
}

[CRepr]struct IPSITables : IUnknown
{
	public new const Guid IID = .(0x919f24c5, 0x7b14, 0x42ac, 0xa4, 0xb0, 0x2a, 0xe0, 0x8d, 0xaf, 0x00, 0xac);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IUnknown.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32 dwTSID, uint32 dwTID_PID, uint32 dwHashedVer, uint32 dwPara4, IUnknown** ppIUnknown) GetTable;
	}


	public HRESULT GetTable(uint32 dwTSID, uint32 dwTID_PID, uint32 dwHashedVer, uint32 dwPara4, IUnknown** ppIUnknown) mut => VT.[Friend]GetTable(&this, dwTSID, dwTID_PID, dwHashedVer, dwPara4, ppIUnknown);
}

[CRepr]struct IAtscPsipParser : IUnknown
{
	public new const Guid IID = .(0xb2c98995, 0x5eb2, 0x4fb1, 0xb4, 0x06, 0xf3, 0xe8, 0xe2, 0x02, 0x6a, 0x9a);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IUnknown.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IUnknown* punkMpeg2Data) Initialize;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IPAT** ppPAT) GetPAT;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32 dwTimeout, ICAT** ppCAT) GetCAT;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint16 pid, uint16* pwProgramNumber, IPMT** ppPMT) GetPMT;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, ITSDT** ppTSDT) GetTSDT;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IATSC_MGT** ppMGT) GetMGT;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint8 tableId, BOOL fGetNextTable, IATSC_VCT** ppVCT) GetVCT;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint16 pid, uint16* pwSourceId, uint32 dwTimeout, IATSC_EIT** ppEIT) GetEIT;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint16 pid, uint16* wSourceId, uint16* pwEventId, IATSC_ETT** ppETT) GetETT;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IATSC_STT** ppSTT) GetSTT;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint16 pid, ISCTE_EAS** ppEAS) GetEAS;
	}


	public HRESULT Initialize(IUnknown* punkMpeg2Data) mut => VT.[Friend]Initialize(&this, punkMpeg2Data);

	public HRESULT GetPAT(IPAT** ppPAT) mut => VT.[Friend]GetPAT(&this, ppPAT);

	public HRESULT GetCAT(uint32 dwTimeout, ICAT** ppCAT) mut => VT.[Friend]GetCAT(&this, dwTimeout, ppCAT);

	public HRESULT GetPMT(uint16 pid, uint16* pwProgramNumber, IPMT** ppPMT) mut => VT.[Friend]GetPMT(&this, pid, pwProgramNumber, ppPMT);

	public HRESULT GetTSDT(ITSDT** ppTSDT) mut => VT.[Friend]GetTSDT(&this, ppTSDT);

	public HRESULT GetMGT(IATSC_MGT** ppMGT) mut => VT.[Friend]GetMGT(&this, ppMGT);

	public HRESULT GetVCT(uint8 tableId, BOOL fGetNextTable, IATSC_VCT** ppVCT) mut => VT.[Friend]GetVCT(&this, tableId, fGetNextTable, ppVCT);

	public HRESULT GetEIT(uint16 pid, uint16* pwSourceId, uint32 dwTimeout, IATSC_EIT** ppEIT) mut => VT.[Friend]GetEIT(&this, pid, pwSourceId, dwTimeout, ppEIT);

	public HRESULT GetETT(uint16 pid, uint16* wSourceId, uint16* pwEventId, IATSC_ETT** ppETT) mut => VT.[Friend]GetETT(&this, pid, wSourceId, pwEventId, ppETT);

	public HRESULT GetSTT(IATSC_STT** ppSTT) mut => VT.[Friend]GetSTT(&this, ppSTT);

	public HRESULT GetEAS(uint16 pid, ISCTE_EAS** ppEAS) mut => VT.[Friend]GetEAS(&this, pid, ppEAS);
}

[CRepr]struct IATSC_MGT : IUnknown
{
	public new const Guid IID = .(0x8877dabd, 0xc137, 0x4073, 0x97, 0xe3, 0x77, 0x94, 0x07, 0xa5, 0xd8, 0x7a);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IUnknown.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, ISectionList* pSectionList, IMpeg2Data* pMPEGData) Initialize;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint8* pbVal) GetVersionNumber;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint8* pbVal) GetProtocolVersion;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32* pdwVal) GetCountOfRecords;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32 dwRecordIndex, uint16* pwVal) GetRecordType;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32 dwRecordIndex, uint16* ppidVal) GetRecordTypePid;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32 dwRecordIndex, uint8* pbVal) GetRecordVersionNumber;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32 dwRecordIndex, uint32* pdwVal) GetRecordCountOfDescriptors;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32 dwRecordIndex, uint32 dwIndex, IGenericDescriptor** ppDescriptor) GetRecordDescriptorByIndex;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32 dwRecordIndex, uint8 bTag, uint32* pdwCookie, IGenericDescriptor** ppDescriptor) GetRecordDescriptorByTag;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32* pdwVal) GetCountOfTableDescriptors;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32 dwIndex, IGenericDescriptor** ppDescriptor) GetTableDescriptorByIndex;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint8 bTag, uint32* pdwCookie, IGenericDescriptor** ppDescriptor) GetTableDescriptorByTag;
	}


	public HRESULT Initialize(ISectionList* pSectionList, IMpeg2Data* pMPEGData) mut => VT.[Friend]Initialize(&this, pSectionList, pMPEGData);

	public HRESULT GetVersionNumber(uint8* pbVal) mut => VT.[Friend]GetVersionNumber(&this, pbVal);

	public HRESULT GetProtocolVersion(uint8* pbVal) mut => VT.[Friend]GetProtocolVersion(&this, pbVal);

	public HRESULT GetCountOfRecords(uint32* pdwVal) mut => VT.[Friend]GetCountOfRecords(&this, pdwVal);

	public HRESULT GetRecordType(uint32 dwRecordIndex, uint16* pwVal) mut => VT.[Friend]GetRecordType(&this, dwRecordIndex, pwVal);

	public HRESULT GetRecordTypePid(uint32 dwRecordIndex, uint16* ppidVal) mut => VT.[Friend]GetRecordTypePid(&this, dwRecordIndex, ppidVal);

	public HRESULT GetRecordVersionNumber(uint32 dwRecordIndex, uint8* pbVal) mut => VT.[Friend]GetRecordVersionNumber(&this, dwRecordIndex, pbVal);

	public HRESULT GetRecordCountOfDescriptors(uint32 dwRecordIndex, uint32* pdwVal) mut => VT.[Friend]GetRecordCountOfDescriptors(&this, dwRecordIndex, pdwVal);

	public HRESULT GetRecordDescriptorByIndex(uint32 dwRecordIndex, uint32 dwIndex, IGenericDescriptor** ppDescriptor) mut => VT.[Friend]GetRecordDescriptorByIndex(&this, dwRecordIndex, dwIndex, ppDescriptor);

	public HRESULT GetRecordDescriptorByTag(uint32 dwRecordIndex, uint8 bTag, uint32* pdwCookie, IGenericDescriptor** ppDescriptor) mut => VT.[Friend]GetRecordDescriptorByTag(&this, dwRecordIndex, bTag, pdwCookie, ppDescriptor);

	public HRESULT GetCountOfTableDescriptors(uint32* pdwVal) mut => VT.[Friend]GetCountOfTableDescriptors(&this, pdwVal);

	public HRESULT GetTableDescriptorByIndex(uint32 dwIndex, IGenericDescriptor** ppDescriptor) mut => VT.[Friend]GetTableDescriptorByIndex(&this, dwIndex, ppDescriptor);

	public HRESULT GetTableDescriptorByTag(uint8 bTag, uint32* pdwCookie, IGenericDescriptor** ppDescriptor) mut => VT.[Friend]GetTableDescriptorByTag(&this, bTag, pdwCookie, ppDescriptor);
}

[CRepr]struct IATSC_VCT : IUnknown
{
	public new const Guid IID = .(0x26879a18, 0x32f9, 0x46c6, 0x91, 0xf0, 0xfb, 0x64, 0x79, 0x27, 0x0e, 0x8c);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IUnknown.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, ISectionList* pSectionList, IMpeg2Data* pMPEGData) Initialize;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint8* pbVal) GetVersionNumber;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint16* pwVal) GetTransportStreamId;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint8* pbVal) GetProtocolVersion;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32* pdwVal) GetCountOfRecords;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32 dwRecordIndex, PWSTR* pwsName) GetRecordName;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32 dwRecordIndex, uint16* pwVal) GetRecordMajorChannelNumber;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32 dwRecordIndex, uint16* pwVal) GetRecordMinorChannelNumber;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32 dwRecordIndex, uint8* pbVal) GetRecordModulationMode;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32 dwRecordIndex, uint32* pdwVal) GetRecordCarrierFrequency;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32 dwRecordIndex, uint16* pwVal) GetRecordTransportStreamId;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32 dwRecordIndex, uint16* pwVal) GetRecordProgramNumber;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32 dwRecordIndex, uint8* pbVal) GetRecordEtmLocation;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32 dwRecordIndex, BOOL* pfVal) GetRecordIsAccessControlledBitSet;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32 dwRecordIndex, BOOL* pfVal) GetRecordIsHiddenBitSet;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32 dwRecordIndex, BOOL* pfVal) GetRecordIsPathSelectBitSet;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32 dwRecordIndex, BOOL* pfVal) GetRecordIsOutOfBandBitSet;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32 dwRecordIndex, BOOL* pfVal) GetRecordIsHideGuideBitSet;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32 dwRecordIndex, uint8* pbVal) GetRecordServiceType;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32 dwRecordIndex, uint16* pwVal) GetRecordSourceId;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32 dwRecordIndex, uint32* pdwVal) GetRecordCountOfDescriptors;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32 dwRecordIndex, uint32 dwIndex, IGenericDescriptor** ppDescriptor) GetRecordDescriptorByIndex;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32 dwRecordIndex, uint8 bTag, uint32* pdwCookie, IGenericDescriptor** ppDescriptor) GetRecordDescriptorByTag;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32* pdwVal) GetCountOfTableDescriptors;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32 dwIndex, IGenericDescriptor** ppDescriptor) GetTableDescriptorByIndex;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint8 bTag, uint32* pdwCookie, IGenericDescriptor** ppDescriptor) GetTableDescriptorByTag;
	}


	public HRESULT Initialize(ISectionList* pSectionList, IMpeg2Data* pMPEGData) mut => VT.[Friend]Initialize(&this, pSectionList, pMPEGData);

	public HRESULT GetVersionNumber(uint8* pbVal) mut => VT.[Friend]GetVersionNumber(&this, pbVal);

	public HRESULT GetTransportStreamId(uint16* pwVal) mut => VT.[Friend]GetTransportStreamId(&this, pwVal);

	public HRESULT GetProtocolVersion(uint8* pbVal) mut => VT.[Friend]GetProtocolVersion(&this, pbVal);

	public HRESULT GetCountOfRecords(uint32* pdwVal) mut => VT.[Friend]GetCountOfRecords(&this, pdwVal);

	public HRESULT GetRecordName(uint32 dwRecordIndex, PWSTR* pwsName) mut => VT.[Friend]GetRecordName(&this, dwRecordIndex, pwsName);

	public HRESULT GetRecordMajorChannelNumber(uint32 dwRecordIndex, uint16* pwVal) mut => VT.[Friend]GetRecordMajorChannelNumber(&this, dwRecordIndex, pwVal);

	public HRESULT GetRecordMinorChannelNumber(uint32 dwRecordIndex, uint16* pwVal) mut => VT.[Friend]GetRecordMinorChannelNumber(&this, dwRecordIndex, pwVal);

	public HRESULT GetRecordModulationMode(uint32 dwRecordIndex, uint8* pbVal) mut => VT.[Friend]GetRecordModulationMode(&this, dwRecordIndex, pbVal);

	public HRESULT GetRecordCarrierFrequency(uint32 dwRecordIndex, uint32* pdwVal) mut => VT.[Friend]GetRecordCarrierFrequency(&this, dwRecordIndex, pdwVal);

	public HRESULT GetRecordTransportStreamId(uint32 dwRecordIndex, uint16* pwVal) mut => VT.[Friend]GetRecordTransportStreamId(&this, dwRecordIndex, pwVal);

	public HRESULT GetRecordProgramNumber(uint32 dwRecordIndex, uint16* pwVal) mut => VT.[Friend]GetRecordProgramNumber(&this, dwRecordIndex, pwVal);

	public HRESULT GetRecordEtmLocation(uint32 dwRecordIndex, uint8* pbVal) mut => VT.[Friend]GetRecordEtmLocation(&this, dwRecordIndex, pbVal);

	public HRESULT GetRecordIsAccessControlledBitSet(uint32 dwRecordIndex, BOOL* pfVal) mut => VT.[Friend]GetRecordIsAccessControlledBitSet(&this, dwRecordIndex, pfVal);

	public HRESULT GetRecordIsHiddenBitSet(uint32 dwRecordIndex, BOOL* pfVal) mut => VT.[Friend]GetRecordIsHiddenBitSet(&this, dwRecordIndex, pfVal);

	public HRESULT GetRecordIsPathSelectBitSet(uint32 dwRecordIndex, BOOL* pfVal) mut => VT.[Friend]GetRecordIsPathSelectBitSet(&this, dwRecordIndex, pfVal);

	public HRESULT GetRecordIsOutOfBandBitSet(uint32 dwRecordIndex, BOOL* pfVal) mut => VT.[Friend]GetRecordIsOutOfBandBitSet(&this, dwRecordIndex, pfVal);

	public HRESULT GetRecordIsHideGuideBitSet(uint32 dwRecordIndex, BOOL* pfVal) mut => VT.[Friend]GetRecordIsHideGuideBitSet(&this, dwRecordIndex, pfVal);

	public HRESULT GetRecordServiceType(uint32 dwRecordIndex, uint8* pbVal) mut => VT.[Friend]GetRecordServiceType(&this, dwRecordIndex, pbVal);

	public HRESULT GetRecordSourceId(uint32 dwRecordIndex, uint16* pwVal) mut => VT.[Friend]GetRecordSourceId(&this, dwRecordIndex, pwVal);

	public HRESULT GetRecordCountOfDescriptors(uint32 dwRecordIndex, uint32* pdwVal) mut => VT.[Friend]GetRecordCountOfDescriptors(&this, dwRecordIndex, pdwVal);

	public HRESULT GetRecordDescriptorByIndex(uint32 dwRecordIndex, uint32 dwIndex, IGenericDescriptor** ppDescriptor) mut => VT.[Friend]GetRecordDescriptorByIndex(&this, dwRecordIndex, dwIndex, ppDescriptor);

	public HRESULT GetRecordDescriptorByTag(uint32 dwRecordIndex, uint8 bTag, uint32* pdwCookie, IGenericDescriptor** ppDescriptor) mut => VT.[Friend]GetRecordDescriptorByTag(&this, dwRecordIndex, bTag, pdwCookie, ppDescriptor);

	public HRESULT GetCountOfTableDescriptors(uint32* pdwVal) mut => VT.[Friend]GetCountOfTableDescriptors(&this, pdwVal);

	public HRESULT GetTableDescriptorByIndex(uint32 dwIndex, IGenericDescriptor** ppDescriptor) mut => VT.[Friend]GetTableDescriptorByIndex(&this, dwIndex, ppDescriptor);

	public HRESULT GetTableDescriptorByTag(uint8 bTag, uint32* pdwCookie, IGenericDescriptor** ppDescriptor) mut => VT.[Friend]GetTableDescriptorByTag(&this, bTag, pdwCookie, ppDescriptor);
}

[CRepr]struct IATSC_EIT : IUnknown
{
	public new const Guid IID = .(0xd7c212d7, 0x76a2, 0x4b4b, 0xaa, 0x56, 0x84, 0x68, 0x79, 0xa8, 0x00, 0x96);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IUnknown.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, ISectionList* pSectionList, IMpeg2Data* pMPEGData) Initialize;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint8* pbVal) GetVersionNumber;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint16* pwVal) GetSourceId;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint8* pbVal) GetProtocolVersion;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32* pdwVal) GetCountOfRecords;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32 dwRecordIndex, uint16* pwVal) GetRecordEventId;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32 dwRecordIndex, MPEG_DATE_AND_TIME* pmdtVal) GetRecordStartTime;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32 dwRecordIndex, uint8* pbVal) GetRecordEtmLocation;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32 dwRecordIndex, MPEG_TIME* pmdVal) GetRecordDuration;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32 dwRecordIndex, uint32* pdwLength, uint8** ppText) GetRecordTitleText;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32 dwRecordIndex, uint32* pdwVal) GetRecordCountOfDescriptors;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32 dwRecordIndex, uint32 dwIndex, IGenericDescriptor** ppDescriptor) GetRecordDescriptorByIndex;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32 dwRecordIndex, uint8 bTag, uint32* pdwCookie, IGenericDescriptor** ppDescriptor) GetRecordDescriptorByTag;
	}


	public HRESULT Initialize(ISectionList* pSectionList, IMpeg2Data* pMPEGData) mut => VT.[Friend]Initialize(&this, pSectionList, pMPEGData);

	public HRESULT GetVersionNumber(uint8* pbVal) mut => VT.[Friend]GetVersionNumber(&this, pbVal);

	public HRESULT GetSourceId(uint16* pwVal) mut => VT.[Friend]GetSourceId(&this, pwVal);

	public HRESULT GetProtocolVersion(uint8* pbVal) mut => VT.[Friend]GetProtocolVersion(&this, pbVal);

	public HRESULT GetCountOfRecords(uint32* pdwVal) mut => VT.[Friend]GetCountOfRecords(&this, pdwVal);

	public HRESULT GetRecordEventId(uint32 dwRecordIndex, uint16* pwVal) mut => VT.[Friend]GetRecordEventId(&this, dwRecordIndex, pwVal);

	public HRESULT GetRecordStartTime(uint32 dwRecordIndex, MPEG_DATE_AND_TIME* pmdtVal) mut => VT.[Friend]GetRecordStartTime(&this, dwRecordIndex, pmdtVal);

	public HRESULT GetRecordEtmLocation(uint32 dwRecordIndex, uint8* pbVal) mut => VT.[Friend]GetRecordEtmLocation(&this, dwRecordIndex, pbVal);

	public HRESULT GetRecordDuration(uint32 dwRecordIndex, MPEG_TIME* pmdVal) mut => VT.[Friend]GetRecordDuration(&this, dwRecordIndex, pmdVal);

	public HRESULT GetRecordTitleText(uint32 dwRecordIndex, uint32* pdwLength, uint8** ppText) mut => VT.[Friend]GetRecordTitleText(&this, dwRecordIndex, pdwLength, ppText);

	public HRESULT GetRecordCountOfDescriptors(uint32 dwRecordIndex, uint32* pdwVal) mut => VT.[Friend]GetRecordCountOfDescriptors(&this, dwRecordIndex, pdwVal);

	public HRESULT GetRecordDescriptorByIndex(uint32 dwRecordIndex, uint32 dwIndex, IGenericDescriptor** ppDescriptor) mut => VT.[Friend]GetRecordDescriptorByIndex(&this, dwRecordIndex, dwIndex, ppDescriptor);

	public HRESULT GetRecordDescriptorByTag(uint32 dwRecordIndex, uint8 bTag, uint32* pdwCookie, IGenericDescriptor** ppDescriptor) mut => VT.[Friend]GetRecordDescriptorByTag(&this, dwRecordIndex, bTag, pdwCookie, ppDescriptor);
}

[CRepr]struct IATSC_ETT : IUnknown
{
	public new const Guid IID = .(0x5a142cc9, 0xb8cf, 0x4a86, 0xa0, 0x40, 0xe9, 0xca, 0xdf, 0x3e, 0xf3, 0xe7);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IUnknown.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, ISectionList* pSectionList, IMpeg2Data* pMPEGData) Initialize;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint8* pbVal) GetVersionNumber;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint8* pbVal) GetProtocolVersion;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32* pdwVal) GetEtmId;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32* pdwLength, uint8** ppText) GetExtendedMessageText;
	}


	public HRESULT Initialize(ISectionList* pSectionList, IMpeg2Data* pMPEGData) mut => VT.[Friend]Initialize(&this, pSectionList, pMPEGData);

	public HRESULT GetVersionNumber(uint8* pbVal) mut => VT.[Friend]GetVersionNumber(&this, pbVal);

	public HRESULT GetProtocolVersion(uint8* pbVal) mut => VT.[Friend]GetProtocolVersion(&this, pbVal);

	public HRESULT GetEtmId(uint32* pdwVal) mut => VT.[Friend]GetEtmId(&this, pdwVal);

	public HRESULT GetExtendedMessageText(uint32* pdwLength, uint8** ppText) mut => VT.[Friend]GetExtendedMessageText(&this, pdwLength, ppText);
}

[CRepr]struct IATSC_STT : IUnknown
{
	public new const Guid IID = .(0x6bf42423, 0x217d, 0x4d6f, 0x81, 0xe1, 0x3a, 0x7b, 0x36, 0x0e, 0xc8, 0x96);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IUnknown.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, ISectionList* pSectionList, IMpeg2Data* pMPEGData) Initialize;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint8* pbVal) GetProtocolVersion;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, MPEG_DATE_AND_TIME* pmdtSystemTime) GetSystemTime;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint8* pbVal) GetGpsUtcOffset;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint16* pwVal) GetDaylightSavings;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32* pdwVal) GetCountOfTableDescriptors;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32 dwIndex, IGenericDescriptor** ppDescriptor) GetTableDescriptorByIndex;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint8 bTag, uint32* pdwCookie, IGenericDescriptor** ppDescriptor) GetTableDescriptorByTag;
	}


	public HRESULT Initialize(ISectionList* pSectionList, IMpeg2Data* pMPEGData) mut => VT.[Friend]Initialize(&this, pSectionList, pMPEGData);

	public HRESULT GetProtocolVersion(uint8* pbVal) mut => VT.[Friend]GetProtocolVersion(&this, pbVal);

	public HRESULT GetSystemTime(MPEG_DATE_AND_TIME* pmdtSystemTime) mut => VT.[Friend]GetSystemTime(&this, pmdtSystemTime);

	public HRESULT GetGpsUtcOffset(uint8* pbVal) mut => VT.[Friend]GetGpsUtcOffset(&this, pbVal);

	public HRESULT GetDaylightSavings(uint16* pwVal) mut => VT.[Friend]GetDaylightSavings(&this, pwVal);

	public HRESULT GetCountOfTableDescriptors(uint32* pdwVal) mut => VT.[Friend]GetCountOfTableDescriptors(&this, pdwVal);

	public HRESULT GetTableDescriptorByIndex(uint32 dwIndex, IGenericDescriptor** ppDescriptor) mut => VT.[Friend]GetTableDescriptorByIndex(&this, dwIndex, ppDescriptor);

	public HRESULT GetTableDescriptorByTag(uint8 bTag, uint32* pdwCookie, IGenericDescriptor** ppDescriptor) mut => VT.[Friend]GetTableDescriptorByTag(&this, bTag, pdwCookie, ppDescriptor);
}

[CRepr]struct ISCTE_EAS : IUnknown
{
	public new const Guid IID = .(0x1ff544d6, 0x161d, 0x4fae, 0x9f, 0xaa, 0x4f, 0x9f, 0x49, 0x2a, 0xe9, 0x99);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IUnknown.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, ISectionList* pSectionList, IMpeg2Data* pMPEGData) Initialize;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint8* pbVal) GetVersionNumber;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint8* pbVal) GetSequencyNumber;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint8* pbVal) GetProtocolVersion;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint16* pwVal) GetEASEventID;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint8* pbVal) GetOriginatorCode;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint8* pbVal) GetEASEventCodeLen;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint8* pbVal) GetEASEventCode;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint8* pbVal) GetRawNatureOfActivationTextLen;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint8* pbVal) GetRawNatureOfActivationText;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR bstrIS0639code, BSTR* pbstrString) GetNatureOfActivationText;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint8* pbVal) GetTimeRemaining;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32* pdwVal) GetStartTime;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint16* pwVal) GetDuration;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint8* pbVal) GetAlertPriority;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint16* pwVal) GetDetailsOOBSourceID;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint16* pwVal) GetDetailsMajor;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint16* pwVal) GetDetailsMinor;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint16* pwVal) GetDetailsAudioOOBSourceID;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR bstrIS0639code, BSTR* pbstrString) GetAlertText;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint16* pwVal) GetRawAlertTextLen;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint8* pbVal) GetRawAlertText;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint8* pbVal) GetLocationCount;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint8 bIndex, uint8* pbState, uint8* pbCountySubdivision, uint16* pwCounty) GetLocationCodes;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint8* pbVal) GetExceptionCount;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint8 bIndex, uint8* pbIBRef, uint16* pwFirst, uint16* pwSecond) GetExceptionService;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32* pdwVal) GetCountOfTableDescriptors;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32 dwIndex, IGenericDescriptor** ppDescriptor) GetTableDescriptorByIndex;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint8 bTag, uint32* pdwCookie, IGenericDescriptor** ppDescriptor) GetTableDescriptorByTag;
	}


	public HRESULT Initialize(ISectionList* pSectionList, IMpeg2Data* pMPEGData) mut => VT.[Friend]Initialize(&this, pSectionList, pMPEGData);

	public HRESULT GetVersionNumber(uint8* pbVal) mut => VT.[Friend]GetVersionNumber(&this, pbVal);

	public HRESULT GetSequencyNumber(uint8* pbVal) mut => VT.[Friend]GetSequencyNumber(&this, pbVal);

	public HRESULT GetProtocolVersion(uint8* pbVal) mut => VT.[Friend]GetProtocolVersion(&this, pbVal);

	public HRESULT GetEASEventID(uint16* pwVal) mut => VT.[Friend]GetEASEventID(&this, pwVal);

	public HRESULT GetOriginatorCode(uint8* pbVal) mut => VT.[Friend]GetOriginatorCode(&this, pbVal);

	public HRESULT GetEASEventCodeLen(uint8* pbVal) mut => VT.[Friend]GetEASEventCodeLen(&this, pbVal);

	public HRESULT GetEASEventCode(uint8* pbVal) mut => VT.[Friend]GetEASEventCode(&this, pbVal);

	public HRESULT GetRawNatureOfActivationTextLen(uint8* pbVal) mut => VT.[Friend]GetRawNatureOfActivationTextLen(&this, pbVal);

	public HRESULT GetRawNatureOfActivationText(uint8* pbVal) mut => VT.[Friend]GetRawNatureOfActivationText(&this, pbVal);

	public HRESULT GetNatureOfActivationText(BSTR bstrIS0639code, BSTR* pbstrString) mut => VT.[Friend]GetNatureOfActivationText(&this, bstrIS0639code, pbstrString);

	public HRESULT GetTimeRemaining(uint8* pbVal) mut => VT.[Friend]GetTimeRemaining(&this, pbVal);

	public HRESULT GetStartTime(uint32* pdwVal) mut => VT.[Friend]GetStartTime(&this, pdwVal);

	public HRESULT GetDuration(uint16* pwVal) mut => VT.[Friend]GetDuration(&this, pwVal);

	public HRESULT GetAlertPriority(uint8* pbVal) mut => VT.[Friend]GetAlertPriority(&this, pbVal);

	public HRESULT GetDetailsOOBSourceID(uint16* pwVal) mut => VT.[Friend]GetDetailsOOBSourceID(&this, pwVal);

	public HRESULT GetDetailsMajor(uint16* pwVal) mut => VT.[Friend]GetDetailsMajor(&this, pwVal);

	public HRESULT GetDetailsMinor(uint16* pwVal) mut => VT.[Friend]GetDetailsMinor(&this, pwVal);

	public HRESULT GetDetailsAudioOOBSourceID(uint16* pwVal) mut => VT.[Friend]GetDetailsAudioOOBSourceID(&this, pwVal);

	public HRESULT GetAlertText(BSTR bstrIS0639code, BSTR* pbstrString) mut => VT.[Friend]GetAlertText(&this, bstrIS0639code, pbstrString);

	public HRESULT GetRawAlertTextLen(uint16* pwVal) mut => VT.[Friend]GetRawAlertTextLen(&this, pwVal);

	public HRESULT GetRawAlertText(uint8* pbVal) mut => VT.[Friend]GetRawAlertText(&this, pbVal);

	public HRESULT GetLocationCount(uint8* pbVal) mut => VT.[Friend]GetLocationCount(&this, pbVal);

	public HRESULT GetLocationCodes(uint8 bIndex, uint8* pbState, uint8* pbCountySubdivision, uint16* pwCounty) mut => VT.[Friend]GetLocationCodes(&this, bIndex, pbState, pbCountySubdivision, pwCounty);

	public HRESULT GetExceptionCount(uint8* pbVal) mut => VT.[Friend]GetExceptionCount(&this, pbVal);

	public HRESULT GetExceptionService(uint8 bIndex, uint8* pbIBRef, uint16* pwFirst, uint16* pwSecond) mut => VT.[Friend]GetExceptionService(&this, bIndex, pbIBRef, pwFirst, pwSecond);

	public HRESULT GetCountOfTableDescriptors(uint32* pdwVal) mut => VT.[Friend]GetCountOfTableDescriptors(&this, pdwVal);

	public HRESULT GetTableDescriptorByIndex(uint32 dwIndex, IGenericDescriptor** ppDescriptor) mut => VT.[Friend]GetTableDescriptorByIndex(&this, dwIndex, ppDescriptor);

	public HRESULT GetTableDescriptorByTag(uint8 bTag, uint32* pdwCookie, IGenericDescriptor** ppDescriptor) mut => VT.[Friend]GetTableDescriptorByTag(&this, bTag, pdwCookie, ppDescriptor);
}

[CRepr]struct IAtscContentAdvisoryDescriptor : IUnknown
{
	public new const Guid IID = .(0xff76e60c, 0x0283, 0x43ea, 0xba, 0x32, 0xb4, 0x22, 0x23, 0x85, 0x47, 0xee);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IUnknown.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint8* pbVal) GetTag;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint8* pbVal) GetLength;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint8* pbVal) GetRatingRegionCount;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint8 bIndex, uint8* pbVal) GetRecordRatingRegion;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint8 bIndex, uint8* pbVal) GetRecordRatedDimensions;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint8 bIndexOuter, uint8 bIndexInner, uint8* pbVal) GetRecordRatingDimension;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint8 bIndexOuter, uint8 bIndexInner, uint8* pbVal) GetRecordRatingValue;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint8 bIndex, uint8* pbLength, uint8** ppText) GetRecordRatingDescriptionText;
	}


	public HRESULT GetTag(uint8* pbVal) mut => VT.[Friend]GetTag(&this, pbVal);

	public HRESULT GetLength(uint8* pbVal) mut => VT.[Friend]GetLength(&this, pbVal);

	public HRESULT GetRatingRegionCount(uint8* pbVal) mut => VT.[Friend]GetRatingRegionCount(&this, pbVal);

	public HRESULT GetRecordRatingRegion(uint8 bIndex, uint8* pbVal) mut => VT.[Friend]GetRecordRatingRegion(&this, bIndex, pbVal);

	public HRESULT GetRecordRatedDimensions(uint8 bIndex, uint8* pbVal) mut => VT.[Friend]GetRecordRatedDimensions(&this, bIndex, pbVal);

	public HRESULT GetRecordRatingDimension(uint8 bIndexOuter, uint8 bIndexInner, uint8* pbVal) mut => VT.[Friend]GetRecordRatingDimension(&this, bIndexOuter, bIndexInner, pbVal);

	public HRESULT GetRecordRatingValue(uint8 bIndexOuter, uint8 bIndexInner, uint8* pbVal) mut => VT.[Friend]GetRecordRatingValue(&this, bIndexOuter, bIndexInner, pbVal);

	public HRESULT GetRecordRatingDescriptionText(uint8 bIndex, uint8* pbLength, uint8** ppText) mut => VT.[Friend]GetRecordRatingDescriptionText(&this, bIndex, pbLength, ppText);
}

[CRepr]struct ICaptionServiceDescriptor : IUnknown
{
	public new const Guid IID = .(0x40834007, 0x6834, 0x46f0, 0xbd, 0x45, 0xd5, 0xf6, 0xa6, 0xbe, 0x25, 0x8c);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IUnknown.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint8* pbVal) GetNumberOfServices;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint8 bIndex, uint8* LangCode) GetLanguageCode;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint8 bIndex, uint8* pbVal) GetCaptionServiceNumber;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint8 bIndex, uint8* pbVal) GetCCType;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint8 bIndex, uint8* pbVal) GetEasyReader;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint8 bIndex, uint8* pbVal) GetWideAspectRatio;
	}


	public HRESULT GetNumberOfServices(uint8* pbVal) mut => VT.[Friend]GetNumberOfServices(&this, pbVal);

	public HRESULT GetLanguageCode(uint8 bIndex, uint8* LangCode) mut => VT.[Friend]GetLanguageCode(&this, bIndex, LangCode);

	public HRESULT GetCaptionServiceNumber(uint8 bIndex, uint8* pbVal) mut => VT.[Friend]GetCaptionServiceNumber(&this, bIndex, pbVal);

	public HRESULT GetCCType(uint8 bIndex, uint8* pbVal) mut => VT.[Friend]GetCCType(&this, bIndex, pbVal);

	public HRESULT GetEasyReader(uint8 bIndex, uint8* pbVal) mut => VT.[Friend]GetEasyReader(&this, bIndex, pbVal);

	public HRESULT GetWideAspectRatio(uint8 bIndex, uint8* pbVal) mut => VT.[Friend]GetWideAspectRatio(&this, bIndex, pbVal);
}

[CRepr]struct IServiceLocationDescriptor : IUnknown
{
	public new const Guid IID = .(0x58c3c827, 0x9d91, 0x4215, 0xbf, 0xf3, 0x82, 0x0a, 0x49, 0xf0, 0x90, 0x4c);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IUnknown.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint16* pwVal) GetPCR_PID;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint8* pbVal) GetNumberOfElements;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint8 bIndex, uint8* pbVal) GetElementStreamType;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint8 bIndex, uint16* pwVal) GetElementPID;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint8 bIndex, uint8* LangCode) GetElementLanguageCode;
	}


	public HRESULT GetPCR_PID(uint16* pwVal) mut => VT.[Friend]GetPCR_PID(&this, pwVal);

	public HRESULT GetNumberOfElements(uint8* pbVal) mut => VT.[Friend]GetNumberOfElements(&this, pbVal);

	public HRESULT GetElementStreamType(uint8 bIndex, uint8* pbVal) mut => VT.[Friend]GetElementStreamType(&this, bIndex, pbVal);

	public HRESULT GetElementPID(uint8 bIndex, uint16* pwVal) mut => VT.[Friend]GetElementPID(&this, bIndex, pwVal);

	public HRESULT GetElementLanguageCode(uint8 bIndex, uint8* LangCode) mut => VT.[Friend]GetElementLanguageCode(&this, bIndex, LangCode);
}

[CRepr]struct IAttributeSet : IUnknown
{
	public new const Guid IID = .(0x583ec3cc, 0x4960, 0x4857, 0x98, 0x2b, 0x41, 0xa3, 0x3e, 0xa0, 0xa0, 0x06);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IUnknown.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, Guid guidAttribute, uint8* pbAttribute, uint32 dwAttributeLength) SetAttrib;
	}


	public HRESULT SetAttrib(Guid guidAttribute, uint8* pbAttribute, uint32 dwAttributeLength) mut => VT.[Friend]SetAttrib(&this, guidAttribute, pbAttribute, dwAttributeLength);
}

[CRepr]struct IAttributeGet : IUnknown
{
	public new const Guid IID = .(0x52dbd1ec, 0xe48f, 0x4528, 0x92, 0x32, 0xf4, 0x42, 0xa6, 0x8f, 0x0a, 0xe1);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IUnknown.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* plCount) GetCount;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 lIndex, Guid* pguidAttribute, uint8* pbAttribute, uint32* pdwAttributeLength) GetAttribIndexed;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, Guid guidAttribute, uint8* pbAttribute, uint32* pdwAttributeLength) GetAttrib;
	}


	public HRESULT GetCount(int32* plCount) mut => VT.[Friend]GetCount(&this, plCount);

	public HRESULT GetAttribIndexed(int32 lIndex, Guid* pguidAttribute, uint8* pbAttribute, uint32* pdwAttributeLength) mut => VT.[Friend]GetAttribIndexed(&this, lIndex, pguidAttribute, pbAttribute, pdwAttributeLength);

	public HRESULT GetAttrib(Guid guidAttribute, uint8* pbAttribute, uint32* pdwAttributeLength) mut => VT.[Friend]GetAttrib(&this, guidAttribute, pbAttribute, pdwAttributeLength);
}

[CRepr]struct IDvbSiParser : IUnknown
{
	public new const Guid IID = .(0xb758a7bd, 0x14dc, 0x449d, 0xb8, 0x28, 0x35, 0x90, 0x9a, 0xcb, 0x3b, 0x1e);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IUnknown.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IUnknown* punkMpeg2Data) Initialize;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IPAT** ppPAT) GetPAT;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32 dwTimeout, ICAT** ppCAT) GetCAT;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint16 pid, uint16* pwProgramNumber, IPMT** ppPMT) GetPMT;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, ITSDT** ppTSDT) GetTSDT;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint8 tableId, uint16* pwNetworkId, IDVB_NIT** ppNIT) GetNIT;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint8 tableId, uint16* pwTransportStreamId, IDVB_SDT** ppSDT) GetSDT;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint8 tableId, uint16* pwServiceId, IDVB_EIT** ppEIT) GetEIT;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint16* pwBouquetId, IDVB_BAT** ppBAT) GetBAT;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32 dwTimeout, IDVB_RST** ppRST) GetRST;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint16 pid, uint32 dwTimeout, IDVB_ST** ppST) GetST;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IDVB_TDT** ppTDT) GetTDT;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IDVB_TOT** ppTOT) GetTOT;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32 dwTimeout, IDVB_DIT** ppDIT) GetDIT;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32 dwTimeout, IDVB_SIT** ppSIT) GetSIT;
	}


	public HRESULT Initialize(IUnknown* punkMpeg2Data) mut => VT.[Friend]Initialize(&this, punkMpeg2Data);

	public HRESULT GetPAT(IPAT** ppPAT) mut => VT.[Friend]GetPAT(&this, ppPAT);

	public HRESULT GetCAT(uint32 dwTimeout, ICAT** ppCAT) mut => VT.[Friend]GetCAT(&this, dwTimeout, ppCAT);

	public HRESULT GetPMT(uint16 pid, uint16* pwProgramNumber, IPMT** ppPMT) mut => VT.[Friend]GetPMT(&this, pid, pwProgramNumber, ppPMT);

	public HRESULT GetTSDT(ITSDT** ppTSDT) mut => VT.[Friend]GetTSDT(&this, ppTSDT);

	public HRESULT GetNIT(uint8 tableId, uint16* pwNetworkId, IDVB_NIT** ppNIT) mut => VT.[Friend]GetNIT(&this, tableId, pwNetworkId, ppNIT);

	public HRESULT GetSDT(uint8 tableId, uint16* pwTransportStreamId, IDVB_SDT** ppSDT) mut => VT.[Friend]GetSDT(&this, tableId, pwTransportStreamId, ppSDT);

	public HRESULT GetEIT(uint8 tableId, uint16* pwServiceId, IDVB_EIT** ppEIT) mut => VT.[Friend]GetEIT(&this, tableId, pwServiceId, ppEIT);

	public HRESULT GetBAT(uint16* pwBouquetId, IDVB_BAT** ppBAT) mut => VT.[Friend]GetBAT(&this, pwBouquetId, ppBAT);

	public HRESULT GetRST(uint32 dwTimeout, IDVB_RST** ppRST) mut => VT.[Friend]GetRST(&this, dwTimeout, ppRST);

	public HRESULT GetST(uint16 pid, uint32 dwTimeout, IDVB_ST** ppST) mut => VT.[Friend]GetST(&this, pid, dwTimeout, ppST);

	public HRESULT GetTDT(IDVB_TDT** ppTDT) mut => VT.[Friend]GetTDT(&this, ppTDT);

	public HRESULT GetTOT(IDVB_TOT** ppTOT) mut => VT.[Friend]GetTOT(&this, ppTOT);

	public HRESULT GetDIT(uint32 dwTimeout, IDVB_DIT** ppDIT) mut => VT.[Friend]GetDIT(&this, dwTimeout, ppDIT);

	public HRESULT GetSIT(uint32 dwTimeout, IDVB_SIT** ppSIT) mut => VT.[Friend]GetSIT(&this, dwTimeout, ppSIT);
}

[CRepr]struct IDvbSiParser2 : IDvbSiParser
{
	public new const Guid IID = .(0x0ac5525f, 0xf816, 0x42f4, 0x93, 0xba, 0x4c, 0x0f, 0x32, 0xf4, 0x6e, 0x54);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDvbSiParser.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint8 tableId, uint16* pwServiceId, uint8* pbSegment, IDVB_EIT2** ppEIT) GetEIT2;
	}


	public HRESULT GetEIT2(uint8 tableId, uint16* pwServiceId, uint8* pbSegment, IDVB_EIT2** ppEIT) mut => VT.[Friend]GetEIT2(&this, tableId, pwServiceId, pbSegment, ppEIT);
}

[CRepr]struct IIsdbSiParser2 : IDvbSiParser2
{
	public new const Guid IID = .(0x900e4bb7, 0x18cd, 0x453f, 0x98, 0xbe, 0x3b, 0xe6, 0xaa, 0x21, 0x17, 0x72);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDvbSiParser2.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint8 tableId, uint16* pwTransportStreamId, IISDB_SDT** ppSDT) GetSDT;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint8 tableId, uint16* pwOriginalNetworkId, IISDB_BIT** ppBIT) GetBIT;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint8 tableId, uint16* pwOriginalNetworkId, IISDB_NBIT** ppNBIT) GetNBIT;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint8 tableId, uint16* pwOriginalServiceId, IISDB_LDT** ppLDT) GetLDT;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint8 tableId, uint16* pwTableIdExt, IISDB_SDTT** ppSDTT) GetSDTT;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint8 tableId, uint8 bSectionNumber, uint16* pwDownloadDataId, IISDB_CDT** ppCDT) GetCDT;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint16 pid, uint16 wTableIdExt, IISDB_EMM** ppEMM) GetEMM;
	}


	public HRESULT GetSDT(uint8 tableId, uint16* pwTransportStreamId, IISDB_SDT** ppSDT) mut => VT.[Friend]GetSDT(&this, tableId, pwTransportStreamId, ppSDT);

	public HRESULT GetBIT(uint8 tableId, uint16* pwOriginalNetworkId, IISDB_BIT** ppBIT) mut => VT.[Friend]GetBIT(&this, tableId, pwOriginalNetworkId, ppBIT);

	public HRESULT GetNBIT(uint8 tableId, uint16* pwOriginalNetworkId, IISDB_NBIT** ppNBIT) mut => VT.[Friend]GetNBIT(&this, tableId, pwOriginalNetworkId, ppNBIT);

	public HRESULT GetLDT(uint8 tableId, uint16* pwOriginalServiceId, IISDB_LDT** ppLDT) mut => VT.[Friend]GetLDT(&this, tableId, pwOriginalServiceId, ppLDT);

	public HRESULT GetSDTT(uint8 tableId, uint16* pwTableIdExt, IISDB_SDTT** ppSDTT) mut => VT.[Friend]GetSDTT(&this, tableId, pwTableIdExt, ppSDTT);

	public HRESULT GetCDT(uint8 tableId, uint8 bSectionNumber, uint16* pwDownloadDataId, IISDB_CDT** ppCDT) mut => VT.[Friend]GetCDT(&this, tableId, bSectionNumber, pwDownloadDataId, ppCDT);

	public HRESULT GetEMM(uint16 pid, uint16 wTableIdExt, IISDB_EMM** ppEMM) mut => VT.[Friend]GetEMM(&this, pid, wTableIdExt, ppEMM);
}

[CRepr]struct IDVB_NIT : IUnknown
{
	public new const Guid IID = .(0xc64935f4, 0x29e4, 0x4e22, 0x91, 0x1a, 0x63, 0xf7, 0xf5, 0x5c, 0xb0, 0x97);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IUnknown.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, ISectionList* pSectionList, IMpeg2Data* pMPEGData) Initialize;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint8* pbVal) GetVersionNumber;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint16* pwVal) GetNetworkId;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32* pdwVal) GetCountOfTableDescriptors;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32 dwIndex, IGenericDescriptor** ppDescriptor) GetTableDescriptorByIndex;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint8 bTag, uint32* pdwCookie, IGenericDescriptor** ppDescriptor) GetTableDescriptorByTag;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32* pdwVal) GetCountOfRecords;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32 dwRecordIndex, uint16* pwVal) GetRecordTransportStreamId;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32 dwRecordIndex, uint16* pwVal) GetRecordOriginalNetworkId;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32 dwRecordIndex, uint32* pdwVal) GetRecordCountOfDescriptors;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32 dwRecordIndex, uint32 dwIndex, IGenericDescriptor** ppDescriptor) GetRecordDescriptorByIndex;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32 dwRecordIndex, uint8 bTag, uint32* pdwCookie, IGenericDescriptor** ppDescriptor) GetRecordDescriptorByTag;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, HANDLE hNextTableAvailable) RegisterForNextTable;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IDVB_NIT** ppNIT) GetNextTable;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, HANDLE hNextTableIsCurrent) RegisterForWhenCurrent;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self) ConvertNextToCurrent;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32* pdwVersionHash) GetVersionHash;
	}


	public HRESULT Initialize(ISectionList* pSectionList, IMpeg2Data* pMPEGData) mut => VT.[Friend]Initialize(&this, pSectionList, pMPEGData);

	public HRESULT GetVersionNumber(uint8* pbVal) mut => VT.[Friend]GetVersionNumber(&this, pbVal);

	public HRESULT GetNetworkId(uint16* pwVal) mut => VT.[Friend]GetNetworkId(&this, pwVal);

	public HRESULT GetCountOfTableDescriptors(uint32* pdwVal) mut => VT.[Friend]GetCountOfTableDescriptors(&this, pdwVal);

	public HRESULT GetTableDescriptorByIndex(uint32 dwIndex, IGenericDescriptor** ppDescriptor) mut => VT.[Friend]GetTableDescriptorByIndex(&this, dwIndex, ppDescriptor);

	public HRESULT GetTableDescriptorByTag(uint8 bTag, uint32* pdwCookie, IGenericDescriptor** ppDescriptor) mut => VT.[Friend]GetTableDescriptorByTag(&this, bTag, pdwCookie, ppDescriptor);

	public HRESULT GetCountOfRecords(uint32* pdwVal) mut => VT.[Friend]GetCountOfRecords(&this, pdwVal);

	public HRESULT GetRecordTransportStreamId(uint32 dwRecordIndex, uint16* pwVal) mut => VT.[Friend]GetRecordTransportStreamId(&this, dwRecordIndex, pwVal);

	public HRESULT GetRecordOriginalNetworkId(uint32 dwRecordIndex, uint16* pwVal) mut => VT.[Friend]GetRecordOriginalNetworkId(&this, dwRecordIndex, pwVal);

	public HRESULT GetRecordCountOfDescriptors(uint32 dwRecordIndex, uint32* pdwVal) mut => VT.[Friend]GetRecordCountOfDescriptors(&this, dwRecordIndex, pdwVal);

	public HRESULT GetRecordDescriptorByIndex(uint32 dwRecordIndex, uint32 dwIndex, IGenericDescriptor** ppDescriptor) mut => VT.[Friend]GetRecordDescriptorByIndex(&this, dwRecordIndex, dwIndex, ppDescriptor);

	public HRESULT GetRecordDescriptorByTag(uint32 dwRecordIndex, uint8 bTag, uint32* pdwCookie, IGenericDescriptor** ppDescriptor) mut => VT.[Friend]GetRecordDescriptorByTag(&this, dwRecordIndex, bTag, pdwCookie, ppDescriptor);

	public HRESULT RegisterForNextTable(HANDLE hNextTableAvailable) mut => VT.[Friend]RegisterForNextTable(&this, hNextTableAvailable);

	public HRESULT GetNextTable(IDVB_NIT** ppNIT) mut => VT.[Friend]GetNextTable(&this, ppNIT);

	public HRESULT RegisterForWhenCurrent(HANDLE hNextTableIsCurrent) mut => VT.[Friend]RegisterForWhenCurrent(&this, hNextTableIsCurrent);

	public HRESULT ConvertNextToCurrent() mut => VT.[Friend]ConvertNextToCurrent(&this);

	public HRESULT GetVersionHash(uint32* pdwVersionHash) mut => VT.[Friend]GetVersionHash(&this, pdwVersionHash);
}

[CRepr]struct IDVB_SDT : IUnknown
{
	public new const Guid IID = .(0x02cad8d3, 0xfe43, 0x48e2, 0x90, 0xbd, 0x45, 0x0e, 0xd9, 0xa8, 0xa5, 0xfd);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IUnknown.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, ISectionList* pSectionList, IMpeg2Data* pMPEGData) Initialize;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint8* pbVal) GetVersionNumber;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint16* pwVal) GetTransportStreamId;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint16* pwVal) GetOriginalNetworkId;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32* pdwVal) GetCountOfRecords;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32 dwRecordIndex, uint16* pwVal) GetRecordServiceId;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32 dwRecordIndex, BOOL* pfVal) GetRecordEITScheduleFlag;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32 dwRecordIndex, BOOL* pfVal) GetRecordEITPresentFollowingFlag;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32 dwRecordIndex, uint8* pbVal) GetRecordRunningStatus;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32 dwRecordIndex, BOOL* pfVal) GetRecordFreeCAMode;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32 dwRecordIndex, uint32* pdwVal) GetRecordCountOfDescriptors;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32 dwRecordIndex, uint32 dwIndex, IGenericDescriptor** ppDescriptor) GetRecordDescriptorByIndex;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32 dwRecordIndex, uint8 bTag, uint32* pdwCookie, IGenericDescriptor** ppDescriptor) GetRecordDescriptorByTag;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, HANDLE hNextTableAvailable) RegisterForNextTable;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IDVB_SDT** ppSDT) GetNextTable;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, HANDLE hNextTableIsCurrent) RegisterForWhenCurrent;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self) ConvertNextToCurrent;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32* pdwVersionHash) GetVersionHash;
	}


	public HRESULT Initialize(ISectionList* pSectionList, IMpeg2Data* pMPEGData) mut => VT.[Friend]Initialize(&this, pSectionList, pMPEGData);

	public HRESULT GetVersionNumber(uint8* pbVal) mut => VT.[Friend]GetVersionNumber(&this, pbVal);

	public HRESULT GetTransportStreamId(uint16* pwVal) mut => VT.[Friend]GetTransportStreamId(&this, pwVal);

	public HRESULT GetOriginalNetworkId(uint16* pwVal) mut => VT.[Friend]GetOriginalNetworkId(&this, pwVal);

	public HRESULT GetCountOfRecords(uint32* pdwVal) mut => VT.[Friend]GetCountOfRecords(&this, pdwVal);

	public HRESULT GetRecordServiceId(uint32 dwRecordIndex, uint16* pwVal) mut => VT.[Friend]GetRecordServiceId(&this, dwRecordIndex, pwVal);

	public HRESULT GetRecordEITScheduleFlag(uint32 dwRecordIndex, BOOL* pfVal) mut => VT.[Friend]GetRecordEITScheduleFlag(&this, dwRecordIndex, pfVal);

	public HRESULT GetRecordEITPresentFollowingFlag(uint32 dwRecordIndex, BOOL* pfVal) mut => VT.[Friend]GetRecordEITPresentFollowingFlag(&this, dwRecordIndex, pfVal);

	public HRESULT GetRecordRunningStatus(uint32 dwRecordIndex, uint8* pbVal) mut => VT.[Friend]GetRecordRunningStatus(&this, dwRecordIndex, pbVal);

	public HRESULT GetRecordFreeCAMode(uint32 dwRecordIndex, BOOL* pfVal) mut => VT.[Friend]GetRecordFreeCAMode(&this, dwRecordIndex, pfVal);

	public HRESULT GetRecordCountOfDescriptors(uint32 dwRecordIndex, uint32* pdwVal) mut => VT.[Friend]GetRecordCountOfDescriptors(&this, dwRecordIndex, pdwVal);

	public HRESULT GetRecordDescriptorByIndex(uint32 dwRecordIndex, uint32 dwIndex, IGenericDescriptor** ppDescriptor) mut => VT.[Friend]GetRecordDescriptorByIndex(&this, dwRecordIndex, dwIndex, ppDescriptor);

	public HRESULT GetRecordDescriptorByTag(uint32 dwRecordIndex, uint8 bTag, uint32* pdwCookie, IGenericDescriptor** ppDescriptor) mut => VT.[Friend]GetRecordDescriptorByTag(&this, dwRecordIndex, bTag, pdwCookie, ppDescriptor);

	public HRESULT RegisterForNextTable(HANDLE hNextTableAvailable) mut => VT.[Friend]RegisterForNextTable(&this, hNextTableAvailable);

	public HRESULT GetNextTable(IDVB_SDT** ppSDT) mut => VT.[Friend]GetNextTable(&this, ppSDT);

	public HRESULT RegisterForWhenCurrent(HANDLE hNextTableIsCurrent) mut => VT.[Friend]RegisterForWhenCurrent(&this, hNextTableIsCurrent);

	public HRESULT ConvertNextToCurrent() mut => VT.[Friend]ConvertNextToCurrent(&this);

	public HRESULT GetVersionHash(uint32* pdwVersionHash) mut => VT.[Friend]GetVersionHash(&this, pdwVersionHash);
}

[CRepr]struct IISDB_SDT : IDVB_SDT
{
	public new const Guid IID = .(0x3f3dc9a2, 0xbb32, 0x4fb9, 0xae, 0x9e, 0xd8, 0x56, 0x84, 0x89, 0x27, 0xa3);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDVB_SDT.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32 dwRecordIndex, uint8* pbVal) GetRecordEITUserDefinedFlags;
	}


	public HRESULT GetRecordEITUserDefinedFlags(uint32 dwRecordIndex, uint8* pbVal) mut => VT.[Friend]GetRecordEITUserDefinedFlags(&this, dwRecordIndex, pbVal);
}

[CRepr]struct IDVB_EIT : IUnknown
{
	public new const Guid IID = .(0x442db029, 0x02cb, 0x4495, 0x8b, 0x92, 0x1c, 0x13, 0x37, 0x5b, 0xce, 0x99);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IUnknown.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, ISectionList* pSectionList, IMpeg2Data* pMPEGData) Initialize;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint8* pbVal) GetVersionNumber;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint16* pwVal) GetServiceId;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint16* pwVal) GetTransportStreamId;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint16* pwVal) GetOriginalNetworkId;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint8* pbVal) GetSegmentLastSectionNumber;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint8* pbVal) GetLastTableId;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32* pdwVal) GetCountOfRecords;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32 dwRecordIndex, uint16* pwVal) GetRecordEventId;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32 dwRecordIndex, MPEG_DATE_AND_TIME* pmdtVal) GetRecordStartTime;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32 dwRecordIndex, MPEG_TIME* pmdVal) GetRecordDuration;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32 dwRecordIndex, uint8* pbVal) GetRecordRunningStatus;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32 dwRecordIndex, BOOL* pfVal) GetRecordFreeCAMode;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32 dwRecordIndex, uint32* pdwVal) GetRecordCountOfDescriptors;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32 dwRecordIndex, uint32 dwIndex, IGenericDescriptor** ppDescriptor) GetRecordDescriptorByIndex;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32 dwRecordIndex, uint8 bTag, uint32* pdwCookie, IGenericDescriptor** ppDescriptor) GetRecordDescriptorByTag;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, HANDLE hNextTableAvailable) RegisterForNextTable;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IDVB_EIT** ppEIT) GetNextTable;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, HANDLE hNextTableIsCurrent) RegisterForWhenCurrent;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self) ConvertNextToCurrent;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32* pdwVersionHash) GetVersionHash;
	}


	public HRESULT Initialize(ISectionList* pSectionList, IMpeg2Data* pMPEGData) mut => VT.[Friend]Initialize(&this, pSectionList, pMPEGData);

	public HRESULT GetVersionNumber(uint8* pbVal) mut => VT.[Friend]GetVersionNumber(&this, pbVal);

	public HRESULT GetServiceId(uint16* pwVal) mut => VT.[Friend]GetServiceId(&this, pwVal);

	public HRESULT GetTransportStreamId(uint16* pwVal) mut => VT.[Friend]GetTransportStreamId(&this, pwVal);

	public HRESULT GetOriginalNetworkId(uint16* pwVal) mut => VT.[Friend]GetOriginalNetworkId(&this, pwVal);

	public HRESULT GetSegmentLastSectionNumber(uint8* pbVal) mut => VT.[Friend]GetSegmentLastSectionNumber(&this, pbVal);

	public HRESULT GetLastTableId(uint8* pbVal) mut => VT.[Friend]GetLastTableId(&this, pbVal);

	public HRESULT GetCountOfRecords(uint32* pdwVal) mut => VT.[Friend]GetCountOfRecords(&this, pdwVal);

	public HRESULT GetRecordEventId(uint32 dwRecordIndex, uint16* pwVal) mut => VT.[Friend]GetRecordEventId(&this, dwRecordIndex, pwVal);

	public HRESULT GetRecordStartTime(uint32 dwRecordIndex, MPEG_DATE_AND_TIME* pmdtVal) mut => VT.[Friend]GetRecordStartTime(&this, dwRecordIndex, pmdtVal);

	public HRESULT GetRecordDuration(uint32 dwRecordIndex, MPEG_TIME* pmdVal) mut => VT.[Friend]GetRecordDuration(&this, dwRecordIndex, pmdVal);

	public HRESULT GetRecordRunningStatus(uint32 dwRecordIndex, uint8* pbVal) mut => VT.[Friend]GetRecordRunningStatus(&this, dwRecordIndex, pbVal);

	public HRESULT GetRecordFreeCAMode(uint32 dwRecordIndex, BOOL* pfVal) mut => VT.[Friend]GetRecordFreeCAMode(&this, dwRecordIndex, pfVal);

	public HRESULT GetRecordCountOfDescriptors(uint32 dwRecordIndex, uint32* pdwVal) mut => VT.[Friend]GetRecordCountOfDescriptors(&this, dwRecordIndex, pdwVal);

	public HRESULT GetRecordDescriptorByIndex(uint32 dwRecordIndex, uint32 dwIndex, IGenericDescriptor** ppDescriptor) mut => VT.[Friend]GetRecordDescriptorByIndex(&this, dwRecordIndex, dwIndex, ppDescriptor);

	public HRESULT GetRecordDescriptorByTag(uint32 dwRecordIndex, uint8 bTag, uint32* pdwCookie, IGenericDescriptor** ppDescriptor) mut => VT.[Friend]GetRecordDescriptorByTag(&this, dwRecordIndex, bTag, pdwCookie, ppDescriptor);

	public HRESULT RegisterForNextTable(HANDLE hNextTableAvailable) mut => VT.[Friend]RegisterForNextTable(&this, hNextTableAvailable);

	public HRESULT GetNextTable(IDVB_EIT** ppEIT) mut => VT.[Friend]GetNextTable(&this, ppEIT);

	public HRESULT RegisterForWhenCurrent(HANDLE hNextTableIsCurrent) mut => VT.[Friend]RegisterForWhenCurrent(&this, hNextTableIsCurrent);

	public HRESULT ConvertNextToCurrent() mut => VT.[Friend]ConvertNextToCurrent(&this);

	public HRESULT GetVersionHash(uint32* pdwVersionHash) mut => VT.[Friend]GetVersionHash(&this, pdwVersionHash);
}

[CRepr]struct IDVB_EIT2 : IDVB_EIT
{
	public new const Guid IID = .(0x61a389e0, 0x9b9e, 0x4ba0, 0xae, 0xea, 0x5d, 0xdd, 0x15, 0x98, 0x20, 0xea);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDVB_EIT.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint8* pbTid, uint8* pbSegment) GetSegmentInfo;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32 dwRecordIndex, uint8* pbVal) GetRecordSection;
	}


	public HRESULT GetSegmentInfo(uint8* pbTid, uint8* pbSegment) mut => VT.[Friend]GetSegmentInfo(&this, pbTid, pbSegment);

	public HRESULT GetRecordSection(uint32 dwRecordIndex, uint8* pbVal) mut => VT.[Friend]GetRecordSection(&this, dwRecordIndex, pbVal);
}

[CRepr]struct IDVB_BAT : IUnknown
{
	public new const Guid IID = .(0xece9bb0c, 0x43b6, 0x4558, 0xa0, 0xec, 0x18, 0x12, 0xc3, 0x4c, 0xd6, 0xca);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IUnknown.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, ISectionList* pSectionList, IMpeg2Data* pMPEGData) Initialize;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint8* pbVal) GetVersionNumber;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint16* pwVal) GetBouquetId;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32* pdwVal) GetCountOfTableDescriptors;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32 dwIndex, IGenericDescriptor** ppDescriptor) GetTableDescriptorByIndex;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint8 bTag, uint32* pdwCookie, IGenericDescriptor** ppDescriptor) GetTableDescriptorByTag;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32* pdwVal) GetCountOfRecords;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32 dwRecordIndex, uint16* pwVal) GetRecordTransportStreamId;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32 dwRecordIndex, uint16* pwVal) GetRecordOriginalNetworkId;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32 dwRecordIndex, uint32* pdwVal) GetRecordCountOfDescriptors;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32 dwRecordIndex, uint32 dwIndex, IGenericDescriptor** ppDescriptor) GetRecordDescriptorByIndex;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32 dwRecordIndex, uint8 bTag, uint32* pdwCookie, IGenericDescriptor** ppDescriptor) GetRecordDescriptorByTag;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, HANDLE hNextTableAvailable) RegisterForNextTable;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IDVB_BAT** ppBAT) GetNextTable;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, HANDLE hNextTableIsCurrent) RegisterForWhenCurrent;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self) ConvertNextToCurrent;
	}


	public HRESULT Initialize(ISectionList* pSectionList, IMpeg2Data* pMPEGData) mut => VT.[Friend]Initialize(&this, pSectionList, pMPEGData);

	public HRESULT GetVersionNumber(uint8* pbVal) mut => VT.[Friend]GetVersionNumber(&this, pbVal);

	public HRESULT GetBouquetId(uint16* pwVal) mut => VT.[Friend]GetBouquetId(&this, pwVal);

	public HRESULT GetCountOfTableDescriptors(uint32* pdwVal) mut => VT.[Friend]GetCountOfTableDescriptors(&this, pdwVal);

	public HRESULT GetTableDescriptorByIndex(uint32 dwIndex, IGenericDescriptor** ppDescriptor) mut => VT.[Friend]GetTableDescriptorByIndex(&this, dwIndex, ppDescriptor);

	public HRESULT GetTableDescriptorByTag(uint8 bTag, uint32* pdwCookie, IGenericDescriptor** ppDescriptor) mut => VT.[Friend]GetTableDescriptorByTag(&this, bTag, pdwCookie, ppDescriptor);

	public HRESULT GetCountOfRecords(uint32* pdwVal) mut => VT.[Friend]GetCountOfRecords(&this, pdwVal);

	public HRESULT GetRecordTransportStreamId(uint32 dwRecordIndex, uint16* pwVal) mut => VT.[Friend]GetRecordTransportStreamId(&this, dwRecordIndex, pwVal);

	public HRESULT GetRecordOriginalNetworkId(uint32 dwRecordIndex, uint16* pwVal) mut => VT.[Friend]GetRecordOriginalNetworkId(&this, dwRecordIndex, pwVal);

	public HRESULT GetRecordCountOfDescriptors(uint32 dwRecordIndex, uint32* pdwVal) mut => VT.[Friend]GetRecordCountOfDescriptors(&this, dwRecordIndex, pdwVal);

	public HRESULT GetRecordDescriptorByIndex(uint32 dwRecordIndex, uint32 dwIndex, IGenericDescriptor** ppDescriptor) mut => VT.[Friend]GetRecordDescriptorByIndex(&this, dwRecordIndex, dwIndex, ppDescriptor);

	public HRESULT GetRecordDescriptorByTag(uint32 dwRecordIndex, uint8 bTag, uint32* pdwCookie, IGenericDescriptor** ppDescriptor) mut => VT.[Friend]GetRecordDescriptorByTag(&this, dwRecordIndex, bTag, pdwCookie, ppDescriptor);

	public HRESULT RegisterForNextTable(HANDLE hNextTableAvailable) mut => VT.[Friend]RegisterForNextTable(&this, hNextTableAvailable);

	public HRESULT GetNextTable(IDVB_BAT** ppBAT) mut => VT.[Friend]GetNextTable(&this, ppBAT);

	public HRESULT RegisterForWhenCurrent(HANDLE hNextTableIsCurrent) mut => VT.[Friend]RegisterForWhenCurrent(&this, hNextTableIsCurrent);

	public HRESULT ConvertNextToCurrent() mut => VT.[Friend]ConvertNextToCurrent(&this);
}

[CRepr]struct IDVB_RST : IUnknown
{
	public new const Guid IID = .(0xf47dcd04, 0x1e23, 0x4fb7, 0x9f, 0x96, 0xb4, 0x0e, 0xea, 0xd1, 0x0b, 0x2b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IUnknown.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, ISectionList* pSectionList) Initialize;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32* pdwVal) GetCountOfRecords;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32 dwRecordIndex, uint16* pwVal) GetRecordTransportStreamId;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32 dwRecordIndex, uint16* pwVal) GetRecordOriginalNetworkId;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32 dwRecordIndex, uint16* pwVal) GetRecordServiceId;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32 dwRecordIndex, uint16* pwVal) GetRecordEventId;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32 dwRecordIndex, uint8* pbVal) GetRecordRunningStatus;
	}


	public HRESULT Initialize(ISectionList* pSectionList) mut => VT.[Friend]Initialize(&this, pSectionList);

	public HRESULT GetCountOfRecords(uint32* pdwVal) mut => VT.[Friend]GetCountOfRecords(&this, pdwVal);

	public HRESULT GetRecordTransportStreamId(uint32 dwRecordIndex, uint16* pwVal) mut => VT.[Friend]GetRecordTransportStreamId(&this, dwRecordIndex, pwVal);

	public HRESULT GetRecordOriginalNetworkId(uint32 dwRecordIndex, uint16* pwVal) mut => VT.[Friend]GetRecordOriginalNetworkId(&this, dwRecordIndex, pwVal);

	public HRESULT GetRecordServiceId(uint32 dwRecordIndex, uint16* pwVal) mut => VT.[Friend]GetRecordServiceId(&this, dwRecordIndex, pwVal);

	public HRESULT GetRecordEventId(uint32 dwRecordIndex, uint16* pwVal) mut => VT.[Friend]GetRecordEventId(&this, dwRecordIndex, pwVal);

	public HRESULT GetRecordRunningStatus(uint32 dwRecordIndex, uint8* pbVal) mut => VT.[Friend]GetRecordRunningStatus(&this, dwRecordIndex, pbVal);
}

[CRepr]struct IDVB_ST : IUnknown
{
	public new const Guid IID = .(0x4d5b9f23, 0x2a02, 0x45de, 0xbc, 0xda, 0x5d, 0x5d, 0xbf, 0xbf, 0xbe, 0x62);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IUnknown.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, ISectionList* pSectionList) Initialize;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint16* pwVal) GetDataLength;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint8** ppData) GetData;
	}


	public HRESULT Initialize(ISectionList* pSectionList) mut => VT.[Friend]Initialize(&this, pSectionList);

	public HRESULT GetDataLength(uint16* pwVal) mut => VT.[Friend]GetDataLength(&this, pwVal);

	public HRESULT GetData(uint8** ppData) mut => VT.[Friend]GetData(&this, ppData);
}

[CRepr]struct IDVB_TDT : IUnknown
{
	public new const Guid IID = .(0x0780dc7d, 0xd55c, 0x4aef, 0x97, 0xe6, 0x6b, 0x75, 0x90, 0x6e, 0x27, 0x96);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IUnknown.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, ISectionList* pSectionList) Initialize;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, MPEG_DATE_AND_TIME* pmdtVal) GetUTCTime;
	}


	public HRESULT Initialize(ISectionList* pSectionList) mut => VT.[Friend]Initialize(&this, pSectionList);

	public HRESULT GetUTCTime(MPEG_DATE_AND_TIME* pmdtVal) mut => VT.[Friend]GetUTCTime(&this, pmdtVal);
}

[CRepr]struct IDVB_TOT : IUnknown
{
	public new const Guid IID = .(0x83295d6a, 0xfaba, 0x4ee1, 0x9b, 0x15, 0x80, 0x67, 0x69, 0x69, 0x10, 0xae);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IUnknown.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, ISectionList* pSectionList) Initialize;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, MPEG_DATE_AND_TIME* pmdtVal) GetUTCTime;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32* pdwVal) GetCountOfTableDescriptors;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32 dwIndex, IGenericDescriptor** ppDescriptor) GetTableDescriptorByIndex;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint8 bTag, uint32* pdwCookie, IGenericDescriptor** ppDescriptor) GetTableDescriptorByTag;
	}


	public HRESULT Initialize(ISectionList* pSectionList) mut => VT.[Friend]Initialize(&this, pSectionList);

	public HRESULT GetUTCTime(MPEG_DATE_AND_TIME* pmdtVal) mut => VT.[Friend]GetUTCTime(&this, pmdtVal);

	public HRESULT GetCountOfTableDescriptors(uint32* pdwVal) mut => VT.[Friend]GetCountOfTableDescriptors(&this, pdwVal);

	public HRESULT GetTableDescriptorByIndex(uint32 dwIndex, IGenericDescriptor** ppDescriptor) mut => VT.[Friend]GetTableDescriptorByIndex(&this, dwIndex, ppDescriptor);

	public HRESULT GetTableDescriptorByTag(uint8 bTag, uint32* pdwCookie, IGenericDescriptor** ppDescriptor) mut => VT.[Friend]GetTableDescriptorByTag(&this, bTag, pdwCookie, ppDescriptor);
}

[CRepr]struct IDVB_DIT : IUnknown
{
	public new const Guid IID = .(0x91bffdf9, 0x9432, 0x410f, 0x86, 0xef, 0x1c, 0x22, 0x8e, 0xd0, 0xad, 0x70);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IUnknown.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, ISectionList* pSectionList) Initialize;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BOOL* pfVal) GetTransitionFlag;
	}


	public HRESULT Initialize(ISectionList* pSectionList) mut => VT.[Friend]Initialize(&this, pSectionList);

	public HRESULT GetTransitionFlag(BOOL* pfVal) mut => VT.[Friend]GetTransitionFlag(&this, pfVal);
}

[CRepr]struct IDVB_SIT : IUnknown
{
	public new const Guid IID = .(0x68cdce53, 0x8bea, 0x45c2, 0x9d, 0x9d, 0xac, 0xf5, 0x75, 0xa0, 0x89, 0xb5);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IUnknown.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, ISectionList* pSectionList, IMpeg2Data* pMPEGData) Initialize;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint8* pbVal) GetVersionNumber;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32* pdwVal) GetCountOfTableDescriptors;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32 dwIndex, IGenericDescriptor** ppDescriptor) GetTableDescriptorByIndex;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint8 bTag, uint32* pdwCookie, IGenericDescriptor** ppDescriptor) GetTableDescriptorByTag;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32* pdwVal) GetCountOfRecords;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32 dwRecordIndex, uint16* pwVal) GetRecordServiceId;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32 dwRecordIndex, uint8* pbVal) GetRecordRunningStatus;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32 dwRecordIndex, uint32* pdwVal) GetRecordCountOfDescriptors;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32 dwRecordIndex, uint32 dwIndex, IGenericDescriptor** ppDescriptor) GetRecordDescriptorByIndex;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32 dwRecordIndex, uint8 bTag, uint32* pdwCookie, IGenericDescriptor** ppDescriptor) GetRecordDescriptorByTag;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, HANDLE hNextTableAvailable) RegisterForNextTable;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32 dwTimeout, IDVB_SIT** ppSIT) GetNextTable;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, HANDLE hNextTableIsCurrent) RegisterForWhenCurrent;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self) ConvertNextToCurrent;
	}


	public HRESULT Initialize(ISectionList* pSectionList, IMpeg2Data* pMPEGData) mut => VT.[Friend]Initialize(&this, pSectionList, pMPEGData);

	public HRESULT GetVersionNumber(uint8* pbVal) mut => VT.[Friend]GetVersionNumber(&this, pbVal);

	public HRESULT GetCountOfTableDescriptors(uint32* pdwVal) mut => VT.[Friend]GetCountOfTableDescriptors(&this, pdwVal);

	public HRESULT GetTableDescriptorByIndex(uint32 dwIndex, IGenericDescriptor** ppDescriptor) mut => VT.[Friend]GetTableDescriptorByIndex(&this, dwIndex, ppDescriptor);

	public HRESULT GetTableDescriptorByTag(uint8 bTag, uint32* pdwCookie, IGenericDescriptor** ppDescriptor) mut => VT.[Friend]GetTableDescriptorByTag(&this, bTag, pdwCookie, ppDescriptor);

	public HRESULT GetCountOfRecords(uint32* pdwVal) mut => VT.[Friend]GetCountOfRecords(&this, pdwVal);

	public HRESULT GetRecordServiceId(uint32 dwRecordIndex, uint16* pwVal) mut => VT.[Friend]GetRecordServiceId(&this, dwRecordIndex, pwVal);

	public HRESULT GetRecordRunningStatus(uint32 dwRecordIndex, uint8* pbVal) mut => VT.[Friend]GetRecordRunningStatus(&this, dwRecordIndex, pbVal);

	public HRESULT GetRecordCountOfDescriptors(uint32 dwRecordIndex, uint32* pdwVal) mut => VT.[Friend]GetRecordCountOfDescriptors(&this, dwRecordIndex, pdwVal);

	public HRESULT GetRecordDescriptorByIndex(uint32 dwRecordIndex, uint32 dwIndex, IGenericDescriptor** ppDescriptor) mut => VT.[Friend]GetRecordDescriptorByIndex(&this, dwRecordIndex, dwIndex, ppDescriptor);

	public HRESULT GetRecordDescriptorByTag(uint32 dwRecordIndex, uint8 bTag, uint32* pdwCookie, IGenericDescriptor** ppDescriptor) mut => VT.[Friend]GetRecordDescriptorByTag(&this, dwRecordIndex, bTag, pdwCookie, ppDescriptor);

	public HRESULT RegisterForNextTable(HANDLE hNextTableAvailable) mut => VT.[Friend]RegisterForNextTable(&this, hNextTableAvailable);

	public HRESULT GetNextTable(uint32 dwTimeout, IDVB_SIT** ppSIT) mut => VT.[Friend]GetNextTable(&this, dwTimeout, ppSIT);

	public HRESULT RegisterForWhenCurrent(HANDLE hNextTableIsCurrent) mut => VT.[Friend]RegisterForWhenCurrent(&this, hNextTableIsCurrent);

	public HRESULT ConvertNextToCurrent() mut => VT.[Friend]ConvertNextToCurrent(&this);
}

[CRepr]struct IISDB_BIT : IUnknown
{
	public new const Guid IID = .(0x537cd71e, 0x0e46, 0x4173, 0x90, 0x01, 0xba, 0x04, 0x3f, 0x3e, 0x49, 0xe2);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IUnknown.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, ISectionList* pSectionList, IMpeg2Data* pMPEGData) Initialize;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint8* pbVal) GetVersionNumber;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint16* pwVal) GetOriginalNetworkId;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint8* pbVal) GetBroadcastViewPropriety;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32* pdwVal) GetCountOfTableDescriptors;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32 dwIndex, IGenericDescriptor** ppDescriptor) GetTableDescriptorByIndex;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint8 bTag, uint32* pdwCookie, IGenericDescriptor** ppDescriptor) GetTableDescriptorByTag;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32* pdwVal) GetCountOfRecords;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32 dwRecordIndex, uint8* pbVal) GetRecordBroadcasterId;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32 dwRecordIndex, uint32* pdwVal) GetRecordCountOfDescriptors;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32 dwRecordIndex, uint32 dwIndex, IGenericDescriptor** ppDescriptor) GetRecordDescriptorByIndex;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32 dwRecordIndex, uint8 bTag, uint32* pdwCookie, IGenericDescriptor** ppDescriptor) GetRecordDescriptorByTag;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32* pdwVersionHash) GetVersionHash;
	}


	public HRESULT Initialize(ISectionList* pSectionList, IMpeg2Data* pMPEGData) mut => VT.[Friend]Initialize(&this, pSectionList, pMPEGData);

	public HRESULT GetVersionNumber(uint8* pbVal) mut => VT.[Friend]GetVersionNumber(&this, pbVal);

	public HRESULT GetOriginalNetworkId(uint16* pwVal) mut => VT.[Friend]GetOriginalNetworkId(&this, pwVal);

	public HRESULT GetBroadcastViewPropriety(uint8* pbVal) mut => VT.[Friend]GetBroadcastViewPropriety(&this, pbVal);

	public HRESULT GetCountOfTableDescriptors(uint32* pdwVal) mut => VT.[Friend]GetCountOfTableDescriptors(&this, pdwVal);

	public HRESULT GetTableDescriptorByIndex(uint32 dwIndex, IGenericDescriptor** ppDescriptor) mut => VT.[Friend]GetTableDescriptorByIndex(&this, dwIndex, ppDescriptor);

	public HRESULT GetTableDescriptorByTag(uint8 bTag, uint32* pdwCookie, IGenericDescriptor** ppDescriptor) mut => VT.[Friend]GetTableDescriptorByTag(&this, bTag, pdwCookie, ppDescriptor);

	public HRESULT GetCountOfRecords(uint32* pdwVal) mut => VT.[Friend]GetCountOfRecords(&this, pdwVal);

	public HRESULT GetRecordBroadcasterId(uint32 dwRecordIndex, uint8* pbVal) mut => VT.[Friend]GetRecordBroadcasterId(&this, dwRecordIndex, pbVal);

	public HRESULT GetRecordCountOfDescriptors(uint32 dwRecordIndex, uint32* pdwVal) mut => VT.[Friend]GetRecordCountOfDescriptors(&this, dwRecordIndex, pdwVal);

	public HRESULT GetRecordDescriptorByIndex(uint32 dwRecordIndex, uint32 dwIndex, IGenericDescriptor** ppDescriptor) mut => VT.[Friend]GetRecordDescriptorByIndex(&this, dwRecordIndex, dwIndex, ppDescriptor);

	public HRESULT GetRecordDescriptorByTag(uint32 dwRecordIndex, uint8 bTag, uint32* pdwCookie, IGenericDescriptor** ppDescriptor) mut => VT.[Friend]GetRecordDescriptorByTag(&this, dwRecordIndex, bTag, pdwCookie, ppDescriptor);

	public HRESULT GetVersionHash(uint32* pdwVersionHash) mut => VT.[Friend]GetVersionHash(&this, pdwVersionHash);
}

[CRepr]struct IISDB_NBIT : IUnknown
{
	public new const Guid IID = .(0x1b1863ef, 0x08f1, 0x40b7, 0xa5, 0x59, 0x3b, 0x1e, 0xff, 0x8c, 0xaf, 0xa6);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IUnknown.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, ISectionList* pSectionList, IMpeg2Data* pMPEGData) Initialize;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint8* pbVal) GetVersionNumber;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint16* pwVal) GetOriginalNetworkId;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32* pdwVal) GetCountOfRecords;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32 dwRecordIndex, uint16* pwVal) GetRecordInformationId;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32 dwRecordIndex, uint8* pbVal) GetRecordInformationType;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32 dwRecordIndex, uint8* pbVal) GetRecordDescriptionBodyLocation;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32 dwRecordIndex, uint8* pbVal) GetRecordMessageSectionNumber;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32 dwRecordIndex, uint8* pbVal) GetRecordUserDefined;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32 dwRecordIndex, uint8* pbVal) GetRecordNumberOfKeys;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32 dwRecordIndex, uint8** pbKeys) GetRecordKeys;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32 dwRecordIndex, uint32* pdwVal) GetRecordCountOfDescriptors;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32 dwRecordIndex, uint32 dwIndex, IGenericDescriptor** ppDescriptor) GetRecordDescriptorByIndex;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32 dwRecordIndex, uint8 bTag, uint32* pdwCookie, IGenericDescriptor** ppDescriptor) GetRecordDescriptorByTag;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32* pdwVersionHash) GetVersionHash;
	}


	public HRESULT Initialize(ISectionList* pSectionList, IMpeg2Data* pMPEGData) mut => VT.[Friend]Initialize(&this, pSectionList, pMPEGData);

	public HRESULT GetVersionNumber(uint8* pbVal) mut => VT.[Friend]GetVersionNumber(&this, pbVal);

	public HRESULT GetOriginalNetworkId(uint16* pwVal) mut => VT.[Friend]GetOriginalNetworkId(&this, pwVal);

	public HRESULT GetCountOfRecords(uint32* pdwVal) mut => VT.[Friend]GetCountOfRecords(&this, pdwVal);

	public HRESULT GetRecordInformationId(uint32 dwRecordIndex, uint16* pwVal) mut => VT.[Friend]GetRecordInformationId(&this, dwRecordIndex, pwVal);

	public HRESULT GetRecordInformationType(uint32 dwRecordIndex, uint8* pbVal) mut => VT.[Friend]GetRecordInformationType(&this, dwRecordIndex, pbVal);

	public HRESULT GetRecordDescriptionBodyLocation(uint32 dwRecordIndex, uint8* pbVal) mut => VT.[Friend]GetRecordDescriptionBodyLocation(&this, dwRecordIndex, pbVal);

	public HRESULT GetRecordMessageSectionNumber(uint32 dwRecordIndex, uint8* pbVal) mut => VT.[Friend]GetRecordMessageSectionNumber(&this, dwRecordIndex, pbVal);

	public HRESULT GetRecordUserDefined(uint32 dwRecordIndex, uint8* pbVal) mut => VT.[Friend]GetRecordUserDefined(&this, dwRecordIndex, pbVal);

	public HRESULT GetRecordNumberOfKeys(uint32 dwRecordIndex, uint8* pbVal) mut => VT.[Friend]GetRecordNumberOfKeys(&this, dwRecordIndex, pbVal);

	public HRESULT GetRecordKeys(uint32 dwRecordIndex, uint8** pbKeys) mut => VT.[Friend]GetRecordKeys(&this, dwRecordIndex, pbKeys);

	public HRESULT GetRecordCountOfDescriptors(uint32 dwRecordIndex, uint32* pdwVal) mut => VT.[Friend]GetRecordCountOfDescriptors(&this, dwRecordIndex, pdwVal);

	public HRESULT GetRecordDescriptorByIndex(uint32 dwRecordIndex, uint32 dwIndex, IGenericDescriptor** ppDescriptor) mut => VT.[Friend]GetRecordDescriptorByIndex(&this, dwRecordIndex, dwIndex, ppDescriptor);

	public HRESULT GetRecordDescriptorByTag(uint32 dwRecordIndex, uint8 bTag, uint32* pdwCookie, IGenericDescriptor** ppDescriptor) mut => VT.[Friend]GetRecordDescriptorByTag(&this, dwRecordIndex, bTag, pdwCookie, ppDescriptor);

	public HRESULT GetVersionHash(uint32* pdwVersionHash) mut => VT.[Friend]GetVersionHash(&this, pdwVersionHash);
}

[CRepr]struct IISDB_LDT : IUnknown
{
	public new const Guid IID = .(0x141a546b, 0x02ff, 0x4fb9, 0xa3, 0xa3, 0x2f, 0x07, 0x4b, 0x74, 0xa9, 0xa9);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IUnknown.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, ISectionList* pSectionList, IMpeg2Data* pMPEGData) Initialize;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint8* pbVal) GetVersionNumber;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint16* pwVal) GetOriginalServiceId;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint16* pwVal) GetTransportStreamId;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint16* pwVal) GetOriginalNetworkId;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32* pdwVal) GetCountOfRecords;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32 dwRecordIndex, uint16* pwVal) GetRecordDescriptionId;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32 dwRecordIndex, uint32* pdwVal) GetRecordCountOfDescriptors;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32 dwRecordIndex, uint32 dwIndex, IGenericDescriptor** ppDescriptor) GetRecordDescriptorByIndex;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32 dwRecordIndex, uint8 bTag, uint32* pdwCookie, IGenericDescriptor** ppDescriptor) GetRecordDescriptorByTag;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32* pdwVersionHash) GetVersionHash;
	}


	public HRESULT Initialize(ISectionList* pSectionList, IMpeg2Data* pMPEGData) mut => VT.[Friend]Initialize(&this, pSectionList, pMPEGData);

	public HRESULT GetVersionNumber(uint8* pbVal) mut => VT.[Friend]GetVersionNumber(&this, pbVal);

	public HRESULT GetOriginalServiceId(uint16* pwVal) mut => VT.[Friend]GetOriginalServiceId(&this, pwVal);

	public HRESULT GetTransportStreamId(uint16* pwVal) mut => VT.[Friend]GetTransportStreamId(&this, pwVal);

	public HRESULT GetOriginalNetworkId(uint16* pwVal) mut => VT.[Friend]GetOriginalNetworkId(&this, pwVal);

	public HRESULT GetCountOfRecords(uint32* pdwVal) mut => VT.[Friend]GetCountOfRecords(&this, pdwVal);

	public HRESULT GetRecordDescriptionId(uint32 dwRecordIndex, uint16* pwVal) mut => VT.[Friend]GetRecordDescriptionId(&this, dwRecordIndex, pwVal);

	public HRESULT GetRecordCountOfDescriptors(uint32 dwRecordIndex, uint32* pdwVal) mut => VT.[Friend]GetRecordCountOfDescriptors(&this, dwRecordIndex, pdwVal);

	public HRESULT GetRecordDescriptorByIndex(uint32 dwRecordIndex, uint32 dwIndex, IGenericDescriptor** ppDescriptor) mut => VT.[Friend]GetRecordDescriptorByIndex(&this, dwRecordIndex, dwIndex, ppDescriptor);

	public HRESULT GetRecordDescriptorByTag(uint32 dwRecordIndex, uint8 bTag, uint32* pdwCookie, IGenericDescriptor** ppDescriptor) mut => VT.[Friend]GetRecordDescriptorByTag(&this, dwRecordIndex, bTag, pdwCookie, ppDescriptor);

	public HRESULT GetVersionHash(uint32* pdwVersionHash) mut => VT.[Friend]GetVersionHash(&this, pdwVersionHash);
}

[CRepr]struct IISDB_SDTT : IUnknown
{
	public new const Guid IID = .(0xee60ef2d, 0x813a, 0x4dc7, 0xbf, 0x92, 0xea, 0x13, 0xda, 0xc8, 0x53, 0x13);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IUnknown.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, ISectionList* pSectionList, IMpeg2Data* pMPEGData) Initialize;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint8* pbVal) GetVersionNumber;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint16* pwVal) GetTableIdExt;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint16* pwVal) GetTransportStreamId;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint16* pwVal) GetOriginalNetworkId;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint16* pwVal) GetServiceId;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32* pdwVal) GetCountOfRecords;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32 dwRecordIndex, uint8* pbVal) GetRecordGroup;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32 dwRecordIndex, uint16* pwVal) GetRecordTargetVersion;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32 dwRecordIndex, uint16* pwVal) GetRecordNewVersion;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32 dwRecordIndex, uint8* pbVal) GetRecordDownloadLevel;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32 dwRecordIndex, uint8* pbVal) GetRecordVersionIndicator;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32 dwRecordIndex, uint8* pbVal) GetRecordScheduleTimeShiftInformation;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32 dwRecordIndex, uint32* pdwVal) GetRecordCountOfSchedules;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32 dwRecordIndex, uint32 dwIndex, MPEG_DATE_AND_TIME* pmdtVal) GetRecordStartTimeByIndex;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32 dwRecordIndex, uint32 dwIndex, MPEG_TIME* pmdVal) GetRecordDurationByIndex;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32 dwRecordIndex, uint32* pdwVal) GetRecordCountOfDescriptors;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32 dwRecordIndex, uint32 dwIndex, IGenericDescriptor** ppDescriptor) GetRecordDescriptorByIndex;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32 dwRecordIndex, uint8 bTag, uint32* pdwCookie, IGenericDescriptor** ppDescriptor) GetRecordDescriptorByTag;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32* pdwVersionHash) GetVersionHash;
	}


	public HRESULT Initialize(ISectionList* pSectionList, IMpeg2Data* pMPEGData) mut => VT.[Friend]Initialize(&this, pSectionList, pMPEGData);

	public HRESULT GetVersionNumber(uint8* pbVal) mut => VT.[Friend]GetVersionNumber(&this, pbVal);

	public HRESULT GetTableIdExt(uint16* pwVal) mut => VT.[Friend]GetTableIdExt(&this, pwVal);

	public HRESULT GetTransportStreamId(uint16* pwVal) mut => VT.[Friend]GetTransportStreamId(&this, pwVal);

	public HRESULT GetOriginalNetworkId(uint16* pwVal) mut => VT.[Friend]GetOriginalNetworkId(&this, pwVal);

	public HRESULT GetServiceId(uint16* pwVal) mut => VT.[Friend]GetServiceId(&this, pwVal);

	public HRESULT GetCountOfRecords(uint32* pdwVal) mut => VT.[Friend]GetCountOfRecords(&this, pdwVal);

	public HRESULT GetRecordGroup(uint32 dwRecordIndex, uint8* pbVal) mut => VT.[Friend]GetRecordGroup(&this, dwRecordIndex, pbVal);

	public HRESULT GetRecordTargetVersion(uint32 dwRecordIndex, uint16* pwVal) mut => VT.[Friend]GetRecordTargetVersion(&this, dwRecordIndex, pwVal);

	public HRESULT GetRecordNewVersion(uint32 dwRecordIndex, uint16* pwVal) mut => VT.[Friend]GetRecordNewVersion(&this, dwRecordIndex, pwVal);

	public HRESULT GetRecordDownloadLevel(uint32 dwRecordIndex, uint8* pbVal) mut => VT.[Friend]GetRecordDownloadLevel(&this, dwRecordIndex, pbVal);

	public HRESULT GetRecordVersionIndicator(uint32 dwRecordIndex, uint8* pbVal) mut => VT.[Friend]GetRecordVersionIndicator(&this, dwRecordIndex, pbVal);

	public HRESULT GetRecordScheduleTimeShiftInformation(uint32 dwRecordIndex, uint8* pbVal) mut => VT.[Friend]GetRecordScheduleTimeShiftInformation(&this, dwRecordIndex, pbVal);

	public HRESULT GetRecordCountOfSchedules(uint32 dwRecordIndex, uint32* pdwVal) mut => VT.[Friend]GetRecordCountOfSchedules(&this, dwRecordIndex, pdwVal);

	public HRESULT GetRecordStartTimeByIndex(uint32 dwRecordIndex, uint32 dwIndex, MPEG_DATE_AND_TIME* pmdtVal) mut => VT.[Friend]GetRecordStartTimeByIndex(&this, dwRecordIndex, dwIndex, pmdtVal);

	public HRESULT GetRecordDurationByIndex(uint32 dwRecordIndex, uint32 dwIndex, MPEG_TIME* pmdVal) mut => VT.[Friend]GetRecordDurationByIndex(&this, dwRecordIndex, dwIndex, pmdVal);

	public HRESULT GetRecordCountOfDescriptors(uint32 dwRecordIndex, uint32* pdwVal) mut => VT.[Friend]GetRecordCountOfDescriptors(&this, dwRecordIndex, pdwVal);

	public HRESULT GetRecordDescriptorByIndex(uint32 dwRecordIndex, uint32 dwIndex, IGenericDescriptor** ppDescriptor) mut => VT.[Friend]GetRecordDescriptorByIndex(&this, dwRecordIndex, dwIndex, ppDescriptor);

	public HRESULT GetRecordDescriptorByTag(uint32 dwRecordIndex, uint8 bTag, uint32* pdwCookie, IGenericDescriptor** ppDescriptor) mut => VT.[Friend]GetRecordDescriptorByTag(&this, dwRecordIndex, bTag, pdwCookie, ppDescriptor);

	public HRESULT GetVersionHash(uint32* pdwVersionHash) mut => VT.[Friend]GetVersionHash(&this, pdwVersionHash);
}

[CRepr]struct IISDB_CDT : IUnknown
{
	public new const Guid IID = .(0x25fa92c2, 0x8b80, 0x4787, 0xa8, 0x41, 0x3a, 0x0e, 0x8f, 0x17, 0x98, 0x4b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IUnknown.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, ISectionList* pSectionList, IMpeg2Data* pMPEGData, uint8 bSectionNumber) Initialize;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint8* pbVal) GetVersionNumber;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint16* pwVal) GetDownloadDataId;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint8* pbVal) GetSectionNumber;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint16* pwVal) GetOriginalNetworkId;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint8* pbVal) GetDataType;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32* pdwVal) GetCountOfTableDescriptors;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32 dwIndex, IGenericDescriptor** ppDescriptor) GetTableDescriptorByIndex;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint8 bTag, uint32* pdwCookie, IGenericDescriptor** ppDescriptor) GetTableDescriptorByTag;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32* pdwVal) GetSizeOfDataModule;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint8** pbData) GetDataModule;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32* pdwVersionHash) GetVersionHash;
	}


	public HRESULT Initialize(ISectionList* pSectionList, IMpeg2Data* pMPEGData, uint8 bSectionNumber) mut => VT.[Friend]Initialize(&this, pSectionList, pMPEGData, bSectionNumber);

	public HRESULT GetVersionNumber(uint8* pbVal) mut => VT.[Friend]GetVersionNumber(&this, pbVal);

	public HRESULT GetDownloadDataId(uint16* pwVal) mut => VT.[Friend]GetDownloadDataId(&this, pwVal);

	public HRESULT GetSectionNumber(uint8* pbVal) mut => VT.[Friend]GetSectionNumber(&this, pbVal);

	public HRESULT GetOriginalNetworkId(uint16* pwVal) mut => VT.[Friend]GetOriginalNetworkId(&this, pwVal);

	public HRESULT GetDataType(uint8* pbVal) mut => VT.[Friend]GetDataType(&this, pbVal);

	public HRESULT GetCountOfTableDescriptors(uint32* pdwVal) mut => VT.[Friend]GetCountOfTableDescriptors(&this, pdwVal);

	public HRESULT GetTableDescriptorByIndex(uint32 dwIndex, IGenericDescriptor** ppDescriptor) mut => VT.[Friend]GetTableDescriptorByIndex(&this, dwIndex, ppDescriptor);

	public HRESULT GetTableDescriptorByTag(uint8 bTag, uint32* pdwCookie, IGenericDescriptor** ppDescriptor) mut => VT.[Friend]GetTableDescriptorByTag(&this, bTag, pdwCookie, ppDescriptor);

	public HRESULT GetSizeOfDataModule(uint32* pdwVal) mut => VT.[Friend]GetSizeOfDataModule(&this, pdwVal);

	public HRESULT GetDataModule(uint8** pbData) mut => VT.[Friend]GetDataModule(&this, pbData);

	public HRESULT GetVersionHash(uint32* pdwVersionHash) mut => VT.[Friend]GetVersionHash(&this, pdwVersionHash);
}

[CRepr]struct IISDB_EMM : IUnknown
{
	public new const Guid IID = .(0x0edb556d, 0x43ad, 0x4938, 0x96, 0x68, 0x32, 0x1b, 0x2f, 0xfe, 0xcf, 0xd3);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IUnknown.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, ISectionList* pSectionList, IMpeg2Data* pMPEGData) Initialize;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint8* pbVal) GetVersionNumber;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint16* pwVal) GetTableIdExtension;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint16* pwBufferLength, uint8* pbBuffer) GetDataBytes;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint16* pwLength, uint8** ppbMessage) GetSharedEmmMessage;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IUnknown* pUnknown, uint16* pwLength, uint8** ppbMessage) GetIndividualEmmMessage;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32* pdwVersionHash) GetVersionHash;
	}


	public HRESULT Initialize(ISectionList* pSectionList, IMpeg2Data* pMPEGData) mut => VT.[Friend]Initialize(&this, pSectionList, pMPEGData);

	public HRESULT GetVersionNumber(uint8* pbVal) mut => VT.[Friend]GetVersionNumber(&this, pbVal);

	public HRESULT GetTableIdExtension(uint16* pwVal) mut => VT.[Friend]GetTableIdExtension(&this, pwVal);

	public HRESULT GetDataBytes(uint16* pwBufferLength, uint8* pbBuffer) mut => VT.[Friend]GetDataBytes(&this, pwBufferLength, pbBuffer);

	public HRESULT GetSharedEmmMessage(uint16* pwLength, uint8** ppbMessage) mut => VT.[Friend]GetSharedEmmMessage(&this, pwLength, ppbMessage);

	public HRESULT GetIndividualEmmMessage(IUnknown* pUnknown, uint16* pwLength, uint8** ppbMessage) mut => VT.[Friend]GetIndividualEmmMessage(&this, pUnknown, pwLength, ppbMessage);

	public HRESULT GetVersionHash(uint32* pdwVersionHash) mut => VT.[Friend]GetVersionHash(&this, pdwVersionHash);
}

[CRepr]struct IDvbServiceAttributeDescriptor : IUnknown
{
	public new const Guid IID = .(0x0f37bd92, 0xd6a1, 0x4854, 0xb9, 0x50, 0x3a, 0x96, 0x9d, 0x27, 0xf3, 0x0e);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IUnknown.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint8* pbVal) GetTag;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint8* pbVal) GetLength;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint8* pbVal) GetCountOfRecords;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint8 bRecordIndex, uint16* pwVal) GetRecordServiceId;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint8 bRecordIndex, BOOL* pfVal) GetRecordNumericSelectionFlag;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint8 bRecordIndex, BOOL* pfVal) GetRecordVisibleServiceFlag;
	}


	public HRESULT GetTag(uint8* pbVal) mut => VT.[Friend]GetTag(&this, pbVal);

	public HRESULT GetLength(uint8* pbVal) mut => VT.[Friend]GetLength(&this, pbVal);

	public HRESULT GetCountOfRecords(uint8* pbVal) mut => VT.[Friend]GetCountOfRecords(&this, pbVal);

	public HRESULT GetRecordServiceId(uint8 bRecordIndex, uint16* pwVal) mut => VT.[Friend]GetRecordServiceId(&this, bRecordIndex, pwVal);

	public HRESULT GetRecordNumericSelectionFlag(uint8 bRecordIndex, BOOL* pfVal) mut => VT.[Friend]GetRecordNumericSelectionFlag(&this, bRecordIndex, pfVal);

	public HRESULT GetRecordVisibleServiceFlag(uint8 bRecordIndex, BOOL* pfVal) mut => VT.[Friend]GetRecordVisibleServiceFlag(&this, bRecordIndex, pfVal);
}

[CRepr]struct IDvbContentIdentifierDescriptor : IUnknown
{
	public new const Guid IID = .(0x05e0c1ea, 0xf661, 0x4053, 0x9f, 0xbf, 0xd9, 0x3b, 0x28, 0x35, 0x98, 0x38);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IUnknown.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint8* pbVal) GetTag;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint8* pbVal) GetLength;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint8* pbVal) GetCountOfRecords;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint8 bRecordIndex, uint8* pbType, uint8* pbLocation, uint8* pbLength, uint8** ppbBytes) GetRecordCrid;
	}


	public HRESULT GetTag(uint8* pbVal) mut => VT.[Friend]GetTag(&this, pbVal);

	public HRESULT GetLength(uint8* pbVal) mut => VT.[Friend]GetLength(&this, pbVal);

	public HRESULT GetCountOfRecords(uint8* pbVal) mut => VT.[Friend]GetCountOfRecords(&this, pbVal);

	public HRESULT GetRecordCrid(uint8 bRecordIndex, uint8* pbType, uint8* pbLocation, uint8* pbLength, uint8** ppbBytes) mut => VT.[Friend]GetRecordCrid(&this, bRecordIndex, pbType, pbLocation, pbLength, ppbBytes);
}

[CRepr]struct IDvbDefaultAuthorityDescriptor : IUnknown
{
	public new const Guid IID = .(0x05ec24d1, 0x3a31, 0x44e7, 0xb4, 0x08, 0x67, 0xc6, 0x0a, 0x35, 0x22, 0x76);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IUnknown.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint8* pbVal) GetTag;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint8* pbVal) GetLength;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint8* pbLength, uint8** ppbBytes) GetDefaultAuthority;
	}


	public HRESULT GetTag(uint8* pbVal) mut => VT.[Friend]GetTag(&this, pbVal);

	public HRESULT GetLength(uint8* pbVal) mut => VT.[Friend]GetLength(&this, pbVal);

	public HRESULT GetDefaultAuthority(uint8* pbLength, uint8** ppbBytes) mut => VT.[Friend]GetDefaultAuthority(&this, pbLength, ppbBytes);
}

[CRepr]struct IDvbSatelliteDeliverySystemDescriptor : IUnknown
{
	public new const Guid IID = .(0x02f2225a, 0x805b, 0x4ec5, 0xa9, 0xa6, 0xf9, 0xb5, 0x91, 0x3c, 0xd4, 0x70);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IUnknown.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint8* pbVal) GetTag;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint8* pbVal) GetLength;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32* pdwVal) GetFrequency;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint16* pwVal) GetOrbitalPosition;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint8* pbVal) GetWestEastFlag;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint8* pbVal) GetPolarization;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint8* pbVal) GetModulation;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32* pdwVal) GetSymbolRate;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint8* pbVal) GetFECInner;
	}


	public HRESULT GetTag(uint8* pbVal) mut => VT.[Friend]GetTag(&this, pbVal);

	public HRESULT GetLength(uint8* pbVal) mut => VT.[Friend]GetLength(&this, pbVal);

	public HRESULT GetFrequency(uint32* pdwVal) mut => VT.[Friend]GetFrequency(&this, pdwVal);

	public HRESULT GetOrbitalPosition(uint16* pwVal) mut => VT.[Friend]GetOrbitalPosition(&this, pwVal);

	public HRESULT GetWestEastFlag(uint8* pbVal) mut => VT.[Friend]GetWestEastFlag(&this, pbVal);

	public HRESULT GetPolarization(uint8* pbVal) mut => VT.[Friend]GetPolarization(&this, pbVal);

	public HRESULT GetModulation(uint8* pbVal) mut => VT.[Friend]GetModulation(&this, pbVal);

	public HRESULT GetSymbolRate(uint32* pdwVal) mut => VT.[Friend]GetSymbolRate(&this, pdwVal);

	public HRESULT GetFECInner(uint8* pbVal) mut => VT.[Friend]GetFECInner(&this, pbVal);
}

[CRepr]struct IDvbCableDeliverySystemDescriptor : IUnknown
{
	public new const Guid IID = .(0xdfb98e36, 0x9e1a, 0x4862, 0x99, 0x46, 0x99, 0x3a, 0x4e, 0x59, 0x01, 0x7b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IUnknown.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint8* pbVal) GetTag;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint8* pbVal) GetLength;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32* pdwVal) GetFrequency;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint8* pbVal) GetFECOuter;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint8* pbVal) GetModulation;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32* pdwVal) GetSymbolRate;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint8* pbVal) GetFECInner;
	}


	public HRESULT GetTag(uint8* pbVal) mut => VT.[Friend]GetTag(&this, pbVal);

	public HRESULT GetLength(uint8* pbVal) mut => VT.[Friend]GetLength(&this, pbVal);

	public HRESULT GetFrequency(uint32* pdwVal) mut => VT.[Friend]GetFrequency(&this, pdwVal);

	public HRESULT GetFECOuter(uint8* pbVal) mut => VT.[Friend]GetFECOuter(&this, pbVal);

	public HRESULT GetModulation(uint8* pbVal) mut => VT.[Friend]GetModulation(&this, pbVal);

	public HRESULT GetSymbolRate(uint32* pdwVal) mut => VT.[Friend]GetSymbolRate(&this, pdwVal);

	public HRESULT GetFECInner(uint8* pbVal) mut => VT.[Friend]GetFECInner(&this, pbVal);
}

[CRepr]struct IDvbTerrestrialDeliverySystemDescriptor : IUnknown
{
	public new const Guid IID = .(0xed7e1b91, 0xd12e, 0x420c, 0xb4, 0x1d, 0xa4, 0x9d, 0x84, 0xfe, 0x18, 0x23);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IUnknown.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint8* pbVal) GetTag;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint8* pbVal) GetLength;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32* pdwVal) GetCentreFrequency;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint8* pbVal) GetBandwidth;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint8* pbVal) GetConstellation;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint8* pbVal) GetHierarchyInformation;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint8* pbVal) GetCodeRateHPStream;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint8* pbVal) GetCodeRateLPStream;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint8* pbVal) GetGuardInterval;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint8* pbVal) GetTransmissionMode;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint8* pbVal) GetOtherFrequencyFlag;
	}


	public HRESULT GetTag(uint8* pbVal) mut => VT.[Friend]GetTag(&this, pbVal);

	public HRESULT GetLength(uint8* pbVal) mut => VT.[Friend]GetLength(&this, pbVal);

	public HRESULT GetCentreFrequency(uint32* pdwVal) mut => VT.[Friend]GetCentreFrequency(&this, pdwVal);

	public HRESULT GetBandwidth(uint8* pbVal) mut => VT.[Friend]GetBandwidth(&this, pbVal);

	public HRESULT GetConstellation(uint8* pbVal) mut => VT.[Friend]GetConstellation(&this, pbVal);

	public HRESULT GetHierarchyInformation(uint8* pbVal) mut => VT.[Friend]GetHierarchyInformation(&this, pbVal);

	public HRESULT GetCodeRateHPStream(uint8* pbVal) mut => VT.[Friend]GetCodeRateHPStream(&this, pbVal);

	public HRESULT GetCodeRateLPStream(uint8* pbVal) mut => VT.[Friend]GetCodeRateLPStream(&this, pbVal);

	public HRESULT GetGuardInterval(uint8* pbVal) mut => VT.[Friend]GetGuardInterval(&this, pbVal);

	public HRESULT GetTransmissionMode(uint8* pbVal) mut => VT.[Friend]GetTransmissionMode(&this, pbVal);

	public HRESULT GetOtherFrequencyFlag(uint8* pbVal) mut => VT.[Friend]GetOtherFrequencyFlag(&this, pbVal);
}

[CRepr]struct IDvbTerrestrial2DeliverySystemDescriptor : IUnknown
{
	public new const Guid IID = .(0x20ee9be9, 0xcd57, 0x49ab, 0x8f, 0x6e, 0x1d, 0x07, 0xae, 0xb8, 0xe4, 0x82);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IUnknown.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint8* pbVal) GetTag;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint8* pbVal) GetLength;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint8* pbVal) GetTagExtension;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32* pdwVal) GetCentreFrequency;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint8* pbVal) GetPLPId;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint16* pwVal) GetT2SystemId;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint8* pbVal) GetMultipleInputMode;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint8* pbVal) GetBandwidth;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint8* pbVal) GetGuardInterval;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint8* pbVal) GetTransmissionMode;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint16* pwVal) GetCellId;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint8* pbVal) GetOtherFrequencyFlag;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint8* pbVal) GetTFSFlag;
	}


	public HRESULT GetTag(uint8* pbVal) mut => VT.[Friend]GetTag(&this, pbVal);

	public HRESULT GetLength(uint8* pbVal) mut => VT.[Friend]GetLength(&this, pbVal);

	public HRESULT GetTagExtension(uint8* pbVal) mut => VT.[Friend]GetTagExtension(&this, pbVal);

	public HRESULT GetCentreFrequency(uint32* pdwVal) mut => VT.[Friend]GetCentreFrequency(&this, pdwVal);

	public HRESULT GetPLPId(uint8* pbVal) mut => VT.[Friend]GetPLPId(&this, pbVal);

	public HRESULT GetT2SystemId(uint16* pwVal) mut => VT.[Friend]GetT2SystemId(&this, pwVal);

	public HRESULT GetMultipleInputMode(uint8* pbVal) mut => VT.[Friend]GetMultipleInputMode(&this, pbVal);

	public HRESULT GetBandwidth(uint8* pbVal) mut => VT.[Friend]GetBandwidth(&this, pbVal);

	public HRESULT GetGuardInterval(uint8* pbVal) mut => VT.[Friend]GetGuardInterval(&this, pbVal);

	public HRESULT GetTransmissionMode(uint8* pbVal) mut => VT.[Friend]GetTransmissionMode(&this, pbVal);

	public HRESULT GetCellId(uint16* pwVal) mut => VT.[Friend]GetCellId(&this, pwVal);

	public HRESULT GetOtherFrequencyFlag(uint8* pbVal) mut => VT.[Friend]GetOtherFrequencyFlag(&this, pbVal);

	public HRESULT GetTFSFlag(uint8* pbVal) mut => VT.[Friend]GetTFSFlag(&this, pbVal);
}

[CRepr]struct IDvbFrequencyListDescriptor : IUnknown
{
	public new const Guid IID = .(0x1cadb613, 0xe1dd, 0x4512, 0xaf, 0xa8, 0xbb, 0x7a, 0x00, 0x7e, 0xf8, 0xb1);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IUnknown.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint8* pbVal) GetTag;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint8* pbVal) GetLength;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint8* pbVal) GetCodingType;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint8* pbVal) GetCountOfRecords;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint8 bRecordIndex, uint32* pdwVal) GetRecordCentreFrequency;
	}


	public HRESULT GetTag(uint8* pbVal) mut => VT.[Friend]GetTag(&this, pbVal);

	public HRESULT GetLength(uint8* pbVal) mut => VT.[Friend]GetLength(&this, pbVal);

	public HRESULT GetCodingType(uint8* pbVal) mut => VT.[Friend]GetCodingType(&this, pbVal);

	public HRESULT GetCountOfRecords(uint8* pbVal) mut => VT.[Friend]GetCountOfRecords(&this, pbVal);

	public HRESULT GetRecordCentreFrequency(uint8 bRecordIndex, uint32* pdwVal) mut => VT.[Friend]GetRecordCentreFrequency(&this, bRecordIndex, pdwVal);
}

[CRepr]struct IDvbPrivateDataSpecifierDescriptor : IUnknown
{
	public new const Guid IID = .(0x5660a019, 0xe75a, 0x4b82, 0x9b, 0x4c, 0xed, 0x22, 0x56, 0xd1, 0x65, 0xa2);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IUnknown.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint8* pbVal) GetTag;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint8* pbVal) GetLength;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32* pdwVal) GetPrivateDataSpecifier;
	}


	public HRESULT GetTag(uint8* pbVal) mut => VT.[Friend]GetTag(&this, pbVal);

	public HRESULT GetLength(uint8* pbVal) mut => VT.[Friend]GetLength(&this, pbVal);

	public HRESULT GetPrivateDataSpecifier(uint32* pdwVal) mut => VT.[Friend]GetPrivateDataSpecifier(&this, pdwVal);
}

[CRepr]struct IDvbLogicalChannelDescriptor : IUnknown
{
	public new const Guid IID = .(0xcf1edaff, 0x3ffd, 0x4cf7, 0x82, 0x01, 0x35, 0x75, 0x6a, 0xcb, 0xf8, 0x5f);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IUnknown.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint8* pbVal) GetTag;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint8* pbVal) GetLength;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint8* pbVal) GetCountOfRecords;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint8 bRecordIndex, uint16* pwVal) GetRecordServiceId;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint8 bRecordIndex, uint16* pwVal) GetRecordLogicalChannelNumber;
	}


	public HRESULT GetTag(uint8* pbVal) mut => VT.[Friend]GetTag(&this, pbVal);

	public HRESULT GetLength(uint8* pbVal) mut => VT.[Friend]GetLength(&this, pbVal);

	public HRESULT GetCountOfRecords(uint8* pbVal) mut => VT.[Friend]GetCountOfRecords(&this, pbVal);

	public HRESULT GetRecordServiceId(uint8 bRecordIndex, uint16* pwVal) mut => VT.[Friend]GetRecordServiceId(&this, bRecordIndex, pwVal);

	public HRESULT GetRecordLogicalChannelNumber(uint8 bRecordIndex, uint16* pwVal) mut => VT.[Friend]GetRecordLogicalChannelNumber(&this, bRecordIndex, pwVal);
}

[CRepr]struct IDvbLogicalChannelDescriptor2 : IDvbLogicalChannelDescriptor
{
	public new const Guid IID = .(0x43aca974, 0x4be8, 0x4b98, 0xbc, 0x17, 0x9e, 0xaf, 0xd7, 0x88, 0xb1, 0xd7);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDvbLogicalChannelDescriptor.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint8 bRecordIndex, uint16* pwVal) GetRecordLogicalChannelAndVisibility;
	}


	public HRESULT GetRecordLogicalChannelAndVisibility(uint8 bRecordIndex, uint16* pwVal) mut => VT.[Friend]GetRecordLogicalChannelAndVisibility(&this, bRecordIndex, pwVal);
}

[CRepr]struct IDvbLogicalChannel2Descriptor : IDvbLogicalChannelDescriptor2
{
	public new const Guid IID = .(0xf69c3747, 0x8a30, 0x4980, 0x99, 0x8c, 0x01, 0xfe, 0x7f, 0x0b, 0xa3, 0x5a);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDvbLogicalChannelDescriptor2.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint8* pbVal) GetCountOfLists;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint8 bListIndex, uint8* pbVal) GetListId;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint8 bListIndex, DVB_STRCONV_MODE convMode, BSTR* pbstrName) GetListNameW;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint8 bListIndex, uint8* pszCode) GetListCountryCode;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint8 bChannelListIndex, uint8* pbVal) GetListCountOfRecords;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint8 bListIndex, uint8 bRecordIndex, uint16* pwVal) GetListRecordServiceId;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint8 bListIndex, uint8 bRecordIndex, uint16* pwVal) GetListRecordLogicalChannelNumber;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint8 bListIndex, uint8 bRecordIndex, uint16* pwVal) GetListRecordLogicalChannelAndVisibility;
	}


	public HRESULT GetCountOfLists(uint8* pbVal) mut => VT.[Friend]GetCountOfLists(&this, pbVal);

	public HRESULT GetListId(uint8 bListIndex, uint8* pbVal) mut => VT.[Friend]GetListId(&this, bListIndex, pbVal);

	public HRESULT GetListNameW(uint8 bListIndex, DVB_STRCONV_MODE convMode, BSTR* pbstrName) mut => VT.[Friend]GetListNameW(&this, bListIndex, convMode, pbstrName);

	public HRESULT GetListCountryCode(uint8 bListIndex, uint8* pszCode) mut => VT.[Friend]GetListCountryCode(&this, bListIndex, pszCode);

	public HRESULT GetListCountOfRecords(uint8 bChannelListIndex, uint8* pbVal) mut => VT.[Friend]GetListCountOfRecords(&this, bChannelListIndex, pbVal);

	public HRESULT GetListRecordServiceId(uint8 bListIndex, uint8 bRecordIndex, uint16* pwVal) mut => VT.[Friend]GetListRecordServiceId(&this, bListIndex, bRecordIndex, pwVal);

	public HRESULT GetListRecordLogicalChannelNumber(uint8 bListIndex, uint8 bRecordIndex, uint16* pwVal) mut => VT.[Friend]GetListRecordLogicalChannelNumber(&this, bListIndex, bRecordIndex, pwVal);

	public HRESULT GetListRecordLogicalChannelAndVisibility(uint8 bListIndex, uint8 bRecordIndex, uint16* pwVal) mut => VT.[Friend]GetListRecordLogicalChannelAndVisibility(&this, bListIndex, bRecordIndex, pwVal);
}

[CRepr]struct IDvbHDSimulcastLogicalChannelDescriptor : IDvbLogicalChannelDescriptor2
{
	public new const Guid IID = .(0x1ea8b738, 0xa307, 0x4680, 0x9e, 0x26, 0xd0, 0xa9, 0x08, 0xc8, 0x24, 0xf4);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDvbLogicalChannelDescriptor2.VTable
	{
	}

}

[CRepr]struct IDvbDataBroadcastIDDescriptor : IUnknown
{
	public new const Guid IID = .(0x5f26f518, 0x65c8, 0x4048, 0x91, 0xf2, 0x92, 0x90, 0xf5, 0x9f, 0x7b, 0x90);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IUnknown.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint8* pbVal) GetTag;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint8* pbVal) GetLength;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint16* pwVal) GetDataBroadcastID;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint8* pbLen, uint8* pbVal) GetIDSelectorBytes;
	}


	public HRESULT GetTag(uint8* pbVal) mut => VT.[Friend]GetTag(&this, pbVal);

	public HRESULT GetLength(uint8* pbVal) mut => VT.[Friend]GetLength(&this, pbVal);

	public HRESULT GetDataBroadcastID(uint16* pwVal) mut => VT.[Friend]GetDataBroadcastID(&this, pwVal);

	public HRESULT GetIDSelectorBytes(uint8* pbLen, uint8* pbVal) mut => VT.[Friend]GetIDSelectorBytes(&this, pbLen, pbVal);
}

[CRepr]struct IDvbDataBroadcastDescriptor : IUnknown
{
	public new const Guid IID = .(0xd1ebc1d6, 0x8b60, 0x4c20, 0x9c, 0xaf, 0xe5, 0x93, 0x82, 0xe7, 0xc4, 0x00);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IUnknown.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint8* pbVal) GetTag;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint8* pbVal) GetLength;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint16* pwVal) GetDataBroadcastID;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint8* pbVal) GetComponentTag;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint8* pbVal) GetSelectorLength;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint8* pbLen, uint8* pbVal) GetSelectorBytes;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32* pulVal) GetLangID;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint8* pbVal) GetTextLength;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint8* pbLen, uint8* pbVal) GetText;
	}


	public HRESULT GetTag(uint8* pbVal) mut => VT.[Friend]GetTag(&this, pbVal);

	public HRESULT GetLength(uint8* pbVal) mut => VT.[Friend]GetLength(&this, pbVal);

	public HRESULT GetDataBroadcastID(uint16* pwVal) mut => VT.[Friend]GetDataBroadcastID(&this, pwVal);

	public HRESULT GetComponentTag(uint8* pbVal) mut => VT.[Friend]GetComponentTag(&this, pbVal);

	public HRESULT GetSelectorLength(uint8* pbVal) mut => VT.[Friend]GetSelectorLength(&this, pbVal);

	public HRESULT GetSelectorBytes(uint8* pbLen, uint8* pbVal) mut => VT.[Friend]GetSelectorBytes(&this, pbLen, pbVal);

	public HRESULT GetLangID(uint32* pulVal) mut => VT.[Friend]GetLangID(&this, pulVal);

	public HRESULT GetTextLength(uint8* pbVal) mut => VT.[Friend]GetTextLength(&this, pbVal);

	public HRESULT GetText(uint8* pbLen, uint8* pbVal) mut => VT.[Friend]GetText(&this, pbLen, pbVal);
}

[CRepr]struct IDvbLinkageDescriptor : IUnknown
{
	public new const Guid IID = .(0x1cdf8b31, 0x994a, 0x46fc, 0xac, 0xfd, 0x6a, 0x6b, 0xe8, 0x93, 0x4d, 0xd5);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IUnknown.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint8* pbVal) GetTag;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint8* pbVal) GetLength;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint16* pwVal) GetTSId;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint16* pwVal) GetONId;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint16* pwVal) GetServiceId;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint8* pbVal) GetLinkageType;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint8* pbVal) GetPrivateDataLength;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint8* pbLen, uint8* pbData) GetPrivateData;
	}


	public HRESULT GetTag(uint8* pbVal) mut => VT.[Friend]GetTag(&this, pbVal);

	public HRESULT GetLength(uint8* pbVal) mut => VT.[Friend]GetLength(&this, pbVal);

	public HRESULT GetTSId(uint16* pwVal) mut => VT.[Friend]GetTSId(&this, pwVal);

	public HRESULT GetONId(uint16* pwVal) mut => VT.[Friend]GetONId(&this, pwVal);

	public HRESULT GetServiceId(uint16* pwVal) mut => VT.[Friend]GetServiceId(&this, pwVal);

	public HRESULT GetLinkageType(uint8* pbVal) mut => VT.[Friend]GetLinkageType(&this, pbVal);

	public HRESULT GetPrivateDataLength(uint8* pbVal) mut => VT.[Friend]GetPrivateDataLength(&this, pbVal);

	public HRESULT GetPrivateData(uint8* pbLen, uint8* pbData) mut => VT.[Friend]GetPrivateData(&this, pbLen, pbData);
}

[CRepr]struct IDvbTeletextDescriptor : IUnknown
{
	public new const Guid IID = .(0x9cd29d47, 0x69c6, 0x4f92, 0x98, 0xa9, 0x21, 0x0a, 0xf1, 0xb7, 0x30, 0x3a);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IUnknown.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint8* pbVal) GetTag;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint8* pbVal) GetLength;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint8* pbVal) GetCountOfRecords;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint8 bRecordIndex, uint32* pulVal) GetRecordLangId;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint8 bRecordIndex, uint8* pbVal) GetRecordTeletextType;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint8 bRecordIndex, uint8* pbVal) GetRecordMagazineNumber;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint8 bRecordIndex, uint8* pbVal) GetRecordPageNumber;
	}


	public HRESULT GetTag(uint8* pbVal) mut => VT.[Friend]GetTag(&this, pbVal);

	public HRESULT GetLength(uint8* pbVal) mut => VT.[Friend]GetLength(&this, pbVal);

	public HRESULT GetCountOfRecords(uint8* pbVal) mut => VT.[Friend]GetCountOfRecords(&this, pbVal);

	public HRESULT GetRecordLangId(uint8 bRecordIndex, uint32* pulVal) mut => VT.[Friend]GetRecordLangId(&this, bRecordIndex, pulVal);

	public HRESULT GetRecordTeletextType(uint8 bRecordIndex, uint8* pbVal) mut => VT.[Friend]GetRecordTeletextType(&this, bRecordIndex, pbVal);

	public HRESULT GetRecordMagazineNumber(uint8 bRecordIndex, uint8* pbVal) mut => VT.[Friend]GetRecordMagazineNumber(&this, bRecordIndex, pbVal);

	public HRESULT GetRecordPageNumber(uint8 bRecordIndex, uint8* pbVal) mut => VT.[Friend]GetRecordPageNumber(&this, bRecordIndex, pbVal);
}

[CRepr]struct IDvbSubtitlingDescriptor : IUnknown
{
	public new const Guid IID = .(0x9b25fe1d, 0xfa23, 0x4e50, 0x97, 0x84, 0x6d, 0xf8, 0xb2, 0x6f, 0x8a, 0x49);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IUnknown.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint8* pbVal) GetTag;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint8* pbVal) GetLength;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint8* pbVal) GetCountOfRecords;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint8 bRecordIndex, uint32* pulVal) GetRecordLangId;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint8 bRecordIndex, uint8* pbVal) GetRecordSubtitlingType;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint8 bRecordIndex, uint16* pwVal) GetRecordCompositionPageID;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint8 bRecordIndex, uint16* pwVal) GetRecordAncillaryPageID;
	}


	public HRESULT GetTag(uint8* pbVal) mut => VT.[Friend]GetTag(&this, pbVal);

	public HRESULT GetLength(uint8* pbVal) mut => VT.[Friend]GetLength(&this, pbVal);

	public HRESULT GetCountOfRecords(uint8* pbVal) mut => VT.[Friend]GetCountOfRecords(&this, pbVal);

	public HRESULT GetRecordLangId(uint8 bRecordIndex, uint32* pulVal) mut => VT.[Friend]GetRecordLangId(&this, bRecordIndex, pulVal);

	public HRESULT GetRecordSubtitlingType(uint8 bRecordIndex, uint8* pbVal) mut => VT.[Friend]GetRecordSubtitlingType(&this, bRecordIndex, pbVal);

	public HRESULT GetRecordCompositionPageID(uint8 bRecordIndex, uint16* pwVal) mut => VT.[Friend]GetRecordCompositionPageID(&this, bRecordIndex, pwVal);

	public HRESULT GetRecordAncillaryPageID(uint8 bRecordIndex, uint16* pwVal) mut => VT.[Friend]GetRecordAncillaryPageID(&this, bRecordIndex, pwVal);
}

[CRepr]struct IDvbServiceDescriptor : IUnknown
{
	public new const Guid IID = .(0xf9c7fbcf, 0xe2d6, 0x464d, 0xb3, 0x2d, 0x2e, 0xf5, 0x26, 0xe4, 0x92, 0x90);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IUnknown.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint8* pbVal) GetTag;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint8* pbVal) GetLength;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint8* pbVal) GetServiceType;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint8** pszName) GetServiceProviderName;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* pbstrName) GetServiceProviderNameW;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint8** pszName) GetServiceName;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* pbstrName) GetProcessedServiceName;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* pbstrName) GetServiceNameEmphasized;
	}


	public HRESULT GetTag(uint8* pbVal) mut => VT.[Friend]GetTag(&this, pbVal);

	public HRESULT GetLength(uint8* pbVal) mut => VT.[Friend]GetLength(&this, pbVal);

	public HRESULT GetServiceType(uint8* pbVal) mut => VT.[Friend]GetServiceType(&this, pbVal);

	public HRESULT GetServiceProviderName(uint8** pszName) mut => VT.[Friend]GetServiceProviderName(&this, pszName);

	public HRESULT GetServiceProviderNameW(BSTR* pbstrName) mut => VT.[Friend]GetServiceProviderNameW(&this, pbstrName);

	public HRESULT GetServiceName(uint8** pszName) mut => VT.[Friend]GetServiceName(&this, pszName);

	public HRESULT GetProcessedServiceName(BSTR* pbstrName) mut => VT.[Friend]GetProcessedServiceName(&this, pbstrName);

	public HRESULT GetServiceNameEmphasized(BSTR* pbstrName) mut => VT.[Friend]GetServiceNameEmphasized(&this, pbstrName);
}

[CRepr]struct IDvbServiceDescriptor2 : IDvbServiceDescriptor
{
	public new const Guid IID = .(0xd6c76506, 0x85ab, 0x487c, 0x9b, 0x2b, 0x36, 0x41, 0x65, 0x11, 0xe4, 0xa2);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDvbServiceDescriptor.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, DVB_STRCONV_MODE convMode, BSTR* pbstrName) GetServiceProviderNameW;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, DVB_STRCONV_MODE convMode, BSTR* pbstrName) GetServiceNameW;
	}


	public HRESULT GetServiceProviderNameW(DVB_STRCONV_MODE convMode, BSTR* pbstrName) mut => VT.[Friend]GetServiceProviderNameW(&this, convMode, pbstrName);

	public HRESULT GetServiceNameW(DVB_STRCONV_MODE convMode, BSTR* pbstrName) mut => VT.[Friend]GetServiceNameW(&this, convMode, pbstrName);
}

[CRepr]struct IDvbServiceListDescriptor : IUnknown
{
	public new const Guid IID = .(0x05db0d8f, 0x6008, 0x491a, 0xac, 0xd3, 0x70, 0x90, 0x95, 0x27, 0x07, 0xd0);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IUnknown.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint8* pbVal) GetTag;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint8* pbVal) GetLength;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint8* pbVal) GetCountOfRecords;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint8 bRecordIndex, uint16* pwVal) GetRecordServiceId;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint8 bRecordIndex, uint8* pbVal) GetRecordServiceType;
	}


	public HRESULT GetTag(uint8* pbVal) mut => VT.[Friend]GetTag(&this, pbVal);

	public HRESULT GetLength(uint8* pbVal) mut => VT.[Friend]GetLength(&this, pbVal);

	public HRESULT GetCountOfRecords(uint8* pbVal) mut => VT.[Friend]GetCountOfRecords(&this, pbVal);

	public HRESULT GetRecordServiceId(uint8 bRecordIndex, uint16* pwVal) mut => VT.[Friend]GetRecordServiceId(&this, bRecordIndex, pwVal);

	public HRESULT GetRecordServiceType(uint8 bRecordIndex, uint8* pbVal) mut => VT.[Friend]GetRecordServiceType(&this, bRecordIndex, pbVal);
}

[CRepr]struct IDvbMultilingualServiceNameDescriptor : IUnknown
{
	public new const Guid IID = .(0x2d80433b, 0xb32c, 0x47ef, 0x98, 0x7f, 0xe7, 0x8e, 0xbb, 0x77, 0x3e, 0x34);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IUnknown.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint8* pbVal) GetTag;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint8* pbVal) GetLength;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint8* pbVal) GetCountOfRecords;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint8 bRecordIndex, uint32* ulVal) GetRecordLangId;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint8 bRecordIndex, DVB_STRCONV_MODE convMode, BSTR* pbstrName) GetRecordServiceProviderNameW;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint8 bRecordIndex, DVB_STRCONV_MODE convMode, BSTR* pbstrName) GetRecordServiceNameW;
	}


	public HRESULT GetTag(uint8* pbVal) mut => VT.[Friend]GetTag(&this, pbVal);

	public HRESULT GetLength(uint8* pbVal) mut => VT.[Friend]GetLength(&this, pbVal);

	public HRESULT GetCountOfRecords(uint8* pbVal) mut => VT.[Friend]GetCountOfRecords(&this, pbVal);

	public HRESULT GetRecordLangId(uint8 bRecordIndex, uint32* ulVal) mut => VT.[Friend]GetRecordLangId(&this, bRecordIndex, ulVal);

	public HRESULT GetRecordServiceProviderNameW(uint8 bRecordIndex, DVB_STRCONV_MODE convMode, BSTR* pbstrName) mut => VT.[Friend]GetRecordServiceProviderNameW(&this, bRecordIndex, convMode, pbstrName);

	public HRESULT GetRecordServiceNameW(uint8 bRecordIndex, DVB_STRCONV_MODE convMode, BSTR* pbstrName) mut => VT.[Friend]GetRecordServiceNameW(&this, bRecordIndex, convMode, pbstrName);
}

[CRepr]struct IDvbNetworkNameDescriptor : IUnknown
{
	public new const Guid IID = .(0x5b2a80cf, 0x35b9, 0x446c, 0xb3, 0xe4, 0x04, 0x8b, 0x76, 0x1d, 0xbc, 0x51);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IUnknown.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint8* pbVal) GetTag;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint8* pbVal) GetLength;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint8** pszName) GetNetworkName;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, DVB_STRCONV_MODE convMode, BSTR* pbstrName) GetNetworkNameW;
	}


	public HRESULT GetTag(uint8* pbVal) mut => VT.[Friend]GetTag(&this, pbVal);

	public HRESULT GetLength(uint8* pbVal) mut => VT.[Friend]GetLength(&this, pbVal);

	public HRESULT GetNetworkName(uint8** pszName) mut => VT.[Friend]GetNetworkName(&this, pszName);

	public HRESULT GetNetworkNameW(DVB_STRCONV_MODE convMode, BSTR* pbstrName) mut => VT.[Friend]GetNetworkNameW(&this, convMode, pbstrName);
}

[CRepr]struct IDvbShortEventDescriptor : IUnknown
{
	public new const Guid IID = .(0xb170be92, 0x5b75, 0x458e, 0x9c, 0x6e, 0xb0, 0x00, 0x82, 0x31, 0x49, 0x1a);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IUnknown.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint8* pbVal) GetTag;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint8* pbVal) GetLength;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint8* pszCode) GetLanguageCode;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, DVB_STRCONV_MODE convMode, BSTR* pbstrName) GetEventNameW;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, DVB_STRCONV_MODE convMode, BSTR* pbstrText) GetTextW;
	}


	public HRESULT GetTag(uint8* pbVal) mut => VT.[Friend]GetTag(&this, pbVal);

	public HRESULT GetLength(uint8* pbVal) mut => VT.[Friend]GetLength(&this, pbVal);

	public HRESULT GetLanguageCode(uint8* pszCode) mut => VT.[Friend]GetLanguageCode(&this, pszCode);

	public HRESULT GetEventNameW(DVB_STRCONV_MODE convMode, BSTR* pbstrName) mut => VT.[Friend]GetEventNameW(&this, convMode, pbstrName);

	public HRESULT GetTextW(DVB_STRCONV_MODE convMode, BSTR* pbstrText) mut => VT.[Friend]GetTextW(&this, convMode, pbstrText);
}

[CRepr]struct IDvbExtendedEventDescriptor : IUnknown
{
	public new const Guid IID = .(0xc9b22eca, 0x85f4, 0x499f, 0xb1, 0xdb, 0xef, 0xa9, 0x3a, 0x91, 0xee, 0x57);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IUnknown.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint8* pbVal) GetTag;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint8* pbVal) GetLength;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint8* pbVal) GetDescriptorNumber;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint8* pbVal) GetLastDescriptorNumber;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint8* pszCode) GetLanguageCode;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint8* pbVal) GetCountOfRecords;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint8 bRecordIndex, DVB_STRCONV_MODE convMode, BSTR* pbstrDesc, BSTR* pbstrItem) GetRecordItemW;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IDvbExtendedEventDescriptor* pFollowingDescriptor, DVB_STRCONV_MODE convMode, BSTR* pbstrDesc, BSTR* pbstrItem) GetConcatenatedItemW;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, DVB_STRCONV_MODE convMode, BSTR* pbstrText) GetTextW;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IDvbExtendedEventDescriptor* FollowingDescriptor, DVB_STRCONV_MODE convMode, BSTR* pbstrText) GetConcatenatedTextW;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint8 bRecordIndex, uint8** ppbRawItem, uint8* pbItemLength) GetRecordItemRawBytes;
	}


	public HRESULT GetTag(uint8* pbVal) mut => VT.[Friend]GetTag(&this, pbVal);

	public HRESULT GetLength(uint8* pbVal) mut => VT.[Friend]GetLength(&this, pbVal);

	public HRESULT GetDescriptorNumber(uint8* pbVal) mut => VT.[Friend]GetDescriptorNumber(&this, pbVal);

	public HRESULT GetLastDescriptorNumber(uint8* pbVal) mut => VT.[Friend]GetLastDescriptorNumber(&this, pbVal);

	public HRESULT GetLanguageCode(uint8* pszCode) mut => VT.[Friend]GetLanguageCode(&this, pszCode);

	public HRESULT GetCountOfRecords(uint8* pbVal) mut => VT.[Friend]GetCountOfRecords(&this, pbVal);

	public HRESULT GetRecordItemW(uint8 bRecordIndex, DVB_STRCONV_MODE convMode, BSTR* pbstrDesc, BSTR* pbstrItem) mut => VT.[Friend]GetRecordItemW(&this, bRecordIndex, convMode, pbstrDesc, pbstrItem);

	public HRESULT GetConcatenatedItemW(IDvbExtendedEventDescriptor* pFollowingDescriptor, DVB_STRCONV_MODE convMode, BSTR* pbstrDesc, BSTR* pbstrItem) mut => VT.[Friend]GetConcatenatedItemW(&this, pFollowingDescriptor, convMode, pbstrDesc, pbstrItem);

	public HRESULT GetTextW(DVB_STRCONV_MODE convMode, BSTR* pbstrText) mut => VT.[Friend]GetTextW(&this, convMode, pbstrText);

	public HRESULT GetConcatenatedTextW(IDvbExtendedEventDescriptor* FollowingDescriptor, DVB_STRCONV_MODE convMode, BSTR* pbstrText) mut => VT.[Friend]GetConcatenatedTextW(&this, FollowingDescriptor, convMode, pbstrText);

	public HRESULT GetRecordItemRawBytes(uint8 bRecordIndex, uint8** ppbRawItem, uint8* pbItemLength) mut => VT.[Friend]GetRecordItemRawBytes(&this, bRecordIndex, ppbRawItem, pbItemLength);
}

[CRepr]struct IDvbComponentDescriptor : IUnknown
{
	public new const Guid IID = .(0x91e405cf, 0x80e7, 0x457f, 0x90, 0x96, 0x1b, 0x9d, 0x1c, 0xe3, 0x21, 0x41);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IUnknown.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint8* pbVal) GetTag;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint8* pbVal) GetLength;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint8* pbVal) GetStreamContent;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint8* pbVal) GetComponentType;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint8* pbVal) GetComponentTag;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint8* pszCode) GetLanguageCode;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, DVB_STRCONV_MODE convMode, BSTR* pbstrText) GetTextW;
	}


	public HRESULT GetTag(uint8* pbVal) mut => VT.[Friend]GetTag(&this, pbVal);

	public HRESULT GetLength(uint8* pbVal) mut => VT.[Friend]GetLength(&this, pbVal);

	public HRESULT GetStreamContent(uint8* pbVal) mut => VT.[Friend]GetStreamContent(&this, pbVal);

	public HRESULT GetComponentType(uint8* pbVal) mut => VT.[Friend]GetComponentType(&this, pbVal);

	public HRESULT GetComponentTag(uint8* pbVal) mut => VT.[Friend]GetComponentTag(&this, pbVal);

	public HRESULT GetLanguageCode(uint8* pszCode) mut => VT.[Friend]GetLanguageCode(&this, pszCode);

	public HRESULT GetTextW(DVB_STRCONV_MODE convMode, BSTR* pbstrText) mut => VT.[Friend]GetTextW(&this, convMode, pbstrText);
}

[CRepr]struct IDvbContentDescriptor : IUnknown
{
	public new const Guid IID = .(0x2e883881, 0xa467, 0x412a, 0x9d, 0x63, 0x6f, 0x2b, 0x6d, 0xa0, 0x5b, 0xf0);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IUnknown.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint8* pbVal) GetTag;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint8* pbVal) GetLength;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint8* pbVal) GetCountOfRecords;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint8 bRecordIndex, uint8* pbValLevel1, uint8* pbValLevel2) GetRecordContentNibbles;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint8 bRecordIndex, uint8* pbVal1, uint8* pbVal2) GetRecordUserNibbles;
	}


	public HRESULT GetTag(uint8* pbVal) mut => VT.[Friend]GetTag(&this, pbVal);

	public HRESULT GetLength(uint8* pbVal) mut => VT.[Friend]GetLength(&this, pbVal);

	public HRESULT GetCountOfRecords(uint8* pbVal) mut => VT.[Friend]GetCountOfRecords(&this, pbVal);

	public HRESULT GetRecordContentNibbles(uint8 bRecordIndex, uint8* pbValLevel1, uint8* pbValLevel2) mut => VT.[Friend]GetRecordContentNibbles(&this, bRecordIndex, pbValLevel1, pbValLevel2);

	public HRESULT GetRecordUserNibbles(uint8 bRecordIndex, uint8* pbVal1, uint8* pbVal2) mut => VT.[Friend]GetRecordUserNibbles(&this, bRecordIndex, pbVal1, pbVal2);
}

[CRepr]struct IDvbParentalRatingDescriptor : IUnknown
{
	public new const Guid IID = .(0x3ad9dde1, 0xfb1b, 0x4186, 0x93, 0x7f, 0x22, 0xe6, 0xb5, 0xa7, 0x2a, 0x10);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IUnknown.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint8* pbVal) GetTag;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint8* pbVal) GetLength;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint8* pbVal) GetCountOfRecords;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint8 bRecordIndex, uint8* pszCountryCode, uint8* pbVal) GetRecordRating;
	}


	public HRESULT GetTag(uint8* pbVal) mut => VT.[Friend]GetTag(&this, pbVal);

	public HRESULT GetLength(uint8* pbVal) mut => VT.[Friend]GetLength(&this, pbVal);

	public HRESULT GetCountOfRecords(uint8* pbVal) mut => VT.[Friend]GetCountOfRecords(&this, pbVal);

	public HRESULT GetRecordRating(uint8 bRecordIndex, uint8* pszCountryCode, uint8* pbVal) mut => VT.[Friend]GetRecordRating(&this, bRecordIndex, pszCountryCode, pbVal);
}

[CRepr]struct IIsdbTerrestrialDeliverySystemDescriptor : IUnknown
{
	public new const Guid IID = .(0x39fae0a6, 0xd151, 0x44dd, 0xa2, 0x8a, 0x76, 0x5d, 0xe5, 0x99, 0x16, 0x70);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IUnknown.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint8* pbVal) GetTag;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint8* pbVal) GetLength;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint16* pwVal) GetAreaCode;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint8* pbVal) GetGuardInterval;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint8* pbVal) GetTransmissionMode;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint8* pbVal) GetCountOfRecords;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint8 bRecordIndex, uint32* pdwVal) GetRecordFrequency;
	}


	public HRESULT GetTag(uint8* pbVal) mut => VT.[Friend]GetTag(&this, pbVal);

	public HRESULT GetLength(uint8* pbVal) mut => VT.[Friend]GetLength(&this, pbVal);

	public HRESULT GetAreaCode(uint16* pwVal) mut => VT.[Friend]GetAreaCode(&this, pwVal);

	public HRESULT GetGuardInterval(uint8* pbVal) mut => VT.[Friend]GetGuardInterval(&this, pbVal);

	public HRESULT GetTransmissionMode(uint8* pbVal) mut => VT.[Friend]GetTransmissionMode(&this, pbVal);

	public HRESULT GetCountOfRecords(uint8* pbVal) mut => VT.[Friend]GetCountOfRecords(&this, pbVal);

	public HRESULT GetRecordFrequency(uint8 bRecordIndex, uint32* pdwVal) mut => VT.[Friend]GetRecordFrequency(&this, bRecordIndex, pdwVal);
}

[CRepr]struct IIsdbTSInformationDescriptor : IUnknown
{
	public new const Guid IID = .(0xd7ad183e, 0x38f5, 0x4210, 0xb5, 0x5f, 0xec, 0x8d, 0x60, 0x1b, 0xbd, 0x47);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IUnknown.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint8* pbVal) GetTag;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint8* pbVal) GetLength;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint8* pbVal) GetRemoteControlKeyId;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, DVB_STRCONV_MODE convMode, BSTR* pbstrName) GetTSNameW;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint8* pbVal) GetCountOfRecords;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint8 bRecordIndex, uint8* pbVal) GetRecordTransmissionTypeInfo;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint8 bRecordIndex, uint8* pbVal) GetRecordNumberOfServices;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint8 bRecordIndex, uint8 bServiceIndex, uint16* pdwVal) GetRecordServiceIdByIndex;
	}


	public HRESULT GetTag(uint8* pbVal) mut => VT.[Friend]GetTag(&this, pbVal);

	public HRESULT GetLength(uint8* pbVal) mut => VT.[Friend]GetLength(&this, pbVal);

	public HRESULT GetRemoteControlKeyId(uint8* pbVal) mut => VT.[Friend]GetRemoteControlKeyId(&this, pbVal);

	public HRESULT GetTSNameW(DVB_STRCONV_MODE convMode, BSTR* pbstrName) mut => VT.[Friend]GetTSNameW(&this, convMode, pbstrName);

	public HRESULT GetCountOfRecords(uint8* pbVal) mut => VT.[Friend]GetCountOfRecords(&this, pbVal);

	public HRESULT GetRecordTransmissionTypeInfo(uint8 bRecordIndex, uint8* pbVal) mut => VT.[Friend]GetRecordTransmissionTypeInfo(&this, bRecordIndex, pbVal);

	public HRESULT GetRecordNumberOfServices(uint8 bRecordIndex, uint8* pbVal) mut => VT.[Friend]GetRecordNumberOfServices(&this, bRecordIndex, pbVal);

	public HRESULT GetRecordServiceIdByIndex(uint8 bRecordIndex, uint8 bServiceIndex, uint16* pdwVal) mut => VT.[Friend]GetRecordServiceIdByIndex(&this, bRecordIndex, bServiceIndex, pdwVal);
}

[CRepr]struct IIsdbDigitalCopyControlDescriptor : IUnknown
{
	public new const Guid IID = .(0x1a28417e, 0x266a, 0x4bb8, 0xa4, 0xbd, 0xd7, 0x82, 0xbc, 0xfb, 0x81, 0x61);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IUnknown.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint8* pbVal) GetTag;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint8* pbVal) GetLength;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint8* pbDigitalRecordingControlData, uint8* pbCopyControlType, uint8* pbAPSControlData, uint8* pbMaximumBitrate) GetCopyControl;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint8* pbVal) GetCountOfRecords;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint8 bRecordIndex, uint8* pbComponentTag, uint8* pbDigitalRecordingControlData, uint8* pbCopyControlType, uint8* pbAPSControlData, uint8* pbMaximumBitrate) GetRecordCopyControl;
	}


	public HRESULT GetTag(uint8* pbVal) mut => VT.[Friend]GetTag(&this, pbVal);

	public HRESULT GetLength(uint8* pbVal) mut => VT.[Friend]GetLength(&this, pbVal);

	public HRESULT GetCopyControl(uint8* pbDigitalRecordingControlData, uint8* pbCopyControlType, uint8* pbAPSControlData, uint8* pbMaximumBitrate) mut => VT.[Friend]GetCopyControl(&this, pbDigitalRecordingControlData, pbCopyControlType, pbAPSControlData, pbMaximumBitrate);

	public HRESULT GetCountOfRecords(uint8* pbVal) mut => VT.[Friend]GetCountOfRecords(&this, pbVal);

	public HRESULT GetRecordCopyControl(uint8 bRecordIndex, uint8* pbComponentTag, uint8* pbDigitalRecordingControlData, uint8* pbCopyControlType, uint8* pbAPSControlData, uint8* pbMaximumBitrate) mut => VT.[Friend]GetRecordCopyControl(&this, bRecordIndex, pbComponentTag, pbDigitalRecordingControlData, pbCopyControlType, pbAPSControlData, pbMaximumBitrate);
}

[CRepr]struct IIsdbAudioComponentDescriptor : IUnknown
{
	public new const Guid IID = .(0x679d2002, 0x2425, 0x4be4, 0xa4, 0xc7, 0xd6, 0x63, 0x2a, 0x57, 0x4f, 0x4d);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IUnknown.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint8* pbVal) GetTag;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint8* pbVal) GetLength;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint8* pbVal) GetStreamContent;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint8* pbVal) GetComponentType;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint8* pbVal) GetComponentTag;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint8* pbVal) GetStreamType;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint8* pbVal) GetSimulcastGroupTag;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BOOL* pfVal) GetESMultiLingualFlag;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BOOL* pfVal) GetMainComponentFlag;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint8* pbVal) GetQualityIndicator;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint8* pbVal) GetSamplingRate;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint8* pszCode) GetLanguageCode;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint8* pszCode) GetLanguageCode2;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, DVB_STRCONV_MODE convMode, BSTR* pbstrText) GetTextW;
	}


	public HRESULT GetTag(uint8* pbVal) mut => VT.[Friend]GetTag(&this, pbVal);

	public HRESULT GetLength(uint8* pbVal) mut => VT.[Friend]GetLength(&this, pbVal);

	public HRESULT GetStreamContent(uint8* pbVal) mut => VT.[Friend]GetStreamContent(&this, pbVal);

	public HRESULT GetComponentType(uint8* pbVal) mut => VT.[Friend]GetComponentType(&this, pbVal);

	public HRESULT GetComponentTag(uint8* pbVal) mut => VT.[Friend]GetComponentTag(&this, pbVal);

	public HRESULT GetStreamType(uint8* pbVal) mut => VT.[Friend]GetStreamType(&this, pbVal);

	public HRESULT GetSimulcastGroupTag(uint8* pbVal) mut => VT.[Friend]GetSimulcastGroupTag(&this, pbVal);

	public HRESULT GetESMultiLingualFlag(BOOL* pfVal) mut => VT.[Friend]GetESMultiLingualFlag(&this, pfVal);

	public HRESULT GetMainComponentFlag(BOOL* pfVal) mut => VT.[Friend]GetMainComponentFlag(&this, pfVal);

	public HRESULT GetQualityIndicator(uint8* pbVal) mut => VT.[Friend]GetQualityIndicator(&this, pbVal);

	public HRESULT GetSamplingRate(uint8* pbVal) mut => VT.[Friend]GetSamplingRate(&this, pbVal);

	public HRESULT GetLanguageCode(uint8* pszCode) mut => VT.[Friend]GetLanguageCode(&this, pszCode);

	public HRESULT GetLanguageCode2(uint8* pszCode) mut => VT.[Friend]GetLanguageCode2(&this, pszCode);

	public HRESULT GetTextW(DVB_STRCONV_MODE convMode, BSTR* pbstrText) mut => VT.[Friend]GetTextW(&this, convMode, pbstrText);
}

[CRepr]struct IIsdbDataContentDescriptor : IUnknown
{
	public new const Guid IID = .(0xa428100a, 0xe646, 0x4bd6, 0xaa, 0x14, 0x60, 0x87, 0xbd, 0xc0, 0x8c, 0xd5);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IUnknown.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint8* pbVal) GetTag;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint8* pbVal) GetLength;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint16* pwVal) GetDataComponentId;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint8* pbVal) GetEntryComponent;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint8* pbVal) GetSelectorLength;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint8 bBufLength, uint8* pbBuf) GetSelectorBytes;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint8* pbVal) GetCountOfRecords;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint8 bRecordIndex, uint8* pbVal) GetRecordComponentRef;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint8* pszCode) GetLanguageCode;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, DVB_STRCONV_MODE convMode, BSTR* pbstrText) GetTextW;
	}


	public HRESULT GetTag(uint8* pbVal) mut => VT.[Friend]GetTag(&this, pbVal);

	public HRESULT GetLength(uint8* pbVal) mut => VT.[Friend]GetLength(&this, pbVal);

	public HRESULT GetDataComponentId(uint16* pwVal) mut => VT.[Friend]GetDataComponentId(&this, pwVal);

	public HRESULT GetEntryComponent(uint8* pbVal) mut => VT.[Friend]GetEntryComponent(&this, pbVal);

	public HRESULT GetSelectorLength(uint8* pbVal) mut => VT.[Friend]GetSelectorLength(&this, pbVal);

	public HRESULT GetSelectorBytes(uint8 bBufLength, uint8* pbBuf) mut => VT.[Friend]GetSelectorBytes(&this, bBufLength, pbBuf);

	public HRESULT GetCountOfRecords(uint8* pbVal) mut => VT.[Friend]GetCountOfRecords(&this, pbVal);

	public HRESULT GetRecordComponentRef(uint8 bRecordIndex, uint8* pbVal) mut => VT.[Friend]GetRecordComponentRef(&this, bRecordIndex, pbVal);

	public HRESULT GetLanguageCode(uint8* pszCode) mut => VT.[Friend]GetLanguageCode(&this, pszCode);

	public HRESULT GetTextW(DVB_STRCONV_MODE convMode, BSTR* pbstrText) mut => VT.[Friend]GetTextW(&this, convMode, pbstrText);
}

[CRepr]struct IIsdbCAContractInformationDescriptor : IUnknown
{
	public new const Guid IID = .(0x08e18b25, 0xa28f, 0x4e92, 0x82, 0x1e, 0x4f, 0xce, 0xd5, 0xcc, 0x22, 0x91);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IUnknown.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint8* pbVal) GetTag;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint8* pbVal) GetLength;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint16* pwVal) GetCASystemId;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint8* pbVal) GetCAUnitId;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint8* pbVal) GetCountOfRecords;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint8 bRecordIndex, uint8* pbVal) GetRecordComponentTag;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint8* pbVal) GetContractVerificationInfoLength;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint8 bBufLength, uint8* pbBuf) GetContractVerificationInfo;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, DVB_STRCONV_MODE convMode, BSTR* pbstrName) GetFeeNameW;
	}


	public HRESULT GetTag(uint8* pbVal) mut => VT.[Friend]GetTag(&this, pbVal);

	public HRESULT GetLength(uint8* pbVal) mut => VT.[Friend]GetLength(&this, pbVal);

	public HRESULT GetCASystemId(uint16* pwVal) mut => VT.[Friend]GetCASystemId(&this, pwVal);

	public HRESULT GetCAUnitId(uint8* pbVal) mut => VT.[Friend]GetCAUnitId(&this, pbVal);

	public HRESULT GetCountOfRecords(uint8* pbVal) mut => VT.[Friend]GetCountOfRecords(&this, pbVal);

	public HRESULT GetRecordComponentTag(uint8 bRecordIndex, uint8* pbVal) mut => VT.[Friend]GetRecordComponentTag(&this, bRecordIndex, pbVal);

	public HRESULT GetContractVerificationInfoLength(uint8* pbVal) mut => VT.[Friend]GetContractVerificationInfoLength(&this, pbVal);

	public HRESULT GetContractVerificationInfo(uint8 bBufLength, uint8* pbBuf) mut => VT.[Friend]GetContractVerificationInfo(&this, bBufLength, pbBuf);

	public HRESULT GetFeeNameW(DVB_STRCONV_MODE convMode, BSTR* pbstrName) mut => VT.[Friend]GetFeeNameW(&this, convMode, pbstrName);
}

[CRepr]struct IIsdbEventGroupDescriptor : IUnknown
{
	public new const Guid IID = .(0x94b06780, 0x2e2a, 0x44dc, 0xa9, 0x66, 0xcc, 0x56, 0xfd, 0xab, 0xc6, 0xc2);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IUnknown.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint8* pbVal) GetTag;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint8* pbVal) GetLength;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint8* pbVal) GetGroupType;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint8* pbVal) GetCountOfRecords;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint8 bRecordIndex, uint16* pwServiceId, uint16* pwEventId) GetRecordEvent;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint8* pbVal) GetCountOfRefRecords;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint8 bRecordIndex, uint16* pwOriginalNetworkId, uint16* pwTransportStreamId, uint16* pwServiceId, uint16* pwEventId) GetRefRecordEvent;
	}


	public HRESULT GetTag(uint8* pbVal) mut => VT.[Friend]GetTag(&this, pbVal);

	public HRESULT GetLength(uint8* pbVal) mut => VT.[Friend]GetLength(&this, pbVal);

	public HRESULT GetGroupType(uint8* pbVal) mut => VT.[Friend]GetGroupType(&this, pbVal);

	public HRESULT GetCountOfRecords(uint8* pbVal) mut => VT.[Friend]GetCountOfRecords(&this, pbVal);

	public HRESULT GetRecordEvent(uint8 bRecordIndex, uint16* pwServiceId, uint16* pwEventId) mut => VT.[Friend]GetRecordEvent(&this, bRecordIndex, pwServiceId, pwEventId);

	public HRESULT GetCountOfRefRecords(uint8* pbVal) mut => VT.[Friend]GetCountOfRefRecords(&this, pbVal);

	public HRESULT GetRefRecordEvent(uint8 bRecordIndex, uint16* pwOriginalNetworkId, uint16* pwTransportStreamId, uint16* pwServiceId, uint16* pwEventId) mut => VT.[Friend]GetRefRecordEvent(&this, bRecordIndex, pwOriginalNetworkId, pwTransportStreamId, pwServiceId, pwEventId);
}

[CRepr]struct IIsdbComponentGroupDescriptor : IUnknown
{
	public new const Guid IID = .(0xa494f17f, 0xc592, 0x47d8, 0x89, 0x43, 0x64, 0xc9, 0xa3, 0x4b, 0xe7, 0xb9);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IUnknown.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint8* pbVal) GetTag;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint8* pbVal) GetLength;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint8* pbVal) GetComponentGroupType;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint8* pbVal) GetCountOfRecords;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint8 bRecordIndex, uint8* pbVal) GetRecordGroupId;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint8 bRecordIndex, uint8* pbVal) GetRecordNumberOfCAUnit;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint8 bRecordIndex, uint8 bCAUnitIndex, uint8* pbVal) GetRecordCAUnitCAUnitId;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint8 bRecordIndex, uint8 bCAUnitIndex, uint8* pbVal) GetRecordCAUnitNumberOfComponents;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint8 bRecordIndex, uint8 bCAUnitIndex, uint8 bComponentIndex, uint8* pbVal) GetRecordCAUnitComponentTag;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint8 bRecordIndex, uint8* pbVal) GetRecordTotalBitRate;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint8 bRecordIndex, DVB_STRCONV_MODE convMode, BSTR* pbstrText) GetRecordTextW;
	}


	public HRESULT GetTag(uint8* pbVal) mut => VT.[Friend]GetTag(&this, pbVal);

	public HRESULT GetLength(uint8* pbVal) mut => VT.[Friend]GetLength(&this, pbVal);

	public HRESULT GetComponentGroupType(uint8* pbVal) mut => VT.[Friend]GetComponentGroupType(&this, pbVal);

	public HRESULT GetCountOfRecords(uint8* pbVal) mut => VT.[Friend]GetCountOfRecords(&this, pbVal);

	public HRESULT GetRecordGroupId(uint8 bRecordIndex, uint8* pbVal) mut => VT.[Friend]GetRecordGroupId(&this, bRecordIndex, pbVal);

	public HRESULT GetRecordNumberOfCAUnit(uint8 bRecordIndex, uint8* pbVal) mut => VT.[Friend]GetRecordNumberOfCAUnit(&this, bRecordIndex, pbVal);

	public HRESULT GetRecordCAUnitCAUnitId(uint8 bRecordIndex, uint8 bCAUnitIndex, uint8* pbVal) mut => VT.[Friend]GetRecordCAUnitCAUnitId(&this, bRecordIndex, bCAUnitIndex, pbVal);

	public HRESULT GetRecordCAUnitNumberOfComponents(uint8 bRecordIndex, uint8 bCAUnitIndex, uint8* pbVal) mut => VT.[Friend]GetRecordCAUnitNumberOfComponents(&this, bRecordIndex, bCAUnitIndex, pbVal);

	public HRESULT GetRecordCAUnitComponentTag(uint8 bRecordIndex, uint8 bCAUnitIndex, uint8 bComponentIndex, uint8* pbVal) mut => VT.[Friend]GetRecordCAUnitComponentTag(&this, bRecordIndex, bCAUnitIndex, bComponentIndex, pbVal);

	public HRESULT GetRecordTotalBitRate(uint8 bRecordIndex, uint8* pbVal) mut => VT.[Friend]GetRecordTotalBitRate(&this, bRecordIndex, pbVal);

	public HRESULT GetRecordTextW(uint8 bRecordIndex, DVB_STRCONV_MODE convMode, BSTR* pbstrText) mut => VT.[Friend]GetRecordTextW(&this, bRecordIndex, convMode, pbstrText);
}

[CRepr]struct IIsdbSeriesDescriptor : IUnknown
{
	public new const Guid IID = .(0x07ef6370, 0x1660, 0x4f26, 0x87, 0xfc, 0x61, 0x4a, 0xda, 0xb2, 0x4b, 0x11);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IUnknown.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint8* pbVal) GetTag;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint8* pbVal) GetLength;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint16* pwVal) GetSeriesId;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint8* pbVal) GetRepeatLabel;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint8* pbVal) GetProgramPattern;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BOOL* pfValid, MPEG_DATE_AND_TIME* pmdtVal) GetExpireDate;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint16* pwVal) GetEpisodeNumber;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint16* pwVal) GetLastEpisodeNumber;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, DVB_STRCONV_MODE convMode, BSTR* pbstrName) GetSeriesNameW;
	}


	public HRESULT GetTag(uint8* pbVal) mut => VT.[Friend]GetTag(&this, pbVal);

	public HRESULT GetLength(uint8* pbVal) mut => VT.[Friend]GetLength(&this, pbVal);

	public HRESULT GetSeriesId(uint16* pwVal) mut => VT.[Friend]GetSeriesId(&this, pwVal);

	public HRESULT GetRepeatLabel(uint8* pbVal) mut => VT.[Friend]GetRepeatLabel(&this, pbVal);

	public HRESULT GetProgramPattern(uint8* pbVal) mut => VT.[Friend]GetProgramPattern(&this, pbVal);

	public HRESULT GetExpireDate(BOOL* pfValid, MPEG_DATE_AND_TIME* pmdtVal) mut => VT.[Friend]GetExpireDate(&this, pfValid, pmdtVal);

	public HRESULT GetEpisodeNumber(uint16* pwVal) mut => VT.[Friend]GetEpisodeNumber(&this, pwVal);

	public HRESULT GetLastEpisodeNumber(uint16* pwVal) mut => VT.[Friend]GetLastEpisodeNumber(&this, pwVal);

	public HRESULT GetSeriesNameW(DVB_STRCONV_MODE convMode, BSTR* pbstrName) mut => VT.[Friend]GetSeriesNameW(&this, convMode, pbstrName);
}

[CRepr]struct IIsdbDownloadContentDescriptor : IUnknown
{
	public new const Guid IID = .(0x5298661e, 0xcb88, 0x4f5f, 0xa1, 0xde, 0x5f, 0x44, 0x0c, 0x18, 0x5b, 0x92);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IUnknown.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint8* pbVal) GetTag;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint8* pbVal) GetLength;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BOOL* pfReboot, BOOL* pfAddOn, BOOL* pfCompatibility, BOOL* pfModuleInfo, BOOL* pfTextInfo) COM_GetFlags;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32* pdwVal) GetComponentSize;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32* pdwVal) GetDownloadId;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32* pdwVal) GetTimeOutValueDII;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32* pdwVal) GetLeakRate;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint8* pbVal) GetComponentTag;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint16* pwLength) GetCompatiblityDescriptorLength;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint8** ppbData) GetCompatiblityDescriptor;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint16* pwVal) GetCountOfRecords;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint16 wRecordIndex, uint16* pwVal) GetRecordModuleId;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint16 wRecordIndex, uint32* pdwVal) GetRecordModuleSize;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint16 wRecordIndex, uint8* pbVal) GetRecordModuleInfoLength;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint16 wRecordIndex, uint8** ppbData) GetRecordModuleInfo;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint8* szCode) GetTextLanguageCode;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, DVB_STRCONV_MODE convMode, BSTR* pbstrName) GetTextW;
	}


	public HRESULT GetTag(uint8* pbVal) mut => VT.[Friend]GetTag(&this, pbVal);

	public HRESULT GetLength(uint8* pbVal) mut => VT.[Friend]GetLength(&this, pbVal);

	public HRESULT GetFlags(BOOL* pfReboot, BOOL* pfAddOn, BOOL* pfCompatibility, BOOL* pfModuleInfo, BOOL* pfTextInfo) mut => VT.[Friend]COM_GetFlags(&this, pfReboot, pfAddOn, pfCompatibility, pfModuleInfo, pfTextInfo);

	public HRESULT GetComponentSize(uint32* pdwVal) mut => VT.[Friend]GetComponentSize(&this, pdwVal);

	public HRESULT GetDownloadId(uint32* pdwVal) mut => VT.[Friend]GetDownloadId(&this, pdwVal);

	public HRESULT GetTimeOutValueDII(uint32* pdwVal) mut => VT.[Friend]GetTimeOutValueDII(&this, pdwVal);

	public HRESULT GetLeakRate(uint32* pdwVal) mut => VT.[Friend]GetLeakRate(&this, pdwVal);

	public HRESULT GetComponentTag(uint8* pbVal) mut => VT.[Friend]GetComponentTag(&this, pbVal);

	public HRESULT GetCompatiblityDescriptorLength(uint16* pwLength) mut => VT.[Friend]GetCompatiblityDescriptorLength(&this, pwLength);

	public HRESULT GetCompatiblityDescriptor(uint8** ppbData) mut => VT.[Friend]GetCompatiblityDescriptor(&this, ppbData);

	public HRESULT GetCountOfRecords(uint16* pwVal) mut => VT.[Friend]GetCountOfRecords(&this, pwVal);

	public HRESULT GetRecordModuleId(uint16 wRecordIndex, uint16* pwVal) mut => VT.[Friend]GetRecordModuleId(&this, wRecordIndex, pwVal);

	public HRESULT GetRecordModuleSize(uint16 wRecordIndex, uint32* pdwVal) mut => VT.[Friend]GetRecordModuleSize(&this, wRecordIndex, pdwVal);

	public HRESULT GetRecordModuleInfoLength(uint16 wRecordIndex, uint8* pbVal) mut => VT.[Friend]GetRecordModuleInfoLength(&this, wRecordIndex, pbVal);

	public HRESULT GetRecordModuleInfo(uint16 wRecordIndex, uint8** ppbData) mut => VT.[Friend]GetRecordModuleInfo(&this, wRecordIndex, ppbData);

	public HRESULT GetTextLanguageCode(uint8* szCode) mut => VT.[Friend]GetTextLanguageCode(&this, szCode);

	public HRESULT GetTextW(DVB_STRCONV_MODE convMode, BSTR* pbstrName) mut => VT.[Friend]GetTextW(&this, convMode, pbstrName);
}

[CRepr]struct IIsdbLogoTransmissionDescriptor : IUnknown
{
	public new const Guid IID = .(0xe0103f49, 0x4ae1, 0x4f07, 0x90, 0x98, 0x75, 0x6d, 0xb1, 0xfa, 0x88, 0xcd);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IUnknown.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint8* pbVal) GetTag;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint8* pbVal) GetLength;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint8* pbVal) GetLogoTransmissionType;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint16* pwVal) GetLogoId;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint16* pwVal) GetLogoVersion;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint16* pwVal) GetDownloadDataId;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, DVB_STRCONV_MODE convMode, BSTR* pbstrChar) GetLogoCharW;
	}


	public HRESULT GetTag(uint8* pbVal) mut => VT.[Friend]GetTag(&this, pbVal);

	public HRESULT GetLength(uint8* pbVal) mut => VT.[Friend]GetLength(&this, pbVal);

	public HRESULT GetLogoTransmissionType(uint8* pbVal) mut => VT.[Friend]GetLogoTransmissionType(&this, pbVal);

	public HRESULT GetLogoId(uint16* pwVal) mut => VT.[Friend]GetLogoId(&this, pwVal);

	public HRESULT GetLogoVersion(uint16* pwVal) mut => VT.[Friend]GetLogoVersion(&this, pwVal);

	public HRESULT GetDownloadDataId(uint16* pwVal) mut => VT.[Friend]GetDownloadDataId(&this, pwVal);

	public HRESULT GetLogoCharW(DVB_STRCONV_MODE convMode, BSTR* pbstrChar) mut => VT.[Friend]GetLogoCharW(&this, convMode, pbstrChar);
}

[CRepr]struct IIsdbSIParameterDescriptor : IUnknown
{
	public new const Guid IID = .(0xf837dc36, 0x867c, 0x426a, 0x91, 0x11, 0xf6, 0x20, 0x93, 0x95, 0x1a, 0x45);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IUnknown.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint8* pbVal) GetTag;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint8* pbVal) GetLength;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint8* pbVal) GetParameterVersion;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, MPEG_DATE* pVal) GetUpdateTime;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint8* pbVal) GetRecordNumberOfTable;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint8 bRecordIndex, uint8* pbVal) GetTableId;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint8 bRecordIndex, uint8* pbVal) GetTableDescriptionLength;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint8 bRecordIndex, uint8* pbBufferLength, uint8* pbBuffer) GetTableDescriptionBytes;
	}


	public HRESULT GetTag(uint8* pbVal) mut => VT.[Friend]GetTag(&this, pbVal);

	public HRESULT GetLength(uint8* pbVal) mut => VT.[Friend]GetLength(&this, pbVal);

	public HRESULT GetParameterVersion(uint8* pbVal) mut => VT.[Friend]GetParameterVersion(&this, pbVal);

	public HRESULT GetUpdateTime(MPEG_DATE* pVal) mut => VT.[Friend]GetUpdateTime(&this, pVal);

	public HRESULT GetRecordNumberOfTable(uint8* pbVal) mut => VT.[Friend]GetRecordNumberOfTable(&this, pbVal);

	public HRESULT GetTableId(uint8 bRecordIndex, uint8* pbVal) mut => VT.[Friend]GetTableId(&this, bRecordIndex, pbVal);

	public HRESULT GetTableDescriptionLength(uint8 bRecordIndex, uint8* pbVal) mut => VT.[Friend]GetTableDescriptionLength(&this, bRecordIndex, pbVal);

	public HRESULT GetTableDescriptionBytes(uint8 bRecordIndex, uint8* pbBufferLength, uint8* pbBuffer) mut => VT.[Friend]GetTableDescriptionBytes(&this, bRecordIndex, pbBufferLength, pbBuffer);
}

[CRepr]struct IIsdbEmergencyInformationDescriptor : IUnknown
{
	public new const Guid IID = .(0xba6fa681, 0xb973, 0x4da1, 0x92, 0x07, 0xac, 0x3e, 0x7f, 0x03, 0x41, 0xeb);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IUnknown.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint8* pbVal) GetTag;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint8* pbVal) GetLength;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint8* pbVal) GetCountOfRecords;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint8 bRecordIndex, uint16* pwVal) GetServiceId;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint8 bRecordIndex, uint8* pVal) GetStartEndFlag;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint8 bRecordIndex, uint8* pbVal) GetSignalLevel;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint8 bRecordIndex, uint16** ppwVal, uint8* pbNumAreaCodes) GetAreaCode;
	}


	public HRESULT GetTag(uint8* pbVal) mut => VT.[Friend]GetTag(&this, pbVal);

	public HRESULT GetLength(uint8* pbVal) mut => VT.[Friend]GetLength(&this, pbVal);

	public HRESULT GetCountOfRecords(uint8* pbVal) mut => VT.[Friend]GetCountOfRecords(&this, pbVal);

	public HRESULT GetServiceId(uint8 bRecordIndex, uint16* pwVal) mut => VT.[Friend]GetServiceId(&this, bRecordIndex, pwVal);

	public HRESULT GetStartEndFlag(uint8 bRecordIndex, uint8* pVal) mut => VT.[Friend]GetStartEndFlag(&this, bRecordIndex, pVal);

	public HRESULT GetSignalLevel(uint8 bRecordIndex, uint8* pbVal) mut => VT.[Friend]GetSignalLevel(&this, bRecordIndex, pbVal);

	public HRESULT GetAreaCode(uint8 bRecordIndex, uint16** ppwVal, uint8* pbNumAreaCodes) mut => VT.[Friend]GetAreaCode(&this, bRecordIndex, ppwVal, pbNumAreaCodes);
}

[CRepr]struct IIsdbCADescriptor : IUnknown
{
	public new const Guid IID = .(0x0570aa47, 0x52bc, 0x42ae, 0x8c, 0xa5, 0x96, 0x9f, 0x41, 0xe8, 0x1a, 0xea);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IUnknown.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint8* pbVal) GetTag;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint8* pbVal) GetLength;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint16* pwVal) GetCASystemId;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint8* pbVal) GetReservedBits;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint16* pwVal) GetCAPID;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint8* pbBufferLength, uint8* pbBuffer) GetPrivateDataBytes;
	}


	public HRESULT GetTag(uint8* pbVal) mut => VT.[Friend]GetTag(&this, pbVal);

	public HRESULT GetLength(uint8* pbVal) mut => VT.[Friend]GetLength(&this, pbVal);

	public HRESULT GetCASystemId(uint16* pwVal) mut => VT.[Friend]GetCASystemId(&this, pwVal);

	public HRESULT GetReservedBits(uint8* pbVal) mut => VT.[Friend]GetReservedBits(&this, pbVal);

	public HRESULT GetCAPID(uint16* pwVal) mut => VT.[Friend]GetCAPID(&this, pwVal);

	public HRESULT GetPrivateDataBytes(uint8* pbBufferLength, uint8* pbBuffer) mut => VT.[Friend]GetPrivateDataBytes(&this, pbBufferLength, pbBuffer);
}

[CRepr]struct IIsdbCAServiceDescriptor : IUnknown
{
	public new const Guid IID = .(0x39cbeb97, 0xff0b, 0x42a7, 0x9a, 0xb9, 0x7b, 0x9c, 0xfe, 0x70, 0xa7, 0x7a);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IUnknown.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint8* pbVal) GetTag;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint8* pbVal) GetLength;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint16* pwVal) GetCASystemId;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint8* pbVal) GetCABroadcasterGroupId;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint8* pbVal) GetMessageControl;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint8* pbNumServiceIds, uint16* pwServiceIds) GetServiceIds;
	}


	public HRESULT GetTag(uint8* pbVal) mut => VT.[Friend]GetTag(&this, pbVal);

	public HRESULT GetLength(uint8* pbVal) mut => VT.[Friend]GetLength(&this, pbVal);

	public HRESULT GetCASystemId(uint16* pwVal) mut => VT.[Friend]GetCASystemId(&this, pwVal);

	public HRESULT GetCABroadcasterGroupId(uint8* pbVal) mut => VT.[Friend]GetCABroadcasterGroupId(&this, pbVal);

	public HRESULT GetMessageControl(uint8* pbVal) mut => VT.[Friend]GetMessageControl(&this, pbVal);

	public HRESULT GetServiceIds(uint8* pbNumServiceIds, uint16* pwServiceIds) mut => VT.[Friend]GetServiceIds(&this, pbNumServiceIds, pwServiceIds);
}

[CRepr]struct IIsdbHierarchicalTransmissionDescriptor : IUnknown
{
	public new const Guid IID = .(0xb7b3ae90, 0xee0b, 0x446d, 0x87, 0x69, 0xf7, 0xe2, 0xaa, 0x26, 0x6a, 0xa6);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IUnknown.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint8* pbVal) GetTag;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint8* pbVal) GetLength;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint8* pbVal) GetFutureUse1;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint8* pbVal) GetQualityLevel;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint8* pbVal) GetFutureUse2;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint16* pwVal) GetReferencePid;
	}


	public HRESULT GetTag(uint8* pbVal) mut => VT.[Friend]GetTag(&this, pbVal);

	public HRESULT GetLength(uint8* pbVal) mut => VT.[Friend]GetLength(&this, pbVal);

	public HRESULT GetFutureUse1(uint8* pbVal) mut => VT.[Friend]GetFutureUse1(&this, pbVal);

	public HRESULT GetQualityLevel(uint8* pbVal) mut => VT.[Friend]GetQualityLevel(&this, pbVal);

	public HRESULT GetFutureUse2(uint8* pbVal) mut => VT.[Friend]GetFutureUse2(&this, pbVal);

	public HRESULT GetReferencePid(uint16* pwVal) mut => VT.[Friend]GetReferencePid(&this, pwVal);
}

[CRepr]struct IPBDASiParser : IUnknown
{
	public new const Guid IID = .(0x9de49a74, 0xaba2, 0x4a18, 0x93, 0xe1, 0x21, 0xf1, 0x7f, 0x95, 0xc3, 0xc3);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IUnknown.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IUnknown* punk) Initialize;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32 dwSize, uint8* pBuffer, IPBDA_EIT** ppEIT) GetEIT;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32 dwSize, in uint8 pBuffer, IPBDA_Services** ppServices) GetServices;
	}


	public HRESULT Initialize(IUnknown* punk) mut => VT.[Friend]Initialize(&this, punk);

	public HRESULT GetEIT(uint32 dwSize, uint8* pBuffer, IPBDA_EIT** ppEIT) mut => VT.[Friend]GetEIT(&this, dwSize, pBuffer, ppEIT);

	public HRESULT GetServices(uint32 dwSize, in uint8 pBuffer, IPBDA_Services** ppServices) mut => VT.[Friend]GetServices(&this, dwSize, pBuffer, ppServices);
}

[CRepr]struct IPBDA_EIT : IUnknown
{
	public new const Guid IID = .(0xa35f2dea, 0x098f, 0x4ebd, 0x98, 0x4c, 0x2b, 0xd4, 0xc3, 0xc8, 0xce, 0x0a);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IUnknown.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32 size, in uint8 pBuffer) Initialize;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint8* pbVal) GetTableId;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint16* pwVal) GetVersionNumber;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint64* plwVal) GetServiceIdx;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32* pdwVal) GetCountOfRecords;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32 dwRecordIndex, uint64* plwVal) GetRecordEventId;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32 dwRecordIndex, MPEG_DATE_AND_TIME* pmdtVal) GetRecordStartTime;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32 dwRecordIndex, MPEG_TIME* pmdVal) GetRecordDuration;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32 dwRecordIndex, uint32* pdwVal) GetRecordCountOfDescriptors;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32 dwRecordIndex, uint32 dwIndex, IGenericDescriptor** ppDescriptor) GetRecordDescriptorByIndex;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32 dwRecordIndex, uint8 bTag, uint32* pdwCookie, IGenericDescriptor** ppDescriptor) GetRecordDescriptorByTag;
	}


	public HRESULT Initialize(uint32 size, in uint8 pBuffer) mut => VT.[Friend]Initialize(&this, size, pBuffer);

	public HRESULT GetTableId(uint8* pbVal) mut => VT.[Friend]GetTableId(&this, pbVal);

	public HRESULT GetVersionNumber(uint16* pwVal) mut => VT.[Friend]GetVersionNumber(&this, pwVal);

	public HRESULT GetServiceIdx(uint64* plwVal) mut => VT.[Friend]GetServiceIdx(&this, plwVal);

	public HRESULT GetCountOfRecords(uint32* pdwVal) mut => VT.[Friend]GetCountOfRecords(&this, pdwVal);

	public HRESULT GetRecordEventId(uint32 dwRecordIndex, uint64* plwVal) mut => VT.[Friend]GetRecordEventId(&this, dwRecordIndex, plwVal);

	public HRESULT GetRecordStartTime(uint32 dwRecordIndex, MPEG_DATE_AND_TIME* pmdtVal) mut => VT.[Friend]GetRecordStartTime(&this, dwRecordIndex, pmdtVal);

	public HRESULT GetRecordDuration(uint32 dwRecordIndex, MPEG_TIME* pmdVal) mut => VT.[Friend]GetRecordDuration(&this, dwRecordIndex, pmdVal);

	public HRESULT GetRecordCountOfDescriptors(uint32 dwRecordIndex, uint32* pdwVal) mut => VT.[Friend]GetRecordCountOfDescriptors(&this, dwRecordIndex, pdwVal);

	public HRESULT GetRecordDescriptorByIndex(uint32 dwRecordIndex, uint32 dwIndex, IGenericDescriptor** ppDescriptor) mut => VT.[Friend]GetRecordDescriptorByIndex(&this, dwRecordIndex, dwIndex, ppDescriptor);

	public HRESULT GetRecordDescriptorByTag(uint32 dwRecordIndex, uint8 bTag, uint32* pdwCookie, IGenericDescriptor** ppDescriptor) mut => VT.[Friend]GetRecordDescriptorByTag(&this, dwRecordIndex, bTag, pdwCookie, ppDescriptor);
}

[CRepr]struct IPBDA_Services : IUnknown
{
	public new const Guid IID = .(0x944eab37, 0xeed4, 0x4850, 0xaf, 0xd2, 0x77, 0xe7, 0xef, 0xeb, 0x44, 0x27);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IUnknown.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32 size, uint8* pBuffer) Initialize;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32* pdwVal) GetCountOfRecords;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32 dwRecordIndex, uint64* pul64ServiceIdx) GetRecordByIndex;
	}


	public HRESULT Initialize(uint32 size, uint8* pBuffer) mut => VT.[Friend]Initialize(&this, size, pBuffer);

	public HRESULT GetCountOfRecords(uint32* pdwVal) mut => VT.[Friend]GetCountOfRecords(&this, pdwVal);

	public HRESULT GetRecordByIndex(uint32 dwRecordIndex, uint64* pul64ServiceIdx) mut => VT.[Friend]GetRecordByIndex(&this, dwRecordIndex, pul64ServiceIdx);
}

[CRepr]struct IPBDAEntitlementDescriptor : IUnknown
{
	public new const Guid IID = .(0x22632497, 0x0de3, 0x4587, 0xaa, 0xdc, 0xd8, 0xd9, 0x90, 0x17, 0xe7, 0x60);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IUnknown.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint8* pbVal) GetTag;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint16* pwVal) GetLength;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint8** ppbTokenBuffer, uint32* pdwTokenLength) GetToken;
	}


	public HRESULT GetTag(uint8* pbVal) mut => VT.[Friend]GetTag(&this, pbVal);

	public HRESULT GetLength(uint16* pwVal) mut => VT.[Friend]GetLength(&this, pwVal);

	public HRESULT GetToken(uint8** ppbTokenBuffer, uint32* pdwTokenLength) mut => VT.[Friend]GetToken(&this, ppbTokenBuffer, pdwTokenLength);
}

[CRepr]struct IPBDAAttributesDescriptor : IUnknown
{
	public new const Guid IID = .(0x313b3620, 0x3263, 0x45a6, 0x95, 0x33, 0x96, 0x8b, 0xef, 0xbe, 0xac, 0x03);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IUnknown.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint8* pbVal) GetTag;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint16* pwVal) GetLength;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint8** ppbAttributeBuffer, uint32* pdwAttributeLength) GetAttributePayload;
	}


	public HRESULT GetTag(uint8* pbVal) mut => VT.[Friend]GetTag(&this, pbVal);

	public HRESULT GetLength(uint16* pwVal) mut => VT.[Friend]GetLength(&this, pwVal);

	public HRESULT GetAttributePayload(uint8** ppbAttributeBuffer, uint32* pdwAttributeLength) mut => VT.[Friend]GetAttributePayload(&this, ppbAttributeBuffer, pdwAttributeLength);
}

[CRepr]struct IBDA_TIF_REGISTRATION : IUnknown
{
	public new const Guid IID = .(0xdfef4a68, 0xee61, 0x415f, 0x9c, 0xcb, 0xcd, 0x95, 0xf2, 0xf9, 0x8a, 0x3a);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IUnknown.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IPin* pTIFInputPin, uint32* ppvRegistrationContext, IUnknown** ppMpeg2DataControl) RegisterTIFEx;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32 pvRegistrationContext) UnregisterTIF;
	}


	public HRESULT RegisterTIFEx(IPin* pTIFInputPin, uint32* ppvRegistrationContext, IUnknown** ppMpeg2DataControl) mut => VT.[Friend]RegisterTIFEx(&this, pTIFInputPin, ppvRegistrationContext, ppMpeg2DataControl);

	public HRESULT UnregisterTIF(uint32 pvRegistrationContext) mut => VT.[Friend]UnregisterTIF(&this, pvRegistrationContext);
}

[CRepr]struct IMPEG2_TIF_CONTROL : IUnknown
{
	public new const Guid IID = .(0xf9bac2f9, 0x4149, 0x4916, 0xb2, 0xef, 0xfa, 0xa2, 0x02, 0x32, 0x68, 0x62);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IUnknown.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IUnknown* pUnkTIF, uint32* ppvRegistrationContext) RegisterTIF;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32 pvRegistrationContext) UnregisterTIF;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32 ulcPIDs, uint32* pulPIDs) AddPIDs;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32 ulcPIDs, uint32* pulPIDs) DeletePIDs;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32* pulcPIDs) GetPIDCount;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32* pulcPIDs, uint32* pulPIDs) GetPIDs;
	}


	public HRESULT RegisterTIF(IUnknown* pUnkTIF, uint32* ppvRegistrationContext) mut => VT.[Friend]RegisterTIF(&this, pUnkTIF, ppvRegistrationContext);

	public HRESULT UnregisterTIF(uint32 pvRegistrationContext) mut => VT.[Friend]UnregisterTIF(&this, pvRegistrationContext);

	public HRESULT AddPIDs(uint32 ulcPIDs, uint32* pulPIDs) mut => VT.[Friend]AddPIDs(&this, ulcPIDs, pulPIDs);

	public HRESULT DeletePIDs(uint32 ulcPIDs, uint32* pulPIDs) mut => VT.[Friend]DeletePIDs(&this, ulcPIDs, pulPIDs);

	public HRESULT GetPIDCount(uint32* pulcPIDs) mut => VT.[Friend]GetPIDCount(&this, pulcPIDs);

	public HRESULT GetPIDs(uint32* pulcPIDs, uint32* pulPIDs) mut => VT.[Friend]GetPIDs(&this, pulcPIDs, pulPIDs);
}

[CRepr]struct ITuneRequestInfo : IUnknown
{
	public new const Guid IID = .(0xa3b152df, 0x7a90, 0x4218, 0xac, 0x54, 0x98, 0x30, 0xbe, 0xe8, 0xc0, 0xb6);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IUnknown.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, ITuneRequest* Request) GetLocatorData;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, ITuneRequest* CurrentRequest) GetComponentData;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, ITuneRequest* CurrentRequest) CreateComponentList;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, ITuneRequest* CurrentRequest, ITuneRequest** TuneRequest) GetNextProgram;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, ITuneRequest* CurrentRequest, ITuneRequest** TuneRequest) GetPreviousProgram;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, ITuneRequest* CurrentRequest, ITuneRequest** TuneRequest) GetNextLocator;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, ITuneRequest* CurrentRequest, ITuneRequest** TuneRequest) GetPreviousLocator;
	}


	public HRESULT GetLocatorData(ITuneRequest* Request) mut => VT.[Friend]GetLocatorData(&this, Request);

	public HRESULT GetComponentData(ITuneRequest* CurrentRequest) mut => VT.[Friend]GetComponentData(&this, CurrentRequest);

	public HRESULT CreateComponentList(ITuneRequest* CurrentRequest) mut => VT.[Friend]CreateComponentList(&this, CurrentRequest);

	public HRESULT GetNextProgram(ITuneRequest* CurrentRequest, ITuneRequest** TuneRequest) mut => VT.[Friend]GetNextProgram(&this, CurrentRequest, TuneRequest);

	public HRESULT GetPreviousProgram(ITuneRequest* CurrentRequest, ITuneRequest** TuneRequest) mut => VT.[Friend]GetPreviousProgram(&this, CurrentRequest, TuneRequest);

	public HRESULT GetNextLocator(ITuneRequest* CurrentRequest, ITuneRequest** TuneRequest) mut => VT.[Friend]GetNextLocator(&this, CurrentRequest, TuneRequest);

	public HRESULT GetPreviousLocator(ITuneRequest* CurrentRequest, ITuneRequest** TuneRequest) mut => VT.[Friend]GetPreviousLocator(&this, CurrentRequest, TuneRequest);
}

[CRepr]struct ITuneRequestInfoEx : ITuneRequestInfo
{
	public new const Guid IID = .(0xee957c52, 0xb0d0, 0x4e78, 0x8d, 0xd1, 0xb8, 0x7a, 0x08, 0xbf, 0xd8, 0x93);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : ITuneRequestInfo.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, ITuneRequest* CurrentRequest, IUnknown** ppCurPMT) CreateComponentListEx;
	}


	public HRESULT CreateComponentListEx(ITuneRequest* CurrentRequest, IUnknown** ppCurPMT) mut => VT.[Friend]CreateComponentListEx(&this, CurrentRequest, ppCurPMT);
}

[CRepr]struct ISIInbandEPGEvent : IUnknown
{
	public new const Guid IID = .(0x7e47913a, 0x5a89, 0x423d, 0x9a, 0x2b, 0xe1, 0x51, 0x68, 0x85, 0x89, 0x34);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IUnknown.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IDVB_EIT2* pIDVB_EIT, uint32 dwTable_ID, uint32 dwService_ID) SIObjectEvent;
	}


	public HRESULT SIObjectEvent(IDVB_EIT2* pIDVB_EIT, uint32 dwTable_ID, uint32 dwService_ID) mut => VT.[Friend]SIObjectEvent(&this, pIDVB_EIT, dwTable_ID, dwService_ID);
}

[CRepr]struct ISIInbandEPG : IUnknown
{
	public new const Guid IID = .(0xf90ad9d0, 0xb854, 0x4b68, 0x9c, 0xc1, 0xb2, 0xcc, 0x96, 0x11, 0x9d, 0x85);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IUnknown.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self) StartSIEPGScan;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self) StopSIEPGScan;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BOOL* bRunning) IsSIEPGScanRunning;
	}


	public HRESULT StartSIEPGScan() mut => VT.[Friend]StartSIEPGScan(&this);

	public HRESULT StopSIEPGScan() mut => VT.[Friend]StopSIEPGScan(&this);

	public HRESULT IsSIEPGScanRunning(BOOL* bRunning) mut => VT.[Friend]IsSIEPGScanRunning(&this, bRunning);
}

[CRepr]struct IGuideDataEvent : IUnknown
{
	public new const Guid IID = .(0xefda0c80, 0xf395, 0x42c3, 0x9b, 0x3c, 0x56, 0xb3, 0x7d, 0xec, 0x7b, 0xb7);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IUnknown.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self) GuideDataAcquired;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT varProgramDescriptionID) ProgramChanged;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT varServiceDescriptionID) ServiceChanged;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT varScheduleEntryDescriptionID) ScheduleEntryChanged;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT varProgramDescriptionID) ProgramDeleted;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT varServiceDescriptionID) ServiceDeleted;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT varScheduleEntryDescriptionID) ScheduleDeleted;
	}


	public HRESULT GuideDataAcquired() mut => VT.[Friend]GuideDataAcquired(&this);

	public HRESULT ProgramChanged(VARIANT varProgramDescriptionID) mut => VT.[Friend]ProgramChanged(&this, varProgramDescriptionID);

	public HRESULT ServiceChanged(VARIANT varServiceDescriptionID) mut => VT.[Friend]ServiceChanged(&this, varServiceDescriptionID);

	public HRESULT ScheduleEntryChanged(VARIANT varScheduleEntryDescriptionID) mut => VT.[Friend]ScheduleEntryChanged(&this, varScheduleEntryDescriptionID);

	public HRESULT ProgramDeleted(VARIANT varProgramDescriptionID) mut => VT.[Friend]ProgramDeleted(&this, varProgramDescriptionID);

	public HRESULT ServiceDeleted(VARIANT varServiceDescriptionID) mut => VT.[Friend]ServiceDeleted(&this, varServiceDescriptionID);

	public HRESULT ScheduleDeleted(VARIANT varScheduleEntryDescriptionID) mut => VT.[Friend]ScheduleDeleted(&this, varScheduleEntryDescriptionID);
}

[CRepr]struct IGuideDataProperty : IUnknown
{
	public new const Guid IID = .(0x88ec5e58, 0xbb73, 0x41d6, 0x99, 0xce, 0x66, 0xc5, 0x24, 0xb8, 0xb5, 0x91);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IUnknown.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* pbstrName) get_Name;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* idLang) get_Language;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* pvar) get_Value;
	}


	public HRESULT get_Name(BSTR* pbstrName) mut => VT.[Friend]get_Name(&this, pbstrName);

	public HRESULT get_Language(int32* idLang) mut => VT.[Friend]get_Language(&this, idLang);

	public HRESULT get_Value(VARIANT* pvar) mut => VT.[Friend]get_Value(&this, pvar);
}

[CRepr]struct IEnumGuideDataProperties : IUnknown
{
	public new const Guid IID = .(0xae44423b, 0x4571, 0x475c, 0xad, 0x2c, 0xf4, 0x0a, 0x77, 0x1d, 0x80, 0xef);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IUnknown.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32 celt, IGuideDataProperty** ppprop, uint32* pcelt) Next;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32 celt) Skip;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self) Reset;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IEnumGuideDataProperties** ppenum) Clone;
	}


	public HRESULT Next(uint32 celt, IGuideDataProperty** ppprop, uint32* pcelt) mut => VT.[Friend]Next(&this, celt, ppprop, pcelt);

	public HRESULT Skip(uint32 celt) mut => VT.[Friend]Skip(&this, celt);

	public HRESULT Reset() mut => VT.[Friend]Reset(&this);

	public HRESULT Clone(IEnumGuideDataProperties** ppenum) mut => VT.[Friend]Clone(&this, ppenum);
}

[CRepr]struct IEnumTuneRequests : IUnknown
{
	public new const Guid IID = .(0x1993299c, 0xced6, 0x4788, 0x87, 0xa3, 0x42, 0x00, 0x67, 0xdc, 0xe0, 0xc7);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IUnknown.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32 celt, ITuneRequest** ppprop, uint32* pcelt) Next;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32 celt) Skip;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self) Reset;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IEnumTuneRequests** ppenum) Clone;
	}


	public HRESULT Next(uint32 celt, ITuneRequest** ppprop, uint32* pcelt) mut => VT.[Friend]Next(&this, celt, ppprop, pcelt);

	public HRESULT Skip(uint32 celt) mut => VT.[Friend]Skip(&this, celt);

	public HRESULT Reset() mut => VT.[Friend]Reset(&this);

	public HRESULT Clone(IEnumTuneRequests** ppenum) mut => VT.[Friend]Clone(&this, ppenum);
}

[CRepr]struct IGuideData : IUnknown
{
	public new const Guid IID = .(0x61571138, 0x5b01, 0x43cd, 0xae, 0xaf, 0x60, 0xb7, 0x84, 0xa0, 0xbf, 0x93);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IUnknown.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IEnumTuneRequests** ppEnumTuneRequests) GetServices;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, ITuneRequest* pTuneRequest, IEnumGuideDataProperties** ppEnumProperties) GetServiceProperties;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IEnumVARIANT** pEnumPrograms) GetGuideProgramIDs;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT varProgramDescriptionID, IEnumGuideDataProperties** ppEnumProperties) GetProgramProperties;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IEnumVARIANT** pEnumScheduleEntries) GetScheduleEntryIDs;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT varScheduleEntryDescriptionID, IEnumGuideDataProperties** ppEnumProperties) GetScheduleEntryProperties;
	}


	public HRESULT GetServices(IEnumTuneRequests** ppEnumTuneRequests) mut => VT.[Friend]GetServices(&this, ppEnumTuneRequests);

	public HRESULT GetServiceProperties(ITuneRequest* pTuneRequest, IEnumGuideDataProperties** ppEnumProperties) mut => VT.[Friend]GetServiceProperties(&this, pTuneRequest, ppEnumProperties);

	public HRESULT GetGuideProgramIDs(IEnumVARIANT** pEnumPrograms) mut => VT.[Friend]GetGuideProgramIDs(&this, pEnumPrograms);

	public HRESULT GetProgramProperties(VARIANT varProgramDescriptionID, IEnumGuideDataProperties** ppEnumProperties) mut => VT.[Friend]GetProgramProperties(&this, varProgramDescriptionID, ppEnumProperties);

	public HRESULT GetScheduleEntryIDs(IEnumVARIANT** pEnumScheduleEntries) mut => VT.[Friend]GetScheduleEntryIDs(&this, pEnumScheduleEntries);

	public HRESULT GetScheduleEntryProperties(VARIANT varScheduleEntryDescriptionID, IEnumGuideDataProperties** ppEnumProperties) mut => VT.[Friend]GetScheduleEntryProperties(&this, varScheduleEntryDescriptionID, ppEnumProperties);
}

[CRepr]struct IGuideDataLoader : IUnknown
{
	public new const Guid IID = .(0x4764ff7c, 0xfa95, 0x4525, 0xaf, 0x4d, 0xd3, 0x22, 0x36, 0xdb, 0x9e, 0x38);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IUnknown.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IGuideData* pGuideStore) Init;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self) Terminate;
	}


	public HRESULT Init(IGuideData* pGuideStore) mut => VT.[Friend]Init(&this, pGuideStore);

	public HRESULT Terminate() mut => VT.[Friend]Terminate(&this);
}

#endregion

#region Functions
public static
{
	[Import("QUARTZ.lib"), CLink, CallingConvention(.Stdcall)]
	public static extern uint32 AMGetErrorTextA(HRESULT hr, uint8* pbuffer, uint32 MaxLen);
	public static uint32 AMGetErrorText(HRESULT hr, uint8* pbuffer, uint32 MaxLen) => AMGetErrorTextA(hr, pbuffer, MaxLen);

	[Import("QUARTZ.lib"), CLink, CallingConvention(.Stdcall)]
	public static extern uint32 AMGetErrorTextW(HRESULT hr, char16* pbuffer, uint32 MaxLen);

}
#endregion
