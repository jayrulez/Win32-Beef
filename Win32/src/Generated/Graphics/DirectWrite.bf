using Win32.Foundation;
using Win32.System.Com;
using Win32.Graphics.Direct2D.Common;
using Win32.Graphics.Gdi;
using Win32.Globalization;
using System;

namespace Win32.Graphics.DirectWrite;

#region Constants
public static
{
	public const uint32 DWRITE_ALPHA_MAX = 255;
	public const uint32 FACILITY_DWRITE = 2200;
	public const uint32 DWRITE_ERR_BASE = 20480;
	public const HRESULT DWRITE_E_REMOTEFONT = -2003283955;
	public const HRESULT DWRITE_E_DOWNLOADCANCELLED = -2003283954;
	public const HRESULT DWRITE_E_DOWNLOADFAILED = -2003283953;
	public const HRESULT DWRITE_E_TOOMANYDOWNLOADS = -2003283952;
}
#endregion

#region Enums

[AllowDuplicates]
public enum DWRITE_FONT_AXIS_TAG : uint32
{
	DWRITE_FONT_AXIS_TAG_WEIGHT = 1952999287,
	DWRITE_FONT_AXIS_TAG_WIDTH = 1752458359,
	DWRITE_FONT_AXIS_TAG_SLANT = 1953393779,
	DWRITE_FONT_AXIS_TAG_OPTICAL_SIZE = 2054385775,
	DWRITE_FONT_AXIS_TAG_ITALIC = 1818326121,
}


[AllowDuplicates]
public enum DWRITE_MEASURING_MODE : int32
{
	DWRITE_MEASURING_MODE_NATURAL = 0,
	DWRITE_MEASURING_MODE_GDI_CLASSIC = 1,
	DWRITE_MEASURING_MODE_GDI_NATURAL = 2,
}


[AllowDuplicates]
public enum DWRITE_GLYPH_IMAGE_FORMATS : uint32
{
	DWRITE_GLYPH_IMAGE_FORMATS_NONE = 0,
	DWRITE_GLYPH_IMAGE_FORMATS_TRUETYPE = 1,
	DWRITE_GLYPH_IMAGE_FORMATS_CFF = 2,
	DWRITE_GLYPH_IMAGE_FORMATS_COLR = 4,
	DWRITE_GLYPH_IMAGE_FORMATS_SVG = 8,
	DWRITE_GLYPH_IMAGE_FORMATS_PNG = 16,
	DWRITE_GLYPH_IMAGE_FORMATS_JPEG = 32,
	DWRITE_GLYPH_IMAGE_FORMATS_TIFF = 64,
	DWRITE_GLYPH_IMAGE_FORMATS_PREMULTIPLIED_B8G8R8A8 = 128,
}


[AllowDuplicates]
public enum DWRITE_FONT_FILE_TYPE : int32
{
	DWRITE_FONT_FILE_TYPE_UNKNOWN = 0,
	DWRITE_FONT_FILE_TYPE_CFF = 1,
	DWRITE_FONT_FILE_TYPE_TRUETYPE = 2,
	DWRITE_FONT_FILE_TYPE_OPENTYPE_COLLECTION = 3,
	DWRITE_FONT_FILE_TYPE_TYPE1_PFM = 4,
	DWRITE_FONT_FILE_TYPE_TYPE1_PFB = 5,
	DWRITE_FONT_FILE_TYPE_VECTOR = 6,
	DWRITE_FONT_FILE_TYPE_BITMAP = 7,
	DWRITE_FONT_FILE_TYPE_TRUETYPE_COLLECTION = 3,
}


[AllowDuplicates]
public enum DWRITE_FONT_FACE_TYPE : int32
{
	DWRITE_FONT_FACE_TYPE_CFF = 0,
	DWRITE_FONT_FACE_TYPE_TRUETYPE = 1,
	DWRITE_FONT_FACE_TYPE_OPENTYPE_COLLECTION = 2,
	DWRITE_FONT_FACE_TYPE_TYPE1 = 3,
	DWRITE_FONT_FACE_TYPE_VECTOR = 4,
	DWRITE_FONT_FACE_TYPE_BITMAP = 5,
	DWRITE_FONT_FACE_TYPE_UNKNOWN = 6,
	DWRITE_FONT_FACE_TYPE_RAW_CFF = 7,
	DWRITE_FONT_FACE_TYPE_TRUETYPE_COLLECTION = 2,
}


[AllowDuplicates]
public enum DWRITE_FONT_SIMULATIONS : uint32
{
	DWRITE_FONT_SIMULATIONS_NONE = 0,
	DWRITE_FONT_SIMULATIONS_BOLD = 1,
	DWRITE_FONT_SIMULATIONS_OBLIQUE = 2,
}


[AllowDuplicates]
public enum DWRITE_FONT_WEIGHT : int32
{
	DWRITE_FONT_WEIGHT_THIN = 100,
	DWRITE_FONT_WEIGHT_EXTRA_LIGHT = 200,
	DWRITE_FONT_WEIGHT_ULTRA_LIGHT = 200,
	DWRITE_FONT_WEIGHT_LIGHT = 300,
	DWRITE_FONT_WEIGHT_SEMI_LIGHT = 350,
	DWRITE_FONT_WEIGHT_NORMAL = 400,
	DWRITE_FONT_WEIGHT_REGULAR = 400,
	DWRITE_FONT_WEIGHT_MEDIUM = 500,
	DWRITE_FONT_WEIGHT_DEMI_BOLD = 600,
	DWRITE_FONT_WEIGHT_SEMI_BOLD = 600,
	DWRITE_FONT_WEIGHT_BOLD = 700,
	DWRITE_FONT_WEIGHT_EXTRA_BOLD = 800,
	DWRITE_FONT_WEIGHT_ULTRA_BOLD = 800,
	DWRITE_FONT_WEIGHT_BLACK = 900,
	DWRITE_FONT_WEIGHT_HEAVY = 900,
	DWRITE_FONT_WEIGHT_EXTRA_BLACK = 950,
	DWRITE_FONT_WEIGHT_ULTRA_BLACK = 950,
}


[AllowDuplicates]
public enum DWRITE_FONT_STRETCH : int32
{
	DWRITE_FONT_STRETCH_UNDEFINED = 0,
	DWRITE_FONT_STRETCH_ULTRA_CONDENSED = 1,
	DWRITE_FONT_STRETCH_EXTRA_CONDENSED = 2,
	DWRITE_FONT_STRETCH_CONDENSED = 3,
	DWRITE_FONT_STRETCH_SEMI_CONDENSED = 4,
	DWRITE_FONT_STRETCH_NORMAL = 5,
	DWRITE_FONT_STRETCH_MEDIUM = 5,
	DWRITE_FONT_STRETCH_SEMI_EXPANDED = 6,
	DWRITE_FONT_STRETCH_EXPANDED = 7,
	DWRITE_FONT_STRETCH_EXTRA_EXPANDED = 8,
	DWRITE_FONT_STRETCH_ULTRA_EXPANDED = 9,
}


[AllowDuplicates]
public enum DWRITE_FONT_STYLE : int32
{
	DWRITE_FONT_STYLE_NORMAL = 0,
	DWRITE_FONT_STYLE_OBLIQUE = 1,
	DWRITE_FONT_STYLE_ITALIC = 2,
}


[AllowDuplicates]
public enum DWRITE_INFORMATIONAL_STRING_ID : int32
{
	DWRITE_INFORMATIONAL_STRING_NONE = 0,
	DWRITE_INFORMATIONAL_STRING_COPYRIGHT_NOTICE = 1,
	DWRITE_INFORMATIONAL_STRING_VERSION_STRINGS = 2,
	DWRITE_INFORMATIONAL_STRING_TRADEMARK = 3,
	DWRITE_INFORMATIONAL_STRING_MANUFACTURER = 4,
	DWRITE_INFORMATIONAL_STRING_DESIGNER = 5,
	DWRITE_INFORMATIONAL_STRING_DESIGNER_URL = 6,
	DWRITE_INFORMATIONAL_STRING_DESCRIPTION = 7,
	DWRITE_INFORMATIONAL_STRING_FONT_VENDOR_URL = 8,
	DWRITE_INFORMATIONAL_STRING_LICENSE_DESCRIPTION = 9,
	DWRITE_INFORMATIONAL_STRING_LICENSE_INFO_URL = 10,
	DWRITE_INFORMATIONAL_STRING_WIN32_FAMILY_NAMES = 11,
	DWRITE_INFORMATIONAL_STRING_WIN32_SUBFAMILY_NAMES = 12,
	DWRITE_INFORMATIONAL_STRING_TYPOGRAPHIC_FAMILY_NAMES = 13,
	DWRITE_INFORMATIONAL_STRING_TYPOGRAPHIC_SUBFAMILY_NAMES = 14,
	DWRITE_INFORMATIONAL_STRING_SAMPLE_TEXT = 15,
	DWRITE_INFORMATIONAL_STRING_FULL_NAME = 16,
	DWRITE_INFORMATIONAL_STRING_POSTSCRIPT_NAME = 17,
	DWRITE_INFORMATIONAL_STRING_POSTSCRIPT_CID_NAME = 18,
	DWRITE_INFORMATIONAL_STRING_WEIGHT_STRETCH_STYLE_FAMILY_NAME = 19,
	DWRITE_INFORMATIONAL_STRING_DESIGN_SCRIPT_LANGUAGE_TAG = 20,
	DWRITE_INFORMATIONAL_STRING_SUPPORTED_SCRIPT_LANGUAGE_TAG = 21,
	DWRITE_INFORMATIONAL_STRING_PREFERRED_FAMILY_NAMES = 13,
	DWRITE_INFORMATIONAL_STRING_PREFERRED_SUBFAMILY_NAMES = 14,
	DWRITE_INFORMATIONAL_STRING_WWS_FAMILY_NAME = 19,
}


[AllowDuplicates]
public enum DWRITE_FACTORY_TYPE : int32
{
	DWRITE_FACTORY_TYPE_SHARED = 0,
	DWRITE_FACTORY_TYPE_ISOLATED = 1,
}


[AllowDuplicates]
public enum DWRITE_PIXEL_GEOMETRY : int32
{
	DWRITE_PIXEL_GEOMETRY_FLAT = 0,
	DWRITE_PIXEL_GEOMETRY_RGB = 1,
	DWRITE_PIXEL_GEOMETRY_BGR = 2,
}


[AllowDuplicates]
public enum DWRITE_RENDERING_MODE : int32
{
	DWRITE_RENDERING_MODE_DEFAULT = 0,
	DWRITE_RENDERING_MODE_ALIASED = 1,
	DWRITE_RENDERING_MODE_GDI_CLASSIC = 2,
	DWRITE_RENDERING_MODE_GDI_NATURAL = 3,
	DWRITE_RENDERING_MODE_NATURAL = 4,
	DWRITE_RENDERING_MODE_NATURAL_SYMMETRIC = 5,
	DWRITE_RENDERING_MODE_OUTLINE = 6,
	DWRITE_RENDERING_MODE_CLEARTYPE_GDI_CLASSIC = 2,
	DWRITE_RENDERING_MODE_CLEARTYPE_GDI_NATURAL = 3,
	DWRITE_RENDERING_MODE_CLEARTYPE_NATURAL = 4,
	DWRITE_RENDERING_MODE_CLEARTYPE_NATURAL_SYMMETRIC = 5,
}


[AllowDuplicates]
public enum DWRITE_READING_DIRECTION : int32
{
	DWRITE_READING_DIRECTION_LEFT_TO_RIGHT = 0,
	DWRITE_READING_DIRECTION_RIGHT_TO_LEFT = 1,
	DWRITE_READING_DIRECTION_TOP_TO_BOTTOM = 2,
	DWRITE_READING_DIRECTION_BOTTOM_TO_TOP = 3,
}


[AllowDuplicates]
public enum DWRITE_FLOW_DIRECTION : int32
{
	DWRITE_FLOW_DIRECTION_TOP_TO_BOTTOM = 0,
	DWRITE_FLOW_DIRECTION_BOTTOM_TO_TOP = 1,
	DWRITE_FLOW_DIRECTION_LEFT_TO_RIGHT = 2,
	DWRITE_FLOW_DIRECTION_RIGHT_TO_LEFT = 3,
}


[AllowDuplicates]
public enum DWRITE_TEXT_ALIGNMENT : int32
{
	DWRITE_TEXT_ALIGNMENT_LEADING = 0,
	DWRITE_TEXT_ALIGNMENT_TRAILING = 1,
	DWRITE_TEXT_ALIGNMENT_CENTER = 2,
	DWRITE_TEXT_ALIGNMENT_JUSTIFIED = 3,
}


[AllowDuplicates]
public enum DWRITE_PARAGRAPH_ALIGNMENT : int32
{
	DWRITE_PARAGRAPH_ALIGNMENT_NEAR = 0,
	DWRITE_PARAGRAPH_ALIGNMENT_FAR = 1,
	DWRITE_PARAGRAPH_ALIGNMENT_CENTER = 2,
}


[AllowDuplicates]
public enum DWRITE_WORD_WRAPPING : int32
{
	DWRITE_WORD_WRAPPING_WRAP = 0,
	DWRITE_WORD_WRAPPING_NO_WRAP = 1,
	DWRITE_WORD_WRAPPING_EMERGENCY_BREAK = 2,
	DWRITE_WORD_WRAPPING_WHOLE_WORD = 3,
	DWRITE_WORD_WRAPPING_CHARACTER = 4,
}


[AllowDuplicates]
public enum DWRITE_LINE_SPACING_METHOD : int32
{
	DWRITE_LINE_SPACING_METHOD_DEFAULT = 0,
	DWRITE_LINE_SPACING_METHOD_UNIFORM = 1,
	DWRITE_LINE_SPACING_METHOD_PROPORTIONAL = 2,
}


[AllowDuplicates]
public enum DWRITE_TRIMMING_GRANULARITY : int32
{
	DWRITE_TRIMMING_GRANULARITY_NONE = 0,
	DWRITE_TRIMMING_GRANULARITY_CHARACTER = 1,
	DWRITE_TRIMMING_GRANULARITY_WORD = 2,
}


[AllowDuplicates]
public enum DWRITE_FONT_FEATURE_TAG : uint32
{
	DWRITE_FONT_FEATURE_TAG_ALTERNATIVE_FRACTIONS = 1668441697,
	DWRITE_FONT_FEATURE_TAG_PETITE_CAPITALS_FROM_CAPITALS = 1668297315,
	DWRITE_FONT_FEATURE_TAG_SMALL_CAPITALS_FROM_CAPITALS = 1668493923,
	DWRITE_FONT_FEATURE_TAG_CONTEXTUAL_ALTERNATES = 1953259875,
	DWRITE_FONT_FEATURE_TAG_CASE_SENSITIVE_FORMS = 1702060387,
	DWRITE_FONT_FEATURE_TAG_GLYPH_COMPOSITION_DECOMPOSITION = 1886217059,
	DWRITE_FONT_FEATURE_TAG_CONTEXTUAL_LIGATURES = 1734962275,
	DWRITE_FONT_FEATURE_TAG_CAPITAL_SPACING = 1886613603,
	DWRITE_FONT_FEATURE_TAG_CONTEXTUAL_SWASH = 1752658787,
	DWRITE_FONT_FEATURE_TAG_CURSIVE_POSITIONING = 1936880995,
	DWRITE_FONT_FEATURE_TAG_DEFAULT = 1953261156,
	DWRITE_FONT_FEATURE_TAG_DISCRETIONARY_LIGATURES = 1734962276,
	DWRITE_FONT_FEATURE_TAG_EXPERT_FORMS = 1953527909,
	DWRITE_FONT_FEATURE_TAG_FRACTIONS = 1667330662,
	DWRITE_FONT_FEATURE_TAG_FULL_WIDTH = 1684633446,
	DWRITE_FONT_FEATURE_TAG_HALF_FORMS = 1718378856,
	DWRITE_FONT_FEATURE_TAG_HALANT_FORMS = 1852596584,
	DWRITE_FONT_FEATURE_TAG_ALTERNATE_HALF_WIDTH = 1953259880,
	DWRITE_FONT_FEATURE_TAG_HISTORICAL_FORMS = 1953720680,
	DWRITE_FONT_FEATURE_TAG_HORIZONTAL_KANA_ALTERNATES = 1634626408,
	DWRITE_FONT_FEATURE_TAG_HISTORICAL_LIGATURES = 1734962280,
	DWRITE_FONT_FEATURE_TAG_HALF_WIDTH = 1684633448,
	DWRITE_FONT_FEATURE_TAG_HOJO_KANJI_FORMS = 1869246312,
	DWRITE_FONT_FEATURE_TAG_JIS04_FORMS = 875589738,
	DWRITE_FONT_FEATURE_TAG_JIS78_FORMS = 943157354,
	DWRITE_FONT_FEATURE_TAG_JIS83_FORMS = 859336810,
	DWRITE_FONT_FEATURE_TAG_JIS90_FORMS = 809070698,
	DWRITE_FONT_FEATURE_TAG_KERNING = 1852990827,
	DWRITE_FONT_FEATURE_TAG_STANDARD_LIGATURES = 1634167148,
	DWRITE_FONT_FEATURE_TAG_LINING_FIGURES = 1836412524,
	DWRITE_FONT_FEATURE_TAG_LOCALIZED_FORMS = 1818455916,
	DWRITE_FONT_FEATURE_TAG_MARK_POSITIONING = 1802658157,
	DWRITE_FONT_FEATURE_TAG_MATHEMATICAL_GREEK = 1802659693,
	DWRITE_FONT_FEATURE_TAG_MARK_TO_MARK_POSITIONING = 1802333037,
	DWRITE_FONT_FEATURE_TAG_ALTERNATE_ANNOTATION_FORMS = 1953259886,
	DWRITE_FONT_FEATURE_TAG_NLC_KANJI_FORMS = 1801677934,
	DWRITE_FONT_FEATURE_TAG_OLD_STYLE_FIGURES = 1836412527,
	DWRITE_FONT_FEATURE_TAG_ORDINALS = 1852076655,
	DWRITE_FONT_FEATURE_TAG_PROPORTIONAL_ALTERNATE_WIDTH = 1953259888,
	DWRITE_FONT_FEATURE_TAG_PETITE_CAPITALS = 1885430640,
	DWRITE_FONT_FEATURE_TAG_PROPORTIONAL_FIGURES = 1836412528,
	DWRITE_FONT_FEATURE_TAG_PROPORTIONAL_WIDTHS = 1684633456,
	DWRITE_FONT_FEATURE_TAG_QUARTER_WIDTHS = 1684633457,
	DWRITE_FONT_FEATURE_TAG_REQUIRED_LIGATURES = 1734962290,
	DWRITE_FONT_FEATURE_TAG_RUBY_NOTATION_FORMS = 2036495730,
	DWRITE_FONT_FEATURE_TAG_STYLISTIC_ALTERNATES = 1953259891,
	DWRITE_FONT_FEATURE_TAG_SCIENTIFIC_INFERIORS = 1718511987,
	DWRITE_FONT_FEATURE_TAG_SMALL_CAPITALS = 1885564275,
	DWRITE_FONT_FEATURE_TAG_SIMPLIFIED_FORMS = 1819307379,
	DWRITE_FONT_FEATURE_TAG_STYLISTIC_SET_1 = 825258867,
	DWRITE_FONT_FEATURE_TAG_STYLISTIC_SET_2 = 842036083,
	DWRITE_FONT_FEATURE_TAG_STYLISTIC_SET_3 = 858813299,
	DWRITE_FONT_FEATURE_TAG_STYLISTIC_SET_4 = 875590515,
	DWRITE_FONT_FEATURE_TAG_STYLISTIC_SET_5 = 892367731,
	DWRITE_FONT_FEATURE_TAG_STYLISTIC_SET_6 = 909144947,
	DWRITE_FONT_FEATURE_TAG_STYLISTIC_SET_7 = 925922163,
	DWRITE_FONT_FEATURE_TAG_STYLISTIC_SET_8 = 942699379,
	DWRITE_FONT_FEATURE_TAG_STYLISTIC_SET_9 = 959476595,
	DWRITE_FONT_FEATURE_TAG_STYLISTIC_SET_10 = 808547187,
	DWRITE_FONT_FEATURE_TAG_STYLISTIC_SET_11 = 825324403,
	DWRITE_FONT_FEATURE_TAG_STYLISTIC_SET_12 = 842101619,
	DWRITE_FONT_FEATURE_TAG_STYLISTIC_SET_13 = 858878835,
	DWRITE_FONT_FEATURE_TAG_STYLISTIC_SET_14 = 875656051,
	DWRITE_FONT_FEATURE_TAG_STYLISTIC_SET_15 = 892433267,
	DWRITE_FONT_FEATURE_TAG_STYLISTIC_SET_16 = 909210483,
	DWRITE_FONT_FEATURE_TAG_STYLISTIC_SET_17 = 925987699,
	DWRITE_FONT_FEATURE_TAG_STYLISTIC_SET_18 = 942764915,
	DWRITE_FONT_FEATURE_TAG_STYLISTIC_SET_19 = 959542131,
	DWRITE_FONT_FEATURE_TAG_STYLISTIC_SET_20 = 808612723,
	DWRITE_FONT_FEATURE_TAG_SUBSCRIPT = 1935832435,
	DWRITE_FONT_FEATURE_TAG_SUPERSCRIPT = 1936749939,
	DWRITE_FONT_FEATURE_TAG_SWASH = 1752397683,
	DWRITE_FONT_FEATURE_TAG_TITLING = 1819568500,
	DWRITE_FONT_FEATURE_TAG_TRADITIONAL_NAME_FORMS = 1835101812,
	DWRITE_FONT_FEATURE_TAG_TABULAR_FIGURES = 1836412532,
	DWRITE_FONT_FEATURE_TAG_TRADITIONAL_FORMS = 1684107892,
	DWRITE_FONT_FEATURE_TAG_THIRD_WIDTHS = 1684633460,
	DWRITE_FONT_FEATURE_TAG_UNICASE = 1667853941,
	DWRITE_FONT_FEATURE_TAG_VERTICAL_WRITING = 1953654134,
	DWRITE_FONT_FEATURE_TAG_VERTICAL_ALTERNATES_AND_ROTATION = 846492278,
	DWRITE_FONT_FEATURE_TAG_SLASHED_ZERO = 1869768058,
}


[AllowDuplicates]
public enum DWRITE_SCRIPT_SHAPES : uint32
{
	DWRITE_SCRIPT_SHAPES_DEFAULT = 0,
	DWRITE_SCRIPT_SHAPES_NO_VISUAL = 1,
}


[AllowDuplicates]
public enum DWRITE_BREAK_CONDITION : int32
{
	DWRITE_BREAK_CONDITION_NEUTRAL = 0,
	DWRITE_BREAK_CONDITION_CAN_BREAK = 1,
	DWRITE_BREAK_CONDITION_MAY_NOT_BREAK = 2,
	DWRITE_BREAK_CONDITION_MUST_BREAK = 3,
}


[AllowDuplicates]
public enum DWRITE_NUMBER_SUBSTITUTION_METHOD : int32
{
	DWRITE_NUMBER_SUBSTITUTION_METHOD_FROM_CULTURE = 0,
	DWRITE_NUMBER_SUBSTITUTION_METHOD_CONTEXTUAL = 1,
	DWRITE_NUMBER_SUBSTITUTION_METHOD_NONE = 2,
	DWRITE_NUMBER_SUBSTITUTION_METHOD_NATIONAL = 3,
	DWRITE_NUMBER_SUBSTITUTION_METHOD_TRADITIONAL = 4,
}


[AllowDuplicates]
public enum DWRITE_TEXTURE_TYPE : int32
{
	DWRITE_TEXTURE_ALIASED_1x1 = 0,
	DWRITE_TEXTURE_CLEARTYPE_3x1 = 1,
}


[AllowDuplicates]
public enum DWRITE_PANOSE_FAMILY : int32
{
	DWRITE_PANOSE_FAMILY_ANY = 0,
	DWRITE_PANOSE_FAMILY_NO_FIT = 1,
	DWRITE_PANOSE_FAMILY_TEXT_DISPLAY = 2,
	DWRITE_PANOSE_FAMILY_SCRIPT = 3,
	DWRITE_PANOSE_FAMILY_DECORATIVE = 4,
	DWRITE_PANOSE_FAMILY_SYMBOL = 5,
	DWRITE_PANOSE_FAMILY_PICTORIAL = 5,
}


[AllowDuplicates]
public enum DWRITE_PANOSE_SERIF_STYLE : int32
{
	DWRITE_PANOSE_SERIF_STYLE_ANY = 0,
	DWRITE_PANOSE_SERIF_STYLE_NO_FIT = 1,
	DWRITE_PANOSE_SERIF_STYLE_COVE = 2,
	DWRITE_PANOSE_SERIF_STYLE_OBTUSE_COVE = 3,
	DWRITE_PANOSE_SERIF_STYLE_SQUARE_COVE = 4,
	DWRITE_PANOSE_SERIF_STYLE_OBTUSE_SQUARE_COVE = 5,
	DWRITE_PANOSE_SERIF_STYLE_SQUARE = 6,
	DWRITE_PANOSE_SERIF_STYLE_THIN = 7,
	DWRITE_PANOSE_SERIF_STYLE_OVAL = 8,
	DWRITE_PANOSE_SERIF_STYLE_EXAGGERATED = 9,
	DWRITE_PANOSE_SERIF_STYLE_TRIANGLE = 10,
	DWRITE_PANOSE_SERIF_STYLE_NORMAL_SANS = 11,
	DWRITE_PANOSE_SERIF_STYLE_OBTUSE_SANS = 12,
	DWRITE_PANOSE_SERIF_STYLE_PERPENDICULAR_SANS = 13,
	DWRITE_PANOSE_SERIF_STYLE_FLARED = 14,
	DWRITE_PANOSE_SERIF_STYLE_ROUNDED = 15,
	DWRITE_PANOSE_SERIF_STYLE_SCRIPT = 16,
	DWRITE_PANOSE_SERIF_STYLE_PERP_SANS = 13,
	DWRITE_PANOSE_SERIF_STYLE_BONE = 8,
}


[AllowDuplicates]
public enum DWRITE_PANOSE_WEIGHT : int32
{
	DWRITE_PANOSE_WEIGHT_ANY = 0,
	DWRITE_PANOSE_WEIGHT_NO_FIT = 1,
	DWRITE_PANOSE_WEIGHT_VERY_LIGHT = 2,
	DWRITE_PANOSE_WEIGHT_LIGHT = 3,
	DWRITE_PANOSE_WEIGHT_THIN = 4,
	DWRITE_PANOSE_WEIGHT_BOOK = 5,
	DWRITE_PANOSE_WEIGHT_MEDIUM = 6,
	DWRITE_PANOSE_WEIGHT_DEMI = 7,
	DWRITE_PANOSE_WEIGHT_BOLD = 8,
	DWRITE_PANOSE_WEIGHT_HEAVY = 9,
	DWRITE_PANOSE_WEIGHT_BLACK = 10,
	DWRITE_PANOSE_WEIGHT_EXTRA_BLACK = 11,
	DWRITE_PANOSE_WEIGHT_NORD = 11,
}


[AllowDuplicates]
public enum DWRITE_PANOSE_PROPORTION : int32
{
	DWRITE_PANOSE_PROPORTION_ANY = 0,
	DWRITE_PANOSE_PROPORTION_NO_FIT = 1,
	DWRITE_PANOSE_PROPORTION_OLD_STYLE = 2,
	DWRITE_PANOSE_PROPORTION_MODERN = 3,
	DWRITE_PANOSE_PROPORTION_EVEN_WIDTH = 4,
	DWRITE_PANOSE_PROPORTION_EXPANDED = 5,
	DWRITE_PANOSE_PROPORTION_CONDENSED = 6,
	DWRITE_PANOSE_PROPORTION_VERY_EXPANDED = 7,
	DWRITE_PANOSE_PROPORTION_VERY_CONDENSED = 8,
	DWRITE_PANOSE_PROPORTION_MONOSPACED = 9,
}


[AllowDuplicates]
public enum DWRITE_PANOSE_CONTRAST : int32
{
	DWRITE_PANOSE_CONTRAST_ANY = 0,
	DWRITE_PANOSE_CONTRAST_NO_FIT = 1,
	DWRITE_PANOSE_CONTRAST_NONE = 2,
	DWRITE_PANOSE_CONTRAST_VERY_LOW = 3,
	DWRITE_PANOSE_CONTRAST_LOW = 4,
	DWRITE_PANOSE_CONTRAST_MEDIUM_LOW = 5,
	DWRITE_PANOSE_CONTRAST_MEDIUM = 6,
	DWRITE_PANOSE_CONTRAST_MEDIUM_HIGH = 7,
	DWRITE_PANOSE_CONTRAST_HIGH = 8,
	DWRITE_PANOSE_CONTRAST_VERY_HIGH = 9,
	DWRITE_PANOSE_CONTRAST_HORIZONTAL_LOW = 10,
	DWRITE_PANOSE_CONTRAST_HORIZONTAL_MEDIUM = 11,
	DWRITE_PANOSE_CONTRAST_HORIZONTAL_HIGH = 12,
	DWRITE_PANOSE_CONTRAST_BROKEN = 13,
}


[AllowDuplicates]
public enum DWRITE_PANOSE_STROKE_VARIATION : int32
{
	DWRITE_PANOSE_STROKE_VARIATION_ANY = 0,
	DWRITE_PANOSE_STROKE_VARIATION_NO_FIT = 1,
	DWRITE_PANOSE_STROKE_VARIATION_NO_VARIATION = 2,
	DWRITE_PANOSE_STROKE_VARIATION_GRADUAL_DIAGONAL = 3,
	DWRITE_PANOSE_STROKE_VARIATION_GRADUAL_TRANSITIONAL = 4,
	DWRITE_PANOSE_STROKE_VARIATION_GRADUAL_VERTICAL = 5,
	DWRITE_PANOSE_STROKE_VARIATION_GRADUAL_HORIZONTAL = 6,
	DWRITE_PANOSE_STROKE_VARIATION_RAPID_VERTICAL = 7,
	DWRITE_PANOSE_STROKE_VARIATION_RAPID_HORIZONTAL = 8,
	DWRITE_PANOSE_STROKE_VARIATION_INSTANT_VERTICAL = 9,
	DWRITE_PANOSE_STROKE_VARIATION_INSTANT_HORIZONTAL = 10,
}


[AllowDuplicates]
public enum DWRITE_PANOSE_ARM_STYLE : int32
{
	DWRITE_PANOSE_ARM_STYLE_ANY = 0,
	DWRITE_PANOSE_ARM_STYLE_NO_FIT = 1,
	DWRITE_PANOSE_ARM_STYLE_STRAIGHT_ARMS_HORIZONTAL = 2,
	DWRITE_PANOSE_ARM_STYLE_STRAIGHT_ARMS_WEDGE = 3,
	DWRITE_PANOSE_ARM_STYLE_STRAIGHT_ARMS_VERTICAL = 4,
	DWRITE_PANOSE_ARM_STYLE_STRAIGHT_ARMS_SINGLE_SERIF = 5,
	DWRITE_PANOSE_ARM_STYLE_STRAIGHT_ARMS_DOUBLE_SERIF = 6,
	DWRITE_PANOSE_ARM_STYLE_NONSTRAIGHT_ARMS_HORIZONTAL = 7,
	DWRITE_PANOSE_ARM_STYLE_NONSTRAIGHT_ARMS_WEDGE = 8,
	DWRITE_PANOSE_ARM_STYLE_NONSTRAIGHT_ARMS_VERTICAL = 9,
	DWRITE_PANOSE_ARM_STYLE_NONSTRAIGHT_ARMS_SINGLE_SERIF = 10,
	DWRITE_PANOSE_ARM_STYLE_NONSTRAIGHT_ARMS_DOUBLE_SERIF = 11,
	DWRITE_PANOSE_ARM_STYLE_STRAIGHT_ARMS_HORZ = 2,
	DWRITE_PANOSE_ARM_STYLE_STRAIGHT_ARMS_VERT = 4,
	DWRITE_PANOSE_ARM_STYLE_BENT_ARMS_HORZ = 7,
	DWRITE_PANOSE_ARM_STYLE_BENT_ARMS_WEDGE = 8,
	DWRITE_PANOSE_ARM_STYLE_BENT_ARMS_VERT = 9,
	DWRITE_PANOSE_ARM_STYLE_BENT_ARMS_SINGLE_SERIF = 10,
	DWRITE_PANOSE_ARM_STYLE_BENT_ARMS_DOUBLE_SERIF = 11,
}


[AllowDuplicates]
public enum DWRITE_PANOSE_LETTERFORM : int32
{
	DWRITE_PANOSE_LETTERFORM_ANY = 0,
	DWRITE_PANOSE_LETTERFORM_NO_FIT = 1,
	DWRITE_PANOSE_LETTERFORM_NORMAL_CONTACT = 2,
	DWRITE_PANOSE_LETTERFORM_NORMAL_WEIGHTED = 3,
	DWRITE_PANOSE_LETTERFORM_NORMAL_BOXED = 4,
	DWRITE_PANOSE_LETTERFORM_NORMAL_FLATTENED = 5,
	DWRITE_PANOSE_LETTERFORM_NORMAL_ROUNDED = 6,
	DWRITE_PANOSE_LETTERFORM_NORMAL_OFF_CENTER = 7,
	DWRITE_PANOSE_LETTERFORM_NORMAL_SQUARE = 8,
	DWRITE_PANOSE_LETTERFORM_OBLIQUE_CONTACT = 9,
	DWRITE_PANOSE_LETTERFORM_OBLIQUE_WEIGHTED = 10,
	DWRITE_PANOSE_LETTERFORM_OBLIQUE_BOXED = 11,
	DWRITE_PANOSE_LETTERFORM_OBLIQUE_FLATTENED = 12,
	DWRITE_PANOSE_LETTERFORM_OBLIQUE_ROUNDED = 13,
	DWRITE_PANOSE_LETTERFORM_OBLIQUE_OFF_CENTER = 14,
	DWRITE_PANOSE_LETTERFORM_OBLIQUE_SQUARE = 15,
}


[AllowDuplicates]
public enum DWRITE_PANOSE_MIDLINE : int32
{
	DWRITE_PANOSE_MIDLINE_ANY = 0,
	DWRITE_PANOSE_MIDLINE_NO_FIT = 1,
	DWRITE_PANOSE_MIDLINE_STANDARD_TRIMMED = 2,
	DWRITE_PANOSE_MIDLINE_STANDARD_POINTED = 3,
	DWRITE_PANOSE_MIDLINE_STANDARD_SERIFED = 4,
	DWRITE_PANOSE_MIDLINE_HIGH_TRIMMED = 5,
	DWRITE_PANOSE_MIDLINE_HIGH_POINTED = 6,
	DWRITE_PANOSE_MIDLINE_HIGH_SERIFED = 7,
	DWRITE_PANOSE_MIDLINE_CONSTANT_TRIMMED = 8,
	DWRITE_PANOSE_MIDLINE_CONSTANT_POINTED = 9,
	DWRITE_PANOSE_MIDLINE_CONSTANT_SERIFED = 10,
	DWRITE_PANOSE_MIDLINE_LOW_TRIMMED = 11,
	DWRITE_PANOSE_MIDLINE_LOW_POINTED = 12,
	DWRITE_PANOSE_MIDLINE_LOW_SERIFED = 13,
}


[AllowDuplicates]
public enum DWRITE_PANOSE_XHEIGHT : int32
{
	DWRITE_PANOSE_XHEIGHT_ANY = 0,
	DWRITE_PANOSE_XHEIGHT_NO_FIT = 1,
	DWRITE_PANOSE_XHEIGHT_CONSTANT_SMALL = 2,
	DWRITE_PANOSE_XHEIGHT_CONSTANT_STANDARD = 3,
	DWRITE_PANOSE_XHEIGHT_CONSTANT_LARGE = 4,
	DWRITE_PANOSE_XHEIGHT_DUCKING_SMALL = 5,
	DWRITE_PANOSE_XHEIGHT_DUCKING_STANDARD = 6,
	DWRITE_PANOSE_XHEIGHT_DUCKING_LARGE = 7,
	DWRITE_PANOSE_XHEIGHT_CONSTANT_STD = 3,
	DWRITE_PANOSE_XHEIGHT_DUCKING_STD = 6,
}


[AllowDuplicates]
public enum DWRITE_PANOSE_TOOL_KIND : int32
{
	DWRITE_PANOSE_TOOL_KIND_ANY = 0,
	DWRITE_PANOSE_TOOL_KIND_NO_FIT = 1,
	DWRITE_PANOSE_TOOL_KIND_FLAT_NIB = 2,
	DWRITE_PANOSE_TOOL_KIND_PRESSURE_POINT = 3,
	DWRITE_PANOSE_TOOL_KIND_ENGRAVED = 4,
	DWRITE_PANOSE_TOOL_KIND_BALL = 5,
	DWRITE_PANOSE_TOOL_KIND_BRUSH = 6,
	DWRITE_PANOSE_TOOL_KIND_ROUGH = 7,
	DWRITE_PANOSE_TOOL_KIND_FELT_PEN_BRUSH_TIP = 8,
	DWRITE_PANOSE_TOOL_KIND_WILD_BRUSH = 9,
}


[AllowDuplicates]
public enum DWRITE_PANOSE_SPACING : int32
{
	DWRITE_PANOSE_SPACING_ANY = 0,
	DWRITE_PANOSE_SPACING_NO_FIT = 1,
	DWRITE_PANOSE_SPACING_PROPORTIONAL_SPACED = 2,
	DWRITE_PANOSE_SPACING_MONOSPACED = 3,
}


[AllowDuplicates]
public enum DWRITE_PANOSE_ASPECT_RATIO : int32
{
	DWRITE_PANOSE_ASPECT_RATIO_ANY = 0,
	DWRITE_PANOSE_ASPECT_RATIO_NO_FIT = 1,
	DWRITE_PANOSE_ASPECT_RATIO_VERY_CONDENSED = 2,
	DWRITE_PANOSE_ASPECT_RATIO_CONDENSED = 3,
	DWRITE_PANOSE_ASPECT_RATIO_NORMAL = 4,
	DWRITE_PANOSE_ASPECT_RATIO_EXPANDED = 5,
	DWRITE_PANOSE_ASPECT_RATIO_VERY_EXPANDED = 6,
}


[AllowDuplicates]
public enum DWRITE_PANOSE_SCRIPT_TOPOLOGY : int32
{
	DWRITE_PANOSE_SCRIPT_TOPOLOGY_ANY = 0,
	DWRITE_PANOSE_SCRIPT_TOPOLOGY_NO_FIT = 1,
	DWRITE_PANOSE_SCRIPT_TOPOLOGY_ROMAN_DISCONNECTED = 2,
	DWRITE_PANOSE_SCRIPT_TOPOLOGY_ROMAN_TRAILING = 3,
	DWRITE_PANOSE_SCRIPT_TOPOLOGY_ROMAN_CONNECTED = 4,
	DWRITE_PANOSE_SCRIPT_TOPOLOGY_CURSIVE_DISCONNECTED = 5,
	DWRITE_PANOSE_SCRIPT_TOPOLOGY_CURSIVE_TRAILING = 6,
	DWRITE_PANOSE_SCRIPT_TOPOLOGY_CURSIVE_CONNECTED = 7,
	DWRITE_PANOSE_SCRIPT_TOPOLOGY_BLACKLETTER_DISCONNECTED = 8,
	DWRITE_PANOSE_SCRIPT_TOPOLOGY_BLACKLETTER_TRAILING = 9,
	DWRITE_PANOSE_SCRIPT_TOPOLOGY_BLACKLETTER_CONNECTED = 10,
}


[AllowDuplicates]
public enum DWRITE_PANOSE_SCRIPT_FORM : int32
{
	DWRITE_PANOSE_SCRIPT_FORM_ANY = 0,
	DWRITE_PANOSE_SCRIPT_FORM_NO_FIT = 1,
	DWRITE_PANOSE_SCRIPT_FORM_UPRIGHT_NO_WRAPPING = 2,
	DWRITE_PANOSE_SCRIPT_FORM_UPRIGHT_SOME_WRAPPING = 3,
	DWRITE_PANOSE_SCRIPT_FORM_UPRIGHT_MORE_WRAPPING = 4,
	DWRITE_PANOSE_SCRIPT_FORM_UPRIGHT_EXTREME_WRAPPING = 5,
	DWRITE_PANOSE_SCRIPT_FORM_OBLIQUE_NO_WRAPPING = 6,
	DWRITE_PANOSE_SCRIPT_FORM_OBLIQUE_SOME_WRAPPING = 7,
	DWRITE_PANOSE_SCRIPT_FORM_OBLIQUE_MORE_WRAPPING = 8,
	DWRITE_PANOSE_SCRIPT_FORM_OBLIQUE_EXTREME_WRAPPING = 9,
	DWRITE_PANOSE_SCRIPT_FORM_EXAGGERATED_NO_WRAPPING = 10,
	DWRITE_PANOSE_SCRIPT_FORM_EXAGGERATED_SOME_WRAPPING = 11,
	DWRITE_PANOSE_SCRIPT_FORM_EXAGGERATED_MORE_WRAPPING = 12,
	DWRITE_PANOSE_SCRIPT_FORM_EXAGGERATED_EXTREME_WRAPPING = 13,
}


[AllowDuplicates]
public enum DWRITE_PANOSE_FINIALS : int32
{
	DWRITE_PANOSE_FINIALS_ANY = 0,
	DWRITE_PANOSE_FINIALS_NO_FIT = 1,
	DWRITE_PANOSE_FINIALS_NONE_NO_LOOPS = 2,
	DWRITE_PANOSE_FINIALS_NONE_CLOSED_LOOPS = 3,
	DWRITE_PANOSE_FINIALS_NONE_OPEN_LOOPS = 4,
	DWRITE_PANOSE_FINIALS_SHARP_NO_LOOPS = 5,
	DWRITE_PANOSE_FINIALS_SHARP_CLOSED_LOOPS = 6,
	DWRITE_PANOSE_FINIALS_SHARP_OPEN_LOOPS = 7,
	DWRITE_PANOSE_FINIALS_TAPERED_NO_LOOPS = 8,
	DWRITE_PANOSE_FINIALS_TAPERED_CLOSED_LOOPS = 9,
	DWRITE_PANOSE_FINIALS_TAPERED_OPEN_LOOPS = 10,
	DWRITE_PANOSE_FINIALS_ROUND_NO_LOOPS = 11,
	DWRITE_PANOSE_FINIALS_ROUND_CLOSED_LOOPS = 12,
	DWRITE_PANOSE_FINIALS_ROUND_OPEN_LOOPS = 13,
}


[AllowDuplicates]
public enum DWRITE_PANOSE_XASCENT : int32
{
	DWRITE_PANOSE_XASCENT_ANY = 0,
	DWRITE_PANOSE_XASCENT_NO_FIT = 1,
	DWRITE_PANOSE_XASCENT_VERY_LOW = 2,
	DWRITE_PANOSE_XASCENT_LOW = 3,
	DWRITE_PANOSE_XASCENT_MEDIUM = 4,
	DWRITE_PANOSE_XASCENT_HIGH = 5,
	DWRITE_PANOSE_XASCENT_VERY_HIGH = 6,
}


[AllowDuplicates]
public enum DWRITE_PANOSE_DECORATIVE_CLASS : int32
{
	DWRITE_PANOSE_DECORATIVE_CLASS_ANY = 0,
	DWRITE_PANOSE_DECORATIVE_CLASS_NO_FIT = 1,
	DWRITE_PANOSE_DECORATIVE_CLASS_DERIVATIVE = 2,
	DWRITE_PANOSE_DECORATIVE_CLASS_NONSTANDARD_TOPOLOGY = 3,
	DWRITE_PANOSE_DECORATIVE_CLASS_NONSTANDARD_ELEMENTS = 4,
	DWRITE_PANOSE_DECORATIVE_CLASS_NONSTANDARD_ASPECT = 5,
	DWRITE_PANOSE_DECORATIVE_CLASS_INITIALS = 6,
	DWRITE_PANOSE_DECORATIVE_CLASS_CARTOON = 7,
	DWRITE_PANOSE_DECORATIVE_CLASS_PICTURE_STEMS = 8,
	DWRITE_PANOSE_DECORATIVE_CLASS_ORNAMENTED = 9,
	DWRITE_PANOSE_DECORATIVE_CLASS_TEXT_AND_BACKGROUND = 10,
	DWRITE_PANOSE_DECORATIVE_CLASS_COLLAGE = 11,
	DWRITE_PANOSE_DECORATIVE_CLASS_MONTAGE = 12,
}


[AllowDuplicates]
public enum DWRITE_PANOSE_ASPECT : int32
{
	DWRITE_PANOSE_ASPECT_ANY = 0,
	DWRITE_PANOSE_ASPECT_NO_FIT = 1,
	DWRITE_PANOSE_ASPECT_SUPER_CONDENSED = 2,
	DWRITE_PANOSE_ASPECT_VERY_CONDENSED = 3,
	DWRITE_PANOSE_ASPECT_CONDENSED = 4,
	DWRITE_PANOSE_ASPECT_NORMAL = 5,
	DWRITE_PANOSE_ASPECT_EXTENDED = 6,
	DWRITE_PANOSE_ASPECT_VERY_EXTENDED = 7,
	DWRITE_PANOSE_ASPECT_SUPER_EXTENDED = 8,
	DWRITE_PANOSE_ASPECT_MONOSPACED = 9,
}


[AllowDuplicates]
public enum DWRITE_PANOSE_FILL : int32
{
	DWRITE_PANOSE_FILL_ANY = 0,
	DWRITE_PANOSE_FILL_NO_FIT = 1,
	DWRITE_PANOSE_FILL_STANDARD_SOLID_FILL = 2,
	DWRITE_PANOSE_FILL_NO_FILL = 3,
	DWRITE_PANOSE_FILL_PATTERNED_FILL = 4,
	DWRITE_PANOSE_FILL_COMPLEX_FILL = 5,
	DWRITE_PANOSE_FILL_SHAPED_FILL = 6,
	DWRITE_PANOSE_FILL_DRAWN_DISTRESSED = 7,
}


[AllowDuplicates]
public enum DWRITE_PANOSE_LINING : int32
{
	DWRITE_PANOSE_LINING_ANY = 0,
	DWRITE_PANOSE_LINING_NO_FIT = 1,
	DWRITE_PANOSE_LINING_NONE = 2,
	DWRITE_PANOSE_LINING_INLINE = 3,
	DWRITE_PANOSE_LINING_OUTLINE = 4,
	DWRITE_PANOSE_LINING_ENGRAVED = 5,
	DWRITE_PANOSE_LINING_SHADOW = 6,
	DWRITE_PANOSE_LINING_RELIEF = 7,
	DWRITE_PANOSE_LINING_BACKDROP = 8,
}


[AllowDuplicates]
public enum DWRITE_PANOSE_DECORATIVE_TOPOLOGY : int32
{
	DWRITE_PANOSE_DECORATIVE_TOPOLOGY_ANY = 0,
	DWRITE_PANOSE_DECORATIVE_TOPOLOGY_NO_FIT = 1,
	DWRITE_PANOSE_DECORATIVE_TOPOLOGY_STANDARD = 2,
	DWRITE_PANOSE_DECORATIVE_TOPOLOGY_SQUARE = 3,
	DWRITE_PANOSE_DECORATIVE_TOPOLOGY_MULTIPLE_SEGMENT = 4,
	DWRITE_PANOSE_DECORATIVE_TOPOLOGY_ART_DECO = 5,
	DWRITE_PANOSE_DECORATIVE_TOPOLOGY_UNEVEN_WEIGHTING = 6,
	DWRITE_PANOSE_DECORATIVE_TOPOLOGY_DIVERSE_ARMS = 7,
	DWRITE_PANOSE_DECORATIVE_TOPOLOGY_DIVERSE_FORMS = 8,
	DWRITE_PANOSE_DECORATIVE_TOPOLOGY_LOMBARDIC_FORMS = 9,
	DWRITE_PANOSE_DECORATIVE_TOPOLOGY_UPPER_CASE_IN_LOWER_CASE = 10,
	DWRITE_PANOSE_DECORATIVE_TOPOLOGY_IMPLIED_TOPOLOGY = 11,
	DWRITE_PANOSE_DECORATIVE_TOPOLOGY_HORSESHOE_E_AND_A = 12,
	DWRITE_PANOSE_DECORATIVE_TOPOLOGY_CURSIVE = 13,
	DWRITE_PANOSE_DECORATIVE_TOPOLOGY_BLACKLETTER = 14,
	DWRITE_PANOSE_DECORATIVE_TOPOLOGY_SWASH_VARIANCE = 15,
}


[AllowDuplicates]
public enum DWRITE_PANOSE_CHARACTER_RANGES : int32
{
	DWRITE_PANOSE_CHARACTER_RANGES_ANY = 0,
	DWRITE_PANOSE_CHARACTER_RANGES_NO_FIT = 1,
	DWRITE_PANOSE_CHARACTER_RANGES_EXTENDED_COLLECTION = 2,
	DWRITE_PANOSE_CHARACTER_RANGES_LITERALS = 3,
	DWRITE_PANOSE_CHARACTER_RANGES_NO_LOWER_CASE = 4,
	DWRITE_PANOSE_CHARACTER_RANGES_SMALL_CAPS = 5,
}


[AllowDuplicates]
public enum DWRITE_PANOSE_SYMBOL_KIND : int32
{
	DWRITE_PANOSE_SYMBOL_KIND_ANY = 0,
	DWRITE_PANOSE_SYMBOL_KIND_NO_FIT = 1,
	DWRITE_PANOSE_SYMBOL_KIND_MONTAGES = 2,
	DWRITE_PANOSE_SYMBOL_KIND_PICTURES = 3,
	DWRITE_PANOSE_SYMBOL_KIND_SHAPES = 4,
	DWRITE_PANOSE_SYMBOL_KIND_SCIENTIFIC = 5,
	DWRITE_PANOSE_SYMBOL_KIND_MUSIC = 6,
	DWRITE_PANOSE_SYMBOL_KIND_EXPERT = 7,
	DWRITE_PANOSE_SYMBOL_KIND_PATTERNS = 8,
	DWRITE_PANOSE_SYMBOL_KIND_BOARDERS = 9,
	DWRITE_PANOSE_SYMBOL_KIND_ICONS = 10,
	DWRITE_PANOSE_SYMBOL_KIND_LOGOS = 11,
	DWRITE_PANOSE_SYMBOL_KIND_INDUSTRY_SPECIFIC = 12,
}


[AllowDuplicates]
public enum DWRITE_PANOSE_SYMBOL_ASPECT_RATIO : int32
{
	DWRITE_PANOSE_SYMBOL_ASPECT_RATIO_ANY = 0,
	DWRITE_PANOSE_SYMBOL_ASPECT_RATIO_NO_FIT = 1,
	DWRITE_PANOSE_SYMBOL_ASPECT_RATIO_NO_WIDTH = 2,
	DWRITE_PANOSE_SYMBOL_ASPECT_RATIO_EXCEPTIONALLY_WIDE = 3,
	DWRITE_PANOSE_SYMBOL_ASPECT_RATIO_SUPER_WIDE = 4,
	DWRITE_PANOSE_SYMBOL_ASPECT_RATIO_VERY_WIDE = 5,
	DWRITE_PANOSE_SYMBOL_ASPECT_RATIO_WIDE = 6,
	DWRITE_PANOSE_SYMBOL_ASPECT_RATIO_NORMAL = 7,
	DWRITE_PANOSE_SYMBOL_ASPECT_RATIO_NARROW = 8,
	DWRITE_PANOSE_SYMBOL_ASPECT_RATIO_VERY_NARROW = 9,
}


[AllowDuplicates]
public enum DWRITE_OUTLINE_THRESHOLD : int32
{
	DWRITE_OUTLINE_THRESHOLD_ANTIALIASED = 0,
	DWRITE_OUTLINE_THRESHOLD_ALIASED = 1,
}


[AllowDuplicates]
public enum DWRITE_BASELINE : int32
{
	DWRITE_BASELINE_DEFAULT = 0,
	DWRITE_BASELINE_ROMAN = 1,
	DWRITE_BASELINE_CENTRAL = 2,
	DWRITE_BASELINE_MATH = 3,
	DWRITE_BASELINE_HANGING = 4,
	DWRITE_BASELINE_IDEOGRAPHIC_BOTTOM = 5,
	DWRITE_BASELINE_IDEOGRAPHIC_TOP = 6,
	DWRITE_BASELINE_MINIMUM = 7,
	DWRITE_BASELINE_MAXIMUM = 8,
}


[AllowDuplicates]
public enum DWRITE_VERTICAL_GLYPH_ORIENTATION : int32
{
	DWRITE_VERTICAL_GLYPH_ORIENTATION_DEFAULT = 0,
	DWRITE_VERTICAL_GLYPH_ORIENTATION_STACKED = 1,
}


[AllowDuplicates]
public enum DWRITE_GLYPH_ORIENTATION_ANGLE : int32
{
	DWRITE_GLYPH_ORIENTATION_ANGLE_0_DEGREES = 0,
	DWRITE_GLYPH_ORIENTATION_ANGLE_90_DEGREES = 1,
	DWRITE_GLYPH_ORIENTATION_ANGLE_180_DEGREES = 2,
	DWRITE_GLYPH_ORIENTATION_ANGLE_270_DEGREES = 3,
}


[AllowDuplicates]
public enum DWRITE_TEXT_ANTIALIAS_MODE : int32
{
	DWRITE_TEXT_ANTIALIAS_MODE_CLEARTYPE = 0,
	DWRITE_TEXT_ANTIALIAS_MODE_GRAYSCALE = 1,
}


[AllowDuplicates]
public enum DWRITE_OPTICAL_ALIGNMENT : int32
{
	DWRITE_OPTICAL_ALIGNMENT_NONE = 0,
	DWRITE_OPTICAL_ALIGNMENT_NO_SIDE_BEARINGS = 1,
}


[AllowDuplicates]
public enum DWRITE_GRID_FIT_MODE : int32
{
	DWRITE_GRID_FIT_MODE_DEFAULT = 0,
	DWRITE_GRID_FIT_MODE_DISABLED = 1,
	DWRITE_GRID_FIT_MODE_ENABLED = 2,
}


[AllowDuplicates]
public enum DWRITE_FONT_PROPERTY_ID : int32
{
	DWRITE_FONT_PROPERTY_ID_NONE = 0,
	DWRITE_FONT_PROPERTY_ID_WEIGHT_STRETCH_STYLE_FAMILY_NAME = 1,
	DWRITE_FONT_PROPERTY_ID_TYPOGRAPHIC_FAMILY_NAME = 2,
	DWRITE_FONT_PROPERTY_ID_WEIGHT_STRETCH_STYLE_FACE_NAME = 3,
	DWRITE_FONT_PROPERTY_ID_FULL_NAME = 4,
	DWRITE_FONT_PROPERTY_ID_WIN32_FAMILY_NAME = 5,
	DWRITE_FONT_PROPERTY_ID_POSTSCRIPT_NAME = 6,
	DWRITE_FONT_PROPERTY_ID_DESIGN_SCRIPT_LANGUAGE_TAG = 7,
	DWRITE_FONT_PROPERTY_ID_SUPPORTED_SCRIPT_LANGUAGE_TAG = 8,
	DWRITE_FONT_PROPERTY_ID_SEMANTIC_TAG = 9,
	DWRITE_FONT_PROPERTY_ID_WEIGHT = 10,
	DWRITE_FONT_PROPERTY_ID_STRETCH = 11,
	DWRITE_FONT_PROPERTY_ID_STYLE = 12,
	DWRITE_FONT_PROPERTY_ID_TYPOGRAPHIC_FACE_NAME = 13,
	DWRITE_FONT_PROPERTY_ID_TOTAL = 13,
	DWRITE_FONT_PROPERTY_ID_TOTAL_RS3 = 14,
	DWRITE_FONT_PROPERTY_ID_PREFERRED_FAMILY_NAME = 2,
	DWRITE_FONT_PROPERTY_ID_FAMILY_NAME = 1,
	DWRITE_FONT_PROPERTY_ID_FACE_NAME = 3,
}


[AllowDuplicates]
public enum DWRITE_LOCALITY : int32
{
	DWRITE_LOCALITY_REMOTE = 0,
	DWRITE_LOCALITY_PARTIAL = 1,
	DWRITE_LOCALITY_LOCAL = 2,
}


[AllowDuplicates]
public enum DWRITE_RENDERING_MODE1 : int32
{
	DWRITE_RENDERING_MODE1_DEFAULT = 0,
	DWRITE_RENDERING_MODE1_ALIASED = 1,
	DWRITE_RENDERING_MODE1_GDI_CLASSIC = 2,
	DWRITE_RENDERING_MODE1_GDI_NATURAL = 3,
	DWRITE_RENDERING_MODE1_NATURAL = 4,
	DWRITE_RENDERING_MODE1_NATURAL_SYMMETRIC = 5,
	DWRITE_RENDERING_MODE1_OUTLINE = 6,
	DWRITE_RENDERING_MODE1_NATURAL_SYMMETRIC_DOWNSAMPLED = 7,
}


[AllowDuplicates]
public enum DWRITE_FONT_LINE_GAP_USAGE : int32
{
	DWRITE_FONT_LINE_GAP_USAGE_DEFAULT = 0,
	DWRITE_FONT_LINE_GAP_USAGE_DISABLED = 1,
	DWRITE_FONT_LINE_GAP_USAGE_ENABLED = 2,
}


[AllowDuplicates]
public enum DWRITE_CONTAINER_TYPE : int32
{
	DWRITE_CONTAINER_TYPE_UNKNOWN = 0,
	DWRITE_CONTAINER_TYPE_WOFF = 1,
	DWRITE_CONTAINER_TYPE_WOFF2 = 2,
}


[AllowDuplicates]
public enum DWRITE_FONT_FAMILY_MODEL : int32
{
	DWRITE_FONT_FAMILY_MODEL_TYPOGRAPHIC = 0,
	DWRITE_FONT_FAMILY_MODEL_WEIGHT_STRETCH_STYLE = 1,
}


[AllowDuplicates]
public enum DWRITE_AUTOMATIC_FONT_AXES : uint32
{
	DWRITE_AUTOMATIC_FONT_AXES_NONE = 0,
	DWRITE_AUTOMATIC_FONT_AXES_OPTICAL_SIZE = 1,
}


[AllowDuplicates]
public enum DWRITE_FONT_AXIS_ATTRIBUTES : uint32
{
	DWRITE_FONT_AXIS_ATTRIBUTES_NONE = 0,
	DWRITE_FONT_AXIS_ATTRIBUTES_VARIABLE = 1,
	DWRITE_FONT_AXIS_ATTRIBUTES_HIDDEN = 2,
}


[AllowDuplicates]
public enum DWRITE_FONT_SOURCE_TYPE : int32
{
	DWRITE_FONT_SOURCE_TYPE_UNKNOWN = 0,
	DWRITE_FONT_SOURCE_TYPE_PER_MACHINE = 1,
	DWRITE_FONT_SOURCE_TYPE_PER_USER = 2,
	DWRITE_FONT_SOURCE_TYPE_APPX_PACKAGE = 3,
	DWRITE_FONT_SOURCE_TYPE_REMOTE_FONT_PROVIDER = 4,
}

#endregion


#region Structs
[CRepr]
public struct DWRITE_COLOR_F
{
	public float r;
	public float g;
	public float b;
	public float a;
}

[CRepr]
public struct DWRITE_FONT_METRICS
{
	public uint16 designUnitsPerEm;
	public uint16 ascent;
	public uint16 descent;
	public int16 lineGap;
	public uint16 capHeight;
	public uint16 xHeight;
	public int16 underlinePosition;
	public uint16 underlineThickness;
	public int16 strikethroughPosition;
	public uint16 strikethroughThickness;
}

[CRepr]
public struct DWRITE_GLYPH_METRICS
{
	public int32 leftSideBearing;
	public uint32 advanceWidth;
	public int32 rightSideBearing;
	public int32 topSideBearing;
	public uint32 advanceHeight;
	public int32 bottomSideBearing;
	public int32 verticalOriginY;
}

[CRepr]
public struct DWRITE_GLYPH_OFFSET
{
	public float advanceOffset;
	public float ascenderOffset;
}

[CRepr]
public struct DWRITE_MATRIX
{
	public float m11;
	public float m12;
	public float m21;
	public float m22;
	public float dx;
	public float dy;
}

[CRepr]
public struct DWRITE_TEXT_RANGE
{
	public uint32 startPosition;
	public uint32 length;
}

[CRepr]
public struct DWRITE_FONT_FEATURE
{
	public DWRITE_FONT_FEATURE_TAG nameTag;
	public uint32 parameter;
}

[CRepr]
public struct DWRITE_TYPOGRAPHIC_FEATURES
{
	public DWRITE_FONT_FEATURE* features;
	public uint32 featureCount;
}

[CRepr]
public struct DWRITE_TRIMMING
{
	public DWRITE_TRIMMING_GRANULARITY granularity;
	public uint32 delimiter;
	public uint32 delimiterCount;
}

[CRepr]
public struct DWRITE_SCRIPT_ANALYSIS
{
	public uint16 script;
	public DWRITE_SCRIPT_SHAPES shapes;
}

[CRepr]
public struct DWRITE_LINE_BREAKPOINT
{
	public uint8 _bitfield;
}

[CRepr]
public struct DWRITE_SHAPING_TEXT_PROPERTIES
{
	public uint16 _bitfield;
}

[CRepr]
public struct DWRITE_SHAPING_GLYPH_PROPERTIES
{
	public uint16 _bitfield;
}

[CRepr]
public struct DWRITE_GLYPH_RUN
{
	public IDWriteFontFace* fontFace;
	public float fontEmSize;
	public uint32 glyphCount;
	public uint16* glyphIndices;
	public float* glyphAdvances;
	public DWRITE_GLYPH_OFFSET* glyphOffsets;
	public BOOL isSideways;
	public uint32 bidiLevel;
}

[CRepr]
public struct DWRITE_GLYPH_RUN_DESCRIPTION
{
	public PWSTR localeName;
	public PWSTR string;
	public uint32 stringLength;
	public uint16* clusterMap;
	public uint32 textPosition;
}

[CRepr]
public struct DWRITE_UNDERLINE
{
	public float width;
	public float thickness;
	public float offset;
	public float runHeight;
	public DWRITE_READING_DIRECTION readingDirection;
	public DWRITE_FLOW_DIRECTION flowDirection;
	public PWSTR localeName;
	public DWRITE_MEASURING_MODE measuringMode;
}

[CRepr]
public struct DWRITE_STRIKETHROUGH
{
	public float width;
	public float thickness;
	public float offset;
	public DWRITE_READING_DIRECTION readingDirection;
	public DWRITE_FLOW_DIRECTION flowDirection;
	public PWSTR localeName;
	public DWRITE_MEASURING_MODE measuringMode;
}

[CRepr]
public struct DWRITE_LINE_METRICS
{
	public uint32 length;
	public uint32 trailingWhitespaceLength;
	public uint32 newlineLength;
	public float height;
	public float baseline;
	public BOOL isTrimmed;
}

[CRepr]
public struct DWRITE_CLUSTER_METRICS
{
	public float width;
	public uint16 length;
	public uint16 _bitfield;
}

[CRepr]
public struct DWRITE_TEXT_METRICS
{
	public float left;
	public float top;
	public float width;
	public float widthIncludingTrailingWhitespace;
	public float height;
	public float layoutWidth;
	public float layoutHeight;
	public uint32 maxBidiReorderingDepth;
	public uint32 lineCount;
}

[CRepr]
public struct DWRITE_INLINE_OBJECT_METRICS
{
	public float width;
	public float height;
	public float baseline;
	public BOOL supportsSideways;
}

[CRepr]
public struct DWRITE_OVERHANG_METRICS
{
	public float left;
	public float top;
	public float right;
	public float bottom;
}

[CRepr]
public struct DWRITE_HIT_TEST_METRICS
{
	public uint32 textPosition;
	public uint32 length;
	public float left;
	public float top;
	public float width;
	public float height;
	public uint32 bidiLevel;
	public BOOL isText;
	public BOOL isTrimmed;
}

[CRepr]
public struct DWRITE_FONT_METRICS1
{
	public DWRITE_FONT_METRICS __AnonymousBase_DWrite_1_L627_C38;
	public int16 glyphBoxLeft;
	public int16 glyphBoxTop;
	public int16 glyphBoxRight;
	public int16 glyphBoxBottom;
	public int16 subscriptPositionX;
	public int16 subscriptPositionY;
	public int16 subscriptSizeX;
	public int16 subscriptSizeY;
	public int16 superscriptPositionX;
	public int16 superscriptPositionY;
	public int16 superscriptSizeX;
	public int16 superscriptSizeY;
	public BOOL hasTypographicMetrics;
}

[CRepr]
public struct DWRITE_CARET_METRICS
{
	public int16 slopeRise;
	public int16 slopeRun;
	public int16 offset;
}

[CRepr, Union]
public struct DWRITE_PANOSE
{
	[CRepr]
	public struct _decorative_e__Struct
	{
		public uint8 familyKind;
		public uint8 decorativeClass;
		public uint8 weight;
		public uint8 aspect;
		public uint8 contrast;
		public uint8 serifVariant;
		public uint8 fill;
		public uint8 lining;
		public uint8 decorativeTopology;
		public uint8 characterRange;
	}
	[CRepr]
	public struct _text_e__Struct
	{
		public uint8 familyKind;
		public uint8 serifStyle;
		public uint8 weight;
		public uint8 proportion;
		public uint8 contrast;
		public uint8 strokeVariation;
		public uint8 armStyle;
		public uint8 letterform;
		public uint8 midline;
		public uint8 xHeight;
	}
	[CRepr]
	public struct _symbol_e__Struct
	{
		public uint8 familyKind;
		public uint8 symbolKind;
		public uint8 weight;
		public uint8 spacing;
		public uint8 aspectRatioAndContrast;
		public uint8 aspectRatio94;
		public uint8 aspectRatio119;
		public uint8 aspectRatio157;
		public uint8 aspectRatio163;
		public uint8 aspectRatio211;
	}
	[CRepr]
	public struct _script_e__Struct
	{
		public uint8 familyKind;
		public uint8 toolKind;
		public uint8 weight;
		public uint8 spacing;
		public uint8 aspectRatio;
		public uint8 contrast;
		public uint8 scriptTopology;
		public uint8 scriptForm;
		public uint8 finials;
		public uint8 xAscent;
	}
	public uint8[10] values;
	public uint8 familyKind;
	public _text_e__Struct text;
	public _script_e__Struct script;
	public _decorative_e__Struct decorative;
	public _symbol_e__Struct symbol;
}

[CRepr]
public struct DWRITE_UNICODE_RANGE
{
	public uint32 first;
	public uint32 last;
}

[CRepr]
public struct DWRITE_SCRIPT_PROPERTIES
{
	public uint32 isoScriptCode;
	public uint32 isoScriptNumber;
	public uint32 clusterLookahead;
	public uint32 justificationCharacter;
	public uint32 _bitfield;
}

[CRepr]
public struct DWRITE_JUSTIFICATION_OPPORTUNITY
{
	public float expansionMinimum;
	public float expansionMaximum;
	public float compressionMaximum;
	public uint32 _bitfield;
}

[CRepr]
public struct DWRITE_TEXT_METRICS1
{
	public DWRITE_TEXT_METRICS Base;
	public float heightIncludingTrailingWhitespace;
}

[CRepr]
public struct DWRITE_COLOR_GLYPH_RUN
{
	public DWRITE_GLYPH_RUN glyphRun;
	public DWRITE_GLYPH_RUN_DESCRIPTION* glyphRunDescription;
	public float baselineOriginX;
	public float baselineOriginY;
	public DWRITE_COLOR_F runColor;
	public uint16 paletteIndex;
}

[CRepr]
public struct DWRITE_FONT_PROPERTY
{
	public DWRITE_FONT_PROPERTY_ID propertyId;
	public PWSTR propertyValue;
	public PWSTR localeName;
}

[CRepr]
public struct DWRITE_LINE_METRICS1
{
	public DWRITE_LINE_METRICS Base;
	public float leadingBefore;
	public float leadingAfter;
}

[CRepr]
public struct DWRITE_LINE_SPACING
{
	public DWRITE_LINE_SPACING_METHOD method;
	public float height;
	public float baseline;
	public float leadingBefore;
	public DWRITE_FONT_LINE_GAP_USAGE fontLineGapUsage;
}

[CRepr]
public struct DWRITE_COLOR_GLYPH_RUN1
{
	public DWRITE_COLOR_GLYPH_RUN Base;
	public DWRITE_GLYPH_IMAGE_FORMATS glyphImageFormat;
	public DWRITE_MEASURING_MODE measuringMode;
}

[CRepr]
public struct DWRITE_GLYPH_IMAGE_DATA
{
	public void* imageData;
	public uint32 imageDataSize;
	public uint32 uniqueDataId;
	public uint32 pixelsPerEm;
	public D2D_SIZE_U pixelSize;
	public POINT horizontalLeftOrigin;
	public POINT horizontalRightOrigin;
	public POINT verticalTopOrigin;
	public POINT verticalBottomOrigin;
}

[CRepr]
public struct DWRITE_FILE_FRAGMENT
{
	public uint64 fileOffset;
	public uint64 fragmentSize;
}

[CRepr]
public struct DWRITE_FONT_AXIS_VALUE
{
	public DWRITE_FONT_AXIS_TAG axisTag;
	public float value;
}

[CRepr]
public struct DWRITE_FONT_AXIS_RANGE
{
	public DWRITE_FONT_AXIS_TAG axisTag;
	public float minValue;
	public float maxValue;
}

#endregion

#region COM Types
[CRepr]struct IDWriteFontFileLoader : IUnknown
{
	public new const Guid IID = .(0x727cad4e, 0xd6af, 0x4c9e, 0x8a, 0x08, 0xd6, 0x95, 0xb1, 0x1c, 0xaa, 0x49);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IUnknown.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, void* fontFileReferenceKey, uint32 fontFileReferenceKeySize, IDWriteFontFileStream** fontFileStream) CreateStreamFromKey;
	}


	public HRESULT CreateStreamFromKey(void* fontFileReferenceKey, uint32 fontFileReferenceKeySize, IDWriteFontFileStream** fontFileStream) mut => VT.[Friend]CreateStreamFromKey(&this, fontFileReferenceKey, fontFileReferenceKeySize, fontFileStream);
}

[CRepr]struct IDWriteLocalFontFileLoader : IDWriteFontFileLoader
{
	public new const Guid IID = .(0xb2d9f3ec, 0xc9fe, 0x4a11, 0xa2, 0xec, 0xd8, 0x62, 0x08, 0xf7, 0xc0, 0xa2);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDWriteFontFileLoader.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, void* fontFileReferenceKey, uint32 fontFileReferenceKeySize, uint32* filePathLength) GetFilePathLengthFromKey;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, void* fontFileReferenceKey, uint32 fontFileReferenceKeySize, char16* filePath, uint32 filePathSize) GetFilePathFromKey;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, void* fontFileReferenceKey, uint32 fontFileReferenceKeySize, FILETIME* lastWriteTime) GetLastWriteTimeFromKey;
	}


	public HRESULT GetFilePathLengthFromKey(void* fontFileReferenceKey, uint32 fontFileReferenceKeySize, uint32* filePathLength) mut => VT.[Friend]GetFilePathLengthFromKey(&this, fontFileReferenceKey, fontFileReferenceKeySize, filePathLength);

	public HRESULT GetFilePathFromKey(void* fontFileReferenceKey, uint32 fontFileReferenceKeySize, char16* filePath, uint32 filePathSize) mut => VT.[Friend]GetFilePathFromKey(&this, fontFileReferenceKey, fontFileReferenceKeySize, filePath, filePathSize);

	public HRESULT GetLastWriteTimeFromKey(void* fontFileReferenceKey, uint32 fontFileReferenceKeySize, FILETIME* lastWriteTime) mut => VT.[Friend]GetLastWriteTimeFromKey(&this, fontFileReferenceKey, fontFileReferenceKeySize, lastWriteTime);
}

[CRepr]struct IDWriteFontFileStream : IUnknown
{
	public new const Guid IID = .(0x6d4865fe, 0x0ab8, 0x4d91, 0x8f, 0x62, 0x5d, 0xd6, 0xbe, 0x34, 0xa3, 0xe0);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IUnknown.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, void** fragmentStart, uint64 fileOffset, uint64 fragmentSize, void** fragmentContext) ReadFileFragment;
		protected new function [CallingConvention(.Stdcall)] void(SelfOuter* self, void* fragmentContext) ReleaseFileFragment;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint64* fileSize) GetFileSize;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint64* lastWriteTime) GetLastWriteTime;
	}


	public HRESULT ReadFileFragment(void** fragmentStart, uint64 fileOffset, uint64 fragmentSize, void** fragmentContext) mut => VT.[Friend]ReadFileFragment(&this, fragmentStart, fileOffset, fragmentSize, fragmentContext);

	public void ReleaseFileFragment(void* fragmentContext) mut => VT.[Friend]ReleaseFileFragment(&this, fragmentContext);

	public HRESULT GetFileSize(uint64* fileSize) mut => VT.[Friend]GetFileSize(&this, fileSize);

	public HRESULT GetLastWriteTime(uint64* lastWriteTime) mut => VT.[Friend]GetLastWriteTime(&this, lastWriteTime);
}

[CRepr]struct IDWriteFontFile : IUnknown
{
	public new const Guid IID = .(0x739d886a, 0xcef5, 0x47dc, 0x87, 0x69, 0x1a, 0x8b, 0x41, 0xbe, 0xbb, 0xb0);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IUnknown.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, void** fontFileReferenceKey, uint32* fontFileReferenceKeySize) GetReferenceKey;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IDWriteFontFileLoader** fontFileLoader) GetLoader;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BOOL* isSupportedFontType, DWRITE_FONT_FILE_TYPE* fontFileType, DWRITE_FONT_FACE_TYPE* fontFaceType, uint32* numberOfFaces) Analyze;
	}


	public HRESULT GetReferenceKey(void** fontFileReferenceKey, uint32* fontFileReferenceKeySize) mut => VT.[Friend]GetReferenceKey(&this, fontFileReferenceKey, fontFileReferenceKeySize);

	public HRESULT GetLoader(IDWriteFontFileLoader** fontFileLoader) mut => VT.[Friend]GetLoader(&this, fontFileLoader);

	public HRESULT Analyze(BOOL* isSupportedFontType, DWRITE_FONT_FILE_TYPE* fontFileType, DWRITE_FONT_FACE_TYPE* fontFaceType, uint32* numberOfFaces) mut => VT.[Friend]Analyze(&this, isSupportedFontType, fontFileType, fontFaceType, numberOfFaces);
}

[CRepr]struct IDWriteRenderingParams : IUnknown
{
	public new const Guid IID = .(0x2f0da53a, 0x2add, 0x47cd, 0x82, 0xee, 0xd9, 0xec, 0x34, 0x68, 0x8e, 0x75);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IUnknown.VTable
	{
		protected new function [CallingConvention(.Stdcall)] float(SelfOuter* self) GetGamma;
		protected new function [CallingConvention(.Stdcall)] float(SelfOuter* self) GetEnhancedContrast;
		protected new function [CallingConvention(.Stdcall)] float(SelfOuter* self) GetClearTypeLevel;
		protected new function [CallingConvention(.Stdcall)] DWRITE_PIXEL_GEOMETRY(SelfOuter* self) GetPixelGeometry;
		protected new function [CallingConvention(.Stdcall)] DWRITE_RENDERING_MODE(SelfOuter* self) GetRenderingMode;
	}


	public float GetGamma() mut => VT.[Friend]GetGamma(&this);

	public float GetEnhancedContrast() mut => VT.[Friend]GetEnhancedContrast(&this);

	public float GetClearTypeLevel() mut => VT.[Friend]GetClearTypeLevel(&this);

	public DWRITE_PIXEL_GEOMETRY GetPixelGeometry() mut => VT.[Friend]GetPixelGeometry(&this);

	public DWRITE_RENDERING_MODE GetRenderingMode() mut => VT.[Friend]GetRenderingMode(&this);
}

[CRepr]struct IDWriteFontFace : IUnknown
{
	public new const Guid IID = .(0x5f49804d, 0x7024, 0x4d43, 0xbf, 0xa9, 0xd2, 0x59, 0x84, 0xf5, 0x38, 0x49);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IUnknown.VTable
	{
		protected new function [CallingConvention(.Stdcall)] DWRITE_FONT_FACE_TYPE(SelfOuter* self) COM_GetType;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32* numberOfFiles, IDWriteFontFile** fontFiles) GetFiles;
		protected new function [CallingConvention(.Stdcall)] uint32(SelfOuter* self) GetIndex;
		protected new function [CallingConvention(.Stdcall)] DWRITE_FONT_SIMULATIONS(SelfOuter* self) GetSimulations;
		protected new function [CallingConvention(.Stdcall)] BOOL(SelfOuter* self) IsSymbolFont;
		protected new function [CallingConvention(.Stdcall)] void(SelfOuter* self, DWRITE_FONT_METRICS* fontFaceMetrics) GetMetrics;
		protected new function [CallingConvention(.Stdcall)] uint16(SelfOuter* self) GetGlyphCount;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint16* glyphIndices, uint32 glyphCount, DWRITE_GLYPH_METRICS* glyphMetrics, BOOL isSideways) GetDesignGlyphMetrics;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32* codePoints, uint32 codePointCount, uint16* glyphIndices) GetGlyphIndices;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32 openTypeTableTag, void** tableData, uint32* tableSize, void** tableContext, BOOL* exists) TryGetFontTable;
		protected new function [CallingConvention(.Stdcall)] void(SelfOuter* self, void* tableContext) ReleaseFontTable;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, float emSize, uint16* glyphIndices, float* glyphAdvances, DWRITE_GLYPH_OFFSET* glyphOffsets, uint32 glyphCount, BOOL isSideways, BOOL isRightToLeft, ID2D1SimplifiedGeometrySink* geometrySink) GetGlyphRunOutline;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, float emSize, float pixelsPerDip, DWRITE_MEASURING_MODE measuringMode, IDWriteRenderingParams* renderingParams, DWRITE_RENDERING_MODE* renderingMode) GetRecommendedRenderingMode;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, float emSize, float pixelsPerDip, DWRITE_MATRIX* transform, DWRITE_FONT_METRICS* fontFaceMetrics) GetGdiCompatibleMetrics;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, float emSize, float pixelsPerDip, DWRITE_MATRIX* transform, BOOL useGdiNatural, uint16* glyphIndices, uint32 glyphCount, DWRITE_GLYPH_METRICS* glyphMetrics, BOOL isSideways) GetGdiCompatibleGlyphMetrics;
	}


	public DWRITE_FONT_FACE_TYPE GetType() mut => VT.[Friend]COM_GetType(&this);

	public HRESULT GetFiles(uint32* numberOfFiles, IDWriteFontFile** fontFiles) mut => VT.[Friend]GetFiles(&this, numberOfFiles, fontFiles);

	public uint32 GetIndex() mut => VT.[Friend]GetIndex(&this);

	public DWRITE_FONT_SIMULATIONS GetSimulations() mut => VT.[Friend]GetSimulations(&this);

	public BOOL IsSymbolFont() mut => VT.[Friend]IsSymbolFont(&this);

	public void GetMetrics(DWRITE_FONT_METRICS* fontFaceMetrics) mut => VT.[Friend]GetMetrics(&this, fontFaceMetrics);

	public uint16 GetGlyphCount() mut => VT.[Friend]GetGlyphCount(&this);

	public HRESULT GetDesignGlyphMetrics(uint16* glyphIndices, uint32 glyphCount, DWRITE_GLYPH_METRICS* glyphMetrics, BOOL isSideways) mut => VT.[Friend]GetDesignGlyphMetrics(&this, glyphIndices, glyphCount, glyphMetrics, isSideways);

	public HRESULT GetGlyphIndices(uint32* codePoints, uint32 codePointCount, uint16* glyphIndices) mut => VT.[Friend]GetGlyphIndices(&this, codePoints, codePointCount, glyphIndices);

	public HRESULT TryGetFontTable(uint32 openTypeTableTag, void** tableData, uint32* tableSize, void** tableContext, BOOL* exists) mut => VT.[Friend]TryGetFontTable(&this, openTypeTableTag, tableData, tableSize, tableContext, exists);

	public void ReleaseFontTable(void* tableContext) mut => VT.[Friend]ReleaseFontTable(&this, tableContext);

	public HRESULT GetGlyphRunOutline(float emSize, uint16* glyphIndices, float* glyphAdvances, DWRITE_GLYPH_OFFSET* glyphOffsets, uint32 glyphCount, BOOL isSideways, BOOL isRightToLeft, ID2D1SimplifiedGeometrySink* geometrySink) mut => VT.[Friend]GetGlyphRunOutline(&this, emSize, glyphIndices, glyphAdvances, glyphOffsets, glyphCount, isSideways, isRightToLeft, geometrySink);

	public HRESULT GetRecommendedRenderingMode(float emSize, float pixelsPerDip, DWRITE_MEASURING_MODE measuringMode, IDWriteRenderingParams* renderingParams, DWRITE_RENDERING_MODE* renderingMode) mut => VT.[Friend]GetRecommendedRenderingMode(&this, emSize, pixelsPerDip, measuringMode, renderingParams, renderingMode);

	public HRESULT GetGdiCompatibleMetrics(float emSize, float pixelsPerDip, DWRITE_MATRIX* transform, DWRITE_FONT_METRICS* fontFaceMetrics) mut => VT.[Friend]GetGdiCompatibleMetrics(&this, emSize, pixelsPerDip, transform, fontFaceMetrics);

	public HRESULT GetGdiCompatibleGlyphMetrics(float emSize, float pixelsPerDip, DWRITE_MATRIX* transform, BOOL useGdiNatural, uint16* glyphIndices, uint32 glyphCount, DWRITE_GLYPH_METRICS* glyphMetrics, BOOL isSideways) mut => VT.[Friend]GetGdiCompatibleGlyphMetrics(&this, emSize, pixelsPerDip, transform, useGdiNatural, glyphIndices, glyphCount, glyphMetrics, isSideways);
}

[CRepr]struct IDWriteFontCollectionLoader : IUnknown
{
	public new const Guid IID = .(0xcca920e4, 0x52f0, 0x492b, 0xbf, 0xa8, 0x29, 0xc7, 0x2e, 0xe0, 0xa4, 0x68);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IUnknown.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IDWriteFactory* factory, void* collectionKey, uint32 collectionKeySize, IDWriteFontFileEnumerator** fontFileEnumerator) CreateEnumeratorFromKey;
	}


	public HRESULT CreateEnumeratorFromKey(IDWriteFactory* factory, void* collectionKey, uint32 collectionKeySize, IDWriteFontFileEnumerator** fontFileEnumerator) mut => VT.[Friend]CreateEnumeratorFromKey(&this, factory, collectionKey, collectionKeySize, fontFileEnumerator);
}

[CRepr]struct IDWriteFontFileEnumerator : IUnknown
{
	public new const Guid IID = .(0x72755049, 0x5ff7, 0x435d, 0x83, 0x48, 0x4b, 0xe9, 0x7c, 0xfa, 0x6c, 0x7c);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IUnknown.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BOOL* hasCurrentFile) MoveNext;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IDWriteFontFile** fontFile) GetCurrentFontFile;
	}


	public HRESULT MoveNext(BOOL* hasCurrentFile) mut => VT.[Friend]MoveNext(&this, hasCurrentFile);

	public HRESULT GetCurrentFontFile(IDWriteFontFile** fontFile) mut => VT.[Friend]GetCurrentFontFile(&this, fontFile);
}

[CRepr]struct IDWriteLocalizedStrings : IUnknown
{
	public new const Guid IID = .(0x08256209, 0x099a, 0x4b34, 0xb8, 0x6d, 0xc2, 0x2b, 0x11, 0x0e, 0x77, 0x71);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IUnknown.VTable
	{
		protected new function [CallingConvention(.Stdcall)] uint32(SelfOuter* self) GetCount;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, PWSTR localeName, uint32* index, BOOL* exists) FindLocaleName;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32 index, uint32* length) GetLocaleNameLength;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32 index, char16* localeName, uint32 size) GetLocaleName;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32 index, uint32* length) GetStringLength;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32 index, char16* stringBuffer, uint32 size) GetString;
	}


	public uint32 GetCount() mut => VT.[Friend]GetCount(&this);

	public HRESULT FindLocaleName(PWSTR localeName, uint32* index, BOOL* exists) mut => VT.[Friend]FindLocaleName(&this, localeName, index, exists);

	public HRESULT GetLocaleNameLength(uint32 index, uint32* length) mut => VT.[Friend]GetLocaleNameLength(&this, index, length);

	public HRESULT GetLocaleName(uint32 index, char16* localeName, uint32 size) mut => VT.[Friend]GetLocaleName(&this, index, localeName, size);

	public HRESULT GetStringLength(uint32 index, uint32* length) mut => VT.[Friend]GetStringLength(&this, index, length);

	public HRESULT GetString(uint32 index, char16* stringBuffer, uint32 size) mut => VT.[Friend]GetString(&this, index, stringBuffer, size);
}

[CRepr]struct IDWriteFontCollection : IUnknown
{
	public new const Guid IID = .(0xa84cee02, 0x3eea, 0x4eee, 0xa8, 0x27, 0x87, 0xc1, 0xa0, 0x2a, 0x0f, 0xcc);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IUnknown.VTable
	{
		protected new function [CallingConvention(.Stdcall)] uint32(SelfOuter* self) GetFontFamilyCount;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32 index, IDWriteFontFamily** fontFamily) GetFontFamily;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, PWSTR familyName, uint32* index, BOOL* exists) FindFamilyName;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IDWriteFontFace* fontFace, IDWriteFont** font) GetFontFromFontFace;
	}


	public uint32 GetFontFamilyCount() mut => VT.[Friend]GetFontFamilyCount(&this);

	public HRESULT GetFontFamily(uint32 index, IDWriteFontFamily** fontFamily) mut => VT.[Friend]GetFontFamily(&this, index, fontFamily);

	public HRESULT FindFamilyName(PWSTR familyName, uint32* index, BOOL* exists) mut => VT.[Friend]FindFamilyName(&this, familyName, index, exists);

	public HRESULT GetFontFromFontFace(IDWriteFontFace* fontFace, IDWriteFont** font) mut => VT.[Friend]GetFontFromFontFace(&this, fontFace, font);
}

[CRepr]struct IDWriteFontList : IUnknown
{
	public new const Guid IID = .(0x1a0d8438, 0x1d97, 0x4ec1, 0xae, 0xf9, 0xa2, 0xfb, 0x86, 0xed, 0x6a, 0xcb);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IUnknown.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IDWriteFontCollection** fontCollection) GetFontCollection;
		protected new function [CallingConvention(.Stdcall)] uint32(SelfOuter* self) GetFontCount;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32 index, IDWriteFont** font) GetFont;
	}


	public HRESULT GetFontCollection(IDWriteFontCollection** fontCollection) mut => VT.[Friend]GetFontCollection(&this, fontCollection);

	public uint32 GetFontCount() mut => VT.[Friend]GetFontCount(&this);

	public HRESULT GetFont(uint32 index, IDWriteFont** font) mut => VT.[Friend]GetFont(&this, index, font);
}

[CRepr]struct IDWriteFontFamily : IDWriteFontList
{
	public new const Guid IID = .(0xda20d8ef, 0x812a, 0x4c43, 0x98, 0x02, 0x62, 0xec, 0x4a, 0xbd, 0x7a, 0xdd);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDWriteFontList.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IDWriteLocalizedStrings** names) GetFamilyNames;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, DWRITE_FONT_WEIGHT weight, DWRITE_FONT_STRETCH stretch, DWRITE_FONT_STYLE style, IDWriteFont** matchingFont) GetFirstMatchingFont;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, DWRITE_FONT_WEIGHT weight, DWRITE_FONT_STRETCH stretch, DWRITE_FONT_STYLE style, IDWriteFontList** matchingFonts) GetMatchingFonts;
	}


	public HRESULT GetFamilyNames(IDWriteLocalizedStrings** names) mut => VT.[Friend]GetFamilyNames(&this, names);

	public HRESULT GetFirstMatchingFont(DWRITE_FONT_WEIGHT weight, DWRITE_FONT_STRETCH stretch, DWRITE_FONT_STYLE style, IDWriteFont** matchingFont) mut => VT.[Friend]GetFirstMatchingFont(&this, weight, stretch, style, matchingFont);

	public HRESULT GetMatchingFonts(DWRITE_FONT_WEIGHT weight, DWRITE_FONT_STRETCH stretch, DWRITE_FONT_STYLE style, IDWriteFontList** matchingFonts) mut => VT.[Friend]GetMatchingFonts(&this, weight, stretch, style, matchingFonts);
}

[CRepr]struct IDWriteFont : IUnknown
{
	public new const Guid IID = .(0xacd16696, 0x8c14, 0x4f5d, 0x87, 0x7e, 0xfe, 0x3f, 0xc1, 0xd3, 0x27, 0x37);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IUnknown.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IDWriteFontFamily** fontFamily) GetFontFamily;
		protected new function [CallingConvention(.Stdcall)] DWRITE_FONT_WEIGHT(SelfOuter* self) GetWeight;
		protected new function [CallingConvention(.Stdcall)] DWRITE_FONT_STRETCH(SelfOuter* self) GetStretch;
		protected new function [CallingConvention(.Stdcall)] DWRITE_FONT_STYLE(SelfOuter* self) GetStyle;
		protected new function [CallingConvention(.Stdcall)] BOOL(SelfOuter* self) IsSymbolFont;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IDWriteLocalizedStrings** names) GetFaceNames;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, DWRITE_INFORMATIONAL_STRING_ID informationalStringID, IDWriteLocalizedStrings** informationalStrings, BOOL* exists) GetInformationalStrings;
		protected new function [CallingConvention(.Stdcall)] DWRITE_FONT_SIMULATIONS(SelfOuter* self) GetSimulations;
		protected new function [CallingConvention(.Stdcall)] void(SelfOuter* self, DWRITE_FONT_METRICS* fontMetrics) GetMetrics;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32 unicodeValue, BOOL* exists) HasCharacter;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IDWriteFontFace** fontFace) CreateFontFace;
	}


	public HRESULT GetFontFamily(IDWriteFontFamily** fontFamily) mut => VT.[Friend]GetFontFamily(&this, fontFamily);

	public DWRITE_FONT_WEIGHT GetWeight() mut => VT.[Friend]GetWeight(&this);

	public DWRITE_FONT_STRETCH GetStretch() mut => VT.[Friend]GetStretch(&this);

	public DWRITE_FONT_STYLE GetStyle() mut => VT.[Friend]GetStyle(&this);

	public BOOL IsSymbolFont() mut => VT.[Friend]IsSymbolFont(&this);

	public HRESULT GetFaceNames(IDWriteLocalizedStrings** names) mut => VT.[Friend]GetFaceNames(&this, names);

	public HRESULT GetInformationalStrings(DWRITE_INFORMATIONAL_STRING_ID informationalStringID, IDWriteLocalizedStrings** informationalStrings, BOOL* exists) mut => VT.[Friend]GetInformationalStrings(&this, informationalStringID, informationalStrings, exists);

	public DWRITE_FONT_SIMULATIONS GetSimulations() mut => VT.[Friend]GetSimulations(&this);

	public void GetMetrics(DWRITE_FONT_METRICS* fontMetrics) mut => VT.[Friend]GetMetrics(&this, fontMetrics);

	public HRESULT HasCharacter(uint32 unicodeValue, BOOL* exists) mut => VT.[Friend]HasCharacter(&this, unicodeValue, exists);

	public HRESULT CreateFontFace(IDWriteFontFace** fontFace) mut => VT.[Friend]CreateFontFace(&this, fontFace);
}

[CRepr]struct IDWriteTextFormat : IUnknown
{
	public new const Guid IID = .(0x9c906818, 0x31d7, 0x4fd3, 0xa1, 0x51, 0x7c, 0x5e, 0x22, 0x5d, 0xb5, 0x5a);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IUnknown.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, DWRITE_TEXT_ALIGNMENT textAlignment) SetTextAlignment;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, DWRITE_PARAGRAPH_ALIGNMENT paragraphAlignment) SetParagraphAlignment;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, DWRITE_WORD_WRAPPING wordWrapping) SetWordWrapping;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, DWRITE_READING_DIRECTION readingDirection) SetReadingDirection;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, DWRITE_FLOW_DIRECTION flowDirection) SetFlowDirection;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, float incrementalTabStop) SetIncrementalTabStop;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, DWRITE_TRIMMING* trimmingOptions, IDWriteInlineObject* trimmingSign) SetTrimming;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, DWRITE_LINE_SPACING_METHOD lineSpacingMethod, float lineSpacing, float baseline) SetLineSpacing;
		protected new function [CallingConvention(.Stdcall)] DWRITE_TEXT_ALIGNMENT(SelfOuter* self) GetTextAlignment;
		protected new function [CallingConvention(.Stdcall)] DWRITE_PARAGRAPH_ALIGNMENT(SelfOuter* self) GetParagraphAlignment;
		protected new function [CallingConvention(.Stdcall)] DWRITE_WORD_WRAPPING(SelfOuter* self) GetWordWrapping;
		protected new function [CallingConvention(.Stdcall)] DWRITE_READING_DIRECTION(SelfOuter* self) GetReadingDirection;
		protected new function [CallingConvention(.Stdcall)] DWRITE_FLOW_DIRECTION(SelfOuter* self) GetFlowDirection;
		protected new function [CallingConvention(.Stdcall)] float(SelfOuter* self) GetIncrementalTabStop;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, DWRITE_TRIMMING* trimmingOptions, IDWriteInlineObject** trimmingSign) GetTrimming;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, DWRITE_LINE_SPACING_METHOD* lineSpacingMethod, float* lineSpacing, float* baseline) GetLineSpacing;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IDWriteFontCollection** fontCollection) GetFontCollection;
		protected new function [CallingConvention(.Stdcall)] uint32(SelfOuter* self) GetFontFamilyNameLength;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, char16* fontFamilyName, uint32 nameSize) GetFontFamilyName;
		protected new function [CallingConvention(.Stdcall)] DWRITE_FONT_WEIGHT(SelfOuter* self) GetFontWeight;
		protected new function [CallingConvention(.Stdcall)] DWRITE_FONT_STYLE(SelfOuter* self) GetFontStyle;
		protected new function [CallingConvention(.Stdcall)] DWRITE_FONT_STRETCH(SelfOuter* self) GetFontStretch;
		protected new function [CallingConvention(.Stdcall)] float(SelfOuter* self) GetFontSize;
		protected new function [CallingConvention(.Stdcall)] uint32(SelfOuter* self) GetLocaleNameLength;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, char16* localeName, uint32 nameSize) GetLocaleName;
	}


	public HRESULT SetTextAlignment(DWRITE_TEXT_ALIGNMENT textAlignment) mut => VT.[Friend]SetTextAlignment(&this, textAlignment);

	public HRESULT SetParagraphAlignment(DWRITE_PARAGRAPH_ALIGNMENT paragraphAlignment) mut => VT.[Friend]SetParagraphAlignment(&this, paragraphAlignment);

	public HRESULT SetWordWrapping(DWRITE_WORD_WRAPPING wordWrapping) mut => VT.[Friend]SetWordWrapping(&this, wordWrapping);

	public HRESULT SetReadingDirection(DWRITE_READING_DIRECTION readingDirection) mut => VT.[Friend]SetReadingDirection(&this, readingDirection);

	public HRESULT SetFlowDirection(DWRITE_FLOW_DIRECTION flowDirection) mut => VT.[Friend]SetFlowDirection(&this, flowDirection);

	public HRESULT SetIncrementalTabStop(float incrementalTabStop) mut => VT.[Friend]SetIncrementalTabStop(&this, incrementalTabStop);

	public HRESULT SetTrimming(DWRITE_TRIMMING* trimmingOptions, IDWriteInlineObject* trimmingSign) mut => VT.[Friend]SetTrimming(&this, trimmingOptions, trimmingSign);

	public HRESULT SetLineSpacing(DWRITE_LINE_SPACING_METHOD lineSpacingMethod, float lineSpacing, float baseline) mut => VT.[Friend]SetLineSpacing(&this, lineSpacingMethod, lineSpacing, baseline);

	public DWRITE_TEXT_ALIGNMENT GetTextAlignment() mut => VT.[Friend]GetTextAlignment(&this);

	public DWRITE_PARAGRAPH_ALIGNMENT GetParagraphAlignment() mut => VT.[Friend]GetParagraphAlignment(&this);

	public DWRITE_WORD_WRAPPING GetWordWrapping() mut => VT.[Friend]GetWordWrapping(&this);

	public DWRITE_READING_DIRECTION GetReadingDirection() mut => VT.[Friend]GetReadingDirection(&this);

	public DWRITE_FLOW_DIRECTION GetFlowDirection() mut => VT.[Friend]GetFlowDirection(&this);

	public float GetIncrementalTabStop() mut => VT.[Friend]GetIncrementalTabStop(&this);

	public HRESULT GetTrimming(DWRITE_TRIMMING* trimmingOptions, IDWriteInlineObject** trimmingSign) mut => VT.[Friend]GetTrimming(&this, trimmingOptions, trimmingSign);

	public HRESULT GetLineSpacing(DWRITE_LINE_SPACING_METHOD* lineSpacingMethod, float* lineSpacing, float* baseline) mut => VT.[Friend]GetLineSpacing(&this, lineSpacingMethod, lineSpacing, baseline);

	public HRESULT GetFontCollection(IDWriteFontCollection** fontCollection) mut => VT.[Friend]GetFontCollection(&this, fontCollection);

	public uint32 GetFontFamilyNameLength() mut => VT.[Friend]GetFontFamilyNameLength(&this);

	public HRESULT GetFontFamilyName(char16* fontFamilyName, uint32 nameSize) mut => VT.[Friend]GetFontFamilyName(&this, fontFamilyName, nameSize);

	public DWRITE_FONT_WEIGHT GetFontWeight() mut => VT.[Friend]GetFontWeight(&this);

	public DWRITE_FONT_STYLE GetFontStyle() mut => VT.[Friend]GetFontStyle(&this);

	public DWRITE_FONT_STRETCH GetFontStretch() mut => VT.[Friend]GetFontStretch(&this);

	public float GetFontSize() mut => VT.[Friend]GetFontSize(&this);

	public uint32 GetLocaleNameLength() mut => VT.[Friend]GetLocaleNameLength(&this);

	public HRESULT GetLocaleName(char16* localeName, uint32 nameSize) mut => VT.[Friend]GetLocaleName(&this, localeName, nameSize);
}

[CRepr]struct IDWriteTypography : IUnknown
{
	public new const Guid IID = .(0x55f1112b, 0x1dc2, 0x4b3c, 0x95, 0x41, 0xf4, 0x68, 0x94, 0xed, 0x85, 0xb6);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IUnknown.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, DWRITE_FONT_FEATURE fontFeature) AddFontFeature;
		protected new function [CallingConvention(.Stdcall)] uint32(SelfOuter* self) GetFontFeatureCount;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32 fontFeatureIndex, DWRITE_FONT_FEATURE* fontFeature) GetFontFeature;
	}


	public HRESULT AddFontFeature(DWRITE_FONT_FEATURE fontFeature) mut => VT.[Friend]AddFontFeature(&this, fontFeature);

	public uint32 GetFontFeatureCount() mut => VT.[Friend]GetFontFeatureCount(&this);

	public HRESULT GetFontFeature(uint32 fontFeatureIndex, DWRITE_FONT_FEATURE* fontFeature) mut => VT.[Friend]GetFontFeature(&this, fontFeatureIndex, fontFeature);
}

[CRepr]struct IDWriteNumberSubstitution : IUnknown
{
	public new const Guid IID = .(0x14885cc9, 0xbab0, 0x4f90, 0xb6, 0xed, 0x5c, 0x36, 0x6a, 0x2c, 0xd0, 0x3d);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IUnknown.VTable
	{
	}

}

[CRepr]struct IDWriteTextAnalysisSource : IUnknown
{
	public new const Guid IID = .(0x688e1a58, 0x5094, 0x47c8, 0xad, 0xc8, 0xfb, 0xce, 0xa6, 0x0a, 0xe9, 0x2b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IUnknown.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32 textPosition, uint16** textString, uint32* textLength) GetTextAtPosition;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32 textPosition, uint16** textString, uint32* textLength) GetTextBeforePosition;
		protected new function [CallingConvention(.Stdcall)] DWRITE_READING_DIRECTION(SelfOuter* self) GetParagraphReadingDirection;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32 textPosition, uint32* textLength, uint16** localeName) GetLocaleName;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32 textPosition, uint32* textLength, IDWriteNumberSubstitution** numberSubstitution) GetNumberSubstitution;
	}


	public HRESULT GetTextAtPosition(uint32 textPosition, uint16** textString, uint32* textLength) mut => VT.[Friend]GetTextAtPosition(&this, textPosition, textString, textLength);

	public HRESULT GetTextBeforePosition(uint32 textPosition, uint16** textString, uint32* textLength) mut => VT.[Friend]GetTextBeforePosition(&this, textPosition, textString, textLength);

	public DWRITE_READING_DIRECTION GetParagraphReadingDirection() mut => VT.[Friend]GetParagraphReadingDirection(&this);

	public HRESULT GetLocaleName(uint32 textPosition, uint32* textLength, uint16** localeName) mut => VT.[Friend]GetLocaleName(&this, textPosition, textLength, localeName);

	public HRESULT GetNumberSubstitution(uint32 textPosition, uint32* textLength, IDWriteNumberSubstitution** numberSubstitution) mut => VT.[Friend]GetNumberSubstitution(&this, textPosition, textLength, numberSubstitution);
}

[CRepr]struct IDWriteTextAnalysisSink : IUnknown
{
	public new const Guid IID = .(0x5810cd44, 0x0ca0, 0x4701, 0xb3, 0xfa, 0xbe, 0xc5, 0x18, 0x2a, 0xe4, 0xf6);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IUnknown.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32 textPosition, uint32 textLength, DWRITE_SCRIPT_ANALYSIS* scriptAnalysis) SetScriptAnalysis;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32 textPosition, uint32 textLength, DWRITE_LINE_BREAKPOINT* lineBreakpoints) SetLineBreakpoints;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32 textPosition, uint32 textLength, uint8 explicitLevel, uint8 resolvedLevel) SetBidiLevel;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32 textPosition, uint32 textLength, IDWriteNumberSubstitution* numberSubstitution) SetNumberSubstitution;
	}


	public HRESULT SetScriptAnalysis(uint32 textPosition, uint32 textLength, DWRITE_SCRIPT_ANALYSIS* scriptAnalysis) mut => VT.[Friend]SetScriptAnalysis(&this, textPosition, textLength, scriptAnalysis);

	public HRESULT SetLineBreakpoints(uint32 textPosition, uint32 textLength, DWRITE_LINE_BREAKPOINT* lineBreakpoints) mut => VT.[Friend]SetLineBreakpoints(&this, textPosition, textLength, lineBreakpoints);

	public HRESULT SetBidiLevel(uint32 textPosition, uint32 textLength, uint8 explicitLevel, uint8 resolvedLevel) mut => VT.[Friend]SetBidiLevel(&this, textPosition, textLength, explicitLevel, resolvedLevel);

	public HRESULT SetNumberSubstitution(uint32 textPosition, uint32 textLength, IDWriteNumberSubstitution* numberSubstitution) mut => VT.[Friend]SetNumberSubstitution(&this, textPosition, textLength, numberSubstitution);
}

[CRepr]struct IDWriteTextAnalyzer : IUnknown
{
	public new const Guid IID = .(0xb7e6163e, 0x7f46, 0x43b4, 0x84, 0xb3, 0xe4, 0xe6, 0x24, 0x9c, 0x36, 0x5d);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IUnknown.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IDWriteTextAnalysisSource* analysisSource, uint32 textPosition, uint32 textLength, IDWriteTextAnalysisSink* analysisSink) AnalyzeScript;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IDWriteTextAnalysisSource* analysisSource, uint32 textPosition, uint32 textLength, IDWriteTextAnalysisSink* analysisSink) AnalyzeBidi;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IDWriteTextAnalysisSource* analysisSource, uint32 textPosition, uint32 textLength, IDWriteTextAnalysisSink* analysisSink) AnalyzeNumberSubstitution;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IDWriteTextAnalysisSource* analysisSource, uint32 textPosition, uint32 textLength, IDWriteTextAnalysisSink* analysisSink) AnalyzeLineBreakpoints;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, char16* textString, uint32 textLength, IDWriteFontFace* fontFace, BOOL isSideways, BOOL isRightToLeft, DWRITE_SCRIPT_ANALYSIS* scriptAnalysis, PWSTR localeName, IDWriteNumberSubstitution* numberSubstitution, DWRITE_TYPOGRAPHIC_FEATURES** features, uint32* featureRangeLengths, uint32 featureRanges, uint32 maxGlyphCount, uint16* clusterMap, DWRITE_SHAPING_TEXT_PROPERTIES* textProps, uint16* glyphIndices, DWRITE_SHAPING_GLYPH_PROPERTIES* glyphProps, uint32* actualGlyphCount) GetGlyphs;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, char16* textString, uint16* clusterMap, DWRITE_SHAPING_TEXT_PROPERTIES* textProps, uint32 textLength, uint16* glyphIndices, DWRITE_SHAPING_GLYPH_PROPERTIES* glyphProps, uint32 glyphCount, IDWriteFontFace* fontFace, float fontEmSize, BOOL isSideways, BOOL isRightToLeft, DWRITE_SCRIPT_ANALYSIS* scriptAnalysis, PWSTR localeName, DWRITE_TYPOGRAPHIC_FEATURES** features, uint32* featureRangeLengths, uint32 featureRanges, float* glyphAdvances, DWRITE_GLYPH_OFFSET* glyphOffsets) GetGlyphPlacements;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, char16* textString, uint16* clusterMap, DWRITE_SHAPING_TEXT_PROPERTIES* textProps, uint32 textLength, uint16* glyphIndices, DWRITE_SHAPING_GLYPH_PROPERTIES* glyphProps, uint32 glyphCount, IDWriteFontFace* fontFace, float fontEmSize, float pixelsPerDip, DWRITE_MATRIX* transform, BOOL useGdiNatural, BOOL isSideways, BOOL isRightToLeft, DWRITE_SCRIPT_ANALYSIS* scriptAnalysis, PWSTR localeName, DWRITE_TYPOGRAPHIC_FEATURES** features, uint32* featureRangeLengths, uint32 featureRanges, float* glyphAdvances, DWRITE_GLYPH_OFFSET* glyphOffsets) GetGdiCompatibleGlyphPlacements;
	}


	public HRESULT AnalyzeScript(IDWriteTextAnalysisSource* analysisSource, uint32 textPosition, uint32 textLength, IDWriteTextAnalysisSink* analysisSink) mut => VT.[Friend]AnalyzeScript(&this, analysisSource, textPosition, textLength, analysisSink);

	public HRESULT AnalyzeBidi(IDWriteTextAnalysisSource* analysisSource, uint32 textPosition, uint32 textLength, IDWriteTextAnalysisSink* analysisSink) mut => VT.[Friend]AnalyzeBidi(&this, analysisSource, textPosition, textLength, analysisSink);

	public HRESULT AnalyzeNumberSubstitution(IDWriteTextAnalysisSource* analysisSource, uint32 textPosition, uint32 textLength, IDWriteTextAnalysisSink* analysisSink) mut => VT.[Friend]AnalyzeNumberSubstitution(&this, analysisSource, textPosition, textLength, analysisSink);

	public HRESULT AnalyzeLineBreakpoints(IDWriteTextAnalysisSource* analysisSource, uint32 textPosition, uint32 textLength, IDWriteTextAnalysisSink* analysisSink) mut => VT.[Friend]AnalyzeLineBreakpoints(&this, analysisSource, textPosition, textLength, analysisSink);

	public HRESULT GetGlyphs(char16* textString, uint32 textLength, IDWriteFontFace* fontFace, BOOL isSideways, BOOL isRightToLeft, DWRITE_SCRIPT_ANALYSIS* scriptAnalysis, PWSTR localeName, IDWriteNumberSubstitution* numberSubstitution, DWRITE_TYPOGRAPHIC_FEATURES** features, uint32* featureRangeLengths, uint32 featureRanges, uint32 maxGlyphCount, uint16* clusterMap, DWRITE_SHAPING_TEXT_PROPERTIES* textProps, uint16* glyphIndices, DWRITE_SHAPING_GLYPH_PROPERTIES* glyphProps, uint32* actualGlyphCount) mut => VT.[Friend]GetGlyphs(&this, textString, textLength, fontFace, isSideways, isRightToLeft, scriptAnalysis, localeName, numberSubstitution, features, featureRangeLengths, featureRanges, maxGlyphCount, clusterMap, textProps, glyphIndices, glyphProps, actualGlyphCount);

	public HRESULT GetGlyphPlacements(char16* textString, uint16* clusterMap, DWRITE_SHAPING_TEXT_PROPERTIES* textProps, uint32 textLength, uint16* glyphIndices, DWRITE_SHAPING_GLYPH_PROPERTIES* glyphProps, uint32 glyphCount, IDWriteFontFace* fontFace, float fontEmSize, BOOL isSideways, BOOL isRightToLeft, DWRITE_SCRIPT_ANALYSIS* scriptAnalysis, PWSTR localeName, DWRITE_TYPOGRAPHIC_FEATURES** features, uint32* featureRangeLengths, uint32 featureRanges, float* glyphAdvances, DWRITE_GLYPH_OFFSET* glyphOffsets) mut => VT.[Friend]GetGlyphPlacements(&this, textString, clusterMap, textProps, textLength, glyphIndices, glyphProps, glyphCount, fontFace, fontEmSize, isSideways, isRightToLeft, scriptAnalysis, localeName, features, featureRangeLengths, featureRanges, glyphAdvances, glyphOffsets);

	public HRESULT GetGdiCompatibleGlyphPlacements(char16* textString, uint16* clusterMap, DWRITE_SHAPING_TEXT_PROPERTIES* textProps, uint32 textLength, uint16* glyphIndices, DWRITE_SHAPING_GLYPH_PROPERTIES* glyphProps, uint32 glyphCount, IDWriteFontFace* fontFace, float fontEmSize, float pixelsPerDip, DWRITE_MATRIX* transform, BOOL useGdiNatural, BOOL isSideways, BOOL isRightToLeft, DWRITE_SCRIPT_ANALYSIS* scriptAnalysis, PWSTR localeName, DWRITE_TYPOGRAPHIC_FEATURES** features, uint32* featureRangeLengths, uint32 featureRanges, float* glyphAdvances, DWRITE_GLYPH_OFFSET* glyphOffsets) mut => VT.[Friend]GetGdiCompatibleGlyphPlacements(&this, textString, clusterMap, textProps, textLength, glyphIndices, glyphProps, glyphCount, fontFace, fontEmSize, pixelsPerDip, transform, useGdiNatural, isSideways, isRightToLeft, scriptAnalysis, localeName, features, featureRangeLengths, featureRanges, glyphAdvances, glyphOffsets);
}

[CRepr]struct IDWriteInlineObject : IUnknown
{
	public new const Guid IID = .(0x8339fde3, 0x106f, 0x47ab, 0x83, 0x73, 0x1c, 0x62, 0x95, 0xeb, 0x10, 0xb3);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IUnknown.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, void* clientDrawingContext, IDWriteTextRenderer* renderer, float originX, float originY, BOOL isSideways, BOOL isRightToLeft, IUnknown* clientDrawingEffect) Draw;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, DWRITE_INLINE_OBJECT_METRICS* metrics) GetMetrics;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, DWRITE_OVERHANG_METRICS* overhangs) GetOverhangMetrics;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, DWRITE_BREAK_CONDITION* breakConditionBefore, DWRITE_BREAK_CONDITION* breakConditionAfter) GetBreakConditions;
	}


	public HRESULT Draw(void* clientDrawingContext, IDWriteTextRenderer* renderer, float originX, float originY, BOOL isSideways, BOOL isRightToLeft, IUnknown* clientDrawingEffect) mut => VT.[Friend]Draw(&this, clientDrawingContext, renderer, originX, originY, isSideways, isRightToLeft, clientDrawingEffect);

	public HRESULT GetMetrics(DWRITE_INLINE_OBJECT_METRICS* metrics) mut => VT.[Friend]GetMetrics(&this, metrics);

	public HRESULT GetOverhangMetrics(DWRITE_OVERHANG_METRICS* overhangs) mut => VT.[Friend]GetOverhangMetrics(&this, overhangs);

	public HRESULT GetBreakConditions(DWRITE_BREAK_CONDITION* breakConditionBefore, DWRITE_BREAK_CONDITION* breakConditionAfter) mut => VT.[Friend]GetBreakConditions(&this, breakConditionBefore, breakConditionAfter);
}

[CRepr]struct IDWritePixelSnapping : IUnknown
{
	public new const Guid IID = .(0xeaf3a2da, 0xecf4, 0x4d24, 0xb6, 0x44, 0xb3, 0x4f, 0x68, 0x42, 0x02, 0x4b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IUnknown.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, void* clientDrawingContext, BOOL* isDisabled) IsPixelSnappingDisabled;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, void* clientDrawingContext, DWRITE_MATRIX* transform) GetCurrentTransform;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, void* clientDrawingContext, float* pixelsPerDip) GetPixelsPerDip;
	}


	public HRESULT IsPixelSnappingDisabled(void* clientDrawingContext, BOOL* isDisabled) mut => VT.[Friend]IsPixelSnappingDisabled(&this, clientDrawingContext, isDisabled);

	public HRESULT GetCurrentTransform(void* clientDrawingContext, DWRITE_MATRIX* transform) mut => VT.[Friend]GetCurrentTransform(&this, clientDrawingContext, transform);

	public HRESULT GetPixelsPerDip(void* clientDrawingContext, float* pixelsPerDip) mut => VT.[Friend]GetPixelsPerDip(&this, clientDrawingContext, pixelsPerDip);
}

[CRepr]struct IDWriteTextRenderer : IDWritePixelSnapping
{
	public new const Guid IID = .(0xef8a8135, 0x5cc6, 0x45fe, 0x88, 0x25, 0xc5, 0xa0, 0x72, 0x4e, 0xb8, 0x19);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDWritePixelSnapping.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, void* clientDrawingContext, float baselineOriginX, float baselineOriginY, DWRITE_MEASURING_MODE measuringMode, DWRITE_GLYPH_RUN* glyphRun, DWRITE_GLYPH_RUN_DESCRIPTION* glyphRunDescription, IUnknown* clientDrawingEffect) DrawGlyphRun;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, void* clientDrawingContext, float baselineOriginX, float baselineOriginY, DWRITE_UNDERLINE* underline, IUnknown* clientDrawingEffect) DrawUnderline;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, void* clientDrawingContext, float baselineOriginX, float baselineOriginY, DWRITE_STRIKETHROUGH* strikethrough, IUnknown* clientDrawingEffect) DrawStrikethrough;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, void* clientDrawingContext, float originX, float originY, IDWriteInlineObject* inlineObject, BOOL isSideways, BOOL isRightToLeft, IUnknown* clientDrawingEffect) DrawInlineObject;
	}


	public HRESULT DrawGlyphRun(void* clientDrawingContext, float baselineOriginX, float baselineOriginY, DWRITE_MEASURING_MODE measuringMode, DWRITE_GLYPH_RUN* glyphRun, DWRITE_GLYPH_RUN_DESCRIPTION* glyphRunDescription, IUnknown* clientDrawingEffect) mut => VT.[Friend]DrawGlyphRun(&this, clientDrawingContext, baselineOriginX, baselineOriginY, measuringMode, glyphRun, glyphRunDescription, clientDrawingEffect);

	public HRESULT DrawUnderline(void* clientDrawingContext, float baselineOriginX, float baselineOriginY, DWRITE_UNDERLINE* underline, IUnknown* clientDrawingEffect) mut => VT.[Friend]DrawUnderline(&this, clientDrawingContext, baselineOriginX, baselineOriginY, underline, clientDrawingEffect);

	public HRESULT DrawStrikethrough(void* clientDrawingContext, float baselineOriginX, float baselineOriginY, DWRITE_STRIKETHROUGH* strikethrough, IUnknown* clientDrawingEffect) mut => VT.[Friend]DrawStrikethrough(&this, clientDrawingContext, baselineOriginX, baselineOriginY, strikethrough, clientDrawingEffect);

	public HRESULT DrawInlineObject(void* clientDrawingContext, float originX, float originY, IDWriteInlineObject* inlineObject, BOOL isSideways, BOOL isRightToLeft, IUnknown* clientDrawingEffect) mut => VT.[Friend]DrawInlineObject(&this, clientDrawingContext, originX, originY, inlineObject, isSideways, isRightToLeft, clientDrawingEffect);
}

[CRepr]struct IDWriteTextLayout : IDWriteTextFormat
{
	public new const Guid IID = .(0x53737037, 0x6d14, 0x410b, 0x9b, 0xfe, 0x0b, 0x18, 0x2b, 0xb7, 0x09, 0x61);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDWriteTextFormat.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, float maxWidth) SetMaxWidth;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, float maxHeight) SetMaxHeight;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IDWriteFontCollection* fontCollection, DWRITE_TEXT_RANGE textRange) SetFontCollection;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, PWSTR fontFamilyName, DWRITE_TEXT_RANGE textRange) SetFontFamilyName;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, DWRITE_FONT_WEIGHT fontWeight, DWRITE_TEXT_RANGE textRange) SetFontWeight;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, DWRITE_FONT_STYLE fontStyle, DWRITE_TEXT_RANGE textRange) SetFontStyle;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, DWRITE_FONT_STRETCH fontStretch, DWRITE_TEXT_RANGE textRange) SetFontStretch;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, float fontSize, DWRITE_TEXT_RANGE textRange) SetFontSize;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BOOL hasUnderline, DWRITE_TEXT_RANGE textRange) SetUnderline;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BOOL hasStrikethrough, DWRITE_TEXT_RANGE textRange) SetStrikethrough;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IUnknown* drawingEffect, DWRITE_TEXT_RANGE textRange) SetDrawingEffect;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IDWriteInlineObject* inlineObject, DWRITE_TEXT_RANGE textRange) SetInlineObject;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IDWriteTypography* typography, DWRITE_TEXT_RANGE textRange) SetTypography;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, PWSTR localeName, DWRITE_TEXT_RANGE textRange) SetLocaleName;
		protected new function [CallingConvention(.Stdcall)] float(SelfOuter* self) GetMaxWidth;
		protected new function [CallingConvention(.Stdcall)] float(SelfOuter* self) GetMaxHeight;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32 currentPosition, IDWriteFontCollection** fontCollection, DWRITE_TEXT_RANGE* textRange) GetFontCollection;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32 currentPosition, uint32* nameLength, DWRITE_TEXT_RANGE* textRange) GetFontFamilyNameLength;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32 currentPosition, char16* fontFamilyName, uint32 nameSize, DWRITE_TEXT_RANGE* textRange) GetFontFamilyName;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32 currentPosition, DWRITE_FONT_WEIGHT* fontWeight, DWRITE_TEXT_RANGE* textRange) GetFontWeight;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32 currentPosition, DWRITE_FONT_STYLE* fontStyle, DWRITE_TEXT_RANGE* textRange) GetFontStyle;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32 currentPosition, DWRITE_FONT_STRETCH* fontStretch, DWRITE_TEXT_RANGE* textRange) GetFontStretch;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32 currentPosition, float* fontSize, DWRITE_TEXT_RANGE* textRange) GetFontSize;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32 currentPosition, BOOL* hasUnderline, DWRITE_TEXT_RANGE* textRange) GetUnderline;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32 currentPosition, BOOL* hasStrikethrough, DWRITE_TEXT_RANGE* textRange) GetStrikethrough;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32 currentPosition, IUnknown** drawingEffect, DWRITE_TEXT_RANGE* textRange) GetDrawingEffect;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32 currentPosition, IDWriteInlineObject** inlineObject, DWRITE_TEXT_RANGE* textRange) GetInlineObject;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32 currentPosition, IDWriteTypography** typography, DWRITE_TEXT_RANGE* textRange) GetTypography;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32 currentPosition, uint32* nameLength, DWRITE_TEXT_RANGE* textRange) GetLocaleNameLength;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32 currentPosition, char16* localeName, uint32 nameSize, DWRITE_TEXT_RANGE* textRange) GetLocaleName;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, void* clientDrawingContext, IDWriteTextRenderer* renderer, float originX, float originY) Draw;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, DWRITE_LINE_METRICS* lineMetrics, uint32 maxLineCount, uint32* actualLineCount) GetLineMetrics;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, DWRITE_TEXT_METRICS* textMetrics) GetMetrics;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, DWRITE_OVERHANG_METRICS* overhangs) GetOverhangMetrics;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, DWRITE_CLUSTER_METRICS* clusterMetrics, uint32 maxClusterCount, uint32* actualClusterCount) GetClusterMetrics;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, float* minWidth) DetermineMinWidth;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, float pointX, float pointY, BOOL* isTrailingHit, BOOL* isInside, DWRITE_HIT_TEST_METRICS* hitTestMetrics) HitTestPoint;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32 textPosition, BOOL isTrailingHit, float* pointX, float* pointY, DWRITE_HIT_TEST_METRICS* hitTestMetrics) HitTestTextPosition;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32 textPosition, uint32 textLength, float originX, float originY, DWRITE_HIT_TEST_METRICS* hitTestMetrics, uint32 maxHitTestMetricsCount, uint32* actualHitTestMetricsCount) HitTestTextRange;
	}


	public HRESULT SetMaxWidth(float maxWidth) mut => VT.[Friend]SetMaxWidth(&this, maxWidth);

	public HRESULT SetMaxHeight(float maxHeight) mut => VT.[Friend]SetMaxHeight(&this, maxHeight);

	public HRESULT SetFontCollection(IDWriteFontCollection* fontCollection, DWRITE_TEXT_RANGE textRange) mut => VT.[Friend]SetFontCollection(&this, fontCollection, textRange);

	public HRESULT SetFontFamilyName(PWSTR fontFamilyName, DWRITE_TEXT_RANGE textRange) mut => VT.[Friend]SetFontFamilyName(&this, fontFamilyName, textRange);

	public HRESULT SetFontWeight(DWRITE_FONT_WEIGHT fontWeight, DWRITE_TEXT_RANGE textRange) mut => VT.[Friend]SetFontWeight(&this, fontWeight, textRange);

	public HRESULT SetFontStyle(DWRITE_FONT_STYLE fontStyle, DWRITE_TEXT_RANGE textRange) mut => VT.[Friend]SetFontStyle(&this, fontStyle, textRange);

	public HRESULT SetFontStretch(DWRITE_FONT_STRETCH fontStretch, DWRITE_TEXT_RANGE textRange) mut => VT.[Friend]SetFontStretch(&this, fontStretch, textRange);

	public HRESULT SetFontSize(float fontSize, DWRITE_TEXT_RANGE textRange) mut => VT.[Friend]SetFontSize(&this, fontSize, textRange);

	public HRESULT SetUnderline(BOOL hasUnderline, DWRITE_TEXT_RANGE textRange) mut => VT.[Friend]SetUnderline(&this, hasUnderline, textRange);

	public HRESULT SetStrikethrough(BOOL hasStrikethrough, DWRITE_TEXT_RANGE textRange) mut => VT.[Friend]SetStrikethrough(&this, hasStrikethrough, textRange);

	public HRESULT SetDrawingEffect(IUnknown* drawingEffect, DWRITE_TEXT_RANGE textRange) mut => VT.[Friend]SetDrawingEffect(&this, drawingEffect, textRange);

	public HRESULT SetInlineObject(IDWriteInlineObject* inlineObject, DWRITE_TEXT_RANGE textRange) mut => VT.[Friend]SetInlineObject(&this, inlineObject, textRange);

	public HRESULT SetTypography(IDWriteTypography* typography, DWRITE_TEXT_RANGE textRange) mut => VT.[Friend]SetTypography(&this, typography, textRange);

	public HRESULT SetLocaleName(PWSTR localeName, DWRITE_TEXT_RANGE textRange) mut => VT.[Friend]SetLocaleName(&this, localeName, textRange);

	public float GetMaxWidth() mut => VT.[Friend]GetMaxWidth(&this);

	public float GetMaxHeight() mut => VT.[Friend]GetMaxHeight(&this);

	public HRESULT GetFontCollection(uint32 currentPosition, IDWriteFontCollection** fontCollection, DWRITE_TEXT_RANGE* textRange) mut => VT.[Friend]GetFontCollection(&this, currentPosition, fontCollection, textRange);

	public HRESULT GetFontFamilyNameLength(uint32 currentPosition, uint32* nameLength, DWRITE_TEXT_RANGE* textRange) mut => VT.[Friend]GetFontFamilyNameLength(&this, currentPosition, nameLength, textRange);

	public HRESULT GetFontFamilyName(uint32 currentPosition, char16* fontFamilyName, uint32 nameSize, DWRITE_TEXT_RANGE* textRange) mut => VT.[Friend]GetFontFamilyName(&this, currentPosition, fontFamilyName, nameSize, textRange);

	public HRESULT GetFontWeight(uint32 currentPosition, DWRITE_FONT_WEIGHT* fontWeight, DWRITE_TEXT_RANGE* textRange) mut => VT.[Friend]GetFontWeight(&this, currentPosition, fontWeight, textRange);

	public HRESULT GetFontStyle(uint32 currentPosition, DWRITE_FONT_STYLE* fontStyle, DWRITE_TEXT_RANGE* textRange) mut => VT.[Friend]GetFontStyle(&this, currentPosition, fontStyle, textRange);

	public HRESULT GetFontStretch(uint32 currentPosition, DWRITE_FONT_STRETCH* fontStretch, DWRITE_TEXT_RANGE* textRange) mut => VT.[Friend]GetFontStretch(&this, currentPosition, fontStretch, textRange);

	public HRESULT GetFontSize(uint32 currentPosition, float* fontSize, DWRITE_TEXT_RANGE* textRange) mut => VT.[Friend]GetFontSize(&this, currentPosition, fontSize, textRange);

	public HRESULT GetUnderline(uint32 currentPosition, BOOL* hasUnderline, DWRITE_TEXT_RANGE* textRange) mut => VT.[Friend]GetUnderline(&this, currentPosition, hasUnderline, textRange);

	public HRESULT GetStrikethrough(uint32 currentPosition, BOOL* hasStrikethrough, DWRITE_TEXT_RANGE* textRange) mut => VT.[Friend]GetStrikethrough(&this, currentPosition, hasStrikethrough, textRange);

	public HRESULT GetDrawingEffect(uint32 currentPosition, IUnknown** drawingEffect, DWRITE_TEXT_RANGE* textRange) mut => VT.[Friend]GetDrawingEffect(&this, currentPosition, drawingEffect, textRange);

	public HRESULT GetInlineObject(uint32 currentPosition, IDWriteInlineObject** inlineObject, DWRITE_TEXT_RANGE* textRange) mut => VT.[Friend]GetInlineObject(&this, currentPosition, inlineObject, textRange);

	public HRESULT GetTypography(uint32 currentPosition, IDWriteTypography** typography, DWRITE_TEXT_RANGE* textRange) mut => VT.[Friend]GetTypography(&this, currentPosition, typography, textRange);

	public HRESULT GetLocaleNameLength(uint32 currentPosition, uint32* nameLength, DWRITE_TEXT_RANGE* textRange) mut => VT.[Friend]GetLocaleNameLength(&this, currentPosition, nameLength, textRange);

	public HRESULT GetLocaleName(uint32 currentPosition, char16* localeName, uint32 nameSize, DWRITE_TEXT_RANGE* textRange) mut => VT.[Friend]GetLocaleName(&this, currentPosition, localeName, nameSize, textRange);

	public HRESULT Draw(void* clientDrawingContext, IDWriteTextRenderer* renderer, float originX, float originY) mut => VT.[Friend]Draw(&this, clientDrawingContext, renderer, originX, originY);

	public HRESULT GetLineMetrics(DWRITE_LINE_METRICS* lineMetrics, uint32 maxLineCount, uint32* actualLineCount) mut => VT.[Friend]GetLineMetrics(&this, lineMetrics, maxLineCount, actualLineCount);

	public HRESULT GetMetrics(DWRITE_TEXT_METRICS* textMetrics) mut => VT.[Friend]GetMetrics(&this, textMetrics);

	public HRESULT GetOverhangMetrics(DWRITE_OVERHANG_METRICS* overhangs) mut => VT.[Friend]GetOverhangMetrics(&this, overhangs);

	public HRESULT GetClusterMetrics(DWRITE_CLUSTER_METRICS* clusterMetrics, uint32 maxClusterCount, uint32* actualClusterCount) mut => VT.[Friend]GetClusterMetrics(&this, clusterMetrics, maxClusterCount, actualClusterCount);

	public HRESULT DetermineMinWidth(float* minWidth) mut => VT.[Friend]DetermineMinWidth(&this, minWidth);

	public HRESULT HitTestPoint(float pointX, float pointY, BOOL* isTrailingHit, BOOL* isInside, DWRITE_HIT_TEST_METRICS* hitTestMetrics) mut => VT.[Friend]HitTestPoint(&this, pointX, pointY, isTrailingHit, isInside, hitTestMetrics);

	public HRESULT HitTestTextPosition(uint32 textPosition, BOOL isTrailingHit, float* pointX, float* pointY, DWRITE_HIT_TEST_METRICS* hitTestMetrics) mut => VT.[Friend]HitTestTextPosition(&this, textPosition, isTrailingHit, pointX, pointY, hitTestMetrics);

	public HRESULT HitTestTextRange(uint32 textPosition, uint32 textLength, float originX, float originY, DWRITE_HIT_TEST_METRICS* hitTestMetrics, uint32 maxHitTestMetricsCount, uint32* actualHitTestMetricsCount) mut => VT.[Friend]HitTestTextRange(&this, textPosition, textLength, originX, originY, hitTestMetrics, maxHitTestMetricsCount, actualHitTestMetricsCount);
}

[CRepr]struct IDWriteBitmapRenderTarget : IUnknown
{
	public new const Guid IID = .(0x5e5a32a3, 0x8dff, 0x4773, 0x9f, 0xf6, 0x06, 0x96, 0xea, 0xb7, 0x72, 0x67);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IUnknown.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, float baselineOriginX, float baselineOriginY, DWRITE_MEASURING_MODE measuringMode, DWRITE_GLYPH_RUN* glyphRun, IDWriteRenderingParams* renderingParams, uint32 textColor, RECT* blackBoxRect) DrawGlyphRun;
		protected new function [CallingConvention(.Stdcall)] HDC(SelfOuter* self) GetMemoryDC;
		protected new function [CallingConvention(.Stdcall)] float(SelfOuter* self) GetPixelsPerDip;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, float pixelsPerDip) SetPixelsPerDip;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, DWRITE_MATRIX* transform) GetCurrentTransform;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, DWRITE_MATRIX* transform) SetCurrentTransform;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, SIZE* size) GetSize;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32 width, uint32 height) Resize;
	}


	public HRESULT DrawGlyphRun(float baselineOriginX, float baselineOriginY, DWRITE_MEASURING_MODE measuringMode, DWRITE_GLYPH_RUN* glyphRun, IDWriteRenderingParams* renderingParams, uint32 textColor, RECT* blackBoxRect) mut => VT.[Friend]DrawGlyphRun(&this, baselineOriginX, baselineOriginY, measuringMode, glyphRun, renderingParams, textColor, blackBoxRect);

	public HDC GetMemoryDC() mut => VT.[Friend]GetMemoryDC(&this);

	public float GetPixelsPerDip() mut => VT.[Friend]GetPixelsPerDip(&this);

	public HRESULT SetPixelsPerDip(float pixelsPerDip) mut => VT.[Friend]SetPixelsPerDip(&this, pixelsPerDip);

	public HRESULT GetCurrentTransform(DWRITE_MATRIX* transform) mut => VT.[Friend]GetCurrentTransform(&this, transform);

	public HRESULT SetCurrentTransform(DWRITE_MATRIX* transform) mut => VT.[Friend]SetCurrentTransform(&this, transform);

	public HRESULT GetSize(SIZE* size) mut => VT.[Friend]GetSize(&this, size);

	public HRESULT Resize(uint32 width, uint32 height) mut => VT.[Friend]Resize(&this, width, height);
}

[CRepr]struct IDWriteGdiInterop : IUnknown
{
	public new const Guid IID = .(0x1edd9491, 0x9853, 0x4299, 0x89, 0x8f, 0x64, 0x32, 0x98, 0x3b, 0x6f, 0x3a);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IUnknown.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, LOGFONTW* logFont, IDWriteFont** font) CreateFontFromLOGFONT;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IDWriteFont* font, LOGFONTW* logFont, BOOL* isSystemFont) ConvertFontToLOGFONT;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IDWriteFontFace* font, LOGFONTW* logFont) ConvertFontFaceToLOGFONT;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, HDC hdc, IDWriteFontFace** fontFace) CreateFontFaceFromHdc;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, HDC hdc, uint32 width, uint32 height, IDWriteBitmapRenderTarget** renderTarget) CreateBitmapRenderTarget;
	}


	public HRESULT CreateFontFromLOGFONT(LOGFONTW* logFont, IDWriteFont** font) mut => VT.[Friend]CreateFontFromLOGFONT(&this, logFont, font);

	public HRESULT ConvertFontToLOGFONT(IDWriteFont* font, LOGFONTW* logFont, BOOL* isSystemFont) mut => VT.[Friend]ConvertFontToLOGFONT(&this, font, logFont, isSystemFont);

	public HRESULT ConvertFontFaceToLOGFONT(IDWriteFontFace* font, LOGFONTW* logFont) mut => VT.[Friend]ConvertFontFaceToLOGFONT(&this, font, logFont);

	public HRESULT CreateFontFaceFromHdc(HDC hdc, IDWriteFontFace** fontFace) mut => VT.[Friend]CreateFontFaceFromHdc(&this, hdc, fontFace);

	public HRESULT CreateBitmapRenderTarget(HDC hdc, uint32 width, uint32 height, IDWriteBitmapRenderTarget** renderTarget) mut => VT.[Friend]CreateBitmapRenderTarget(&this, hdc, width, height, renderTarget);
}

[CRepr]struct IDWriteGlyphRunAnalysis : IUnknown
{
	public new const Guid IID = .(0x7d97dbf7, 0xe085, 0x42d4, 0x81, 0xe3, 0x6a, 0x88, 0x3b, 0xde, 0xd1, 0x18);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IUnknown.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, DWRITE_TEXTURE_TYPE textureType, RECT* textureBounds) GetAlphaTextureBounds;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, DWRITE_TEXTURE_TYPE textureType, RECT* textureBounds, uint8* alphaValues, uint32 bufferSize) CreateAlphaTexture;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IDWriteRenderingParams* renderingParams, float* blendGamma, float* blendEnhancedContrast, float* blendClearTypeLevel) GetAlphaBlendParams;
	}


	public HRESULT GetAlphaTextureBounds(DWRITE_TEXTURE_TYPE textureType, RECT* textureBounds) mut => VT.[Friend]GetAlphaTextureBounds(&this, textureType, textureBounds);

	public HRESULT CreateAlphaTexture(DWRITE_TEXTURE_TYPE textureType, RECT* textureBounds, uint8* alphaValues, uint32 bufferSize) mut => VT.[Friend]CreateAlphaTexture(&this, textureType, textureBounds, alphaValues, bufferSize);

	public HRESULT GetAlphaBlendParams(IDWriteRenderingParams* renderingParams, float* blendGamma, float* blendEnhancedContrast, float* blendClearTypeLevel) mut => VT.[Friend]GetAlphaBlendParams(&this, renderingParams, blendGamma, blendEnhancedContrast, blendClearTypeLevel);
}

[CRepr]struct IDWriteFactory : IUnknown
{
	public new const Guid IID = .(0xb859ee5a, 0xd838, 0x4b5b, 0xa2, 0xe8, 0x1a, 0xdc, 0x7d, 0x93, 0xdb, 0x48);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IUnknown.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IDWriteFontCollection** fontCollection, BOOL checkForUpdates) GetSystemFontCollection;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IDWriteFontCollectionLoader* collectionLoader, void* collectionKey, uint32 collectionKeySize, IDWriteFontCollection** fontCollection) CreateCustomFontCollection;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IDWriteFontCollectionLoader* fontCollectionLoader) RegisterFontCollectionLoader;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IDWriteFontCollectionLoader* fontCollectionLoader) UnregisterFontCollectionLoader;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, PWSTR filePath, FILETIME* lastWriteTime, IDWriteFontFile** fontFile) CreateFontFileReference;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, void* fontFileReferenceKey, uint32 fontFileReferenceKeySize, IDWriteFontFileLoader* fontFileLoader, IDWriteFontFile** fontFile) CreateCustomFontFileReference;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, DWRITE_FONT_FACE_TYPE fontFaceType, uint32 numberOfFiles, IDWriteFontFile** fontFiles, uint32 faceIndex, DWRITE_FONT_SIMULATIONS fontFaceSimulationFlags, IDWriteFontFace** fontFace) CreateFontFace;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IDWriteRenderingParams** renderingParams) CreateRenderingParams;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, HMONITOR monitor, IDWriteRenderingParams** renderingParams) CreateMonitorRenderingParams;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, float gamma, float enhancedContrast, float clearTypeLevel, DWRITE_PIXEL_GEOMETRY pixelGeometry, DWRITE_RENDERING_MODE renderingMode, IDWriteRenderingParams** renderingParams) CreateCustomRenderingParams;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IDWriteFontFileLoader* fontFileLoader) RegisterFontFileLoader;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IDWriteFontFileLoader* fontFileLoader) UnregisterFontFileLoader;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, PWSTR fontFamilyName, IDWriteFontCollection* fontCollection, DWRITE_FONT_WEIGHT fontWeight, DWRITE_FONT_STYLE fontStyle, DWRITE_FONT_STRETCH fontStretch, float fontSize, PWSTR localeName, IDWriteTextFormat** textFormat) CreateTextFormat;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IDWriteTypography** typography) CreateTypography;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IDWriteGdiInterop** gdiInterop) GetGdiInterop;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, char16* string, uint32 stringLength, IDWriteTextFormat* textFormat, float maxWidth, float maxHeight, IDWriteTextLayout** textLayout) CreateTextLayout;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, char16* string, uint32 stringLength, IDWriteTextFormat* textFormat, float layoutWidth, float layoutHeight, float pixelsPerDip, DWRITE_MATRIX* transform, BOOL useGdiNatural, IDWriteTextLayout** textLayout) CreateGdiCompatibleTextLayout;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IDWriteTextFormat* textFormat, IDWriteInlineObject** trimmingSign) CreateEllipsisTrimmingSign;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IDWriteTextAnalyzer** textAnalyzer) CreateTextAnalyzer;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, DWRITE_NUMBER_SUBSTITUTION_METHOD substitutionMethod, PWSTR localeName, BOOL ignoreUserOverride, IDWriteNumberSubstitution** numberSubstitution) CreateNumberSubstitution;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, DWRITE_GLYPH_RUN* glyphRun, float pixelsPerDip, DWRITE_MATRIX* transform, DWRITE_RENDERING_MODE renderingMode, DWRITE_MEASURING_MODE measuringMode, float baselineOriginX, float baselineOriginY, IDWriteGlyphRunAnalysis** glyphRunAnalysis) CreateGlyphRunAnalysis;
	}


	public HRESULT GetSystemFontCollection(IDWriteFontCollection** fontCollection, BOOL checkForUpdates) mut => VT.[Friend]GetSystemFontCollection(&this, fontCollection, checkForUpdates);

	public HRESULT CreateCustomFontCollection(IDWriteFontCollectionLoader* collectionLoader, void* collectionKey, uint32 collectionKeySize, IDWriteFontCollection** fontCollection) mut => VT.[Friend]CreateCustomFontCollection(&this, collectionLoader, collectionKey, collectionKeySize, fontCollection);

	public HRESULT RegisterFontCollectionLoader(IDWriteFontCollectionLoader* fontCollectionLoader) mut => VT.[Friend]RegisterFontCollectionLoader(&this, fontCollectionLoader);

	public HRESULT UnregisterFontCollectionLoader(IDWriteFontCollectionLoader* fontCollectionLoader) mut => VT.[Friend]UnregisterFontCollectionLoader(&this, fontCollectionLoader);

	public HRESULT CreateFontFileReference(PWSTR filePath, FILETIME* lastWriteTime, IDWriteFontFile** fontFile) mut => VT.[Friend]CreateFontFileReference(&this, filePath, lastWriteTime, fontFile);

	public HRESULT CreateCustomFontFileReference(void* fontFileReferenceKey, uint32 fontFileReferenceKeySize, IDWriteFontFileLoader* fontFileLoader, IDWriteFontFile** fontFile) mut => VT.[Friend]CreateCustomFontFileReference(&this, fontFileReferenceKey, fontFileReferenceKeySize, fontFileLoader, fontFile);

	public HRESULT CreateFontFace(DWRITE_FONT_FACE_TYPE fontFaceType, uint32 numberOfFiles, IDWriteFontFile** fontFiles, uint32 faceIndex, DWRITE_FONT_SIMULATIONS fontFaceSimulationFlags, IDWriteFontFace** fontFace) mut => VT.[Friend]CreateFontFace(&this, fontFaceType, numberOfFiles, fontFiles, faceIndex, fontFaceSimulationFlags, fontFace);

	public HRESULT CreateRenderingParams(IDWriteRenderingParams** renderingParams) mut => VT.[Friend]CreateRenderingParams(&this, renderingParams);

	public HRESULT CreateMonitorRenderingParams(HMONITOR monitor, IDWriteRenderingParams** renderingParams) mut => VT.[Friend]CreateMonitorRenderingParams(&this, monitor, renderingParams);

	public HRESULT CreateCustomRenderingParams(float gamma, float enhancedContrast, float clearTypeLevel, DWRITE_PIXEL_GEOMETRY pixelGeometry, DWRITE_RENDERING_MODE renderingMode, IDWriteRenderingParams** renderingParams) mut => VT.[Friend]CreateCustomRenderingParams(&this, gamma, enhancedContrast, clearTypeLevel, pixelGeometry, renderingMode, renderingParams);

	public HRESULT RegisterFontFileLoader(IDWriteFontFileLoader* fontFileLoader) mut => VT.[Friend]RegisterFontFileLoader(&this, fontFileLoader);

	public HRESULT UnregisterFontFileLoader(IDWriteFontFileLoader* fontFileLoader) mut => VT.[Friend]UnregisterFontFileLoader(&this, fontFileLoader);

	public HRESULT CreateTextFormat(PWSTR fontFamilyName, IDWriteFontCollection* fontCollection, DWRITE_FONT_WEIGHT fontWeight, DWRITE_FONT_STYLE fontStyle, DWRITE_FONT_STRETCH fontStretch, float fontSize, PWSTR localeName, IDWriteTextFormat** textFormat) mut => VT.[Friend]CreateTextFormat(&this, fontFamilyName, fontCollection, fontWeight, fontStyle, fontStretch, fontSize, localeName, textFormat);

	public HRESULT CreateTypography(IDWriteTypography** typography) mut => VT.[Friend]CreateTypography(&this, typography);

	public HRESULT GetGdiInterop(IDWriteGdiInterop** gdiInterop) mut => VT.[Friend]GetGdiInterop(&this, gdiInterop);

	public HRESULT CreateTextLayout(char16* string, uint32 stringLength, IDWriteTextFormat* textFormat, float maxWidth, float maxHeight, IDWriteTextLayout** textLayout) mut => VT.[Friend]CreateTextLayout(&this, string, stringLength, textFormat, maxWidth, maxHeight, textLayout);

	public HRESULT CreateGdiCompatibleTextLayout(char16* string, uint32 stringLength, IDWriteTextFormat* textFormat, float layoutWidth, float layoutHeight, float pixelsPerDip, DWRITE_MATRIX* transform, BOOL useGdiNatural, IDWriteTextLayout** textLayout) mut => VT.[Friend]CreateGdiCompatibleTextLayout(&this, string, stringLength, textFormat, layoutWidth, layoutHeight, pixelsPerDip, transform, useGdiNatural, textLayout);

	public HRESULT CreateEllipsisTrimmingSign(IDWriteTextFormat* textFormat, IDWriteInlineObject** trimmingSign) mut => VT.[Friend]CreateEllipsisTrimmingSign(&this, textFormat, trimmingSign);

	public HRESULT CreateTextAnalyzer(IDWriteTextAnalyzer** textAnalyzer) mut => VT.[Friend]CreateTextAnalyzer(&this, textAnalyzer);

	public HRESULT CreateNumberSubstitution(DWRITE_NUMBER_SUBSTITUTION_METHOD substitutionMethod, PWSTR localeName, BOOL ignoreUserOverride, IDWriteNumberSubstitution** numberSubstitution) mut => VT.[Friend]CreateNumberSubstitution(&this, substitutionMethod, localeName, ignoreUserOverride, numberSubstitution);

	public HRESULT CreateGlyphRunAnalysis(DWRITE_GLYPH_RUN* glyphRun, float pixelsPerDip, DWRITE_MATRIX* transform, DWRITE_RENDERING_MODE renderingMode, DWRITE_MEASURING_MODE measuringMode, float baselineOriginX, float baselineOriginY, IDWriteGlyphRunAnalysis** glyphRunAnalysis) mut => VT.[Friend]CreateGlyphRunAnalysis(&this, glyphRun, pixelsPerDip, transform, renderingMode, measuringMode, baselineOriginX, baselineOriginY, glyphRunAnalysis);
}

[CRepr]struct IDWriteFactory1 : IDWriteFactory
{
	public new const Guid IID = .(0x30572f99, 0xdac6, 0x41db, 0xa1, 0x6e, 0x04, 0x86, 0x30, 0x7e, 0x60, 0x6a);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDWriteFactory.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IDWriteFontCollection** fontCollection, BOOL checkForUpdates) GetEudcFontCollection;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, float gamma, float enhancedContrast, float enhancedContrastGrayscale, float clearTypeLevel, DWRITE_PIXEL_GEOMETRY pixelGeometry, DWRITE_RENDERING_MODE renderingMode, IDWriteRenderingParams1** renderingParams) CreateCustomRenderingParams;
	}


	public HRESULT GetEudcFontCollection(IDWriteFontCollection** fontCollection, BOOL checkForUpdates) mut => VT.[Friend]GetEudcFontCollection(&this, fontCollection, checkForUpdates);

	public HRESULT CreateCustomRenderingParams(float gamma, float enhancedContrast, float enhancedContrastGrayscale, float clearTypeLevel, DWRITE_PIXEL_GEOMETRY pixelGeometry, DWRITE_RENDERING_MODE renderingMode, IDWriteRenderingParams1** renderingParams) mut => VT.[Friend]CreateCustomRenderingParams(&this, gamma, enhancedContrast, enhancedContrastGrayscale, clearTypeLevel, pixelGeometry, renderingMode, renderingParams);
}

[CRepr]struct IDWriteFontFace1 : IDWriteFontFace
{
	public new const Guid IID = .(0xa71efdb4, 0x9fdb, 0x4838, 0xad, 0x90, 0xcf, 0xc3, 0xbe, 0x8c, 0x3d, 0xaf);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDWriteFontFace.VTable
	{
		protected new function [CallingConvention(.Stdcall)] void(SelfOuter* self, DWRITE_FONT_METRICS1* fontMetrics) GetMetrics;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, float emSize, float pixelsPerDip, DWRITE_MATRIX* transform, DWRITE_FONT_METRICS1* fontMetrics) GetGdiCompatibleMetrics;
		protected new function [CallingConvention(.Stdcall)] void(SelfOuter* self, DWRITE_CARET_METRICS* caretMetrics) GetCaretMetrics;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32 maxRangeCount, DWRITE_UNICODE_RANGE* unicodeRanges, uint32* actualRangeCount) GetUnicodeRanges;
		protected new function [CallingConvention(.Stdcall)] BOOL(SelfOuter* self) IsMonospacedFont;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32 glyphCount, uint16* glyphIndices, int32* glyphAdvances, BOOL isSideways) GetDesignGlyphAdvances;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, float emSize, float pixelsPerDip, DWRITE_MATRIX* transform, BOOL useGdiNatural, BOOL isSideways, uint32 glyphCount, uint16* glyphIndices, int32* glyphAdvances) GetGdiCompatibleGlyphAdvances;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32 glyphCount, uint16* glyphIndices, int32* glyphAdvanceAdjustments) GetKerningPairAdjustments;
		protected new function [CallingConvention(.Stdcall)] BOOL(SelfOuter* self) HasKerningPairs;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, float fontEmSize, float dpiX, float dpiY, DWRITE_MATRIX* transform, BOOL isSideways, DWRITE_OUTLINE_THRESHOLD outlineThreshold, DWRITE_MEASURING_MODE measuringMode, DWRITE_RENDERING_MODE* renderingMode) GetRecommendedRenderingMode;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32 glyphCount, uint16* nominalGlyphIndices, uint16* verticalGlyphIndices) GetVerticalGlyphVariants;
		protected new function [CallingConvention(.Stdcall)] BOOL(SelfOuter* self) HasVerticalGlyphVariants;
	}


	public void GetMetrics(DWRITE_FONT_METRICS1* fontMetrics) mut => VT.[Friend]GetMetrics(&this, fontMetrics);

	public HRESULT GetGdiCompatibleMetrics(float emSize, float pixelsPerDip, DWRITE_MATRIX* transform, DWRITE_FONT_METRICS1* fontMetrics) mut => VT.[Friend]GetGdiCompatibleMetrics(&this, emSize, pixelsPerDip, transform, fontMetrics);

	public void GetCaretMetrics(DWRITE_CARET_METRICS* caretMetrics) mut => VT.[Friend]GetCaretMetrics(&this, caretMetrics);

	public HRESULT GetUnicodeRanges(uint32 maxRangeCount, DWRITE_UNICODE_RANGE* unicodeRanges, uint32* actualRangeCount) mut => VT.[Friend]GetUnicodeRanges(&this, maxRangeCount, unicodeRanges, actualRangeCount);

	public BOOL IsMonospacedFont() mut => VT.[Friend]IsMonospacedFont(&this);

	public HRESULT GetDesignGlyphAdvances(uint32 glyphCount, uint16* glyphIndices, int32* glyphAdvances, BOOL isSideways) mut => VT.[Friend]GetDesignGlyphAdvances(&this, glyphCount, glyphIndices, glyphAdvances, isSideways);

	public HRESULT GetGdiCompatibleGlyphAdvances(float emSize, float pixelsPerDip, DWRITE_MATRIX* transform, BOOL useGdiNatural, BOOL isSideways, uint32 glyphCount, uint16* glyphIndices, int32* glyphAdvances) mut => VT.[Friend]GetGdiCompatibleGlyphAdvances(&this, emSize, pixelsPerDip, transform, useGdiNatural, isSideways, glyphCount, glyphIndices, glyphAdvances);

	public HRESULT GetKerningPairAdjustments(uint32 glyphCount, uint16* glyphIndices, int32* glyphAdvanceAdjustments) mut => VT.[Friend]GetKerningPairAdjustments(&this, glyphCount, glyphIndices, glyphAdvanceAdjustments);

	public BOOL HasKerningPairs() mut => VT.[Friend]HasKerningPairs(&this);

	public HRESULT GetRecommendedRenderingMode(float fontEmSize, float dpiX, float dpiY, DWRITE_MATRIX* transform, BOOL isSideways, DWRITE_OUTLINE_THRESHOLD outlineThreshold, DWRITE_MEASURING_MODE measuringMode, DWRITE_RENDERING_MODE* renderingMode) mut => VT.[Friend]GetRecommendedRenderingMode(&this, fontEmSize, dpiX, dpiY, transform, isSideways, outlineThreshold, measuringMode, renderingMode);

	public HRESULT GetVerticalGlyphVariants(uint32 glyphCount, uint16* nominalGlyphIndices, uint16* verticalGlyphIndices) mut => VT.[Friend]GetVerticalGlyphVariants(&this, glyphCount, nominalGlyphIndices, verticalGlyphIndices);

	public BOOL HasVerticalGlyphVariants() mut => VT.[Friend]HasVerticalGlyphVariants(&this);
}

[CRepr]struct IDWriteFont1 : IDWriteFont
{
	public new const Guid IID = .(0xacd16696, 0x8c14, 0x4f5d, 0x87, 0x7e, 0xfe, 0x3f, 0xc1, 0xd3, 0x27, 0x38);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDWriteFont.VTable
	{
		protected new function [CallingConvention(.Stdcall)] void(SelfOuter* self, DWRITE_FONT_METRICS1* fontMetrics) GetMetrics;
		protected new function [CallingConvention(.Stdcall)] void(SelfOuter* self, DWRITE_PANOSE* panose) GetPanose;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32 maxRangeCount, DWRITE_UNICODE_RANGE* unicodeRanges, uint32* actualRangeCount) GetUnicodeRanges;
		protected new function [CallingConvention(.Stdcall)] BOOL(SelfOuter* self) IsMonospacedFont;
	}


	public void GetMetrics(DWRITE_FONT_METRICS1* fontMetrics) mut => VT.[Friend]GetMetrics(&this, fontMetrics);

	public void GetPanose(DWRITE_PANOSE* panose) mut => VT.[Friend]GetPanose(&this, panose);

	public HRESULT GetUnicodeRanges(uint32 maxRangeCount, DWRITE_UNICODE_RANGE* unicodeRanges, uint32* actualRangeCount) mut => VT.[Friend]GetUnicodeRanges(&this, maxRangeCount, unicodeRanges, actualRangeCount);

	public BOOL IsMonospacedFont() mut => VT.[Friend]IsMonospacedFont(&this);
}

[CRepr]struct IDWriteRenderingParams1 : IDWriteRenderingParams
{
	public new const Guid IID = .(0x94413cf4, 0xa6fc, 0x4248, 0x8b, 0x50, 0x66, 0x74, 0x34, 0x8f, 0xca, 0xd3);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDWriteRenderingParams.VTable
	{
		protected new function [CallingConvention(.Stdcall)] float(SelfOuter* self) GetGrayscaleEnhancedContrast;
	}


	public float GetGrayscaleEnhancedContrast() mut => VT.[Friend]GetGrayscaleEnhancedContrast(&this);
}

[CRepr]struct IDWriteTextAnalyzer1 : IDWriteTextAnalyzer
{
	public new const Guid IID = .(0x80dad800, 0xe21f, 0x4e83, 0x96, 0xce, 0xbf, 0xcc, 0xe5, 0x00, 0xdb, 0x7c);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDWriteTextAnalyzer.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, float leadingSpacing, float trailingSpacing, float minimumAdvanceWidth, uint32 textLength, uint32 glyphCount, uint16* clusterMap, float* glyphAdvances, DWRITE_GLYPH_OFFSET* glyphOffsets, DWRITE_SHAPING_GLYPH_PROPERTIES* glyphProperties, float* modifiedGlyphAdvances, DWRITE_GLYPH_OFFSET* modifiedGlyphOffsets) ApplyCharacterSpacing;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IDWriteFontFace* fontFace, DWRITE_BASELINE baseline, BOOL isVertical, BOOL isSimulationAllowed, DWRITE_SCRIPT_ANALYSIS scriptAnalysis, PWSTR localeName, int32* baselineCoordinate, BOOL* exists) GetBaseline;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IDWriteTextAnalysisSource1* analysisSource, uint32 textPosition, uint32 textLength, IDWriteTextAnalysisSink1* analysisSink) AnalyzeVerticalGlyphOrientation;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, DWRITE_GLYPH_ORIENTATION_ANGLE glyphOrientationAngle, BOOL isSideways, DWRITE_MATRIX* transform) GetGlyphOrientationTransform;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, DWRITE_SCRIPT_ANALYSIS scriptAnalysis, DWRITE_SCRIPT_PROPERTIES* scriptProperties) GetScriptProperties;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, char16* textString, uint32 textLength, IDWriteFontFace* fontFace, BOOL* isTextSimple, uint32* textLengthRead, uint16* glyphIndices) GetTextComplexity;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IDWriteFontFace* fontFace, float fontEmSize, DWRITE_SCRIPT_ANALYSIS scriptAnalysis, uint32 textLength, uint32 glyphCount, char16* textString, uint16* clusterMap, DWRITE_SHAPING_GLYPH_PROPERTIES* glyphProperties, DWRITE_JUSTIFICATION_OPPORTUNITY* justificationOpportunities) GetJustificationOpportunities;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, float lineWidth, uint32 glyphCount, DWRITE_JUSTIFICATION_OPPORTUNITY* justificationOpportunities, float* glyphAdvances, DWRITE_GLYPH_OFFSET* glyphOffsets, float* justifiedGlyphAdvances, DWRITE_GLYPH_OFFSET* justifiedGlyphOffsets) JustifyGlyphAdvances;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IDWriteFontFace* fontFace, float fontEmSize, DWRITE_SCRIPT_ANALYSIS scriptAnalysis, uint32 textLength, uint32 glyphCount, uint32 maxGlyphCount, uint16* clusterMap, uint16* glyphIndices, float* glyphAdvances, float* justifiedGlyphAdvances, DWRITE_GLYPH_OFFSET* justifiedGlyphOffsets, DWRITE_SHAPING_GLYPH_PROPERTIES* glyphProperties, uint32* actualGlyphCount, uint16* modifiedClusterMap, uint16* modifiedGlyphIndices, float* modifiedGlyphAdvances, DWRITE_GLYPH_OFFSET* modifiedGlyphOffsets) GetJustifiedGlyphs;
	}


	public HRESULT ApplyCharacterSpacing(float leadingSpacing, float trailingSpacing, float minimumAdvanceWidth, uint32 textLength, uint32 glyphCount, uint16* clusterMap, float* glyphAdvances, DWRITE_GLYPH_OFFSET* glyphOffsets, DWRITE_SHAPING_GLYPH_PROPERTIES* glyphProperties, float* modifiedGlyphAdvances, DWRITE_GLYPH_OFFSET* modifiedGlyphOffsets) mut => VT.[Friend]ApplyCharacterSpacing(&this, leadingSpacing, trailingSpacing, minimumAdvanceWidth, textLength, glyphCount, clusterMap, glyphAdvances, glyphOffsets, glyphProperties, modifiedGlyphAdvances, modifiedGlyphOffsets);

	public HRESULT GetBaseline(IDWriteFontFace* fontFace, DWRITE_BASELINE baseline, BOOL isVertical, BOOL isSimulationAllowed, DWRITE_SCRIPT_ANALYSIS scriptAnalysis, PWSTR localeName, int32* baselineCoordinate, BOOL* exists) mut => VT.[Friend]GetBaseline(&this, fontFace, baseline, isVertical, isSimulationAllowed, scriptAnalysis, localeName, baselineCoordinate, exists);

	public HRESULT AnalyzeVerticalGlyphOrientation(IDWriteTextAnalysisSource1* analysisSource, uint32 textPosition, uint32 textLength, IDWriteTextAnalysisSink1* analysisSink) mut => VT.[Friend]AnalyzeVerticalGlyphOrientation(&this, analysisSource, textPosition, textLength, analysisSink);

	public HRESULT GetGlyphOrientationTransform(DWRITE_GLYPH_ORIENTATION_ANGLE glyphOrientationAngle, BOOL isSideways, DWRITE_MATRIX* transform) mut => VT.[Friend]GetGlyphOrientationTransform(&this, glyphOrientationAngle, isSideways, transform);

	public HRESULT GetScriptProperties(DWRITE_SCRIPT_ANALYSIS scriptAnalysis, DWRITE_SCRIPT_PROPERTIES* scriptProperties) mut => VT.[Friend]GetScriptProperties(&this, scriptAnalysis, scriptProperties);

	public HRESULT GetTextComplexity(char16* textString, uint32 textLength, IDWriteFontFace* fontFace, BOOL* isTextSimple, uint32* textLengthRead, uint16* glyphIndices) mut => VT.[Friend]GetTextComplexity(&this, textString, textLength, fontFace, isTextSimple, textLengthRead, glyphIndices);

	public HRESULT GetJustificationOpportunities(IDWriteFontFace* fontFace, float fontEmSize, DWRITE_SCRIPT_ANALYSIS scriptAnalysis, uint32 textLength, uint32 glyphCount, char16* textString, uint16* clusterMap, DWRITE_SHAPING_GLYPH_PROPERTIES* glyphProperties, DWRITE_JUSTIFICATION_OPPORTUNITY* justificationOpportunities) mut => VT.[Friend]GetJustificationOpportunities(&this, fontFace, fontEmSize, scriptAnalysis, textLength, glyphCount, textString, clusterMap, glyphProperties, justificationOpportunities);

	public HRESULT JustifyGlyphAdvances(float lineWidth, uint32 glyphCount, DWRITE_JUSTIFICATION_OPPORTUNITY* justificationOpportunities, float* glyphAdvances, DWRITE_GLYPH_OFFSET* glyphOffsets, float* justifiedGlyphAdvances, DWRITE_GLYPH_OFFSET* justifiedGlyphOffsets) mut => VT.[Friend]JustifyGlyphAdvances(&this, lineWidth, glyphCount, justificationOpportunities, glyphAdvances, glyphOffsets, justifiedGlyphAdvances, justifiedGlyphOffsets);

	public HRESULT GetJustifiedGlyphs(IDWriteFontFace* fontFace, float fontEmSize, DWRITE_SCRIPT_ANALYSIS scriptAnalysis, uint32 textLength, uint32 glyphCount, uint32 maxGlyphCount, uint16* clusterMap, uint16* glyphIndices, float* glyphAdvances, float* justifiedGlyphAdvances, DWRITE_GLYPH_OFFSET* justifiedGlyphOffsets, DWRITE_SHAPING_GLYPH_PROPERTIES* glyphProperties, uint32* actualGlyphCount, uint16* modifiedClusterMap, uint16* modifiedGlyphIndices, float* modifiedGlyphAdvances, DWRITE_GLYPH_OFFSET* modifiedGlyphOffsets) mut => VT.[Friend]GetJustifiedGlyphs(&this, fontFace, fontEmSize, scriptAnalysis, textLength, glyphCount, maxGlyphCount, clusterMap, glyphIndices, glyphAdvances, justifiedGlyphAdvances, justifiedGlyphOffsets, glyphProperties, actualGlyphCount, modifiedClusterMap, modifiedGlyphIndices, modifiedGlyphAdvances, modifiedGlyphOffsets);
}

[CRepr]struct IDWriteTextAnalysisSource1 : IDWriteTextAnalysisSource
{
	public new const Guid IID = .(0x639cfad8, 0x0fb4, 0x4b21, 0xa5, 0x8a, 0x06, 0x79, 0x20, 0x12, 0x00, 0x09);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDWriteTextAnalysisSource.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32 textPosition, uint32* textLength, DWRITE_VERTICAL_GLYPH_ORIENTATION* glyphOrientation, uint8* bidiLevel) GetVerticalGlyphOrientation;
	}


	public HRESULT GetVerticalGlyphOrientation(uint32 textPosition, uint32* textLength, DWRITE_VERTICAL_GLYPH_ORIENTATION* glyphOrientation, uint8* bidiLevel) mut => VT.[Friend]GetVerticalGlyphOrientation(&this, textPosition, textLength, glyphOrientation, bidiLevel);
}

[CRepr]struct IDWriteTextAnalysisSink1 : IDWriteTextAnalysisSink
{
	public new const Guid IID = .(0xb0d941a0, 0x85e7, 0x4d8b, 0x9f, 0xd3, 0x5c, 0xed, 0x99, 0x34, 0x48, 0x2a);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDWriteTextAnalysisSink.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32 textPosition, uint32 textLength, DWRITE_GLYPH_ORIENTATION_ANGLE glyphOrientationAngle, uint8 adjustedBidiLevel, BOOL isSideways, BOOL isRightToLeft) SetGlyphOrientation;
	}


	public HRESULT SetGlyphOrientation(uint32 textPosition, uint32 textLength, DWRITE_GLYPH_ORIENTATION_ANGLE glyphOrientationAngle, uint8 adjustedBidiLevel, BOOL isSideways, BOOL isRightToLeft) mut => VT.[Friend]SetGlyphOrientation(&this, textPosition, textLength, glyphOrientationAngle, adjustedBidiLevel, isSideways, isRightToLeft);
}

[CRepr]struct IDWriteTextLayout1 : IDWriteTextLayout
{
	public new const Guid IID = .(0x9064d822, 0x80a7, 0x465c, 0xa9, 0x86, 0xdf, 0x65, 0xf7, 0x8b, 0x8f, 0xeb);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDWriteTextLayout.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BOOL isPairKerningEnabled, DWRITE_TEXT_RANGE textRange) SetPairKerning;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32 currentPosition, BOOL* isPairKerningEnabled, DWRITE_TEXT_RANGE* textRange) GetPairKerning;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, float leadingSpacing, float trailingSpacing, float minimumAdvanceWidth, DWRITE_TEXT_RANGE textRange) SetCharacterSpacing;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32 currentPosition, float* leadingSpacing, float* trailingSpacing, float* minimumAdvanceWidth, DWRITE_TEXT_RANGE* textRange) GetCharacterSpacing;
	}


	public HRESULT SetPairKerning(BOOL isPairKerningEnabled, DWRITE_TEXT_RANGE textRange) mut => VT.[Friend]SetPairKerning(&this, isPairKerningEnabled, textRange);

	public HRESULT GetPairKerning(uint32 currentPosition, BOOL* isPairKerningEnabled, DWRITE_TEXT_RANGE* textRange) mut => VT.[Friend]GetPairKerning(&this, currentPosition, isPairKerningEnabled, textRange);

	public HRESULT SetCharacterSpacing(float leadingSpacing, float trailingSpacing, float minimumAdvanceWidth, DWRITE_TEXT_RANGE textRange) mut => VT.[Friend]SetCharacterSpacing(&this, leadingSpacing, trailingSpacing, minimumAdvanceWidth, textRange);

	public HRESULT GetCharacterSpacing(uint32 currentPosition, float* leadingSpacing, float* trailingSpacing, float* minimumAdvanceWidth, DWRITE_TEXT_RANGE* textRange) mut => VT.[Friend]GetCharacterSpacing(&this, currentPosition, leadingSpacing, trailingSpacing, minimumAdvanceWidth, textRange);
}

[CRepr]struct IDWriteBitmapRenderTarget1 : IDWriteBitmapRenderTarget
{
	public new const Guid IID = .(0x791e8298, 0x3ef3, 0x4230, 0x98, 0x80, 0xc9, 0xbd, 0xec, 0xc4, 0x20, 0x64);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDWriteBitmapRenderTarget.VTable
	{
		protected new function [CallingConvention(.Stdcall)] DWRITE_TEXT_ANTIALIAS_MODE(SelfOuter* self) GetTextAntialiasMode;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, DWRITE_TEXT_ANTIALIAS_MODE antialiasMode) SetTextAntialiasMode;
	}


	public DWRITE_TEXT_ANTIALIAS_MODE GetTextAntialiasMode() mut => VT.[Friend]GetTextAntialiasMode(&this);

	public HRESULT SetTextAntialiasMode(DWRITE_TEXT_ANTIALIAS_MODE antialiasMode) mut => VT.[Friend]SetTextAntialiasMode(&this, antialiasMode);
}

[CRepr]struct IDWriteTextRenderer1 : IDWriteTextRenderer
{
	public new const Guid IID = .(0xd3e0e934, 0x22a0, 0x427e, 0xaa, 0xe4, 0x7d, 0x95, 0x74, 0xb5, 0x9d, 0xb1);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDWriteTextRenderer.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, void* clientDrawingContext, float baselineOriginX, float baselineOriginY, DWRITE_GLYPH_ORIENTATION_ANGLE orientationAngle, DWRITE_MEASURING_MODE measuringMode, DWRITE_GLYPH_RUN* glyphRun, DWRITE_GLYPH_RUN_DESCRIPTION* glyphRunDescription, IUnknown* clientDrawingEffect) DrawGlyphRun;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, void* clientDrawingContext, float baselineOriginX, float baselineOriginY, DWRITE_GLYPH_ORIENTATION_ANGLE orientationAngle, DWRITE_UNDERLINE* underline, IUnknown* clientDrawingEffect) DrawUnderline;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, void* clientDrawingContext, float baselineOriginX, float baselineOriginY, DWRITE_GLYPH_ORIENTATION_ANGLE orientationAngle, DWRITE_STRIKETHROUGH* strikethrough, IUnknown* clientDrawingEffect) DrawStrikethrough;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, void* clientDrawingContext, float originX, float originY, DWRITE_GLYPH_ORIENTATION_ANGLE orientationAngle, IDWriteInlineObject* inlineObject, BOOL isSideways, BOOL isRightToLeft, IUnknown* clientDrawingEffect) DrawInlineObject;
	}


	public HRESULT DrawGlyphRun(void* clientDrawingContext, float baselineOriginX, float baselineOriginY, DWRITE_GLYPH_ORIENTATION_ANGLE orientationAngle, DWRITE_MEASURING_MODE measuringMode, DWRITE_GLYPH_RUN* glyphRun, DWRITE_GLYPH_RUN_DESCRIPTION* glyphRunDescription, IUnknown* clientDrawingEffect) mut => VT.[Friend]DrawGlyphRun(&this, clientDrawingContext, baselineOriginX, baselineOriginY, orientationAngle, measuringMode, glyphRun, glyphRunDescription, clientDrawingEffect);

	public HRESULT DrawUnderline(void* clientDrawingContext, float baselineOriginX, float baselineOriginY, DWRITE_GLYPH_ORIENTATION_ANGLE orientationAngle, DWRITE_UNDERLINE* underline, IUnknown* clientDrawingEffect) mut => VT.[Friend]DrawUnderline(&this, clientDrawingContext, baselineOriginX, baselineOriginY, orientationAngle, underline, clientDrawingEffect);

	public HRESULT DrawStrikethrough(void* clientDrawingContext, float baselineOriginX, float baselineOriginY, DWRITE_GLYPH_ORIENTATION_ANGLE orientationAngle, DWRITE_STRIKETHROUGH* strikethrough, IUnknown* clientDrawingEffect) mut => VT.[Friend]DrawStrikethrough(&this, clientDrawingContext, baselineOriginX, baselineOriginY, orientationAngle, strikethrough, clientDrawingEffect);

	public HRESULT DrawInlineObject(void* clientDrawingContext, float originX, float originY, DWRITE_GLYPH_ORIENTATION_ANGLE orientationAngle, IDWriteInlineObject* inlineObject, BOOL isSideways, BOOL isRightToLeft, IUnknown* clientDrawingEffect) mut => VT.[Friend]DrawInlineObject(&this, clientDrawingContext, originX, originY, orientationAngle, inlineObject, isSideways, isRightToLeft, clientDrawingEffect);
}

[CRepr]struct IDWriteTextFormat1 : IDWriteTextFormat
{
	public new const Guid IID = .(0x5f174b49, 0x0d8b, 0x4cfb, 0x8b, 0xca, 0xf1, 0xcc, 0xe9, 0xd0, 0x6c, 0x67);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDWriteTextFormat.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, DWRITE_VERTICAL_GLYPH_ORIENTATION glyphOrientation) SetVerticalGlyphOrientation;
		protected new function [CallingConvention(.Stdcall)] DWRITE_VERTICAL_GLYPH_ORIENTATION(SelfOuter* self) GetVerticalGlyphOrientation;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BOOL isLastLineWrappingEnabled) SetLastLineWrapping;
		protected new function [CallingConvention(.Stdcall)] BOOL(SelfOuter* self) GetLastLineWrapping;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, DWRITE_OPTICAL_ALIGNMENT opticalAlignment) SetOpticalAlignment;
		protected new function [CallingConvention(.Stdcall)] DWRITE_OPTICAL_ALIGNMENT(SelfOuter* self) GetOpticalAlignment;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IDWriteFontFallback* fontFallback) SetFontFallback;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IDWriteFontFallback** fontFallback) GetFontFallback;
	}


	public HRESULT SetVerticalGlyphOrientation(DWRITE_VERTICAL_GLYPH_ORIENTATION glyphOrientation) mut => VT.[Friend]SetVerticalGlyphOrientation(&this, glyphOrientation);

	public DWRITE_VERTICAL_GLYPH_ORIENTATION GetVerticalGlyphOrientation() mut => VT.[Friend]GetVerticalGlyphOrientation(&this);

	public HRESULT SetLastLineWrapping(BOOL isLastLineWrappingEnabled) mut => VT.[Friend]SetLastLineWrapping(&this, isLastLineWrappingEnabled);

	public BOOL GetLastLineWrapping() mut => VT.[Friend]GetLastLineWrapping(&this);

	public HRESULT SetOpticalAlignment(DWRITE_OPTICAL_ALIGNMENT opticalAlignment) mut => VT.[Friend]SetOpticalAlignment(&this, opticalAlignment);

	public DWRITE_OPTICAL_ALIGNMENT GetOpticalAlignment() mut => VT.[Friend]GetOpticalAlignment(&this);

	public HRESULT SetFontFallback(IDWriteFontFallback* fontFallback) mut => VT.[Friend]SetFontFallback(&this, fontFallback);

	public HRESULT GetFontFallback(IDWriteFontFallback** fontFallback) mut => VT.[Friend]GetFontFallback(&this, fontFallback);
}

[CRepr]struct IDWriteTextLayout2 : IDWriteTextLayout1
{
	public new const Guid IID = .(0x1093c18f, 0x8d5e, 0x43f0, 0xb0, 0x64, 0x09, 0x17, 0x31, 0x1b, 0x52, 0x5e);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDWriteTextLayout1.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, DWRITE_TEXT_METRICS1* textMetrics) GetMetrics;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, DWRITE_VERTICAL_GLYPH_ORIENTATION glyphOrientation) SetVerticalGlyphOrientation;
		protected new function [CallingConvention(.Stdcall)] DWRITE_VERTICAL_GLYPH_ORIENTATION(SelfOuter* self) GetVerticalGlyphOrientation;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BOOL isLastLineWrappingEnabled) SetLastLineWrapping;
		protected new function [CallingConvention(.Stdcall)] BOOL(SelfOuter* self) GetLastLineWrapping;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, DWRITE_OPTICAL_ALIGNMENT opticalAlignment) SetOpticalAlignment;
		protected new function [CallingConvention(.Stdcall)] DWRITE_OPTICAL_ALIGNMENT(SelfOuter* self) GetOpticalAlignment;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IDWriteFontFallback* fontFallback) SetFontFallback;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IDWriteFontFallback** fontFallback) GetFontFallback;
	}


	public HRESULT GetMetrics(DWRITE_TEXT_METRICS1* textMetrics) mut => VT.[Friend]GetMetrics(&this, textMetrics);

	public HRESULT SetVerticalGlyphOrientation(DWRITE_VERTICAL_GLYPH_ORIENTATION glyphOrientation) mut => VT.[Friend]SetVerticalGlyphOrientation(&this, glyphOrientation);

	public DWRITE_VERTICAL_GLYPH_ORIENTATION GetVerticalGlyphOrientation() mut => VT.[Friend]GetVerticalGlyphOrientation(&this);

	public HRESULT SetLastLineWrapping(BOOL isLastLineWrappingEnabled) mut => VT.[Friend]SetLastLineWrapping(&this, isLastLineWrappingEnabled);

	public BOOL GetLastLineWrapping() mut => VT.[Friend]GetLastLineWrapping(&this);

	public HRESULT SetOpticalAlignment(DWRITE_OPTICAL_ALIGNMENT opticalAlignment) mut => VT.[Friend]SetOpticalAlignment(&this, opticalAlignment);

	public DWRITE_OPTICAL_ALIGNMENT GetOpticalAlignment() mut => VT.[Friend]GetOpticalAlignment(&this);

	public HRESULT SetFontFallback(IDWriteFontFallback* fontFallback) mut => VT.[Friend]SetFontFallback(&this, fontFallback);

	public HRESULT GetFontFallback(IDWriteFontFallback** fontFallback) mut => VT.[Friend]GetFontFallback(&this, fontFallback);
}

[CRepr]struct IDWriteTextAnalyzer2 : IDWriteTextAnalyzer1
{
	public new const Guid IID = .(0x553a9ff3, 0x5693, 0x4df7, 0xb5, 0x2b, 0x74, 0x80, 0x6f, 0x7f, 0x2e, 0xb9);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDWriteTextAnalyzer1.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, DWRITE_GLYPH_ORIENTATION_ANGLE glyphOrientationAngle, BOOL isSideways, float originX, float originY, DWRITE_MATRIX* transform) GetGlyphOrientationTransform;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IDWriteFontFace* fontFace, DWRITE_SCRIPT_ANALYSIS scriptAnalysis, PWSTR localeName, uint32 maxTagCount, uint32* actualTagCount, DWRITE_FONT_FEATURE_TAG* tags) GetTypographicFeatures;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IDWriteFontFace* fontFace, DWRITE_SCRIPT_ANALYSIS scriptAnalysis, PWSTR localeName, DWRITE_FONT_FEATURE_TAG featureTag, uint32 glyphCount, uint16* glyphIndices, uint8* featureApplies) CheckTypographicFeature;
	}


	public HRESULT GetGlyphOrientationTransform(DWRITE_GLYPH_ORIENTATION_ANGLE glyphOrientationAngle, BOOL isSideways, float originX, float originY, DWRITE_MATRIX* transform) mut => VT.[Friend]GetGlyphOrientationTransform(&this, glyphOrientationAngle, isSideways, originX, originY, transform);

	public HRESULT GetTypographicFeatures(IDWriteFontFace* fontFace, DWRITE_SCRIPT_ANALYSIS scriptAnalysis, PWSTR localeName, uint32 maxTagCount, uint32* actualTagCount, DWRITE_FONT_FEATURE_TAG* tags) mut => VT.[Friend]GetTypographicFeatures(&this, fontFace, scriptAnalysis, localeName, maxTagCount, actualTagCount, tags);

	public HRESULT CheckTypographicFeature(IDWriteFontFace* fontFace, DWRITE_SCRIPT_ANALYSIS scriptAnalysis, PWSTR localeName, DWRITE_FONT_FEATURE_TAG featureTag, uint32 glyphCount, uint16* glyphIndices, uint8* featureApplies) mut => VT.[Friend]CheckTypographicFeature(&this, fontFace, scriptAnalysis, localeName, featureTag, glyphCount, glyphIndices, featureApplies);
}

[CRepr]struct IDWriteFontFallback : IUnknown
{
	public new const Guid IID = .(0xefa008f9, 0xf7a1, 0x48bf, 0xb0, 0x5c, 0xf2, 0x24, 0x71, 0x3c, 0xc0, 0xff);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IUnknown.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IDWriteTextAnalysisSource* analysisSource, uint32 textPosition, uint32 textLength, IDWriteFontCollection* baseFontCollection, PWSTR baseFamilyName, DWRITE_FONT_WEIGHT baseWeight, DWRITE_FONT_STYLE baseStyle, DWRITE_FONT_STRETCH baseStretch, uint32* mappedLength, IDWriteFont** mappedFont, float* scale) MapCharacters;
	}


	public HRESULT MapCharacters(IDWriteTextAnalysisSource* analysisSource, uint32 textPosition, uint32 textLength, IDWriteFontCollection* baseFontCollection, PWSTR baseFamilyName, DWRITE_FONT_WEIGHT baseWeight, DWRITE_FONT_STYLE baseStyle, DWRITE_FONT_STRETCH baseStretch, uint32* mappedLength, IDWriteFont** mappedFont, float* scale) mut => VT.[Friend]MapCharacters(&this, analysisSource, textPosition, textLength, baseFontCollection, baseFamilyName, baseWeight, baseStyle, baseStretch, mappedLength, mappedFont, scale);
}

[CRepr]struct IDWriteFontFallbackBuilder : IUnknown
{
	public new const Guid IID = .(0xfd882d06, 0x8aba, 0x4fb8, 0xb8, 0x49, 0x8b, 0xe8, 0xb7, 0x3e, 0x14, 0xde);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IUnknown.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, DWRITE_UNICODE_RANGE* ranges, uint32 rangesCount, uint16** targetFamilyNames, uint32 targetFamilyNamesCount, IDWriteFontCollection* fontCollection, PWSTR localeName, PWSTR baseFamilyName, float scale) AddMapping;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IDWriteFontFallback* fontFallback) AddMappings;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IDWriteFontFallback** fontFallback) CreateFontFallback;
	}


	public HRESULT AddMapping(DWRITE_UNICODE_RANGE* ranges, uint32 rangesCount, uint16** targetFamilyNames, uint32 targetFamilyNamesCount, IDWriteFontCollection* fontCollection, PWSTR localeName, PWSTR baseFamilyName, float scale) mut => VT.[Friend]AddMapping(&this, ranges, rangesCount, targetFamilyNames, targetFamilyNamesCount, fontCollection, localeName, baseFamilyName, scale);

	public HRESULT AddMappings(IDWriteFontFallback* fontFallback) mut => VT.[Friend]AddMappings(&this, fontFallback);

	public HRESULT CreateFontFallback(IDWriteFontFallback** fontFallback) mut => VT.[Friend]CreateFontFallback(&this, fontFallback);
}

[CRepr]struct IDWriteFont2 : IDWriteFont1
{
	public new const Guid IID = .(0x29748ed6, 0x8c9c, 0x4a6a, 0xbe, 0x0b, 0xd9, 0x12, 0xe8, 0x53, 0x89, 0x44);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDWriteFont1.VTable
	{
		protected new function [CallingConvention(.Stdcall)] BOOL(SelfOuter* self) IsColorFont;
	}


	public BOOL IsColorFont() mut => VT.[Friend]IsColorFont(&this);
}

[CRepr]struct IDWriteFontFace2 : IDWriteFontFace1
{
	public new const Guid IID = .(0xd8b768ff, 0x64bc, 0x4e66, 0x98, 0x2b, 0xec, 0x8e, 0x87, 0xf6, 0x93, 0xf7);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDWriteFontFace1.VTable
	{
		protected new function [CallingConvention(.Stdcall)] BOOL(SelfOuter* self) IsColorFont;
		protected new function [CallingConvention(.Stdcall)] uint32(SelfOuter* self) GetColorPaletteCount;
		protected new function [CallingConvention(.Stdcall)] uint32(SelfOuter* self) GetPaletteEntryCount;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32 colorPaletteIndex, uint32 firstEntryIndex, uint32 entryCount, DWRITE_COLOR_F* paletteEntries) GetPaletteEntries;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, float fontEmSize, float dpiX, float dpiY, DWRITE_MATRIX* transform, BOOL isSideways, DWRITE_OUTLINE_THRESHOLD outlineThreshold, DWRITE_MEASURING_MODE measuringMode, IDWriteRenderingParams* renderingParams, DWRITE_RENDERING_MODE* renderingMode, DWRITE_GRID_FIT_MODE* gridFitMode) GetRecommendedRenderingMode;
	}


	public BOOL IsColorFont() mut => VT.[Friend]IsColorFont(&this);

	public uint32 GetColorPaletteCount() mut => VT.[Friend]GetColorPaletteCount(&this);

	public uint32 GetPaletteEntryCount() mut => VT.[Friend]GetPaletteEntryCount(&this);

	public HRESULT GetPaletteEntries(uint32 colorPaletteIndex, uint32 firstEntryIndex, uint32 entryCount, DWRITE_COLOR_F* paletteEntries) mut => VT.[Friend]GetPaletteEntries(&this, colorPaletteIndex, firstEntryIndex, entryCount, paletteEntries);

	public HRESULT GetRecommendedRenderingMode(float fontEmSize, float dpiX, float dpiY, DWRITE_MATRIX* transform, BOOL isSideways, DWRITE_OUTLINE_THRESHOLD outlineThreshold, DWRITE_MEASURING_MODE measuringMode, IDWriteRenderingParams* renderingParams, DWRITE_RENDERING_MODE* renderingMode, DWRITE_GRID_FIT_MODE* gridFitMode) mut => VT.[Friend]GetRecommendedRenderingMode(&this, fontEmSize, dpiX, dpiY, transform, isSideways, outlineThreshold, measuringMode, renderingParams, renderingMode, gridFitMode);
}

[CRepr]struct IDWriteColorGlyphRunEnumerator : IUnknown
{
	public new const Guid IID = .(0xd31fbe17, 0xf157, 0x41a2, 0x8d, 0x24, 0xcb, 0x77, 0x9e, 0x05, 0x60, 0xe8);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IUnknown.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BOOL* hasRun) MoveNext;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, DWRITE_COLOR_GLYPH_RUN** colorGlyphRun) GetCurrentRun;
	}


	public HRESULT MoveNext(BOOL* hasRun) mut => VT.[Friend]MoveNext(&this, hasRun);

	public HRESULT GetCurrentRun(DWRITE_COLOR_GLYPH_RUN** colorGlyphRun) mut => VT.[Friend]GetCurrentRun(&this, colorGlyphRun);
}

[CRepr]struct IDWriteRenderingParams2 : IDWriteRenderingParams1
{
	public new const Guid IID = .(0xf9d711c3, 0x9777, 0x40ae, 0x87, 0xe8, 0x3e, 0x5a, 0xf9, 0xbf, 0x09, 0x48);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDWriteRenderingParams1.VTable
	{
		protected new function [CallingConvention(.Stdcall)] DWRITE_GRID_FIT_MODE(SelfOuter* self) GetGridFitMode;
	}


	public DWRITE_GRID_FIT_MODE GetGridFitMode() mut => VT.[Friend]GetGridFitMode(&this);
}

[CRepr]struct IDWriteFactory2 : IDWriteFactory1
{
	public new const Guid IID = .(0x0439fc60, 0xca44, 0x4994, 0x8d, 0xee, 0x3a, 0x9a, 0xf7, 0xb7, 0x32, 0xec);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDWriteFactory1.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IDWriteFontFallback** fontFallback) GetSystemFontFallback;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IDWriteFontFallbackBuilder** fontFallbackBuilder) CreateFontFallbackBuilder;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, float baselineOriginX, float baselineOriginY, DWRITE_GLYPH_RUN* glyphRun, DWRITE_GLYPH_RUN_DESCRIPTION* glyphRunDescription, DWRITE_MEASURING_MODE measuringMode, DWRITE_MATRIX* worldToDeviceTransform, uint32 colorPaletteIndex, IDWriteColorGlyphRunEnumerator** colorLayers) TranslateColorGlyphRun;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, float gamma, float enhancedContrast, float grayscaleEnhancedContrast, float clearTypeLevel, DWRITE_PIXEL_GEOMETRY pixelGeometry, DWRITE_RENDERING_MODE renderingMode, DWRITE_GRID_FIT_MODE gridFitMode, IDWriteRenderingParams2** renderingParams) CreateCustomRenderingParams;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, DWRITE_GLYPH_RUN* glyphRun, DWRITE_MATRIX* transform, DWRITE_RENDERING_MODE renderingMode, DWRITE_MEASURING_MODE measuringMode, DWRITE_GRID_FIT_MODE gridFitMode, DWRITE_TEXT_ANTIALIAS_MODE antialiasMode, float baselineOriginX, float baselineOriginY, IDWriteGlyphRunAnalysis** glyphRunAnalysis) CreateGlyphRunAnalysis;
	}


	public HRESULT GetSystemFontFallback(IDWriteFontFallback** fontFallback) mut => VT.[Friend]GetSystemFontFallback(&this, fontFallback);

	public HRESULT CreateFontFallbackBuilder(IDWriteFontFallbackBuilder** fontFallbackBuilder) mut => VT.[Friend]CreateFontFallbackBuilder(&this, fontFallbackBuilder);

	public HRESULT TranslateColorGlyphRun(float baselineOriginX, float baselineOriginY, DWRITE_GLYPH_RUN* glyphRun, DWRITE_GLYPH_RUN_DESCRIPTION* glyphRunDescription, DWRITE_MEASURING_MODE measuringMode, DWRITE_MATRIX* worldToDeviceTransform, uint32 colorPaletteIndex, IDWriteColorGlyphRunEnumerator** colorLayers) mut => VT.[Friend]TranslateColorGlyphRun(&this, baselineOriginX, baselineOriginY, glyphRun, glyphRunDescription, measuringMode, worldToDeviceTransform, colorPaletteIndex, colorLayers);

	public HRESULT CreateCustomRenderingParams(float gamma, float enhancedContrast, float grayscaleEnhancedContrast, float clearTypeLevel, DWRITE_PIXEL_GEOMETRY pixelGeometry, DWRITE_RENDERING_MODE renderingMode, DWRITE_GRID_FIT_MODE gridFitMode, IDWriteRenderingParams2** renderingParams) mut => VT.[Friend]CreateCustomRenderingParams(&this, gamma, enhancedContrast, grayscaleEnhancedContrast, clearTypeLevel, pixelGeometry, renderingMode, gridFitMode, renderingParams);

	public HRESULT CreateGlyphRunAnalysis(DWRITE_GLYPH_RUN* glyphRun, DWRITE_MATRIX* transform, DWRITE_RENDERING_MODE renderingMode, DWRITE_MEASURING_MODE measuringMode, DWRITE_GRID_FIT_MODE gridFitMode, DWRITE_TEXT_ANTIALIAS_MODE antialiasMode, float baselineOriginX, float baselineOriginY, IDWriteGlyphRunAnalysis** glyphRunAnalysis) mut => VT.[Friend]CreateGlyphRunAnalysis(&this, glyphRun, transform, renderingMode, measuringMode, gridFitMode, antialiasMode, baselineOriginX, baselineOriginY, glyphRunAnalysis);
}

[CRepr]struct IDWriteRenderingParams3 : IDWriteRenderingParams2
{
	public new const Guid IID = .(0xb7924baa, 0x391b, 0x412a, 0x8c, 0x5c, 0xe4, 0x4c, 0xc2, 0xd8, 0x67, 0xdc);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDWriteRenderingParams2.VTable
	{
		protected new function [CallingConvention(.Stdcall)] DWRITE_RENDERING_MODE1(SelfOuter* self) GetRenderingMode1;
	}


	public DWRITE_RENDERING_MODE1 GetRenderingMode1() mut => VT.[Friend]GetRenderingMode1(&this);
}

[CRepr]struct IDWriteFactory3 : IDWriteFactory2
{
	public new const Guid IID = .(0x9a1b41c3, 0xd3bb, 0x466a, 0x87, 0xfc, 0xfe, 0x67, 0x55, 0x6a, 0x3b, 0x65);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDWriteFactory2.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, DWRITE_GLYPH_RUN* glyphRun, DWRITE_MATRIX* transform, DWRITE_RENDERING_MODE1 renderingMode, DWRITE_MEASURING_MODE measuringMode, DWRITE_GRID_FIT_MODE gridFitMode, DWRITE_TEXT_ANTIALIAS_MODE antialiasMode, float baselineOriginX, float baselineOriginY, IDWriteGlyphRunAnalysis** glyphRunAnalysis) CreateGlyphRunAnalysis;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, float gamma, float enhancedContrast, float grayscaleEnhancedContrast, float clearTypeLevel, DWRITE_PIXEL_GEOMETRY pixelGeometry, DWRITE_RENDERING_MODE1 renderingMode, DWRITE_GRID_FIT_MODE gridFitMode, IDWriteRenderingParams3** renderingParams) CreateCustomRenderingParams;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IDWriteFontFile* fontFile, uint32 faceIndex, DWRITE_FONT_SIMULATIONS fontSimulations, IDWriteFontFaceReference** fontFaceReference) CreateFontFaceReference;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, PWSTR filePath, FILETIME* lastWriteTime, uint32 faceIndex, DWRITE_FONT_SIMULATIONS fontSimulations, IDWriteFontFaceReference** fontFaceReference) CreateFontFaceReference0;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IDWriteFontSet** fontSet) GetSystemFontSet;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IDWriteFontSetBuilder** fontSetBuilder) CreateFontSetBuilder;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IDWriteFontSet* fontSet, IDWriteFontCollection1** fontCollection) CreateFontCollectionFromFontSet;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BOOL includeDownloadableFonts, IDWriteFontCollection1** fontCollection, BOOL checkForUpdates) GetSystemFontCollection;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IDWriteFontDownloadQueue** fontDownloadQueue) GetFontDownloadQueue;
	}


	public HRESULT CreateGlyphRunAnalysis(DWRITE_GLYPH_RUN* glyphRun, DWRITE_MATRIX* transform, DWRITE_RENDERING_MODE1 renderingMode, DWRITE_MEASURING_MODE measuringMode, DWRITE_GRID_FIT_MODE gridFitMode, DWRITE_TEXT_ANTIALIAS_MODE antialiasMode, float baselineOriginX, float baselineOriginY, IDWriteGlyphRunAnalysis** glyphRunAnalysis) mut => VT.[Friend]CreateGlyphRunAnalysis(&this, glyphRun, transform, renderingMode, measuringMode, gridFitMode, antialiasMode, baselineOriginX, baselineOriginY, glyphRunAnalysis);

	public HRESULT CreateCustomRenderingParams(float gamma, float enhancedContrast, float grayscaleEnhancedContrast, float clearTypeLevel, DWRITE_PIXEL_GEOMETRY pixelGeometry, DWRITE_RENDERING_MODE1 renderingMode, DWRITE_GRID_FIT_MODE gridFitMode, IDWriteRenderingParams3** renderingParams) mut => VT.[Friend]CreateCustomRenderingParams(&this, gamma, enhancedContrast, grayscaleEnhancedContrast, clearTypeLevel, pixelGeometry, renderingMode, gridFitMode, renderingParams);

	public HRESULT CreateFontFaceReference(IDWriteFontFile* fontFile, uint32 faceIndex, DWRITE_FONT_SIMULATIONS fontSimulations, IDWriteFontFaceReference** fontFaceReference) mut => VT.[Friend]CreateFontFaceReference(&this, fontFile, faceIndex, fontSimulations, fontFaceReference);

	public HRESULT CreateFontFaceReference(PWSTR filePath, FILETIME* lastWriteTime, uint32 faceIndex, DWRITE_FONT_SIMULATIONS fontSimulations, IDWriteFontFaceReference** fontFaceReference) mut => VT.[Friend]CreateFontFaceReference0(&this, filePath, lastWriteTime, faceIndex, fontSimulations, fontFaceReference);

	public HRESULT GetSystemFontSet(IDWriteFontSet** fontSet) mut => VT.[Friend]GetSystemFontSet(&this, fontSet);

	public HRESULT CreateFontSetBuilder(IDWriteFontSetBuilder** fontSetBuilder) mut => VT.[Friend]CreateFontSetBuilder(&this, fontSetBuilder);

	public HRESULT CreateFontCollectionFromFontSet(IDWriteFontSet* fontSet, IDWriteFontCollection1** fontCollection) mut => VT.[Friend]CreateFontCollectionFromFontSet(&this, fontSet, fontCollection);

	public HRESULT GetSystemFontCollection(BOOL includeDownloadableFonts, IDWriteFontCollection1** fontCollection, BOOL checkForUpdates) mut => VT.[Friend]GetSystemFontCollection(&this, includeDownloadableFonts, fontCollection, checkForUpdates);

	public HRESULT GetFontDownloadQueue(IDWriteFontDownloadQueue** fontDownloadQueue) mut => VT.[Friend]GetFontDownloadQueue(&this, fontDownloadQueue);
}

[CRepr]struct IDWriteFontSet : IUnknown
{
	public new const Guid IID = .(0x53585141, 0xd9f8, 0x4095, 0x83, 0x21, 0xd7, 0x3c, 0xf6, 0xbd, 0x11, 0x6b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IUnknown.VTable
	{
		protected new function [CallingConvention(.Stdcall)] uint32(SelfOuter* self) GetFontCount;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32 listIndex, IDWriteFontFaceReference** fontFaceReference) GetFontFaceReference;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IDWriteFontFaceReference* fontFaceReference, uint32* listIndex, BOOL* exists) FindFontFaceReference;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IDWriteFontFace* fontFace, uint32* listIndex, BOOL* exists) FindFontFace;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, DWRITE_FONT_PROPERTY_ID propertyID, IDWriteStringList** values) GetPropertyValues;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, DWRITE_FONT_PROPERTY_ID propertyID, PWSTR preferredLocaleNames, IDWriteStringList** values) GetPropertyValues0;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32 listIndex, DWRITE_FONT_PROPERTY_ID propertyId, BOOL* exists, IDWriteLocalizedStrings** values) GetPropertyValues1;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, DWRITE_FONT_PROPERTY* property, uint32* propertyOccurrenceCount) GetPropertyOccurrenceCount;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, PWSTR familyName, DWRITE_FONT_WEIGHT fontWeight, DWRITE_FONT_STRETCH fontStretch, DWRITE_FONT_STYLE fontStyle, IDWriteFontSet** filteredSet) GetMatchingFonts;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, DWRITE_FONT_PROPERTY* properties, uint32 propertyCount, IDWriteFontSet** filteredSet) GetMatchingFonts0;
	}


	public uint32 GetFontCount() mut => VT.[Friend]GetFontCount(&this);

	public HRESULT GetFontFaceReference(uint32 listIndex, IDWriteFontFaceReference** fontFaceReference) mut => VT.[Friend]GetFontFaceReference(&this, listIndex, fontFaceReference);

	public HRESULT FindFontFaceReference(IDWriteFontFaceReference* fontFaceReference, uint32* listIndex, BOOL* exists) mut => VT.[Friend]FindFontFaceReference(&this, fontFaceReference, listIndex, exists);

	public HRESULT FindFontFace(IDWriteFontFace* fontFace, uint32* listIndex, BOOL* exists) mut => VT.[Friend]FindFontFace(&this, fontFace, listIndex, exists);

	public HRESULT GetPropertyValues(DWRITE_FONT_PROPERTY_ID propertyID, IDWriteStringList** values) mut => VT.[Friend]GetPropertyValues(&this, propertyID, values);

	public HRESULT GetPropertyValues(DWRITE_FONT_PROPERTY_ID propertyID, PWSTR preferredLocaleNames, IDWriteStringList** values) mut => VT.[Friend]GetPropertyValues0(&this, propertyID, preferredLocaleNames, values);

	public HRESULT GetPropertyValues(uint32 listIndex, DWRITE_FONT_PROPERTY_ID propertyId, BOOL* exists, IDWriteLocalizedStrings** values) mut => VT.[Friend]GetPropertyValues1(&this, listIndex, propertyId, exists, values);

	public HRESULT GetPropertyOccurrenceCount(DWRITE_FONT_PROPERTY* property, uint32* propertyOccurrenceCount) mut => VT.[Friend]GetPropertyOccurrenceCount(&this, property, propertyOccurrenceCount);

	public HRESULT GetMatchingFonts(PWSTR familyName, DWRITE_FONT_WEIGHT fontWeight, DWRITE_FONT_STRETCH fontStretch, DWRITE_FONT_STYLE fontStyle, IDWriteFontSet** filteredSet) mut => VT.[Friend]GetMatchingFonts(&this, familyName, fontWeight, fontStretch, fontStyle, filteredSet);

	public HRESULT GetMatchingFonts(DWRITE_FONT_PROPERTY* properties, uint32 propertyCount, IDWriteFontSet** filteredSet) mut => VT.[Friend]GetMatchingFonts0(&this, properties, propertyCount, filteredSet);
}

[CRepr]struct IDWriteFontSetBuilder : IUnknown
{
	public new const Guid IID = .(0x2f642afe, 0x9c68, 0x4f40, 0xb8, 0xbe, 0x45, 0x74, 0x01, 0xaf, 0xcb, 0x3d);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IUnknown.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IDWriteFontFaceReference* fontFaceReference, DWRITE_FONT_PROPERTY* properties, uint32 propertyCount) AddFontFaceReference;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IDWriteFontFaceReference* fontFaceReference) AddFontFaceReference0;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IDWriteFontSet* fontSet) AddFontSet;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IDWriteFontSet** fontSet) CreateFontSet;
	}


	public HRESULT AddFontFaceReference(IDWriteFontFaceReference* fontFaceReference, DWRITE_FONT_PROPERTY* properties, uint32 propertyCount) mut => VT.[Friend]AddFontFaceReference(&this, fontFaceReference, properties, propertyCount);

	public HRESULT AddFontFaceReference(IDWriteFontFaceReference* fontFaceReference) mut => VT.[Friend]AddFontFaceReference0(&this, fontFaceReference);

	public HRESULT AddFontSet(IDWriteFontSet* fontSet) mut => VT.[Friend]AddFontSet(&this, fontSet);

	public HRESULT CreateFontSet(IDWriteFontSet** fontSet) mut => VT.[Friend]CreateFontSet(&this, fontSet);
}

[CRepr]struct IDWriteFontCollection1 : IDWriteFontCollection
{
	public new const Guid IID = .(0x53585141, 0xd9f8, 0x4095, 0x83, 0x21, 0xd7, 0x3c, 0xf6, 0xbd, 0x11, 0x6c);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDWriteFontCollection.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IDWriteFontSet** fontSet) GetFontSet;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32 index, IDWriteFontFamily1** fontFamily) GetFontFamily;
	}


	public HRESULT GetFontSet(IDWriteFontSet** fontSet) mut => VT.[Friend]GetFontSet(&this, fontSet);

	public HRESULT GetFontFamily(uint32 index, IDWriteFontFamily1** fontFamily) mut => VT.[Friend]GetFontFamily(&this, index, fontFamily);
}

[CRepr]struct IDWriteFontFamily1 : IDWriteFontFamily
{
	public new const Guid IID = .(0xda20d8ef, 0x812a, 0x4c43, 0x98, 0x02, 0x62, 0xec, 0x4a, 0xbd, 0x7a, 0xdf);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDWriteFontFamily.VTable
	{
		protected new function [CallingConvention(.Stdcall)] DWRITE_LOCALITY(SelfOuter* self, uint32 listIndex) GetFontLocality;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32 listIndex, IDWriteFont3** font) GetFont;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32 listIndex, IDWriteFontFaceReference** fontFaceReference) GetFontFaceReference;
	}


	public DWRITE_LOCALITY GetFontLocality(uint32 listIndex) mut => VT.[Friend]GetFontLocality(&this, listIndex);

	public HRESULT GetFont(uint32 listIndex, IDWriteFont3** font) mut => VT.[Friend]GetFont(&this, listIndex, font);

	public HRESULT GetFontFaceReference(uint32 listIndex, IDWriteFontFaceReference** fontFaceReference) mut => VT.[Friend]GetFontFaceReference(&this, listIndex, fontFaceReference);
}

[CRepr]struct IDWriteFontList1 : IDWriteFontList
{
	public new const Guid IID = .(0xda20d8ef, 0x812a, 0x4c43, 0x98, 0x02, 0x62, 0xec, 0x4a, 0xbd, 0x7a, 0xde);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDWriteFontList.VTable
	{
		protected new function [CallingConvention(.Stdcall)] DWRITE_LOCALITY(SelfOuter* self, uint32 listIndex) GetFontLocality;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32 listIndex, IDWriteFont3** font) GetFont;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32 listIndex, IDWriteFontFaceReference** fontFaceReference) GetFontFaceReference;
	}


	public DWRITE_LOCALITY GetFontLocality(uint32 listIndex) mut => VT.[Friend]GetFontLocality(&this, listIndex);

	public HRESULT GetFont(uint32 listIndex, IDWriteFont3** font) mut => VT.[Friend]GetFont(&this, listIndex, font);

	public HRESULT GetFontFaceReference(uint32 listIndex, IDWriteFontFaceReference** fontFaceReference) mut => VT.[Friend]GetFontFaceReference(&this, listIndex, fontFaceReference);
}

[CRepr]struct IDWriteFontFaceReference : IUnknown
{
	public new const Guid IID = .(0x5e7fa7ca, 0xdde3, 0x424c, 0x89, 0xf0, 0x9f, 0xcd, 0x6f, 0xed, 0x58, 0xcd);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IUnknown.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IDWriteFontFace3** fontFace) CreateFontFace;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, DWRITE_FONT_SIMULATIONS fontFaceSimulationFlags, IDWriteFontFace3** fontFace) CreateFontFaceWithSimulations;
		protected new function [CallingConvention(.Stdcall)] BOOL(SelfOuter* self, IDWriteFontFaceReference* fontFaceReference) COM_Equals;
		protected new function [CallingConvention(.Stdcall)] uint32(SelfOuter* self) GetFontFaceIndex;
		protected new function [CallingConvention(.Stdcall)] DWRITE_FONT_SIMULATIONS(SelfOuter* self) GetSimulations;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IDWriteFontFile** fontFile) GetFontFile;
		protected new function [CallingConvention(.Stdcall)] uint64(SelfOuter* self) GetLocalFileSize;
		protected new function [CallingConvention(.Stdcall)] uint64(SelfOuter* self) GetFileSize;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, FILETIME* lastWriteTime) GetFileTime;
		protected new function [CallingConvention(.Stdcall)] DWRITE_LOCALITY(SelfOuter* self) GetLocality;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self) EnqueueFontDownloadRequest;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, char16* characters, uint32 characterCount) EnqueueCharacterDownloadRequest;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint16* glyphIndices, uint32 glyphCount) EnqueueGlyphDownloadRequest;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint64 fileOffset, uint64 fragmentSize) EnqueueFileFragmentDownloadRequest;
	}


	public HRESULT CreateFontFace(IDWriteFontFace3** fontFace) mut => VT.[Friend]CreateFontFace(&this, fontFace);

	public HRESULT CreateFontFaceWithSimulations(DWRITE_FONT_SIMULATIONS fontFaceSimulationFlags, IDWriteFontFace3** fontFace) mut => VT.[Friend]CreateFontFaceWithSimulations(&this, fontFaceSimulationFlags, fontFace);

	public BOOL Equals(IDWriteFontFaceReference* fontFaceReference) mut => VT.[Friend]COM_Equals(&this, fontFaceReference);

	public uint32 GetFontFaceIndex() mut => VT.[Friend]GetFontFaceIndex(&this);

	public DWRITE_FONT_SIMULATIONS GetSimulations() mut => VT.[Friend]GetSimulations(&this);

	public HRESULT GetFontFile(IDWriteFontFile** fontFile) mut => VT.[Friend]GetFontFile(&this, fontFile);

	public uint64 GetLocalFileSize() mut => VT.[Friend]GetLocalFileSize(&this);

	public uint64 GetFileSize() mut => VT.[Friend]GetFileSize(&this);

	public HRESULT GetFileTime(FILETIME* lastWriteTime) mut => VT.[Friend]GetFileTime(&this, lastWriteTime);

	public DWRITE_LOCALITY GetLocality() mut => VT.[Friend]GetLocality(&this);

	public HRESULT EnqueueFontDownloadRequest() mut => VT.[Friend]EnqueueFontDownloadRequest(&this);

	public HRESULT EnqueueCharacterDownloadRequest(char16* characters, uint32 characterCount) mut => VT.[Friend]EnqueueCharacterDownloadRequest(&this, characters, characterCount);

	public HRESULT EnqueueGlyphDownloadRequest(uint16* glyphIndices, uint32 glyphCount) mut => VT.[Friend]EnqueueGlyphDownloadRequest(&this, glyphIndices, glyphCount);

	public HRESULT EnqueueFileFragmentDownloadRequest(uint64 fileOffset, uint64 fragmentSize) mut => VT.[Friend]EnqueueFileFragmentDownloadRequest(&this, fileOffset, fragmentSize);
}

[CRepr]struct IDWriteFont3 : IDWriteFont2
{
	public new const Guid IID = .(0x29748ed6, 0x8c9c, 0x4a6a, 0xbe, 0x0b, 0xd9, 0x12, 0xe8, 0x53, 0x89, 0x44);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDWriteFont2.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IDWriteFontFace3** fontFace) CreateFontFace;
		protected new function [CallingConvention(.Stdcall)] BOOL(SelfOuter* self, IDWriteFont* font) COM_Equals;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IDWriteFontFaceReference** fontFaceReference) GetFontFaceReference;
		protected new function [CallingConvention(.Stdcall)] BOOL(SelfOuter* self, uint32 unicodeValue) HasCharacter;
		protected new function [CallingConvention(.Stdcall)] DWRITE_LOCALITY(SelfOuter* self) GetLocality;
	}


	public HRESULT CreateFontFace(IDWriteFontFace3** fontFace) mut => VT.[Friend]CreateFontFace(&this, fontFace);

	public BOOL Equals(IDWriteFont* font) mut => VT.[Friend]COM_Equals(&this, font);

	public HRESULT GetFontFaceReference(IDWriteFontFaceReference** fontFaceReference) mut => VT.[Friend]GetFontFaceReference(&this, fontFaceReference);

	public BOOL HasCharacter(uint32 unicodeValue) mut => VT.[Friend]HasCharacter(&this, unicodeValue);

	public DWRITE_LOCALITY GetLocality() mut => VT.[Friend]GetLocality(&this);
}

[CRepr]struct IDWriteFontFace3 : IDWriteFontFace2
{
	public new const Guid IID = .(0xd37d7598, 0x09be, 0x4222, 0xa2, 0x36, 0x20, 0x81, 0x34, 0x1c, 0xc1, 0xf2);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDWriteFontFace2.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IDWriteFontFaceReference** fontFaceReference) GetFontFaceReference;
		protected new function [CallingConvention(.Stdcall)] void(SelfOuter* self, DWRITE_PANOSE* panose) GetPanose;
		protected new function [CallingConvention(.Stdcall)] DWRITE_FONT_WEIGHT(SelfOuter* self) GetWeight;
		protected new function [CallingConvention(.Stdcall)] DWRITE_FONT_STRETCH(SelfOuter* self) GetStretch;
		protected new function [CallingConvention(.Stdcall)] DWRITE_FONT_STYLE(SelfOuter* self) GetStyle;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IDWriteLocalizedStrings** names) GetFamilyNames;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IDWriteLocalizedStrings** names) GetFaceNames;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, DWRITE_INFORMATIONAL_STRING_ID informationalStringID, IDWriteLocalizedStrings** informationalStrings, BOOL* exists) GetInformationalStrings;
		protected new function [CallingConvention(.Stdcall)] BOOL(SelfOuter* self, uint32 unicodeValue) HasCharacter;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, float fontEmSize, float dpiX, float dpiY, DWRITE_MATRIX* transform, BOOL isSideways, DWRITE_OUTLINE_THRESHOLD outlineThreshold, DWRITE_MEASURING_MODE measuringMode, IDWriteRenderingParams* renderingParams, DWRITE_RENDERING_MODE1* renderingMode, DWRITE_GRID_FIT_MODE* gridFitMode) GetRecommendedRenderingMode;
		protected new function [CallingConvention(.Stdcall)] BOOL(SelfOuter* self, uint32 unicodeValue) IsCharacterLocal;
		protected new function [CallingConvention(.Stdcall)] BOOL(SelfOuter* self, uint16 glyphId) IsGlyphLocal;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, char16* characters, uint32 characterCount, BOOL enqueueIfNotLocal, BOOL* isLocal) AreCharactersLocal;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint16* glyphIndices, uint32 glyphCount, BOOL enqueueIfNotLocal, BOOL* isLocal) AreGlyphsLocal;
	}


	public HRESULT GetFontFaceReference(IDWriteFontFaceReference** fontFaceReference) mut => VT.[Friend]GetFontFaceReference(&this, fontFaceReference);

	public void GetPanose(DWRITE_PANOSE* panose) mut => VT.[Friend]GetPanose(&this, panose);

	public DWRITE_FONT_WEIGHT GetWeight() mut => VT.[Friend]GetWeight(&this);

	public DWRITE_FONT_STRETCH GetStretch() mut => VT.[Friend]GetStretch(&this);

	public DWRITE_FONT_STYLE GetStyle() mut => VT.[Friend]GetStyle(&this);

	public HRESULT GetFamilyNames(IDWriteLocalizedStrings** names) mut => VT.[Friend]GetFamilyNames(&this, names);

	public HRESULT GetFaceNames(IDWriteLocalizedStrings** names) mut => VT.[Friend]GetFaceNames(&this, names);

	public HRESULT GetInformationalStrings(DWRITE_INFORMATIONAL_STRING_ID informationalStringID, IDWriteLocalizedStrings** informationalStrings, BOOL* exists) mut => VT.[Friend]GetInformationalStrings(&this, informationalStringID, informationalStrings, exists);

	public BOOL HasCharacter(uint32 unicodeValue) mut => VT.[Friend]HasCharacter(&this, unicodeValue);

	public HRESULT GetRecommendedRenderingMode(float fontEmSize, float dpiX, float dpiY, DWRITE_MATRIX* transform, BOOL isSideways, DWRITE_OUTLINE_THRESHOLD outlineThreshold, DWRITE_MEASURING_MODE measuringMode, IDWriteRenderingParams* renderingParams, DWRITE_RENDERING_MODE1* renderingMode, DWRITE_GRID_FIT_MODE* gridFitMode) mut => VT.[Friend]GetRecommendedRenderingMode(&this, fontEmSize, dpiX, dpiY, transform, isSideways, outlineThreshold, measuringMode, renderingParams, renderingMode, gridFitMode);

	public BOOL IsCharacterLocal(uint32 unicodeValue) mut => VT.[Friend]IsCharacterLocal(&this, unicodeValue);

	public BOOL IsGlyphLocal(uint16 glyphId) mut => VT.[Friend]IsGlyphLocal(&this, glyphId);

	public HRESULT AreCharactersLocal(char16* characters, uint32 characterCount, BOOL enqueueIfNotLocal, BOOL* isLocal) mut => VT.[Friend]AreCharactersLocal(&this, characters, characterCount, enqueueIfNotLocal, isLocal);

	public HRESULT AreGlyphsLocal(uint16* glyphIndices, uint32 glyphCount, BOOL enqueueIfNotLocal, BOOL* isLocal) mut => VT.[Friend]AreGlyphsLocal(&this, glyphIndices, glyphCount, enqueueIfNotLocal, isLocal);
}

[CRepr]struct IDWriteStringList : IUnknown
{
	public new const Guid IID = .(0xcfee3140, 0x1157, 0x47ca, 0x8b, 0x85, 0x31, 0xbf, 0xcf, 0x3f, 0x2d, 0x0e);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IUnknown.VTable
	{
		protected new function [CallingConvention(.Stdcall)] uint32(SelfOuter* self) GetCount;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32 listIndex, uint32* length) GetLocaleNameLength;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32 listIndex, char16* localeName, uint32 size) GetLocaleName;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32 listIndex, uint32* length) GetStringLength;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32 listIndex, char16* stringBuffer, uint32 stringBufferSize) GetString;
	}


	public uint32 GetCount() mut => VT.[Friend]GetCount(&this);

	public HRESULT GetLocaleNameLength(uint32 listIndex, uint32* length) mut => VT.[Friend]GetLocaleNameLength(&this, listIndex, length);

	public HRESULT GetLocaleName(uint32 listIndex, char16* localeName, uint32 size) mut => VT.[Friend]GetLocaleName(&this, listIndex, localeName, size);

	public HRESULT GetStringLength(uint32 listIndex, uint32* length) mut => VT.[Friend]GetStringLength(&this, listIndex, length);

	public HRESULT GetString(uint32 listIndex, char16* stringBuffer, uint32 stringBufferSize) mut => VT.[Friend]GetString(&this, listIndex, stringBuffer, stringBufferSize);
}

[CRepr]struct IDWriteFontDownloadListener : IUnknown
{
	public new const Guid IID = .(0xb06fe5b9, 0x43ec, 0x4393, 0x88, 0x1b, 0xdb, 0xe4, 0xdc, 0x72, 0xfd, 0xa7);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IUnknown.VTable
	{
		protected new function [CallingConvention(.Stdcall)] void(SelfOuter* self, IDWriteFontDownloadQueue* downloadQueue, IUnknown* context, HRESULT downloadResult) DownloadCompleted;
	}


	public void DownloadCompleted(IDWriteFontDownloadQueue* downloadQueue, IUnknown* context, HRESULT downloadResult) mut => VT.[Friend]DownloadCompleted(&this, downloadQueue, context, downloadResult);
}

[CRepr]struct IDWriteFontDownloadQueue : IUnknown
{
	public new const Guid IID = .(0xb71e6052, 0x5aea, 0x4fa3, 0x83, 0x2e, 0xf6, 0x0d, 0x43, 0x1f, 0x7e, 0x91);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IUnknown.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IDWriteFontDownloadListener* listener, uint32* token) AddListener;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32 token) RemoveListener;
		protected new function [CallingConvention(.Stdcall)] BOOL(SelfOuter* self) IsEmpty;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IUnknown* context) BeginDownload;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self) CancelDownload;
		protected new function [CallingConvention(.Stdcall)] uint64(SelfOuter* self) GetGenerationCount;
	}


	public HRESULT AddListener(IDWriteFontDownloadListener* listener, uint32* token) mut => VT.[Friend]AddListener(&this, listener, token);

	public HRESULT RemoveListener(uint32 token) mut => VT.[Friend]RemoveListener(&this, token);

	public BOOL IsEmpty() mut => VT.[Friend]IsEmpty(&this);

	public HRESULT BeginDownload(IUnknown* context) mut => VT.[Friend]BeginDownload(&this, context);

	public HRESULT CancelDownload() mut => VT.[Friend]CancelDownload(&this);

	public uint64 GetGenerationCount() mut => VT.[Friend]GetGenerationCount(&this);
}

[CRepr]struct IDWriteGdiInterop1 : IDWriteGdiInterop
{
	public new const Guid IID = .(0x4556be70, 0x3abd, 0x4f70, 0x90, 0xbe, 0x42, 0x17, 0x80, 0xa6, 0xf5, 0x15);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDWriteGdiInterop.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, LOGFONTW* logFont, IDWriteFontCollection* fontCollection, IDWriteFont** font) CreateFontFromLOGFONT;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IDWriteFontFace* fontFace, FONTSIGNATURE* fontSignature) GetFontSignature;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IDWriteFont* font, FONTSIGNATURE* fontSignature) GetFontSignature0;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, LOGFONTA* logFont, IDWriteFontSet* fontSet, IDWriteFontSet** filteredSet) GetMatchingFontsByLOGFONT;
	}


	public HRESULT CreateFontFromLOGFONT(LOGFONTW* logFont, IDWriteFontCollection* fontCollection, IDWriteFont** font) mut => VT.[Friend]CreateFontFromLOGFONT(&this, logFont, fontCollection, font);

	public HRESULT GetFontSignature(IDWriteFontFace* fontFace, FONTSIGNATURE* fontSignature) mut => VT.[Friend]GetFontSignature(&this, fontFace, fontSignature);

	public HRESULT GetFontSignature(IDWriteFont* font, FONTSIGNATURE* fontSignature) mut => VT.[Friend]GetFontSignature0(&this, font, fontSignature);

	public HRESULT GetMatchingFontsByLOGFONT(LOGFONTA* logFont, IDWriteFontSet* fontSet, IDWriteFontSet** filteredSet) mut => VT.[Friend]GetMatchingFontsByLOGFONT(&this, logFont, fontSet, filteredSet);
}

[CRepr]struct IDWriteTextFormat2 : IDWriteTextFormat1
{
	public new const Guid IID = .(0xf67e0edd, 0x9e3d, 0x4ecc, 0x8c, 0x32, 0x41, 0x83, 0x25, 0x3d, 0xfe, 0x70);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDWriteTextFormat1.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, DWRITE_LINE_SPACING* lineSpacingOptions) SetLineSpacing;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, DWRITE_LINE_SPACING* lineSpacingOptions) GetLineSpacing;
	}


	public HRESULT SetLineSpacing(DWRITE_LINE_SPACING* lineSpacingOptions) mut => VT.[Friend]SetLineSpacing(&this, lineSpacingOptions);

	public HRESULT GetLineSpacing(DWRITE_LINE_SPACING* lineSpacingOptions) mut => VT.[Friend]GetLineSpacing(&this, lineSpacingOptions);
}

[CRepr]struct IDWriteTextLayout3 : IDWriteTextLayout2
{
	public new const Guid IID = .(0x07ddcd52, 0x020e, 0x4de8, 0xac, 0x33, 0x6c, 0x95, 0x3d, 0x83, 0xf9, 0x2d);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDWriteTextLayout2.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self) InvalidateLayout;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, DWRITE_LINE_SPACING* lineSpacingOptions) SetLineSpacing;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, DWRITE_LINE_SPACING* lineSpacingOptions) GetLineSpacing;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, DWRITE_LINE_METRICS1* lineMetrics, uint32 maxLineCount, uint32* actualLineCount) GetLineMetrics;
	}


	public HRESULT InvalidateLayout() mut => VT.[Friend]InvalidateLayout(&this);

	public HRESULT SetLineSpacing(DWRITE_LINE_SPACING* lineSpacingOptions) mut => VT.[Friend]SetLineSpacing(&this, lineSpacingOptions);

	public HRESULT GetLineSpacing(DWRITE_LINE_SPACING* lineSpacingOptions) mut => VT.[Friend]GetLineSpacing(&this, lineSpacingOptions);

	public HRESULT GetLineMetrics(DWRITE_LINE_METRICS1* lineMetrics, uint32 maxLineCount, uint32* actualLineCount) mut => VT.[Friend]GetLineMetrics(&this, lineMetrics, maxLineCount, actualLineCount);
}

[CRepr]struct IDWriteColorGlyphRunEnumerator1 : IDWriteColorGlyphRunEnumerator
{
	public new const Guid IID = .(0x7c5f86da, 0xc7a1, 0x4f05, 0xb8, 0xe1, 0x55, 0xa1, 0x79, 0xfe, 0x5a, 0x35);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDWriteColorGlyphRunEnumerator.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, DWRITE_COLOR_GLYPH_RUN1** colorGlyphRun) GetCurrentRun;
	}


	public HRESULT GetCurrentRun(DWRITE_COLOR_GLYPH_RUN1** colorGlyphRun) mut => VT.[Friend]GetCurrentRun(&this, colorGlyphRun);
}

[CRepr]struct IDWriteFontFace4 : IDWriteFontFace3
{
	public new const Guid IID = .(0x27f2a904, 0x4eb8, 0x441d, 0x96, 0x78, 0x05, 0x63, 0xf5, 0x3e, 0x3e, 0x2f);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDWriteFontFace3.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint16 glyphId, uint32 pixelsPerEmFirst, uint32 pixelsPerEmLast, DWRITE_GLYPH_IMAGE_FORMATS* glyphImageFormats) GetGlyphImageFormats;
		protected new function [CallingConvention(.Stdcall)] DWRITE_GLYPH_IMAGE_FORMATS(SelfOuter* self) GetGlyphImageFormats0;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint16 glyphId, uint32 pixelsPerEm, DWRITE_GLYPH_IMAGE_FORMATS glyphImageFormat, DWRITE_GLYPH_IMAGE_DATA* glyphData, void** glyphDataContext) GetGlyphImageData;
		protected new function [CallingConvention(.Stdcall)] void(SelfOuter* self, void* glyphDataContext) ReleaseGlyphImageData;
	}


	public HRESULT GetGlyphImageFormats(uint16 glyphId, uint32 pixelsPerEmFirst, uint32 pixelsPerEmLast, DWRITE_GLYPH_IMAGE_FORMATS* glyphImageFormats) mut => VT.[Friend]GetGlyphImageFormats(&this, glyphId, pixelsPerEmFirst, pixelsPerEmLast, glyphImageFormats);

	public DWRITE_GLYPH_IMAGE_FORMATS GetGlyphImageFormats() mut => VT.[Friend]GetGlyphImageFormats0(&this);

	public HRESULT GetGlyphImageData(uint16 glyphId, uint32 pixelsPerEm, DWRITE_GLYPH_IMAGE_FORMATS glyphImageFormat, DWRITE_GLYPH_IMAGE_DATA* glyphData, void** glyphDataContext) mut => VT.[Friend]GetGlyphImageData(&this, glyphId, pixelsPerEm, glyphImageFormat, glyphData, glyphDataContext);

	public void ReleaseGlyphImageData(void* glyphDataContext) mut => VT.[Friend]ReleaseGlyphImageData(&this, glyphDataContext);
}

[CRepr]struct IDWriteFactory4 : IDWriteFactory3
{
	public new const Guid IID = .(0x4b0b5bd3, 0x0797, 0x4549, 0x8a, 0xc5, 0xfe, 0x91, 0x5c, 0xc5, 0x38, 0x56);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDWriteFactory3.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, D2D_POINT_2F baselineOrigin, DWRITE_GLYPH_RUN* glyphRun, DWRITE_GLYPH_RUN_DESCRIPTION* glyphRunDescription, DWRITE_GLYPH_IMAGE_FORMATS desiredGlyphImageFormats, DWRITE_MEASURING_MODE measuringMode, DWRITE_MATRIX* worldAndDpiTransform, uint32 colorPaletteIndex, IDWriteColorGlyphRunEnumerator1** colorLayers) TranslateColorGlyphRun;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, DWRITE_GLYPH_RUN* glyphRun, D2D_POINT_2F baselineOrigin, D2D_POINT_2F* glyphOrigins) ComputeGlyphOrigins;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, DWRITE_GLYPH_RUN* glyphRun, DWRITE_MEASURING_MODE measuringMode, D2D_POINT_2F baselineOrigin, DWRITE_MATRIX* worldAndDpiTransform, D2D_POINT_2F* glyphOrigins) ComputeGlyphOrigins0;
	}


	public HRESULT TranslateColorGlyphRun(D2D_POINT_2F baselineOrigin, DWRITE_GLYPH_RUN* glyphRun, DWRITE_GLYPH_RUN_DESCRIPTION* glyphRunDescription, DWRITE_GLYPH_IMAGE_FORMATS desiredGlyphImageFormats, DWRITE_MEASURING_MODE measuringMode, DWRITE_MATRIX* worldAndDpiTransform, uint32 colorPaletteIndex, IDWriteColorGlyphRunEnumerator1** colorLayers) mut => VT.[Friend]TranslateColorGlyphRun(&this, baselineOrigin, glyphRun, glyphRunDescription, desiredGlyphImageFormats, measuringMode, worldAndDpiTransform, colorPaletteIndex, colorLayers);

	public HRESULT ComputeGlyphOrigins(DWRITE_GLYPH_RUN* glyphRun, D2D_POINT_2F baselineOrigin, D2D_POINT_2F* glyphOrigins) mut => VT.[Friend]ComputeGlyphOrigins(&this, glyphRun, baselineOrigin, glyphOrigins);

	public HRESULT ComputeGlyphOrigins(DWRITE_GLYPH_RUN* glyphRun, DWRITE_MEASURING_MODE measuringMode, D2D_POINT_2F baselineOrigin, DWRITE_MATRIX* worldAndDpiTransform, D2D_POINT_2F* glyphOrigins) mut => VT.[Friend]ComputeGlyphOrigins0(&this, glyphRun, measuringMode, baselineOrigin, worldAndDpiTransform, glyphOrigins);
}

[CRepr]struct IDWriteFontSetBuilder1 : IDWriteFontSetBuilder
{
	public new const Guid IID = .(0x3ff7715f, 0x3cdc, 0x4dc6, 0x9b, 0x72, 0xec, 0x56, 0x21, 0xdc, 0xca, 0xfd);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDWriteFontSetBuilder.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IDWriteFontFile* fontFile) AddFontFile;
	}


	public HRESULT AddFontFile(IDWriteFontFile* fontFile) mut => VT.[Friend]AddFontFile(&this, fontFile);
}

[CRepr]struct IDWriteAsyncResult : IUnknown
{
	public new const Guid IID = .(0xce25f8fd, 0x863b, 0x4d13, 0x96, 0x51, 0xc1, 0xf8, 0x8d, 0xc7, 0x3f, 0xe2);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IUnknown.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HANDLE(SelfOuter* self) GetWaitHandle;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self) GetResult;
	}


	public HANDLE GetWaitHandle() mut => VT.[Friend]GetWaitHandle(&this);

	public HRESULT GetResult() mut => VT.[Friend]GetResult(&this);
}

[CRepr]struct IDWriteRemoteFontFileStream : IDWriteFontFileStream
{
	public new const Guid IID = .(0x4db3757a, 0x2c72, 0x4ed9, 0xb2, 0xb6, 0x1a, 0xba, 0xbe, 0x1a, 0xff, 0x9c);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDWriteFontFileStream.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint64* localFileSize) GetLocalFileSize;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint64 fileOffset, uint64 fragmentSize, BOOL* isLocal, uint64* partialSize) GetFileFragmentLocality;
		protected new function [CallingConvention(.Stdcall)] DWRITE_LOCALITY(SelfOuter* self) GetLocality;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, in Guid downloadOperationID, DWRITE_FILE_FRAGMENT* fileFragments, uint32 fragmentCount, IDWriteAsyncResult** asyncResult) BeginDownload;
	}


	public HRESULT GetLocalFileSize(uint64* localFileSize) mut => VT.[Friend]GetLocalFileSize(&this, localFileSize);

	public HRESULT GetFileFragmentLocality(uint64 fileOffset, uint64 fragmentSize, BOOL* isLocal, uint64* partialSize) mut => VT.[Friend]GetFileFragmentLocality(&this, fileOffset, fragmentSize, isLocal, partialSize);

	public DWRITE_LOCALITY GetLocality() mut => VT.[Friend]GetLocality(&this);

	public HRESULT BeginDownload(in Guid downloadOperationID, DWRITE_FILE_FRAGMENT* fileFragments, uint32 fragmentCount, IDWriteAsyncResult** asyncResult) mut => VT.[Friend]BeginDownload(&this, downloadOperationID, fileFragments, fragmentCount, asyncResult);
}

[CRepr]struct IDWriteRemoteFontFileLoader : IDWriteFontFileLoader
{
	public new const Guid IID = .(0x68648c83, 0x6ede, 0x46c0, 0xab, 0x46, 0x20, 0x08, 0x3a, 0x88, 0x7f, 0xde);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDWriteFontFileLoader.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, void* fontFileReferenceKey, uint32 fontFileReferenceKeySize, IDWriteRemoteFontFileStream** fontFileStream) CreateRemoteStreamFromKey;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, void* fontFileReferenceKey, uint32 fontFileReferenceKeySize, DWRITE_LOCALITY* locality) GetLocalityFromKey;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IDWriteFactory* factory, PWSTR baseUrl, PWSTR fontFileUrl, IDWriteFontFile** fontFile) CreateFontFileReferenceFromUrl;
	}


	public HRESULT CreateRemoteStreamFromKey(void* fontFileReferenceKey, uint32 fontFileReferenceKeySize, IDWriteRemoteFontFileStream** fontFileStream) mut => VT.[Friend]CreateRemoteStreamFromKey(&this, fontFileReferenceKey, fontFileReferenceKeySize, fontFileStream);

	public HRESULT GetLocalityFromKey(void* fontFileReferenceKey, uint32 fontFileReferenceKeySize, DWRITE_LOCALITY* locality) mut => VT.[Friend]GetLocalityFromKey(&this, fontFileReferenceKey, fontFileReferenceKeySize, locality);

	public HRESULT CreateFontFileReferenceFromUrl(IDWriteFactory* factory, PWSTR baseUrl, PWSTR fontFileUrl, IDWriteFontFile** fontFile) mut => VT.[Friend]CreateFontFileReferenceFromUrl(&this, factory, baseUrl, fontFileUrl, fontFile);
}

[CRepr]struct IDWriteInMemoryFontFileLoader : IDWriteFontFileLoader
{
	public new const Guid IID = .(0xdc102f47, 0xa12d, 0x4b1c, 0x82, 0x2d, 0x9e, 0x11, 0x7e, 0x33, 0x04, 0x3f);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDWriteFontFileLoader.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IDWriteFactory* factory, void* fontData, uint32 fontDataSize, IUnknown* ownerObject, IDWriteFontFile** fontFile) CreateInMemoryFontFileReference;
		protected new function [CallingConvention(.Stdcall)] uint32(SelfOuter* self) GetFileCount;
	}


	public HRESULT CreateInMemoryFontFileReference(IDWriteFactory* factory, void* fontData, uint32 fontDataSize, IUnknown* ownerObject, IDWriteFontFile** fontFile) mut => VT.[Friend]CreateInMemoryFontFileReference(&this, factory, fontData, fontDataSize, ownerObject, fontFile);

	public uint32 GetFileCount() mut => VT.[Friend]GetFileCount(&this);
}

[CRepr]struct IDWriteFactory5 : IDWriteFactory4
{
	public new const Guid IID = .(0x958db99a, 0xbe2a, 0x4f09, 0xaf, 0x7d, 0x65, 0x18, 0x98, 0x03, 0xd1, 0xd3);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDWriteFactory4.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IDWriteFontSetBuilder1** fontSetBuilder) CreateFontSetBuilder;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IDWriteInMemoryFontFileLoader** newLoader) CreateInMemoryFontFileLoader;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, PWSTR referrerUrl, PWSTR extraHeaders, IDWriteRemoteFontFileLoader** newLoader) CreateHttpFontFileLoader;
		protected new function [CallingConvention(.Stdcall)] DWRITE_CONTAINER_TYPE(SelfOuter* self, void* fileData, uint32 fileDataSize) AnalyzeContainerType;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, DWRITE_CONTAINER_TYPE containerType, void* fileData, uint32 fileDataSize, IDWriteFontFileStream** unpackedFontStream) UnpackFontFile;
	}


	public HRESULT CreateFontSetBuilder(IDWriteFontSetBuilder1** fontSetBuilder) mut => VT.[Friend]CreateFontSetBuilder(&this, fontSetBuilder);

	public HRESULT CreateInMemoryFontFileLoader(IDWriteInMemoryFontFileLoader** newLoader) mut => VT.[Friend]CreateInMemoryFontFileLoader(&this, newLoader);

	public HRESULT CreateHttpFontFileLoader(PWSTR referrerUrl, PWSTR extraHeaders, IDWriteRemoteFontFileLoader** newLoader) mut => VT.[Friend]CreateHttpFontFileLoader(&this, referrerUrl, extraHeaders, newLoader);

	public DWRITE_CONTAINER_TYPE AnalyzeContainerType(void* fileData, uint32 fileDataSize) mut => VT.[Friend]AnalyzeContainerType(&this, fileData, fileDataSize);

	public HRESULT UnpackFontFile(DWRITE_CONTAINER_TYPE containerType, void* fileData, uint32 fileDataSize, IDWriteFontFileStream** unpackedFontStream) mut => VT.[Friend]UnpackFontFile(&this, containerType, fileData, fileDataSize, unpackedFontStream);
}

[CRepr]struct IDWriteFactory6 : IDWriteFactory5
{
	public new const Guid IID = .(0xf3744d80, 0x21f7, 0x42eb, 0xb3, 0x5d, 0x99, 0x5b, 0xc7, 0x2f, 0xc2, 0x23);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDWriteFactory5.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IDWriteFontFile* fontFile, uint32 faceIndex, DWRITE_FONT_SIMULATIONS fontSimulations, DWRITE_FONT_AXIS_VALUE* fontAxisValues, uint32 fontAxisValueCount, IDWriteFontFaceReference1** fontFaceReference) CreateFontFaceReference;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IDWriteFontFile* fontFile, uint32 faceIndex, IDWriteFontResource** fontResource) CreateFontResource;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BOOL includeDownloadableFonts, IDWriteFontSet1** fontSet) GetSystemFontSet;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BOOL includeDownloadableFonts, DWRITE_FONT_FAMILY_MODEL fontFamilyModel, IDWriteFontCollection2** fontCollection) GetSystemFontCollection;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IDWriteFontSet* fontSet, DWRITE_FONT_FAMILY_MODEL fontFamilyModel, IDWriteFontCollection2** fontCollection) CreateFontCollectionFromFontSet;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IDWriteFontSetBuilder2** fontSetBuilder) CreateFontSetBuilder;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, PWSTR fontFamilyName, IDWriteFontCollection* fontCollection, DWRITE_FONT_AXIS_VALUE* fontAxisValues, uint32 fontAxisValueCount, float fontSize, PWSTR localeName, IDWriteTextFormat3** textFormat) CreateTextFormat;
	}


	public HRESULT CreateFontFaceReference(IDWriteFontFile* fontFile, uint32 faceIndex, DWRITE_FONT_SIMULATIONS fontSimulations, DWRITE_FONT_AXIS_VALUE* fontAxisValues, uint32 fontAxisValueCount, IDWriteFontFaceReference1** fontFaceReference) mut => VT.[Friend]CreateFontFaceReference(&this, fontFile, faceIndex, fontSimulations, fontAxisValues, fontAxisValueCount, fontFaceReference);

	public HRESULT CreateFontResource(IDWriteFontFile* fontFile, uint32 faceIndex, IDWriteFontResource** fontResource) mut => VT.[Friend]CreateFontResource(&this, fontFile, faceIndex, fontResource);

	public HRESULT GetSystemFontSet(BOOL includeDownloadableFonts, IDWriteFontSet1** fontSet) mut => VT.[Friend]GetSystemFontSet(&this, includeDownloadableFonts, fontSet);

	public HRESULT GetSystemFontCollection(BOOL includeDownloadableFonts, DWRITE_FONT_FAMILY_MODEL fontFamilyModel, IDWriteFontCollection2** fontCollection) mut => VT.[Friend]GetSystemFontCollection(&this, includeDownloadableFonts, fontFamilyModel, fontCollection);

	public HRESULT CreateFontCollectionFromFontSet(IDWriteFontSet* fontSet, DWRITE_FONT_FAMILY_MODEL fontFamilyModel, IDWriteFontCollection2** fontCollection) mut => VT.[Friend]CreateFontCollectionFromFontSet(&this, fontSet, fontFamilyModel, fontCollection);

	public HRESULT CreateFontSetBuilder(IDWriteFontSetBuilder2** fontSetBuilder) mut => VT.[Friend]CreateFontSetBuilder(&this, fontSetBuilder);

	public HRESULT CreateTextFormat(PWSTR fontFamilyName, IDWriteFontCollection* fontCollection, DWRITE_FONT_AXIS_VALUE* fontAxisValues, uint32 fontAxisValueCount, float fontSize, PWSTR localeName, IDWriteTextFormat3** textFormat) mut => VT.[Friend]CreateTextFormat(&this, fontFamilyName, fontCollection, fontAxisValues, fontAxisValueCount, fontSize, localeName, textFormat);
}

[CRepr]struct IDWriteFontFace5 : IDWriteFontFace4
{
	public new const Guid IID = .(0x98eff3a5, 0xb667, 0x479a, 0xb1, 0x45, 0xe2, 0xfa, 0x5b, 0x9f, 0xdc, 0x29);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDWriteFontFace4.VTable
	{
		protected new function [CallingConvention(.Stdcall)] uint32(SelfOuter* self) GetFontAxisValueCount;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, DWRITE_FONT_AXIS_VALUE* fontAxisValues, uint32 fontAxisValueCount) GetFontAxisValues;
		protected new function [CallingConvention(.Stdcall)] BOOL(SelfOuter* self) HasVariations;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IDWriteFontResource** fontResource) GetFontResource;
		protected new function [CallingConvention(.Stdcall)] BOOL(SelfOuter* self, IDWriteFontFace* fontFace) COM_Equals;
	}


	public uint32 GetFontAxisValueCount() mut => VT.[Friend]GetFontAxisValueCount(&this);

	public HRESULT GetFontAxisValues(DWRITE_FONT_AXIS_VALUE* fontAxisValues, uint32 fontAxisValueCount) mut => VT.[Friend]GetFontAxisValues(&this, fontAxisValues, fontAxisValueCount);

	public BOOL HasVariations() mut => VT.[Friend]HasVariations(&this);

	public HRESULT GetFontResource(IDWriteFontResource** fontResource) mut => VT.[Friend]GetFontResource(&this, fontResource);

	public BOOL Equals(IDWriteFontFace* fontFace) mut => VT.[Friend]COM_Equals(&this, fontFace);
}

[CRepr]struct IDWriteFontResource : IUnknown
{
	public new const Guid IID = .(0x1f803a76, 0x6871, 0x48e8, 0x98, 0x7f, 0xb9, 0x75, 0x55, 0x1c, 0x50, 0xf2);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IUnknown.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IDWriteFontFile** fontFile) GetFontFile;
		protected new function [CallingConvention(.Stdcall)] uint32(SelfOuter* self) GetFontFaceIndex;
		protected new function [CallingConvention(.Stdcall)] uint32(SelfOuter* self) GetFontAxisCount;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, DWRITE_FONT_AXIS_VALUE* fontAxisValues, uint32 fontAxisValueCount) GetDefaultFontAxisValues;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, DWRITE_FONT_AXIS_RANGE* fontAxisRanges, uint32 fontAxisRangeCount) GetFontAxisRanges;
		protected new function [CallingConvention(.Stdcall)] DWRITE_FONT_AXIS_ATTRIBUTES(SelfOuter* self, uint32 axisIndex) GetFontAxisAttributes;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32 axisIndex, IDWriteLocalizedStrings** names) GetAxisNames;
		protected new function [CallingConvention(.Stdcall)] uint32(SelfOuter* self, uint32 axisIndex) GetAxisValueNameCount;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32 axisIndex, uint32 axisValueIndex, DWRITE_FONT_AXIS_RANGE* fontAxisRange, IDWriteLocalizedStrings** names) GetAxisValueNames;
		protected new function [CallingConvention(.Stdcall)] BOOL(SelfOuter* self) HasVariations;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, DWRITE_FONT_SIMULATIONS fontSimulations, DWRITE_FONT_AXIS_VALUE* fontAxisValues, uint32 fontAxisValueCount, IDWriteFontFace5** fontFace) CreateFontFace;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, DWRITE_FONT_SIMULATIONS fontSimulations, DWRITE_FONT_AXIS_VALUE* fontAxisValues, uint32 fontAxisValueCount, IDWriteFontFaceReference1** fontFaceReference) CreateFontFaceReference;
	}


	public HRESULT GetFontFile(IDWriteFontFile** fontFile) mut => VT.[Friend]GetFontFile(&this, fontFile);

	public uint32 GetFontFaceIndex() mut => VT.[Friend]GetFontFaceIndex(&this);

	public uint32 GetFontAxisCount() mut => VT.[Friend]GetFontAxisCount(&this);

	public HRESULT GetDefaultFontAxisValues(DWRITE_FONT_AXIS_VALUE* fontAxisValues, uint32 fontAxisValueCount) mut => VT.[Friend]GetDefaultFontAxisValues(&this, fontAxisValues, fontAxisValueCount);

	public HRESULT GetFontAxisRanges(DWRITE_FONT_AXIS_RANGE* fontAxisRanges, uint32 fontAxisRangeCount) mut => VT.[Friend]GetFontAxisRanges(&this, fontAxisRanges, fontAxisRangeCount);

	public DWRITE_FONT_AXIS_ATTRIBUTES GetFontAxisAttributes(uint32 axisIndex) mut => VT.[Friend]GetFontAxisAttributes(&this, axisIndex);

	public HRESULT GetAxisNames(uint32 axisIndex, IDWriteLocalizedStrings** names) mut => VT.[Friend]GetAxisNames(&this, axisIndex, names);

	public uint32 GetAxisValueNameCount(uint32 axisIndex) mut => VT.[Friend]GetAxisValueNameCount(&this, axisIndex);

	public HRESULT GetAxisValueNames(uint32 axisIndex, uint32 axisValueIndex, DWRITE_FONT_AXIS_RANGE* fontAxisRange, IDWriteLocalizedStrings** names) mut => VT.[Friend]GetAxisValueNames(&this, axisIndex, axisValueIndex, fontAxisRange, names);

	public BOOL HasVariations() mut => VT.[Friend]HasVariations(&this);

	public HRESULT CreateFontFace(DWRITE_FONT_SIMULATIONS fontSimulations, DWRITE_FONT_AXIS_VALUE* fontAxisValues, uint32 fontAxisValueCount, IDWriteFontFace5** fontFace) mut => VT.[Friend]CreateFontFace(&this, fontSimulations, fontAxisValues, fontAxisValueCount, fontFace);

	public HRESULT CreateFontFaceReference(DWRITE_FONT_SIMULATIONS fontSimulations, DWRITE_FONT_AXIS_VALUE* fontAxisValues, uint32 fontAxisValueCount, IDWriteFontFaceReference1** fontFaceReference) mut => VT.[Friend]CreateFontFaceReference(&this, fontSimulations, fontAxisValues, fontAxisValueCount, fontFaceReference);
}

[CRepr]struct IDWriteFontFaceReference1 : IDWriteFontFaceReference
{
	public new const Guid IID = .(0xc081fe77, 0x2fd1, 0x41ac, 0xa5, 0xa3, 0x34, 0x98, 0x3c, 0x4b, 0xa6, 0x1a);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDWriteFontFaceReference.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IDWriteFontFace5** fontFace) CreateFontFace;
		protected new function [CallingConvention(.Stdcall)] uint32(SelfOuter* self) GetFontAxisValueCount;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, DWRITE_FONT_AXIS_VALUE* fontAxisValues, uint32 fontAxisValueCount) GetFontAxisValues;
	}


	public HRESULT CreateFontFace(IDWriteFontFace5** fontFace) mut => VT.[Friend]CreateFontFace(&this, fontFace);

	public uint32 GetFontAxisValueCount() mut => VT.[Friend]GetFontAxisValueCount(&this);

	public HRESULT GetFontAxisValues(DWRITE_FONT_AXIS_VALUE* fontAxisValues, uint32 fontAxisValueCount) mut => VT.[Friend]GetFontAxisValues(&this, fontAxisValues, fontAxisValueCount);
}

[CRepr]struct IDWriteFontSetBuilder2 : IDWriteFontSetBuilder1
{
	public new const Guid IID = .(0xee5ba612, 0xb131, 0x463c, 0x8f, 0x4f, 0x31, 0x89, 0xb9, 0x40, 0x1e, 0x45);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDWriteFontSetBuilder1.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IDWriteFontFile* fontFile, uint32 fontFaceIndex, DWRITE_FONT_SIMULATIONS fontSimulations, DWRITE_FONT_AXIS_VALUE* fontAxisValues, uint32 fontAxisValueCount, DWRITE_FONT_AXIS_RANGE* fontAxisRanges, uint32 fontAxisRangeCount, DWRITE_FONT_PROPERTY* properties, uint32 propertyCount) AddFont;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, PWSTR filePath) AddFontFile;
	}


	public HRESULT AddFont(IDWriteFontFile* fontFile, uint32 fontFaceIndex, DWRITE_FONT_SIMULATIONS fontSimulations, DWRITE_FONT_AXIS_VALUE* fontAxisValues, uint32 fontAxisValueCount, DWRITE_FONT_AXIS_RANGE* fontAxisRanges, uint32 fontAxisRangeCount, DWRITE_FONT_PROPERTY* properties, uint32 propertyCount) mut => VT.[Friend]AddFont(&this, fontFile, fontFaceIndex, fontSimulations, fontAxisValues, fontAxisValueCount, fontAxisRanges, fontAxisRangeCount, properties, propertyCount);

	public HRESULT AddFontFile(PWSTR filePath) mut => VT.[Friend]AddFontFile(&this, filePath);
}

[CRepr]struct IDWriteFontSet1 : IDWriteFontSet
{
	public new const Guid IID = .(0x7e9fda85, 0x6c92, 0x4053, 0xbc, 0x47, 0x7a, 0xe3, 0x53, 0x0d, 0xb4, 0xd3);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDWriteFontSet.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, DWRITE_FONT_PROPERTY* fontProperty, DWRITE_FONT_AXIS_VALUE* fontAxisValues, uint32 fontAxisValueCount, IDWriteFontSet1** matchingFonts) GetMatchingFonts;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IDWriteFontSet1** filteredFontSet) GetFirstFontResources;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32* indices, uint32 indexCount, IDWriteFontSet1** filteredFontSet) GetFilteredFonts;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, DWRITE_FONT_AXIS_RANGE* fontAxisRanges, uint32 fontAxisRangeCount, BOOL selectAnyRange, IDWriteFontSet1** filteredFontSet) GetFilteredFonts0;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, DWRITE_FONT_PROPERTY* properties, uint32 propertyCount, BOOL selectAnyProperty, IDWriteFontSet1** filteredFontSet) GetFilteredFonts1;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, DWRITE_FONT_AXIS_RANGE* fontAxisRanges, uint32 fontAxisRangeCount, BOOL selectAnyRange, uint32* indices, uint32 maxIndexCount, uint32* actualIndexCount) GetFilteredFontIndices;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, DWRITE_FONT_PROPERTY* properties, uint32 propertyCount, BOOL selectAnyProperty, uint32* indices, uint32 maxIndexCount, uint32* actualIndexCount) GetFilteredFontIndices0;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32 listIndex, DWRITE_FONT_AXIS_RANGE* fontAxisRanges, uint32 maxFontAxisRangeCount, uint32* actualFontAxisRangeCount) GetFontAxisRanges;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, DWRITE_FONT_AXIS_RANGE* fontAxisRanges, uint32 maxFontAxisRangeCount, uint32* actualFontAxisRangeCount) GetFontAxisRanges0;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32 listIndex, IDWriteFontFaceReference1** fontFaceReference) GetFontFaceReference;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32 listIndex, IDWriteFontResource** fontResource) CreateFontResource;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32 listIndex, IDWriteFontFace5** fontFace) CreateFontFace;
		protected new function [CallingConvention(.Stdcall)] DWRITE_LOCALITY(SelfOuter* self, uint32 listIndex) GetFontLocality;
	}


	public HRESULT GetMatchingFonts(DWRITE_FONT_PROPERTY* fontProperty, DWRITE_FONT_AXIS_VALUE* fontAxisValues, uint32 fontAxisValueCount, IDWriteFontSet1** matchingFonts) mut => VT.[Friend]GetMatchingFonts(&this, fontProperty, fontAxisValues, fontAxisValueCount, matchingFonts);

	public HRESULT GetFirstFontResources(IDWriteFontSet1** filteredFontSet) mut => VT.[Friend]GetFirstFontResources(&this, filteredFontSet);

	public HRESULT GetFilteredFonts(uint32* indices, uint32 indexCount, IDWriteFontSet1** filteredFontSet) mut => VT.[Friend]GetFilteredFonts(&this, indices, indexCount, filteredFontSet);

	public HRESULT GetFilteredFonts(DWRITE_FONT_AXIS_RANGE* fontAxisRanges, uint32 fontAxisRangeCount, BOOL selectAnyRange, IDWriteFontSet1** filteredFontSet) mut => VT.[Friend]GetFilteredFonts0(&this, fontAxisRanges, fontAxisRangeCount, selectAnyRange, filteredFontSet);

	public HRESULT GetFilteredFonts(DWRITE_FONT_PROPERTY* properties, uint32 propertyCount, BOOL selectAnyProperty, IDWriteFontSet1** filteredFontSet) mut => VT.[Friend]GetFilteredFonts1(&this, properties, propertyCount, selectAnyProperty, filteredFontSet);

	public HRESULT GetFilteredFontIndices(DWRITE_FONT_AXIS_RANGE* fontAxisRanges, uint32 fontAxisRangeCount, BOOL selectAnyRange, uint32* indices, uint32 maxIndexCount, uint32* actualIndexCount) mut => VT.[Friend]GetFilteredFontIndices(&this, fontAxisRanges, fontAxisRangeCount, selectAnyRange, indices, maxIndexCount, actualIndexCount);

	public HRESULT GetFilteredFontIndices(DWRITE_FONT_PROPERTY* properties, uint32 propertyCount, BOOL selectAnyProperty, uint32* indices, uint32 maxIndexCount, uint32* actualIndexCount) mut => VT.[Friend]GetFilteredFontIndices0(&this, properties, propertyCount, selectAnyProperty, indices, maxIndexCount, actualIndexCount);

	public HRESULT GetFontAxisRanges(uint32 listIndex, DWRITE_FONT_AXIS_RANGE* fontAxisRanges, uint32 maxFontAxisRangeCount, uint32* actualFontAxisRangeCount) mut => VT.[Friend]GetFontAxisRanges(&this, listIndex, fontAxisRanges, maxFontAxisRangeCount, actualFontAxisRangeCount);

	public HRESULT GetFontAxisRanges(DWRITE_FONT_AXIS_RANGE* fontAxisRanges, uint32 maxFontAxisRangeCount, uint32* actualFontAxisRangeCount) mut => VT.[Friend]GetFontAxisRanges0(&this, fontAxisRanges, maxFontAxisRangeCount, actualFontAxisRangeCount);

	public HRESULT GetFontFaceReference(uint32 listIndex, IDWriteFontFaceReference1** fontFaceReference) mut => VT.[Friend]GetFontFaceReference(&this, listIndex, fontFaceReference);

	public HRESULT CreateFontResource(uint32 listIndex, IDWriteFontResource** fontResource) mut => VT.[Friend]CreateFontResource(&this, listIndex, fontResource);

	public HRESULT CreateFontFace(uint32 listIndex, IDWriteFontFace5** fontFace) mut => VT.[Friend]CreateFontFace(&this, listIndex, fontFace);

	public DWRITE_LOCALITY GetFontLocality(uint32 listIndex) mut => VT.[Friend]GetFontLocality(&this, listIndex);
}

[CRepr]struct IDWriteFontList2 : IDWriteFontList1
{
	public new const Guid IID = .(0xc0763a34, 0x77af, 0x445a, 0xb7, 0x35, 0x08, 0xc3, 0x7b, 0x0a, 0x5b, 0xf5);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDWriteFontList1.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IDWriteFontSet1** fontSet) GetFontSet;
	}


	public HRESULT GetFontSet(IDWriteFontSet1** fontSet) mut => VT.[Friend]GetFontSet(&this, fontSet);
}

[CRepr]struct IDWriteFontFamily2 : IDWriteFontFamily1
{
	public new const Guid IID = .(0x3ed49e77, 0xa398, 0x4261, 0xb9, 0xcf, 0xc1, 0x26, 0xc2, 0x13, 0x1e, 0xf3);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDWriteFontFamily1.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, DWRITE_FONT_AXIS_VALUE* fontAxisValues, uint32 fontAxisValueCount, IDWriteFontList2** matchingFonts) GetMatchingFonts;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IDWriteFontSet1** fontSet) GetFontSet;
	}


	public HRESULT GetMatchingFonts(DWRITE_FONT_AXIS_VALUE* fontAxisValues, uint32 fontAxisValueCount, IDWriteFontList2** matchingFonts) mut => VT.[Friend]GetMatchingFonts(&this, fontAxisValues, fontAxisValueCount, matchingFonts);

	public HRESULT GetFontSet(IDWriteFontSet1** fontSet) mut => VT.[Friend]GetFontSet(&this, fontSet);
}

[CRepr]struct IDWriteFontCollection2 : IDWriteFontCollection1
{
	public new const Guid IID = .(0x514039c6, 0x4617, 0x4064, 0xbf, 0x8b, 0x92, 0xea, 0x83, 0xe5, 0x06, 0xe0);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDWriteFontCollection1.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32 index, IDWriteFontFamily2** fontFamily) GetFontFamily;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, PWSTR familyName, DWRITE_FONT_AXIS_VALUE* fontAxisValues, uint32 fontAxisValueCount, IDWriteFontList2** fontList) GetMatchingFonts;
		protected new function [CallingConvention(.Stdcall)] DWRITE_FONT_FAMILY_MODEL(SelfOuter* self) GetFontFamilyModel;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IDWriteFontSet1** fontSet) GetFontSet;
	}


	public HRESULT GetFontFamily(uint32 index, IDWriteFontFamily2** fontFamily) mut => VT.[Friend]GetFontFamily(&this, index, fontFamily);

	public HRESULT GetMatchingFonts(PWSTR familyName, DWRITE_FONT_AXIS_VALUE* fontAxisValues, uint32 fontAxisValueCount, IDWriteFontList2** fontList) mut => VT.[Friend]GetMatchingFonts(&this, familyName, fontAxisValues, fontAxisValueCount, fontList);

	public DWRITE_FONT_FAMILY_MODEL GetFontFamilyModel() mut => VT.[Friend]GetFontFamilyModel(&this);

	public HRESULT GetFontSet(IDWriteFontSet1** fontSet) mut => VT.[Friend]GetFontSet(&this, fontSet);
}

[CRepr]struct IDWriteTextLayout4 : IDWriteTextLayout3
{
	public new const Guid IID = .(0x05a9bf42, 0x223f, 0x4441, 0xb5, 0xfb, 0x82, 0x63, 0x68, 0x5f, 0x55, 0xe9);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDWriteTextLayout3.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, DWRITE_FONT_AXIS_VALUE* fontAxisValues, uint32 fontAxisValueCount, DWRITE_TEXT_RANGE textRange) SetFontAxisValues;
		protected new function [CallingConvention(.Stdcall)] uint32(SelfOuter* self, uint32 currentPosition) GetFontAxisValueCount;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32 currentPosition, DWRITE_FONT_AXIS_VALUE* fontAxisValues, uint32 fontAxisValueCount, DWRITE_TEXT_RANGE* textRange) GetFontAxisValues;
		protected new function [CallingConvention(.Stdcall)] DWRITE_AUTOMATIC_FONT_AXES(SelfOuter* self) GetAutomaticFontAxes;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, DWRITE_AUTOMATIC_FONT_AXES automaticFontAxes) SetAutomaticFontAxes;
	}


	public HRESULT SetFontAxisValues(DWRITE_FONT_AXIS_VALUE* fontAxisValues, uint32 fontAxisValueCount, DWRITE_TEXT_RANGE textRange) mut => VT.[Friend]SetFontAxisValues(&this, fontAxisValues, fontAxisValueCount, textRange);

	public uint32 GetFontAxisValueCount(uint32 currentPosition) mut => VT.[Friend]GetFontAxisValueCount(&this, currentPosition);

	public HRESULT GetFontAxisValues(uint32 currentPosition, DWRITE_FONT_AXIS_VALUE* fontAxisValues, uint32 fontAxisValueCount, DWRITE_TEXT_RANGE* textRange) mut => VT.[Friend]GetFontAxisValues(&this, currentPosition, fontAxisValues, fontAxisValueCount, textRange);

	public DWRITE_AUTOMATIC_FONT_AXES GetAutomaticFontAxes() mut => VT.[Friend]GetAutomaticFontAxes(&this);

	public HRESULT SetAutomaticFontAxes(DWRITE_AUTOMATIC_FONT_AXES automaticFontAxes) mut => VT.[Friend]SetAutomaticFontAxes(&this, automaticFontAxes);
}

[CRepr]struct IDWriteTextFormat3 : IDWriteTextFormat2
{
	public new const Guid IID = .(0x6d3b5641, 0xe550, 0x430d, 0xa8, 0x5b, 0xb7, 0xbf, 0x48, 0xa9, 0x34, 0x27);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDWriteTextFormat2.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, DWRITE_FONT_AXIS_VALUE* fontAxisValues, uint32 fontAxisValueCount) SetFontAxisValues;
		protected new function [CallingConvention(.Stdcall)] uint32(SelfOuter* self) GetFontAxisValueCount;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, DWRITE_FONT_AXIS_VALUE* fontAxisValues, uint32 fontAxisValueCount) GetFontAxisValues;
		protected new function [CallingConvention(.Stdcall)] DWRITE_AUTOMATIC_FONT_AXES(SelfOuter* self) GetAutomaticFontAxes;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, DWRITE_AUTOMATIC_FONT_AXES automaticFontAxes) SetAutomaticFontAxes;
	}


	public HRESULT SetFontAxisValues(DWRITE_FONT_AXIS_VALUE* fontAxisValues, uint32 fontAxisValueCount) mut => VT.[Friend]SetFontAxisValues(&this, fontAxisValues, fontAxisValueCount);

	public uint32 GetFontAxisValueCount() mut => VT.[Friend]GetFontAxisValueCount(&this);

	public HRESULT GetFontAxisValues(DWRITE_FONT_AXIS_VALUE* fontAxisValues, uint32 fontAxisValueCount) mut => VT.[Friend]GetFontAxisValues(&this, fontAxisValues, fontAxisValueCount);

	public DWRITE_AUTOMATIC_FONT_AXES GetAutomaticFontAxes() mut => VT.[Friend]GetAutomaticFontAxes(&this);

	public HRESULT SetAutomaticFontAxes(DWRITE_AUTOMATIC_FONT_AXES automaticFontAxes) mut => VT.[Friend]SetAutomaticFontAxes(&this, automaticFontAxes);
}

[CRepr]struct IDWriteFontFallback1 : IDWriteFontFallback
{
	public new const Guid IID = .(0x2397599d, 0xdd0d, 0x4681, 0xbd, 0x6a, 0xf4, 0xf3, 0x1e, 0xaa, 0xde, 0x77);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDWriteFontFallback.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IDWriteTextAnalysisSource* analysisSource, uint32 textPosition, uint32 textLength, IDWriteFontCollection* baseFontCollection, PWSTR baseFamilyName, DWRITE_FONT_AXIS_VALUE* fontAxisValues, uint32 fontAxisValueCount, uint32* mappedLength, float* scale, IDWriteFontFace5** mappedFontFace) MapCharacters;
	}


	public HRESULT MapCharacters(IDWriteTextAnalysisSource* analysisSource, uint32 textPosition, uint32 textLength, IDWriteFontCollection* baseFontCollection, PWSTR baseFamilyName, DWRITE_FONT_AXIS_VALUE* fontAxisValues, uint32 fontAxisValueCount, uint32* mappedLength, float* scale, IDWriteFontFace5** mappedFontFace) mut => VT.[Friend]MapCharacters(&this, analysisSource, textPosition, textLength, baseFontCollection, baseFamilyName, fontAxisValues, fontAxisValueCount, mappedLength, scale, mappedFontFace);
}

[CRepr]struct IDWriteFontSet2 : IDWriteFontSet1
{
	public new const Guid IID = .(0xdc7ead19, 0xe54c, 0x43af, 0xb2, 0xda, 0x4e, 0x2b, 0x79, 0xba, 0x3f, 0x7f);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDWriteFontSet1.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HANDLE(SelfOuter* self) GetExpirationEvent;
	}


	public HANDLE GetExpirationEvent() mut => VT.[Friend]GetExpirationEvent(&this);
}

[CRepr]struct IDWriteFontCollection3 : IDWriteFontCollection2
{
	public new const Guid IID = .(0xa4d055a6, 0xf9e3, 0x4e25, 0x93, 0xb7, 0x9e, 0x30, 0x9f, 0x3a, 0xf8, 0xe9);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDWriteFontCollection2.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HANDLE(SelfOuter* self) GetExpirationEvent;
	}


	public HANDLE GetExpirationEvent() mut => VT.[Friend]GetExpirationEvent(&this);
}

[CRepr]struct IDWriteFactory7 : IDWriteFactory6
{
	public new const Guid IID = .(0x35d0e0b3, 0x9076, 0x4d2e, 0xa0, 0x16, 0xa9, 0x1b, 0x56, 0x8a, 0x06, 0xb4);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDWriteFactory6.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BOOL includeDownloadableFonts, IDWriteFontSet2** fontSet) GetSystemFontSet;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BOOL includeDownloadableFonts, DWRITE_FONT_FAMILY_MODEL fontFamilyModel, IDWriteFontCollection3** fontCollection) GetSystemFontCollection;
	}


	public HRESULT GetSystemFontSet(BOOL includeDownloadableFonts, IDWriteFontSet2** fontSet) mut => VT.[Friend]GetSystemFontSet(&this, includeDownloadableFonts, fontSet);

	public HRESULT GetSystemFontCollection(BOOL includeDownloadableFonts, DWRITE_FONT_FAMILY_MODEL fontFamilyModel, IDWriteFontCollection3** fontCollection) mut => VT.[Friend]GetSystemFontCollection(&this, includeDownloadableFonts, fontFamilyModel, fontCollection);
}

[CRepr]struct IDWriteFontSet3 : IDWriteFontSet2
{
	public new const Guid IID = .(0x7c073ef2, 0xa7f4, 0x4045, 0x8c, 0x32, 0x8a, 0xb8, 0xae, 0x64, 0x0f, 0x90);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDWriteFontSet2.VTable
	{
		protected new function [CallingConvention(.Stdcall)] DWRITE_FONT_SOURCE_TYPE(SelfOuter* self, uint32 fontIndex) GetFontSourceType;
		protected new function [CallingConvention(.Stdcall)] uint32(SelfOuter* self, uint32 listIndex) GetFontSourceNameLength;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32 listIndex, char16* stringBuffer, uint32 stringBufferSize) GetFontSourceName;
	}


	public DWRITE_FONT_SOURCE_TYPE GetFontSourceType(uint32 fontIndex) mut => VT.[Friend]GetFontSourceType(&this, fontIndex);

	public uint32 GetFontSourceNameLength(uint32 listIndex) mut => VT.[Friend]GetFontSourceNameLength(&this, listIndex);

	public HRESULT GetFontSourceName(uint32 listIndex, char16* stringBuffer, uint32 stringBufferSize) mut => VT.[Friend]GetFontSourceName(&this, listIndex, stringBuffer, stringBufferSize);
}

[CRepr]struct IDWriteFontFace6 : IDWriteFontFace5
{
	public new const Guid IID = .(0xc4b1fe1b, 0x6e84, 0x47d5, 0xb5, 0x4c, 0xa5, 0x97, 0x98, 0x1b, 0x06, 0xad);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDWriteFontFace5.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, DWRITE_FONT_FAMILY_MODEL fontFamilyModel, IDWriteLocalizedStrings** names) GetFamilyNames;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, DWRITE_FONT_FAMILY_MODEL fontFamilyModel, IDWriteLocalizedStrings** names) GetFaceNames;
	}


	public HRESULT GetFamilyNames(DWRITE_FONT_FAMILY_MODEL fontFamilyModel, IDWriteLocalizedStrings** names) mut => VT.[Friend]GetFamilyNames(&this, fontFamilyModel, names);

	public HRESULT GetFaceNames(DWRITE_FONT_FAMILY_MODEL fontFamilyModel, IDWriteLocalizedStrings** names) mut => VT.[Friend]GetFaceNames(&this, fontFamilyModel, names);
}

#endregion

#region Functions
public static
{
	[Import("DWrite.lib"), CLink, CallingConvention(.Stdcall)]
	public static extern HRESULT DWriteCreateFactory(DWRITE_FACTORY_TYPE factoryType, in Guid iid, IUnknown** factory);

}
#endregion
