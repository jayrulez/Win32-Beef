using Win32.Foundation;
using Win32.System.Com;
using System;

namespace Win32.System.UpdateAgent;

#region Constants
public static
{
	public const Guid LIBID_WUApiLib = .(0xb596cc9f, 0x56e5, 0x419e, 0xa6, 0x22, 0xe0, 0x1b, 0xb4, 0x57, 0x43, 0x1e);
	public const uint32 UPDATE_LOCKDOWN_WEBSITE_ACCESS = 1;
	public const HRESULT WU_S_SERVICE_STOP = 2359297;
	public const HRESULT WU_S_SELFUPDATE = 2359298;
	public const HRESULT WU_S_UPDATE_ERROR = 2359299;
	public const HRESULT WU_S_MARKED_FOR_DISCONNECT = 2359300;
	public const HRESULT WU_S_REBOOT_REQUIRED = 2359301;
	public const HRESULT WU_S_ALREADY_INSTALLED = 2359302;
	public const HRESULT WU_S_ALREADY_UNINSTALLED = 2359303;
	public const HRESULT WU_S_ALREADY_DOWNLOADED = 2359304;
	public const HRESULT WU_S_SOME_UPDATES_SKIPPED_ON_BATTERY = 2359305;
	public const HRESULT WU_S_ALREADY_REVERTED = 2359306;
	public const HRESULT WU_S_SEARCH_CRITERIA_NOT_SUPPORTED = 2359312;
	public const HRESULT WU_S_UH_INSTALLSTILLPENDING = 2367509;
	public const HRESULT WU_S_UH_DOWNLOAD_SIZE_CALCULATED = 2367510;
	public const HRESULT WU_S_SIH_NOOP = 2379777;
	public const HRESULT WU_S_DM_ALREADYDOWNLOADING = 2383873;
	public const HRESULT WU_S_METADATA_SKIPPED_BY_ENFORCEMENTMODE = 2388225;
	public const HRESULT WU_S_METADATA_IGNORED_SIGNATURE_VERIFICATION = 2388226;
	public const HRESULT WU_S_SEARCH_LOAD_SHEDDING = 2392065;
	public const HRESULT WU_E_NO_SERVICE = -2145124351;
	public const HRESULT WU_E_MAX_CAPACITY_REACHED = -2145124350;
	public const HRESULT WU_E_UNKNOWN_ID = -2145124349;
	public const HRESULT WU_E_NOT_INITIALIZED = -2145124348;
	public const HRESULT WU_E_RANGEOVERLAP = -2145124347;
	public const HRESULT WU_E_TOOMANYRANGES = -2145124346;
	public const HRESULT WU_E_INVALIDINDEX = -2145124345;
	public const HRESULT WU_E_ITEMNOTFOUND = -2145124344;
	public const HRESULT WU_E_OPERATIONINPROGRESS = -2145124343;
	public const HRESULT WU_E_COULDNOTCANCEL = -2145124342;
	public const HRESULT WU_E_CALL_CANCELLED = -2145124341;
	public const HRESULT WU_E_NOOP = -2145124340;
	public const HRESULT WU_E_XML_MISSINGDATA = -2145124339;
	public const HRESULT WU_E_XML_INVALID = -2145124338;
	public const HRESULT WU_E_CYCLE_DETECTED = -2145124337;
	public const HRESULT WU_E_TOO_DEEP_RELATION = -2145124336;
	public const HRESULT WU_E_INVALID_RELATIONSHIP = -2145124335;
	public const HRESULT WU_E_REG_VALUE_INVALID = -2145124334;
	public const HRESULT WU_E_DUPLICATE_ITEM = -2145124333;
	public const HRESULT WU_E_INVALID_INSTALL_REQUESTED = -2145124332;
	public const HRESULT WU_E_INSTALL_NOT_ALLOWED = -2145124330;
	public const HRESULT WU_E_NOT_APPLICABLE = -2145124329;
	public const HRESULT WU_E_NO_USERTOKEN = -2145124328;
	public const HRESULT WU_E_EXCLUSIVE_INSTALL_CONFLICT = -2145124327;
	public const HRESULT WU_E_POLICY_NOT_SET = -2145124326;
	public const HRESULT WU_E_SELFUPDATE_IN_PROGRESS = -2145124325;
	public const HRESULT WU_E_INVALID_UPDATE = -2145124323;
	public const HRESULT WU_E_SERVICE_STOP = -2145124322;
	public const HRESULT WU_E_NO_CONNECTION = -2145124321;
	public const HRESULT WU_E_NO_INTERACTIVE_USER = -2145124320;
	public const HRESULT WU_E_TIME_OUT = -2145124319;
	public const HRESULT WU_E_ALL_UPDATES_FAILED = -2145124318;
	public const HRESULT WU_E_EULAS_DECLINED = -2145124317;
	public const HRESULT WU_E_NO_UPDATE = -2145124316;
	public const HRESULT WU_E_USER_ACCESS_DISABLED = -2145124315;
	public const HRESULT WU_E_INVALID_UPDATE_TYPE = -2145124314;
	public const HRESULT WU_E_URL_TOO_LONG = -2145124313;
	public const HRESULT WU_E_UNINSTALL_NOT_ALLOWED = -2145124312;
	public const HRESULT WU_E_INVALID_PRODUCT_LICENSE = -2145124311;
	public const HRESULT WU_E_MISSING_HANDLER = -2145124310;
	public const HRESULT WU_E_LEGACYSERVER = -2145124309;
	public const HRESULT WU_E_BIN_SOURCE_ABSENT = -2145124308;
	public const HRESULT WU_E_SOURCE_ABSENT = -2145124307;
	public const HRESULT WU_E_WU_DISABLED = -2145124306;
	public const HRESULT WU_E_CALL_CANCELLED_BY_POLICY = -2145124305;
	public const HRESULT WU_E_INVALID_PROXY_SERVER = -2145124304;
	public const HRESULT WU_E_INVALID_FILE = -2145124303;
	public const HRESULT WU_E_INVALID_CRITERIA = -2145124302;
	public const HRESULT WU_E_EULA_UNAVAILABLE = -2145124301;
	public const HRESULT WU_E_DOWNLOAD_FAILED = -2145124300;
	public const HRESULT WU_E_UPDATE_NOT_PROCESSED = -2145124299;
	public const HRESULT WU_E_INVALID_OPERATION = -2145124298;
	public const HRESULT WU_E_NOT_SUPPORTED = -2145124297;
	public const HRESULT WU_E_WINHTTP_INVALID_FILE = -2145124296;
	public const HRESULT WU_E_TOO_MANY_RESYNC = -2145124295;
	public const HRESULT WU_E_NO_SERVER_CORE_SUPPORT = -2145124288;
	public const HRESULT WU_E_SYSPREP_IN_PROGRESS = -2145124287;
	public const HRESULT WU_E_UNKNOWN_SERVICE = -2145124286;
	public const HRESULT WU_E_NO_UI_SUPPORT = -2145124285;
	public const HRESULT WU_E_PER_MACHINE_UPDATE_ACCESS_DENIED = -2145124284;
	public const HRESULT WU_E_UNSUPPORTED_SEARCHSCOPE = -2145124283;
	public const HRESULT WU_E_BAD_FILE_URL = -2145124282;
	public const HRESULT WU_E_REVERT_NOT_ALLOWED = -2145124281;
	public const HRESULT WU_E_INVALID_NOTIFICATION_INFO = -2145124280;
	public const HRESULT WU_E_OUTOFRANGE = -2145124279;
	public const HRESULT WU_E_SETUP_IN_PROGRESS = -2145124278;
	public const HRESULT WU_E_ORPHANED_DOWNLOAD_JOB = -2145124277;
	public const HRESULT WU_E_LOW_BATTERY = -2145124276;
	public const HRESULT WU_E_INFRASTRUCTUREFILE_INVALID_FORMAT = -2145124275;
	public const HRESULT WU_E_INFRASTRUCTUREFILE_REQUIRES_SSL = -2145124274;
	public const HRESULT WU_E_IDLESHUTDOWN_OPCOUNT_DISCOVERY = -2145124273;
	public const HRESULT WU_E_IDLESHUTDOWN_OPCOUNT_SEARCH = -2145124272;
	public const HRESULT WU_E_IDLESHUTDOWN_OPCOUNT_DOWNLOAD = -2145124271;
	public const HRESULT WU_E_IDLESHUTDOWN_OPCOUNT_INSTALL = -2145124270;
	public const HRESULT WU_E_IDLESHUTDOWN_OPCOUNT_OTHER = -2145124269;
	public const HRESULT WU_E_INTERACTIVE_CALL_CANCELLED = -2145124268;
	public const HRESULT WU_E_AU_CALL_CANCELLED = -2145124267;
	public const HRESULT WU_E_SYSTEM_UNSUPPORTED = -2145124266;
	public const HRESULT WU_E_NO_SUCH_HANDLER_PLUGIN = -2145124265;
	public const HRESULT WU_E_INVALID_SERIALIZATION_VERSION = -2145124264;
	public const HRESULT WU_E_NETWORK_COST_EXCEEDS_POLICY = -2145124263;
	public const HRESULT WU_E_CALL_CANCELLED_BY_HIDE = -2145124262;
	public const HRESULT WU_E_CALL_CANCELLED_BY_INVALID = -2145124261;
	public const HRESULT WU_E_INVALID_VOLUMEID = -2145124260;
	public const HRESULT WU_E_UNRECOGNIZED_VOLUMEID = -2145124259;
	public const HRESULT WU_E_EXTENDEDERROR_NOTSET = -2145124258;
	public const HRESULT WU_E_EXTENDEDERROR_FAILED = -2145124257;
	public const HRESULT WU_E_IDLESHUTDOWN_OPCOUNT_SERVICEREGISTRATION = -2145124256;
	public const HRESULT WU_E_FILETRUST_SHA2SIGNATURE_MISSING = -2145124255;
	public const HRESULT WU_E_UPDATE_NOT_APPROVED = -2145124254;
	public const HRESULT WU_E_CALL_CANCELLED_BY_INTERACTIVE_SEARCH = -2145124253;
	public const HRESULT WU_E_INSTALL_JOB_RESUME_NOT_ALLOWED = -2145124252;
	public const HRESULT WU_E_INSTALL_JOB_NOT_SUSPENDED = -2145124251;
	public const HRESULT WU_E_INSTALL_USERCONTEXT_ACCESSDENIED = -2145124250;
	public const HRESULT WU_E_UNEXPECTED = -2145120257;
	public const HRESULT WU_E_MSI_WRONG_VERSION = -2145120255;
	public const HRESULT WU_E_MSI_NOT_CONFIGURED = -2145120254;
	public const HRESULT WU_E_MSP_DISABLED = -2145120253;
	public const HRESULT WU_E_MSI_WRONG_APP_CONTEXT = -2145120252;
	public const HRESULT WU_E_MSI_NOT_PRESENT = -2145120251;
	public const HRESULT WU_E_MSP_UNEXPECTED = -2145116161;
	public const HRESULT WU_E_PT_SOAPCLIENT_BASE = -2145107968;
	public const HRESULT WU_E_PT_SOAPCLIENT_INITIALIZE = -2145107967;
	public const HRESULT WU_E_PT_SOAPCLIENT_OUTOFMEMORY = -2145107966;
	public const HRESULT WU_E_PT_SOAPCLIENT_GENERATE = -2145107965;
	public const HRESULT WU_E_PT_SOAPCLIENT_CONNECT = -2145107964;
	public const HRESULT WU_E_PT_SOAPCLIENT_SEND = -2145107963;
	public const HRESULT WU_E_PT_SOAPCLIENT_SERVER = -2145107962;
	public const HRESULT WU_E_PT_SOAPCLIENT_SOAPFAULT = -2145107961;
	public const HRESULT WU_E_PT_SOAPCLIENT_PARSEFAULT = -2145107960;
	public const HRESULT WU_E_PT_SOAPCLIENT_READ = -2145107959;
	public const HRESULT WU_E_PT_SOAPCLIENT_PARSE = -2145107958;
	public const HRESULT WU_E_PT_SOAP_VERSION = -2145107957;
	public const HRESULT WU_E_PT_SOAP_MUST_UNDERSTAND = -2145107956;
	public const HRESULT WU_E_PT_SOAP_CLIENT = -2145107955;
	public const HRESULT WU_E_PT_SOAP_SERVER = -2145107954;
	public const HRESULT WU_E_PT_WMI_ERROR = -2145107953;
	public const HRESULT WU_E_PT_EXCEEDED_MAX_SERVER_TRIPS = -2145107952;
	public const HRESULT WU_E_PT_SUS_SERVER_NOT_SET = -2145107951;
	public const HRESULT WU_E_PT_DOUBLE_INITIALIZATION = -2145107950;
	public const HRESULT WU_E_PT_INVALID_COMPUTER_NAME = -2145107949;
	public const HRESULT WU_E_PT_REFRESH_CACHE_REQUIRED = -2145107947;
	public const HRESULT WU_E_PT_HTTP_STATUS_BAD_REQUEST = -2145107946;
	public const HRESULT WU_E_PT_HTTP_STATUS_DENIED = -2145107945;
	public const HRESULT WU_E_PT_HTTP_STATUS_FORBIDDEN = -2145107944;
	public const HRESULT WU_E_PT_HTTP_STATUS_NOT_FOUND = -2145107943;
	public const HRESULT WU_E_PT_HTTP_STATUS_BAD_METHOD = -2145107942;
	public const HRESULT WU_E_PT_HTTP_STATUS_PROXY_AUTH_REQ = -2145107941;
	public const HRESULT WU_E_PT_HTTP_STATUS_REQUEST_TIMEOUT = -2145107940;
	public const HRESULT WU_E_PT_HTTP_STATUS_CONFLICT = -2145107939;
	public const HRESULT WU_E_PT_HTTP_STATUS_GONE = -2145107938;
	public const HRESULT WU_E_PT_HTTP_STATUS_SERVER_ERROR = -2145107937;
	public const HRESULT WU_E_PT_HTTP_STATUS_NOT_SUPPORTED = -2145107936;
	public const HRESULT WU_E_PT_HTTP_STATUS_BAD_GATEWAY = -2145107935;
	public const HRESULT WU_E_PT_HTTP_STATUS_SERVICE_UNAVAIL = -2145107934;
	public const HRESULT WU_E_PT_HTTP_STATUS_GATEWAY_TIMEOUT = -2145107933;
	public const HRESULT WU_E_PT_HTTP_STATUS_VERSION_NOT_SUP = -2145107932;
	public const HRESULT WU_E_PT_FILE_LOCATIONS_CHANGED = -2145107931;
	public const HRESULT WU_E_PT_REGISTRATION_NOT_SUPPORTED = -2145107930;
	public const HRESULT WU_E_PT_NO_AUTH_PLUGINS_REQUESTED = -2145107929;
	public const HRESULT WU_E_PT_NO_AUTH_COOKIES_CREATED = -2145107928;
	public const HRESULT WU_E_PT_INVALID_CONFIG_PROP = -2145107927;
	public const HRESULT WU_E_PT_CONFIG_PROP_MISSING = -2145107926;
	public const HRESULT WU_E_PT_HTTP_STATUS_NOT_MAPPED = -2145107925;
	public const HRESULT WU_E_PT_WINHTTP_NAME_NOT_RESOLVED = -2145107924;
	public const HRESULT WU_E_PT_LOAD_SHEDDING = -2145107923;
	public const HRESULT WU_E_PT_SAME_REDIR_ID = -2145103827;
	public const HRESULT WU_E_PT_NO_MANAGED_RECOVER = -2145103826;
	public const HRESULT WU_E_PT_ECP_SUCCEEDED_WITH_ERRORS = -2145107921;
	public const HRESULT WU_E_PT_ECP_INIT_FAILED = -2145107920;
	public const HRESULT WU_E_PT_ECP_INVALID_FILE_FORMAT = -2145107919;
	public const HRESULT WU_E_PT_ECP_INVALID_METADATA = -2145107918;
	public const HRESULT WU_E_PT_ECP_FAILURE_TO_EXTRACT_DIGEST = -2145107917;
	public const HRESULT WU_E_PT_ECP_FAILURE_TO_DECOMPRESS_CAB_FILE = -2145107916;
	public const HRESULT WU_E_PT_ECP_FILE_LOCATION_ERROR = -2145107915;
	public const HRESULT WU_E_PT_CATALOG_SYNC_REQUIRED = -2145123274;
	public const HRESULT WU_E_PT_SECURITY_VERIFICATION_FAILURE = -2145123273;
	public const HRESULT WU_E_PT_ENDPOINT_UNREACHABLE = -2145123272;
	public const HRESULT WU_E_PT_INVALID_FORMAT = -2145123271;
	public const HRESULT WU_E_PT_INVALID_URL = -2145123270;
	public const HRESULT WU_E_PT_NWS_NOT_LOADED = -2145123269;
	public const HRESULT WU_E_PT_PROXY_AUTH_SCHEME_NOT_SUPPORTED = -2145123268;
	public const HRESULT WU_E_SERVICEPROP_NOTAVAIL = -2145123267;
	public const HRESULT WU_E_PT_ENDPOINT_REFRESH_REQUIRED = -2145123266;
	public const HRESULT WU_E_PT_ENDPOINTURL_NOTAVAIL = -2145123265;
	public const HRESULT WU_E_PT_ENDPOINT_DISCONNECTED = -2145123264;
	public const HRESULT WU_E_PT_INVALID_OPERATION = -2145123263;
	public const HRESULT WU_E_PT_OBJECT_FAULTED = -2145123262;
	public const HRESULT WU_E_PT_NUMERIC_OVERFLOW = -2145123261;
	public const HRESULT WU_E_PT_OPERATION_ABORTED = -2145123260;
	public const HRESULT WU_E_PT_OPERATION_ABANDONED = -2145123259;
	public const HRESULT WU_E_PT_QUOTA_EXCEEDED = -2145123258;
	public const HRESULT WU_E_PT_NO_TRANSLATION_AVAILABLE = -2145123257;
	public const HRESULT WU_E_PT_ADDRESS_IN_USE = -2145123256;
	public const HRESULT WU_E_PT_ADDRESS_NOT_AVAILABLE = -2145123255;
	public const HRESULT WU_E_PT_OTHER = -2145123254;
	public const HRESULT WU_E_PT_SECURITY_SYSTEM_FAILURE = -2145123253;
	public const HRESULT WU_E_PT_UNEXPECTED = -2145103873;
	public const HRESULT WU_E_REDIRECTOR_LOAD_XML = -2145103871;
	public const HRESULT WU_E_REDIRECTOR_S_FALSE = -2145103870;
	public const HRESULT WU_E_REDIRECTOR_ID_SMALLER = -2145103869;
	public const HRESULT WU_E_REDIRECTOR_UNKNOWN_SERVICE = -2145103868;
	public const HRESULT WU_E_REDIRECTOR_UNSUPPORTED_CONTENTTYPE = -2145103867;
	public const HRESULT WU_E_REDIRECTOR_INVALID_RESPONSE = -2145103866;
	public const HRESULT WU_E_REDIRECTOR_ATTRPROVIDER_EXCEEDED_MAX_NAMEVALUE = -2145103864;
	public const HRESULT WU_E_REDIRECTOR_ATTRPROVIDER_INVALID_NAME = -2145103863;
	public const HRESULT WU_E_REDIRECTOR_ATTRPROVIDER_INVALID_VALUE = -2145103862;
	public const HRESULT WU_E_REDIRECTOR_SLS_GENERIC_ERROR = -2145103861;
	public const HRESULT WU_E_REDIRECTOR_CONNECT_POLICY = -2145103860;
	public const HRESULT WU_E_REDIRECTOR_ONLINE_DISALLOWED = -2145103859;
	public const HRESULT WU_E_REDIRECTOR_UNEXPECTED = -2145103617;
	public const HRESULT WU_E_SIH_VERIFY_DOWNLOAD_ENGINE = -2145103615;
	public const HRESULT WU_E_SIH_VERIFY_DOWNLOAD_PAYLOAD = -2145103614;
	public const HRESULT WU_E_SIH_VERIFY_STAGE_ENGINE = -2145103613;
	public const HRESULT WU_E_SIH_VERIFY_STAGE_PAYLOAD = -2145103612;
	public const HRESULT WU_E_SIH_ACTION_NOT_FOUND = -2145103611;
	public const HRESULT WU_E_SIH_SLS_PARSE = -2145103610;
	public const HRESULT WU_E_SIH_INVALIDHASH = -2145103609;
	public const HRESULT WU_E_SIH_NO_ENGINE = -2145103608;
	public const HRESULT WU_E_SIH_POST_REBOOT_INSTALL_FAILED = -2145103607;
	public const HRESULT WU_E_SIH_POST_REBOOT_NO_CACHED_SLS_RESPONSE = -2145103606;
	public const HRESULT WU_E_SIH_PARSE = -2145103605;
	public const HRESULT WU_E_SIH_SECURITY = -2145103604;
	public const HRESULT WU_E_SIH_PPL = -2145103603;
	public const HRESULT WU_E_SIH_POLICY = -2145103602;
	public const HRESULT WU_E_SIH_STDEXCEPTION = -2145103601;
	public const HRESULT WU_E_SIH_NONSTDEXCEPTION = -2145103600;
	public const HRESULT WU_E_SIH_ENGINE_EXCEPTION = -2145103599;
	public const HRESULT WU_E_SIH_BLOCKED_FOR_PLATFORM = -2145103598;
	public const HRESULT WU_E_SIH_ANOTHER_INSTANCE_RUNNING = -2145103597;
	public const HRESULT WU_E_SIH_DNSRESILIENCY_OFF = -2145103596;
	public const HRESULT WU_E_SIH_UNEXPECTED = -2145103361;
	public const HRESULT WU_E_DRV_PRUNED = -2145075199;
	public const HRESULT WU_E_DRV_NOPROP_OR_LEGACY = -2145075198;
	public const HRESULT WU_E_DRV_REG_MISMATCH = -2145075197;
	public const HRESULT WU_E_DRV_NO_METADATA = -2145075196;
	public const HRESULT WU_E_DRV_MISSING_ATTRIBUTE = -2145075195;
	public const HRESULT WU_E_DRV_SYNC_FAILED = -2145075194;
	public const HRESULT WU_E_DRV_NO_PRINTER_CONTENT = -2145075193;
	public const HRESULT WU_E_DRV_DEVICE_PROBLEM = -2145075192;
	public const HRESULT WU_E_DRV_UNEXPECTED = -2145071105;
	public const HRESULT WU_E_DS_SHUTDOWN = -2145091584;
	public const HRESULT WU_E_DS_INUSE = -2145091583;
	public const HRESULT WU_E_DS_INVALID = -2145091582;
	public const HRESULT WU_E_DS_TABLEMISSING = -2145091581;
	public const HRESULT WU_E_DS_TABLEINCORRECT = -2145091580;
	public const HRESULT WU_E_DS_INVALIDTABLENAME = -2145091579;
	public const HRESULT WU_E_DS_BADVERSION = -2145091578;
	public const HRESULT WU_E_DS_NODATA = -2145091577;
	public const HRESULT WU_E_DS_MISSINGDATA = -2145091576;
	public const HRESULT WU_E_DS_MISSINGREF = -2145091575;
	public const HRESULT WU_E_DS_UNKNOWNHANDLER = -2145091574;
	public const HRESULT WU_E_DS_CANTDELETE = -2145091573;
	public const HRESULT WU_E_DS_LOCKTIMEOUTEXPIRED = -2145091572;
	public const HRESULT WU_E_DS_NOCATEGORIES = -2145091571;
	public const HRESULT WU_E_DS_ROWEXISTS = -2145091570;
	public const HRESULT WU_E_DS_STOREFILELOCKED = -2145091569;
	public const HRESULT WU_E_DS_CANNOTREGISTER = -2145091568;
	public const HRESULT WU_E_DS_UNABLETOSTART = -2145091567;
	public const HRESULT WU_E_DS_DUPLICATEUPDATEID = -2145091565;
	public const HRESULT WU_E_DS_UNKNOWNSERVICE = -2145091564;
	public const HRESULT WU_E_DS_SERVICEEXPIRED = -2145091563;
	public const HRESULT WU_E_DS_DECLINENOTALLOWED = -2145091562;
	public const HRESULT WU_E_DS_TABLESESSIONMISMATCH = -2145091561;
	public const HRESULT WU_E_DS_SESSIONLOCKMISMATCH = -2145091560;
	public const HRESULT WU_E_DS_NEEDWINDOWSSERVICE = -2145091559;
	public const HRESULT WU_E_DS_INVALIDOPERATION = -2145091558;
	public const HRESULT WU_E_DS_SCHEMAMISMATCH = -2145091557;
	public const HRESULT WU_E_DS_RESETREQUIRED = -2145091556;
	public const HRESULT WU_E_DS_IMPERSONATED = -2145091555;
	public const HRESULT WU_E_DS_DATANOTAVAILABLE = -2145091554;
	public const HRESULT WU_E_DS_DATANOTLOADED = -2145091553;
	public const HRESULT WU_E_DS_NODATA_NOSUCHREVISION = -2145091552;
	public const HRESULT WU_E_DS_NODATA_NOSUCHUPDATE = -2145091551;
	public const HRESULT WU_E_DS_NODATA_EULA = -2145091550;
	public const HRESULT WU_E_DS_NODATA_SERVICE = -2145091549;
	public const HRESULT WU_E_DS_NODATA_COOKIE = -2145091548;
	public const HRESULT WU_E_DS_NODATA_TIMER = -2145091547;
	public const HRESULT WU_E_DS_NODATA_CCR = -2145091546;
	public const HRESULT WU_E_DS_NODATA_FILE = -2145091545;
	public const HRESULT WU_E_DS_NODATA_DOWNLOADJOB = -2145091544;
	public const HRESULT WU_E_DS_NODATA_TMI = -2145091543;
	public const HRESULT WU_E_DS_UNEXPECTED = -2145087489;
	public const HRESULT WU_E_INVENTORY_PARSEFAILED = -2145087487;
	public const HRESULT WU_E_INVENTORY_GET_INVENTORY_TYPE_FAILED = -2145087486;
	public const HRESULT WU_E_INVENTORY_RESULT_UPLOAD_FAILED = -2145087485;
	public const HRESULT WU_E_INVENTORY_UNEXPECTED = -2145087484;
	public const HRESULT WU_E_INVENTORY_WMI_ERROR = -2145087483;
	public const HRESULT WU_E_AU_NOSERVICE = -2145083392;
	public const HRESULT WU_E_AU_NONLEGACYSERVER = -2145083390;
	public const HRESULT WU_E_AU_LEGACYCLIENTDISABLED = -2145083389;
	public const HRESULT WU_E_AU_PAUSED = -2145083388;
	public const HRESULT WU_E_AU_NO_REGISTERED_SERVICE = -2145083387;
	public const HRESULT WU_E_AU_DETECT_SVCID_MISMATCH = -2145083386;
	public const HRESULT WU_E_REBOOT_IN_PROGRESS = -2145083385;
	public const HRESULT WU_E_AU_OOBE_IN_PROGRESS = -2145083384;
	public const HRESULT WU_E_AU_UNEXPECTED = -2145079297;
	public const HRESULT WU_E_UH_REMOTEUNAVAILABLE = -2145116160;
	public const HRESULT WU_E_UH_LOCALONLY = -2145116159;
	public const HRESULT WU_E_UH_UNKNOWNHANDLER = -2145116158;
	public const HRESULT WU_E_UH_REMOTEALREADYACTIVE = -2145116157;
	public const HRESULT WU_E_UH_DOESNOTSUPPORTACTION = -2145116156;
	public const HRESULT WU_E_UH_WRONGHANDLER = -2145116155;
	public const HRESULT WU_E_UH_INVALIDMETADATA = -2145116154;
	public const HRESULT WU_E_UH_INSTALLERHUNG = -2145116153;
	public const HRESULT WU_E_UH_OPERATIONCANCELLED = -2145116152;
	public const HRESULT WU_E_UH_BADHANDLERXML = -2145116151;
	public const HRESULT WU_E_UH_CANREQUIREINPUT = -2145116150;
	public const HRESULT WU_E_UH_INSTALLERFAILURE = -2145116149;
	public const HRESULT WU_E_UH_FALLBACKTOSELFCONTAINED = -2145116148;
	public const HRESULT WU_E_UH_NEEDANOTHERDOWNLOAD = -2145116147;
	public const HRESULT WU_E_UH_NOTIFYFAILURE = -2145116146;
	public const HRESULT WU_E_UH_INCONSISTENT_FILE_NAMES = -2145116145;
	public const HRESULT WU_E_UH_FALLBACKERROR = -2145116144;
	public const HRESULT WU_E_UH_TOOMANYDOWNLOADREQUESTS = -2145116143;
	public const HRESULT WU_E_UH_UNEXPECTEDCBSRESPONSE = -2145116142;
	public const HRESULT WU_E_UH_BADCBSPACKAGEID = -2145116141;
	public const HRESULT WU_E_UH_POSTREBOOTSTILLPENDING = -2145116140;
	public const HRESULT WU_E_UH_POSTREBOOTRESULTUNKNOWN = -2145116139;
	public const HRESULT WU_E_UH_POSTREBOOTUNEXPECTEDSTATE = -2145116138;
	public const HRESULT WU_E_UH_NEW_SERVICING_STACK_REQUIRED = -2145116137;
	public const HRESULT WU_E_UH_CALLED_BACK_FAILURE = -2145116136;
	public const HRESULT WU_E_UH_CUSTOMINSTALLER_INVALID_SIGNATURE = -2145116135;
	public const HRESULT WU_E_UH_UNSUPPORTED_INSTALLCONTEXT = -2145116134;
	public const HRESULT WU_E_UH_INVALID_TARGETSESSION = -2145116133;
	public const HRESULT WU_E_UH_DECRYPTFAILURE = -2145116132;
	public const HRESULT WU_E_UH_HANDLER_DISABLEDUNTILREBOOT = -2145116131;
	public const HRESULT WU_E_UH_APPX_NOT_PRESENT = -2145116130;
	public const HRESULT WU_E_UH_NOTREADYTOCOMMIT = -2145116129;
	public const HRESULT WU_E_UH_APPX_INVALID_PACKAGE_VOLUME = -2145116128;
	public const HRESULT WU_E_UH_APPX_DEFAULT_PACKAGE_VOLUME_UNAVAILABLE = -2145116127;
	public const HRESULT WU_E_UH_APPX_INSTALLED_PACKAGE_VOLUME_UNAVAILABLE = -2145116126;
	public const HRESULT WU_E_UH_APPX_PACKAGE_FAMILY_NOT_FOUND = -2145116125;
	public const HRESULT WU_E_UH_APPX_SYSTEM_VOLUME_NOT_FOUND = -2145116124;
	public const HRESULT WU_E_UH_UNEXPECTED = -2145112065;
	public const HRESULT WU_E_DM_URLNOTAVAILABLE = -2145099775;
	public const HRESULT WU_E_DM_INCORRECTFILEHASH = -2145099774;
	public const HRESULT WU_E_DM_UNKNOWNALGORITHM = -2145099773;
	public const HRESULT WU_E_DM_NEEDDOWNLOADREQUEST = -2145099772;
	public const HRESULT WU_E_DM_NONETWORK = -2145099771;
	public const HRESULT WU_E_DM_WRONGBITSVERSION = -2145099770;
	public const HRESULT WU_E_DM_NOTDOWNLOADED = -2145099769;
	public const HRESULT WU_E_DM_FAILTOCONNECTTOBITS = -2145099768;
	public const HRESULT WU_E_DM_BITSTRANSFERERROR = -2145099767;
	public const HRESULT WU_E_DM_DOWNLOADLOCATIONCHANGED = -2145099766;
	public const HRESULT WU_E_DM_CONTENTCHANGED = -2145099765;
	public const HRESULT WU_E_DM_DOWNLOADLIMITEDBYUPDATESIZE = -2145099764;
	public const HRESULT WU_E_DM_UNAUTHORIZED = -2145099762;
	public const HRESULT WU_E_DM_BG_ERROR_TOKEN_REQUIRED = -2145099761;
	public const HRESULT WU_E_DM_DOWNLOADSANDBOXNOTFOUND = -2145099760;
	public const HRESULT WU_E_DM_DOWNLOADFILEPATHUNKNOWN = -2145099759;
	public const HRESULT WU_E_DM_DOWNLOADFILEMISSING = -2145099758;
	public const HRESULT WU_E_DM_UPDATEREMOVED = -2145099757;
	public const HRESULT WU_E_DM_READRANGEFAILED = -2145099756;
	public const HRESULT WU_E_DM_UNAUTHORIZED_NO_USER = -2145099754;
	public const HRESULT WU_E_DM_UNAUTHORIZED_LOCAL_USER = -2145099753;
	public const HRESULT WU_E_DM_UNAUTHORIZED_DOMAIN_USER = -2145099752;
	public const HRESULT WU_E_DM_UNAUTHORIZED_MSA_USER = -2145099751;
	public const HRESULT WU_E_DM_FALLINGBACKTOBITS = -2145099750;
	public const HRESULT WU_E_DM_DOWNLOAD_VOLUME_CONFLICT = -2145099749;
	public const HRESULT WU_E_DM_SANDBOX_HASH_MISMATCH = -2145099748;
	public const HRESULT WU_E_DM_HARDRESERVEID_CONFLICT = -2145099747;
	public const HRESULT WU_E_DM_DOSVC_REQUIRED = -2145099746;
	public const HRESULT WU_E_DM_UNEXPECTED = -2145095681;
	public const HRESULT WU_E_SETUP_INVALID_INFDATA = -2145071103;
	public const HRESULT WU_E_SETUP_INVALID_IDENTDATA = -2145071102;
	public const HRESULT WU_E_SETUP_ALREADY_INITIALIZED = -2145071101;
	public const HRESULT WU_E_SETUP_NOT_INITIALIZED = -2145071100;
	public const HRESULT WU_E_SETUP_SOURCE_VERSION_MISMATCH = -2145071099;
	public const HRESULT WU_E_SETUP_TARGET_VERSION_GREATER = -2145071098;
	public const HRESULT WU_E_SETUP_REGISTRATION_FAILED = -2145071097;
	public const HRESULT WU_E_SELFUPDATE_SKIP_ON_FAILURE = -2145071096;
	public const HRESULT WU_E_SETUP_SKIP_UPDATE = -2145071095;
	public const HRESULT WU_E_SETUP_UNSUPPORTED_CONFIGURATION = -2145071094;
	public const HRESULT WU_E_SETUP_BLOCKED_CONFIGURATION = -2145071093;
	public const HRESULT WU_E_SETUP_REBOOT_TO_FIX = -2145071092;
	public const HRESULT WU_E_SETUP_ALREADYRUNNING = -2145071091;
	public const HRESULT WU_E_SETUP_REBOOTREQUIRED = -2145071090;
	public const HRESULT WU_E_SETUP_HANDLER_EXEC_FAILURE = -2145071089;
	public const HRESULT WU_E_SETUP_INVALID_REGISTRY_DATA = -2145071088;
	public const HRESULT WU_E_SELFUPDATE_REQUIRED = -2145071087;
	public const HRESULT WU_E_SELFUPDATE_REQUIRED_ADMIN = -2145071086;
	public const HRESULT WU_E_SETUP_WRONG_SERVER_VERSION = -2145071085;
	public const HRESULT WU_E_SETUP_DEFERRABLE_REBOOT_PENDING = -2145071084;
	public const HRESULT WU_E_SETUP_NON_DEFERRABLE_REBOOT_PENDING = -2145071083;
	public const HRESULT WU_E_SETUP_FAIL = -2145071082;
	public const HRESULT WU_E_SETUP_UNEXPECTED = -2145067009;
	public const HRESULT WU_E_EE_UNKNOWN_EXPRESSION = -2145067007;
	public const HRESULT WU_E_EE_INVALID_EXPRESSION = -2145067006;
	public const HRESULT WU_E_EE_MISSING_METADATA = -2145067005;
	public const HRESULT WU_E_EE_INVALID_VERSION = -2145067004;
	public const HRESULT WU_E_EE_NOT_INITIALIZED = -2145067003;
	public const HRESULT WU_E_EE_INVALID_ATTRIBUTEDATA = -2145067002;
	public const HRESULT WU_E_EE_CLUSTER_ERROR = -2145067001;
	public const HRESULT WU_E_EE_UNEXPECTED = -2145062913;
	public const HRESULT WU_E_INSTALLATION_RESULTS_UNKNOWN_VERSION = -2145112063;
	public const HRESULT WU_E_INSTALLATION_RESULTS_INVALID_DATA = -2145112062;
	public const HRESULT WU_E_INSTALLATION_RESULTS_NOT_FOUND = -2145112061;
	public const HRESULT WU_E_TRAYICON_FAILURE = -2145112060;
	public const HRESULT WU_E_NON_UI_MODE = -2145107971;
	public const HRESULT WU_E_WUCLTUI_UNSUPPORTED_VERSION = -2145107970;
	public const HRESULT WU_E_AUCLIENT_UNEXPECTED = -2145107969;
	public const HRESULT WU_E_REPORTER_EVENTCACHECORRUPT = -2145062911;
	public const HRESULT WU_E_REPORTER_EVENTNAMESPACEPARSEFAILED = -2145062910;
	public const HRESULT WU_E_INVALID_EVENT = -2145062909;
	public const HRESULT WU_E_SERVER_BUSY = -2145062908;
	public const HRESULT WU_E_CALLBACK_COOKIE_NOT_FOUND = -2145062907;
	public const HRESULT WU_E_REPORTER_UNEXPECTED = -2145058817;
	public const HRESULT WU_E_OL_INVALID_SCANFILE = -2145095679;
	public const HRESULT WU_E_OL_NEWCLIENT_REQUIRED = -2145095678;
	public const HRESULT WU_E_INVALID_EVENT_PAYLOAD = -2145095677;
	public const HRESULT WU_E_INVALID_EVENT_PAYLOADSIZE = -2145095676;
	public const HRESULT WU_E_SERVICE_NOT_REGISTERED = -2145095675;
	public const HRESULT WU_E_OL_UNEXPECTED = -2145091585;
	public const HRESULT WU_E_METADATA_NOOP = -2145095424;
	public const HRESULT WU_E_METADATA_CONFIG_INVALID_BINARY_ENCODING = -2145095423;
	public const HRESULT WU_E_METADATA_FETCH_CONFIG = -2145095422;
	public const HRESULT WU_E_METADATA_INVALID_PARAMETER = -2145095420;
	public const HRESULT WU_E_METADATA_UNEXPECTED = -2145095419;
	public const HRESULT WU_E_METADATA_NO_VERIFICATION_DATA = -2145095418;
	public const HRESULT WU_E_METADATA_BAD_FRAGMENTSIGNING_CONFIG = -2145095417;
	public const HRESULT WU_E_METADATA_FAILURE_PROCESSING_FRAGMENTSIGNING_CONFIG = -2145095416;
	public const HRESULT WU_E_METADATA_XML_MISSING = -2145095392;
	public const HRESULT WU_E_METADATA_XML_FRAGMENTSIGNING_MISSING = -2145095391;
	public const HRESULT WU_E_METADATA_XML_MODE_MISSING = -2145095390;
	public const HRESULT WU_E_METADATA_XML_MODE_INVALID = -2145095389;
	public const HRESULT WU_E_METADATA_XML_VALIDITY_INVALID = -2145095388;
	public const HRESULT WU_E_METADATA_XML_LEAFCERT_MISSING = -2145095387;
	public const HRESULT WU_E_METADATA_XML_INTERMEDIATECERT_MISSING = -2145095386;
	public const HRESULT WU_E_METADATA_XML_LEAFCERT_ID_MISSING = -2145095385;
	public const HRESULT WU_E_METADATA_XML_BASE64CERDATA_MISSING = -2145095384;
	public const HRESULT WU_E_METADATA_BAD_SIGNATURE = -2145095360;
	public const HRESULT WU_E_METADATA_UNSUPPORTED_HASH_ALG = -2145095359;
	public const HRESULT WU_E_METADATA_SIGNATURE_VERIFY_FAILED = -2145095358;
	public const HRESULT WU_E_METADATATRUST_CERTIFICATECHAIN_VERIFICATION = -2145095344;
	public const HRESULT WU_E_METADATATRUST_UNTRUSTED_CERTIFICATECHAIN = -2145095343;
	public const HRESULT WU_E_METADATA_TIMESTAMP_TOKEN_MISSING = -2145095328;
	public const HRESULT WU_E_METADATA_TIMESTAMP_TOKEN_VERIFICATION_FAILED = -2145095327;
	public const HRESULT WU_E_METADATA_TIMESTAMP_TOKEN_UNTRUSTED = -2145095326;
	public const HRESULT WU_E_METADATA_TIMESTAMP_TOKEN_VALIDITY_WINDOW = -2145095325;
	public const HRESULT WU_E_METADATA_TIMESTAMP_TOKEN_SIGNATURE = -2145095324;
	public const HRESULT WU_E_METADATA_TIMESTAMP_TOKEN_CERTCHAIN = -2145095323;
	public const HRESULT WU_E_METADATA_TIMESTAMP_TOKEN_REFRESHONLINE = -2145095322;
	public const HRESULT WU_E_METADATA_TIMESTAMP_TOKEN_ALL_BAD = -2145095321;
	public const HRESULT WU_E_METADATA_TIMESTAMP_TOKEN_NODATA = -2145095320;
	public const HRESULT WU_E_METADATA_TIMESTAMP_TOKEN_CACHELOOKUP = -2145095319;
	public const HRESULT WU_E_METADATA_TIMESTAMP_TOKEN_VALIDITYWINDOW_UNEXPECTED = -2145095298;
	public const HRESULT WU_E_METADATA_TIMESTAMP_TOKEN_UNEXPECTED = -2145095297;
	public const HRESULT WU_E_METADATA_CERT_MISSING = -2145095296;
	public const HRESULT WU_E_METADATA_LEAFCERT_BAD_TRANSPORT_ENCODING = -2145095295;
	public const HRESULT WU_E_METADATA_INTCERT_BAD_TRANSPORT_ENCODING = -2145095294;
	public const HRESULT WU_E_METADATA_CERT_UNTRUSTED = -2145095293;
	public const HRESULT WU_E_WUTASK_INPROGRESS = -2145079295;
	public const HRESULT WU_E_WUTASK_STATUS_DISABLED = -2145079294;
	public const HRESULT WU_E_WUTASK_NOT_STARTED = -2145079293;
	public const HRESULT WU_E_WUTASK_RETRY = -2145079292;
	public const HRESULT WU_E_WUTASK_CANCELINSTALL_DISALLOWED = -2145079291;
	public const HRESULT WU_E_UNKNOWN_HARDWARECAPABILITY = -2145079039;
	public const HRESULT WU_E_BAD_XML_HARDWARECAPABILITY = -2145079038;
	public const HRESULT WU_E_WMI_NOT_SUPPORTED = -2145079037;
	public const HRESULT WU_E_UPDATE_MERGE_NOT_ALLOWED = -2145079036;
	public const HRESULT WU_E_SKIPPED_UPDATE_INSTALLATION = -2145079035;
	public const HRESULT WU_E_SLS_INVALID_REVISION = -2145078783;
	public const HRESULT WU_E_FILETRUST_DUALSIGNATURE_RSA = -2145078527;
	public const HRESULT WU_E_FILETRUST_DUALSIGNATURE_ECC = -2145078526;
	public const HRESULT WU_E_TRUST_SUBJECT_NOT_TRUSTED = -2145078525;
	public const HRESULT WU_E_TRUST_PROVIDER_UNKNOWN = -2145078524;
}
#endregion

#region Enums

[AllowDuplicates]
public enum AutomaticUpdatesNotificationLevel : int32
{
	aunlNotConfigured = 0,
	aunlDisabled = 1,
	aunlNotifyBeforeDownload = 2,
	aunlNotifyBeforeInstallation = 3,
	aunlScheduledInstallation = 4,
}


[AllowDuplicates]
public enum AutomaticUpdatesScheduledInstallationDay : int32
{
	ausidEveryDay = 0,
	ausidEverySunday = 1,
	ausidEveryMonday = 2,
	ausidEveryTuesday = 3,
	ausidEveryWednesday = 4,
	ausidEveryThursday = 5,
	ausidEveryFriday = 6,
	ausidEverySaturday = 7,
}


[AllowDuplicates]
public enum DownloadPhase : int32
{
	dphInitializing = 1,
	dphDownloading = 2,
	dphVerifying = 3,
}


[AllowDuplicates]
public enum DownloadPriority : int32
{
	dpLow = 1,
	dpNormal = 2,
	dpHigh = 3,
	dpExtraHigh = 4,
}


[AllowDuplicates]
public enum AutoSelectionMode : int32
{
	asLetWindowsUpdateDecide = 0,
	asAutoSelectIfDownloaded = 1,
	asNeverAutoSelect = 2,
	asAlwaysAutoSelect = 3,
}


[AllowDuplicates]
public enum AutoDownloadMode : int32
{
	adLetWindowsUpdateDecide = 0,
	adNeverAutoDownload = 1,
	adAlwaysAutoDownload = 2,
}


[AllowDuplicates]
public enum InstallationImpact : int32
{
	iiNormal = 0,
	iiMinor = 1,
	iiRequiresExclusiveHandling = 2,
}


[AllowDuplicates]
public enum InstallationRebootBehavior : int32
{
	irbNeverReboots = 0,
	irbAlwaysRequiresReboot = 1,
	irbCanRequestReboot = 2,
}


[AllowDuplicates]
public enum OperationResultCode : int32
{
	orcNotStarted = 0,
	orcInProgress = 1,
	orcSucceeded = 2,
	orcSucceededWithErrors = 3,
	orcFailed = 4,
	orcAborted = 5,
}


[AllowDuplicates]
public enum ServerSelection : int32
{
	ssDefault = 0,
	ssManagedServer = 1,
	ssWindowsUpdate = 2,
	ssOthers = 3,
}


[AllowDuplicates]
public enum UpdateType : int32
{
	utSoftware = 1,
	utDriver = 2,
}


[AllowDuplicates]
public enum UpdateOperation : int32
{
	uoInstallation = 1,
	uoUninstallation = 2,
}


[AllowDuplicates]
public enum DeploymentAction : int32
{
	daNone = 0,
	daInstallation = 1,
	daUninstallation = 2,
	daDetection = 3,
	daOptionalInstallation = 4,
}


[AllowDuplicates]
public enum UpdateExceptionContext : int32
{
	uecGeneral = 1,
	uecWindowsDriver = 2,
	uecWindowsInstaller = 3,
	uecSearchIncomplete = 4,
}


[AllowDuplicates]
public enum AutomaticUpdatesUserType : int32
{
	auutCurrentUser = 1,
	auutLocalAdministrator = 2,
}


[AllowDuplicates]
public enum AutomaticUpdatesPermissionType : int32
{
	auptSetNotificationLevel = 1,
	auptDisableAutomaticUpdates = 2,
	auptSetIncludeRecommendedUpdates = 3,
	auptSetFeaturedUpdatesEnabled = 4,
	auptSetNonAdministratorsElevated = 5,
}


[AllowDuplicates]
public enum UpdateServiceRegistrationState : int32
{
	usrsNotRegistered = 1,
	usrsRegistrationPending = 2,
	usrsRegistered = 3,
}


[AllowDuplicates]
public enum SearchScope : int32
{
	searchScopeDefault = 0,
	searchScopeMachineOnly = 1,
	searchScopeCurrentUserOnly = 2,
	searchScopeMachineAndCurrentUser = 3,
	searchScopeMachineAndAllUsers = 4,
	searchScopeAllUsers = 5,
}


[AllowDuplicates]
public enum UpdateLockdownOption : int32
{
	uloForWebsiteAccess = 1,
}


[AllowDuplicates]
public enum AddServiceFlag : int32
{
	asfAllowPendingRegistration = 1,
	asfAllowOnlineRegistration = 2,
	asfRegisterServiceWithAU = 4,
}


[AllowDuplicates]
public enum UpdateServiceOption : int32
{
	usoNonVolatileService = 1,
}

#endregion


#region COM Class IDs
public static
{
	public const Guid CLSID_StringCollection = .(0x72c97d74, 0x7c3b, 0x40ae, 0xb7, 0x7d, 0xab, 0xdb, 0x22, 0xeb, 0xa6, 0xfb);


	public const Guid CLSID_UpdateSearcher = .(0xb699e5e8, 0x67ff, 0x4177, 0x88, 0xb0, 0x36, 0x84, 0xa3, 0x38, 0x8b, 0xfb);


	public const Guid CLSID_WebProxy = .(0x650503cf, 0x9108, 0x4ddc, 0xa2, 0xce, 0x6c, 0x23, 0x41, 0xe1, 0xc5, 0x82);


	public const Guid CLSID_SystemInformation = .(0xc01b9ba0, 0xbea7, 0x41ba, 0xb6, 0x04, 0xd0, 0xa3, 0x6f, 0x46, 0x91, 0x33);


	public const Guid CLSID_WindowsUpdateAgentInfo = .(0xc2e88c2f, 0x6f5b, 0x4aaa, 0x89, 0x4b, 0x55, 0xc8, 0x47, 0xad, 0x3a, 0x2d);


	public const Guid CLSID_AutomaticUpdates = .(0xbfe18e9c, 0x6d87, 0x4450, 0xb3, 0x7c, 0xe0, 0x2f, 0x0b, 0x37, 0x38, 0x03);


	public const Guid CLSID_UpdateCollection = .(0x13639463, 0x00db, 0x4646, 0x80, 0x3d, 0x52, 0x80, 0x26, 0x14, 0x0d, 0x88);


	public const Guid CLSID_UpdateDownloader = .(0x5baf654a, 0x5a07, 0x4264, 0xa2, 0x55, 0x9f, 0xf5, 0x4c, 0x71, 0x51, 0xe7);


	public const Guid CLSID_UpdateInstaller = .(0xd2e0fe7f, 0xd23e, 0x48e1, 0x93, 0xc0, 0x6f, 0xa8, 0xcc, 0x34, 0x64, 0x74);


	public const Guid CLSID_UpdateSession = .(0x4cb43d7f, 0x7eee, 0x4906, 0x86, 0x98, 0x60, 0xda, 0x1c, 0x38, 0xf2, 0xfe);


	public const Guid CLSID_UpdateServiceManager = .(0xf8d253d9, 0x89a4, 0x4daa, 0x87, 0xb6, 0x11, 0x68, 0x36, 0x9f, 0x0b, 0x21);


	public const Guid CLSID_InstallationAgent = .(0x317e92fc, 0x1679, 0x46fd, 0xa0, 0xb5, 0xf0, 0x89, 0x14, 0xdd, 0x86, 0x23);


}
#endregion

#region COM Types
[CRepr]struct IUpdateLockdown : IUnknown
{
	public new const Guid IID = .(0xa976c28d, 0x75a1, 0x42aa, 0x94, 0xae, 0x8a, 0xf8, 0xb8, 0x72, 0x08, 0x9a);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IUnknown.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 flags) LockDown;
	}


	public HRESULT LockDown(int32 flags) mut => VT.[Friend]LockDown(&this, flags);
}

[CRepr]struct IStringCollection : IDispatch
{
	public new const Guid IID = .(0xeff90582, 0x2ddc, 0x480f, 0xa0, 0x6d, 0x60, 0xf3, 0xfb, 0xc3, 0x62, 0xc3);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 index, BSTR* retval) get_Item;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 index, BSTR value) put_Item;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IUnknown** retval) get__NewEnum;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* retval) get_Count;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16* retval) get_ReadOnly;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR value, int32* retval) Add;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self) Clear;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IStringCollection** retval) Copy;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 index, BSTR value) Insert;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 index) RemoveAt;
	}


	public HRESULT get_Item(int32 index, BSTR* retval) mut => VT.[Friend]get_Item(&this, index, retval);

	public HRESULT put_Item(int32 index, BSTR value) mut => VT.[Friend]put_Item(&this, index, value);

	public HRESULT get__NewEnum(IUnknown** retval) mut => VT.[Friend]get__NewEnum(&this, retval);

	public HRESULT get_Count(int32* retval) mut => VT.[Friend]get_Count(&this, retval);

	public HRESULT get_ReadOnly(int16* retval) mut => VT.[Friend]get_ReadOnly(&this, retval);

	public HRESULT Add(BSTR value, int32* retval) mut => VT.[Friend]Add(&this, value, retval);

	public HRESULT Clear() mut => VT.[Friend]Clear(&this);

	public HRESULT Copy(IStringCollection** retval) mut => VT.[Friend]Copy(&this, retval);

	public HRESULT Insert(int32 index, BSTR value) mut => VT.[Friend]Insert(&this, index, value);

	public HRESULT RemoveAt(int32 index) mut => VT.[Friend]RemoveAt(&this, index);
}

[CRepr]struct IWebProxy : IDispatch
{
	public new const Guid IID = .(0x174c81fe, 0xaecd, 0x4dae, 0xb8, 0xa0, 0x2c, 0x63, 0x18, 0xdd, 0x86, 0xa8);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* retval) get_Address;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR value) put_Address;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IStringCollection** retval) get_BypassList;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IStringCollection* value) put_BypassList;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16* retval) get_BypassProxyOnLocal;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16 value) put_BypassProxyOnLocal;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16* retval) get_ReadOnly;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* retval) get_UserName;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR value) put_UserName;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR value) SetPassword;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IUnknown* parentWindow, BSTR title) PromptForCredentials;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, HWND parentWindow, BSTR title) PromptForCredentialsFromHwnd;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16* retval) get_AutoDetect;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16 value) put_AutoDetect;
	}


	public HRESULT get_Address(BSTR* retval) mut => VT.[Friend]get_Address(&this, retval);

	public HRESULT put_Address(BSTR value) mut => VT.[Friend]put_Address(&this, value);

	public HRESULT get_BypassList(IStringCollection** retval) mut => VT.[Friend]get_BypassList(&this, retval);

	public HRESULT put_BypassList(IStringCollection* value) mut => VT.[Friend]put_BypassList(&this, value);

	public HRESULT get_BypassProxyOnLocal(int16* retval) mut => VT.[Friend]get_BypassProxyOnLocal(&this, retval);

	public HRESULT put_BypassProxyOnLocal(int16 value) mut => VT.[Friend]put_BypassProxyOnLocal(&this, value);

	public HRESULT get_ReadOnly(int16* retval) mut => VT.[Friend]get_ReadOnly(&this, retval);

	public HRESULT get_UserName(BSTR* retval) mut => VT.[Friend]get_UserName(&this, retval);

	public HRESULT put_UserName(BSTR value) mut => VT.[Friend]put_UserName(&this, value);

	public HRESULT SetPassword(BSTR value) mut => VT.[Friend]SetPassword(&this, value);

	public HRESULT PromptForCredentials(IUnknown* parentWindow, BSTR title) mut => VT.[Friend]PromptForCredentials(&this, parentWindow, title);

	public HRESULT PromptForCredentialsFromHwnd(HWND parentWindow, BSTR title) mut => VT.[Friend]PromptForCredentialsFromHwnd(&this, parentWindow, title);

	public HRESULT get_AutoDetect(int16* retval) mut => VT.[Friend]get_AutoDetect(&this, retval);

	public HRESULT put_AutoDetect(int16 value) mut => VT.[Friend]put_AutoDetect(&this, value);
}

[CRepr]struct ISystemInformation : IDispatch
{
	public new const Guid IID = .(0xade87bf7, 0x7b56, 0x4275, 0x8f, 0xab, 0xb9, 0xb0, 0xe5, 0x91, 0x84, 0x4b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* retval) get_OemHardwareSupportLink;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16* retval) get_RebootRequired;
	}


	public HRESULT get_OemHardwareSupportLink(BSTR* retval) mut => VT.[Friend]get_OemHardwareSupportLink(&this, retval);

	public HRESULT get_RebootRequired(int16* retval) mut => VT.[Friend]get_RebootRequired(&this, retval);
}

[CRepr]struct IWindowsUpdateAgentInfo : IDispatch
{
	public new const Guid IID = .(0x85713fa1, 0x7796, 0x4fa2, 0xbe, 0x3b, 0xe2, 0xd6, 0x12, 0x4d, 0xd3, 0x73);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT varInfoIdentifier, VARIANT* retval) GetInfo;
	}


	public HRESULT GetInfo(VARIANT varInfoIdentifier, VARIANT* retval) mut => VT.[Friend]GetInfo(&this, varInfoIdentifier, retval);
}

[CRepr]struct IAutomaticUpdatesResults : IDispatch
{
	public new const Guid IID = .(0xe7a4d634, 0x7942, 0x4dd9, 0xa1, 0x11, 0x82, 0x22, 0x8b, 0xa3, 0x39, 0x01);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* retval) get_LastSearchSuccessDate;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* retval) get_LastInstallationSuccessDate;
	}


	public HRESULT get_LastSearchSuccessDate(VARIANT* retval) mut => VT.[Friend]get_LastSearchSuccessDate(&this, retval);

	public HRESULT get_LastInstallationSuccessDate(VARIANT* retval) mut => VT.[Friend]get_LastInstallationSuccessDate(&this, retval);
}

[CRepr]struct IAutomaticUpdatesSettings : IDispatch
{
	public new const Guid IID = .(0x2ee48f22, 0xaf3c, 0x405f, 0x89, 0x70, 0xf7, 0x1b, 0xe1, 0x2e, 0xe9, 0xa2);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, AutomaticUpdatesNotificationLevel* retval) get_NotificationLevel;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, AutomaticUpdatesNotificationLevel value) put_NotificationLevel;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16* retval) get_ReadOnly;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16* retval) get_Required;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, AutomaticUpdatesScheduledInstallationDay* retval) get_ScheduledInstallationDay;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, AutomaticUpdatesScheduledInstallationDay value) put_ScheduledInstallationDay;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* retval) get_ScheduledInstallationTime;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 value) put_ScheduledInstallationTime;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self) Refresh;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self) Save;
	}


	public HRESULT get_NotificationLevel(AutomaticUpdatesNotificationLevel* retval) mut => VT.[Friend]get_NotificationLevel(&this, retval);

	public HRESULT put_NotificationLevel(AutomaticUpdatesNotificationLevel value) mut => VT.[Friend]put_NotificationLevel(&this, value);

	public HRESULT get_ReadOnly(int16* retval) mut => VT.[Friend]get_ReadOnly(&this, retval);

	public HRESULT get_Required(int16* retval) mut => VT.[Friend]get_Required(&this, retval);

	public HRESULT get_ScheduledInstallationDay(AutomaticUpdatesScheduledInstallationDay* retval) mut => VT.[Friend]get_ScheduledInstallationDay(&this, retval);

	public HRESULT put_ScheduledInstallationDay(AutomaticUpdatesScheduledInstallationDay value) mut => VT.[Friend]put_ScheduledInstallationDay(&this, value);

	public HRESULT get_ScheduledInstallationTime(int32* retval) mut => VT.[Friend]get_ScheduledInstallationTime(&this, retval);

	public HRESULT put_ScheduledInstallationTime(int32 value) mut => VT.[Friend]put_ScheduledInstallationTime(&this, value);

	public HRESULT Refresh() mut => VT.[Friend]Refresh(&this);

	public HRESULT Save() mut => VT.[Friend]Save(&this);
}

[CRepr]struct IAutomaticUpdatesSettings2 : IAutomaticUpdatesSettings
{
	public new const Guid IID = .(0x6abc136a, 0xc3ca, 0x4384, 0x81, 0x71, 0xcb, 0x2b, 0x1e, 0x59, 0xb8, 0xdc);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IAutomaticUpdatesSettings.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16* retval) get_IncludeRecommendedUpdates;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16 value) put_IncludeRecommendedUpdates;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, AutomaticUpdatesUserType userType, AutomaticUpdatesPermissionType permissionType, int16* userHasPermission) CheckPermission;
	}


	public HRESULT get_IncludeRecommendedUpdates(int16* retval) mut => VT.[Friend]get_IncludeRecommendedUpdates(&this, retval);

	public HRESULT put_IncludeRecommendedUpdates(int16 value) mut => VT.[Friend]put_IncludeRecommendedUpdates(&this, value);

	public HRESULT CheckPermission(AutomaticUpdatesUserType userType, AutomaticUpdatesPermissionType permissionType, int16* userHasPermission) mut => VT.[Friend]CheckPermission(&this, userType, permissionType, userHasPermission);
}

[CRepr]struct IAutomaticUpdatesSettings3 : IAutomaticUpdatesSettings2
{
	public new const Guid IID = .(0xb587f5c3, 0xf57e, 0x485f, 0xbb, 0xf5, 0x0d, 0x18, 0x1c, 0x5c, 0xd0, 0xdc);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IAutomaticUpdatesSettings2.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16* retval) get_NonAdministratorsElevated;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16 value) put_NonAdministratorsElevated;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16* retval) get_FeaturedUpdatesEnabled;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16 value) put_FeaturedUpdatesEnabled;
	}


	public HRESULT get_NonAdministratorsElevated(int16* retval) mut => VT.[Friend]get_NonAdministratorsElevated(&this, retval);

	public HRESULT put_NonAdministratorsElevated(int16 value) mut => VT.[Friend]put_NonAdministratorsElevated(&this, value);

	public HRESULT get_FeaturedUpdatesEnabled(int16* retval) mut => VT.[Friend]get_FeaturedUpdatesEnabled(&this, retval);

	public HRESULT put_FeaturedUpdatesEnabled(int16 value) mut => VT.[Friend]put_FeaturedUpdatesEnabled(&this, value);
}

[CRepr]struct IAutomaticUpdates : IDispatch
{
	public new const Guid IID = .(0x673425bf, 0xc082, 0x4c7c, 0xbd, 0xfd, 0x56, 0x94, 0x64, 0xb8, 0xe0, 0xce);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self) DetectNow;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self) Pause;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self) Resume;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self) ShowSettingsDialog;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IAutomaticUpdatesSettings** retval) get_Settings;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16* retval) get_ServiceEnabled;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self) EnableService;
	}


	public HRESULT DetectNow() mut => VT.[Friend]DetectNow(&this);

	public HRESULT Pause() mut => VT.[Friend]Pause(&this);

	public HRESULT Resume() mut => VT.[Friend]Resume(&this);

	public HRESULT ShowSettingsDialog() mut => VT.[Friend]ShowSettingsDialog(&this);

	public HRESULT get_Settings(IAutomaticUpdatesSettings** retval) mut => VT.[Friend]get_Settings(&this, retval);

	public HRESULT get_ServiceEnabled(int16* retval) mut => VT.[Friend]get_ServiceEnabled(&this, retval);

	public HRESULT EnableService() mut => VT.[Friend]EnableService(&this);
}

[CRepr]struct IAutomaticUpdates2 : IAutomaticUpdates
{
	public new const Guid IID = .(0x4a2f5c31, 0xcfd9, 0x410e, 0xb7, 0xfb, 0x29, 0xa6, 0x53, 0x97, 0x3a, 0x0f);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IAutomaticUpdates.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IAutomaticUpdatesResults** retval) get_Results;
	}


	public HRESULT get_Results(IAutomaticUpdatesResults** retval) mut => VT.[Friend]get_Results(&this, retval);
}

[CRepr]struct IUpdateIdentity : IDispatch
{
	public new const Guid IID = .(0x46297823, 0x9940, 0x4c09, 0xae, 0xd9, 0xcd, 0x3e, 0xa6, 0xd0, 0x59, 0x68);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* retval) get_RevisionNumber;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* retval) get_UpdateID;
	}


	public HRESULT get_RevisionNumber(int32* retval) mut => VT.[Friend]get_RevisionNumber(&this, retval);

	public HRESULT get_UpdateID(BSTR* retval) mut => VT.[Friend]get_UpdateID(&this, retval);
}

[CRepr]struct IImageInformation : IDispatch
{
	public new const Guid IID = .(0x7c907864, 0x346c, 0x4aeb, 0x8f, 0x3f, 0x57, 0xda, 0x28, 0x9f, 0x96, 0x9f);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* retval) get_AltText;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* retval) get_Height;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* retval) get_Source;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* retval) get_Width;
	}


	public HRESULT get_AltText(BSTR* retval) mut => VT.[Friend]get_AltText(&this, retval);

	public HRESULT get_Height(int32* retval) mut => VT.[Friend]get_Height(&this, retval);

	public HRESULT get_Source(BSTR* retval) mut => VT.[Friend]get_Source(&this, retval);

	public HRESULT get_Width(int32* retval) mut => VT.[Friend]get_Width(&this, retval);
}

[CRepr]struct ICategory : IDispatch
{
	public new const Guid IID = .(0x81ddc1b8, 0x9d35, 0x47a6, 0xb4, 0x71, 0x5b, 0x80, 0xf5, 0x19, 0x22, 0x3b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* retval) get_Name;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* retval) get_CategoryID;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, ICategoryCollection** retval) get_Children;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* retval) get_Description;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IImageInformation** retval) get_Image;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* retval) get_Order;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, ICategory** retval) get_Parent;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* retval) get_Type;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IUpdateCollection** retval) get_Updates;
	}


	public HRESULT get_Name(BSTR* retval) mut => VT.[Friend]get_Name(&this, retval);

	public HRESULT get_CategoryID(BSTR* retval) mut => VT.[Friend]get_CategoryID(&this, retval);

	public HRESULT get_Children(ICategoryCollection** retval) mut => VT.[Friend]get_Children(&this, retval);

	public HRESULT get_Description(BSTR* retval) mut => VT.[Friend]get_Description(&this, retval);

	public HRESULT get_Image(IImageInformation** retval) mut => VT.[Friend]get_Image(&this, retval);

	public HRESULT get_Order(int32* retval) mut => VT.[Friend]get_Order(&this, retval);

	public HRESULT get_Parent(ICategory** retval) mut => VT.[Friend]get_Parent(&this, retval);

	public HRESULT get_Type(BSTR* retval) mut => VT.[Friend]get_Type(&this, retval);

	public HRESULT get_Updates(IUpdateCollection** retval) mut => VT.[Friend]get_Updates(&this, retval);
}

[CRepr]struct ICategoryCollection : IDispatch
{
	public new const Guid IID = .(0x3a56bfb8, 0x576c, 0x43f7, 0x93, 0x35, 0xfe, 0x48, 0x38, 0xfd, 0x7e, 0x37);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 index, ICategory** retval) get_Item;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IUnknown** retval) get__NewEnum;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* retval) get_Count;
	}


	public HRESULT get_Item(int32 index, ICategory** retval) mut => VT.[Friend]get_Item(&this, index, retval);

	public HRESULT get__NewEnum(IUnknown** retval) mut => VT.[Friend]get__NewEnum(&this, retval);

	public HRESULT get_Count(int32* retval) mut => VT.[Friend]get_Count(&this, retval);
}

[CRepr]struct IInstallationBehavior : IDispatch
{
	public new const Guid IID = .(0xd9a59339, 0xe245, 0x4dbd, 0x96, 0x86, 0x4d, 0x57, 0x63, 0xe3, 0x96, 0x24);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16* retval) get_CanRequestUserInput;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, InstallationImpact* retval) get_Impact;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, InstallationRebootBehavior* retval) get_RebootBehavior;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16* retval) get_RequiresNetworkConnectivity;
	}


	public HRESULT get_CanRequestUserInput(int16* retval) mut => VT.[Friend]get_CanRequestUserInput(&this, retval);

	public HRESULT get_Impact(InstallationImpact* retval) mut => VT.[Friend]get_Impact(&this, retval);

	public HRESULT get_RebootBehavior(InstallationRebootBehavior* retval) mut => VT.[Friend]get_RebootBehavior(&this, retval);

	public HRESULT get_RequiresNetworkConnectivity(int16* retval) mut => VT.[Friend]get_RequiresNetworkConnectivity(&this, retval);
}

[CRepr]struct IUpdateDownloadContent : IDispatch
{
	public new const Guid IID = .(0x54a2cb2d, 0x9a0c, 0x48b6, 0x8a, 0x50, 0x9a, 0xbb, 0x69, 0xee, 0x2d, 0x02);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* retval) get_DownloadUrl;
	}


	public HRESULT get_DownloadUrl(BSTR* retval) mut => VT.[Friend]get_DownloadUrl(&this, retval);
}

[CRepr]struct IUpdateDownloadContent2 : IUpdateDownloadContent
{
	public new const Guid IID = .(0xc97ad11b, 0xf257, 0x420b, 0x9d, 0x9f, 0x37, 0x7f, 0x73, 0x3f, 0x6f, 0x68);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IUpdateDownloadContent.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16* retval) get_IsDeltaCompressedContent;
	}


	public HRESULT get_IsDeltaCompressedContent(int16* retval) mut => VT.[Friend]get_IsDeltaCompressedContent(&this, retval);
}

[CRepr]struct IUpdateDownloadContentCollection : IDispatch
{
	public new const Guid IID = .(0xbc5513c8, 0xb3b8, 0x4bf7, 0xa4, 0xd4, 0x36, 0x1c, 0x0d, 0x8c, 0x88, 0xba);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 index, IUpdateDownloadContent** retval) get_Item;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IUnknown** retval) get__NewEnum;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* retval) get_Count;
	}


	public HRESULT get_Item(int32 index, IUpdateDownloadContent** retval) mut => VT.[Friend]get_Item(&this, index, retval);

	public HRESULT get__NewEnum(IUnknown** retval) mut => VT.[Friend]get__NewEnum(&this, retval);

	public HRESULT get_Count(int32* retval) mut => VT.[Friend]get_Count(&this, retval);
}

[CRepr]struct IUpdate : IDispatch
{
	public new const Guid IID = .(0x6a92b07a, 0xd821, 0x4682, 0xb4, 0x23, 0x5c, 0x80, 0x50, 0x22, 0xcc, 0x4d);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* retval) get_Title;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16* retval) get_AutoSelectOnWebSites;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IUpdateCollection** retval) get_BundledUpdates;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16* retval) get_CanRequireSource;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, ICategoryCollection** retval) get_Categories;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* retval) get_Deadline;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16* retval) get_DeltaCompressedContentAvailable;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16* retval) get_DeltaCompressedContentPreferred;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* retval) get_Description;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16* retval) get_EulaAccepted;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* retval) get_EulaText;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* retval) get_HandlerID;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IUpdateIdentity** retval) get_Identity;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IImageInformation** retval) get_Image;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IInstallationBehavior** retval) get_InstallationBehavior;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16* retval) get_IsBeta;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16* retval) get_IsDownloaded;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16* retval) get_IsHidden;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16 value) put_IsHidden;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16* retval) get_IsInstalled;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16* retval) get_IsMandatory;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16* retval) get_IsUninstallable;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IStringCollection** retval) get_Languages;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, double* retval) get_LastDeploymentChangeTime;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, DECIMAL* retval) get_MaxDownloadSize;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, DECIMAL* retval) get_MinDownloadSize;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IStringCollection** retval) get_MoreInfoUrls;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* retval) get_MsrcSeverity;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* retval) get_RecommendedCpuSpeed;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* retval) get_RecommendedHardDiskSpace;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* retval) get_RecommendedMemory;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* retval) get_ReleaseNotes;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IStringCollection** retval) get_SecurityBulletinIDs;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IStringCollection** retval) get_SupersededUpdateIDs;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* retval) get_SupportUrl;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, UpdateType* retval) get_Type;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* retval) get_UninstallationNotes;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IInstallationBehavior** retval) get_UninstallationBehavior;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IStringCollection** retval) get_UninstallationSteps;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IStringCollection** retval) get_KBArticleIDs;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self) AcceptEula;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, DeploymentAction* retval) get_DeploymentAction;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR path, int16 toExtractCabFiles) CopyFromCache;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, DownloadPriority* retval) get_DownloadPriority;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IUpdateDownloadContentCollection** retval) get_DownloadContents;
	}


	public HRESULT get_Title(BSTR* retval) mut => VT.[Friend]get_Title(&this, retval);

	public HRESULT get_AutoSelectOnWebSites(int16* retval) mut => VT.[Friend]get_AutoSelectOnWebSites(&this, retval);

	public HRESULT get_BundledUpdates(IUpdateCollection** retval) mut => VT.[Friend]get_BundledUpdates(&this, retval);

	public HRESULT get_CanRequireSource(int16* retval) mut => VT.[Friend]get_CanRequireSource(&this, retval);

	public HRESULT get_Categories(ICategoryCollection** retval) mut => VT.[Friend]get_Categories(&this, retval);

	public HRESULT get_Deadline(VARIANT* retval) mut => VT.[Friend]get_Deadline(&this, retval);

	public HRESULT get_DeltaCompressedContentAvailable(int16* retval) mut => VT.[Friend]get_DeltaCompressedContentAvailable(&this, retval);

	public HRESULT get_DeltaCompressedContentPreferred(int16* retval) mut => VT.[Friend]get_DeltaCompressedContentPreferred(&this, retval);

	public HRESULT get_Description(BSTR* retval) mut => VT.[Friend]get_Description(&this, retval);

	public HRESULT get_EulaAccepted(int16* retval) mut => VT.[Friend]get_EulaAccepted(&this, retval);

	public HRESULT get_EulaText(BSTR* retval) mut => VT.[Friend]get_EulaText(&this, retval);

	public HRESULT get_HandlerID(BSTR* retval) mut => VT.[Friend]get_HandlerID(&this, retval);

	public HRESULT get_Identity(IUpdateIdentity** retval) mut => VT.[Friend]get_Identity(&this, retval);

	public HRESULT get_Image(IImageInformation** retval) mut => VT.[Friend]get_Image(&this, retval);

	public HRESULT get_InstallationBehavior(IInstallationBehavior** retval) mut => VT.[Friend]get_InstallationBehavior(&this, retval);

	public HRESULT get_IsBeta(int16* retval) mut => VT.[Friend]get_IsBeta(&this, retval);

	public HRESULT get_IsDownloaded(int16* retval) mut => VT.[Friend]get_IsDownloaded(&this, retval);

	public HRESULT get_IsHidden(int16* retval) mut => VT.[Friend]get_IsHidden(&this, retval);

	public HRESULT put_IsHidden(int16 value) mut => VT.[Friend]put_IsHidden(&this, value);

	public HRESULT get_IsInstalled(int16* retval) mut => VT.[Friend]get_IsInstalled(&this, retval);

	public HRESULT get_IsMandatory(int16* retval) mut => VT.[Friend]get_IsMandatory(&this, retval);

	public HRESULT get_IsUninstallable(int16* retval) mut => VT.[Friend]get_IsUninstallable(&this, retval);

	public HRESULT get_Languages(IStringCollection** retval) mut => VT.[Friend]get_Languages(&this, retval);

	public HRESULT get_LastDeploymentChangeTime(double* retval) mut => VT.[Friend]get_LastDeploymentChangeTime(&this, retval);

	public HRESULT get_MaxDownloadSize(DECIMAL* retval) mut => VT.[Friend]get_MaxDownloadSize(&this, retval);

	public HRESULT get_MinDownloadSize(DECIMAL* retval) mut => VT.[Friend]get_MinDownloadSize(&this, retval);

	public HRESULT get_MoreInfoUrls(IStringCollection** retval) mut => VT.[Friend]get_MoreInfoUrls(&this, retval);

	public HRESULT get_MsrcSeverity(BSTR* retval) mut => VT.[Friend]get_MsrcSeverity(&this, retval);

	public HRESULT get_RecommendedCpuSpeed(int32* retval) mut => VT.[Friend]get_RecommendedCpuSpeed(&this, retval);

	public HRESULT get_RecommendedHardDiskSpace(int32* retval) mut => VT.[Friend]get_RecommendedHardDiskSpace(&this, retval);

	public HRESULT get_RecommendedMemory(int32* retval) mut => VT.[Friend]get_RecommendedMemory(&this, retval);

	public HRESULT get_ReleaseNotes(BSTR* retval) mut => VT.[Friend]get_ReleaseNotes(&this, retval);

	public HRESULT get_SecurityBulletinIDs(IStringCollection** retval) mut => VT.[Friend]get_SecurityBulletinIDs(&this, retval);

	public HRESULT get_SupersededUpdateIDs(IStringCollection** retval) mut => VT.[Friend]get_SupersededUpdateIDs(&this, retval);

	public HRESULT get_SupportUrl(BSTR* retval) mut => VT.[Friend]get_SupportUrl(&this, retval);

	public HRESULT get_Type(UpdateType* retval) mut => VT.[Friend]get_Type(&this, retval);

	public HRESULT get_UninstallationNotes(BSTR* retval) mut => VT.[Friend]get_UninstallationNotes(&this, retval);

	public HRESULT get_UninstallationBehavior(IInstallationBehavior** retval) mut => VT.[Friend]get_UninstallationBehavior(&this, retval);

	public HRESULT get_UninstallationSteps(IStringCollection** retval) mut => VT.[Friend]get_UninstallationSteps(&this, retval);

	public HRESULT get_KBArticleIDs(IStringCollection** retval) mut => VT.[Friend]get_KBArticleIDs(&this, retval);

	public HRESULT AcceptEula() mut => VT.[Friend]AcceptEula(&this);

	public HRESULT get_DeploymentAction(DeploymentAction* retval) mut => VT.[Friend]get_DeploymentAction(&this, retval);

	public HRESULT CopyFromCache(BSTR path, int16 toExtractCabFiles) mut => VT.[Friend]CopyFromCache(&this, path, toExtractCabFiles);

	public HRESULT get_DownloadPriority(DownloadPriority* retval) mut => VT.[Friend]get_DownloadPriority(&this, retval);

	public HRESULT get_DownloadContents(IUpdateDownloadContentCollection** retval) mut => VT.[Friend]get_DownloadContents(&this, retval);
}

[CRepr]struct IWindowsDriverUpdate : IUpdate
{
	public new const Guid IID = .(0xb383cd1a, 0x5ce9, 0x4504, 0x9f, 0x63, 0x76, 0x4b, 0x12, 0x36, 0xf1, 0x91);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IUpdate.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* retval) get_DriverClass;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* retval) get_DriverHardwareID;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* retval) get_DriverManufacturer;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* retval) get_DriverModel;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* retval) get_DriverProvider;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, double* retval) get_DriverVerDate;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* retval) get_DeviceProblemNumber;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* retval) get_DeviceStatus;
	}


	public HRESULT get_DriverClass(BSTR* retval) mut => VT.[Friend]get_DriverClass(&this, retval);

	public HRESULT get_DriverHardwareID(BSTR* retval) mut => VT.[Friend]get_DriverHardwareID(&this, retval);

	public HRESULT get_DriverManufacturer(BSTR* retval) mut => VT.[Friend]get_DriverManufacturer(&this, retval);

	public HRESULT get_DriverModel(BSTR* retval) mut => VT.[Friend]get_DriverModel(&this, retval);

	public HRESULT get_DriverProvider(BSTR* retval) mut => VT.[Friend]get_DriverProvider(&this, retval);

	public HRESULT get_DriverVerDate(double* retval) mut => VT.[Friend]get_DriverVerDate(&this, retval);

	public HRESULT get_DeviceProblemNumber(int32* retval) mut => VT.[Friend]get_DeviceProblemNumber(&this, retval);

	public HRESULT get_DeviceStatus(int32* retval) mut => VT.[Friend]get_DeviceStatus(&this, retval);
}

[CRepr]struct IUpdate2 : IUpdate
{
	public new const Guid IID = .(0x144fe9b0, 0xd23d, 0x4a8b, 0x86, 0x34, 0xfb, 0x44, 0x57, 0x53, 0x3b, 0x7a);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IUpdate.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16* retval) get_RebootRequired;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16* retval) get_IsPresent;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IStringCollection** retval) get_CveIDs;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IStringCollection* pFiles) CopyToCache;
	}


	public HRESULT get_RebootRequired(int16* retval) mut => VT.[Friend]get_RebootRequired(&this, retval);

	public HRESULT get_IsPresent(int16* retval) mut => VT.[Friend]get_IsPresent(&this, retval);

	public HRESULT get_CveIDs(IStringCollection** retval) mut => VT.[Friend]get_CveIDs(&this, retval);

	public HRESULT CopyToCache(IStringCollection* pFiles) mut => VT.[Friend]CopyToCache(&this, pFiles);
}

[CRepr]struct IUpdate3 : IUpdate2
{
	public new const Guid IID = .(0x112eda6b, 0x95b3, 0x476f, 0x9d, 0x90, 0xae, 0xe8, 0x2c, 0x6b, 0x81, 0x81);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IUpdate2.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16* retval) get_BrowseOnly;
	}


	public HRESULT get_BrowseOnly(int16* retval) mut => VT.[Friend]get_BrowseOnly(&this, retval);
}

[CRepr]struct IUpdate4 : IUpdate3
{
	public new const Guid IID = .(0x27e94b0d, 0x5139, 0x49a2, 0x9a, 0x61, 0x93, 0x52, 0x2d, 0xc5, 0x46, 0x52);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IUpdate3.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16* retval) get_PerUser;
	}


	public HRESULT get_PerUser(int16* retval) mut => VT.[Friend]get_PerUser(&this, retval);
}

[CRepr]struct IUpdate5 : IUpdate4
{
	public new const Guid IID = .(0xc1c2f21a, 0xd2f4, 0x4902, 0xb5, 0xc6, 0x8a, 0x08, 0x1c, 0x19, 0xa8, 0x90);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IUpdate4.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, AutoSelectionMode* retval) get_AutoSelection;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, AutoDownloadMode* retval) get_AutoDownload;
	}


	public HRESULT get_AutoSelection(AutoSelectionMode* retval) mut => VT.[Friend]get_AutoSelection(&this, retval);

	public HRESULT get_AutoDownload(AutoDownloadMode* retval) mut => VT.[Friend]get_AutoDownload(&this, retval);
}

[CRepr]struct IWindowsDriverUpdate2 : IWindowsDriverUpdate
{
	public new const Guid IID = .(0x615c4269, 0x7a48, 0x43bd, 0x96, 0xb7, 0xbf, 0x6c, 0xa2, 0x7d, 0x6c, 0x3e);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IWindowsDriverUpdate.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16* retval) get_RebootRequired;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16* retval) get_IsPresent;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IStringCollection** retval) get_CveIDs;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IStringCollection* pFiles) CopyToCache;
	}


	public HRESULT get_RebootRequired(int16* retval) mut => VT.[Friend]get_RebootRequired(&this, retval);

	public HRESULT get_IsPresent(int16* retval) mut => VT.[Friend]get_IsPresent(&this, retval);

	public HRESULT get_CveIDs(IStringCollection** retval) mut => VT.[Friend]get_CveIDs(&this, retval);

	public HRESULT CopyToCache(IStringCollection* pFiles) mut => VT.[Friend]CopyToCache(&this, pFiles);
}

[CRepr]struct IWindowsDriverUpdate3 : IWindowsDriverUpdate2
{
	public new const Guid IID = .(0x49ebd502, 0x4a96, 0x41bd, 0x9e, 0x3e, 0x4c, 0x50, 0x57, 0xf4, 0x25, 0x0c);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IWindowsDriverUpdate2.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16* retval) get_BrowseOnly;
	}


	public HRESULT get_BrowseOnly(int16* retval) mut => VT.[Friend]get_BrowseOnly(&this, retval);
}

[CRepr]struct IWindowsDriverUpdateEntry : IDispatch
{
	public new const Guid IID = .(0xed8bfe40, 0xa60b, 0x42ea, 0x96, 0x52, 0x81, 0x7d, 0xfc, 0xfa, 0x23, 0xec);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* retval) get_DriverClass;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* retval) get_DriverHardwareID;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* retval) get_DriverManufacturer;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* retval) get_DriverModel;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* retval) get_DriverProvider;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, double* retval) get_DriverVerDate;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* retval) get_DeviceProblemNumber;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* retval) get_DeviceStatus;
	}


	public HRESULT get_DriverClass(BSTR* retval) mut => VT.[Friend]get_DriverClass(&this, retval);

	public HRESULT get_DriverHardwareID(BSTR* retval) mut => VT.[Friend]get_DriverHardwareID(&this, retval);

	public HRESULT get_DriverManufacturer(BSTR* retval) mut => VT.[Friend]get_DriverManufacturer(&this, retval);

	public HRESULT get_DriverModel(BSTR* retval) mut => VT.[Friend]get_DriverModel(&this, retval);

	public HRESULT get_DriverProvider(BSTR* retval) mut => VT.[Friend]get_DriverProvider(&this, retval);

	public HRESULT get_DriverVerDate(double* retval) mut => VT.[Friend]get_DriverVerDate(&this, retval);

	public HRESULT get_DeviceProblemNumber(int32* retval) mut => VT.[Friend]get_DeviceProblemNumber(&this, retval);

	public HRESULT get_DeviceStatus(int32* retval) mut => VT.[Friend]get_DeviceStatus(&this, retval);
}

[CRepr]struct IWindowsDriverUpdateEntryCollection : IDispatch
{
	public new const Guid IID = .(0x0d521700, 0xa372, 0x4bef, 0x82, 0x8b, 0x3d, 0x00, 0xc1, 0x0a, 0xde, 0xbd);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 index, IWindowsDriverUpdateEntry** retval) get_Item;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IUnknown** retval) get__NewEnum;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* retval) get_Count;
	}


	public HRESULT get_Item(int32 index, IWindowsDriverUpdateEntry** retval) mut => VT.[Friend]get_Item(&this, index, retval);

	public HRESULT get__NewEnum(IUnknown** retval) mut => VT.[Friend]get__NewEnum(&this, retval);

	public HRESULT get_Count(int32* retval) mut => VT.[Friend]get_Count(&this, retval);
}

[CRepr]struct IWindowsDriverUpdate4 : IWindowsDriverUpdate3
{
	public new const Guid IID = .(0x004c6a2b, 0x0c19, 0x4c69, 0x9f, 0x5c, 0xa2, 0x69, 0xb2, 0x56, 0x0d, 0xb9);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IWindowsDriverUpdate3.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IWindowsDriverUpdateEntryCollection** retval) get_WindowsDriverUpdateEntries;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16* retval) get_PerUser;
	}


	public HRESULT get_WindowsDriverUpdateEntries(IWindowsDriverUpdateEntryCollection** retval) mut => VT.[Friend]get_WindowsDriverUpdateEntries(&this, retval);

	public HRESULT get_PerUser(int16* retval) mut => VT.[Friend]get_PerUser(&this, retval);
}

[CRepr]struct IWindowsDriverUpdate5 : IWindowsDriverUpdate4
{
	public new const Guid IID = .(0x70cf5c82, 0x8642, 0x42bb, 0x9d, 0xbc, 0x0c, 0xfd, 0x26, 0x3c, 0x6c, 0x4f);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IWindowsDriverUpdate4.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, AutoSelectionMode* retval) get_AutoSelection;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, AutoDownloadMode* retval) get_AutoDownload;
	}


	public HRESULT get_AutoSelection(AutoSelectionMode* retval) mut => VT.[Friend]get_AutoSelection(&this, retval);

	public HRESULT get_AutoDownload(AutoDownloadMode* retval) mut => VT.[Friend]get_AutoDownload(&this, retval);
}

[CRepr]struct IUpdateCollection : IDispatch
{
	public new const Guid IID = .(0x07f7438c, 0x7709, 0x4ca5, 0xb5, 0x18, 0x91, 0x27, 0x92, 0x88, 0x13, 0x4e);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 index, IUpdate** retval) get_Item;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 index, IUpdate* value) put_Item;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IUnknown** retval) get__NewEnum;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* retval) get_Count;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16* retval) get_ReadOnly;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IUpdate* value, int32* retval) Add;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self) Clear;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IUpdateCollection** retval) Copy;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 index, IUpdate* value) Insert;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 index) RemoveAt;
	}


	public HRESULT get_Item(int32 index, IUpdate** retval) mut => VT.[Friend]get_Item(&this, index, retval);

	public HRESULT put_Item(int32 index, IUpdate* value) mut => VT.[Friend]put_Item(&this, index, value);

	public HRESULT get__NewEnum(IUnknown** retval) mut => VT.[Friend]get__NewEnum(&this, retval);

	public HRESULT get_Count(int32* retval) mut => VT.[Friend]get_Count(&this, retval);

	public HRESULT get_ReadOnly(int16* retval) mut => VT.[Friend]get_ReadOnly(&this, retval);

	public HRESULT Add(IUpdate* value, int32* retval) mut => VT.[Friend]Add(&this, value, retval);

	public HRESULT Clear() mut => VT.[Friend]Clear(&this);

	public HRESULT Copy(IUpdateCollection** retval) mut => VT.[Friend]Copy(&this, retval);

	public HRESULT Insert(int32 index, IUpdate* value) mut => VT.[Friend]Insert(&this, index, value);

	public HRESULT RemoveAt(int32 index) mut => VT.[Friend]RemoveAt(&this, index);
}

[CRepr]struct IUpdateException : IDispatch
{
	public new const Guid IID = .(0xa376dd5e, 0x09d4, 0x427f, 0xaf, 0x7c, 0xfe, 0xd5, 0xb6, 0xe1, 0xc1, 0xd6);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* retval) get_Message;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* retval) get_HResult;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, UpdateExceptionContext* retval) get_Context;
	}


	public HRESULT get_Message(BSTR* retval) mut => VT.[Friend]get_Message(&this, retval);

	public HRESULT get_HResult(int32* retval) mut => VT.[Friend]get_HResult(&this, retval);

	public HRESULT get_Context(UpdateExceptionContext* retval) mut => VT.[Friend]get_Context(&this, retval);
}

[CRepr]struct IInvalidProductLicenseException : IUpdateException
{
	public new const Guid IID = .(0xa37d00f5, 0x7bb0, 0x4953, 0xb4, 0x14, 0xf9, 0xe9, 0x83, 0x26, 0xf2, 0xe8);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IUpdateException.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* retval) get_Product;
	}


	public HRESULT get_Product(BSTR* retval) mut => VT.[Friend]get_Product(&this, retval);
}

[CRepr]struct IUpdateExceptionCollection : IDispatch
{
	public new const Guid IID = .(0x503626a3, 0x8e14, 0x4729, 0x93, 0x55, 0x0f, 0xe6, 0x64, 0xbd, 0x23, 0x21);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 index, IUpdateException** retval) get_Item;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IUnknown** retval) get__NewEnum;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* retval) get_Count;
	}


	public HRESULT get_Item(int32 index, IUpdateException** retval) mut => VT.[Friend]get_Item(&this, index, retval);

	public HRESULT get__NewEnum(IUnknown** retval) mut => VT.[Friend]get__NewEnum(&this, retval);

	public HRESULT get_Count(int32* retval) mut => VT.[Friend]get_Count(&this, retval);
}

[CRepr]struct ISearchResult : IDispatch
{
	public new const Guid IID = .(0xd40cff62, 0xe08c, 0x4498, 0x94, 0x1a, 0x01, 0xe2, 0x5f, 0x0f, 0xd3, 0x3c);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, OperationResultCode* retval) get_ResultCode;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, ICategoryCollection** retval) get_RootCategories;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IUpdateCollection** retval) get_Updates;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IUpdateExceptionCollection** retval) get_Warnings;
	}


	public HRESULT get_ResultCode(OperationResultCode* retval) mut => VT.[Friend]get_ResultCode(&this, retval);

	public HRESULT get_RootCategories(ICategoryCollection** retval) mut => VT.[Friend]get_RootCategories(&this, retval);

	public HRESULT get_Updates(IUpdateCollection** retval) mut => VT.[Friend]get_Updates(&this, retval);

	public HRESULT get_Warnings(IUpdateExceptionCollection** retval) mut => VT.[Friend]get_Warnings(&this, retval);
}

[CRepr]struct ISearchJob : IDispatch
{
	public new const Guid IID = .(0x7366ea16, 0x7a1a, 0x4ea2, 0xb0, 0x42, 0x97, 0x3d, 0x3e, 0x9c, 0xd9, 0x9b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* retval) get_AsyncState;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16* retval) get_IsCompleted;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self) CleanUp;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self) RequestAbort;
	}


	public HRESULT get_AsyncState(VARIANT* retval) mut => VT.[Friend]get_AsyncState(&this, retval);

	public HRESULT get_IsCompleted(int16* retval) mut => VT.[Friend]get_IsCompleted(&this, retval);

	public HRESULT CleanUp() mut => VT.[Friend]CleanUp(&this);

	public HRESULT RequestAbort() mut => VT.[Friend]RequestAbort(&this);
}

[CRepr]struct ISearchCompletedCallbackArgs : IDispatch
{
	public new const Guid IID = .(0xa700a634, 0x2850, 0x4c47, 0x93, 0x8a, 0x9e, 0x4b, 0x6e, 0x5a, 0xf9, 0xa6);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
	}

}

[CRepr]struct ISearchCompletedCallback : IUnknown
{
	public new const Guid IID = .(0x88aee058, 0xd4b0, 0x4725, 0xa2, 0xf1, 0x81, 0x4a, 0x67, 0xae, 0x96, 0x4c);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IUnknown.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, ISearchJob* searchJob, ISearchCompletedCallbackArgs* callbackArgs) Invoke;
	}


	public HRESULT Invoke(ISearchJob* searchJob, ISearchCompletedCallbackArgs* callbackArgs) mut => VT.[Friend]Invoke(&this, searchJob, callbackArgs);
}

[CRepr]struct IUpdateHistoryEntry : IDispatch
{
	public new const Guid IID = .(0xbe56a644, 0xaf0e, 0x4e0e, 0xa3, 0x11, 0xc1, 0xd8, 0xe6, 0x95, 0xcb, 0xff);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, UpdateOperation* retval) get_Operation;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, OperationResultCode* retval) get_ResultCode;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* retval) get_HResult;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, double* retval) get_Date;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IUpdateIdentity** retval) get_UpdateIdentity;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* retval) get_Title;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* retval) get_Description;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* retval) get_UnmappedResultCode;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* retval) get_ClientApplicationID;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, ServerSelection* retval) get_ServerSelection;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* retval) get_ServiceID;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IStringCollection** retval) get_UninstallationSteps;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* retval) get_UninstallationNotes;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* retval) get_SupportUrl;
	}


	public HRESULT get_Operation(UpdateOperation* retval) mut => VT.[Friend]get_Operation(&this, retval);

	public HRESULT get_ResultCode(OperationResultCode* retval) mut => VT.[Friend]get_ResultCode(&this, retval);

	public HRESULT get_HResult(int32* retval) mut => VT.[Friend]get_HResult(&this, retval);

	public HRESULT get_Date(double* retval) mut => VT.[Friend]get_Date(&this, retval);

	public HRESULT get_UpdateIdentity(IUpdateIdentity** retval) mut => VT.[Friend]get_UpdateIdentity(&this, retval);

	public HRESULT get_Title(BSTR* retval) mut => VT.[Friend]get_Title(&this, retval);

	public HRESULT get_Description(BSTR* retval) mut => VT.[Friend]get_Description(&this, retval);

	public HRESULT get_UnmappedResultCode(int32* retval) mut => VT.[Friend]get_UnmappedResultCode(&this, retval);

	public HRESULT get_ClientApplicationID(BSTR* retval) mut => VT.[Friend]get_ClientApplicationID(&this, retval);

	public HRESULT get_ServerSelection(ServerSelection* retval) mut => VT.[Friend]get_ServerSelection(&this, retval);

	public HRESULT get_ServiceID(BSTR* retval) mut => VT.[Friend]get_ServiceID(&this, retval);

	public HRESULT get_UninstallationSteps(IStringCollection** retval) mut => VT.[Friend]get_UninstallationSteps(&this, retval);

	public HRESULT get_UninstallationNotes(BSTR* retval) mut => VT.[Friend]get_UninstallationNotes(&this, retval);

	public HRESULT get_SupportUrl(BSTR* retval) mut => VT.[Friend]get_SupportUrl(&this, retval);
}

[CRepr]struct IUpdateHistoryEntry2 : IUpdateHistoryEntry
{
	public new const Guid IID = .(0xc2bfb780, 0x4539, 0x4132, 0xab, 0x8c, 0x0a, 0x87, 0x72, 0x01, 0x3a, 0xb6);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IUpdateHistoryEntry.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, ICategoryCollection** retval) get_Categories;
	}


	public HRESULT get_Categories(ICategoryCollection** retval) mut => VT.[Friend]get_Categories(&this, retval);
}

[CRepr]struct IUpdateHistoryEntryCollection : IDispatch
{
	public new const Guid IID = .(0xa7f04f3c, 0xa290, 0x435b, 0xaa, 0xdf, 0xa1, 0x16, 0xc3, 0x35, 0x7a, 0x5c);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 index, IUpdateHistoryEntry** retval) get_Item;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IUnknown** retval) get__NewEnum;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* retval) get_Count;
	}


	public HRESULT get_Item(int32 index, IUpdateHistoryEntry** retval) mut => VT.[Friend]get_Item(&this, index, retval);

	public HRESULT get__NewEnum(IUnknown** retval) mut => VT.[Friend]get__NewEnum(&this, retval);

	public HRESULT get_Count(int32* retval) mut => VT.[Friend]get_Count(&this, retval);
}

[CRepr]struct IUpdateSearcher : IDispatch
{
	public new const Guid IID = .(0x8f45abf1, 0xf9ae, 0x4b95, 0xa9, 0x33, 0xf0, 0xf6, 0x6e, 0x50, 0x56, 0xea);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16* retval) get_CanAutomaticallyUpgradeService;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16 value) put_CanAutomaticallyUpgradeService;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* retval) get_ClientApplicationID;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR value) put_ClientApplicationID;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16* retval) get_IncludePotentiallySupersededUpdates;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16 value) put_IncludePotentiallySupersededUpdates;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, ServerSelection* retval) get_ServerSelection;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, ServerSelection value) put_ServerSelection;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR criteria, IUnknown* onCompleted, VARIANT state, ISearchJob** retval) BeginSearch;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, ISearchJob* searchJob, ISearchResult** retval) EndSearch;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR unescaped, BSTR* retval) EscapeString;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 startIndex, int32 count, IUpdateHistoryEntryCollection** retval) QueryHistory;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR criteria, ISearchResult** retval) Search;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16* retval) get_Online;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16 value) put_Online;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* retval) GetTotalHistoryCount;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* retval) get_ServiceID;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR value) put_ServiceID;
	}


	public HRESULT get_CanAutomaticallyUpgradeService(int16* retval) mut => VT.[Friend]get_CanAutomaticallyUpgradeService(&this, retval);

	public HRESULT put_CanAutomaticallyUpgradeService(int16 value) mut => VT.[Friend]put_CanAutomaticallyUpgradeService(&this, value);

	public HRESULT get_ClientApplicationID(BSTR* retval) mut => VT.[Friend]get_ClientApplicationID(&this, retval);

	public HRESULT put_ClientApplicationID(BSTR value) mut => VT.[Friend]put_ClientApplicationID(&this, value);

	public HRESULT get_IncludePotentiallySupersededUpdates(int16* retval) mut => VT.[Friend]get_IncludePotentiallySupersededUpdates(&this, retval);

	public HRESULT put_IncludePotentiallySupersededUpdates(int16 value) mut => VT.[Friend]put_IncludePotentiallySupersededUpdates(&this, value);

	public HRESULT get_ServerSelection(ServerSelection* retval) mut => VT.[Friend]get_ServerSelection(&this, retval);

	public HRESULT put_ServerSelection(ServerSelection value) mut => VT.[Friend]put_ServerSelection(&this, value);

	public HRESULT BeginSearch(BSTR criteria, IUnknown* onCompleted, VARIANT state, ISearchJob** retval) mut => VT.[Friend]BeginSearch(&this, criteria, onCompleted, state, retval);

	public HRESULT EndSearch(ISearchJob* searchJob, ISearchResult** retval) mut => VT.[Friend]EndSearch(&this, searchJob, retval);

	public HRESULT EscapeString(BSTR unescaped, BSTR* retval) mut => VT.[Friend]EscapeString(&this, unescaped, retval);

	public HRESULT QueryHistory(int32 startIndex, int32 count, IUpdateHistoryEntryCollection** retval) mut => VT.[Friend]QueryHistory(&this, startIndex, count, retval);

	public HRESULT Search(BSTR criteria, ISearchResult** retval) mut => VT.[Friend]Search(&this, criteria, retval);

	public HRESULT get_Online(int16* retval) mut => VT.[Friend]get_Online(&this, retval);

	public HRESULT put_Online(int16 value) mut => VT.[Friend]put_Online(&this, value);

	public HRESULT GetTotalHistoryCount(int32* retval) mut => VT.[Friend]GetTotalHistoryCount(&this, retval);

	public HRESULT get_ServiceID(BSTR* retval) mut => VT.[Friend]get_ServiceID(&this, retval);

	public HRESULT put_ServiceID(BSTR value) mut => VT.[Friend]put_ServiceID(&this, value);
}

[CRepr]struct IUpdateSearcher2 : IUpdateSearcher
{
	public new const Guid IID = .(0x4cbdcb2d, 0x1589, 0x4beb, 0xbd, 0x1c, 0x3e, 0x58, 0x2f, 0xf0, 0xad, 0xd0);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IUpdateSearcher.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16* retval) get_IgnoreDownloadPriority;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16 value) put_IgnoreDownloadPriority;
	}


	public HRESULT get_IgnoreDownloadPriority(int16* retval) mut => VT.[Friend]get_IgnoreDownloadPriority(&this, retval);

	public HRESULT put_IgnoreDownloadPriority(int16 value) mut => VT.[Friend]put_IgnoreDownloadPriority(&this, value);
}

[CRepr]struct IUpdateSearcher3 : IUpdateSearcher2
{
	public new const Guid IID = .(0x04c6895d, 0xeaf2, 0x4034, 0x97, 0xf3, 0x31, 0x1d, 0xe9, 0xbe, 0x41, 0x3a);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IUpdateSearcher2.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, SearchScope* retval) get_SearchScope;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, SearchScope value) put_SearchScope;
	}


	public HRESULT get_SearchScope(SearchScope* retval) mut => VT.[Friend]get_SearchScope(&this, retval);

	public HRESULT put_SearchScope(SearchScope value) mut => VT.[Friend]put_SearchScope(&this, value);
}

[CRepr]struct IUpdateDownloadResult : IDispatch
{
	public new const Guid IID = .(0xbf99af76, 0xb575, 0x42ad, 0x8a, 0xa4, 0x33, 0xcb, 0xb5, 0x47, 0x7a, 0xf1);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* retval) get_HResult;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, OperationResultCode* retval) get_ResultCode;
	}


	public HRESULT get_HResult(int32* retval) mut => VT.[Friend]get_HResult(&this, retval);

	public HRESULT get_ResultCode(OperationResultCode* retval) mut => VT.[Friend]get_ResultCode(&this, retval);
}

[CRepr]struct IDownloadResult : IDispatch
{
	public new const Guid IID = .(0xdaa4fdd0, 0x4727, 0x4dbe, 0xa1, 0xe7, 0x74, 0x5d, 0xca, 0x31, 0x71, 0x44);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* retval) get_HResult;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, OperationResultCode* retval) get_ResultCode;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 updateIndex, IUpdateDownloadResult** retval) GetUpdateResult;
	}


	public HRESULT get_HResult(int32* retval) mut => VT.[Friend]get_HResult(&this, retval);

	public HRESULT get_ResultCode(OperationResultCode* retval) mut => VT.[Friend]get_ResultCode(&this, retval);

	public HRESULT GetUpdateResult(int32 updateIndex, IUpdateDownloadResult** retval) mut => VT.[Friend]GetUpdateResult(&this, updateIndex, retval);
}

[CRepr]struct IDownloadProgress : IDispatch
{
	public new const Guid IID = .(0xd31a5bac, 0xf719, 0x4178, 0x9d, 0xbb, 0x5e, 0x2c, 0xb4, 0x7f, 0xd1, 0x8a);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, DECIMAL* retval) get_CurrentUpdateBytesDownloaded;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, DECIMAL* retval) get_CurrentUpdateBytesToDownload;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* retval) get_CurrentUpdateIndex;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* retval) get_PercentComplete;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, DECIMAL* retval) get_TotalBytesDownloaded;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, DECIMAL* retval) get_TotalBytesToDownload;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 updateIndex, IUpdateDownloadResult** retval) GetUpdateResult;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, DownloadPhase* retval) get_CurrentUpdateDownloadPhase;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* retval) get_CurrentUpdatePercentComplete;
	}


	public HRESULT get_CurrentUpdateBytesDownloaded(DECIMAL* retval) mut => VT.[Friend]get_CurrentUpdateBytesDownloaded(&this, retval);

	public HRESULT get_CurrentUpdateBytesToDownload(DECIMAL* retval) mut => VT.[Friend]get_CurrentUpdateBytesToDownload(&this, retval);

	public HRESULT get_CurrentUpdateIndex(int32* retval) mut => VT.[Friend]get_CurrentUpdateIndex(&this, retval);

	public HRESULT get_PercentComplete(int32* retval) mut => VT.[Friend]get_PercentComplete(&this, retval);

	public HRESULT get_TotalBytesDownloaded(DECIMAL* retval) mut => VT.[Friend]get_TotalBytesDownloaded(&this, retval);

	public HRESULT get_TotalBytesToDownload(DECIMAL* retval) mut => VT.[Friend]get_TotalBytesToDownload(&this, retval);

	public HRESULT GetUpdateResult(int32 updateIndex, IUpdateDownloadResult** retval) mut => VT.[Friend]GetUpdateResult(&this, updateIndex, retval);

	public HRESULT get_CurrentUpdateDownloadPhase(DownloadPhase* retval) mut => VT.[Friend]get_CurrentUpdateDownloadPhase(&this, retval);

	public HRESULT get_CurrentUpdatePercentComplete(int32* retval) mut => VT.[Friend]get_CurrentUpdatePercentComplete(&this, retval);
}

[CRepr]struct IDownloadJob : IDispatch
{
	public new const Guid IID = .(0xc574de85, 0x7358, 0x43f6, 0xaa, 0xe8, 0x86, 0x97, 0xe6, 0x2d, 0x8b, 0xa7);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* retval) get_AsyncState;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16* retval) get_IsCompleted;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IUpdateCollection** retval) get_Updates;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self) CleanUp;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IDownloadProgress** retval) GetProgress;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self) RequestAbort;
	}


	public HRESULT get_AsyncState(VARIANT* retval) mut => VT.[Friend]get_AsyncState(&this, retval);

	public HRESULT get_IsCompleted(int16* retval) mut => VT.[Friend]get_IsCompleted(&this, retval);

	public HRESULT get_Updates(IUpdateCollection** retval) mut => VT.[Friend]get_Updates(&this, retval);

	public HRESULT CleanUp() mut => VT.[Friend]CleanUp(&this);

	public HRESULT GetProgress(IDownloadProgress** retval) mut => VT.[Friend]GetProgress(&this, retval);

	public HRESULT RequestAbort() mut => VT.[Friend]RequestAbort(&this);
}

[CRepr]struct IDownloadCompletedCallbackArgs : IDispatch
{
	public new const Guid IID = .(0xfa565b23, 0x498c, 0x47a0, 0x97, 0x9d, 0xe7, 0xd5, 0xb1, 0x81, 0x33, 0x60);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
	}

}

[CRepr]struct IDownloadCompletedCallback : IUnknown
{
	public new const Guid IID = .(0x77254866, 0x9f5b, 0x4c8e, 0xb9, 0xe2, 0xc7, 0x7a, 0x85, 0x30, 0xd6, 0x4b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IUnknown.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IDownloadJob* downloadJob, IDownloadCompletedCallbackArgs* callbackArgs) Invoke;
	}


	public HRESULT Invoke(IDownloadJob* downloadJob, IDownloadCompletedCallbackArgs* callbackArgs) mut => VT.[Friend]Invoke(&this, downloadJob, callbackArgs);
}

[CRepr]struct IDownloadProgressChangedCallbackArgs : IDispatch
{
	public new const Guid IID = .(0x324ff2c6, 0x4981, 0x4b04, 0x94, 0x12, 0x57, 0x48, 0x17, 0x45, 0xab, 0x24);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IDownloadProgress** retval) get_Progress;
	}


	public HRESULT get_Progress(IDownloadProgress** retval) mut => VT.[Friend]get_Progress(&this, retval);
}

[CRepr]struct IDownloadProgressChangedCallback : IUnknown
{
	public new const Guid IID = .(0x8c3f1cdd, 0x6173, 0x4591, 0xae, 0xbd, 0xa5, 0x6a, 0x53, 0xca, 0x77, 0xc1);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IUnknown.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IDownloadJob* downloadJob, IDownloadProgressChangedCallbackArgs* callbackArgs) Invoke;
	}


	public HRESULT Invoke(IDownloadJob* downloadJob, IDownloadProgressChangedCallbackArgs* callbackArgs) mut => VT.[Friend]Invoke(&this, downloadJob, callbackArgs);
}

[CRepr]struct IUpdateDownloader : IDispatch
{
	public new const Guid IID = .(0x68f1c6f9, 0x7ecc, 0x4666, 0xa4, 0x64, 0x24, 0x7f, 0xe1, 0x24, 0x96, 0xc3);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* retval) get_ClientApplicationID;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR value) put_ClientApplicationID;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16* retval) get_IsForced;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16 value) put_IsForced;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, DownloadPriority* retval) get_Priority;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, DownloadPriority value) put_Priority;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IUpdateCollection** retval) get_Updates;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IUpdateCollection* value) put_Updates;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IUnknown* onProgressChanged, IUnknown* onCompleted, VARIANT state, IDownloadJob** retval) BeginDownload;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IDownloadResult** retval) Download;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IDownloadJob* value, IDownloadResult** retval) EndDownload;
	}


	public HRESULT get_ClientApplicationID(BSTR* retval) mut => VT.[Friend]get_ClientApplicationID(&this, retval);

	public HRESULT put_ClientApplicationID(BSTR value) mut => VT.[Friend]put_ClientApplicationID(&this, value);

	public HRESULT get_IsForced(int16* retval) mut => VT.[Friend]get_IsForced(&this, retval);

	public HRESULT put_IsForced(int16 value) mut => VT.[Friend]put_IsForced(&this, value);

	public HRESULT get_Priority(DownloadPriority* retval) mut => VT.[Friend]get_Priority(&this, retval);

	public HRESULT put_Priority(DownloadPriority value) mut => VT.[Friend]put_Priority(&this, value);

	public HRESULT get_Updates(IUpdateCollection** retval) mut => VT.[Friend]get_Updates(&this, retval);

	public HRESULT put_Updates(IUpdateCollection* value) mut => VT.[Friend]put_Updates(&this, value);

	public HRESULT BeginDownload(IUnknown* onProgressChanged, IUnknown* onCompleted, VARIANT state, IDownloadJob** retval) mut => VT.[Friend]BeginDownload(&this, onProgressChanged, onCompleted, state, retval);

	public HRESULT Download(IDownloadResult** retval) mut => VT.[Friend]Download(&this, retval);

	public HRESULT EndDownload(IDownloadJob* value, IDownloadResult** retval) mut => VT.[Friend]EndDownload(&this, value, retval);
}

[CRepr]struct IUpdateInstallationResult : IDispatch
{
	public new const Guid IID = .(0xd940f0f8, 0x3cbb, 0x4fd0, 0x99, 0x3f, 0x47, 0x1e, 0x7f, 0x23, 0x28, 0xad);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* retval) get_HResult;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16* retval) get_RebootRequired;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, OperationResultCode* retval) get_ResultCode;
	}


	public HRESULT get_HResult(int32* retval) mut => VT.[Friend]get_HResult(&this, retval);

	public HRESULT get_RebootRequired(int16* retval) mut => VT.[Friend]get_RebootRequired(&this, retval);

	public HRESULT get_ResultCode(OperationResultCode* retval) mut => VT.[Friend]get_ResultCode(&this, retval);
}

[CRepr]struct IInstallationResult : IDispatch
{
	public new const Guid IID = .(0xa43c56d6, 0x7451, 0x48d4, 0xaf, 0x96, 0xb6, 0xcd, 0x2d, 0x0d, 0x9b, 0x7a);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* retval) get_HResult;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16* retval) get_RebootRequired;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, OperationResultCode* retval) get_ResultCode;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 updateIndex, IUpdateInstallationResult** retval) GetUpdateResult;
	}


	public HRESULT get_HResult(int32* retval) mut => VT.[Friend]get_HResult(&this, retval);

	public HRESULT get_RebootRequired(int16* retval) mut => VT.[Friend]get_RebootRequired(&this, retval);

	public HRESULT get_ResultCode(OperationResultCode* retval) mut => VT.[Friend]get_ResultCode(&this, retval);

	public HRESULT GetUpdateResult(int32 updateIndex, IUpdateInstallationResult** retval) mut => VT.[Friend]GetUpdateResult(&this, updateIndex, retval);
}

[CRepr]struct IInstallationProgress : IDispatch
{
	public new const Guid IID = .(0x345c8244, 0x43a3, 0x4e32, 0xa3, 0x68, 0x65, 0xf0, 0x73, 0xb7, 0x6f, 0x36);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* retval) get_CurrentUpdateIndex;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* retval) get_CurrentUpdatePercentComplete;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* retval) get_PercentComplete;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 updateIndex, IUpdateInstallationResult** retval) GetUpdateResult;
	}


	public HRESULT get_CurrentUpdateIndex(int32* retval) mut => VT.[Friend]get_CurrentUpdateIndex(&this, retval);

	public HRESULT get_CurrentUpdatePercentComplete(int32* retval) mut => VT.[Friend]get_CurrentUpdatePercentComplete(&this, retval);

	public HRESULT get_PercentComplete(int32* retval) mut => VT.[Friend]get_PercentComplete(&this, retval);

	public HRESULT GetUpdateResult(int32 updateIndex, IUpdateInstallationResult** retval) mut => VT.[Friend]GetUpdateResult(&this, updateIndex, retval);
}

[CRepr]struct IInstallationJob : IDispatch
{
	public new const Guid IID = .(0x5c209f0b, 0xbad5, 0x432a, 0x95, 0x56, 0x46, 0x99, 0xbe, 0xd2, 0x63, 0x8a);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* retval) get_AsyncState;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16* retval) get_IsCompleted;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IUpdateCollection** retval) get_Updates;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self) CleanUp;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IInstallationProgress** retval) GetProgress;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self) RequestAbort;
	}


	public HRESULT get_AsyncState(VARIANT* retval) mut => VT.[Friend]get_AsyncState(&this, retval);

	public HRESULT get_IsCompleted(int16* retval) mut => VT.[Friend]get_IsCompleted(&this, retval);

	public HRESULT get_Updates(IUpdateCollection** retval) mut => VT.[Friend]get_Updates(&this, retval);

	public HRESULT CleanUp() mut => VT.[Friend]CleanUp(&this);

	public HRESULT GetProgress(IInstallationProgress** retval) mut => VT.[Friend]GetProgress(&this, retval);

	public HRESULT RequestAbort() mut => VT.[Friend]RequestAbort(&this);
}

[CRepr]struct IInstallationCompletedCallbackArgs : IDispatch
{
	public new const Guid IID = .(0x250e2106, 0x8efb, 0x4705, 0x96, 0x53, 0xef, 0x13, 0xc5, 0x81, 0xb6, 0xa1);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
	}

}

[CRepr]struct IInstallationCompletedCallback : IUnknown
{
	public new const Guid IID = .(0x45f4f6f3, 0xd602, 0x4f98, 0x9a, 0x8a, 0x3e, 0xfa, 0x15, 0x2a, 0xd2, 0xd3);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IUnknown.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IInstallationJob* installationJob, IInstallationCompletedCallbackArgs* callbackArgs) Invoke;
	}


	public HRESULT Invoke(IInstallationJob* installationJob, IInstallationCompletedCallbackArgs* callbackArgs) mut => VT.[Friend]Invoke(&this, installationJob, callbackArgs);
}

[CRepr]struct IInstallationProgressChangedCallbackArgs : IDispatch
{
	public new const Guid IID = .(0xe4f14e1e, 0x689d, 0x4218, 0xa0, 0xb9, 0xbc, 0x18, 0x9c, 0x48, 0x4a, 0x01);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IInstallationProgress** retval) get_Progress;
	}


	public HRESULT get_Progress(IInstallationProgress** retval) mut => VT.[Friend]get_Progress(&this, retval);
}

[CRepr]struct IInstallationProgressChangedCallback : IUnknown
{
	public new const Guid IID = .(0xe01402d5, 0xf8da, 0x43ba, 0xa0, 0x12, 0x38, 0x89, 0x4b, 0xd0, 0x48, 0xf1);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IUnknown.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IInstallationJob* installationJob, IInstallationProgressChangedCallbackArgs* callbackArgs) Invoke;
	}


	public HRESULT Invoke(IInstallationJob* installationJob, IInstallationProgressChangedCallbackArgs* callbackArgs) mut => VT.[Friend]Invoke(&this, installationJob, callbackArgs);
}

[CRepr]struct IUpdateInstaller : IDispatch
{
	public new const Guid IID = .(0x7b929c68, 0xccdc, 0x4226, 0x96, 0xb1, 0x87, 0x24, 0x60, 0x0b, 0x54, 0xc2);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* retval) get_ClientApplicationID;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR value) put_ClientApplicationID;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16* retval) get_IsForced;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16 value) put_IsForced;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, HWND* retval) get_ParentHwnd;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, HWND value) put_ParentHwnd;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IUnknown* value) put_ParentWindow;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IUnknown** retval) get_ParentWindow;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IUpdateCollection** retval) get_Updates;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IUpdateCollection* value) put_Updates;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IUnknown* onProgressChanged, IUnknown* onCompleted, VARIANT state, IInstallationJob** retval) BeginInstall;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IUnknown* onProgressChanged, IUnknown* onCompleted, VARIANT state, IInstallationJob** retval) BeginUninstall;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IInstallationJob* value, IInstallationResult** retval) EndInstall;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IInstallationJob* value, IInstallationResult** retval) EndUninstall;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IInstallationResult** retval) Install;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR dialogTitle, IInstallationResult** retval) RunWizard;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16* retval) get_IsBusy;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IInstallationResult** retval) Uninstall;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16* retval) get_AllowSourcePrompts;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16 value) put_AllowSourcePrompts;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16* retval) get_RebootRequiredBeforeInstallation;
	}


	public HRESULT get_ClientApplicationID(BSTR* retval) mut => VT.[Friend]get_ClientApplicationID(&this, retval);

	public HRESULT put_ClientApplicationID(BSTR value) mut => VT.[Friend]put_ClientApplicationID(&this, value);

	public HRESULT get_IsForced(int16* retval) mut => VT.[Friend]get_IsForced(&this, retval);

	public HRESULT put_IsForced(int16 value) mut => VT.[Friend]put_IsForced(&this, value);

	public HRESULT get_ParentHwnd(HWND* retval) mut => VT.[Friend]get_ParentHwnd(&this, retval);

	public HRESULT put_ParentHwnd(HWND value) mut => VT.[Friend]put_ParentHwnd(&this, value);

	public HRESULT put_ParentWindow(IUnknown* value) mut => VT.[Friend]put_ParentWindow(&this, value);

	public HRESULT get_ParentWindow(IUnknown** retval) mut => VT.[Friend]get_ParentWindow(&this, retval);

	public HRESULT get_Updates(IUpdateCollection** retval) mut => VT.[Friend]get_Updates(&this, retval);

	public HRESULT put_Updates(IUpdateCollection* value) mut => VT.[Friend]put_Updates(&this, value);

	public HRESULT BeginInstall(IUnknown* onProgressChanged, IUnknown* onCompleted, VARIANT state, IInstallationJob** retval) mut => VT.[Friend]BeginInstall(&this, onProgressChanged, onCompleted, state, retval);

	public HRESULT BeginUninstall(IUnknown* onProgressChanged, IUnknown* onCompleted, VARIANT state, IInstallationJob** retval) mut => VT.[Friend]BeginUninstall(&this, onProgressChanged, onCompleted, state, retval);

	public HRESULT EndInstall(IInstallationJob* value, IInstallationResult** retval) mut => VT.[Friend]EndInstall(&this, value, retval);

	public HRESULT EndUninstall(IInstallationJob* value, IInstallationResult** retval) mut => VT.[Friend]EndUninstall(&this, value, retval);

	public HRESULT Install(IInstallationResult** retval) mut => VT.[Friend]Install(&this, retval);

	public HRESULT RunWizard(BSTR dialogTitle, IInstallationResult** retval) mut => VT.[Friend]RunWizard(&this, dialogTitle, retval);

	public HRESULT get_IsBusy(int16* retval) mut => VT.[Friend]get_IsBusy(&this, retval);

	public HRESULT Uninstall(IInstallationResult** retval) mut => VT.[Friend]Uninstall(&this, retval);

	public HRESULT get_AllowSourcePrompts(int16* retval) mut => VT.[Friend]get_AllowSourcePrompts(&this, retval);

	public HRESULT put_AllowSourcePrompts(int16 value) mut => VT.[Friend]put_AllowSourcePrompts(&this, value);

	public HRESULT get_RebootRequiredBeforeInstallation(int16* retval) mut => VT.[Friend]get_RebootRequiredBeforeInstallation(&this, retval);
}

[CRepr]struct IUpdateInstaller2 : IUpdateInstaller
{
	public new const Guid IID = .(0x3442d4fe, 0x224d, 0x4cee, 0x98, 0xcf, 0x30, 0xe0, 0xc4, 0xd2, 0x29, 0xe6);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IUpdateInstaller.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16* retval) get_ForceQuiet;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16 value) put_ForceQuiet;
	}


	public HRESULT get_ForceQuiet(int16* retval) mut => VT.[Friend]get_ForceQuiet(&this, retval);

	public HRESULT put_ForceQuiet(int16 value) mut => VT.[Friend]put_ForceQuiet(&this, value);
}

[CRepr]struct IUpdateInstaller3 : IUpdateInstaller2
{
	public new const Guid IID = .(0x16d11c35, 0x099a, 0x48d0, 0x83, 0x38, 0x5f, 0xae, 0x64, 0x04, 0x7f, 0x8e);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IUpdateInstaller2.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16* retval) get_AttemptCloseAppsIfNecessary;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16 value) put_AttemptCloseAppsIfNecessary;
	}


	public HRESULT get_AttemptCloseAppsIfNecessary(int16* retval) mut => VT.[Friend]get_AttemptCloseAppsIfNecessary(&this, retval);

	public HRESULT put_AttemptCloseAppsIfNecessary(int16 value) mut => VT.[Friend]put_AttemptCloseAppsIfNecessary(&this, value);
}

[CRepr]struct IUpdateInstaller4 : IUpdateInstaller3
{
	public new const Guid IID = .(0xef8208ea, 0x2304, 0x492d, 0x91, 0x09, 0x23, 0x81, 0x3b, 0x09, 0x58, 0xe1);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IUpdateInstaller3.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32 dwFlags) Commit;
	}


	public HRESULT Commit(uint32 dwFlags) mut => VT.[Friend]Commit(&this, dwFlags);
}

[CRepr]struct IUpdateSession : IDispatch
{
	public new const Guid IID = .(0x816858a4, 0x260d, 0x4260, 0x93, 0x3a, 0x25, 0x85, 0xf1, 0xab, 0xc7, 0x6b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* retval) get_ClientApplicationID;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR value) put_ClientApplicationID;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16* retval) get_ReadOnly;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IWebProxy** retval) get_WebProxy;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IWebProxy* value) put_WebProxy;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IUpdateSearcher** retval) CreateUpdateSearcher;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IUpdateDownloader** retval) CreateUpdateDownloader;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IUpdateInstaller** retval) CreateUpdateInstaller;
	}


	public HRESULT get_ClientApplicationID(BSTR* retval) mut => VT.[Friend]get_ClientApplicationID(&this, retval);

	public HRESULT put_ClientApplicationID(BSTR value) mut => VT.[Friend]put_ClientApplicationID(&this, value);

	public HRESULT get_ReadOnly(int16* retval) mut => VT.[Friend]get_ReadOnly(&this, retval);

	public HRESULT get_WebProxy(IWebProxy** retval) mut => VT.[Friend]get_WebProxy(&this, retval);

	public HRESULT put_WebProxy(IWebProxy* value) mut => VT.[Friend]put_WebProxy(&this, value);

	public HRESULT CreateUpdateSearcher(IUpdateSearcher** retval) mut => VT.[Friend]CreateUpdateSearcher(&this, retval);

	public HRESULT CreateUpdateDownloader(IUpdateDownloader** retval) mut => VT.[Friend]CreateUpdateDownloader(&this, retval);

	public HRESULT CreateUpdateInstaller(IUpdateInstaller** retval) mut => VT.[Friend]CreateUpdateInstaller(&this, retval);
}

[CRepr]struct IUpdateSession2 : IUpdateSession
{
	public new const Guid IID = .(0x91caf7b0, 0xeb23, 0x49ed, 0x99, 0x37, 0xc5, 0x2d, 0x81, 0x7f, 0x46, 0xf7);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IUpdateSession.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32* retval) get_UserLocale;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32 lcid) put_UserLocale;
	}


	public HRESULT get_UserLocale(uint32* retval) mut => VT.[Friend]get_UserLocale(&this, retval);

	public HRESULT put_UserLocale(uint32 lcid) mut => VT.[Friend]put_UserLocale(&this, lcid);
}

[CRepr]struct IUpdateSession3 : IUpdateSession2
{
	public new const Guid IID = .(0x918efd1e, 0xb5d8, 0x4c90, 0x85, 0x40, 0xae, 0xb9, 0xbd, 0xc5, 0x6f, 0x9d);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IUpdateSession2.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IUpdateServiceManager2** retval) CreateUpdateServiceManager;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR criteria, int32 startIndex, int32 count, IUpdateHistoryEntryCollection** retval) QueryHistory;
	}


	public HRESULT CreateUpdateServiceManager(IUpdateServiceManager2** retval) mut => VT.[Friend]CreateUpdateServiceManager(&this, retval);

	public HRESULT QueryHistory(BSTR criteria, int32 startIndex, int32 count, IUpdateHistoryEntryCollection** retval) mut => VT.[Friend]QueryHistory(&this, criteria, startIndex, count, retval);
}

[CRepr]struct IUpdateService : IDispatch
{
	public new const Guid IID = .(0x76b3b17e, 0xaed6, 0x4da5, 0x85, 0xf0, 0x83, 0x58, 0x7f, 0x81, 0xab, 0xe3);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* retval) get_Name;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* retval) get_ContentValidationCert;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, double* retval) get_ExpirationDate;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16* retval) get_IsManaged;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16* retval) get_IsRegisteredWithAU;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, double* retval) get_IssueDate;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16* retval) get_OffersWindowsUpdates;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IStringCollection** retval) get_RedirectUrls;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* retval) get_ServiceID;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16* retval) get_IsScanPackageService;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16* retval) get_CanRegisterWithAU;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* retval) get_ServiceUrl;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* retval) get_SetupPrefix;
	}


	public HRESULT get_Name(BSTR* retval) mut => VT.[Friend]get_Name(&this, retval);

	public HRESULT get_ContentValidationCert(VARIANT* retval) mut => VT.[Friend]get_ContentValidationCert(&this, retval);

	public HRESULT get_ExpirationDate(double* retval) mut => VT.[Friend]get_ExpirationDate(&this, retval);

	public HRESULT get_IsManaged(int16* retval) mut => VT.[Friend]get_IsManaged(&this, retval);

	public HRESULT get_IsRegisteredWithAU(int16* retval) mut => VT.[Friend]get_IsRegisteredWithAU(&this, retval);

	public HRESULT get_IssueDate(double* retval) mut => VT.[Friend]get_IssueDate(&this, retval);

	public HRESULT get_OffersWindowsUpdates(int16* retval) mut => VT.[Friend]get_OffersWindowsUpdates(&this, retval);

	public HRESULT get_RedirectUrls(IStringCollection** retval) mut => VT.[Friend]get_RedirectUrls(&this, retval);

	public HRESULT get_ServiceID(BSTR* retval) mut => VT.[Friend]get_ServiceID(&this, retval);

	public HRESULT get_IsScanPackageService(int16* retval) mut => VT.[Friend]get_IsScanPackageService(&this, retval);

	public HRESULT get_CanRegisterWithAU(int16* retval) mut => VT.[Friend]get_CanRegisterWithAU(&this, retval);

	public HRESULT get_ServiceUrl(BSTR* retval) mut => VT.[Friend]get_ServiceUrl(&this, retval);

	public HRESULT get_SetupPrefix(BSTR* retval) mut => VT.[Friend]get_SetupPrefix(&this, retval);
}

[CRepr]struct IUpdateService2 : IUpdateService
{
	public new const Guid IID = .(0x1518b460, 0x6518, 0x4172, 0x94, 0x0f, 0xc7, 0x58, 0x83, 0xb2, 0x4c, 0xeb);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IUpdateService.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16* retval) get_IsDefaultAUService;
	}


	public HRESULT get_IsDefaultAUService(int16* retval) mut => VT.[Friend]get_IsDefaultAUService(&this, retval);
}

[CRepr]struct IUpdateServiceCollection : IDispatch
{
	public new const Guid IID = .(0x9b0353aa, 0x0e52, 0x44ff, 0xb8, 0xb0, 0x1f, 0x7f, 0xa0, 0x43, 0x7f, 0x88);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 index, IUpdateService** retval) get_Item;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IUnknown** retval) get__NewEnum;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* retval) get_Count;
	}


	public HRESULT get_Item(int32 index, IUpdateService** retval) mut => VT.[Friend]get_Item(&this, index, retval);

	public HRESULT get__NewEnum(IUnknown** retval) mut => VT.[Friend]get__NewEnum(&this, retval);

	public HRESULT get_Count(int32* retval) mut => VT.[Friend]get_Count(&this, retval);
}

[CRepr]struct IUpdateServiceRegistration : IDispatch
{
	public new const Guid IID = .(0xdde02280, 0x12b3, 0x4e0b, 0x93, 0x7b, 0x67, 0x47, 0xf6, 0xac, 0xb2, 0x86);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, UpdateServiceRegistrationState* retval) get_RegistrationState;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* retval) get_ServiceID;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16* retval) get_IsPendingRegistrationWithAU;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IUpdateService2** retval) get_Service;
	}


	public HRESULT get_RegistrationState(UpdateServiceRegistrationState* retval) mut => VT.[Friend]get_RegistrationState(&this, retval);

	public HRESULT get_ServiceID(BSTR* retval) mut => VT.[Friend]get_ServiceID(&this, retval);

	public HRESULT get_IsPendingRegistrationWithAU(int16* retval) mut => VT.[Friend]get_IsPendingRegistrationWithAU(&this, retval);

	public HRESULT get_Service(IUpdateService2** retval) mut => VT.[Friend]get_Service(&this, retval);
}

[CRepr]struct IUpdateServiceManager : IDispatch
{
	public new const Guid IID = .(0x23857e3c, 0x02ba, 0x44a3, 0x94, 0x23, 0xb1, 0xc9, 0x00, 0x80, 0x5f, 0x37);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IUpdateServiceCollection** retval) get_Services;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR serviceID, BSTR authorizationCabPath, IUpdateService** retval) AddService;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR serviceID) RegisterServiceWithAU;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR serviceID) RemoveService;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR serviceID) UnregisterServiceWithAU;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR serviceName, BSTR scanFileLocation, int32 flags, IUpdateService** ppService) AddScanPackageService;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR optionName, VARIANT optionValue) SetOption;
	}


	public HRESULT get_Services(IUpdateServiceCollection** retval) mut => VT.[Friend]get_Services(&this, retval);

	public HRESULT AddService(BSTR serviceID, BSTR authorizationCabPath, IUpdateService** retval) mut => VT.[Friend]AddService(&this, serviceID, authorizationCabPath, retval);

	public HRESULT RegisterServiceWithAU(BSTR serviceID) mut => VT.[Friend]RegisterServiceWithAU(&this, serviceID);

	public HRESULT RemoveService(BSTR serviceID) mut => VT.[Friend]RemoveService(&this, serviceID);

	public HRESULT UnregisterServiceWithAU(BSTR serviceID) mut => VT.[Friend]UnregisterServiceWithAU(&this, serviceID);

	public HRESULT AddScanPackageService(BSTR serviceName, BSTR scanFileLocation, int32 flags, IUpdateService** ppService) mut => VT.[Friend]AddScanPackageService(&this, serviceName, scanFileLocation, flags, ppService);

	public HRESULT SetOption(BSTR optionName, VARIANT optionValue) mut => VT.[Friend]SetOption(&this, optionName, optionValue);
}

[CRepr]struct IUpdateServiceManager2 : IUpdateServiceManager
{
	public new const Guid IID = .(0x0bb8531d, 0x7e8d, 0x424f, 0x98, 0x6c, 0xa0, 0xb8, 0xf6, 0x0a, 0x3e, 0x7b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IUpdateServiceManager.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* retval) get_ClientApplicationID;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR value) put_ClientApplicationID;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR serviceID, IUpdateServiceRegistration** retval) QueryServiceRegistration;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR serviceID, int32 flags, BSTR authorizationCabPath, IUpdateServiceRegistration** retval) AddService2;
	}


	public HRESULT get_ClientApplicationID(BSTR* retval) mut => VT.[Friend]get_ClientApplicationID(&this, retval);

	public HRESULT put_ClientApplicationID(BSTR value) mut => VT.[Friend]put_ClientApplicationID(&this, value);

	public HRESULT QueryServiceRegistration(BSTR serviceID, IUpdateServiceRegistration** retval) mut => VT.[Friend]QueryServiceRegistration(&this, serviceID, retval);

	public HRESULT AddService2(BSTR serviceID, int32 flags, BSTR authorizationCabPath, IUpdateServiceRegistration** retval) mut => VT.[Friend]AddService2(&this, serviceID, flags, authorizationCabPath, retval);
}

[CRepr]struct IInstallationAgent : IDispatch
{
	public new const Guid IID = .(0x925cbc18, 0xa2ea, 0x4648, 0xbf, 0x1c, 0xec, 0x8b, 0xad, 0xcf, 0xe2, 0x0a);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR installationResultCookie, int32 hresult, IStringCollection* extendedReportingData) RecordInstallationResult;
	}


	public HRESULT RecordInstallationResult(BSTR installationResultCookie, int32 hresult, IStringCollection* extendedReportingData) mut => VT.[Friend]RecordInstallationResult(&this, installationResultCookie, hresult, extendedReportingData);
}

#endregion
