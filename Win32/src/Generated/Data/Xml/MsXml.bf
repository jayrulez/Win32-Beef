using Win32.Foundation;
using Win32.System.Com;
using System;

namespace Win32.Data.Xml.MsXml;

#region Constants
public static
{
	public const int32 E_XML_NOTWF = -1072897501;
	public const int32 E_XML_NODTD = -1072897500;
	public const int32 E_XML_INVALID = -1072897499;
	public const int32 E_XML_BUFFERTOOSMALL = -1072897498;
	public const uint32 XHR_PROP_ONDATA_ALWAYS = 0;
	public const uint64 XHR_PROP_ONDATA_NEVER = 18446744073709551615;
	public const uint32 DISPID_XOBJ_MIN = 65536;
	public const uint32 DISPID_XOBJ_MAX = 131071;
	public const uint32 DISPID_XOBJ_BASE = 65536;
	public const uint32 DISPID_XMLELEMENTCOLLECTION = 65536;
	public const uint32 DISPID_XMLELEMENTCOLLECTION_LENGTH = 65537;
	public const int32 DISPID_XMLELEMENTCOLLECTION_NEWENUM = -4;
	public const uint32 DISPID_XMLELEMENTCOLLECTION_ITEM = 65539;
	public const uint32 DISPID_XMLDOCUMENT = 65636;
	public const uint32 DISPID_XMLDOCUMENT_ROOT = 65637;
	public const uint32 DISPID_XMLDOCUMENT_FILESIZE = 65638;
	public const uint32 DISPID_XMLDOCUMENT_FILEMODIFIEDDATE = 65639;
	public const uint32 DISPID_XMLDOCUMENT_FILEUPDATEDDATE = 65640;
	public const uint32 DISPID_XMLDOCUMENT_URL = 65641;
	public const uint32 DISPID_XMLDOCUMENT_MIMETYPE = 65642;
	public const uint32 DISPID_XMLDOCUMENT_READYSTATE = 65643;
	public const uint32 DISPID_XMLDOCUMENT_CREATEELEMENT = 65644;
	public const uint32 DISPID_XMLDOCUMENT_CHARSET = 65645;
	public const uint32 DISPID_XMLDOCUMENT_VERSION = 65646;
	public const uint32 DISPID_XMLDOCUMENT_DOCTYPE = 65647;
	public const uint32 DISPID_XMLDOCUMENT_DTDURL = 65648;
	public const uint32 DISPID_XMLDOCUMENT_ASYNC = 65649;
	public const uint32 DISPID_XMLDOCUMENT_CASEINSENSITIVE = 65650;
	public const uint32 DISPID_XMLDOCUMENT_BASEURL = 65651;
	public const uint32 DISPID_XMLDOCUMENT_XML = 65652;
	public const uint32 DISPID_XMLDOCUMENT_LASTERROR = 65653;
	public const uint32 DISPID_XMLDOCUMENT_TRIMWHITESPACE = 65654;
	public const uint32 DISPID_XMLDOCUMENT_COMMIT = 65655;
	public const uint32 DISPID_XMLELEMENT = 65736;
	public const uint32 DISPID_XMLELEMENT_TAGNAME = 65737;
	public const uint32 DISPID_XMLELEMENT_PARENT = 65738;
	public const uint32 DISPID_XMLELEMENT_SETATTRIBUTE = 65739;
	public const uint32 DISPID_XMLELEMENT_GETATTRIBUTE = 65740;
	public const uint32 DISPID_XMLELEMENT_REMOVEATTRIBUTE = 65741;
	public const uint32 DISPID_XMLELEMENT_CHILDREN = 65742;
	public const uint32 DISPID_XMLELEMENT_TYPE = 65743;
	public const uint32 DISPID_XMLELEMENT_TEXT = 65744;
	public const uint32 DISPID_XMLELEMENT_ADDCHILD = 65745;
	public const uint32 DISPID_XMLELEMENT_REMOVECHILD = 65746;
	public const uint32 DISPID_XMLELEMENT_ATTRIBUTES = 65747;
	public const uint32 DISPID_XMLNOTIFSINK = 65836;
	public const uint32 DISPID_XMLNOTIFSINK_CHILDADDED = 65837;
	public const uint32 DISPID_XMLATTRIBUTE = 65936;
	public const uint32 DISPID_XMLATTRIBUTE_NAME = 65937;
	public const uint32 DISPID_XMLATTRIBUTE_VALUE = 65938;
	public const uint32 DISPID_XMLERROR = 65936;
	public const uint32 DISPID_XMLERROR_REASON = 65937;
	public const uint32 DISPID_XMLERROR_LINE = 65938;
	public const uint32 DISPID_XMLERROR_POS = 65939;
	public const uint32 DISPID_NODE = 66036;
	public const uint32 DISPID_NODE_NAME = 66037;
	public const uint32 DISPID_NODE_PARENT = 66038;
	public const uint32 DISPID_NODE_TYPE = 66039;
	public const uint32 DISPID_NODE_VALUE = 66040;
	public const uint32 DISPID_NODE_SETATTRIBUTE = 66041;
	public const uint32 DISPID_NODE_GETATTRIBUTE = 66042;
	public const uint32 DISPID_NODE_REMOVEATTRIBUTE = 66043;
	public const uint32 DISPID_NODE_ATTRIBUTES = 66044;
	public const uint32 DISPID_NODE_ADD = 66045;
	public const uint32 DISPID_NODE_REMOVE = 66046;
	public const uint32 DISPID_NODE_CHILDREN = 66047;
	public const uint32 DISPID_NODELIST = 66136;
	public const uint32 DISPID_NODELIST_NEWENUM = 66137;
	public const uint32 DISPID_NODELIST_NEXT = 66138;
	public const uint32 DISPID_NODELIST_CURRENT = 66139;
	public const uint32 DISPID_NODELIST_MOVE = 66140;
	public const uint32 DISPID_NODELIST_MOVETONODE = 66141;
	public const uint32 DISPID_NODELIST_LENGTH = 66142;
	public const uint32 DISPID_NODELIST_ITEM = 66143;
	public const uint32 DISPID_DOM_BASE = 1;
	public const uint32 DISPID_DOM_COLLECTION_BASE = 1000000;
	public const uint32 DISPID_DOM_COLLECTION_MAX = 2999999;
	public const uint32 DISPID_DOM_NODE = 1;
	public const uint32 DISPID_DOM_NODE_NODENAME = 2;
	public const uint32 DISPID_DOM_NODE_NODEVALUE = 3;
	public const uint32 DISPID_DOM_NODE_NODETYPE = 4;
	public const uint32 DISPID_DOM_NODE_NODETYPEENUM = 5;
	public const uint32 DISPID_DOM_NODE_PARENTNODE = 6;
	public const uint32 DISPID_DOM_NODE_CHILDNODES = 7;
	public const uint32 DISPID_DOM_NODE_FIRSTCHILD = 8;
	public const uint32 DISPID_DOM_NODE_LASTCHILD = 9;
	public const uint32 DISPID_DOM_NODE_PREVIOUSSIBLING = 10;
	public const uint32 DISPID_DOM_NODE_NEXTSIBLING = 11;
	public const uint32 DISPID_DOM_NODE_ATTRIBUTES = 12;
	public const uint32 DISPID_DOM_NODE_INSERTBEFORE = 13;
	public const uint32 DISPID_DOM_NODE_REPLACECHILD = 14;
	public const uint32 DISPID_DOM_NODE_REMOVECHILD = 15;
	public const uint32 DISPID_DOM_NODE_APPENDCHILD = 16;
	public const uint32 DISPID_DOM_NODE_HASCHILDNODES = 17;
	public const uint32 DISPID_DOM_NODE_OWNERDOC = 18;
	public const uint32 DISPID_DOM_NODE_CLONENODE = 19;
	public const uint32 DISPID_XMLDOM_NODE = 20;
	public const uint32 DISPID_XMLDOM_NODE_STRINGTYPE = 21;
	public const uint32 DISPID_XMLDOM_NODE_SPECIFIED = 22;
	public const uint32 DISPID_XMLDOM_NODE_DEFINITION = 23;
	public const uint32 DISPID_XMLDOM_NODE_TEXT = 24;
	public const uint32 DISPID_XMLDOM_NODE_NODETYPEDVALUE = 25;
	public const uint32 DISPID_XMLDOM_NODE_DATATYPE = 26;
	public const uint32 DISPID_XMLDOM_NODE_XML = 27;
	public const uint32 DISPID_XMLDOM_NODE_TRANSFORMNODE = 28;
	public const uint32 DISPID_XMLDOM_NODE_SELECTNODES = 29;
	public const uint32 DISPID_XMLDOM_NODE_SELECTSINGLENODE = 30;
	public const uint32 DISPID_XMLDOM_NODE_PARSED = 31;
	public const uint32 DISPID_XMLDOM_NODE_NAMESPACE = 32;
	public const uint32 DISPID_XMLDOM_NODE_PREFIX = 33;
	public const uint32 DISPID_XMLDOM_NODE_BASENAME = 34;
	public const uint32 DISPID_XMLDOM_NODE_TRANSFORMNODETOOBJECT = 35;
	public const uint32 DISPID_XMLDOM_NODE__TOP = 36;
	public const uint32 DISPID_DOM_DOCUMENT = 37;
	public const uint32 DISPID_DOM_DOCUMENT_DOCTYPE = 38;
	public const uint32 DISPID_DOM_DOCUMENT_IMPLEMENTATION = 39;
	public const uint32 DISPID_DOM_DOCUMENT_DOCUMENTELEMENT = 40;
	public const uint32 DISPID_DOM_DOCUMENT_CREATEELEMENT = 41;
	public const uint32 DISPID_DOM_DOCUMENT_CREATEDOCUMENTFRAGMENT = 42;
	public const uint32 DISPID_DOM_DOCUMENT_CREATETEXTNODE = 43;
	public const uint32 DISPID_DOM_DOCUMENT_CREATECOMMENT = 44;
	public const uint32 DISPID_DOM_DOCUMENT_CREATECDATASECTION = 45;
	public const uint32 DISPID_DOM_DOCUMENT_CREATEPROCESSINGINSTRUCTION = 46;
	public const uint32 DISPID_DOM_DOCUMENT_CREATEATTRIBUTE = 47;
	public const uint32 DISPID_DOM_DOCUMENT_CREATEENTITY = 48;
	public const uint32 DISPID_DOM_DOCUMENT_CREATEENTITYREFERENCE = 49;
	public const uint32 DISPID_DOM_DOCUMENT_GETELEMENTSBYTAGNAME = 50;
	public const uint32 DISPID_DOM_DOCUMENT_TOP = 51;
	public const uint32 DISPID_XMLDOM_DOCUMENT = 52;
	public const uint32 DISPID_XMLDOM_DOCUMENT_DOCUMENTNODE = 53;
	public const uint32 DISPID_XMLDOM_DOCUMENT_CREATENODE = 54;
	public const uint32 DISPID_XMLDOM_DOCUMENT_CREATENODEEX = 55;
	public const uint32 DISPID_XMLDOM_DOCUMENT_NODEFROMID = 56;
	public const uint32 DISPID_XMLDOM_DOCUMENT_DOCUMENTNAMESPACES = 57;
	public const uint32 DISPID_XMLDOM_DOCUMENT_LOAD = 58;
	public const uint32 DISPID_XMLDOM_DOCUMENT_PARSEERROR = 59;
	public const uint32 DISPID_XMLDOM_DOCUMENT_URL = 60;
	public const uint32 DISPID_XMLDOM_DOCUMENT_ASYNC = 61;
	public const uint32 DISPID_XMLDOM_DOCUMENT_ABORT = 62;
	public const uint32 DISPID_XMLDOM_DOCUMENT_LOADXML = 63;
	public const uint32 DISPID_XMLDOM_DOCUMENT_SAVE = 64;
	public const uint32 DISPID_XMLDOM_DOCUMENT_VALIDATE = 65;
	public const uint32 DISPID_XMLDOM_DOCUMENT_RESOLVENAMESPACE = 66;
	public const uint32 DISPID_XMLDOM_DOCUMENT_PRESERVEWHITESPACE = 67;
	public const uint32 DISPID_XMLDOM_DOCUMENT_ONREADYSTATECHANGE = 68;
	public const uint32 DISPID_XMLDOM_DOCUMENT_ONDATAAVAILABLE = 69;
	public const uint32 DISPID_XMLDOM_DOCUMENT_ONTRANSFORMNODE = 70;
	public const uint32 DISPID_XMLDOM_DOCUMENT__TOP = 71;
	public const uint32 DISPID_DOM_NODELIST = 72;
	public const uint32 DISPID_DOM_NODELIST_ITEM = 73;
	public const uint32 DISPID_DOM_NODELIST_LENGTH = 74;
	public const uint32 DISPID_XMLDOM_NODELIST = 75;
	public const uint32 DISPID_XMLDOM_NODELIST_NEXTNODE = 76;
	public const uint32 DISPID_XMLDOM_NODELIST_RESET = 77;
	public const uint32 DISPID_XMLDOM_NODELIST_NEWENUM = 78;
	public const uint32 DISPID_XMLDOM_NODELIST__TOP = 79;
	public const uint32 DISPID_DOM_NAMEDNODEMAP = 80;
	public const uint32 DISPID_DOM_NAMEDNODEMAP_GETNAMEDITEM = 83;
	public const uint32 DISPID_DOM_NAMEDNODEMAP_SETNAMEDITEM = 84;
	public const uint32 DISPID_DOM_NAMEDNODEMAP_REMOVENAMEDITEM = 85;
	public const uint32 DISPID_XMLDOM_NAMEDNODEMAP = 86;
	public const uint32 DISPID_XMLDOM_NAMEDNODEMAP_GETQUALIFIEDITEM = 87;
	public const uint32 DISPID_XMLDOM_NAMEDNODEMAP_REMOVEQUALIFIEDITEM = 88;
	public const uint32 DISPID_XMLDOM_NAMEDNODEMAP_NEXTNODE = 89;
	public const uint32 DISPID_XMLDOM_NAMEDNODEMAP_RESET = 90;
	public const uint32 DISPID_XMLDOM_NAMEDNODEMAP_NEWENUM = 91;
	public const uint32 DISPID_XMLDOM_NAMEDNODEMAP__TOP = 92;
	public const uint32 DISPID_DOM_W3CWRAPPERS = 93;
	public const uint32 DISPID_DOM_DOCUMENTFRAGMENT = 94;
	public const uint32 DISPID_DOM_DOCUMENTFRAGMENT__TOP = 95;
	public const uint32 DISPID_DOM_ELEMENT = 96;
	public const uint32 DISPID_DOM_ELEMENT_GETTAGNAME = 97;
	public const uint32 DISPID_DOM_ELEMENT_GETATTRIBUTES = 98;
	public const uint32 DISPID_DOM_ELEMENT_GETATTRIBUTE = 99;
	public const uint32 DISPID_DOM_ELEMENT_SETATTRIBUTE = 100;
	public const uint32 DISPID_DOM_ELEMENT_REMOVEATTRIBUTE = 101;
	public const uint32 DISPID_DOM_ELEMENT_GETATTRIBUTENODE = 102;
	public const uint32 DISPID_DOM_ELEMENT_SETATTRIBUTENODE = 103;
	public const uint32 DISPID_DOM_ELEMENT_REMOVEATTRIBUTENODE = 104;
	public const uint32 DISPID_DOM_ELEMENT_GETELEMENTSBYTAGNAME = 105;
	public const uint32 DISPID_DOM_ELEMENT_NORMALIZE = 106;
	public const uint32 DISPID_DOM_ELEMENT__TOP = 107;
	public const uint32 DISPID_DOM_DATA = 108;
	public const uint32 DISPID_DOM_DATA_DATA = 109;
	public const uint32 DISPID_DOM_DATA_LENGTH = 110;
	public const uint32 DISPID_DOM_DATA_SUBSTRING = 111;
	public const uint32 DISPID_DOM_DATA_APPEND = 112;
	public const uint32 DISPID_DOM_DATA_INSERT = 113;
	public const uint32 DISPID_DOM_DATA_DELETE = 114;
	public const uint32 DISPID_DOM_DATA_REPLACE = 115;
	public const uint32 DISPID_DOM_DATA__TOP = 116;
	public const uint32 DISPID_DOM_ATTRIBUTE = 117;
	public const uint32 DISPID_DOM_ATTRIBUTE_GETNAME = 118;
	public const uint32 DISPID_DOM_ATTRIBUTE_SPECIFIED = 119;
	public const uint32 DISPID_DOM_ATTRIBUTE_VALUE = 120;
	public const uint32 DISPID_DOM_ATTRIBUTE__TOP = 121;
	public const uint32 DISPID_DOM_TEXT = 122;
	public const uint32 DISPID_DOM_TEXT_SPLITTEXT = 123;
	public const uint32 DISPID_DOM_TEXT_JOINTEXT = 124;
	public const uint32 DISPID_DOM_TEXT__TOP = 125;
	public const uint32 DISPID_DOM_PI = 126;
	public const uint32 DISPID_DOM_PI_TARGET = 127;
	public const uint32 DISPID_DOM_PI_DATA = 128;
	public const uint32 DISPID_DOM_PI__TOP = 129;
	public const uint32 DISPID_DOM_DOCUMENTTYPE = 130;
	public const uint32 DISPID_DOM_DOCUMENTTYPE_NAME = 131;
	public const uint32 DISPID_DOM_DOCUMENTTYPE_ENTITIES = 132;
	public const uint32 DISPID_DOM_DOCUMENTTYPE_NOTATIONS = 133;
	public const uint32 DISPID_DOM_DOCUMENTTYPE__TOP = 134;
	public const uint32 DISPID_DOM_NOTATION = 135;
	public const uint32 DISPID_DOM_NOTATION_PUBLICID = 136;
	public const uint32 DISPID_DOM_NOTATION_SYSTEMID = 137;
	public const uint32 DISPID_DOM_NOTATION__TOP = 138;
	public const uint32 DISPID_DOM_ENTITY = 139;
	public const uint32 DISPID_DOM_ENTITY_PUBLICID = 140;
	public const uint32 DISPID_DOM_ENTITY_SYSTEMID = 141;
	public const uint32 DISPID_DOM_ENTITY_NOTATIONNAME = 142;
	public const uint32 DISPID_DOM_ENTITY__TOP = 143;
	public const uint32 DISPID_DOM_W3CWRAPPERS_TOP = 143;
	public const uint32 DISPID_DOM_IMPLEMENTATION = 144;
	public const uint32 DISPID_DOM_IMPLEMENTATION_HASFEATURE = 145;
	public const uint32 DISPID_DOM_IMPLEMENTATION__TOP = 146;
	public const uint32 DISPID_DOM__TOP = 176;
	public const uint32 DISPID_DOM_ERROR = 177;
	public const uint32 DISPID_DOM_ERROR_ERRORCODE = 178;
	public const uint32 DISPID_DOM_ERROR_URL = 179;
	public const uint32 DISPID_DOM_ERROR_REASON = 180;
	public const uint32 DISPID_DOM_ERROR_SRCTEXT = 181;
	public const uint32 DISPID_DOM_ERROR_LINE = 182;
	public const uint32 DISPID_DOM_ERROR_LINEPOS = 183;
	public const uint32 DISPID_DOM_ERROR_FILEPOS = 184;
	public const uint32 DISPID_DOM_ERROR__TOP = 185;
	public const uint32 DISPID_DOM_ERROR2 = 186;
	public const uint32 DISPID_DOM_ERROR2_ALLERRORS = 187;
	public const uint32 DISPID_DOM_ERROR2_ERRORPARAMETERS = 188;
	public const uint32 DISPID_DOM_ERROR2_ERRORPARAMETERSCOUNT = 189;
	public const uint32 DISPID_DOM_ERROR2_ERRORXPATH = 190;
	public const uint32 DISPID_DOM_ERROR2__TOP = 191;
	public const uint32 DISPID_DOM_ERRORCOLLECTION = 192;
	public const uint32 DISPID_DOM_ERRORCOLLECTION_LENGTH = 193;
	public const uint32 DISPID_DOM_ERRORCOLLECTION_NEXT = 194;
	public const uint32 DISPID_DOM_ERRORCOLLECTION_RESET = 195;
	public const uint32 DISPID_DOM_ERRORCOLLECTION__TOP = 196;
	public const uint32 DISPID_XTLRUNTIME = 186;
	public const uint32 DISPID_XTLRUNTIME_UNIQUEID = 187;
	public const uint32 DISPID_XTLRUNTIME_DEPTH = 188;
	public const uint32 DISPID_XTLRUNTIME_CHILDNUMBER = 189;
	public const uint32 DISPID_XTLRUNTIME_ANCESTORCHILDNUMBER = 190;
	public const uint32 DISPID_XTLRUNTIME_ABSOLUTECHILDNUMBER = 191;
	public const uint32 DISPID_XTLRUNTIME_FORMATINDEX = 192;
	public const uint32 DISPID_XTLRUNTIME_FORMATNUMBER = 193;
	public const uint32 DISPID_XTLRUNTIME_FORMATDATE = 194;
	public const uint32 DISPID_XTLRUNTIME_FORMATTIME = 195;
	public const uint32 DISPID_XTLRUNTIME__TOP = 196;
	public const uint32 DISPID_XMLDOMEVENT = 197;
	public const int32 DISPID_XMLDOMEVENT_ONREADYSTATECHANGE = -609;
	public const uint32 DISPID_XMLDOMEVENT_ONDATAAVAILABLE = 198;
	public const uint32 DISPID_XMLDOMEVENT__TOP = 199;
	public const uint32 DISPID_XMLDOM_DOCUMENT2 = 200;
	public const uint32 DISPID_XMLDOM_DOCUMENT2_NAMESPACES = 201;
	public const uint32 DISPID_XMLDOM_DOCUMENT2_SCHEMAS = 202;
	public const uint32 DISPID_XMLDOM_DOCUMENT2_VALIDATE = 203;
	public const uint32 DISPID_XMLDOM_DOCUMENT2_SETPROPERTY = 204;
	public const uint32 DISPID_XMLDOM_DOCUMENT2_GETPROPERTY = 205;
	public const uint32 DISPID_XMLDOM_DOCUMENT2__TOP = 206;
	public const uint32 DISPID_XMLDOM_DOCUMENT3 = 207;
	public const uint32 DISPID_XMLDOM_DOCUMENT3_VALIDATENODE = 208;
	public const uint32 DISPID_XMLDOM_DOCUMENT3_IMPORTNODE = 209;
	public const uint32 DISPID_XMLDOM_DOCUMENT3__TOP = 210;
	public const uint32 DISPID_XMLDOM_SCHEMACOLLECTION = 2;
	public const uint32 DISPID_XMLDOM_SCHEMACOLLECTION_ADD = 3;
	public const uint32 DISPID_XMLDOM_SCHEMACOLLECTION_GET = 4;
	public const uint32 DISPID_XMLDOM_SCHEMACOLLECTION_REMOVE = 5;
	public const uint32 DISPID_XMLDOM_SCHEMACOLLECTION_LENGTH = 6;
	public const uint32 DISPID_XMLDOM_SCHEMACOLLECTION_NAMESPACEURI = 7;
	public const uint32 DISPID_XMLDOM_SCHEMACOLLECTION_ADDCOLLECTION = 8;
	public const uint32 DISPID_XMLDOM_SCHEMACOLLECTION__TOP = 9;
	public const uint32 DISPID_XMLDOM_SELECTION = 80;
	public const uint32 DISPID_XMLDOM_SELECTION_EXPR = 81;
	public const uint32 DISPID_XMLDOM_SELECTION_CONTEXT = 82;
	public const uint32 DISPID_XMLDOM_SELECTION_PEEKNODE = 83;
	public const uint32 DISPID_XMLDOM_SELECTION_MATCHES = 84;
	public const uint32 DISPID_XMLDOM_SELECTION_REMOVENEXT = 85;
	public const uint32 DISPID_XMLDOM_SELECTION_REMOVEALL = 86;
	public const uint32 DISPID_XMLDOM_SELECTION_CLONE = 87;
	public const uint32 DISPID_XMLDOM_SELECTION_GETPROPERTY = 88;
	public const uint32 DISPID_XMLDOM_SELECTION_SETPROPERTY = 89;
	public const uint32 DISPID_XMLDOM_SELECTION__TOP = 90;
	public const uint32 DISPID_XMLDOM_TEMPLATE = 1;
	public const uint32 DISPID_XMLDOM_TEMPLATE_STYLESHEET = 2;
	public const uint32 DISPID_XMLDOM_TEMPLATE_CREATEPROCESSOR = 3;
	public const uint32 DISPID_XMLDOM_TEMPLATE__TOP = 4;
	public const uint32 DISPID_XMLDOM_PROCESSOR = 1;
	public const uint32 DISPID_XMLDOM_PROCESSOR_INPUT = 2;
	public const uint32 DISPID_XMLDOM_PROCESSOR_XSLTEMPLATE = 3;
	public const uint32 DISPID_XMLDOM_PROCESSOR_SETSTARTMODE = 4;
	public const uint32 DISPID_XMLDOM_PROCESSOR_STARTMODE = 5;
	public const uint32 DISPID_XMLDOM_PROCESSOR_STARTMODEURI = 6;
	public const uint32 DISPID_XMLDOM_PROCESSOR_OUTPUT = 7;
	public const uint32 DISPID_XMLDOM_PROCESSOR_TRANSFORM = 8;
	public const uint32 DISPID_XMLDOM_PROCESSOR_RESET = 9;
	public const uint32 DISPID_XMLDOM_PROCESSOR_READYSTATE = 10;
	public const uint32 DISPID_XMLDOM_PROCESSOR_ADDPARAMETER = 11;
	public const uint32 DISPID_XMLDOM_PROCESSOR_ADDOBJECT = 12;
	public const uint32 DISPID_XMLDOM_PROCESSOR_STYLESHEET = 13;
	public const uint32 DISPID_XMLDOM_PROCESSOR__TOP = 14;
	public const uint32 DISPID_XMLDSO = 65536;
	public const uint32 DISPID_XMLDSO_DOCUMENT = 65537;
	public const uint32 DISPID_XMLDSO_JAVADSOCOMPATIBLE = 65538;
	public const uint32 DISPID_SAX_XMLREADER__MIN = 1281;
	public const uint32 DISPID_SAX_XMLREADER__MAX = 65536;
	public const uint32 DISPID_SAX_XMLREADER__BASE = 1281;
	public const uint32 DISPID_SAX_XMLREADER = 1281;
	public const uint32 DISPID_SAX_XMLREADER_GETFEATURE = 1282;
	public const uint32 DISPID_SAX_XMLREADER_PUTFEATURE = 1283;
	public const uint32 DISPID_SAX_XMLREADER_GETPROPERTY = 1284;
	public const uint32 DISPID_SAX_XMLREADER_PUTPROPERTY = 1285;
	public const uint32 DISPID_SAX_XMLREADER_ENTITYRESOLVER = 1286;
	public const uint32 DISPID_SAX_XMLREADER_CONTENTHANDLER = 1287;
	public const uint32 DISPID_SAX_XMLREADER_DTDHANDLER = 1288;
	public const uint32 DISPID_SAX_XMLREADER_ERRORHANDLER = 1289;
	public const uint32 DISPID_SAX_XMLREADER_BASEURL = 1290;
	public const uint32 DISPID_SAX_XMLREADER_SECUREBASEURL = 1291;
	public const uint32 DISPID_SAX_XMLREADER_PARSE = 1292;
	public const uint32 DISPID_SAX_XMLREADER_PARSEURL = 1293;
	public const uint32 DISPID_SAX_XMLREADER_PARENT = 1294;
	public const uint32 DISPID_SAX_XMLREADER__TOP = 1295;
	public const uint32 DISPID_SAX_XMLFILTER__BASE = 1296;
	public const uint32 DISPID_SAX_XMLFILTER = 1296;
	public const uint32 DISPID_SAX_XMLFILTER_GETFEATURE = 1297;
	public const uint32 DISPID_SAX_XMLFILTER_PUTFEATURE = 1298;
	public const uint32 DISPID_SAX_XMLFILTER_GETPROPERTY = 1299;
	public const uint32 DISPID_SAX_XMLFILTER_PUTPROPERTY = 1300;
	public const uint32 DISPID_SAX_XMLFILTER_ENTITYRESOLVER = 1301;
	public const uint32 DISPID_SAX_XMLFILTER_CONTENTHANDLER = 1302;
	public const uint32 DISPID_SAX_XMLFILTER_DTDHANDLER = 1303;
	public const uint32 DISPID_SAX_XMLFILTER_ERRORHANDLER = 1304;
	public const uint32 DISPID_SAX_XMLFILTER_BASEURL = 1305;
	public const uint32 DISPID_SAX_XMLFILTER_SECUREBASEURL = 1306;
	public const uint32 DISPID_SAX_XMLFILTER_PARSE = 1307;
	public const uint32 DISPID_SAX_XMLFILTER_PARSEURL = 1308;
	public const uint32 DISPID_SAX_XMLFILTER_PARENT = 1309;
	public const uint32 DISPID_SAX_XMLFILTER__TOP = 1311;
	public const uint32 DISPID_SAX_LOCATOR__BASE = 1312;
	public const uint32 DISPID_SAX_LOCATOR = 1312;
	public const uint32 DISPID_SAX_LOCATOR_COLUMNNUMBER = 1313;
	public const uint32 DISPID_SAX_LOCATOR_LINENUMBER = 1314;
	public const uint32 DISPID_SAX_LOCATOR_PUBLICID = 1315;
	public const uint32 DISPID_SAX_LOCATOR_SYSTEMID = 1316;
	public const uint32 DISPID_SAX_LOCATOR__TOP = 1317;
	public const uint32 DISPID_SAX_ENTITYRESOLVER__BASE = 1318;
	public const uint32 DISPID_SAX_ENTITYRESOLVER = 1318;
	public const uint32 DISPID_SAX_ENTITYRESOLVER_RESOLVEENTITY = 1319;
	public const uint32 DISPID_SAX_ENTITYRESOLVER__TOP = 1320;
	public const uint32 DISPID_SAX_CONTENTHANDLER__BASE = 1321;
	public const uint32 DISPID_SAX_CONTENTHANDLER = 1321;
	public const uint32 DISPID_SAX_CONTENTHANDLER_DOCUMENTLOCATOR = 1322;
	public const uint32 DISPID_SAX_CONTENTHANDLER_STARTDOCUMENT = 1323;
	public const uint32 DISPID_SAX_CONTENTHANDLER_ENDDOCUMENT = 1324;
	public const uint32 DISPID_SAX_CONTENTHANDLER_STARTPREFIXMAPPING = 1325;
	public const uint32 DISPID_SAX_CONTENTHANDLER_ENDPREFIXMAPPING = 1326;
	public const uint32 DISPID_SAX_CONTENTHANDLER_STARTELEMENT = 1327;
	public const uint32 DISPID_SAX_CONTENTHANDLER_ENDELEMENT = 1328;
	public const uint32 DISPID_SAX_CONTENTHANDLER_CHARACTERS = 1329;
	public const uint32 DISPID_SAX_CONTENTHANDLER_IGNORABLEWHITESPACE = 1330;
	public const uint32 DISPID_SAX_CONTENTHANDLER_PROCESSINGINSTRUCTION = 1331;
	public const uint32 DISPID_SAX_CONTENTHANDLER_SKIPPEDENTITY = 1332;
	public const uint32 DISPID_SAX_CONTENTHANDLER__TOP = 1333;
	public const uint32 DISPID_SAX_DTDHANDLER__BASE = 1334;
	public const uint32 DISPID_SAX_DTDHANDLER = 1334;
	public const uint32 DISPID_SAX_DTDHANDLER_NOTATIONDECL = 1335;
	public const uint32 DISPID_SAX_DTDHANDLER_UNPARSEDENTITYDECL = 1336;
	public const uint32 DISPID_SAX_DTDHANDLER__TOP = 1337;
	public const uint32 DISPID_SAX_ERRORHANDLER__BASE = 1338;
	public const uint32 DISPID_SAX_ERRORHANDLER = 1338;
	public const uint32 DISPID_SAX_ERRORHANDLER_ERROR = 1339;
	public const uint32 DISPID_SAX_ERRORHANDLER_FATALERROR = 1340;
	public const uint32 DISPID_SAX_ERRORHANDLER_IGNORABLEWARNING = 1341;
	public const uint32 DISPID_SAX_ERRORHANDLER__TOP = 1342;
	public const uint32 DISPID_SAX_ATTRIBUTES__BASE = 1343;
	public const uint32 DISPID_SAX_ATTRIBUTES = 1343;
	public const uint32 DISPID_SAX_ATTRIBUTES_LENGTH = 1344;
	public const uint32 DISPID_SAX_ATTRIBUTES_GETURI = 1345;
	public const uint32 DISPID_SAX_ATTRIBUTES_GETLOCALNAME = 1346;
	public const uint32 DISPID_SAX_ATTRIBUTES_GETQNAME = 1347;
	public const uint32 DISPID_SAX_ATTRIBUTES_GETINDEXFROMNAME = 1348;
	public const uint32 DISPID_SAX_ATTRIBUTES_GETINDEXFROMQNAME = 1349;
	public const uint32 DISPID_SAX_ATTRIBUTES_GETTYPE = 1350;
	public const uint32 DISPID_SAX_ATTRIBUTES_GETTYPEFROMNAME = 1351;
	public const uint32 DISPID_SAX_ATTRIBUTES_GETTYPEFROMQNAME = 1352;
	public const uint32 DISPID_SAX_ATTRIBUTES_GETVALUE = 1353;
	public const uint32 DISPID_SAX_ATTRIBUTES_GETVALUEFROMNAME = 1354;
	public const uint32 DISPID_SAX_ATTRIBUTES_GETVALUEFROMQNAME = 1355;
	public const uint32 DISPID_SAX_ATTRIBUTES__TOP = 1356;
	public const uint32 DISPID_SAX_LEXICALHANDLER__BASE = 1357;
	public const uint32 DISPID_SAX_LEXICALHANDLER = 1357;
	public const uint32 DISPID_SAX_LEXICALHANDLER_STARTDTD = 1358;
	public const uint32 DISPID_SAX_LEXICALHANDLER_ENDDTD = 1359;
	public const uint32 DISPID_SAX_LEXICALHANDLER_STARTENTITY = 1360;
	public const uint32 DISPID_SAX_LEXICALHANDLER_ENDENTITY = 1361;
	public const uint32 DISPID_SAX_LEXICALHANDLER_STARTCDATA = 1362;
	public const uint32 DISPID_SAX_LEXICALHANDLER_ENDCDATA = 1363;
	public const uint32 DISPID_SAX_LEXICALHANDLER_COMMENT = 1364;
	public const uint32 DISPID_SAX_LEXICALHANDLER__TOP = 1365;
	public const uint32 DISPID_SAX_DECLHANDLER__BASE = 1366;
	public const uint32 DISPID_SAX_DECLHANDLER = 1366;
	public const uint32 DISPID_SAX_DECLHANDLER_ELEMENTDECL = 1367;
	public const uint32 DISPID_SAX_DECLHANDLER_ATTRIBUTEDECL = 1368;
	public const uint32 DISPID_SAX_DECLHANDLER_INTERNALENTITYDECL = 1369;
	public const uint32 DISPID_SAX_DECLHANDLER_EXTERNALENTITYDECL = 1370;
	public const uint32 DISPID_SAX_DECLHANDLER__TOP = 1371;
	public const uint32 DISPID_MX_ATTRIBUTES__BASE = 1372;
	public const uint32 DISPID_MX_ATTRIBUTES = 1372;
	public const uint32 DISPID_MX_ATTRIBUTES_ADDATTRIBUTE = 1373;
	public const uint32 DISPID_MX_ATTRIBUTES_CLEAR = 1374;
	public const uint32 DISPID_MX_ATTRIBUTES_REMOVEATTRIBUTE = 1375;
	public const uint32 DISPID_MX_ATTRIBUTES_SETATTRIBUTE = 1376;
	public const uint32 DISPID_MX_ATTRIBUTES_SETATTRIBUTES = 1377;
	public const uint32 DISPID_MX_ATTRIBUTES_SETLOCALNAME = 1378;
	public const uint32 DISPID_MX_ATTRIBUTES_SETQNAME = 1379;
	public const uint32 DISPID_MX_ATTRIBUTES_SETTYPE = 1380;
	public const uint32 DISPID_MX_ATTRIBUTES_SETURI = 1381;
	public const uint32 DISPID_MX_ATTRIBUTES_SETVALUE = 1382;
	public const uint32 DISPID_MX_ATTRIBUTES_ADDATTRIBUTEFROMINDEX = 1383;
	public const uint32 DISPID_MX_ATTRIBUTES__TOP = 1383;
	public const uint32 DISPID_MX_WRITER__BASE = 1384;
	public const uint32 DISPID_MX_WRITER = 1384;
	public const uint32 DISPID_MX_WRITER_OUTPUT = 1385;
	public const uint32 DISPID_MX_WRITER_DESTINATION = 1386;
	public const uint32 DISPID_MX_WRITER_ENCODING = 1387;
	public const uint32 DISPID_MX_WRITER_BYTEORDERMARK = 1388;
	public const uint32 DISPID_MX_WRITER_INDENT = 1389;
	public const uint32 DISPID_MX_WRITER_STANDALONE = 1390;
	public const uint32 DISPID_MX_WRITER_OMITXMLDECLARATION = 1391;
	public const uint32 DISPID_MX_WRITER_VERSION = 1392;
	public const uint32 DISPID_MX_WRITER_DISABLEOUTPUTESCAPING = 1393;
	public const uint32 DISPID_MX_WRITER_FLUSH = 1394;
	public const uint32 DISPID_MX_WRITER_RESET = 1395;
	public const uint32 DISPID_MX_WRITER__TOP = 1396;
	public const uint32 DISPID_MX_READER_CONTROL__BASE = 1397;
	public const uint32 DISPID_MX_READER_CONTROL = 1397;
	public const uint32 DISPID_MX_READER_CONTROL_ABORT = 1398;
	public const uint32 DISPID_MX_READER_CONTROL_RESUME = 1399;
	public const uint32 DISPID_MX_READER_CONTROL_SUSPEND = 1400;
	public const uint32 DISPID_MX_READER_CONTROL__TOP = 1401;
	public const uint32 DISPID_MX_SCHEMADECLHANDLER__BASE = 1402;
	public const uint32 DISPID_MX_SCHEMADECLHANDLER = 1402;
	public const uint32 DISPID_MX_SCHEMADECLHANDLER_SCHEMAELEMENTDECL = 1403;
	public const uint32 DISPID_MX_SCHEMADECLHANDLER__TOP = 1404;
	public const uint32 DISPID_MX_NSMGR__BASE = 1405;
	public const uint32 DISPID_MX_NSMGR = 1405;
	public const uint32 DISPID_MX_NSMGR_ALLOWOVERRIDE = 1406;
	public const uint32 DISPID_MX_NSMGR_RESET = 1407;
	public const uint32 DISPID_MX_NSMGR_PUSHCONTEXT = 1408;
	public const uint32 DISPID_MX_NSMGR_PUSHNODECONTEXT = 1409;
	public const uint32 DISPID_MX_NSMGR_POPCONTEXT = 1410;
	public const uint32 DISPID_MX_NSMGR_DECLAREPREFIX = 1411;
	public const uint32 DISPID_MX_NSMGR_GETDECLAREDPREFIXES = 1412;
	public const uint32 DISPID_MX_NSMGR_GETPREFIXES = 1413;
	public const uint32 DISPID_MX_NSMGR_GETURI = 1414;
	public const uint32 DISPID_MX_NSMGR_GETURIFROMNODE = 1415;
	public const uint32 DISPID_MX_NSMGR_LENGTH = 1416;
	public const uint32 DISPID_MX_NSMGR__TOP = 1417;
	public const uint32 DISPID_MXXML_FILTER__BASE = 1418;
	public const uint32 DISPID_MXXML_FILTER = 1418;
	public const uint32 DISPID_MXXML_FILTER_CONTENTHANDLER = 1419;
	public const uint32 DISPID_MXXML_FILTER_DTDHANDLER = 1420;
	public const uint32 DISPID_MXXML_FILTER_ENTITYRESOLVER = 1421;
	public const uint32 DISPID_MXXML_FILTER_ERRORHANDLER = 1422;
	public const uint32 DISPID_MXXML_FILTER_GETFEATURE = 1423;
	public const uint32 DISPID_MXXML_FILTER_GETPROPERTY = 1424;
	public const uint32 DISPID_MXXML_FILTER_PUTFEATURE = 1425;
	public const uint32 DISPID_MXXML_FILTER_PUTPROPERTY = 1426;
	public const uint32 DISPID_MXXML_FILTER__TOP = 1427;
	public const uint32 DISPID_SOM = 1418;
	public const uint32 DISPID_SOM_VALIDATE = 1419;
	public const uint32 DISPID_SOM_VALIDATEONLOAD = 1420;
	public const uint32 DISPID_SOM_GETSCHEMA = 1421;
	public const uint32 DISPID_SOM_GETDECLARATION = 1422;
	public const uint32 DISPID_SOM_ITEMBYNAME = 1423;
	public const uint32 DISPID_SOM_ITEMBYQNAME = 1424;
	public const uint32 DISPID_SOM_ANYATTRIBUTE = 1425;
	public const uint32 DISPID_SOM_ATTRIBUTEGROUPS = 1426;
	public const uint32 DISPID_SOM_ATTRIBUTES = 1427;
	public const uint32 DISPID_SOM_BASETYPES = 1428;
	public const uint32 DISPID_SOM_CONTENTMODEL = 1429;
	public const uint32 DISPID_SOM_CONTENTTYPE = 1430;
	public const uint32 DISPID_SOM_DEFAULTVALUE = 1431;
	public const uint32 DISPID_SOM_DERIVEDBY = 1432;
	public const uint32 DISPID_SOM_DISALLOWED = 1433;
	public const uint32 DISPID_SOM_ELEMENTS = 1434;
	public const uint32 DISPID_SOM_ENUMERATION = 1435;
	public const uint32 DISPID_SOM_FIELDS = 1436;
	public const uint32 DISPID_SOM_FINAL = 1437;
	public const uint32 DISPID_SOM_FIXEDVALUE = 1438;
	public const uint32 DISPID_SOM_FRACTIONDIGITS = 1439;
	public const uint32 DISPID_SOM_ID = 1440;
	public const uint32 DISPID_SOM_IDCONSTRAINTS = 1441;
	public const uint32 DISPID_SOM_ISABSTRACT = 1442;
	public const uint32 DISPID_SOM_ISNILLABLE = 1443;
	public const uint32 DISPID_SOM_ISREFERENCE = 1444;
	public const uint32 DISPID_SOM_ISVALID = 1445;
	public const uint32 DISPID_SOM_ITEMTYPE = 1446;
	public const uint32 DISPID_SOM_LENGTH = 1447;
	public const uint32 DISPID_SOM_MAXEXCLUSIVE = 1448;
	public const uint32 DISPID_SOM_MAXINCLUSIVE = 1449;
	public const uint32 DISPID_SOM_MAXLENGTH = 1450;
	public const uint32 DISPID_SOM_MAXOCCURS = 1451;
	public const uint32 DISPID_SOM_MINEXCLUSIVE = 1452;
	public const uint32 DISPID_SOM_MININCLUSIVE = 1453;
	public const uint32 DISPID_SOM_MINLENGTH = 1454;
	public const uint32 DISPID_SOM_MINOCCURS = 1455;
	public const uint32 DISPID_SOM_MODELGROUPS = 1456;
	public const uint32 DISPID_SOM_NAME = 1457;
	public const uint32 DISPID_SOM_NAMESPACES = 1458;
	public const uint32 DISPID_SOM_NAMESPACEURI = 1459;
	public const uint32 DISPID_SOM_NOTATIONS = 1460;
	public const uint32 DISPID_SOM_PARTICLES = 1461;
	public const uint32 DISPID_SOM_PATTERNS = 1462;
	public const uint32 DISPID_SOM_PROCESSCONTENTS = 1463;
	public const uint32 DISPID_SOM_PROHIBITED = 1464;
	public const uint32 DISPID_SOM_PUBLICIDENTIFIER = 1465;
	public const uint32 DISPID_SOM_REFERENCEDKEY = 1466;
	public const uint32 DISPID_SOM_SCHEMA = 1467;
	public const uint32 DISPID_SOM_SCHEMALOCATIONS = 1468;
	public const uint32 DISPID_SOM_SCOPE = 1469;
	public const uint32 DISPID_SOM_SELECTOR = 1470;
	public const uint32 DISPID_SOM_SUBSTITUTIONGROUP = 1471;
	public const uint32 DISPID_SOM_EXCLUSIONS = 1472;
	public const uint32 DISPID_SOM_SYSTEMIDENTIFIER = 1473;
	public const uint32 DISPID_SOM_TARGETNAMESPACE = 1474;
	public const uint32 DISPID_SOM_TOTALDIGITS = 1475;
	public const uint32 DISPID_SOM_TYPE = 1476;
	public const uint32 DISPID_SOM_TYPES = 1477;
	public const uint32 DISPID_SOM_UNHANDLEDATTRS = 1478;
	public const uint32 DISPID_SOM_USE = 1479;
	public const uint32 DISPID_SOM_VARIETY = 1480;
	public const uint32 DISPID_SOM_VERSION = 1481;
	public const uint32 DISPID_SOM_WHITESPACE = 1482;
	public const uint32 DISPID_SOM_WRITEANNOTATION = 1483;
	public const uint32 DISPID_SOM_TOP = 1484;
	public const uint32 DISPID_XMLDSIG = 1;
	public const uint32 DISPID_XMLDSIG_CREATEKEYFROMCSP = 1;
	public const uint32 DISPID_XMLDSIG_CREATEKEYFROMHMACSECRET = 2;
	public const uint32 DISPID_XMLDSIG_CREATEKEYFROMNODE = 3;
	public const uint32 DISPID_XMLDSIG_CREATESAXPROXY = 4;
	public const uint32 DISPID_XMLDSIG_GETVERIFYINGCERTIFICATE = 5;
	public const uint32 DISPID_XMLDSIG_SETREFERENCEDATA = 6;
	public const uint32 DISPID_XMLDSIG_SIGN = 7;
	public const uint32 DISPID_XMLDSIG_SIGNATURE = 8;
	public const uint32 DISPID_XMLDSIG_STORE = 9;
	public const uint32 DISPID_XMLDSIG_VERIFY = 10;
}
#endregion

#region Enums

[AllowDuplicates]
public enum DOMNodeType : int32
{
	NODE_INVALID = 0,
	NODE_ELEMENT = 1,
	NODE_ATTRIBUTE = 2,
	NODE_TEXT = 3,
	NODE_CDATA_SECTION = 4,
	NODE_ENTITY_REFERENCE = 5,
	NODE_ENTITY = 6,
	NODE_PROCESSING_INSTRUCTION = 7,
	NODE_COMMENT = 8,
	NODE_DOCUMENT = 9,
	NODE_DOCUMENT_TYPE = 10,
	NODE_DOCUMENT_FRAGMENT = 11,
	NODE_NOTATION = 12,
}


[AllowDuplicates]
public enum XMLEMEM_TYPE : int32
{
	XMLELEMTYPE_ELEMENT = 0,
	XMLELEMTYPE_TEXT = 1,
	XMLELEMTYPE_COMMENT = 2,
	XMLELEMTYPE_DOCUMENT = 3,
	XMLELEMTYPE_DTD = 4,
	XMLELEMTYPE_PI = 5,
	XMLELEMTYPE_OTHER = 6,
}


[AllowDuplicates]
public enum SERVERXMLHTTP_OPTION : int32
{
	SXH_OPTION_URL = -1,
	SXH_OPTION_URL_CODEPAGE = 0,
	SXH_OPTION_ESCAPE_PERCENT_IN_URL = 1,
	SXH_OPTION_IGNORE_SERVER_SSL_CERT_ERROR_FLAGS = 2,
	SXH_OPTION_SELECT_CLIENT_SSL_CERT = 3,
}


[AllowDuplicates]
public enum SXH_SERVER_CERT_OPTION : int32
{
	SXH_SERVER_CERT_IGNORE_UNKNOWN_CA = 256,
	SXH_SERVER_CERT_IGNORE_WRONG_USAGE = 512,
	SXH_SERVER_CERT_IGNORE_CERT_CN_INVALID = 4096,
	SXH_SERVER_CERT_IGNORE_CERT_DATE_INVALID = 8192,
	SXH_SERVER_CERT_IGNORE_ALL_SERVER_ERRORS = 13056,
}


[AllowDuplicates]
public enum SXH_PROXY_SETTING : int32
{
	SXH_PROXY_SET_DEFAULT = 0,
	SXH_PROXY_SET_PRECONFIG = 0,
	SXH_PROXY_SET_DIRECT = 1,
	SXH_PROXY_SET_PROXY = 2,
}


[AllowDuplicates]
public enum SOMITEMTYPE : int32
{
	SOMITEM_SCHEMA = 4096,
	SOMITEM_ATTRIBUTE = 4097,
	SOMITEM_ATTRIBUTEGROUP = 4098,
	SOMITEM_NOTATION = 4099,
	SOMITEM_ANNOTATION = 4100,
	SOMITEM_IDENTITYCONSTRAINT = 4352,
	SOMITEM_KEY = 4353,
	SOMITEM_KEYREF = 4354,
	SOMITEM_UNIQUE = 4355,
	SOMITEM_ANYTYPE = 8192,
	SOMITEM_DATATYPE = 8448,
	SOMITEM_DATATYPE_ANYTYPE = 8449,
	SOMITEM_DATATYPE_ANYURI = 8450,
	SOMITEM_DATATYPE_BASE64BINARY = 8451,
	SOMITEM_DATATYPE_BOOLEAN = 8452,
	SOMITEM_DATATYPE_BYTE = 8453,
	SOMITEM_DATATYPE_DATE = 8454,
	SOMITEM_DATATYPE_DATETIME = 8455,
	SOMITEM_DATATYPE_DAY = 8456,
	SOMITEM_DATATYPE_DECIMAL = 8457,
	SOMITEM_DATATYPE_DOUBLE = 8458,
	SOMITEM_DATATYPE_DURATION = 8459,
	SOMITEM_DATATYPE_ENTITIES = 8460,
	SOMITEM_DATATYPE_ENTITY = 8461,
	SOMITEM_DATATYPE_FLOAT = 8462,
	SOMITEM_DATATYPE_HEXBINARY = 8463,
	SOMITEM_DATATYPE_ID = 8464,
	SOMITEM_DATATYPE_IDREF = 8465,
	SOMITEM_DATATYPE_IDREFS = 8466,
	SOMITEM_DATATYPE_INT = 8467,
	SOMITEM_DATATYPE_INTEGER = 8468,
	SOMITEM_DATATYPE_LANGUAGE = 8469,
	SOMITEM_DATATYPE_LONG = 8470,
	SOMITEM_DATATYPE_MONTH = 8471,
	SOMITEM_DATATYPE_MONTHDAY = 8472,
	SOMITEM_DATATYPE_NAME = 8473,
	SOMITEM_DATATYPE_NCNAME = 8474,
	SOMITEM_DATATYPE_NEGATIVEINTEGER = 8475,
	SOMITEM_DATATYPE_NMTOKEN = 8476,
	SOMITEM_DATATYPE_NMTOKENS = 8477,
	SOMITEM_DATATYPE_NONNEGATIVEINTEGER = 8478,
	SOMITEM_DATATYPE_NONPOSITIVEINTEGER = 8479,
	SOMITEM_DATATYPE_NORMALIZEDSTRING = 8480,
	SOMITEM_DATATYPE_NOTATION = 8481,
	SOMITEM_DATATYPE_POSITIVEINTEGER = 8482,
	SOMITEM_DATATYPE_QNAME = 8483,
	SOMITEM_DATATYPE_SHORT = 8484,
	SOMITEM_DATATYPE_STRING = 8485,
	SOMITEM_DATATYPE_TIME = 8486,
	SOMITEM_DATATYPE_TOKEN = 8487,
	SOMITEM_DATATYPE_UNSIGNEDBYTE = 8488,
	SOMITEM_DATATYPE_UNSIGNEDINT = 8489,
	SOMITEM_DATATYPE_UNSIGNEDLONG = 8490,
	SOMITEM_DATATYPE_UNSIGNEDSHORT = 8491,
	SOMITEM_DATATYPE_YEAR = 8492,
	SOMITEM_DATATYPE_YEARMONTH = 8493,
	SOMITEM_DATATYPE_ANYSIMPLETYPE = 8703,
	SOMITEM_SIMPLETYPE = 8704,
	SOMITEM_COMPLEXTYPE = 9216,
	SOMITEM_PARTICLE = 16384,
	SOMITEM_ANY = 16385,
	SOMITEM_ANYATTRIBUTE = 16386,
	SOMITEM_ELEMENT = 16387,
	SOMITEM_GROUP = 16640,
	SOMITEM_ALL = 16641,
	SOMITEM_CHOICE = 16642,
	SOMITEM_SEQUENCE = 16643,
	SOMITEM_EMPTYPARTICLE = 16644,
	SOMITEM_NULL = 2048,
	SOMITEM_NULL_TYPE = 10240,
	SOMITEM_NULL_ANY = 18433,
	SOMITEM_NULL_ANYATTRIBUTE = 18434,
	SOMITEM_NULL_ELEMENT = 18435,
}


[AllowDuplicates]
public enum SCHEMAUSE : int32
{
	SCHEMAUSE_OPTIONAL = 0,
	SCHEMAUSE_PROHIBITED = 1,
	SCHEMAUSE_REQUIRED = 2,
}


[AllowDuplicates]
public enum SCHEMADERIVATIONMETHOD : int32
{
	SCHEMADERIVATIONMETHOD_EMPTY = 0,
	SCHEMADERIVATIONMETHOD_SUBSTITUTION = 1,
	SCHEMADERIVATIONMETHOD_EXTENSION = 2,
	SCHEMADERIVATIONMETHOD_RESTRICTION = 4,
	SCHEMADERIVATIONMETHOD_LIST = 8,
	SCHEMADERIVATIONMETHOD_UNION = 16,
	SCHEMADERIVATIONMETHOD_ALL = 255,
	SCHEMADERIVATIONMETHOD_NONE = 256,
}


[AllowDuplicates]
public enum SCHEMACONTENTTYPE : int32
{
	SCHEMACONTENTTYPE_EMPTY = 0,
	SCHEMACONTENTTYPE_TEXTONLY = 1,
	SCHEMACONTENTTYPE_ELEMENTONLY = 2,
	SCHEMACONTENTTYPE_MIXED = 3,
}


[AllowDuplicates]
public enum SCHEMAPROCESSCONTENTS : int32
{
	SCHEMAPROCESSCONTENTS_NONE = 0,
	SCHEMAPROCESSCONTENTS_SKIP = 1,
	SCHEMAPROCESSCONTENTS_LAX = 2,
	SCHEMAPROCESSCONTENTS_STRICT = 3,
}


[AllowDuplicates]
public enum SCHEMAWHITESPACE : int32
{
	SCHEMAWHITESPACE_NONE = -1,
	SCHEMAWHITESPACE_PRESERVE = 0,
	SCHEMAWHITESPACE_REPLACE = 1,
	SCHEMAWHITESPACE_COLLAPSE = 2,
}


[AllowDuplicates]
public enum SCHEMATYPEVARIETY : int32
{
	SCHEMATYPEVARIETY_NONE = -1,
	SCHEMATYPEVARIETY_ATOMIC = 0,
	SCHEMATYPEVARIETY_LIST = 1,
	SCHEMATYPEVARIETY_UNION = 2,
}


[AllowDuplicates]
public enum XHR_COOKIE_STATE : int32
{
	XHR_COOKIE_STATE_UNKNOWN = 0,
	XHR_COOKIE_STATE_ACCEPT = 1,
	XHR_COOKIE_STATE_PROMPT = 2,
	XHR_COOKIE_STATE_LEASH = 3,
	XHR_COOKIE_STATE_DOWNGRADE = 4,
	XHR_COOKIE_STATE_REJECT = 5,
}


[AllowDuplicates]
public enum XHR_COOKIE_FLAG : int32
{
	XHR_COOKIE_IS_SECURE = 1,
	XHR_COOKIE_IS_SESSION = 2,
	XHR_COOKIE_THIRD_PARTY = 16,
	XHR_COOKIE_PROMPT_REQUIRED = 32,
	XHR_COOKIE_EVALUATE_P3P = 64,
	XHR_COOKIE_APPLY_P3P = 128,
	XHR_COOKIE_P3P_ENABLED = 256,
	XHR_COOKIE_IS_RESTRICTED = 512,
	XHR_COOKIE_IE6 = 1024,
	XHR_COOKIE_IS_LEGACY = 2048,
	XHR_COOKIE_NON_SCRIPT = 4096,
	XHR_COOKIE_HTTPONLY = 8192,
}


[AllowDuplicates]
public enum XHR_CRED_PROMPT : int32
{
	XHR_CRED_PROMPT_ALL = 0,
	XHR_CRED_PROMPT_NONE = 1,
	XHR_CRED_PROMPT_PROXY = 2,
}


[AllowDuplicates]
public enum XHR_AUTH : int32
{
	XHR_AUTH_ALL = 0,
	XHR_AUTH_NONE = 1,
	XHR_AUTH_PROXY = 2,
}


[AllowDuplicates]
public enum XHR_PROPERTY : int32
{
	XHR_PROP_NO_CRED_PROMPT = 0,
	XHR_PROP_NO_AUTH = 1,
	XHR_PROP_TIMEOUT = 2,
	XHR_PROP_NO_DEFAULT_HEADERS = 3,
	XHR_PROP_REPORT_REDIRECT_STATUS = 4,
	XHR_PROP_NO_CACHE = 5,
	XHR_PROP_EXTENDED_ERROR = 6,
	XHR_PROP_QUERY_STRING_UTF8 = 7,
	XHR_PROP_IGNORE_CERT_ERRORS = 8,
	XHR_PROP_ONDATA_THRESHOLD = 9,
	XHR_PROP_SET_ENTERPRISEID = 10,
	XHR_PROP_MAX_CONNECTIONS = 11,
}


[AllowDuplicates]
public enum XHR_CERT_IGNORE_FLAG : uint32
{
	XHR_CERT_IGNORE_REVOCATION_FAILED = 128,
	XHR_CERT_IGNORE_UNKNOWN_CA = 256,
	XHR_CERT_IGNORE_CERT_CN_INVALID = 4096,
	XHR_CERT_IGNORE_CERT_DATE_INVALID = 8192,
	XHR_CERT_IGNORE_ALL_SERVER_ERRORS = 12672,
}


[AllowDuplicates]
public enum XHR_CERT_ERROR_FLAG : uint32
{
	XHR_CERT_ERROR_REVOCATION_FAILED = 8388608,
	XHR_CERT_ERROR_UNKNOWN_CA = 16777216,
	XHR_CERT_ERROR_CERT_CN_INVALID = 33554432,
	XHR_CERT_ERROR_CERT_DATE_INVALID = 67108864,
	XHR_CERT_ERROR_ALL_SERVER_ERRORS = 125829120,
}

#endregion


#region Structs
[CRepr]
public struct XML_ERROR
{
	public uint32 _nLine;
	public BSTR _pchBuf;
	public uint32 _cchBuf;
	public uint32 _ich;
	public BSTR _pszFound;
	public BSTR _pszExpected;
	public uint32 _reserved1;
	public uint32 _reserved2;
}

[CRepr]
public struct __msxml6_ReferenceRemainingTypes__
{
	public DOMNodeType __tagDomNodeType__;
	public DOMNodeType __domNodeType__;
	public SERVERXMLHTTP_OPTION __serverXmlHttpOptionEnum__;
	public SERVERXMLHTTP_OPTION __serverXmlHttpOption__;
	public SXH_SERVER_CERT_OPTION __serverCertOptionEnum__;
	public SXH_SERVER_CERT_OPTION __serverCertOption__;
	public SXH_PROXY_SETTING __proxySettingEnum__;
	public SXH_PROXY_SETTING __proxySetting__;
	public SOMITEMTYPE __somItemTypeEnum__;
	public SOMITEMTYPE __somItemType__;
	public SCHEMAUSE __schemaUseEnum__;
	public SCHEMAUSE __schemaUse__;
	public SCHEMADERIVATIONMETHOD __schemaDerivationMethodEnum__;
	public SCHEMADERIVATIONMETHOD __schemaDerivationMethod__;
	public SCHEMACONTENTTYPE __schemaContentTypeEnum__;
	public SCHEMACONTENTTYPE __schemaContentType__;
	public SCHEMAPROCESSCONTENTS __schemaProcessContentsEnum__;
	public SCHEMAPROCESSCONTENTS __schemaProcessContents__;
	public SCHEMAWHITESPACE __schemaWhitespaceEnum__;
	public SCHEMAWHITESPACE __schemaWhitespace__;
	public SCHEMATYPEVARIETY __schemaTypeVarietyEnum__;
	public SCHEMATYPEVARIETY __schemaTypeVariety__;
}

[CRepr]
public struct XHR_COOKIE
{
	public PWSTR pwszUrl;
	public PWSTR pwszName;
	public PWSTR pwszValue;
	public PWSTR pwszP3PPolicy;
	public FILETIME ftExpires;
	public uint32 dwFlags;
}

[CRepr]
public struct XHR_CERT
{
	public uint32 cbCert;
	public uint8* pbCert;
}

#endregion

#region COM Class IDs
public static
{
	public const Guid CLSID_DOMDocument = .(0x2933bf90, 0x7b36, 0x11d2, 0xb2, 0x0e, 0x00, 0xc0, 0x4f, 0x98, 0x3e, 0x60);


	public const Guid CLSID_DOMFreeThreadedDocument = .(0x2933bf91, 0x7b36, 0x11d2, 0xb2, 0x0e, 0x00, 0xc0, 0x4f, 0x98, 0x3e, 0x60);


	public const Guid CLSID_XMLHTTPRequest = .(0xed8c108e, 0x4349, 0x11d2, 0x91, 0xa4, 0x00, 0xc0, 0x4f, 0x79, 0x69, 0xe8);


	public const Guid CLSID_XMLDSOControl = .(0x550dda30, 0x0541, 0x11d2, 0x9c, 0xa9, 0x00, 0x60, 0xb0, 0xec, 0x3d, 0x39);


	public const Guid CLSID_XMLDocument = .(0xcfc399af, 0xd876, 0x11d0, 0x9c, 0x10, 0x00, 0xc0, 0x4f, 0xc9, 0x9c, 0x8e);


	public const Guid CLSID_DOMDocument60 = .(0x88d96a05, 0xf192, 0x11d4, 0xa6, 0x5f, 0x00, 0x40, 0x96, 0x32, 0x51, 0xe5);


	public const Guid CLSID_FreeThreadedDOMDocument60 = .(0x88d96a06, 0xf192, 0x11d4, 0xa6, 0x5f, 0x00, 0x40, 0x96, 0x32, 0x51, 0xe5);


	public const Guid CLSID_XMLSchemaCache60 = .(0x88d96a07, 0xf192, 0x11d4, 0xa6, 0x5f, 0x00, 0x40, 0x96, 0x32, 0x51, 0xe5);


	public const Guid CLSID_XSLTemplate60 = .(0x88d96a08, 0xf192, 0x11d4, 0xa6, 0x5f, 0x00, 0x40, 0x96, 0x32, 0x51, 0xe5);


	public const Guid CLSID_XMLHTTP60 = .(0x88d96a0a, 0xf192, 0x11d4, 0xa6, 0x5f, 0x00, 0x40, 0x96, 0x32, 0x51, 0xe5);


	public const Guid CLSID_FreeThreadedXMLHTTP60 = .(0x88d96a09, 0xf192, 0x11d4, 0xa6, 0x5f, 0x00, 0x40, 0x96, 0x32, 0x51, 0xe5);


	public const Guid CLSID_ServerXMLHTTP60 = .(0x88d96a0b, 0xf192, 0x11d4, 0xa6, 0x5f, 0x00, 0x40, 0x96, 0x32, 0x51, 0xe5);


	public const Guid CLSID_SAXXMLReader60 = .(0x88d96a0c, 0xf192, 0x11d4, 0xa6, 0x5f, 0x00, 0x40, 0x96, 0x32, 0x51, 0xe5);


	public const Guid CLSID_MXXMLWriter60 = .(0x88d96a0f, 0xf192, 0x11d4, 0xa6, 0x5f, 0x00, 0x40, 0x96, 0x32, 0x51, 0xe5);


	public const Guid CLSID_MXHTMLWriter60 = .(0x88d96a10, 0xf192, 0x11d4, 0xa6, 0x5f, 0x00, 0x40, 0x96, 0x32, 0x51, 0xe5);


	public const Guid CLSID_SAXAttributes60 = .(0x88d96a0e, 0xf192, 0x11d4, 0xa6, 0x5f, 0x00, 0x40, 0x96, 0x32, 0x51, 0xe5);


	public const Guid CLSID_MXNamespaceManager60 = .(0x88d96a11, 0xf192, 0x11d4, 0xa6, 0x5f, 0x00, 0x40, 0x96, 0x32, 0x51, 0xe5);


}
#endregion

#region COM Types
[CRepr]struct IXMLDOMImplementation : IDispatch
{
	public new const Guid IID = .(0x2933bf8f, 0x7b36, 0x11d2, 0xb2, 0x0e, 0x00, 0xc0, 0x4f, 0x98, 0x3e, 0x60);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR feature, BSTR version, int16* hasFeature) hasFeature;
	}


	public HRESULT hasFeature(BSTR feature, BSTR version, int16* hasFeature) mut => VT.[Friend]hasFeature(&this, feature, version, hasFeature);
}

[CRepr]struct IXMLDOMNode : IDispatch
{
	public new const Guid IID = .(0x2933bf80, 0x7b36, 0x11d2, 0xb2, 0x0e, 0x00, 0xc0, 0x4f, 0x98, 0x3e, 0x60);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* name) get_nodeName;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* value) get_nodeValue;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT value) put_nodeValue;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, DOMNodeType* type) get_nodeType;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IXMLDOMNode** parent) get_parentNode;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IXMLDOMNodeList** childList) get_childNodes;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IXMLDOMNode** firstChild) get_firstChild;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IXMLDOMNode** lastChild) get_lastChild;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IXMLDOMNode** previousSibling) get_previousSibling;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IXMLDOMNode** nextSibling) get_nextSibling;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IXMLDOMNamedNodeMap** attributeMap) get_attributes;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IXMLDOMNode* newChild, VARIANT refChild, IXMLDOMNode** outNewChild) insertBefore;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IXMLDOMNode* newChild, IXMLDOMNode* oldChild, IXMLDOMNode** outOldChild) replaceChild;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IXMLDOMNode* childNode, IXMLDOMNode** oldChild) removeChild;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IXMLDOMNode* newChild, IXMLDOMNode** outNewChild) appendChild;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16* hasChild) hasChildNodes;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IXMLDOMDocument** XMLDOMDocument) get_ownerDocument;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16 deep, IXMLDOMNode** cloneRoot) cloneNode;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* nodeType) get_nodeTypeString;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* text) get_text;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR text) put_text;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16* isSpecified) get_specified;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IXMLDOMNode** definitionNode) get_definition;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* typedValue) get_nodeTypedValue;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT typedValue) put_nodeTypedValue;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* dataTypeName) get_dataType;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR dataTypeName) put_dataType;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* xmlString) get_xml;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IXMLDOMNode* stylesheet, BSTR* xmlString) transformNode;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR queryString, IXMLDOMNodeList** resultList) selectNodes;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR queryString, IXMLDOMNode** resultNode) selectSingleNode;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16* isParsed) get_parsed;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* namespaceURI) get_namespaceURI;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* prefixString) get_prefix;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* nameString) get_baseName;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IXMLDOMNode* stylesheet, VARIANT outputObject) transformNodeToObject;
	}


	public HRESULT get_nodeName(BSTR* name) mut => VT.[Friend]get_nodeName(&this, name);

	public HRESULT get_nodeValue(VARIANT* value) mut => VT.[Friend]get_nodeValue(&this, value);

	public HRESULT put_nodeValue(VARIANT value) mut => VT.[Friend]put_nodeValue(&this, value);

	public HRESULT get_nodeType(DOMNodeType* type) mut => VT.[Friend]get_nodeType(&this, type);

	public HRESULT get_parentNode(IXMLDOMNode** parent) mut => VT.[Friend]get_parentNode(&this, parent);

	public HRESULT get_childNodes(IXMLDOMNodeList** childList) mut => VT.[Friend]get_childNodes(&this, childList);

	public HRESULT get_firstChild(IXMLDOMNode** firstChild) mut => VT.[Friend]get_firstChild(&this, firstChild);

	public HRESULT get_lastChild(IXMLDOMNode** lastChild) mut => VT.[Friend]get_lastChild(&this, lastChild);

	public HRESULT get_previousSibling(IXMLDOMNode** previousSibling) mut => VT.[Friend]get_previousSibling(&this, previousSibling);

	public HRESULT get_nextSibling(IXMLDOMNode** nextSibling) mut => VT.[Friend]get_nextSibling(&this, nextSibling);

	public HRESULT get_attributes(IXMLDOMNamedNodeMap** attributeMap) mut => VT.[Friend]get_attributes(&this, attributeMap);

	public HRESULT insertBefore(IXMLDOMNode* newChild, VARIANT refChild, IXMLDOMNode** outNewChild) mut => VT.[Friend]insertBefore(&this, newChild, refChild, outNewChild);

	public HRESULT replaceChild(IXMLDOMNode* newChild, IXMLDOMNode* oldChild, IXMLDOMNode** outOldChild) mut => VT.[Friend]replaceChild(&this, newChild, oldChild, outOldChild);

	public HRESULT removeChild(IXMLDOMNode* childNode, IXMLDOMNode** oldChild) mut => VT.[Friend]removeChild(&this, childNode, oldChild);

	public HRESULT appendChild(IXMLDOMNode* newChild, IXMLDOMNode** outNewChild) mut => VT.[Friend]appendChild(&this, newChild, outNewChild);

	public HRESULT hasChildNodes(int16* hasChild) mut => VT.[Friend]hasChildNodes(&this, hasChild);

	public HRESULT get_ownerDocument(IXMLDOMDocument** XMLDOMDocument) mut => VT.[Friend]get_ownerDocument(&this, XMLDOMDocument);

	public HRESULT cloneNode(int16 deep, IXMLDOMNode** cloneRoot) mut => VT.[Friend]cloneNode(&this, deep, cloneRoot);

	public HRESULT get_nodeTypeString(BSTR* nodeType) mut => VT.[Friend]get_nodeTypeString(&this, nodeType);

	public HRESULT get_text(BSTR* text) mut => VT.[Friend]get_text(&this, text);

	public HRESULT put_text(BSTR text) mut => VT.[Friend]put_text(&this, text);

	public HRESULT get_specified(int16* isSpecified) mut => VT.[Friend]get_specified(&this, isSpecified);

	public HRESULT get_definition(IXMLDOMNode** definitionNode) mut => VT.[Friend]get_definition(&this, definitionNode);

	public HRESULT get_nodeTypedValue(VARIANT* typedValue) mut => VT.[Friend]get_nodeTypedValue(&this, typedValue);

	public HRESULT put_nodeTypedValue(VARIANT typedValue) mut => VT.[Friend]put_nodeTypedValue(&this, typedValue);

	public HRESULT get_dataType(VARIANT* dataTypeName) mut => VT.[Friend]get_dataType(&this, dataTypeName);

	public HRESULT put_dataType(BSTR dataTypeName) mut => VT.[Friend]put_dataType(&this, dataTypeName);

	public HRESULT get_xml(BSTR* xmlString) mut => VT.[Friend]get_xml(&this, xmlString);

	public HRESULT transformNode(IXMLDOMNode* stylesheet, BSTR* xmlString) mut => VT.[Friend]transformNode(&this, stylesheet, xmlString);

	public HRESULT selectNodes(BSTR queryString, IXMLDOMNodeList** resultList) mut => VT.[Friend]selectNodes(&this, queryString, resultList);

	public HRESULT selectSingleNode(BSTR queryString, IXMLDOMNode** resultNode) mut => VT.[Friend]selectSingleNode(&this, queryString, resultNode);

	public HRESULT get_parsed(int16* isParsed) mut => VT.[Friend]get_parsed(&this, isParsed);

	public HRESULT get_namespaceURI(BSTR* namespaceURI) mut => VT.[Friend]get_namespaceURI(&this, namespaceURI);

	public HRESULT get_prefix(BSTR* prefixString) mut => VT.[Friend]get_prefix(&this, prefixString);

	public HRESULT get_baseName(BSTR* nameString) mut => VT.[Friend]get_baseName(&this, nameString);

	public HRESULT transformNodeToObject(IXMLDOMNode* stylesheet, VARIANT outputObject) mut => VT.[Friend]transformNodeToObject(&this, stylesheet, outputObject);
}

[CRepr]struct IXMLDOMDocumentFragment : IXMLDOMNode
{
	public new const Guid IID = .(0x3efaa413, 0x272f, 0x11d2, 0x83, 0x6f, 0x00, 0x00, 0xf8, 0x7a, 0x77, 0x82);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IXMLDOMNode.VTable
	{
	}

}

[CRepr]struct IXMLDOMDocument : IXMLDOMNode
{
	public new const Guid IID = .(0x2933bf81, 0x7b36, 0x11d2, 0xb2, 0x0e, 0x00, 0xc0, 0x4f, 0x98, 0x3e, 0x60);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IXMLDOMNode.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IXMLDOMDocumentType** documentType) get_doctype;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IXMLDOMImplementation** impl) get_implementation;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IXMLDOMElement** DOMElement) get_documentElement;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IXMLDOMElement* DOMElement) putref_documentElement;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR tagName, IXMLDOMElement** element) createElement;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IXMLDOMDocumentFragment** docFrag) createDocumentFragment;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR data, IXMLDOMText** text) createTextNode;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR data, IXMLDOMComment** comment) createComment;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR data, IXMLDOMCDATASection** cdata) createCDATASection;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR target, BSTR data, IXMLDOMProcessingInstruction** pi) createProcessingInstruction;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR name, IXMLDOMAttribute** attribute) createAttribute;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR name, IXMLDOMEntityReference** entityRef) createEntityReference;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR tagName, IXMLDOMNodeList** resultList) getElementsByTagName;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT Type, BSTR name, BSTR namespaceURI, IXMLDOMNode** node) createNode;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR idString, IXMLDOMNode** node) nodeFromID;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT xmlSource, int16* isSuccessful) load;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* value) get_readyState;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IXMLDOMParseError** errorObj) get_parseError;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* urlString) get_url;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16* isAsync) get_async;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16 isAsync) put_async;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self) abort;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR bstrXML, int16* isSuccessful) loadXML;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT destination) save;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16* isValidating) get_validateOnParse;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16 isValidating) put_validateOnParse;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16* isResolving) get_resolveExternals;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16 isResolving) put_resolveExternals;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16* isPreserving) get_preserveWhiteSpace;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16 isPreserving) put_preserveWhiteSpace;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT readystatechangeSink) put_onreadystatechange;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT ondataavailableSink) put_ondataavailable;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT ontransformnodeSink) put_ontransformnode;
	}


	public HRESULT get_doctype(IXMLDOMDocumentType** documentType) mut => VT.[Friend]get_doctype(&this, documentType);

	public HRESULT get_implementation(IXMLDOMImplementation** impl) mut => VT.[Friend]get_implementation(&this, impl);

	public HRESULT get_documentElement(IXMLDOMElement** DOMElement) mut => VT.[Friend]get_documentElement(&this, DOMElement);

	public HRESULT putref_documentElement(IXMLDOMElement* DOMElement) mut => VT.[Friend]putref_documentElement(&this, DOMElement);

	public HRESULT createElement(BSTR tagName, IXMLDOMElement** element) mut => VT.[Friend]createElement(&this, tagName, element);

	public HRESULT createDocumentFragment(IXMLDOMDocumentFragment** docFrag) mut => VT.[Friend]createDocumentFragment(&this, docFrag);

	public HRESULT createTextNode(BSTR data, IXMLDOMText** text) mut => VT.[Friend]createTextNode(&this, data, text);

	public HRESULT createComment(BSTR data, IXMLDOMComment** comment) mut => VT.[Friend]createComment(&this, data, comment);

	public HRESULT createCDATASection(BSTR data, IXMLDOMCDATASection** cdata) mut => VT.[Friend]createCDATASection(&this, data, cdata);

	public HRESULT createProcessingInstruction(BSTR target, BSTR data, IXMLDOMProcessingInstruction** pi) mut => VT.[Friend]createProcessingInstruction(&this, target, data, pi);

	public HRESULT createAttribute(BSTR name, IXMLDOMAttribute** attribute) mut => VT.[Friend]createAttribute(&this, name, attribute);

	public HRESULT createEntityReference(BSTR name, IXMLDOMEntityReference** entityRef) mut => VT.[Friend]createEntityReference(&this, name, entityRef);

	public HRESULT getElementsByTagName(BSTR tagName, IXMLDOMNodeList** resultList) mut => VT.[Friend]getElementsByTagName(&this, tagName, resultList);

	public HRESULT createNode(VARIANT Type, BSTR name, BSTR namespaceURI, IXMLDOMNode** node) mut => VT.[Friend]createNode(&this, Type, name, namespaceURI, node);

	public HRESULT nodeFromID(BSTR idString, IXMLDOMNode** node) mut => VT.[Friend]nodeFromID(&this, idString, node);

	public HRESULT load(VARIANT xmlSource, int16* isSuccessful) mut => VT.[Friend]load(&this, xmlSource, isSuccessful);

	public HRESULT get_readyState(int32* value) mut => VT.[Friend]get_readyState(&this, value);

	public HRESULT get_parseError(IXMLDOMParseError** errorObj) mut => VT.[Friend]get_parseError(&this, errorObj);

	public HRESULT get_url(BSTR* urlString) mut => VT.[Friend]get_url(&this, urlString);

	public HRESULT get_async(int16* isAsync) mut => VT.[Friend]get_async(&this, isAsync);

	public HRESULT put_async(int16 isAsync) mut => VT.[Friend]put_async(&this, isAsync);

	public HRESULT abort() mut => VT.[Friend]abort(&this);

	public HRESULT loadXML(BSTR bstrXML, int16* isSuccessful) mut => VT.[Friend]loadXML(&this, bstrXML, isSuccessful);

	public HRESULT save(VARIANT destination) mut => VT.[Friend]save(&this, destination);

	public HRESULT get_validateOnParse(int16* isValidating) mut => VT.[Friend]get_validateOnParse(&this, isValidating);

	public HRESULT put_validateOnParse(int16 isValidating) mut => VT.[Friend]put_validateOnParse(&this, isValidating);

	public HRESULT get_resolveExternals(int16* isResolving) mut => VT.[Friend]get_resolveExternals(&this, isResolving);

	public HRESULT put_resolveExternals(int16 isResolving) mut => VT.[Friend]put_resolveExternals(&this, isResolving);

	public HRESULT get_preserveWhiteSpace(int16* isPreserving) mut => VT.[Friend]get_preserveWhiteSpace(&this, isPreserving);

	public HRESULT put_preserveWhiteSpace(int16 isPreserving) mut => VT.[Friend]put_preserveWhiteSpace(&this, isPreserving);

	public HRESULT put_onreadystatechange(VARIANT readystatechangeSink) mut => VT.[Friend]put_onreadystatechange(&this, readystatechangeSink);

	public HRESULT put_ondataavailable(VARIANT ondataavailableSink) mut => VT.[Friend]put_ondataavailable(&this, ondataavailableSink);

	public HRESULT put_ontransformnode(VARIANT ontransformnodeSink) mut => VT.[Friend]put_ontransformnode(&this, ontransformnodeSink);
}

[CRepr]struct IXMLDOMNodeList : IDispatch
{
	public new const Guid IID = .(0x2933bf82, 0x7b36, 0x11d2, 0xb2, 0x0e, 0x00, 0xc0, 0x4f, 0x98, 0x3e, 0x60);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 index, IXMLDOMNode** listItem) get_item;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* listLength) get_length;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IXMLDOMNode** nextItem) nextNode;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self) reset;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IUnknown** ppUnk) get__newEnum;
	}


	public HRESULT get_item(int32 index, IXMLDOMNode** listItem) mut => VT.[Friend]get_item(&this, index, listItem);

	public HRESULT get_length(int32* listLength) mut => VT.[Friend]get_length(&this, listLength);

	public HRESULT nextNode(IXMLDOMNode** nextItem) mut => VT.[Friend]nextNode(&this, nextItem);

	public HRESULT reset() mut => VT.[Friend]reset(&this);

	public HRESULT get__newEnum(IUnknown** ppUnk) mut => VT.[Friend]get__newEnum(&this, ppUnk);
}

[CRepr]struct IXMLDOMNamedNodeMap : IDispatch
{
	public new const Guid IID = .(0x2933bf83, 0x7b36, 0x11d2, 0xb2, 0x0e, 0x00, 0xc0, 0x4f, 0x98, 0x3e, 0x60);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR name, IXMLDOMNode** namedItem) getNamedItem;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IXMLDOMNode* newItem, IXMLDOMNode** nameItem) setNamedItem;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR name, IXMLDOMNode** namedItem) removeNamedItem;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 index, IXMLDOMNode** listItem) get_item;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* listLength) get_length;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR baseName, BSTR namespaceURI, IXMLDOMNode** qualifiedItem) getQualifiedItem;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR baseName, BSTR namespaceURI, IXMLDOMNode** qualifiedItem) removeQualifiedItem;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IXMLDOMNode** nextItem) nextNode;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self) reset;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IUnknown** ppUnk) get__newEnum;
	}


	public HRESULT getNamedItem(BSTR name, IXMLDOMNode** namedItem) mut => VT.[Friend]getNamedItem(&this, name, namedItem);

	public HRESULT setNamedItem(IXMLDOMNode* newItem, IXMLDOMNode** nameItem) mut => VT.[Friend]setNamedItem(&this, newItem, nameItem);

	public HRESULT removeNamedItem(BSTR name, IXMLDOMNode** namedItem) mut => VT.[Friend]removeNamedItem(&this, name, namedItem);

	public HRESULT get_item(int32 index, IXMLDOMNode** listItem) mut => VT.[Friend]get_item(&this, index, listItem);

	public HRESULT get_length(int32* listLength) mut => VT.[Friend]get_length(&this, listLength);

	public HRESULT getQualifiedItem(BSTR baseName, BSTR namespaceURI, IXMLDOMNode** qualifiedItem) mut => VT.[Friend]getQualifiedItem(&this, baseName, namespaceURI, qualifiedItem);

	public HRESULT removeQualifiedItem(BSTR baseName, BSTR namespaceURI, IXMLDOMNode** qualifiedItem) mut => VT.[Friend]removeQualifiedItem(&this, baseName, namespaceURI, qualifiedItem);

	public HRESULT nextNode(IXMLDOMNode** nextItem) mut => VT.[Friend]nextNode(&this, nextItem);

	public HRESULT reset() mut => VT.[Friend]reset(&this);

	public HRESULT get__newEnum(IUnknown** ppUnk) mut => VT.[Friend]get__newEnum(&this, ppUnk);
}

[CRepr]struct IXMLDOMCharacterData : IXMLDOMNode
{
	public new const Guid IID = .(0x2933bf84, 0x7b36, 0x11d2, 0xb2, 0x0e, 0x00, 0xc0, 0x4f, 0x98, 0x3e, 0x60);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IXMLDOMNode.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* data) get_data;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR data) put_data;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* dataLength) get_length;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 offset, int32 count, BSTR* data) substringData;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR data) appendData;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 offset, BSTR data) insertData;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 offset, int32 count) deleteData;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 offset, int32 count, BSTR data) replaceData;
	}


	public HRESULT get_data(BSTR* data) mut => VT.[Friend]get_data(&this, data);

	public HRESULT put_data(BSTR data) mut => VT.[Friend]put_data(&this, data);

	public HRESULT get_length(int32* dataLength) mut => VT.[Friend]get_length(&this, dataLength);

	public HRESULT substringData(int32 offset, int32 count, BSTR* data) mut => VT.[Friend]substringData(&this, offset, count, data);

	public HRESULT appendData(BSTR data) mut => VT.[Friend]appendData(&this, data);

	public HRESULT insertData(int32 offset, BSTR data) mut => VT.[Friend]insertData(&this, offset, data);

	public HRESULT deleteData(int32 offset, int32 count) mut => VT.[Friend]deleteData(&this, offset, count);

	public HRESULT replaceData(int32 offset, int32 count, BSTR data) mut => VT.[Friend]replaceData(&this, offset, count, data);
}

[CRepr]struct IXMLDOMAttribute : IXMLDOMNode
{
	public new const Guid IID = .(0x2933bf85, 0x7b36, 0x11d2, 0xb2, 0x0e, 0x00, 0xc0, 0x4f, 0x98, 0x3e, 0x60);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IXMLDOMNode.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* attributeName) get_name;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* attributeValue) get_value;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT attributeValue) put_value;
	}


	public HRESULT get_name(BSTR* attributeName) mut => VT.[Friend]get_name(&this, attributeName);

	public HRESULT get_value(VARIANT* attributeValue) mut => VT.[Friend]get_value(&this, attributeValue);

	public HRESULT put_value(VARIANT attributeValue) mut => VT.[Friend]put_value(&this, attributeValue);
}

[CRepr]struct IXMLDOMElement : IXMLDOMNode
{
	public new const Guid IID = .(0x2933bf86, 0x7b36, 0x11d2, 0xb2, 0x0e, 0x00, 0xc0, 0x4f, 0x98, 0x3e, 0x60);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IXMLDOMNode.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* tagName) get_tagName;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR name, VARIANT* value) getAttribute;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR name, VARIANT value) setAttribute;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR name) removeAttribute;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR name, IXMLDOMAttribute** attributeNode) getAttributeNode;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IXMLDOMAttribute* DOMAttribute, IXMLDOMAttribute** attributeNode) setAttributeNode;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IXMLDOMAttribute* DOMAttribute, IXMLDOMAttribute** attributeNode) removeAttributeNode;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR tagName, IXMLDOMNodeList** resultList) getElementsByTagName;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self) normalize;
	}


	public HRESULT get_tagName(BSTR* tagName) mut => VT.[Friend]get_tagName(&this, tagName);

	public HRESULT getAttribute(BSTR name, VARIANT* value) mut => VT.[Friend]getAttribute(&this, name, value);

	public HRESULT setAttribute(BSTR name, VARIANT value) mut => VT.[Friend]setAttribute(&this, name, value);

	public HRESULT removeAttribute(BSTR name) mut => VT.[Friend]removeAttribute(&this, name);

	public HRESULT getAttributeNode(BSTR name, IXMLDOMAttribute** attributeNode) mut => VT.[Friend]getAttributeNode(&this, name, attributeNode);

	public HRESULT setAttributeNode(IXMLDOMAttribute* DOMAttribute, IXMLDOMAttribute** attributeNode) mut => VT.[Friend]setAttributeNode(&this, DOMAttribute, attributeNode);

	public HRESULT removeAttributeNode(IXMLDOMAttribute* DOMAttribute, IXMLDOMAttribute** attributeNode) mut => VT.[Friend]removeAttributeNode(&this, DOMAttribute, attributeNode);

	public HRESULT getElementsByTagName(BSTR tagName, IXMLDOMNodeList** resultList) mut => VT.[Friend]getElementsByTagName(&this, tagName, resultList);

	public HRESULT normalize() mut => VT.[Friend]normalize(&this);
}

[CRepr]struct IXMLDOMText : IXMLDOMCharacterData
{
	public new const Guid IID = .(0x2933bf87, 0x7b36, 0x11d2, 0xb2, 0x0e, 0x00, 0xc0, 0x4f, 0x98, 0x3e, 0x60);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IXMLDOMCharacterData.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 offset, IXMLDOMText** rightHandTextNode) splitText;
	}


	public HRESULT splitText(int32 offset, IXMLDOMText** rightHandTextNode) mut => VT.[Friend]splitText(&this, offset, rightHandTextNode);
}

[CRepr]struct IXMLDOMComment : IXMLDOMCharacterData
{
	public new const Guid IID = .(0x2933bf88, 0x7b36, 0x11d2, 0xb2, 0x0e, 0x00, 0xc0, 0x4f, 0x98, 0x3e, 0x60);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IXMLDOMCharacterData.VTable
	{
	}

}

[CRepr]struct IXMLDOMProcessingInstruction : IXMLDOMNode
{
	public new const Guid IID = .(0x2933bf89, 0x7b36, 0x11d2, 0xb2, 0x0e, 0x00, 0xc0, 0x4f, 0x98, 0x3e, 0x60);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IXMLDOMNode.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* name) get_target;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* value) get_data;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR value) put_data;
	}


	public HRESULT get_target(BSTR* name) mut => VT.[Friend]get_target(&this, name);

	public HRESULT get_data(BSTR* value) mut => VT.[Friend]get_data(&this, value);

	public HRESULT put_data(BSTR value) mut => VT.[Friend]put_data(&this, value);
}

[CRepr]struct IXMLDOMCDATASection : IXMLDOMText
{
	public new const Guid IID = .(0x2933bf8a, 0x7b36, 0x11d2, 0xb2, 0x0e, 0x00, 0xc0, 0x4f, 0x98, 0x3e, 0x60);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IXMLDOMText.VTable
	{
	}

}

[CRepr]struct IXMLDOMDocumentType : IXMLDOMNode
{
	public new const Guid IID = .(0x2933bf8b, 0x7b36, 0x11d2, 0xb2, 0x0e, 0x00, 0xc0, 0x4f, 0x98, 0x3e, 0x60);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IXMLDOMNode.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* rootName) get_name;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IXMLDOMNamedNodeMap** entityMap) get_entities;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IXMLDOMNamedNodeMap** notationMap) get_notations;
	}


	public HRESULT get_name(BSTR* rootName) mut => VT.[Friend]get_name(&this, rootName);

	public HRESULT get_entities(IXMLDOMNamedNodeMap** entityMap) mut => VT.[Friend]get_entities(&this, entityMap);

	public HRESULT get_notations(IXMLDOMNamedNodeMap** notationMap) mut => VT.[Friend]get_notations(&this, notationMap);
}

[CRepr]struct IXMLDOMNotation : IXMLDOMNode
{
	public new const Guid IID = .(0x2933bf8c, 0x7b36, 0x11d2, 0xb2, 0x0e, 0x00, 0xc0, 0x4f, 0x98, 0x3e, 0x60);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IXMLDOMNode.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* publicID) get_publicId;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* systemID) get_systemId;
	}


	public HRESULT get_publicId(VARIANT* publicID) mut => VT.[Friend]get_publicId(&this, publicID);

	public HRESULT get_systemId(VARIANT* systemID) mut => VT.[Friend]get_systemId(&this, systemID);
}

[CRepr]struct IXMLDOMEntity : IXMLDOMNode
{
	public new const Guid IID = .(0x2933bf8d, 0x7b36, 0x11d2, 0xb2, 0x0e, 0x00, 0xc0, 0x4f, 0x98, 0x3e, 0x60);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IXMLDOMNode.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* publicID) get_publicId;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* systemID) get_systemId;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* name) get_notationName;
	}


	public HRESULT get_publicId(VARIANT* publicID) mut => VT.[Friend]get_publicId(&this, publicID);

	public HRESULT get_systemId(VARIANT* systemID) mut => VT.[Friend]get_systemId(&this, systemID);

	public HRESULT get_notationName(BSTR* name) mut => VT.[Friend]get_notationName(&this, name);
}

[CRepr]struct IXMLDOMEntityReference : IXMLDOMNode
{
	public new const Guid IID = .(0x2933bf8e, 0x7b36, 0x11d2, 0xb2, 0x0e, 0x00, 0xc0, 0x4f, 0x98, 0x3e, 0x60);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IXMLDOMNode.VTable
	{
	}

}

[CRepr]struct IXMLDOMParseError : IDispatch
{
	public new const Guid IID = .(0x3efaa426, 0x272f, 0x11d2, 0x83, 0x6f, 0x00, 0x00, 0xf8, 0x7a, 0x77, 0x82);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* errorCode) get_errorCode;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* urlString) get_url;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* reasonString) get_reason;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* sourceString) get_srcText;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* lineNumber) get_line;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* linePosition) get_linepos;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* filePosition) get_filepos;
	}


	public HRESULT get_errorCode(int32* errorCode) mut => VT.[Friend]get_errorCode(&this, errorCode);

	public HRESULT get_url(BSTR* urlString) mut => VT.[Friend]get_url(&this, urlString);

	public HRESULT get_reason(BSTR* reasonString) mut => VT.[Friend]get_reason(&this, reasonString);

	public HRESULT get_srcText(BSTR* sourceString) mut => VT.[Friend]get_srcText(&this, sourceString);

	public HRESULT get_line(int32* lineNumber) mut => VT.[Friend]get_line(&this, lineNumber);

	public HRESULT get_linepos(int32* linePosition) mut => VT.[Friend]get_linepos(&this, linePosition);

	public HRESULT get_filepos(int32* filePosition) mut => VT.[Friend]get_filepos(&this, filePosition);
}

[CRepr]struct IXTLRuntime : IXMLDOMNode
{
	public new const Guid IID = .(0x3efaa425, 0x272f, 0x11d2, 0x83, 0x6f, 0x00, 0x00, 0xf8, 0x7a, 0x77, 0x82);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IXMLDOMNode.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IXMLDOMNode* pNode, int32* pID) uniqueID;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IXMLDOMNode* pNode, int32* pDepth) depth;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IXMLDOMNode* pNode, int32* pNumber) childNumber;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR bstrNodeName, IXMLDOMNode* pNode, int32* pNumber) ancestorChildNumber;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IXMLDOMNode* pNode, int32* pNumber) absoluteChildNumber;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 lIndex, BSTR bstrFormat, BSTR* pbstrFormattedString) formatIndex;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, double dblNumber, BSTR bstrFormat, BSTR* pbstrFormattedString) formatNumber;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT varDate, BSTR bstrFormat, VARIANT varDestLocale, BSTR* pbstrFormattedString) formatDate;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT varTime, BSTR bstrFormat, VARIANT varDestLocale, BSTR* pbstrFormattedString) formatTime;
	}


	public HRESULT uniqueID(IXMLDOMNode* pNode, int32* pID) mut => VT.[Friend]uniqueID(&this, pNode, pID);

	public HRESULT depth(IXMLDOMNode* pNode, int32* pDepth) mut => VT.[Friend]depth(&this, pNode, pDepth);

	public HRESULT childNumber(IXMLDOMNode* pNode, int32* pNumber) mut => VT.[Friend]childNumber(&this, pNode, pNumber);

	public HRESULT ancestorChildNumber(BSTR bstrNodeName, IXMLDOMNode* pNode, int32* pNumber) mut => VT.[Friend]ancestorChildNumber(&this, bstrNodeName, pNode, pNumber);

	public HRESULT absoluteChildNumber(IXMLDOMNode* pNode, int32* pNumber) mut => VT.[Friend]absoluteChildNumber(&this, pNode, pNumber);

	public HRESULT formatIndex(int32 lIndex, BSTR bstrFormat, BSTR* pbstrFormattedString) mut => VT.[Friend]formatIndex(&this, lIndex, bstrFormat, pbstrFormattedString);

	public HRESULT formatNumber(double dblNumber, BSTR bstrFormat, BSTR* pbstrFormattedString) mut => VT.[Friend]formatNumber(&this, dblNumber, bstrFormat, pbstrFormattedString);

	public HRESULT formatDate(VARIANT varDate, BSTR bstrFormat, VARIANT varDestLocale, BSTR* pbstrFormattedString) mut => VT.[Friend]formatDate(&this, varDate, bstrFormat, varDestLocale, pbstrFormattedString);

	public HRESULT formatTime(VARIANT varTime, BSTR bstrFormat, VARIANT varDestLocale, BSTR* pbstrFormattedString) mut => VT.[Friend]formatTime(&this, varTime, bstrFormat, varDestLocale, pbstrFormattedString);
}

[CRepr]struct XMLDOMDocumentEvents : IDispatch
{
	public new const Guid IID = .(0x3efaa427, 0x272f, 0x11d2, 0x83, 0x6f, 0x00, 0x00, 0xf8, 0x7a, 0x77, 0x82);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
	}

}

[CRepr]struct IXMLHttpRequest : IDispatch
{
	public new const Guid IID = .(0xed8c108d, 0x4349, 0x11d2, 0x91, 0xa4, 0x00, 0xc0, 0x4f, 0x79, 0x69, 0xe8);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR bstrMethod, BSTR bstrUrl, VARIANT varAsync, VARIANT bstrUser, VARIANT bstrPassword) open;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR bstrHeader, BSTR bstrValue) setRequestHeader;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR bstrHeader, BSTR* pbstrValue) getResponseHeader;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* pbstrHeaders) getAllResponseHeaders;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT varBody) send;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self) abort;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* plStatus) get_status;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* pbstrStatus) get_statusText;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IDispatch** ppBody) get_responseXML;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* pbstrBody) get_responseText;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* pvarBody) get_responseBody;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* pvarBody) get_responseStream;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* plState) get_readyState;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IDispatch* pReadyStateSink) put_onreadystatechange;
	}


	public HRESULT open(BSTR bstrMethod, BSTR bstrUrl, VARIANT varAsync, VARIANT bstrUser, VARIANT bstrPassword) mut => VT.[Friend]open(&this, bstrMethod, bstrUrl, varAsync, bstrUser, bstrPassword);

	public HRESULT setRequestHeader(BSTR bstrHeader, BSTR bstrValue) mut => VT.[Friend]setRequestHeader(&this, bstrHeader, bstrValue);

	public HRESULT getResponseHeader(BSTR bstrHeader, BSTR* pbstrValue) mut => VT.[Friend]getResponseHeader(&this, bstrHeader, pbstrValue);

	public HRESULT getAllResponseHeaders(BSTR* pbstrHeaders) mut => VT.[Friend]getAllResponseHeaders(&this, pbstrHeaders);

	public HRESULT send(VARIANT varBody) mut => VT.[Friend]send(&this, varBody);

	public HRESULT abort() mut => VT.[Friend]abort(&this);

	public HRESULT get_status(int32* plStatus) mut => VT.[Friend]get_status(&this, plStatus);

	public HRESULT get_statusText(BSTR* pbstrStatus) mut => VT.[Friend]get_statusText(&this, pbstrStatus);

	public HRESULT get_responseXML(IDispatch** ppBody) mut => VT.[Friend]get_responseXML(&this, ppBody);

	public HRESULT get_responseText(BSTR* pbstrBody) mut => VT.[Friend]get_responseText(&this, pbstrBody);

	public HRESULT get_responseBody(VARIANT* pvarBody) mut => VT.[Friend]get_responseBody(&this, pvarBody);

	public HRESULT get_responseStream(VARIANT* pvarBody) mut => VT.[Friend]get_responseStream(&this, pvarBody);

	public HRESULT get_readyState(int32* plState) mut => VT.[Friend]get_readyState(&this, plState);

	public HRESULT put_onreadystatechange(IDispatch* pReadyStateSink) mut => VT.[Friend]put_onreadystatechange(&this, pReadyStateSink);
}

[CRepr]struct IXMLDSOControl : IDispatch
{
	public new const Guid IID = .(0x310afa62, 0x0575, 0x11d2, 0x9c, 0xa9, 0x00, 0x60, 0xb0, 0xec, 0x3d, 0x39);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IXMLDOMDocument** ppDoc) get_XMLDocument;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IXMLDOMDocument* ppDoc) put_XMLDocument;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BOOL* fJavaDSOCompatible) get_JavaDSOCompatible;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BOOL fJavaDSOCompatible) put_JavaDSOCompatible;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* state) get_readyState;
	}


	public HRESULT get_XMLDocument(IXMLDOMDocument** ppDoc) mut => VT.[Friend]get_XMLDocument(&this, ppDoc);

	public HRESULT put_XMLDocument(IXMLDOMDocument* ppDoc) mut => VT.[Friend]put_XMLDocument(&this, ppDoc);

	public HRESULT get_JavaDSOCompatible(BOOL* fJavaDSOCompatible) mut => VT.[Friend]get_JavaDSOCompatible(&this, fJavaDSOCompatible);

	public HRESULT put_JavaDSOCompatible(BOOL fJavaDSOCompatible) mut => VT.[Friend]put_JavaDSOCompatible(&this, fJavaDSOCompatible);

	public HRESULT get_readyState(int32* state) mut => VT.[Friend]get_readyState(&this, state);
}

[CRepr]struct IXMLElementCollection : IDispatch
{
	public new const Guid IID = .(0x65725580, 0x9b5d, 0x11d0, 0x9b, 0xfe, 0x00, 0xc0, 0x4f, 0xc9, 0x9c, 0x8e);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 v) put_length;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* p) get_length;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IUnknown** ppUnk) get__newEnum;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT var1, VARIANT var2, IDispatch** ppDisp) item;
	}


	public HRESULT put_length(int32 v) mut => VT.[Friend]put_length(&this, v);

	public HRESULT get_length(int32* p) mut => VT.[Friend]get_length(&this, p);

	public HRESULT get__newEnum(IUnknown** ppUnk) mut => VT.[Friend]get__newEnum(&this, ppUnk);

	public HRESULT item(VARIANT var1, VARIANT var2, IDispatch** ppDisp) mut => VT.[Friend]item(&this, var1, var2, ppDisp);
}

[CRepr]struct IXMLDocument : IDispatch
{
	public new const Guid IID = .(0xf52e2b61, 0x18a1, 0x11d1, 0xb1, 0x05, 0x00, 0x80, 0x5f, 0x49, 0x91, 0x6b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IXMLElement** p) get_root;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_fileSize;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_fileModifiedDate;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_fileUpdatedDate;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_URL;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR p) put_URL;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_mimeType;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* pl) get_readyState;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_charset;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR p) put_charset;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_version;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_doctype;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_dtdURL;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT vType, VARIANT var1, IXMLElement** ppElem) createElement;
	}


	public HRESULT get_root(IXMLElement** p) mut => VT.[Friend]get_root(&this, p);

	public HRESULT get_fileSize(BSTR* p) mut => VT.[Friend]get_fileSize(&this, p);

	public HRESULT get_fileModifiedDate(BSTR* p) mut => VT.[Friend]get_fileModifiedDate(&this, p);

	public HRESULT get_fileUpdatedDate(BSTR* p) mut => VT.[Friend]get_fileUpdatedDate(&this, p);

	public HRESULT get_URL(BSTR* p) mut => VT.[Friend]get_URL(&this, p);

	public HRESULT put_URL(BSTR p) mut => VT.[Friend]put_URL(&this, p);

	public HRESULT get_mimeType(BSTR* p) mut => VT.[Friend]get_mimeType(&this, p);

	public HRESULT get_readyState(int32* pl) mut => VT.[Friend]get_readyState(&this, pl);

	public HRESULT get_charset(BSTR* p) mut => VT.[Friend]get_charset(&this, p);

	public HRESULT put_charset(BSTR p) mut => VT.[Friend]put_charset(&this, p);

	public HRESULT get_version(BSTR* p) mut => VT.[Friend]get_version(&this, p);

	public HRESULT get_doctype(BSTR* p) mut => VT.[Friend]get_doctype(&this, p);

	public HRESULT get_dtdURL(BSTR* p) mut => VT.[Friend]get_dtdURL(&this, p);

	public HRESULT createElement(VARIANT vType, VARIANT var1, IXMLElement** ppElem) mut => VT.[Friend]createElement(&this, vType, var1, ppElem);
}

[CRepr]struct IXMLDocument2 : IDispatch
{
	public new const Guid IID = .(0x2b8de2fe, 0x8d2d, 0x11d1, 0xb2, 0xfc, 0x00, 0xc0, 0x4f, 0xd9, 0x15, 0xa9);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IXMLElement2** p) get_root;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_fileSize;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_fileModifiedDate;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_fileUpdatedDate;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_URL;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR p) put_URL;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_mimeType;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* pl) get_readyState;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_charset;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR p) put_charset;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_version;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_doctype;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_dtdURL;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT vType, VARIANT var1, IXMLElement2** ppElem) createElement;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16* pf) get_async;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16 f) put_async;
	}


	public HRESULT get_root(IXMLElement2** p) mut => VT.[Friend]get_root(&this, p);

	public HRESULT get_fileSize(BSTR* p) mut => VT.[Friend]get_fileSize(&this, p);

	public HRESULT get_fileModifiedDate(BSTR* p) mut => VT.[Friend]get_fileModifiedDate(&this, p);

	public HRESULT get_fileUpdatedDate(BSTR* p) mut => VT.[Friend]get_fileUpdatedDate(&this, p);

	public HRESULT get_URL(BSTR* p) mut => VT.[Friend]get_URL(&this, p);

	public HRESULT put_URL(BSTR p) mut => VT.[Friend]put_URL(&this, p);

	public HRESULT get_mimeType(BSTR* p) mut => VT.[Friend]get_mimeType(&this, p);

	public HRESULT get_readyState(int32* pl) mut => VT.[Friend]get_readyState(&this, pl);

	public HRESULT get_charset(BSTR* p) mut => VT.[Friend]get_charset(&this, p);

	public HRESULT put_charset(BSTR p) mut => VT.[Friend]put_charset(&this, p);

	public HRESULT get_version(BSTR* p) mut => VT.[Friend]get_version(&this, p);

	public HRESULT get_doctype(BSTR* p) mut => VT.[Friend]get_doctype(&this, p);

	public HRESULT get_dtdURL(BSTR* p) mut => VT.[Friend]get_dtdURL(&this, p);

	public HRESULT createElement(VARIANT vType, VARIANT var1, IXMLElement2** ppElem) mut => VT.[Friend]createElement(&this, vType, var1, ppElem);

	public HRESULT get_async(int16* pf) mut => VT.[Friend]get_async(&this, pf);

	public HRESULT put_async(int16 f) mut => VT.[Friend]put_async(&this, f);
}

[CRepr]struct IXMLElement : IDispatch
{
	public new const Guid IID = .(0x3f7f31ac, 0xe15f, 0x11d0, 0x9c, 0x25, 0x00, 0xc0, 0x4f, 0xc9, 0x9c, 0x8e);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_tagName;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR p) put_tagName;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IXMLElement** ppParent) get_parent;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR strPropertyName, VARIANT PropertyValue) setAttribute;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR strPropertyName, VARIANT* PropertyValue) getAttribute;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR strPropertyName) removeAttribute;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IXMLElementCollection** pp) get_children;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* plType) get_type;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_text;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR p) put_text;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IXMLElement* pChildElem, int32 lIndex, int32 lReserved) addChild;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IXMLElement* pChildElem) removeChild;
	}


	public HRESULT get_tagName(BSTR* p) mut => VT.[Friend]get_tagName(&this, p);

	public HRESULT put_tagName(BSTR p) mut => VT.[Friend]put_tagName(&this, p);

	public HRESULT get_parent(IXMLElement** ppParent) mut => VT.[Friend]get_parent(&this, ppParent);

	public HRESULT setAttribute(BSTR strPropertyName, VARIANT PropertyValue) mut => VT.[Friend]setAttribute(&this, strPropertyName, PropertyValue);

	public HRESULT getAttribute(BSTR strPropertyName, VARIANT* PropertyValue) mut => VT.[Friend]getAttribute(&this, strPropertyName, PropertyValue);

	public HRESULT removeAttribute(BSTR strPropertyName) mut => VT.[Friend]removeAttribute(&this, strPropertyName);

	public HRESULT get_children(IXMLElementCollection** pp) mut => VT.[Friend]get_children(&this, pp);

	public HRESULT get_type(int32* plType) mut => VT.[Friend]get_type(&this, plType);

	public HRESULT get_text(BSTR* p) mut => VT.[Friend]get_text(&this, p);

	public HRESULT put_text(BSTR p) mut => VT.[Friend]put_text(&this, p);

	public HRESULT addChild(IXMLElement* pChildElem, int32 lIndex, int32 lReserved) mut => VT.[Friend]addChild(&this, pChildElem, lIndex, lReserved);

	public HRESULT removeChild(IXMLElement* pChildElem) mut => VT.[Friend]removeChild(&this, pChildElem);
}

[CRepr]struct IXMLElement2 : IDispatch
{
	public new const Guid IID = .(0x2b8de2ff, 0x8d2d, 0x11d1, 0xb2, 0xfc, 0x00, 0xc0, 0x4f, 0xd9, 0x15, 0xa9);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_tagName;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR p) put_tagName;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IXMLElement2** ppParent) get_parent;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR strPropertyName, VARIANT PropertyValue) setAttribute;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR strPropertyName, VARIANT* PropertyValue) getAttribute;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR strPropertyName) removeAttribute;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IXMLElementCollection** pp) get_children;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* plType) get_type;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_text;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR p) put_text;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IXMLElement2* pChildElem, int32 lIndex, int32 lReserved) addChild;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IXMLElement2* pChildElem) removeChild;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IXMLElementCollection** pp) get_attributes;
	}


	public HRESULT get_tagName(BSTR* p) mut => VT.[Friend]get_tagName(&this, p);

	public HRESULT put_tagName(BSTR p) mut => VT.[Friend]put_tagName(&this, p);

	public HRESULT get_parent(IXMLElement2** ppParent) mut => VT.[Friend]get_parent(&this, ppParent);

	public HRESULT setAttribute(BSTR strPropertyName, VARIANT PropertyValue) mut => VT.[Friend]setAttribute(&this, strPropertyName, PropertyValue);

	public HRESULT getAttribute(BSTR strPropertyName, VARIANT* PropertyValue) mut => VT.[Friend]getAttribute(&this, strPropertyName, PropertyValue);

	public HRESULT removeAttribute(BSTR strPropertyName) mut => VT.[Friend]removeAttribute(&this, strPropertyName);

	public HRESULT get_children(IXMLElementCollection** pp) mut => VT.[Friend]get_children(&this, pp);

	public HRESULT get_type(int32* plType) mut => VT.[Friend]get_type(&this, plType);

	public HRESULT get_text(BSTR* p) mut => VT.[Friend]get_text(&this, p);

	public HRESULT put_text(BSTR p) mut => VT.[Friend]put_text(&this, p);

	public HRESULT addChild(IXMLElement2* pChildElem, int32 lIndex, int32 lReserved) mut => VT.[Friend]addChild(&this, pChildElem, lIndex, lReserved);

	public HRESULT removeChild(IXMLElement2* pChildElem) mut => VT.[Friend]removeChild(&this, pChildElem);

	public HRESULT get_attributes(IXMLElementCollection** pp) mut => VT.[Friend]get_attributes(&this, pp);
}

[CRepr]struct IXMLAttribute : IDispatch
{
	public new const Guid IID = .(0xd4d4a0fc, 0x3b73, 0x11d1, 0xb2, 0xb4, 0x00, 0xc0, 0x4f, 0xb9, 0x25, 0x96);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* n) get_name;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* v) get_value;
	}


	public HRESULT get_name(BSTR* n) mut => VT.[Friend]get_name(&this, n);

	public HRESULT get_value(BSTR* v) mut => VT.[Friend]get_value(&this, v);
}

[CRepr]struct IXMLError : IUnknown
{
	public new const Guid IID = .(0x948c5ad3, 0xc58d, 0x11d0, 0x9c, 0x0b, 0x00, 0xc0, 0x4f, 0xc9, 0x9c, 0x8e);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IUnknown.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, XML_ERROR* pErrorReturn) GetErrorInfo;
	}


	public HRESULT GetErrorInfo(XML_ERROR* pErrorReturn) mut => VT.[Friend]GetErrorInfo(&this, pErrorReturn);
}

[CRepr]struct IXMLDOMDocument2 : IXMLDOMDocument
{
	public new const Guid IID = .(0x2933bf95, 0x7b36, 0x11d2, 0xb2, 0x0e, 0x00, 0xc0, 0x4f, 0x98, 0x3e, 0x60);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IXMLDOMDocument.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IXMLDOMSchemaCollection** namespaceCollection) get_namespaces;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* otherCollection) get_schemas;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT otherCollection) putref_schemas;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IXMLDOMParseError** errorObj) validate;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR name, VARIANT value) setProperty;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR name, VARIANT* value) getProperty;
	}


	public HRESULT get_namespaces(IXMLDOMSchemaCollection** namespaceCollection) mut => VT.[Friend]get_namespaces(&this, namespaceCollection);

	public HRESULT get_schemas(VARIANT* otherCollection) mut => VT.[Friend]get_schemas(&this, otherCollection);

	public HRESULT putref_schemas(VARIANT otherCollection) mut => VT.[Friend]putref_schemas(&this, otherCollection);

	public HRESULT validate(IXMLDOMParseError** errorObj) mut => VT.[Friend]validate(&this, errorObj);

	public HRESULT setProperty(BSTR name, VARIANT value) mut => VT.[Friend]setProperty(&this, name, value);

	public HRESULT getProperty(BSTR name, VARIANT* value) mut => VT.[Friend]getProperty(&this, name, value);
}

[CRepr]struct IXMLDOMDocument3 : IXMLDOMDocument2
{
	public new const Guid IID = .(0x2933bf96, 0x7b36, 0x11d2, 0xb2, 0x0e, 0x00, 0xc0, 0x4f, 0x98, 0x3e, 0x60);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IXMLDOMDocument2.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IXMLDOMNode* node, IXMLDOMParseError** errorObj) validateNode;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IXMLDOMNode* node, int16 deep, IXMLDOMNode** clone) importNode;
	}


	public HRESULT validateNode(IXMLDOMNode* node, IXMLDOMParseError** errorObj) mut => VT.[Friend]validateNode(&this, node, errorObj);

	public HRESULT importNode(IXMLDOMNode* node, int16 deep, IXMLDOMNode** clone) mut => VT.[Friend]importNode(&this, node, deep, clone);
}

[CRepr]struct IXMLDOMSchemaCollection : IDispatch
{
	public new const Guid IID = .(0x373984c8, 0xb845, 0x449b, 0x91, 0xe7, 0x45, 0xac, 0x83, 0x03, 0x6a, 0xde);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR namespaceURI, VARIANT @var) add;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR namespaceURI, IXMLDOMNode** schemaNode) get;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR namespaceURI) remove;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* length) get_length;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 index, BSTR* length) get_namespaceURI;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IXMLDOMSchemaCollection* otherCollection) addCollection;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IUnknown** ppUnk) get__newEnum;
	}


	public HRESULT add(BSTR namespaceURI, VARIANT @var) mut => VT.[Friend]add(&this, namespaceURI, @var);

	public HRESULT get(BSTR namespaceURI, IXMLDOMNode** schemaNode) mut => VT.[Friend]get(&this, namespaceURI, schemaNode);

	public HRESULT remove(BSTR namespaceURI) mut => VT.[Friend]remove(&this, namespaceURI);

	public HRESULT get_length(int32* length) mut => VT.[Friend]get_length(&this, length);

	public HRESULT get_namespaceURI(int32 index, BSTR* length) mut => VT.[Friend]get_namespaceURI(&this, index, length);

	public HRESULT addCollection(IXMLDOMSchemaCollection* otherCollection) mut => VT.[Friend]addCollection(&this, otherCollection);

	public HRESULT get__newEnum(IUnknown** ppUnk) mut => VT.[Friend]get__newEnum(&this, ppUnk);
}

[CRepr]struct IXMLDOMSelection : IXMLDOMNodeList
{
	public new const Guid IID = .(0xaa634fc7, 0x5888, 0x44a7, 0xa2, 0x57, 0x3a, 0x47, 0x15, 0x0d, 0x3a, 0x0e);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IXMLDOMNodeList.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* expression) get_expr;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR expression) put_expr;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IXMLDOMNode** ppNode) get_context;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IXMLDOMNode* pNode) putref_context;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IXMLDOMNode** ppNode) peekNode;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IXMLDOMNode* pNode, IXMLDOMNode** ppNode) matches;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IXMLDOMNode** ppNode) removeNext;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self) removeAll;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IXMLDOMSelection** ppNode) clone;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR name, VARIANT* value) getProperty;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR name, VARIANT value) setProperty;
	}


	public HRESULT get_expr(BSTR* expression) mut => VT.[Friend]get_expr(&this, expression);

	public HRESULT put_expr(BSTR expression) mut => VT.[Friend]put_expr(&this, expression);

	public HRESULT get_context(IXMLDOMNode** ppNode) mut => VT.[Friend]get_context(&this, ppNode);

	public HRESULT putref_context(IXMLDOMNode* pNode) mut => VT.[Friend]putref_context(&this, pNode);

	public HRESULT peekNode(IXMLDOMNode** ppNode) mut => VT.[Friend]peekNode(&this, ppNode);

	public HRESULT matches(IXMLDOMNode* pNode, IXMLDOMNode** ppNode) mut => VT.[Friend]matches(&this, pNode, ppNode);

	public HRESULT removeNext(IXMLDOMNode** ppNode) mut => VT.[Friend]removeNext(&this, ppNode);

	public HRESULT removeAll() mut => VT.[Friend]removeAll(&this);

	public HRESULT clone(IXMLDOMSelection** ppNode) mut => VT.[Friend]clone(&this, ppNode);

	public HRESULT getProperty(BSTR name, VARIANT* value) mut => VT.[Friend]getProperty(&this, name, value);

	public HRESULT setProperty(BSTR name, VARIANT value) mut => VT.[Friend]setProperty(&this, name, value);
}

[CRepr]struct IXMLDOMParseError2 : IXMLDOMParseError
{
	public new const Guid IID = .(0x3efaa428, 0x272f, 0x11d2, 0x83, 0x6f, 0x00, 0x00, 0xf8, 0x7a, 0x77, 0x82);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IXMLDOMParseError.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* xpathexpr) get_errorXPath;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IXMLDOMParseErrorCollection** allErrors) get_allErrors;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 index, BSTR* param1) errorParameters;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* count) get_errorParametersCount;
	}


	public HRESULT get_errorXPath(BSTR* xpathexpr) mut => VT.[Friend]get_errorXPath(&this, xpathexpr);

	public HRESULT get_allErrors(IXMLDOMParseErrorCollection** allErrors) mut => VT.[Friend]get_allErrors(&this, allErrors);

	public HRESULT errorParameters(int32 index, BSTR* param1) mut => VT.[Friend]errorParameters(&this, index, param1);

	public HRESULT get_errorParametersCount(int32* count) mut => VT.[Friend]get_errorParametersCount(&this, count);
}

[CRepr]struct IXMLDOMParseErrorCollection : IDispatch
{
	public new const Guid IID = .(0x3efaa429, 0x272f, 0x11d2, 0x83, 0x6f, 0x00, 0x00, 0xf8, 0x7a, 0x77, 0x82);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 index, IXMLDOMParseError2** error) get_item;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* length) get_length;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IXMLDOMParseError2** error) get_next;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self) reset;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IUnknown** ppunk) get__newEnum;
	}


	public HRESULT get_item(int32 index, IXMLDOMParseError2** error) mut => VT.[Friend]get_item(&this, index, error);

	public HRESULT get_length(int32* length) mut => VT.[Friend]get_length(&this, length);

	public HRESULT get_next(IXMLDOMParseError2** error) mut => VT.[Friend]get_next(&this, error);

	public HRESULT reset() mut => VT.[Friend]reset(&this);

	public HRESULT get__newEnum(IUnknown** ppunk) mut => VT.[Friend]get__newEnum(&this, ppunk);
}

[CRepr]struct IXSLProcessor : IDispatch
{
	public new const Guid IID = .(0x2933bf92, 0x7b36, 0x11d2, 0xb2, 0x0e, 0x00, 0xc0, 0x4f, 0x98, 0x3e, 0x60);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT @var) put_input;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* pVar) get_input;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IXSLTemplate** ppTemplate) get_ownerTemplate;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR mode, BSTR namespaceURI) setStartMode;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* mode) get_startMode;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* namespaceURI) get_startModeURI;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT output) put_output;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* pOutput) get_output;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16* pDone) transform;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self) reset;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* pReadyState) get_readyState;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR baseName, VARIANT parameter, BSTR namespaceURI) addParameter;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IDispatch* obj, BSTR namespaceURI) addObject;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IXMLDOMNode** stylesheet) get_stylesheet;
	}


	public HRESULT put_input(VARIANT @var) mut => VT.[Friend]put_input(&this, @var);

	public HRESULT get_input(VARIANT* pVar) mut => VT.[Friend]get_input(&this, pVar);

	public HRESULT get_ownerTemplate(IXSLTemplate** ppTemplate) mut => VT.[Friend]get_ownerTemplate(&this, ppTemplate);

	public HRESULT setStartMode(BSTR mode, BSTR namespaceURI) mut => VT.[Friend]setStartMode(&this, mode, namespaceURI);

	public HRESULT get_startMode(BSTR* mode) mut => VT.[Friend]get_startMode(&this, mode);

	public HRESULT get_startModeURI(BSTR* namespaceURI) mut => VT.[Friend]get_startModeURI(&this, namespaceURI);

	public HRESULT put_output(VARIANT output) mut => VT.[Friend]put_output(&this, output);

	public HRESULT get_output(VARIANT* pOutput) mut => VT.[Friend]get_output(&this, pOutput);

	public HRESULT transform(int16* pDone) mut => VT.[Friend]transform(&this, pDone);

	public HRESULT reset() mut => VT.[Friend]reset(&this);

	public HRESULT get_readyState(int32* pReadyState) mut => VT.[Friend]get_readyState(&this, pReadyState);

	public HRESULT addParameter(BSTR baseName, VARIANT parameter, BSTR namespaceURI) mut => VT.[Friend]addParameter(&this, baseName, parameter, namespaceURI);

	public HRESULT addObject(IDispatch* obj, BSTR namespaceURI) mut => VT.[Friend]addObject(&this, obj, namespaceURI);

	public HRESULT get_stylesheet(IXMLDOMNode** stylesheet) mut => VT.[Friend]get_stylesheet(&this, stylesheet);
}

[CRepr]struct IXSLTemplate : IDispatch
{
	public new const Guid IID = .(0x2933bf93, 0x7b36, 0x11d2, 0xb2, 0x0e, 0x00, 0xc0, 0x4f, 0x98, 0x3e, 0x60);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IXMLDOMNode* stylesheet) putref_stylesheet;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IXMLDOMNode** stylesheet) get_stylesheet;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IXSLProcessor** ppProcessor) createProcessor;
	}


	public HRESULT putref_stylesheet(IXMLDOMNode* stylesheet) mut => VT.[Friend]putref_stylesheet(&this, stylesheet);

	public HRESULT get_stylesheet(IXMLDOMNode** stylesheet) mut => VT.[Friend]get_stylesheet(&this, stylesheet);

	public HRESULT createProcessor(IXSLProcessor** ppProcessor) mut => VT.[Friend]createProcessor(&this, ppProcessor);
}

[CRepr]struct IXMLHTTPRequest : IDispatch
{
	public new const Guid IID = .(0xed8c108d, 0x4349, 0x11d2, 0x91, 0xa4, 0x00, 0xc0, 0x4f, 0x79, 0x69, 0xe8);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR bstrMethod, BSTR bstrUrl, VARIANT varAsync, VARIANT bstrUser, VARIANT bstrPassword) open;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR bstrHeader, BSTR bstrValue) setRequestHeader;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR bstrHeader, BSTR* pbstrValue) getResponseHeader;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* pbstrHeaders) getAllResponseHeaders;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT varBody) send;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self) abort;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* plStatus) get_status;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* pbstrStatus) get_statusText;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IDispatch** ppBody) get_responseXML;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* pbstrBody) get_responseText;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* pvarBody) get_responseBody;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* pvarBody) get_responseStream;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* plState) get_readyState;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IDispatch* pReadyStateSink) put_onreadystatechange;
	}


	public HRESULT open(BSTR bstrMethod, BSTR bstrUrl, VARIANT varAsync, VARIANT bstrUser, VARIANT bstrPassword) mut => VT.[Friend]open(&this, bstrMethod, bstrUrl, varAsync, bstrUser, bstrPassword);

	public HRESULT setRequestHeader(BSTR bstrHeader, BSTR bstrValue) mut => VT.[Friend]setRequestHeader(&this, bstrHeader, bstrValue);

	public HRESULT getResponseHeader(BSTR bstrHeader, BSTR* pbstrValue) mut => VT.[Friend]getResponseHeader(&this, bstrHeader, pbstrValue);

	public HRESULT getAllResponseHeaders(BSTR* pbstrHeaders) mut => VT.[Friend]getAllResponseHeaders(&this, pbstrHeaders);

	public HRESULT send(VARIANT varBody) mut => VT.[Friend]send(&this, varBody);

	public HRESULT abort() mut => VT.[Friend]abort(&this);

	public HRESULT get_status(int32* plStatus) mut => VT.[Friend]get_status(&this, plStatus);

	public HRESULT get_statusText(BSTR* pbstrStatus) mut => VT.[Friend]get_statusText(&this, pbstrStatus);

	public HRESULT get_responseXML(IDispatch** ppBody) mut => VT.[Friend]get_responseXML(&this, ppBody);

	public HRESULT get_responseText(BSTR* pbstrBody) mut => VT.[Friend]get_responseText(&this, pbstrBody);

	public HRESULT get_responseBody(VARIANT* pvarBody) mut => VT.[Friend]get_responseBody(&this, pvarBody);

	public HRESULT get_responseStream(VARIANT* pvarBody) mut => VT.[Friend]get_responseStream(&this, pvarBody);

	public HRESULT get_readyState(int32* plState) mut => VT.[Friend]get_readyState(&this, plState);

	public HRESULT put_onreadystatechange(IDispatch* pReadyStateSink) mut => VT.[Friend]put_onreadystatechange(&this, pReadyStateSink);
}

[CRepr]struct IServerXMLHTTPRequest : IXMLHTTPRequest
{
	public new const Guid IID = .(0x2e9196bf, 0x13ba, 0x4dd4, 0x91, 0xca, 0x6c, 0x57, 0x1f, 0x28, 0x14, 0x95);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IXMLHTTPRequest.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 resolveTimeout, int32 connectTimeout, int32 sendTimeout, int32 receiveTimeout) setTimeouts;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT timeoutInSeconds, int16* isSuccessful) waitForResponse;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, SERVERXMLHTTP_OPTION option, VARIANT* value) getOption;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, SERVERXMLHTTP_OPTION option, VARIANT value) setOption;
	}


	public HRESULT setTimeouts(int32 resolveTimeout, int32 connectTimeout, int32 sendTimeout, int32 receiveTimeout) mut => VT.[Friend]setTimeouts(&this, resolveTimeout, connectTimeout, sendTimeout, receiveTimeout);

	public HRESULT waitForResponse(VARIANT timeoutInSeconds, int16* isSuccessful) mut => VT.[Friend]waitForResponse(&this, timeoutInSeconds, isSuccessful);

	public HRESULT getOption(SERVERXMLHTTP_OPTION option, VARIANT* value) mut => VT.[Friend]getOption(&this, option, value);

	public HRESULT setOption(SERVERXMLHTTP_OPTION option, VARIANT value) mut => VT.[Friend]setOption(&this, option, value);
}

[CRepr]struct IServerXMLHTTPRequest2 : IServerXMLHTTPRequest
{
	public new const Guid IID = .(0x2e01311b, 0xc322, 0x4b0a, 0xbd, 0x77, 0xb9, 0x0c, 0xfd, 0xc8, 0xdc, 0xe7);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IServerXMLHTTPRequest.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, SXH_PROXY_SETTING proxySetting, VARIANT varProxyServer, VARIANT varBypassList) setProxy;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR bstrUserName, BSTR bstrPassword) setProxyCredentials;
	}


	public HRESULT setProxy(SXH_PROXY_SETTING proxySetting, VARIANT varProxyServer, VARIANT varBypassList) mut => VT.[Friend]setProxy(&this, proxySetting, varProxyServer, varBypassList);

	public HRESULT setProxyCredentials(BSTR bstrUserName, BSTR bstrPassword) mut => VT.[Friend]setProxyCredentials(&this, bstrUserName, bstrPassword);
}

[CRepr]struct ISAXXMLReader : IUnknown
{
	public new const Guid IID = .(0xa4f96ed0, 0xf829, 0x476e, 0x81, 0xc0, 0xcd, 0xc7, 0xbd, 0x2a, 0x08, 0x02);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IUnknown.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, PWSTR pwchName, int16* pvfValue) getFeature;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, PWSTR pwchName, int16 vfValue) putFeature;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, PWSTR pwchName, VARIANT* pvarValue) getProperty;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, PWSTR pwchName, VARIANT varValue) putProperty;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, ISAXEntityResolver** ppResolver) getEntityResolver;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, ISAXEntityResolver* pResolver) putEntityResolver;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, ISAXContentHandler** ppHandler) getContentHandler;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, ISAXContentHandler* pHandler) putContentHandler;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, ISAXDTDHandler** ppHandler) getDTDHandler;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, ISAXDTDHandler* pHandler) putDTDHandler;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, ISAXErrorHandler** ppHandler) getErrorHandler;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, ISAXErrorHandler* pHandler) putErrorHandler;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint16** ppwchBaseUrl) getBaseURL;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, PWSTR pwchBaseUrl) putBaseURL;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint16** ppwchSecureBaseUrl) getSecureBaseURL;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, PWSTR pwchSecureBaseUrl) putSecureBaseURL;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT varInput) parse;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, PWSTR pwchUrl) parseURL;
	}


	public HRESULT getFeature(PWSTR pwchName, int16* pvfValue) mut => VT.[Friend]getFeature(&this, pwchName, pvfValue);

	public HRESULT putFeature(PWSTR pwchName, int16 vfValue) mut => VT.[Friend]putFeature(&this, pwchName, vfValue);

	public HRESULT getProperty(PWSTR pwchName, VARIANT* pvarValue) mut => VT.[Friend]getProperty(&this, pwchName, pvarValue);

	public HRESULT putProperty(PWSTR pwchName, VARIANT varValue) mut => VT.[Friend]putProperty(&this, pwchName, varValue);

	public HRESULT getEntityResolver(ISAXEntityResolver** ppResolver) mut => VT.[Friend]getEntityResolver(&this, ppResolver);

	public HRESULT putEntityResolver(ISAXEntityResolver* pResolver) mut => VT.[Friend]putEntityResolver(&this, pResolver);

	public HRESULT getContentHandler(ISAXContentHandler** ppHandler) mut => VT.[Friend]getContentHandler(&this, ppHandler);

	public HRESULT putContentHandler(ISAXContentHandler* pHandler) mut => VT.[Friend]putContentHandler(&this, pHandler);

	public HRESULT getDTDHandler(ISAXDTDHandler** ppHandler) mut => VT.[Friend]getDTDHandler(&this, ppHandler);

	public HRESULT putDTDHandler(ISAXDTDHandler* pHandler) mut => VT.[Friend]putDTDHandler(&this, pHandler);

	public HRESULT getErrorHandler(ISAXErrorHandler** ppHandler) mut => VT.[Friend]getErrorHandler(&this, ppHandler);

	public HRESULT putErrorHandler(ISAXErrorHandler* pHandler) mut => VT.[Friend]putErrorHandler(&this, pHandler);

	public HRESULT getBaseURL(uint16** ppwchBaseUrl) mut => VT.[Friend]getBaseURL(&this, ppwchBaseUrl);

	public HRESULT putBaseURL(PWSTR pwchBaseUrl) mut => VT.[Friend]putBaseURL(&this, pwchBaseUrl);

	public HRESULT getSecureBaseURL(uint16** ppwchSecureBaseUrl) mut => VT.[Friend]getSecureBaseURL(&this, ppwchSecureBaseUrl);

	public HRESULT putSecureBaseURL(PWSTR pwchSecureBaseUrl) mut => VT.[Friend]putSecureBaseURL(&this, pwchSecureBaseUrl);

	public HRESULT parse(VARIANT varInput) mut => VT.[Friend]parse(&this, varInput);

	public HRESULT parseURL(PWSTR pwchUrl) mut => VT.[Friend]parseURL(&this, pwchUrl);
}

[CRepr]struct ISAXXMLFilter : ISAXXMLReader
{
	public new const Guid IID = .(0x70409222, 0xca09, 0x4475, 0xac, 0xb8, 0x40, 0x31, 0x2f, 0xe8, 0xd1, 0x45);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : ISAXXMLReader.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, ISAXXMLReader** ppReader) getParent;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, ISAXXMLReader* pReader) putParent;
	}


	public HRESULT getParent(ISAXXMLReader** ppReader) mut => VT.[Friend]getParent(&this, ppReader);

	public HRESULT putParent(ISAXXMLReader* pReader) mut => VT.[Friend]putParent(&this, pReader);
}

[CRepr]struct ISAXLocator : IUnknown
{
	public new const Guid IID = .(0x9b7e472a, 0x0de4, 0x4640, 0xbf, 0xf3, 0x84, 0xd3, 0x8a, 0x05, 0x1c, 0x31);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IUnknown.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* pnColumn) getColumnNumber;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* pnLine) getLineNumber;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint16** ppwchPublicId) getPublicId;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint16** ppwchSystemId) getSystemId;
	}


	public HRESULT getColumnNumber(int32* pnColumn) mut => VT.[Friend]getColumnNumber(&this, pnColumn);

	public HRESULT getLineNumber(int32* pnLine) mut => VT.[Friend]getLineNumber(&this, pnLine);

	public HRESULT getPublicId(uint16** ppwchPublicId) mut => VT.[Friend]getPublicId(&this, ppwchPublicId);

	public HRESULT getSystemId(uint16** ppwchSystemId) mut => VT.[Friend]getSystemId(&this, ppwchSystemId);
}

[CRepr]struct ISAXEntityResolver : IUnknown
{
	public new const Guid IID = .(0x99bca7bd, 0xe8c4, 0x4d5f, 0xa0, 0xcf, 0x6d, 0x90, 0x79, 0x01, 0xff, 0x07);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IUnknown.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, PWSTR pwchPublicId, PWSTR pwchSystemId, VARIANT* pvarInput) resolveEntity;
	}


	public HRESULT resolveEntity(PWSTR pwchPublicId, PWSTR pwchSystemId, VARIANT* pvarInput) mut => VT.[Friend]resolveEntity(&this, pwchPublicId, pwchSystemId, pvarInput);
}

[CRepr]struct ISAXContentHandler : IUnknown
{
	public new const Guid IID = .(0x1545cdfa, 0x9e4e, 0x4497, 0xa8, 0xa4, 0x2b, 0xf7, 0xd0, 0x11, 0x2c, 0x44);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IUnknown.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, ISAXLocator* pLocator) putDocumentLocator;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self) startDocument;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self) endDocument;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, PWSTR pwchPrefix, int32 cchPrefix, PWSTR pwchUri, int32 cchUri) startPrefixMapping;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, PWSTR pwchPrefix, int32 cchPrefix) endPrefixMapping;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, PWSTR pwchNamespaceUri, int32 cchNamespaceUri, PWSTR pwchLocalName, int32 cchLocalName, PWSTR pwchQName, int32 cchQName, ISAXAttributes* pAttributes) startElement;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, PWSTR pwchNamespaceUri, int32 cchNamespaceUri, PWSTR pwchLocalName, int32 cchLocalName, PWSTR pwchQName, int32 cchQName) endElement;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, PWSTR pwchChars, int32 cchChars) characters;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, PWSTR pwchChars, int32 cchChars) ignorableWhitespace;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, PWSTR pwchTarget, int32 cchTarget, PWSTR pwchData, int32 cchData) processingInstruction;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, PWSTR pwchName, int32 cchName) skippedEntity;
	}


	public HRESULT putDocumentLocator(ISAXLocator* pLocator) mut => VT.[Friend]putDocumentLocator(&this, pLocator);

	public HRESULT startDocument() mut => VT.[Friend]startDocument(&this);

	public HRESULT endDocument() mut => VT.[Friend]endDocument(&this);

	public HRESULT startPrefixMapping(PWSTR pwchPrefix, int32 cchPrefix, PWSTR pwchUri, int32 cchUri) mut => VT.[Friend]startPrefixMapping(&this, pwchPrefix, cchPrefix, pwchUri, cchUri);

	public HRESULT endPrefixMapping(PWSTR pwchPrefix, int32 cchPrefix) mut => VT.[Friend]endPrefixMapping(&this, pwchPrefix, cchPrefix);

	public HRESULT startElement(PWSTR pwchNamespaceUri, int32 cchNamespaceUri, PWSTR pwchLocalName, int32 cchLocalName, PWSTR pwchQName, int32 cchQName, ISAXAttributes* pAttributes) mut => VT.[Friend]startElement(&this, pwchNamespaceUri, cchNamespaceUri, pwchLocalName, cchLocalName, pwchQName, cchQName, pAttributes);

	public HRESULT endElement(PWSTR pwchNamespaceUri, int32 cchNamespaceUri, PWSTR pwchLocalName, int32 cchLocalName, PWSTR pwchQName, int32 cchQName) mut => VT.[Friend]endElement(&this, pwchNamespaceUri, cchNamespaceUri, pwchLocalName, cchLocalName, pwchQName, cchQName);

	public HRESULT characters(PWSTR pwchChars, int32 cchChars) mut => VT.[Friend]characters(&this, pwchChars, cchChars);

	public HRESULT ignorableWhitespace(PWSTR pwchChars, int32 cchChars) mut => VT.[Friend]ignorableWhitespace(&this, pwchChars, cchChars);

	public HRESULT processingInstruction(PWSTR pwchTarget, int32 cchTarget, PWSTR pwchData, int32 cchData) mut => VT.[Friend]processingInstruction(&this, pwchTarget, cchTarget, pwchData, cchData);

	public HRESULT skippedEntity(PWSTR pwchName, int32 cchName) mut => VT.[Friend]skippedEntity(&this, pwchName, cchName);
}

[CRepr]struct ISAXDTDHandler : IUnknown
{
	public new const Guid IID = .(0xe15c1baf, 0xafb3, 0x4d60, 0x8c, 0x36, 0x19, 0xa8, 0xc4, 0x5d, 0xef, 0xed);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IUnknown.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, PWSTR pwchName, int32 cchName, PWSTR pwchPublicId, int32 cchPublicId, PWSTR pwchSystemId, int32 cchSystemId) notationDecl;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, PWSTR pwchName, int32 cchName, PWSTR pwchPublicId, int32 cchPublicId, PWSTR pwchSystemId, int32 cchSystemId, PWSTR pwchNotationName, int32 cchNotationName) unparsedEntityDecl;
	}


	public HRESULT notationDecl(PWSTR pwchName, int32 cchName, PWSTR pwchPublicId, int32 cchPublicId, PWSTR pwchSystemId, int32 cchSystemId) mut => VT.[Friend]notationDecl(&this, pwchName, cchName, pwchPublicId, cchPublicId, pwchSystemId, cchSystemId);

	public HRESULT unparsedEntityDecl(PWSTR pwchName, int32 cchName, PWSTR pwchPublicId, int32 cchPublicId, PWSTR pwchSystemId, int32 cchSystemId, PWSTR pwchNotationName, int32 cchNotationName) mut => VT.[Friend]unparsedEntityDecl(&this, pwchName, cchName, pwchPublicId, cchPublicId, pwchSystemId, cchSystemId, pwchNotationName, cchNotationName);
}

[CRepr]struct ISAXErrorHandler : IUnknown
{
	public new const Guid IID = .(0xa60511c4, 0xccf5, 0x479e, 0x98, 0xa3, 0xdc, 0x8d, 0xc5, 0x45, 0xb7, 0xd0);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IUnknown.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, ISAXLocator* pLocator, PWSTR pwchErrorMessage, HRESULT hrErrorCode) error;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, ISAXLocator* pLocator, PWSTR pwchErrorMessage, HRESULT hrErrorCode) fatalError;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, ISAXLocator* pLocator, PWSTR pwchErrorMessage, HRESULT hrErrorCode) ignorableWarning;
	}


	public HRESULT error(ISAXLocator* pLocator, PWSTR pwchErrorMessage, HRESULT hrErrorCode) mut => VT.[Friend]error(&this, pLocator, pwchErrorMessage, hrErrorCode);

	public HRESULT fatalError(ISAXLocator* pLocator, PWSTR pwchErrorMessage, HRESULT hrErrorCode) mut => VT.[Friend]fatalError(&this, pLocator, pwchErrorMessage, hrErrorCode);

	public HRESULT ignorableWarning(ISAXLocator* pLocator, PWSTR pwchErrorMessage, HRESULT hrErrorCode) mut => VT.[Friend]ignorableWarning(&this, pLocator, pwchErrorMessage, hrErrorCode);
}

[CRepr]struct ISAXLexicalHandler : IUnknown
{
	public new const Guid IID = .(0x7f85d5f5, 0x47a8, 0x4497, 0xbd, 0xa5, 0x84, 0xba, 0x04, 0x81, 0x9e, 0xa6);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IUnknown.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, PWSTR pwchName, int32 cchName, PWSTR pwchPublicId, int32 cchPublicId, PWSTR pwchSystemId, int32 cchSystemId) startDTD;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self) endDTD;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, PWSTR pwchName, int32 cchName) startEntity;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, PWSTR pwchName, int32 cchName) endEntity;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self) startCDATA;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self) endCDATA;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, PWSTR pwchChars, int32 cchChars) comment;
	}


	public HRESULT startDTD(PWSTR pwchName, int32 cchName, PWSTR pwchPublicId, int32 cchPublicId, PWSTR pwchSystemId, int32 cchSystemId) mut => VT.[Friend]startDTD(&this, pwchName, cchName, pwchPublicId, cchPublicId, pwchSystemId, cchSystemId);

	public HRESULT endDTD() mut => VT.[Friend]endDTD(&this);

	public HRESULT startEntity(PWSTR pwchName, int32 cchName) mut => VT.[Friend]startEntity(&this, pwchName, cchName);

	public HRESULT endEntity(PWSTR pwchName, int32 cchName) mut => VT.[Friend]endEntity(&this, pwchName, cchName);

	public HRESULT startCDATA() mut => VT.[Friend]startCDATA(&this);

	public HRESULT endCDATA() mut => VT.[Friend]endCDATA(&this);

	public HRESULT comment(PWSTR pwchChars, int32 cchChars) mut => VT.[Friend]comment(&this, pwchChars, cchChars);
}

[CRepr]struct ISAXDeclHandler : IUnknown
{
	public new const Guid IID = .(0x862629ac, 0x771a, 0x47b2, 0x83, 0x37, 0x4e, 0x68, 0x43, 0xc1, 0xbe, 0x90);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IUnknown.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, PWSTR pwchName, int32 cchName, PWSTR pwchModel, int32 cchModel) elementDecl;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, PWSTR pwchElementName, int32 cchElementName, PWSTR pwchAttributeName, int32 cchAttributeName, PWSTR pwchType, int32 cchType, PWSTR pwchValueDefault, int32 cchValueDefault, PWSTR pwchValue, int32 cchValue) attributeDecl;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, PWSTR pwchName, int32 cchName, PWSTR pwchValue, int32 cchValue) internalEntityDecl;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, PWSTR pwchName, int32 cchName, PWSTR pwchPublicId, int32 cchPublicId, PWSTR pwchSystemId, int32 cchSystemId) externalEntityDecl;
	}


	public HRESULT elementDecl(PWSTR pwchName, int32 cchName, PWSTR pwchModel, int32 cchModel) mut => VT.[Friend]elementDecl(&this, pwchName, cchName, pwchModel, cchModel);

	public HRESULT attributeDecl(PWSTR pwchElementName, int32 cchElementName, PWSTR pwchAttributeName, int32 cchAttributeName, PWSTR pwchType, int32 cchType, PWSTR pwchValueDefault, int32 cchValueDefault, PWSTR pwchValue, int32 cchValue) mut => VT.[Friend]attributeDecl(&this, pwchElementName, cchElementName, pwchAttributeName, cchAttributeName, pwchType, cchType, pwchValueDefault, cchValueDefault, pwchValue, cchValue);

	public HRESULT internalEntityDecl(PWSTR pwchName, int32 cchName, PWSTR pwchValue, int32 cchValue) mut => VT.[Friend]internalEntityDecl(&this, pwchName, cchName, pwchValue, cchValue);

	public HRESULT externalEntityDecl(PWSTR pwchName, int32 cchName, PWSTR pwchPublicId, int32 cchPublicId, PWSTR pwchSystemId, int32 cchSystemId) mut => VT.[Friend]externalEntityDecl(&this, pwchName, cchName, pwchPublicId, cchPublicId, pwchSystemId, cchSystemId);
}

[CRepr]struct ISAXAttributes : IUnknown
{
	public new const Guid IID = .(0xf078abe1, 0x45d2, 0x4832, 0x91, 0xea, 0x44, 0x66, 0xce, 0x2f, 0x25, 0xc9);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IUnknown.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* pnLength) getLength;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 nIndex, uint16** ppwchUri, int32* pcchUri) getURI;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 nIndex, uint16** ppwchLocalName, int32* pcchLocalName) getLocalName;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 nIndex, uint16** ppwchQName, int32* pcchQName) getQName;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 nIndex, uint16** ppwchUri, int32* pcchUri, uint16** ppwchLocalName, int32* pcchLocalName, uint16** ppwchQName, int32* pcchQName) getName;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, PWSTR pwchUri, int32 cchUri, PWSTR pwchLocalName, int32 cchLocalName, int32* pnIndex) getIndexFromName;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, PWSTR pwchQName, int32 cchQName, int32* pnIndex) getIndexFromQName;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 nIndex, uint16** ppwchType, int32* pcchType) getType;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, PWSTR pwchUri, int32 cchUri, PWSTR pwchLocalName, int32 cchLocalName, uint16** ppwchType, int32* pcchType) getTypeFromName;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, PWSTR pwchQName, int32 cchQName, uint16** ppwchType, int32* pcchType) getTypeFromQName;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 nIndex, uint16** ppwchValue, int32* pcchValue) getValue;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, PWSTR pwchUri, int32 cchUri, PWSTR pwchLocalName, int32 cchLocalName, uint16** ppwchValue, int32* pcchValue) getValueFromName;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, PWSTR pwchQName, int32 cchQName, uint16** ppwchValue, int32* pcchValue) getValueFromQName;
	}


	public HRESULT getLength(int32* pnLength) mut => VT.[Friend]getLength(&this, pnLength);

	public HRESULT getURI(int32 nIndex, uint16** ppwchUri, int32* pcchUri) mut => VT.[Friend]getURI(&this, nIndex, ppwchUri, pcchUri);

	public HRESULT getLocalName(int32 nIndex, uint16** ppwchLocalName, int32* pcchLocalName) mut => VT.[Friend]getLocalName(&this, nIndex, ppwchLocalName, pcchLocalName);

	public HRESULT getQName(int32 nIndex, uint16** ppwchQName, int32* pcchQName) mut => VT.[Friend]getQName(&this, nIndex, ppwchQName, pcchQName);

	public HRESULT getName(int32 nIndex, uint16** ppwchUri, int32* pcchUri, uint16** ppwchLocalName, int32* pcchLocalName, uint16** ppwchQName, int32* pcchQName) mut => VT.[Friend]getName(&this, nIndex, ppwchUri, pcchUri, ppwchLocalName, pcchLocalName, ppwchQName, pcchQName);

	public HRESULT getIndexFromName(PWSTR pwchUri, int32 cchUri, PWSTR pwchLocalName, int32 cchLocalName, int32* pnIndex) mut => VT.[Friend]getIndexFromName(&this, pwchUri, cchUri, pwchLocalName, cchLocalName, pnIndex);

	public HRESULT getIndexFromQName(PWSTR pwchQName, int32 cchQName, int32* pnIndex) mut => VT.[Friend]getIndexFromQName(&this, pwchQName, cchQName, pnIndex);

	public HRESULT getType(int32 nIndex, uint16** ppwchType, int32* pcchType) mut => VT.[Friend]getType(&this, nIndex, ppwchType, pcchType);

	public HRESULT getTypeFromName(PWSTR pwchUri, int32 cchUri, PWSTR pwchLocalName, int32 cchLocalName, uint16** ppwchType, int32* pcchType) mut => VT.[Friend]getTypeFromName(&this, pwchUri, cchUri, pwchLocalName, cchLocalName, ppwchType, pcchType);

	public HRESULT getTypeFromQName(PWSTR pwchQName, int32 cchQName, uint16** ppwchType, int32* pcchType) mut => VT.[Friend]getTypeFromQName(&this, pwchQName, cchQName, ppwchType, pcchType);

	public HRESULT getValue(int32 nIndex, uint16** ppwchValue, int32* pcchValue) mut => VT.[Friend]getValue(&this, nIndex, ppwchValue, pcchValue);

	public HRESULT getValueFromName(PWSTR pwchUri, int32 cchUri, PWSTR pwchLocalName, int32 cchLocalName, uint16** ppwchValue, int32* pcchValue) mut => VT.[Friend]getValueFromName(&this, pwchUri, cchUri, pwchLocalName, cchLocalName, ppwchValue, pcchValue);

	public HRESULT getValueFromQName(PWSTR pwchQName, int32 cchQName, uint16** ppwchValue, int32* pcchValue) mut => VT.[Friend]getValueFromQName(&this, pwchQName, cchQName, ppwchValue, pcchValue);
}

[CRepr]struct IVBSAXXMLReader : IDispatch
{
	public new const Guid IID = .(0x8c033caa, 0x6cd6, 0x4f73, 0xb7, 0x28, 0x45, 0x31, 0xaf, 0x74, 0x94, 0x5f);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR strName, int16* fValue) getFeature;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR strName, int16 fValue) putFeature;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR strName, VARIANT* varValue) getProperty;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR strName, VARIANT varValue) putProperty;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IVBSAXEntityResolver** oResolver) get_entityResolver;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IVBSAXEntityResolver* oResolver) putref_entityResolver;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IVBSAXContentHandler** oHandler) get_contentHandler;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IVBSAXContentHandler* oHandler) putref_contentHandler;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IVBSAXDTDHandler** oHandler) get_dtdHandler;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IVBSAXDTDHandler* oHandler) putref_dtdHandler;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IVBSAXErrorHandler** oHandler) get_errorHandler;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IVBSAXErrorHandler* oHandler) putref_errorHandler;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* strBaseURL) get_baseURL;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR strBaseURL) put_baseURL;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* strSecureBaseURL) get_secureBaseURL;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR strSecureBaseURL) put_secureBaseURL;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT varInput) parse;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR strURL) parseURL;
	}


	public HRESULT getFeature(BSTR strName, int16* fValue) mut => VT.[Friend]getFeature(&this, strName, fValue);

	public HRESULT putFeature(BSTR strName, int16 fValue) mut => VT.[Friend]putFeature(&this, strName, fValue);

	public HRESULT getProperty(BSTR strName, VARIANT* varValue) mut => VT.[Friend]getProperty(&this, strName, varValue);

	public HRESULT putProperty(BSTR strName, VARIANT varValue) mut => VT.[Friend]putProperty(&this, strName, varValue);

	public HRESULT get_entityResolver(IVBSAXEntityResolver** oResolver) mut => VT.[Friend]get_entityResolver(&this, oResolver);

	public HRESULT putref_entityResolver(IVBSAXEntityResolver* oResolver) mut => VT.[Friend]putref_entityResolver(&this, oResolver);

	public HRESULT get_contentHandler(IVBSAXContentHandler** oHandler) mut => VT.[Friend]get_contentHandler(&this, oHandler);

	public HRESULT putref_contentHandler(IVBSAXContentHandler* oHandler) mut => VT.[Friend]putref_contentHandler(&this, oHandler);

	public HRESULT get_dtdHandler(IVBSAXDTDHandler** oHandler) mut => VT.[Friend]get_dtdHandler(&this, oHandler);

	public HRESULT putref_dtdHandler(IVBSAXDTDHandler* oHandler) mut => VT.[Friend]putref_dtdHandler(&this, oHandler);

	public HRESULT get_errorHandler(IVBSAXErrorHandler** oHandler) mut => VT.[Friend]get_errorHandler(&this, oHandler);

	public HRESULT putref_errorHandler(IVBSAXErrorHandler* oHandler) mut => VT.[Friend]putref_errorHandler(&this, oHandler);

	public HRESULT get_baseURL(BSTR* strBaseURL) mut => VT.[Friend]get_baseURL(&this, strBaseURL);

	public HRESULT put_baseURL(BSTR strBaseURL) mut => VT.[Friend]put_baseURL(&this, strBaseURL);

	public HRESULT get_secureBaseURL(BSTR* strSecureBaseURL) mut => VT.[Friend]get_secureBaseURL(&this, strSecureBaseURL);

	public HRESULT put_secureBaseURL(BSTR strSecureBaseURL) mut => VT.[Friend]put_secureBaseURL(&this, strSecureBaseURL);

	public HRESULT parse(VARIANT varInput) mut => VT.[Friend]parse(&this, varInput);

	public HRESULT parseURL(BSTR strURL) mut => VT.[Friend]parseURL(&this, strURL);
}

[CRepr]struct IVBSAXXMLFilter : IDispatch
{
	public new const Guid IID = .(0x1299eb1b, 0x5b88, 0x433e, 0x82, 0xde, 0x82, 0xca, 0x75, 0xad, 0x4e, 0x04);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IVBSAXXMLReader** oReader) get_parent;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IVBSAXXMLReader* oReader) putref_parent;
	}


	public HRESULT get_parent(IVBSAXXMLReader** oReader) mut => VT.[Friend]get_parent(&this, oReader);

	public HRESULT putref_parent(IVBSAXXMLReader* oReader) mut => VT.[Friend]putref_parent(&this, oReader);
}

[CRepr]struct IVBSAXLocator : IDispatch
{
	public new const Guid IID = .(0x796e7ac5, 0x5aa2, 0x4eff, 0xac, 0xad, 0x3f, 0xaa, 0xf0, 0x1a, 0x32, 0x88);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* nColumn) get_columnNumber;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* nLine) get_lineNumber;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* strPublicId) get_publicId;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* strSystemId) get_systemId;
	}


	public HRESULT get_columnNumber(int32* nColumn) mut => VT.[Friend]get_columnNumber(&this, nColumn);

	public HRESULT get_lineNumber(int32* nLine) mut => VT.[Friend]get_lineNumber(&this, nLine);

	public HRESULT get_publicId(BSTR* strPublicId) mut => VT.[Friend]get_publicId(&this, strPublicId);

	public HRESULT get_systemId(BSTR* strSystemId) mut => VT.[Friend]get_systemId(&this, strSystemId);
}

[CRepr]struct IVBSAXEntityResolver : IDispatch
{
	public new const Guid IID = .(0x0c05d096, 0xf45b, 0x4aca, 0xad, 0x1a, 0xaa, 0x0b, 0xc2, 0x55, 0x18, 0xdc);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* strPublicId, BSTR* strSystemId, VARIANT* varInput) resolveEntity;
	}


	public HRESULT resolveEntity(BSTR* strPublicId, BSTR* strSystemId, VARIANT* varInput) mut => VT.[Friend]resolveEntity(&this, strPublicId, strSystemId, varInput);
}

[CRepr]struct IVBSAXContentHandler : IDispatch
{
	public new const Guid IID = .(0x2ed7290a, 0x4dd5, 0x4b46, 0xbb, 0x26, 0x4e, 0x41, 0x55, 0xe7, 0x7f, 0xaa);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IVBSAXLocator* oLocator) putref_documentLocator;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self) startDocument;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self) endDocument;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* strPrefix, BSTR* strURI) startPrefixMapping;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* strPrefix) endPrefixMapping;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* strNamespaceURI, BSTR* strLocalName, BSTR* strQName, IVBSAXAttributes* oAttributes) startElement;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* strNamespaceURI, BSTR* strLocalName, BSTR* strQName) endElement;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* strChars) characters;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* strChars) ignorableWhitespace;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* strTarget, BSTR* strData) processingInstruction;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* strName) skippedEntity;
	}


	public HRESULT putref_documentLocator(IVBSAXLocator* oLocator) mut => VT.[Friend]putref_documentLocator(&this, oLocator);

	public HRESULT startDocument() mut => VT.[Friend]startDocument(&this);

	public HRESULT endDocument() mut => VT.[Friend]endDocument(&this);

	public HRESULT startPrefixMapping(BSTR* strPrefix, BSTR* strURI) mut => VT.[Friend]startPrefixMapping(&this, strPrefix, strURI);

	public HRESULT endPrefixMapping(BSTR* strPrefix) mut => VT.[Friend]endPrefixMapping(&this, strPrefix);

	public HRESULT startElement(BSTR* strNamespaceURI, BSTR* strLocalName, BSTR* strQName, IVBSAXAttributes* oAttributes) mut => VT.[Friend]startElement(&this, strNamespaceURI, strLocalName, strQName, oAttributes);

	public HRESULT endElement(BSTR* strNamespaceURI, BSTR* strLocalName, BSTR* strQName) mut => VT.[Friend]endElement(&this, strNamespaceURI, strLocalName, strQName);

	public HRESULT characters(BSTR* strChars) mut => VT.[Friend]characters(&this, strChars);

	public HRESULT ignorableWhitespace(BSTR* strChars) mut => VT.[Friend]ignorableWhitespace(&this, strChars);

	public HRESULT processingInstruction(BSTR* strTarget, BSTR* strData) mut => VT.[Friend]processingInstruction(&this, strTarget, strData);

	public HRESULT skippedEntity(BSTR* strName) mut => VT.[Friend]skippedEntity(&this, strName);
}

[CRepr]struct IVBSAXDTDHandler : IDispatch
{
	public new const Guid IID = .(0x24fb3297, 0x302d, 0x4620, 0xba, 0x39, 0x3a, 0x73, 0x2d, 0x85, 0x05, 0x58);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* strName, BSTR* strPublicId, BSTR* strSystemId) notationDecl;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* strName, BSTR* strPublicId, BSTR* strSystemId, BSTR* strNotationName) unparsedEntityDecl;
	}


	public HRESULT notationDecl(BSTR* strName, BSTR* strPublicId, BSTR* strSystemId) mut => VT.[Friend]notationDecl(&this, strName, strPublicId, strSystemId);

	public HRESULT unparsedEntityDecl(BSTR* strName, BSTR* strPublicId, BSTR* strSystemId, BSTR* strNotationName) mut => VT.[Friend]unparsedEntityDecl(&this, strName, strPublicId, strSystemId, strNotationName);
}

[CRepr]struct IVBSAXErrorHandler : IDispatch
{
	public new const Guid IID = .(0xd963d3fe, 0x173c, 0x4862, 0x90, 0x95, 0xb9, 0x2f, 0x66, 0x99, 0x5f, 0x52);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IVBSAXLocator* oLocator, BSTR* strErrorMessage, int32 nErrorCode) error;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IVBSAXLocator* oLocator, BSTR* strErrorMessage, int32 nErrorCode) fatalError;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IVBSAXLocator* oLocator, BSTR* strErrorMessage, int32 nErrorCode) ignorableWarning;
	}


	public HRESULT error(IVBSAXLocator* oLocator, BSTR* strErrorMessage, int32 nErrorCode) mut => VT.[Friend]error(&this, oLocator, strErrorMessage, nErrorCode);

	public HRESULT fatalError(IVBSAXLocator* oLocator, BSTR* strErrorMessage, int32 nErrorCode) mut => VT.[Friend]fatalError(&this, oLocator, strErrorMessage, nErrorCode);

	public HRESULT ignorableWarning(IVBSAXLocator* oLocator, BSTR* strErrorMessage, int32 nErrorCode) mut => VT.[Friend]ignorableWarning(&this, oLocator, strErrorMessage, nErrorCode);
}

[CRepr]struct IVBSAXLexicalHandler : IDispatch
{
	public new const Guid IID = .(0x032aac35, 0x8c0e, 0x4d9d, 0x97, 0x9f, 0xe3, 0xb7, 0x02, 0x93, 0x55, 0x76);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* strName, BSTR* strPublicId, BSTR* strSystemId) startDTD;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self) endDTD;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* strName) startEntity;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* strName) endEntity;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self) startCDATA;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self) endCDATA;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* strChars) comment;
	}


	public HRESULT startDTD(BSTR* strName, BSTR* strPublicId, BSTR* strSystemId) mut => VT.[Friend]startDTD(&this, strName, strPublicId, strSystemId);

	public HRESULT endDTD() mut => VT.[Friend]endDTD(&this);

	public HRESULT startEntity(BSTR* strName) mut => VT.[Friend]startEntity(&this, strName);

	public HRESULT endEntity(BSTR* strName) mut => VT.[Friend]endEntity(&this, strName);

	public HRESULT startCDATA() mut => VT.[Friend]startCDATA(&this);

	public HRESULT endCDATA() mut => VT.[Friend]endCDATA(&this);

	public HRESULT comment(BSTR* strChars) mut => VT.[Friend]comment(&this, strChars);
}

[CRepr]struct IVBSAXDeclHandler : IDispatch
{
	public new const Guid IID = .(0xe8917260, 0x7579, 0x4be1, 0xb5, 0xdd, 0x7a, 0xfb, 0xfa, 0x6f, 0x07, 0x7b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* strName, BSTR* strModel) elementDecl;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* strElementName, BSTR* strAttributeName, BSTR* strType, BSTR* strValueDefault, BSTR* strValue) attributeDecl;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* strName, BSTR* strValue) internalEntityDecl;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* strName, BSTR* strPublicId, BSTR* strSystemId) externalEntityDecl;
	}


	public HRESULT elementDecl(BSTR* strName, BSTR* strModel) mut => VT.[Friend]elementDecl(&this, strName, strModel);

	public HRESULT attributeDecl(BSTR* strElementName, BSTR* strAttributeName, BSTR* strType, BSTR* strValueDefault, BSTR* strValue) mut => VT.[Friend]attributeDecl(&this, strElementName, strAttributeName, strType, strValueDefault, strValue);

	public HRESULT internalEntityDecl(BSTR* strName, BSTR* strValue) mut => VT.[Friend]internalEntityDecl(&this, strName, strValue);

	public HRESULT externalEntityDecl(BSTR* strName, BSTR* strPublicId, BSTR* strSystemId) mut => VT.[Friend]externalEntityDecl(&this, strName, strPublicId, strSystemId);
}

[CRepr]struct IVBSAXAttributes : IDispatch
{
	public new const Guid IID = .(0x10dc0586, 0x132b, 0x4cac, 0x8b, 0xb3, 0xdb, 0x00, 0xac, 0x8b, 0x7e, 0xe0);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* nLength) get_length;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 nIndex, BSTR* strURI) getURI;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 nIndex, BSTR* strLocalName) getLocalName;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 nIndex, BSTR* strQName) getQName;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR strURI, BSTR strLocalName, int32* nIndex) getIndexFromName;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR strQName, int32* nIndex) getIndexFromQName;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 nIndex, BSTR* strType) getType;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR strURI, BSTR strLocalName, BSTR* strType) getTypeFromName;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR strQName, BSTR* strType) getTypeFromQName;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 nIndex, BSTR* strValue) getValue;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR strURI, BSTR strLocalName, BSTR* strValue) getValueFromName;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR strQName, BSTR* strValue) getValueFromQName;
	}


	public HRESULT get_length(int32* nLength) mut => VT.[Friend]get_length(&this, nLength);

	public HRESULT getURI(int32 nIndex, BSTR* strURI) mut => VT.[Friend]getURI(&this, nIndex, strURI);

	public HRESULT getLocalName(int32 nIndex, BSTR* strLocalName) mut => VT.[Friend]getLocalName(&this, nIndex, strLocalName);

	public HRESULT getQName(int32 nIndex, BSTR* strQName) mut => VT.[Friend]getQName(&this, nIndex, strQName);

	public HRESULT getIndexFromName(BSTR strURI, BSTR strLocalName, int32* nIndex) mut => VT.[Friend]getIndexFromName(&this, strURI, strLocalName, nIndex);

	public HRESULT getIndexFromQName(BSTR strQName, int32* nIndex) mut => VT.[Friend]getIndexFromQName(&this, strQName, nIndex);

	public HRESULT getType(int32 nIndex, BSTR* strType) mut => VT.[Friend]getType(&this, nIndex, strType);

	public HRESULT getTypeFromName(BSTR strURI, BSTR strLocalName, BSTR* strType) mut => VT.[Friend]getTypeFromName(&this, strURI, strLocalName, strType);

	public HRESULT getTypeFromQName(BSTR strQName, BSTR* strType) mut => VT.[Friend]getTypeFromQName(&this, strQName, strType);

	public HRESULT getValue(int32 nIndex, BSTR* strValue) mut => VT.[Friend]getValue(&this, nIndex, strValue);

	public HRESULT getValueFromName(BSTR strURI, BSTR strLocalName, BSTR* strValue) mut => VT.[Friend]getValueFromName(&this, strURI, strLocalName, strValue);

	public HRESULT getValueFromQName(BSTR strQName, BSTR* strValue) mut => VT.[Friend]getValueFromQName(&this, strQName, strValue);
}

[CRepr]struct IMXWriter : IDispatch
{
	public new const Guid IID = .(0x4d7ff4ba, 0x1565, 0x4ea8, 0x94, 0xe1, 0x6e, 0x72, 0x4a, 0x46, 0xf9, 0x8d);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT varDestination) put_output;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* varDestination) get_output;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR strEncoding) put_encoding;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* strEncoding) get_encoding;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16 fWriteByteOrderMark) put_byteOrderMark;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16* fWriteByteOrderMark) get_byteOrderMark;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16 fIndentMode) put_indent;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16* fIndentMode) get_indent;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16 fValue) put_standalone;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16* fValue) get_standalone;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16 fValue) put_omitXMLDeclaration;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16* fValue) get_omitXMLDeclaration;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR strVersion) put_version;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* strVersion) get_version;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16 fValue) put_disableOutputEscaping;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16* fValue) get_disableOutputEscaping;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self) flush;
	}


	public HRESULT put_output(VARIANT varDestination) mut => VT.[Friend]put_output(&this, varDestination);

	public HRESULT get_output(VARIANT* varDestination) mut => VT.[Friend]get_output(&this, varDestination);

	public HRESULT put_encoding(BSTR strEncoding) mut => VT.[Friend]put_encoding(&this, strEncoding);

	public HRESULT get_encoding(BSTR* strEncoding) mut => VT.[Friend]get_encoding(&this, strEncoding);

	public HRESULT put_byteOrderMark(int16 fWriteByteOrderMark) mut => VT.[Friend]put_byteOrderMark(&this, fWriteByteOrderMark);

	public HRESULT get_byteOrderMark(int16* fWriteByteOrderMark) mut => VT.[Friend]get_byteOrderMark(&this, fWriteByteOrderMark);

	public HRESULT put_indent(int16 fIndentMode) mut => VT.[Friend]put_indent(&this, fIndentMode);

	public HRESULT get_indent(int16* fIndentMode) mut => VT.[Friend]get_indent(&this, fIndentMode);

	public HRESULT put_standalone(int16 fValue) mut => VT.[Friend]put_standalone(&this, fValue);

	public HRESULT get_standalone(int16* fValue) mut => VT.[Friend]get_standalone(&this, fValue);

	public HRESULT put_omitXMLDeclaration(int16 fValue) mut => VT.[Friend]put_omitXMLDeclaration(&this, fValue);

	public HRESULT get_omitXMLDeclaration(int16* fValue) mut => VT.[Friend]get_omitXMLDeclaration(&this, fValue);

	public HRESULT put_version(BSTR strVersion) mut => VT.[Friend]put_version(&this, strVersion);

	public HRESULT get_version(BSTR* strVersion) mut => VT.[Friend]get_version(&this, strVersion);

	public HRESULT put_disableOutputEscaping(int16 fValue) mut => VT.[Friend]put_disableOutputEscaping(&this, fValue);

	public HRESULT get_disableOutputEscaping(int16* fValue) mut => VT.[Friend]get_disableOutputEscaping(&this, fValue);

	public HRESULT flush() mut => VT.[Friend]flush(&this);
}

[CRepr]struct IMXAttributes : IDispatch
{
	public new const Guid IID = .(0xf10d27cc, 0x3ec0, 0x415c, 0x8e, 0xd8, 0x77, 0xab, 0x1c, 0x5e, 0x72, 0x62);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR strURI, BSTR strLocalName, BSTR strQName, BSTR strType, BSTR strValue) addAttribute;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT varAtts, int32 nIndex) addAttributeFromIndex;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self) clear;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 nIndex) removeAttribute;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 nIndex, BSTR strURI, BSTR strLocalName, BSTR strQName, BSTR strType, BSTR strValue) setAttribute;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT varAtts) setAttributes;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 nIndex, BSTR strLocalName) setLocalName;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 nIndex, BSTR strQName) setQName;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 nIndex, BSTR strType) setType;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 nIndex, BSTR strURI) setURI;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 nIndex, BSTR strValue) setValue;
	}


	public HRESULT addAttribute(BSTR strURI, BSTR strLocalName, BSTR strQName, BSTR strType, BSTR strValue) mut => VT.[Friend]addAttribute(&this, strURI, strLocalName, strQName, strType, strValue);

	public HRESULT addAttributeFromIndex(VARIANT varAtts, int32 nIndex) mut => VT.[Friend]addAttributeFromIndex(&this, varAtts, nIndex);

	public HRESULT clear() mut => VT.[Friend]clear(&this);

	public HRESULT removeAttribute(int32 nIndex) mut => VT.[Friend]removeAttribute(&this, nIndex);

	public HRESULT setAttribute(int32 nIndex, BSTR strURI, BSTR strLocalName, BSTR strQName, BSTR strType, BSTR strValue) mut => VT.[Friend]setAttribute(&this, nIndex, strURI, strLocalName, strQName, strType, strValue);

	public HRESULT setAttributes(VARIANT varAtts) mut => VT.[Friend]setAttributes(&this, varAtts);

	public HRESULT setLocalName(int32 nIndex, BSTR strLocalName) mut => VT.[Friend]setLocalName(&this, nIndex, strLocalName);

	public HRESULT setQName(int32 nIndex, BSTR strQName) mut => VT.[Friend]setQName(&this, nIndex, strQName);

	public HRESULT setType(int32 nIndex, BSTR strType) mut => VT.[Friend]setType(&this, nIndex, strType);

	public HRESULT setURI(int32 nIndex, BSTR strURI) mut => VT.[Friend]setURI(&this, nIndex, strURI);

	public HRESULT setValue(int32 nIndex, BSTR strValue) mut => VT.[Friend]setValue(&this, nIndex, strValue);
}

[CRepr]struct IMXReaderControl : IDispatch
{
	public new const Guid IID = .(0x808f4e35, 0x8d5a, 0x4fbe, 0x84, 0x66, 0x33, 0xa4, 0x12, 0x79, 0xed, 0x30);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self) abort;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self) resume;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self) suspend;
	}


	public HRESULT abort() mut => VT.[Friend]abort(&this);

	public HRESULT resume() mut => VT.[Friend]resume(&this);

	public HRESULT suspend() mut => VT.[Friend]suspend(&this);
}

[CRepr]struct IMXSchemaDeclHandler : IDispatch
{
	public new const Guid IID = .(0xfa4bb38c, 0xfaf9, 0x4cca, 0x93, 0x02, 0xd1, 0xdd, 0x0f, 0xe5, 0x20, 0xdb);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, ISchemaElement* oSchemaElement) schemaElementDecl;
	}


	public HRESULT schemaElementDecl(ISchemaElement* oSchemaElement) mut => VT.[Friend]schemaElementDecl(&this, oSchemaElement);
}

[CRepr]struct IMXNamespacePrefixes : IDispatch
{
	public new const Guid IID = .(0xc90352f4, 0x643c, 0x4fbc, 0xbb, 0x23, 0xe9, 0x96, 0xeb, 0x2d, 0x51, 0xfd);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 index, BSTR* prefix) get_item;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* length) get_length;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IUnknown** ppUnk) get__newEnum;
	}


	public HRESULT get_item(int32 index, BSTR* prefix) mut => VT.[Friend]get_item(&this, index, prefix);

	public HRESULT get_length(int32* length) mut => VT.[Friend]get_length(&this, length);

	public HRESULT get__newEnum(IUnknown** ppUnk) mut => VT.[Friend]get__newEnum(&this, ppUnk);
}

[CRepr]struct IVBMXNamespaceManager : IDispatch
{
	public new const Guid IID = .(0xc90352f5, 0x643c, 0x4fbc, 0xbb, 0x23, 0xe9, 0x96, 0xeb, 0x2d, 0x51, 0xfd);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16 fOverride) put_allowOverride;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16* fOverride) get_allowOverride;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self) reset;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self) pushContext;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IXMLDOMNode* contextNode, int16 fDeep) pushNodeContext;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self) popContext;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR prefix, BSTR namespaceURI) declarePrefix;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IMXNamespacePrefixes** prefixes) getDeclaredPrefixes;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR namespaceURI, IMXNamespacePrefixes** prefixes) getPrefixes;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR prefix, VARIANT* uri) getURI;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR strPrefix, IXMLDOMNode* contextNode, VARIANT* uri) getURIFromNode;
	}


	public HRESULT put_allowOverride(int16 fOverride) mut => VT.[Friend]put_allowOverride(&this, fOverride);

	public HRESULT get_allowOverride(int16* fOverride) mut => VT.[Friend]get_allowOverride(&this, fOverride);

	public HRESULT reset() mut => VT.[Friend]reset(&this);

	public HRESULT pushContext() mut => VT.[Friend]pushContext(&this);

	public HRESULT pushNodeContext(IXMLDOMNode* contextNode, int16 fDeep) mut => VT.[Friend]pushNodeContext(&this, contextNode, fDeep);

	public HRESULT popContext() mut => VT.[Friend]popContext(&this);

	public HRESULT declarePrefix(BSTR prefix, BSTR namespaceURI) mut => VT.[Friend]declarePrefix(&this, prefix, namespaceURI);

	public HRESULT getDeclaredPrefixes(IMXNamespacePrefixes** prefixes) mut => VT.[Friend]getDeclaredPrefixes(&this, prefixes);

	public HRESULT getPrefixes(BSTR namespaceURI, IMXNamespacePrefixes** prefixes) mut => VT.[Friend]getPrefixes(&this, namespaceURI, prefixes);

	public HRESULT getURI(BSTR prefix, VARIANT* uri) mut => VT.[Friend]getURI(&this, prefix, uri);

	public HRESULT getURIFromNode(BSTR strPrefix, IXMLDOMNode* contextNode, VARIANT* uri) mut => VT.[Friend]getURIFromNode(&this, strPrefix, contextNode, uri);
}

[CRepr]struct IMXNamespaceManager : IUnknown
{
	public new const Guid IID = .(0xc90352f6, 0x643c, 0x4fbc, 0xbb, 0x23, 0xe9, 0x96, 0xeb, 0x2d, 0x51, 0xfd);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IUnknown.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16 fOverride) putAllowOverride;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16* fOverride) getAllowOverride;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self) reset;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self) pushContext;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IXMLDOMNode* contextNode, int16 fDeep) pushNodeContext;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self) popContext;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, PWSTR prefix, PWSTR namespaceURI) declarePrefix;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 nIndex, char16* pwchPrefix, int32* pcchPrefix) getDeclaredPrefix;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, PWSTR pwszNamespaceURI, int32 nIndex, char16* pwchPrefix, int32* pcchPrefix) getPrefix;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, PWSTR pwchPrefix, IXMLDOMNode* pContextNode, char16* pwchUri, int32* pcchUri) getURI;
	}


	public HRESULT putAllowOverride(int16 fOverride) mut => VT.[Friend]putAllowOverride(&this, fOverride);

	public HRESULT getAllowOverride(int16* fOverride) mut => VT.[Friend]getAllowOverride(&this, fOverride);

	public HRESULT reset() mut => VT.[Friend]reset(&this);

	public HRESULT pushContext() mut => VT.[Friend]pushContext(&this);

	public HRESULT pushNodeContext(IXMLDOMNode* contextNode, int16 fDeep) mut => VT.[Friend]pushNodeContext(&this, contextNode, fDeep);

	public HRESULT popContext() mut => VT.[Friend]popContext(&this);

	public HRESULT declarePrefix(PWSTR prefix, PWSTR namespaceURI) mut => VT.[Friend]declarePrefix(&this, prefix, namespaceURI);

	public HRESULT getDeclaredPrefix(int32 nIndex, char16* pwchPrefix, int32* pcchPrefix) mut => VT.[Friend]getDeclaredPrefix(&this, nIndex, pwchPrefix, pcchPrefix);

	public HRESULT getPrefix(PWSTR pwszNamespaceURI, int32 nIndex, char16* pwchPrefix, int32* pcchPrefix) mut => VT.[Friend]getPrefix(&this, pwszNamespaceURI, nIndex, pwchPrefix, pcchPrefix);

	public HRESULT getURI(PWSTR pwchPrefix, IXMLDOMNode* pContextNode, char16* pwchUri, int32* pcchUri) mut => VT.[Friend]getURI(&this, pwchPrefix, pContextNode, pwchUri, pcchUri);
}

[CRepr]struct IMXXMLFilter : IDispatch
{
	public new const Guid IID = .(0xc90352f7, 0x643c, 0x4fbc, 0xbb, 0x23, 0xe9, 0x96, 0xeb, 0x2d, 0x51, 0xfd);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR strName, int16* fValue) getFeature;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR strName, int16 fValue) putFeature;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR strName, VARIANT* varValue) getProperty;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR strName, VARIANT varValue) putProperty;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IUnknown** oResolver) get_entityResolver;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IUnknown* oResolver) putref_entityResolver;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IUnknown** oHandler) get_contentHandler;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IUnknown* oHandler) putref_contentHandler;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IUnknown** oHandler) get_dtdHandler;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IUnknown* oHandler) putref_dtdHandler;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IUnknown** oHandler) get_errorHandler;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IUnknown* oHandler) putref_errorHandler;
	}


	public HRESULT getFeature(BSTR strName, int16* fValue) mut => VT.[Friend]getFeature(&this, strName, fValue);

	public HRESULT putFeature(BSTR strName, int16 fValue) mut => VT.[Friend]putFeature(&this, strName, fValue);

	public HRESULT getProperty(BSTR strName, VARIANT* varValue) mut => VT.[Friend]getProperty(&this, strName, varValue);

	public HRESULT putProperty(BSTR strName, VARIANT varValue) mut => VT.[Friend]putProperty(&this, strName, varValue);

	public HRESULT get_entityResolver(IUnknown** oResolver) mut => VT.[Friend]get_entityResolver(&this, oResolver);

	public HRESULT putref_entityResolver(IUnknown* oResolver) mut => VT.[Friend]putref_entityResolver(&this, oResolver);

	public HRESULT get_contentHandler(IUnknown** oHandler) mut => VT.[Friend]get_contentHandler(&this, oHandler);

	public HRESULT putref_contentHandler(IUnknown* oHandler) mut => VT.[Friend]putref_contentHandler(&this, oHandler);

	public HRESULT get_dtdHandler(IUnknown** oHandler) mut => VT.[Friend]get_dtdHandler(&this, oHandler);

	public HRESULT putref_dtdHandler(IUnknown* oHandler) mut => VT.[Friend]putref_dtdHandler(&this, oHandler);

	public HRESULT get_errorHandler(IUnknown** oHandler) mut => VT.[Friend]get_errorHandler(&this, oHandler);

	public HRESULT putref_errorHandler(IUnknown* oHandler) mut => VT.[Friend]putref_errorHandler(&this, oHandler);
}

[CRepr]struct IXMLDOMSchemaCollection2 : IXMLDOMSchemaCollection
{
	public new const Guid IID = .(0x50ea08b0, 0xdd1b, 0x4664, 0x9a, 0x50, 0xc2, 0xf4, 0x0f, 0x4b, 0xd7, 0x9a);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IXMLDOMSchemaCollection.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self) validate;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16 validateOnLoad) put_validateOnLoad;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16* validateOnLoad) get_validateOnLoad;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR namespaceURI, ISchema** schema) getSchema;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IXMLDOMNode* node, ISchemaItem** item) getDeclaration;
	}


	public HRESULT validate() mut => VT.[Friend]validate(&this);

	public HRESULT put_validateOnLoad(int16 validateOnLoad) mut => VT.[Friend]put_validateOnLoad(&this, validateOnLoad);

	public HRESULT get_validateOnLoad(int16* validateOnLoad) mut => VT.[Friend]get_validateOnLoad(&this, validateOnLoad);

	public HRESULT getSchema(BSTR namespaceURI, ISchema** schema) mut => VT.[Friend]getSchema(&this, namespaceURI, schema);

	public HRESULT getDeclaration(IXMLDOMNode* node, ISchemaItem** item) mut => VT.[Friend]getDeclaration(&this, node, item);
}

[CRepr]struct ISchemaStringCollection : IDispatch
{
	public new const Guid IID = .(0x50ea08b1, 0xdd1b, 0x4664, 0x9a, 0x50, 0xc2, 0xf4, 0x0f, 0x4b, 0xd7, 0x9a);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 index, BSTR* bstr) get_item;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* length) get_length;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IUnknown** ppunk) get__newEnum;
	}


	public HRESULT get_item(int32 index, BSTR* bstr) mut => VT.[Friend]get_item(&this, index, bstr);

	public HRESULT get_length(int32* length) mut => VT.[Friend]get_length(&this, length);

	public HRESULT get__newEnum(IUnknown** ppunk) mut => VT.[Friend]get__newEnum(&this, ppunk);
}

[CRepr]struct ISchemaItemCollection : IDispatch
{
	public new const Guid IID = .(0x50ea08b2, 0xdd1b, 0x4664, 0x9a, 0x50, 0xc2, 0xf4, 0x0f, 0x4b, 0xd7, 0x9a);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 index, ISchemaItem** item) get_item;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR name, ISchemaItem** item) itemByName;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR name, BSTR namespaceURI, ISchemaItem** item) itemByQName;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* length) get_length;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IUnknown** ppunk) get__newEnum;
	}


	public HRESULT get_item(int32 index, ISchemaItem** item) mut => VT.[Friend]get_item(&this, index, item);

	public HRESULT itemByName(BSTR name, ISchemaItem** item) mut => VT.[Friend]itemByName(&this, name, item);

	public HRESULT itemByQName(BSTR name, BSTR namespaceURI, ISchemaItem** item) mut => VT.[Friend]itemByQName(&this, name, namespaceURI, item);

	public HRESULT get_length(int32* length) mut => VT.[Friend]get_length(&this, length);

	public HRESULT get__newEnum(IUnknown** ppunk) mut => VT.[Friend]get__newEnum(&this, ppunk);
}

[CRepr]struct ISchemaItem : IDispatch
{
	public new const Guid IID = .(0x50ea08b3, 0xdd1b, 0x4664, 0x9a, 0x50, 0xc2, 0xf4, 0x0f, 0x4b, 0xd7, 0x9a);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* name) get_name;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* namespaceURI) get_namespaceURI;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, ISchema** schema) get_schema;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* id) get_id;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, SOMITEMTYPE* itemType) get_itemType;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IVBSAXAttributes** attributes) get_unhandledAttributes;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IUnknown* annotationSink, int16* isWritten) writeAnnotation;
	}


	public HRESULT get_name(BSTR* name) mut => VT.[Friend]get_name(&this, name);

	public HRESULT get_namespaceURI(BSTR* namespaceURI) mut => VT.[Friend]get_namespaceURI(&this, namespaceURI);

	public HRESULT get_schema(ISchema** schema) mut => VT.[Friend]get_schema(&this, schema);

	public HRESULT get_id(BSTR* id) mut => VT.[Friend]get_id(&this, id);

	public HRESULT get_itemType(SOMITEMTYPE* itemType) mut => VT.[Friend]get_itemType(&this, itemType);

	public HRESULT get_unhandledAttributes(IVBSAXAttributes** attributes) mut => VT.[Friend]get_unhandledAttributes(&this, attributes);

	public HRESULT writeAnnotation(IUnknown* annotationSink, int16* isWritten) mut => VT.[Friend]writeAnnotation(&this, annotationSink, isWritten);
}

[CRepr]struct ISchema : ISchemaItem
{
	public new const Guid IID = .(0x50ea08b4, 0xdd1b, 0x4664, 0x9a, 0x50, 0xc2, 0xf4, 0x0f, 0x4b, 0xd7, 0x9a);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : ISchemaItem.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* targetNamespace) get_targetNamespace;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* version) get_version;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, ISchemaItemCollection** types) get_types;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, ISchemaItemCollection** elements) get_elements;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, ISchemaItemCollection** attributes) get_attributes;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, ISchemaItemCollection** attributeGroups) get_attributeGroups;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, ISchemaItemCollection** modelGroups) get_modelGroups;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, ISchemaItemCollection** notations) get_notations;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, ISchemaStringCollection** schemaLocations) get_schemaLocations;
	}


	public HRESULT get_targetNamespace(BSTR* targetNamespace) mut => VT.[Friend]get_targetNamespace(&this, targetNamespace);

	public HRESULT get_version(BSTR* version) mut => VT.[Friend]get_version(&this, version);

	public HRESULT get_types(ISchemaItemCollection** types) mut => VT.[Friend]get_types(&this, types);

	public HRESULT get_elements(ISchemaItemCollection** elements) mut => VT.[Friend]get_elements(&this, elements);

	public HRESULT get_attributes(ISchemaItemCollection** attributes) mut => VT.[Friend]get_attributes(&this, attributes);

	public HRESULT get_attributeGroups(ISchemaItemCollection** attributeGroups) mut => VT.[Friend]get_attributeGroups(&this, attributeGroups);

	public HRESULT get_modelGroups(ISchemaItemCollection** modelGroups) mut => VT.[Friend]get_modelGroups(&this, modelGroups);

	public HRESULT get_notations(ISchemaItemCollection** notations) mut => VT.[Friend]get_notations(&this, notations);

	public HRESULT get_schemaLocations(ISchemaStringCollection** schemaLocations) mut => VT.[Friend]get_schemaLocations(&this, schemaLocations);
}

[CRepr]struct ISchemaParticle : ISchemaItem
{
	public new const Guid IID = .(0x50ea08b5, 0xdd1b, 0x4664, 0x9a, 0x50, 0xc2, 0xf4, 0x0f, 0x4b, 0xd7, 0x9a);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : ISchemaItem.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* minOccurs) get_minOccurs;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* maxOccurs) get_maxOccurs;
	}


	public HRESULT get_minOccurs(VARIANT* minOccurs) mut => VT.[Friend]get_minOccurs(&this, minOccurs);

	public HRESULT get_maxOccurs(VARIANT* maxOccurs) mut => VT.[Friend]get_maxOccurs(&this, maxOccurs);
}

[CRepr]struct ISchemaAttribute : ISchemaItem
{
	public new const Guid IID = .(0x50ea08b6, 0xdd1b, 0x4664, 0x9a, 0x50, 0xc2, 0xf4, 0x0f, 0x4b, 0xd7, 0x9a);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : ISchemaItem.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, ISchemaType** type) get_type;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, ISchemaComplexType** @scope) get_scope;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* defaultValue) get_defaultValue;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* fixedValue) get_fixedValue;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, SCHEMAUSE* use) get_use;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16* reference) get_isReference;
	}


	public HRESULT get_type(ISchemaType** type) mut => VT.[Friend]get_type(&this, type);

	public HRESULT get_scope(ISchemaComplexType** @scope) mut => VT.[Friend]get_scope(&this, @scope);

	public HRESULT get_defaultValue(BSTR* defaultValue) mut => VT.[Friend]get_defaultValue(&this, defaultValue);

	public HRESULT get_fixedValue(BSTR* fixedValue) mut => VT.[Friend]get_fixedValue(&this, fixedValue);

	public HRESULT get_use(SCHEMAUSE* use) mut => VT.[Friend]get_use(&this, use);

	public HRESULT get_isReference(int16* reference) mut => VT.[Friend]get_isReference(&this, reference);
}

[CRepr]struct ISchemaElement : ISchemaParticle
{
	public new const Guid IID = .(0x50ea08b7, 0xdd1b, 0x4664, 0x9a, 0x50, 0xc2, 0xf4, 0x0f, 0x4b, 0xd7, 0x9a);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : ISchemaParticle.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, ISchemaType** type) get_type;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, ISchemaComplexType** @scope) get_scope;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* defaultValue) get_defaultValue;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* fixedValue) get_fixedValue;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16* nillable) get_isNillable;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, ISchemaItemCollection** constraints) get_identityConstraints;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, ISchemaElement** element) get_substitutionGroup;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, SCHEMADERIVATIONMETHOD* exclusions) get_substitutionGroupExclusions;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, SCHEMADERIVATIONMETHOD* disallowed) get_disallowedSubstitutions;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16* @abstract) get_isAbstract;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16* reference) get_isReference;
	}


	public HRESULT get_type(ISchemaType** type) mut => VT.[Friend]get_type(&this, type);

	public HRESULT get_scope(ISchemaComplexType** @scope) mut => VT.[Friend]get_scope(&this, @scope);

	public HRESULT get_defaultValue(BSTR* defaultValue) mut => VT.[Friend]get_defaultValue(&this, defaultValue);

	public HRESULT get_fixedValue(BSTR* fixedValue) mut => VT.[Friend]get_fixedValue(&this, fixedValue);

	public HRESULT get_isNillable(int16* nillable) mut => VT.[Friend]get_isNillable(&this, nillable);

	public HRESULT get_identityConstraints(ISchemaItemCollection** constraints) mut => VT.[Friend]get_identityConstraints(&this, constraints);

	public HRESULT get_substitutionGroup(ISchemaElement** element) mut => VT.[Friend]get_substitutionGroup(&this, element);

	public HRESULT get_substitutionGroupExclusions(SCHEMADERIVATIONMETHOD* exclusions) mut => VT.[Friend]get_substitutionGroupExclusions(&this, exclusions);

	public HRESULT get_disallowedSubstitutions(SCHEMADERIVATIONMETHOD* disallowed) mut => VT.[Friend]get_disallowedSubstitutions(&this, disallowed);

	public HRESULT get_isAbstract(int16* @abstract) mut => VT.[Friend]get_isAbstract(&this, @abstract);

	public HRESULT get_isReference(int16* reference) mut => VT.[Friend]get_isReference(&this, reference);
}

[CRepr]struct ISchemaType : ISchemaItem
{
	public new const Guid IID = .(0x50ea08b8, 0xdd1b, 0x4664, 0x9a, 0x50, 0xc2, 0xf4, 0x0f, 0x4b, 0xd7, 0x9a);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : ISchemaItem.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, ISchemaItemCollection** baseTypes) get_baseTypes;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, SCHEMADERIVATIONMETHOD* final) get_final;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, SCHEMATYPEVARIETY* variety) get_variety;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, SCHEMADERIVATIONMETHOD* derivedBy) get_derivedBy;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR data, int16* valid) isValid;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* minExclusive) get_minExclusive;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* minInclusive) get_minInclusive;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* maxExclusive) get_maxExclusive;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* maxInclusive) get_maxInclusive;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* totalDigits) get_totalDigits;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* fractionDigits) get_fractionDigits;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* length) get_length;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* minLength) get_minLength;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* maxLength) get_maxLength;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, ISchemaStringCollection** enumeration) get_enumeration;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, SCHEMAWHITESPACE* whitespace) get_whitespace;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, ISchemaStringCollection** patterns) get_patterns;
	}


	public HRESULT get_baseTypes(ISchemaItemCollection** baseTypes) mut => VT.[Friend]get_baseTypes(&this, baseTypes);

	public HRESULT get_final(SCHEMADERIVATIONMETHOD* final) mut => VT.[Friend]get_final(&this, final);

	public HRESULT get_variety(SCHEMATYPEVARIETY* variety) mut => VT.[Friend]get_variety(&this, variety);

	public HRESULT get_derivedBy(SCHEMADERIVATIONMETHOD* derivedBy) mut => VT.[Friend]get_derivedBy(&this, derivedBy);

	public HRESULT isValid(BSTR data, int16* valid) mut => VT.[Friend]isValid(&this, data, valid);

	public HRESULT get_minExclusive(BSTR* minExclusive) mut => VT.[Friend]get_minExclusive(&this, minExclusive);

	public HRESULT get_minInclusive(BSTR* minInclusive) mut => VT.[Friend]get_minInclusive(&this, minInclusive);

	public HRESULT get_maxExclusive(BSTR* maxExclusive) mut => VT.[Friend]get_maxExclusive(&this, maxExclusive);

	public HRESULT get_maxInclusive(BSTR* maxInclusive) mut => VT.[Friend]get_maxInclusive(&this, maxInclusive);

	public HRESULT get_totalDigits(VARIANT* totalDigits) mut => VT.[Friend]get_totalDigits(&this, totalDigits);

	public HRESULT get_fractionDigits(VARIANT* fractionDigits) mut => VT.[Friend]get_fractionDigits(&this, fractionDigits);

	public HRESULT get_length(VARIANT* length) mut => VT.[Friend]get_length(&this, length);

	public HRESULT get_minLength(VARIANT* minLength) mut => VT.[Friend]get_minLength(&this, minLength);

	public HRESULT get_maxLength(VARIANT* maxLength) mut => VT.[Friend]get_maxLength(&this, maxLength);

	public HRESULT get_enumeration(ISchemaStringCollection** enumeration) mut => VT.[Friend]get_enumeration(&this, enumeration);

	public HRESULT get_whitespace(SCHEMAWHITESPACE* whitespace) mut => VT.[Friend]get_whitespace(&this, whitespace);

	public HRESULT get_patterns(ISchemaStringCollection** patterns) mut => VT.[Friend]get_patterns(&this, patterns);
}

[CRepr]struct ISchemaComplexType : ISchemaType
{
	public new const Guid IID = .(0x50ea08b9, 0xdd1b, 0x4664, 0x9a, 0x50, 0xc2, 0xf4, 0x0f, 0x4b, 0xd7, 0x9a);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : ISchemaType.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16* @abstract) get_isAbstract;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, ISchemaAny** anyAttribute) get_anyAttribute;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, ISchemaItemCollection** attributes) get_attributes;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, SCHEMACONTENTTYPE* contentType) get_contentType;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, ISchemaModelGroup** contentModel) get_contentModel;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, SCHEMADERIVATIONMETHOD* prohibited) get_prohibitedSubstitutions;
	}


	public HRESULT get_isAbstract(int16* @abstract) mut => VT.[Friend]get_isAbstract(&this, @abstract);

	public HRESULT get_anyAttribute(ISchemaAny** anyAttribute) mut => VT.[Friend]get_anyAttribute(&this, anyAttribute);

	public HRESULT get_attributes(ISchemaItemCollection** attributes) mut => VT.[Friend]get_attributes(&this, attributes);

	public HRESULT get_contentType(SCHEMACONTENTTYPE* contentType) mut => VT.[Friend]get_contentType(&this, contentType);

	public HRESULT get_contentModel(ISchemaModelGroup** contentModel) mut => VT.[Friend]get_contentModel(&this, contentModel);

	public HRESULT get_prohibitedSubstitutions(SCHEMADERIVATIONMETHOD* prohibited) mut => VT.[Friend]get_prohibitedSubstitutions(&this, prohibited);
}

[CRepr]struct ISchemaAttributeGroup : ISchemaItem
{
	public new const Guid IID = .(0x50ea08ba, 0xdd1b, 0x4664, 0x9a, 0x50, 0xc2, 0xf4, 0x0f, 0x4b, 0xd7, 0x9a);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : ISchemaItem.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, ISchemaAny** anyAttribute) get_anyAttribute;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, ISchemaItemCollection** attributes) get_attributes;
	}


	public HRESULT get_anyAttribute(ISchemaAny** anyAttribute) mut => VT.[Friend]get_anyAttribute(&this, anyAttribute);

	public HRESULT get_attributes(ISchemaItemCollection** attributes) mut => VT.[Friend]get_attributes(&this, attributes);
}

[CRepr]struct ISchemaModelGroup : ISchemaParticle
{
	public new const Guid IID = .(0x50ea08bb, 0xdd1b, 0x4664, 0x9a, 0x50, 0xc2, 0xf4, 0x0f, 0x4b, 0xd7, 0x9a);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : ISchemaParticle.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, ISchemaItemCollection** particles) get_particles;
	}


	public HRESULT get_particles(ISchemaItemCollection** particles) mut => VT.[Friend]get_particles(&this, particles);
}

[CRepr]struct ISchemaAny : ISchemaParticle
{
	public new const Guid IID = .(0x50ea08bc, 0xdd1b, 0x4664, 0x9a, 0x50, 0xc2, 0xf4, 0x0f, 0x4b, 0xd7, 0x9a);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : ISchemaParticle.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, ISchemaStringCollection** namespaces) get_namespaces;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, SCHEMAPROCESSCONTENTS* processContents) get_processContents;
	}


	public HRESULT get_namespaces(ISchemaStringCollection** namespaces) mut => VT.[Friend]get_namespaces(&this, namespaces);

	public HRESULT get_processContents(SCHEMAPROCESSCONTENTS* processContents) mut => VT.[Friend]get_processContents(&this, processContents);
}

[CRepr]struct ISchemaIdentityConstraint : ISchemaItem
{
	public new const Guid IID = .(0x50ea08bd, 0xdd1b, 0x4664, 0x9a, 0x50, 0xc2, 0xf4, 0x0f, 0x4b, 0xd7, 0x9a);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : ISchemaItem.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* selector) get_selector;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, ISchemaStringCollection** fields) get_fields;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, ISchemaIdentityConstraint** key) get_referencedKey;
	}


	public HRESULT get_selector(BSTR* selector) mut => VT.[Friend]get_selector(&this, selector);

	public HRESULT get_fields(ISchemaStringCollection** fields) mut => VT.[Friend]get_fields(&this, fields);

	public HRESULT get_referencedKey(ISchemaIdentityConstraint** key) mut => VT.[Friend]get_referencedKey(&this, key);
}

[CRepr]struct ISchemaNotation : ISchemaItem
{
	public new const Guid IID = .(0x50ea08be, 0xdd1b, 0x4664, 0x9a, 0x50, 0xc2, 0xf4, 0x0f, 0x4b, 0xd7, 0x9a);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : ISchemaItem.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* uri) get_systemIdentifier;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* uri) get_publicIdentifier;
	}


	public HRESULT get_systemIdentifier(BSTR* uri) mut => VT.[Friend]get_systemIdentifier(&this, uri);

	public HRESULT get_publicIdentifier(BSTR* uri) mut => VT.[Friend]get_publicIdentifier(&this, uri);
}

[CRepr]struct IXMLHTTPRequest2Callback : IUnknown
{
	public new const Guid IID = .(0xa44a9299, 0xe321, 0x40de, 0x88, 0x66, 0x34, 0x1b, 0x41, 0x66, 0x91, 0x62);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IUnknown.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IXMLHTTPRequest2* pXHR, PWSTR pwszRedirectUrl) OnRedirect;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IXMLHTTPRequest2* pXHR, uint32 dwStatus, PWSTR pwszStatus) OnHeadersAvailable;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IXMLHTTPRequest2* pXHR, ISequentialStream* pResponseStream) OnDataAvailable;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IXMLHTTPRequest2* pXHR, ISequentialStream* pResponseStream) OnResponseReceived;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IXMLHTTPRequest2* pXHR, HRESULT hrError) OnError;
	}


	public HRESULT OnRedirect(IXMLHTTPRequest2* pXHR, PWSTR pwszRedirectUrl) mut => VT.[Friend]OnRedirect(&this, pXHR, pwszRedirectUrl);

	public HRESULT OnHeadersAvailable(IXMLHTTPRequest2* pXHR, uint32 dwStatus, PWSTR pwszStatus) mut => VT.[Friend]OnHeadersAvailable(&this, pXHR, dwStatus, pwszStatus);

	public HRESULT OnDataAvailable(IXMLHTTPRequest2* pXHR, ISequentialStream* pResponseStream) mut => VT.[Friend]OnDataAvailable(&this, pXHR, pResponseStream);

	public HRESULT OnResponseReceived(IXMLHTTPRequest2* pXHR, ISequentialStream* pResponseStream) mut => VT.[Friend]OnResponseReceived(&this, pXHR, pResponseStream);

	public HRESULT OnError(IXMLHTTPRequest2* pXHR, HRESULT hrError) mut => VT.[Friend]OnError(&this, pXHR, hrError);
}

[CRepr]struct IXMLHTTPRequest2 : IUnknown
{
	public new const Guid IID = .(0xe5d37dc0, 0x552a, 0x4d52, 0x9c, 0xc0, 0xa1, 0x4d, 0x54, 0x6f, 0xbd, 0x04);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IUnknown.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, PWSTR pwszMethod, PWSTR pwszUrl, IXMLHTTPRequest2Callback* pStatusCallback, PWSTR pwszUserName, PWSTR pwszPassword, PWSTR pwszProxyUserName, PWSTR pwszProxyPassword) Open;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, ISequentialStream* pBody, uint64 cbBody) Send;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self) Abort;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, XHR_COOKIE* pCookie, uint32* pdwCookieState) SetCookie;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, ISequentialStream* pSequentialStream) SetCustomResponseStream;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, XHR_PROPERTY eProperty, uint64 ullValue) SetProperty;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, PWSTR pwszHeader, PWSTR pwszValue) SetRequestHeader;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint16** ppwszHeaders) GetAllResponseHeaders;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, PWSTR pwszUrl, PWSTR pwszName, uint32 dwFlags, uint32* pcCookies, XHR_COOKIE** ppCookies) GetCookie;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, PWSTR pwszHeader, uint16** ppwszValue) GetResponseHeader;
	}


	public HRESULT Open(PWSTR pwszMethod, PWSTR pwszUrl, IXMLHTTPRequest2Callback* pStatusCallback, PWSTR pwszUserName, PWSTR pwszPassword, PWSTR pwszProxyUserName, PWSTR pwszProxyPassword) mut => VT.[Friend]Open(&this, pwszMethod, pwszUrl, pStatusCallback, pwszUserName, pwszPassword, pwszProxyUserName, pwszProxyPassword);

	public HRESULT Send(ISequentialStream* pBody, uint64 cbBody) mut => VT.[Friend]Send(&this, pBody, cbBody);

	public HRESULT Abort() mut => VT.[Friend]Abort(&this);

	public HRESULT SetCookie(XHR_COOKIE* pCookie, uint32* pdwCookieState) mut => VT.[Friend]SetCookie(&this, pCookie, pdwCookieState);

	public HRESULT SetCustomResponseStream(ISequentialStream* pSequentialStream) mut => VT.[Friend]SetCustomResponseStream(&this, pSequentialStream);

	public HRESULT SetProperty(XHR_PROPERTY eProperty, uint64 ullValue) mut => VT.[Friend]SetProperty(&this, eProperty, ullValue);

	public HRESULT SetRequestHeader(PWSTR pwszHeader, PWSTR pwszValue) mut => VT.[Friend]SetRequestHeader(&this, pwszHeader, pwszValue);

	public HRESULT GetAllResponseHeaders(uint16** ppwszHeaders) mut => VT.[Friend]GetAllResponseHeaders(&this, ppwszHeaders);

	public HRESULT GetCookie(PWSTR pwszUrl, PWSTR pwszName, uint32 dwFlags, uint32* pcCookies, XHR_COOKIE** ppCookies) mut => VT.[Friend]GetCookie(&this, pwszUrl, pwszName, dwFlags, pcCookies, ppCookies);

	public HRESULT GetResponseHeader(PWSTR pwszHeader, uint16** ppwszValue) mut => VT.[Friend]GetResponseHeader(&this, pwszHeader, ppwszValue);
}

[CRepr]struct IXMLHTTPRequest3Callback : IXMLHTTPRequest2Callback
{
	public new const Guid IID = .(0xb9e57830, 0x8c6c, 0x4a6f, 0x9c, 0x13, 0x47, 0x77, 0x2b, 0xb0, 0x47, 0xbb);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IXMLHTTPRequest2Callback.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IXMLHTTPRequest3* pXHR, uint32 dwCertificateErrors, uint32 cServerCertificateChain, XHR_CERT* rgServerCertificateChain) OnServerCertificateReceived;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IXMLHTTPRequest3* pXHR, uint32 cIssuerList, uint16** rgpwszIssuerList) OnClientCertificateRequested;
	}


	public HRESULT OnServerCertificateReceived(IXMLHTTPRequest3* pXHR, uint32 dwCertificateErrors, uint32 cServerCertificateChain, XHR_CERT* rgServerCertificateChain) mut => VT.[Friend]OnServerCertificateReceived(&this, pXHR, dwCertificateErrors, cServerCertificateChain, rgServerCertificateChain);

	public HRESULT OnClientCertificateRequested(IXMLHTTPRequest3* pXHR, uint32 cIssuerList, uint16** rgpwszIssuerList) mut => VT.[Friend]OnClientCertificateRequested(&this, pXHR, cIssuerList, rgpwszIssuerList);
}

[CRepr]struct IXMLHTTPRequest3 : IXMLHTTPRequest2
{
	public new const Guid IID = .(0xa1c9feee, 0x0617, 0x4f23, 0x9d, 0x58, 0x89, 0x61, 0xea, 0x43, 0x56, 0x7c);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IXMLHTTPRequest2.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32 cbClientCertificateHash, uint8* pbClientCertificateHash, PWSTR pwszPin) SetClientCertificate;
	}


	public HRESULT SetClientCertificate(uint32 cbClientCertificateHash, uint8* pbClientCertificateHash, PWSTR pwszPin) mut => VT.[Friend]SetClientCertificate(&this, cbClientCertificateHash, pbClientCertificateHash, pwszPin);
}

#endregion
