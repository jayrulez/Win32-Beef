using Win32.System.Com;
using Win32.Foundation;
using Win32.System.Ole;
using Win32.Graphics.Gdi;
using Win32.UI.Input.Ime;
using Win32.Graphics.Dxgi.Common;
using Win32.System.WinRT;
using Win32.UI.WindowsAndMessaging;
using Win32.System.Diagnostics.Debug;
using Win32.Graphics.DirectDraw;
using System;

namespace Win32.Web.MsHtml;

#region Constants
public static
{
	public const uint32 DISPID_STYLESHEETSCOLLECTION_NAMED_MAX = 1999999;
	public const int32 DISPID_AMBIENT_OFFLINEIFNOTCONNECTED = -5501;
	public const int32 DISPID_AMBIENT_SILENT = -5502;
	public const Guid SID_SEditCommandTarget = .(0x3050f4b5, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
	public const Guid CGID_EditStateCommands = .(0x3050f4b6, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
	public const Guid SID_SHTMLEditHost = .(0x3050f6a0, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
	public const Guid SID_SHTMLEditServices = .(0x3050f7f9, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
	public const uint32 COOKIEACTION_NONE = 0;
	public const uint32 COOKIEACTION_ACCEPT = 1;
	public const uint32 COOKIEACTION_REJECT = 2;
	public const uint32 COOKIEACTION_DOWNGRADE = 4;
	public const uint32 COOKIEACTION_LEASH = 8;
	public const uint32 COOKIEACTION_SUPPRESS = 16;
	public const uint32 COOKIEACTION_READ = 32;
	public const uint32 PRIVACY_URLISTOPLEVEL = 65536;
	public const uint32 PRIVACY_URLHASCOMPACTPOLICY = 131072;
	public const uint32 PRIVACY_URLHASPOSTDATA = 524288;
	public const uint32 PRIVACY_URLHASPOLICYREFLINK = 1048576;
	public const uint32 PRIVACY_URLHASPOLICYREFHEADER = 2097152;
	public const uint32 PRIVACY_URLHASP3PHEADER = 4194304;
	public const uint32 DEBUGCALLBACKNOTIFICATION_TIMEOUT = 1;
	public const uint32 DEBUGCALLBACKNOTIFICATION_INTERVAL = 2;
	public const uint32 DEBUGCALLBACKNOTIFICATION_IMMEDIATE = 4;
	public const uint32 DEBUGCALLBACKNOTIFICATION_ANIMATIONFRAME = 8;
	public const uint32 DEBUGCALLBACKNOTIFICATION_DOMEVENT = 16;
	public const uint32 DEBUGDOMEVENTPROPAGATIONSTATUS_DEFAULTCANCELED = 1;
	public const uint32 DEBUGDOMEVENTPROPAGATIONSTATUS_STOPIMMEDIATEPROPAGATION = 2;
	public const uint32 DEBUGDOMEVENTPROPAGATIONSTATUS_STOPPROPAGATION = 4;
	public const uint32 DISPID_BEFORENAVIGATE = 100;
	public const uint32 DISPID_NAVIGATECOMPLETE = 101;
	public const uint32 DISPID_STATUSTEXTCHANGE = 102;
	public const uint32 DISPID_QUIT = 103;
	public const uint32 DISPID_DOWNLOADCOMPLETE = 104;
	public const uint32 DISPID_COMMANDSTATECHANGE = 105;
	public const uint32 DISPID_DOWNLOADBEGIN = 106;
	public const uint32 DISPID_NEWWINDOW = 107;
	public const uint32 DISPID_PROGRESSCHANGE = 108;
	public const uint32 DISPID_WINDOWMOVE = 109;
	public const uint32 DISPID_WINDOWRESIZE = 110;
	public const uint32 DISPID_WINDOWACTIVATE = 111;
	public const uint32 DISPID_PROPERTYCHANGE = 112;
	public const uint32 DISPID_TITLECHANGE = 113;
	public const uint32 DISPID_TITLEICONCHANGE = 114;
	public const uint32 DISPID_FRAMEBEFORENAVIGATE = 200;
	public const uint32 DISPID_FRAMENAVIGATECOMPLETE = 201;
	public const uint32 DISPID_FRAMENEWWINDOW = 204;
	public const uint32 DISPID_BEFORENAVIGATE2 = 250;
	public const uint32 DISPID_NEWWINDOW2 = 251;
	public const uint32 DISPID_NAVIGATECOMPLETE2 = 252;
	public const uint32 DISPID_ONQUIT = 253;
	public const uint32 DISPID_ONVISIBLE = 254;
	public const uint32 DISPID_ONTOOLBAR = 255;
	public const uint32 DISPID_ONMENUBAR = 256;
	public const uint32 DISPID_ONSTATUSBAR = 257;
	public const uint32 DISPID_ONFULLSCREEN = 258;
	public const uint32 DISPID_DOCUMENTCOMPLETE = 259;
	public const uint32 DISPID_ONTHEATERMODE = 260;
	public const uint32 DISPID_ONADDRESSBAR = 261;
	public const uint32 DISPID_WINDOWSETRESIZABLE = 262;
	public const uint32 DISPID_WINDOWCLOSING = 263;
	public const uint32 DISPID_WINDOWSETLEFT = 264;
	public const uint32 DISPID_WINDOWSETTOP = 265;
	public const uint32 DISPID_WINDOWSETWIDTH = 266;
	public const uint32 DISPID_WINDOWSETHEIGHT = 267;
	public const uint32 DISPID_CLIENTTOHOSTWINDOW = 268;
	public const uint32 DISPID_SETSECURELOCKICON = 269;
	public const uint32 DISPID_FILEDOWNLOAD = 270;
	public const uint32 DISPID_NAVIGATEERROR = 271;
	public const uint32 DISPID_PRIVACYIMPACTEDSTATECHANGE = 272;
	public const uint32 DISPID_NEWWINDOW3 = 273;
	public const uint32 DISPID_VIEWUPDATE = 281;
	public const uint32 DISPID_SETPHISHINGFILTERSTATUS = 282;
	public const uint32 DISPID_WINDOWSTATECHANGED = 283;
	public const uint32 DISPID_NEWPROCESS = 284;
	public const uint32 DISPID_THIRDPARTYURLBLOCKED = 285;
	public const uint32 DISPID_REDIRECTXDOMAINBLOCKED = 286;
	public const uint32 DISPID_WEBWORKERSTARTED = 288;
	public const uint32 DISPID_WEBWORKERFINISHED = 289;
	public const uint32 DISPID_BEFORESCRIPTEXECUTE = 290;
	public const uint32 DISPID_PRINTTEMPLATEINSTANTIATION = 225;
	public const uint32 DISPID_PRINTTEMPLATETEARDOWN = 226;
	public const uint32 DISPID_UPDATEPAGESTATUS = 227;
	public const uint32 DISPID_WINDOWREGISTERED = 200;
	public const uint32 DISPID_WINDOWREVOKED = 201;
	public const uint32 DISPID_RESETFIRSTBOOTMODE = 1;
	public const uint32 DISPID_RESETSAFEMODE = 2;
	public const uint32 DISPID_REFRESHOFFLINEDESKTOP = 3;
	public const uint32 DISPID_ADDFAVORITE = 4;
	public const uint32 DISPID_ADDCHANNEL = 5;
	public const uint32 DISPID_ADDDESKTOPCOMPONENT = 6;
	public const uint32 DISPID_ISSUBSCRIBED = 7;
	public const uint32 DISPID_NAVIGATEANDFIND = 8;
	public const uint32 DISPID_IMPORTEXPORTFAVORITES = 9;
	public const uint32 DISPID_AUTOCOMPLETESAVEFORM = 10;
	public const uint32 DISPID_AUTOSCAN = 11;
	public const uint32 DISPID_AUTOCOMPLETEATTACH = 12;
	public const uint32 DISPID_SHOWBROWSERUI = 13;
	public const uint32 DISPID_ADDSEARCHPROVIDER = 14;
	public const uint32 DISPID_RUNONCESHOWN = 15;
	public const uint32 DISPID_SKIPRUNONCE = 16;
	public const uint32 DISPID_CUSTOMIZESETTINGS = 17;
	public const uint32 DISPID_SQMENABLED = 18;
	public const uint32 DISPID_PHISHINGENABLED = 19;
	public const uint32 DISPID_BRANDIMAGEURI = 20;
	public const uint32 DISPID_SKIPTABSWELCOME = 21;
	public const uint32 DISPID_DIAGNOSECONNECTION = 22;
	public const uint32 DISPID_CUSTOMIZECLEARTYPE = 23;
	public const uint32 DISPID_ISSEARCHPROVIDERINSTALLED = 24;
	public const uint32 DISPID_ISSEARCHMIGRATED = 25;
	public const uint32 DISPID_DEFAULTSEARCHPROVIDER = 26;
	public const uint32 DISPID_RUNONCEREQUIREDSETTINGSCOMPLETE = 27;
	public const uint32 DISPID_RUNONCEHASSHOWN = 28;
	public const uint32 DISPID_SEARCHGUIDEURL = 29;
	public const uint32 DISPID_ADDSERVICE = 30;
	public const uint32 DISPID_ISSERVICEINSTALLED = 31;
	public const uint32 DISPID_ADDTOFAVORITESBAR = 32;
	public const uint32 DISPID_BUILDNEWTABPAGE = 33;
	public const uint32 DISPID_SETRECENTLYCLOSEDVISIBLE = 34;
	public const uint32 DISPID_SETACTIVITIESVISIBLE = 35;
	public const uint32 DISPID_CONTENTDISCOVERYRESET = 36;
	public const uint32 DISPID_INPRIVATEFILTERINGENABLED = 37;
	public const uint32 DISPID_SUGGESTEDSITESENABLED = 38;
	public const uint32 DISPID_ENABLESUGGESTEDSITES = 39;
	public const uint32 DISPID_NAVIGATETOSUGGESTEDSITES = 40;
	public const uint32 DISPID_SHOWTABSHELP = 41;
	public const uint32 DISPID_SHOWINPRIVATEHELP = 42;
	public const uint32 DISPID_ISSITEMODE = 43;
	public const uint32 DISPID_SETSITEMODEICONOVERLAY = 44;
	public const uint32 DISPID_CLEARSITEMODEICONOVERLAY = 45;
	public const uint32 DISPID_UPDATETHUMBNAILBUTTON = 46;
	public const uint32 DISPID_SETTHUMBNAILBUTTONS = 47;
	public const uint32 DISPID_ADDTHUMBNAILBUTTONS = 48;
	public const uint32 DISPID_ADDSITEMODE = 49;
	public const uint32 DISPID_SETSITEMODEPROPERTIES = 50;
	public const uint32 DISPID_SITEMODECREATEJUMPLIST = 51;
	public const uint32 DISPID_SITEMODEADDJUMPLISTITEM = 52;
	public const uint32 DISPID_SITEMODECLEARJUMPLIST = 53;
	public const uint32 DISPID_SITEMODEADDBUTTONSTYLE = 54;
	public const uint32 DISPID_SITEMODESHOWBUTTONSTYLE = 55;
	public const uint32 DISPID_SITEMODESHOWJUMPLIST = 56;
	public const uint32 DISPID_ADDTRACKINGPROTECTIONLIST = 57;
	public const uint32 DISPID_SITEMODEACTIVATE = 58;
	public const uint32 DISPID_ISSITEMODEFIRSTRUN = 59;
	public const uint32 DISPID_TRACKINGPROTECTIONENABLED = 60;
	public const uint32 DISPID_ACTIVEXFILTERINGENABLED = 61;
	public const uint32 DISPID_PROVISIONNETWORKS = 62;
	public const uint32 DISPID_REPORTSAFEURL = 63;
	public const uint32 DISPID_SITEMODEREFRESHBADGE = 64;
	public const uint32 DISPID_SITEMODECLEARBADGE = 65;
	public const uint32 DISPID_DIAGNOSECONNECTIONUILESS = 66;
	public const uint32 DISPID_LAUNCHNETWORKCLIENTHELP = 67;
	public const uint32 DISPID_CHANGEDEFAULTBROWSER = 68;
	public const uint32 DISPID_STOPPERIODICUPDATE = 69;
	public const uint32 DISPID_STARTPERIODICUPDATE = 70;
	public const uint32 DISPID_CLEARNOTIFICATION = 71;
	public const uint32 DISPID_ENABLENOTIFICATIONQUEUE = 72;
	public const uint32 DISPID_PINNEDSITESTATE = 73;
	public const uint32 DISPID_LAUNCHINTERNETOPTIONS = 74;
	public const uint32 DISPID_STARTPERIODICUPDATEBATCH = 75;
	public const uint32 DISPID_ENABLENOTIFICATIONQUEUESQUARE = 76;
	public const uint32 DISPID_ENABLENOTIFICATIONQUEUEWIDE = 77;
	public const uint32 DISPID_ENABLENOTIFICATIONQUEUELARGE = 78;
	public const uint32 DISPID_SCHEDULEDTILENOTIFICATION = 79;
	public const uint32 DISPID_REMOVESCHEDULEDTILENOTIFICATION = 80;
	public const uint32 DISPID_STARTBADGEUPDATE = 81;
	public const uint32 DISPID_STOPBADGEUPDATE = 82;
	public const uint32 DISPID_ISMETAREFERRERAVAILABLE = 83;
	public const uint32 DISPID_SETEXPERIMENTALFLAG = 84;
	public const uint32 DISPID_GETEXPERIMENTALFLAG = 85;
	public const uint32 DISPID_SETEXPERIMENTALVALUE = 86;
	public const uint32 DISPID_GETEXPERIMENTALVALUE = 87;
	public const uint32 DISPID_HASNEEDIEAUTOLAUNCHFLAG = 88;
	public const uint32 DISPID_GETNEEDIEAUTOLAUNCHFLAG = 89;
	public const uint32 DISPID_SETNEEDIEAUTOLAUNCHFLAG = 90;
	public const uint32 DISPID_LAUNCHIE = 91;
	public const uint32 DISPID_RESETEXPERIMENTALFLAGS = 92;
	public const uint32 DISPID_GETCVLISTDATA = 93;
	public const uint32 DISPID_GETCVLISTLOCALDATA = 94;
	public const uint32 DISPID_GETEMIELISTDATA = 95;
	public const uint32 DISPID_GETEMIELISTLOCALDATA = 96;
	public const uint32 DISPID_OPENFAVORITESPANE = 97;
	public const uint32 DISPID_OPENFAVORITESSETTINGS = 98;
	public const uint32 DISPID_LAUNCHINHVSI = 99;
	public const uint32 DISPID_GETNEEDHVSIAUTOLAUNCHFLAG = 100;
	public const uint32 DISPID_SETNEEDHVSIAUTOLAUNCHFLAG = 101;
	public const uint32 DISPID_HASNEEDHVSIAUTOLAUNCHFLAG = 102;
	public const uint32 DISPID_GETOSSKU = 103;
	public const uint32 DISPID_SETMSDEFAULTS = 104;
	public const uint32 DISPID_SHELLUIHELPERLAST = 105;
	public const uint32 DISPID_ADVANCEERROR = 10;
	public const uint32 DISPID_RETREATERROR = 11;
	public const uint32 DISPID_CANADVANCEERROR = 12;
	public const uint32 DISPID_CANRETREATERROR = 13;
	public const uint32 DISPID_GETERRORLINE = 14;
	public const uint32 DISPID_GETERRORCHAR = 15;
	public const uint32 DISPID_GETERRORCODE = 16;
	public const uint32 DISPID_GETERRORMSG = 17;
	public const uint32 DISPID_GETERRORURL = 18;
	public const uint32 DISPID_GETDETAILSSTATE = 19;
	public const uint32 DISPID_SETDETAILSSTATE = 20;
	public const uint32 DISPID_GETPERERRSTATE = 21;
	public const uint32 DISPID_SETPERERRSTATE = 22;
	public const uint32 DISPID_GETALWAYSSHOWLOCKSTATE = 23;
	public const uint32 DISPID_FAVSELECTIONCHANGE = 1;
	public const uint32 DISPID_SELECTIONCHANGE = 2;
	public const uint32 DISPID_DOUBLECLICK = 3;
	public const uint32 DISPID_INITIALIZED = 4;
	public const uint32 DISPID_MOVESELECTIONUP = 1;
	public const uint32 DISPID_MOVESELECTIONDOWN = 2;
	public const uint32 DISPID_RESETSORT = 3;
	public const uint32 DISPID_NEWFOLDER = 4;
	public const uint32 DISPID_SYNCHRONIZE = 5;
	public const uint32 DISPID_IMPORT = 6;
	public const uint32 DISPID_EXPORT = 7;
	public const uint32 DISPID_INVOKECONTEXTMENU = 8;
	public const uint32 DISPID_MOVESELECTIONTO = 9;
	public const uint32 DISPID_SUBSCRIPTIONSENABLED = 10;
	public const uint32 DISPID_CREATESUBSCRIPTION = 11;
	public const uint32 DISPID_DELETESUBSCRIPTION = 12;
	public const uint32 DISPID_SETROOT = 13;
	public const uint32 DISPID_ENUMOPTIONS = 14;
	public const uint32 DISPID_SELECTEDITEM = 15;
	public const uint32 DISPID_ROOT = 16;
	public const uint32 DISPID_DEPTH = 17;
	public const uint32 DISPID_MODE = 18;
	public const uint32 DISPID_FLAGS = 19;
	public const uint32 DISPID_TVFLAGS = 20;
	public const uint32 DISPID_NSCOLUMNS = 21;
	public const uint32 DISPID_COUNTVIEWTYPES = 22;
	public const uint32 DISPID_SETVIEWTYPE = 23;
	public const uint32 DISPID_SELECTEDITEMS = 24;
	public const uint32 DISPID_EXPAND = 25;
	public const uint32 DISPID_UNSELECTALL = 26;
	public const uint32 TF_NAVIGATE = 2142153644;
	public const uint32 REGSTR_VAL_SMOOTHSCROLL_DEF = 1;
	public const uint32 REGSTR_VAL_USEICM_DEF = 0;
	public const uint32 MAX_SEARCH_FORMAT_STRING = 255;
	public const uint32 REGSTR_VAL_SECURITYWARNONSEND_DEF = 1;
	public const uint32 REGSTR_VAL_SECURITYWARNONSENDALWAYS_DEF = 1;
	public const uint32 REGSTR_VAL_SECURITYWARNONVIEW_DEF = 1;
	public const uint32 REGSTR_VAL_SECURITYALLOWCOOKIES_DEF = 1;
	public const uint32 REGSTR_VAL_SECURITYWARNONZONECROSSING_DEF = 1;
	public const uint32 REGSTR_VAL_SECURITYWARNONBADCERTVIEWING_DEF = 1;
	public const uint32 REGSTR_VAL_SECURITYWARNONBADCERTSENDING_DEF = 1;
	public const uint32 REGSTR_VAL_SECURITYDISABLECACHINGOFSSLPAGES_DEF = 0;
	public const uint32 REGSTR_VAL_SECURITYACTIVEX_DEF = 1;
	public const uint32 REGSTR_VAL_SECURITYACTICEXSCRIPTS_DEF = 1;
	public const uint32 REGSTR_VAL_SECURITYJAVA_DEF = 1;
	public const uint32 REGSTR_VAL_JAVAJIT_DEF = 0;
	public const uint32 REGSTR_VAL_JAVALOGGING_DEF = 0;
	public const uint32 REGSTR_VAL_VISIBLEBANDS_DEF = 7;
	public const uint32 TOOLSBAND = 1;
	public const uint32 ADDRESSBAND = 2;
	public const uint32 LINKSBAND = 4;
	public const uint32 REGSTR_VAL_SCHANNELENABLEPROTOCOL_DEF = 1;
	public const int32 IE_USE_OE_PRESENT_HKEY = -2147483646;
	public const int32 IE_USE_OE_MAIL_HKEY = -2147483647;
	public const int32 IE_USE_OE_NEWS_HKEY = -2147483647;
	public const uint32 REGSTR_VAL_FONT_SIZE_DEF = 2;
	public const uint32 IDM_UNKNOWN = 0;
	public const uint32 IDM_ALIGNBOTTOM = 1;
	public const uint32 IDM_ALIGNHORIZONTALCENTERS = 2;
	public const uint32 IDM_ALIGNLEFT = 3;
	public const uint32 IDM_ALIGNRIGHT = 4;
	public const uint32 IDM_ALIGNTOGRID = 5;
	public const uint32 IDM_ALIGNTOP = 6;
	public const uint32 IDM_ALIGNVERTICALCENTERS = 7;
	public const uint32 IDM_ARRANGEBOTTOM = 8;
	public const uint32 IDM_ARRANGERIGHT = 9;
	public const uint32 IDM_BRINGFORWARD = 10;
	public const uint32 IDM_BRINGTOFRONT = 11;
	public const uint32 IDM_CENTERHORIZONTALLY = 12;
	public const uint32 IDM_CENTERVERTICALLY = 13;
	public const uint32 IDM_CODE = 14;
	public const uint32 IDM_DELETE = 17;
	public const uint32 IDM_FONTNAME = 18;
	public const uint32 IDM_FONTSIZE = 19;
	public const uint32 IDM_GROUP = 20;
	public const uint32 IDM_HORIZSPACECONCATENATE = 21;
	public const uint32 IDM_HORIZSPACEDECREASE = 22;
	public const uint32 IDM_HORIZSPACEINCREASE = 23;
	public const uint32 IDM_HORIZSPACEMAKEEQUAL = 24;
	public const uint32 IDM_INSERTOBJECT = 25;
	public const uint32 IDM_MULTILEVELREDO = 30;
	public const uint32 IDM_SENDBACKWARD = 32;
	public const uint32 IDM_SENDTOBACK = 33;
	public const uint32 IDM_SHOWTABLE = 34;
	public const uint32 IDM_SIZETOCONTROL = 35;
	public const uint32 IDM_SIZETOCONTROLHEIGHT = 36;
	public const uint32 IDM_SIZETOCONTROLWIDTH = 37;
	public const uint32 IDM_SIZETOFIT = 38;
	public const uint32 IDM_SIZETOGRID = 39;
	public const uint32 IDM_SNAPTOGRID = 40;
	public const uint32 IDM_TABORDER = 41;
	public const uint32 IDM_TOOLBOX = 42;
	public const uint32 IDM_MULTILEVELUNDO = 44;
	public const uint32 IDM_UNGROUP = 45;
	public const uint32 IDM_VERTSPACECONCATENATE = 46;
	public const uint32 IDM_VERTSPACEDECREASE = 47;
	public const uint32 IDM_VERTSPACEINCREASE = 48;
	public const uint32 IDM_VERTSPACEMAKEEQUAL = 49;
	public const uint32 IDM_JUSTIFYFULL = 50;
	public const uint32 IDM_BACKCOLOR = 51;
	public const uint32 IDM_BOLD = 52;
	public const uint32 IDM_BORDERCOLOR = 53;
	public const uint32 IDM_FLAT = 54;
	public const uint32 IDM_FORECOLOR = 55;
	public const uint32 IDM_ITALIC = 56;
	public const uint32 IDM_JUSTIFYCENTER = 57;
	public const uint32 IDM_JUSTIFYGENERAL = 58;
	public const uint32 IDM_JUSTIFYLEFT = 59;
	public const uint32 IDM_JUSTIFYRIGHT = 60;
	public const uint32 IDM_RAISED = 61;
	public const uint32 IDM_SUNKEN = 62;
	public const uint32 IDM_UNDERLINE = 63;
	public const uint32 IDM_CHISELED = 64;
	public const uint32 IDM_ETCHED = 65;
	public const uint32 IDM_SHADOWED = 66;
	public const uint32 IDM_FIND = 67;
	public const uint32 IDM_SHOWGRID = 69;
	public const uint32 IDM_OBJECTVERBLIST0 = 72;
	public const uint32 IDM_OBJECTVERBLIST1 = 73;
	public const uint32 IDM_OBJECTVERBLIST2 = 74;
	public const uint32 IDM_OBJECTVERBLIST3 = 75;
	public const uint32 IDM_OBJECTVERBLIST4 = 76;
	public const uint32 IDM_OBJECTVERBLIST5 = 77;
	public const uint32 IDM_OBJECTVERBLIST6 = 78;
	public const uint32 IDM_OBJECTVERBLIST7 = 79;
	public const uint32 IDM_OBJECTVERBLIST8 = 80;
	public const uint32 IDM_OBJECTVERBLIST9 = 81;
	public const uint32 IDM_OBJECTVERBLISTLAST = 81;
	public const uint32 IDM_CONVERTOBJECT = 82;
	public const uint32 IDM_CUSTOMCONTROL = 83;
	public const uint32 IDM_CUSTOMIZEITEM = 84;
	public const uint32 IDM_RENAME = 85;
	public const uint32 IDM_IMPORT = 86;
	public const uint32 IDM_NEWPAGE = 87;
	public const uint32 IDM_MOVE = 88;
	public const uint32 IDM_CANCEL = 89;
	public const uint32 IDM_FONT = 90;
	public const uint32 IDM_STRIKETHROUGH = 91;
	public const uint32 IDM_DELETEWORD = 92;
	public const uint32 IDM_EXECPRINT = 93;
	public const uint32 IDM_JUSTIFYNONE = 94;
	public const uint32 IDM_TRISTATEBOLD = 95;
	public const uint32 IDM_TRISTATEITALIC = 96;
	public const uint32 IDM_TRISTATEUNDERLINE = 97;
	public const uint32 IDM_FORWARDDELETE = 98;
	public const uint32 IDM_FOLLOW_ANCHOR = 2008;
	public const uint32 IDM_INSINPUTIMAGE = 2114;
	public const uint32 IDM_INSINPUTBUTTON = 2115;
	public const uint32 IDM_INSINPUTRESET = 2116;
	public const uint32 IDM_INSINPUTSUBMIT = 2117;
	public const uint32 IDM_INSINPUTUPLOAD = 2118;
	public const uint32 IDM_INSFIELDSET = 2119;
	public const uint32 IDM_PASTEINSERT = 2120;
	public const uint32 IDM_REPLACE = 2121;
	public const uint32 IDM_EDITSOURCE = 2122;
	public const uint32 IDM_BOOKMARK = 2123;
	public const uint32 IDM_HYPERLINK = 2124;
	public const uint32 IDM_UNLINK = 2125;
	public const uint32 IDM_BROWSEMODE = 2126;
	public const uint32 IDM_EDITMODE = 2127;
	public const uint32 IDM_UNBOOKMARK = 2128;
	public const uint32 IDM_TOOLBARS = 2130;
	public const uint32 IDM_STATUSBAR = 2131;
	public const uint32 IDM_FORMATMARK = 2132;
	public const uint32 IDM_TEXTONLY = 2133;
	public const uint32 IDM_OPTIONS = 2135;
	public const uint32 IDM_FOLLOWLINKC = 2136;
	public const uint32 IDM_FOLLOWLINKN = 2137;
	public const uint32 IDM_VIEWSOURCE = 2139;
	public const uint32 IDM_ZOOMPOPUP = 2140;
	public const uint32 IDM_BASELINEFONT1 = 2141;
	public const uint32 IDM_BASELINEFONT2 = 2142;
	public const uint32 IDM_BASELINEFONT3 = 2143;
	public const uint32 IDM_BASELINEFONT4 = 2144;
	public const uint32 IDM_BASELINEFONT5 = 2145;
	public const uint32 IDM_HORIZONTALLINE = 2150;
	public const uint32 IDM_LINEBREAKNORMAL = 2151;
	public const uint32 IDM_LINEBREAKLEFT = 2152;
	public const uint32 IDM_LINEBREAKRIGHT = 2153;
	public const uint32 IDM_LINEBREAKBOTH = 2154;
	public const uint32 IDM_NONBREAK = 2155;
	public const uint32 IDM_SPECIALCHAR = 2156;
	public const uint32 IDM_HTMLSOURCE = 2157;
	public const uint32 IDM_IFRAME = 2158;
	public const uint32 IDM_HTMLCONTAIN = 2159;
	public const uint32 IDM_TEXTBOX = 2161;
	public const uint32 IDM_TEXTAREA = 2162;
	public const uint32 IDM_CHECKBOX = 2163;
	public const uint32 IDM_RADIOBUTTON = 2164;
	public const uint32 IDM_DROPDOWNBOX = 2165;
	public const uint32 IDM_LISTBOX = 2166;
	public const uint32 IDM_BUTTON = 2167;
	public const uint32 IDM_IMAGE = 2168;
	public const uint32 IDM_OBJECT = 2169;
	public const uint32 IDM_1D = 2170;
	public const uint32 IDM_IMAGEMAP = 2171;
	public const uint32 IDM_FILE = 2172;
	public const uint32 IDM_COMMENT = 2173;
	public const uint32 IDM_SCRIPT = 2174;
	public const uint32 IDM_JAVAAPPLET = 2175;
	public const uint32 IDM_PLUGIN = 2176;
	public const uint32 IDM_PAGEBREAK = 2177;
	public const uint32 IDM_HTMLAREA = 2178;
	public const uint32 IDM_PARAGRAPH = 2180;
	public const uint32 IDM_FORM = 2181;
	public const uint32 IDM_MARQUEE = 2182;
	public const uint32 IDM_LIST = 2183;
	public const uint32 IDM_ORDERLIST = 2184;
	public const uint32 IDM_UNORDERLIST = 2185;
	public const uint32 IDM_INDENT = 2186;
	public const uint32 IDM_OUTDENT = 2187;
	public const uint32 IDM_PREFORMATTED = 2188;
	public const uint32 IDM_ADDRESS = 2189;
	public const uint32 IDM_BLINK = 2190;
	public const uint32 IDM_DIV = 2191;
	public const uint32 IDM_TABLEINSERT = 2200;
	public const uint32 IDM_RCINSERT = 2201;
	public const uint32 IDM_CELLINSERT = 2202;
	public const uint32 IDM_CAPTIONINSERT = 2203;
	public const uint32 IDM_CELLMERGE = 2204;
	public const uint32 IDM_CELLSPLIT = 2205;
	public const uint32 IDM_CELLSELECT = 2206;
	public const uint32 IDM_ROWSELECT = 2207;
	public const uint32 IDM_COLUMNSELECT = 2208;
	public const uint32 IDM_TABLESELECT = 2209;
	public const uint32 IDM_TABLEPROPERTIES = 2210;
	public const uint32 IDM_CELLPROPERTIES = 2211;
	public const uint32 IDM_ROWINSERT = 2212;
	public const uint32 IDM_COLUMNINSERT = 2213;
	public const uint32 IDM_HELP_CONTENT = 2220;
	public const uint32 IDM_HELP_ABOUT = 2221;
	public const uint32 IDM_HELP_README = 2222;
	public const uint32 IDM_REMOVEFORMAT = 2230;
	public const uint32 IDM_PAGEINFO = 2231;
	public const uint32 IDM_TELETYPE = 2232;
	public const uint32 IDM_GETBLOCKFMTS = 2233;
	public const uint32 IDM_BLOCKFMT = 2234;
	public const uint32 IDM_SHOWHIDE_CODE = 2235;
	public const uint32 IDM_TABLE = 2236;
	public const uint32 IDM_COPYFORMAT = 2237;
	public const uint32 IDM_PASTEFORMAT = 2238;
	public const uint32 IDM_GOTO = 2239;
	public const uint32 IDM_CHANGEFONT = 2240;
	public const uint32 IDM_CHANGEFONTSIZE = 2241;
	public const uint32 IDM_CHANGECASE = 2246;
	public const uint32 IDM_SHOWSPECIALCHAR = 2249;
	public const uint32 IDM_SUBSCRIPT = 2247;
	public const uint32 IDM_SUPERSCRIPT = 2248;
	public const uint32 IDM_CENTERALIGNPARA = 2250;
	public const uint32 IDM_LEFTALIGNPARA = 2251;
	public const uint32 IDM_RIGHTALIGNPARA = 2252;
	public const uint32 IDM_REMOVEPARAFORMAT = 2253;
	public const uint32 IDM_APPLYNORMAL = 2254;
	public const uint32 IDM_APPLYHEADING1 = 2255;
	public const uint32 IDM_APPLYHEADING2 = 2256;
	public const uint32 IDM_APPLYHEADING3 = 2257;
	public const uint32 IDM_DOCPROPERTIES = 2260;
	public const uint32 IDM_ADDFAVORITES = 2261;
	public const uint32 IDM_COPYSHORTCUT = 2262;
	public const uint32 IDM_SAVEBACKGROUND = 2263;
	public const uint32 IDM_SETWALLPAPER = 2264;
	public const uint32 IDM_COPYBACKGROUND = 2265;
	public const uint32 IDM_CREATESHORTCUT = 2266;
	public const uint32 IDM_PAGE = 2267;
	public const uint32 IDM_SAVETARGET = 2268;
	public const uint32 IDM_SHOWPICTURE = 2269;
	public const uint32 IDM_SAVEPICTURE = 2270;
	public const uint32 IDM_DYNSRCPLAY = 2271;
	public const uint32 IDM_DYNSRCSTOP = 2272;
	public const uint32 IDM_PRINTTARGET = 2273;
	public const uint32 IDM_IMGARTPLAY = 2274;
	public const uint32 IDM_IMGARTSTOP = 2275;
	public const uint32 IDM_IMGARTREWIND = 2276;
	public const uint32 IDM_PRINTQUERYJOBSPENDING = 2277;
	public const uint32 IDM_SETDESKTOPITEM = 2278;
	public const uint32 IDM_CONTEXTMENU = 2280;
	public const uint32 IDM_GOBACKWARD = 2282;
	public const uint32 IDM_GOFORWARD = 2283;
	public const uint32 IDM_PRESTOP = 2284;
	public const uint32 IDM_GOTOCLIPBOARDADDRESS = 2285;
	public const uint32 IDM_GOTOCLIPBOARDTEXT = 2286;
	public const uint32 IDM_MP_MYPICS = 2287;
	public const uint32 IDM_MP_EMAILPICTURE = 2288;
	public const uint32 IDM_MP_PRINTPICTURE = 2289;
	public const uint32 IDM_CREATELINK = 2290;
	public const uint32 IDM_COPYCONTENT = 2291;
	public const uint32 IDM_LANGUAGE = 2292;
	public const uint32 IDM_GETPRINTTEMPLATE = 2295;
	public const uint32 IDM_SETPRINTTEMPLATE = 2296;
	public const uint32 IDM_TEMPLATE_PAGESETUP = 2298;
	public const uint32 IDM_REFRESH = 2300;
	public const uint32 IDM_STOPDOWNLOAD = 2301;
	public const uint32 IDM_ENABLE_INTERACTION = 2302;
	public const uint32 IDM_LAUNCHDEBUGGER = 2310;
	public const uint32 IDM_BREAKATNEXT = 2311;
	public const uint32 IDM_INSINPUTHIDDEN = 2312;
	public const uint32 IDM_INSINPUTPASSWORD = 2313;
	public const uint32 IDM_OVERWRITE = 2314;
	public const uint32 IDM_PARSECOMPLETE = 2315;
	public const uint32 IDM_HTMLEDITMODE = 2316;
	public const uint32 IDM_REGISTRYREFRESH = 2317;
	public const uint32 IDM_COMPOSESETTINGS = 2318;
	public const uint32 IDM_SHOWALLTAGS = 2327;
	public const uint32 IDM_SHOWALIGNEDSITETAGS = 2321;
	public const uint32 IDM_SHOWSCRIPTTAGS = 2322;
	public const uint32 IDM_SHOWSTYLETAGS = 2323;
	public const uint32 IDM_SHOWCOMMENTTAGS = 2324;
	public const uint32 IDM_SHOWAREATAGS = 2325;
	public const uint32 IDM_SHOWUNKNOWNTAGS = 2326;
	public const uint32 IDM_SHOWMISCTAGS = 2320;
	public const uint32 IDM_SHOWZEROBORDERATDESIGNTIME = 2328;
	public const uint32 IDM_AUTODETECT = 2329;
	public const uint32 IDM_SCRIPTDEBUGGER = 2330;
	public const uint32 IDM_GETBYTESDOWNLOADED = 2331;
	public const uint32 IDM_NOACTIVATENORMALOLECONTROLS = 2332;
	public const uint32 IDM_NOACTIVATEDESIGNTIMECONTROLS = 2333;
	public const uint32 IDM_NOACTIVATEJAVAAPPLETS = 2334;
	public const uint32 IDM_NOFIXUPURLSONPASTE = 2335;
	public const uint32 IDM_EMPTYGLYPHTABLE = 2336;
	public const uint32 IDM_ADDTOGLYPHTABLE = 2337;
	public const uint32 IDM_REMOVEFROMGLYPHTABLE = 2338;
	public const uint32 IDM_REPLACEGLYPHCONTENTS = 2339;
	public const uint32 IDM_SHOWWBRTAGS = 2340;
	public const uint32 IDM_PERSISTSTREAMSYNC = 2341;
	public const uint32 IDM_SETDIRTY = 2342;
	public const uint32 IDM_RUNURLSCRIPT = 2343;
	public const uint32 IDM_ZOOMRATIO = 2344;
	public const uint32 IDM_GETZOOMNUMERATOR = 2345;
	public const uint32 IDM_GETZOOMDENOMINATOR = 2346;
	public const uint32 IDM_DIRLTR = 2350;
	public const uint32 IDM_DIRRTL = 2351;
	public const uint32 IDM_BLOCKDIRLTR = 2352;
	public const uint32 IDM_BLOCKDIRRTL = 2353;
	public const uint32 IDM_INLINEDIRLTR = 2354;
	public const uint32 IDM_INLINEDIRRTL = 2355;
	public const uint32 IDM_ISTRUSTEDDLG = 2356;
	public const uint32 IDM_INSERTSPAN = 2357;
	public const uint32 IDM_LOCALIZEEDITOR = 2358;
	public const uint32 IDM_SAVEPRETRANSFORMSOURCE = 2370;
	public const uint32 IDM_VIEWPRETRANSFORMSOURCE = 2371;
	public const uint32 IDM_SCROLL_HERE = 2380;
	public const uint32 IDM_SCROLL_TOP = 2381;
	public const uint32 IDM_SCROLL_BOTTOM = 2382;
	public const uint32 IDM_SCROLL_PAGEUP = 2383;
	public const uint32 IDM_SCROLL_PAGEDOWN = 2384;
	public const uint32 IDM_SCROLL_UP = 2385;
	public const uint32 IDM_SCROLL_DOWN = 2386;
	public const uint32 IDM_SCROLL_LEFTEDGE = 2387;
	public const uint32 IDM_SCROLL_RIGHTEDGE = 2388;
	public const uint32 IDM_SCROLL_PAGELEFT = 2389;
	public const uint32 IDM_SCROLL_PAGERIGHT = 2390;
	public const uint32 IDM_SCROLL_LEFT = 2391;
	public const uint32 IDM_SCROLL_RIGHT = 2392;
	public const uint32 IDM_MULTIPLESELECTION = 2393;
	public const uint32 IDM_2D_POSITION = 2394;
	public const uint32 IDM_2D_ELEMENT = 2395;
	public const uint32 IDM_1D_ELEMENT = 2396;
	public const uint32 IDM_ABSOLUTE_POSITION = 2397;
	public const uint32 IDM_LIVERESIZE = 2398;
	public const uint32 IDM_ATOMICSELECTION = 2399;
	public const uint32 IDM_AUTOURLDETECT_MODE = 2400;
	public const uint32 IDM_IE50_PASTE = 2401;
	public const uint32 IDM_IE50_PASTE_MODE = 2402;
	public const uint32 IDM_GETIPRINT = 2403;
	public const uint32 IDM_DISABLE_EDITFOCUS_UI = 2404;
	public const uint32 IDM_RESPECTVISIBILITY_INDESIGN = 2405;
	public const uint32 IDM_CSSEDITING_LEVEL = 2406;
	public const uint32 IDM_UI_OUTDENT = 2407;
	public const uint32 IDM_UPDATEPAGESTATUS = 2408;
	public const uint32 IDM_IME_ENABLE_RECONVERSION = 2409;
	public const uint32 IDM_KEEPSELECTION = 2410;
	public const uint32 IDM_UNLOADDOCUMENT = 2411;
	public const uint32 IDM_OVERRIDE_CURSOR = 2420;
	public const uint32 IDM_PEERHITTESTSAMEINEDIT = 2423;
	public const uint32 IDM_TRUSTAPPCACHE = 2425;
	public const uint32 IDM_BACKGROUNDIMAGECACHE = 2430;
	public const uint32 IDM_GETUSERACTIONTIME = 2431;
	public const uint32 IDM_BEGINUSERACTION = 2432;
	public const uint32 IDM_ENDUSERACTION = 2433;
	public const uint32 IDM_SETCUSTOMCURSOR = 2434;
	public const uint32 IDM_FOLLOWLINKT = 2435;
	public const uint32 IDM_CARETBROWSINGMODE = 2436;
	public const uint32 IDM_STYLEMENU_SETNOSTYLE = 2437;
	public const uint32 IDM_STYLEMENU_GETNOSTYLE = 2438;
	public const uint32 IDM_STYLEMENU_GETPREFSTYLE = 2439;
	public const uint32 IDM_STYLEMENU_CHANGESELECTEDSTYLE = 2440;
	public const uint32 IDM_MEDIA_PLAYPAUSE = 2441;
	public const uint32 IDM_MEDIA_MUTEUNMUTE = 2442;
	public const uint32 IDM_MEDIA_PLAY = 2443;
	public const uint32 IDM_MEDIA_PAUSE = 2444;
	public const uint32 IDM_MEDIA_STOP = 2445;
	public const uint32 IDM_MEDIA_FULLSCREEN_TOGGLE = 2446;
	public const uint32 IDM_MEDIA_FULLSCREEN_EXIT = 2447;
	public const uint32 IDM_MEDIA_VOLUME_UP = 2448;
	public const uint32 IDM_MEDIA_VOLUME_DOWN = 2449;
	public const uint32 IDM_MEDIA_SEEK_TO_START = 2450;
	public const uint32 IDM_MEDIA_SEEK_TO_END = 2451;
	public const uint32 IDM_MEDIA_SEEK_FWD_SMALL = 2452;
	public const uint32 IDM_MEDIA_SEEK_BACK_SMALL = 2453;
	public const uint32 IDM_MEDIA_SEEK_FWD_LARGE = 2454;
	public const uint32 IDM_MEDIA_SEEK_BACK_LARGE = 2455;
	public const uint32 IDM_MEDIA_RATE_FASTER = 2456;
	public const uint32 IDM_MEDIA_RATE_SLOWER = 2457;
	public const uint32 IDM_MEDIA_SHOWCONTROLS_TOGGLE = 2458;
	public const uint32 IDM_MEDIA_ZOOMMODE_TOGGLE = 2459;
	public const uint32 IDM_MEDIA_FRAMESTEP_FWD = 2460;
	public const uint32 IDM_MEDIA_FRAMESTEP_BACK = 2461;
	public const uint32 IDM_MEDIA_MUTE = 2462;
	public const uint32 IDM_MEDIA_UNMUTE = 2463;
	public const uint32 IDM_MEDIA_SHOW_AUDIO_ACCESS = 2464;
	public const uint32 IDM_MEDIA_SHOW_SUBTITLE_ACCESS = 2465;
	public const uint32 IDM_MEDIA_PLAYRATE0 = 2480;
	public const uint32 IDM_MEDIA_PLAYRATE1 = 2481;
	public const uint32 IDM_MEDIA_PLAYRATE2 = 2482;
	public const uint32 IDM_MEDIA_PLAYRATE3 = 2483;
	public const uint32 IDM_MEDIA_PLAYRATE4 = 2484;
	public const uint32 IDM_MEDIA_PLAYRATE5 = 2485;
	public const uint32 IDM_MEDIA_PLAYRATE6 = 2486;
	public const uint32 IDM_MEDIA_PLAYRATE7 = 2487;
	public const uint32 IDM_MEDIA_PLAYRATE8 = 2488;
	public const uint32 IDM_MEDIA_PLAYRATE9 = 2489;
	public const uint32 IDM_PASTECONTENTONLY = 2500;
	public const uint32 IDM_PASTETEXTONLY = 2501;
	public const uint32 IDM_INSERTHTML = 2502;
	public const uint32 IDM_DEFAULTBLOCK = 6046;
	public const uint32 IDM_MIMECSET__FIRST__ = 3609;
	public const uint32 IDM_MIMECSET__LAST__ = 3699;
	public const uint32 IDM_MENUEXT_FIRST__ = 3700;
	public const uint32 IDM_MENUEXT_LAST__ = 3732;
	public const uint32 IDM_MENUEXT_COUNT = 3733;
	public const uint32 IDM_ADDCONSOLEMESSAGERECEIVER = 3800;
	public const uint32 IDM_REMOVECONSOLEMESSAGERECEIVER = 3801;
	public const uint32 IDM_STARTDIAGNOSTICSMODE = 3802;
	public const uint32 IDM_GETSCRIPTENGINE = 3803;
	public const uint32 IDM_ADDDEBUGCALLBACKRECEIVER = 3804;
	public const uint32 IDM_REMOVEDEBUGCALLBACKRECEIVER = 3805;
	public const uint32 IDM_DEFAULTPARAGRAPHSEPARATOR = 3900;
	public const uint32 IDM_BEGINUNDOUNIT = 3901;
	public const uint32 IDM_ENDUNDOUNIT = 3902;
	public const uint32 IDM_CLEARUNDO = 3903;
	public const uint32 IDM_INSPECTELEMENT = 3904;
	public const uint32 IDM_SHAREPICTURE = 3905;
	public const uint32 IDM_ENABLE_OBJECT_RESIZING = 3906;
	public const uint32 IDM_INSERTTEXT = 3907;
	public const uint32 IDM_LAUNCHURICALLBACK = 3908;
	public const uint32 IDM_FOLLOWLINKN_INPRIVATE = 3909;
	public const uint32 IDM_FOLLOWLINKT_INPRIVATE = 3910;
	public const uint32 IDM_FOLLOWLINKEDGE = 3911;
	public const uint32 IDM_OPEN = 2000;
	public const uint32 IDM_NEW = 2001;
	public const uint32 IDM_SAVE = 70;
	public const uint32 IDM_SAVEAS = 71;
	public const uint32 IDM_SAVECOPYAS = 2002;
	public const uint32 IDM_PRINTPREVIEW = 2003;
	public const uint32 IDM_SHOWPRINT = 2010;
	public const uint32 IDM_SHOWPAGESETUP = 2011;
	public const uint32 IDM_PRINT = 27;
	public const uint32 IDM_PAGESETUP = 2004;
	public const uint32 IDM_SPELL = 2005;
	public const uint32 IDM_PASTESPECIAL = 2006;
	public const uint32 IDM_CLEARSELECTION = 2007;
	public const uint32 IDM_PROPERTIES = 28;
	public const uint32 IDM_REDO = 29;
	public const uint32 IDM_UNDO = 43;
	public const uint32 IDM_SELECTALL = 31;
	public const uint32 IDM_ZOOMPERCENT = 50;
	public const uint32 IDM_GETZOOM = 68;
	public const uint32 IDM_STOP = 2138;
	public const uint32 IDM_COPY = 15;
	public const uint32 IDM_CUT = 16;
	public const uint32 IDM_PASTE = 26;
	public const uint32 IDM_SAVEPDF = 99;
	public const uint32 IDM_TOGGLEREADINGBAR = 15209;
	public const uint32 IDM_ADDPDFHIGHLIGHT = 15210;
	public const uint32 IDM_DELETEPDFHIGHLIGHT = 15211;
	public const uint32 IDM_ADDPDFNOTE = 15212;
	public const uint32 IDM_OPENPDFNOTE = 15213;
	public const uint32 IDM_EDITPDFHIGHLIGHT = 15214;
	public const uint32 IDM_PINKHIGHLIGHT = 15215;
	public const uint32 IDM_BLUEHIGHLIGHT = 15216;
	public const uint32 IDM_GREENHIGHLIGHT = 15217;
	public const uint32 IDM_YELLOWHIGHLIGHT = 15218;
	public const uint32 IDM_NONEHIGHLIGHT = 15219;
	public const uint32 IDM_PDFREADALOUD = 15220;
	public const uint32 IDM_SHAREPDF = 15221;
	public const uint32 IDM_PDFDEFINE = 15222;
	public const int32 CMD_ZOOM_PAGEWIDTH = -1;
	public const int32 CMD_ZOOM_ONEPAGE = -2;
	public const int32 CMD_ZOOM_TWOPAGES = -3;
	public const int32 CMD_ZOOM_SELECTION = -4;
	public const int32 CMD_ZOOM_FIT = -5;
	public const uint32 IDM_CONTEXT = 1;
	public const uint32 IDM_HWND = 2;
	public const uint32 IDM_NEW_TOPLEVELWINDOW = 7050;
	public const uint32 IDM_PRESERVEUNDOALWAYS = 6049;
	public const uint32 IDM_PERSISTDEFAULTVALUES = 7100;
	public const uint32 IDM_PROTECTMETATAGS = 7101;
	public const uint32 IDM_GETFRAMEZONE = 6037;
	public const uint32 IDM_REFRESH_THIS = 6042;
	public const uint32 IDM_MENUEXT_PLACEHOLDER = 6047;
	public const uint32 IDM_FIRE_PRINTTEMPLATEUP = 15000;
	public const uint32 IDM_FIRE_PRINTTEMPLATEDOWN = 15001;
	public const uint32 IDM_SETPRINTHANDLES = 15002;
	public const uint32 IDM_CLEARAUTHENTICATIONCACHE = 15003;
	public const uint32 IDM_GETUSERINITFLAGS = 15004;
	public const uint32 IDM_GETDOCDLGFLAGS = 15005;
	public const uint32 IDM_OLEWINDOWSTATECHANGED = 15006;
	public const uint32 IDM_ACTIVEXINSTALLSCOPE = 15007;
	public const uint32 IDM_SETSESSIONDOCUMENTMODE = 15008;
	public const uint32 IDM_GETSESSIONDOCUMENTMODE = 15009;
	public const uint32 IDM_SETPROFILINGONSTART = 15010;
	public const uint32 IDM_GETPROFILINGONSTART = 15011;
	public const uint32 IDM_SETSCRIPTCONSOLE = 15012;
	public const uint32 IDM_SETNAVIGATEEVENTSINK = 15013;
	public const uint32 IDM_SETDEVTOOLBARCONSOLE = 15016;
	public const uint32 IDM_POPSTATEEVENT = 15017;
	public const uint32 IDM_SETPARTIALLAYOUTSTATUS = 15021;
	public const uint32 IDM_GETPARTIALLAYOUTSTATUS = 15022;
	public const uint32 IDM_ADDPARTIALTESTSTEPCOUNT = 15023;
	public const uint32 IDM_SETL9QUIRKSEMULATIONENABLED = 15024;
	public const uint32 IDM_GETL9QUIRKSEMULATIONENABLED = 15025;
	public const uint32 IDM_SETPOINTERLOCKCONSENT = 15026;
	public const uint32 IDM_GETDEFAULTZOOMLEVEL = 15027;
	public const uint32 IDM_GETELEMENTBOUNDINGBOX = 15028;
	public const uint32 IDM_SETGEOLOCATIONCONSENT = 15029;
	public const uint32 IDM_ACTIVEXFILTERINGENABLED = 15030;
	public const uint32 IDM_SHARE = 15031;
	public const uint32 IDM_SHAREAPPCACHEEVENT = 15033;
	public const uint32 IDM_GETPRINTMANAGERDOCSOURCE = 15038;
	public const uint32 IDM_SETEXTRAHEADERS = 15039;
	public const uint32 IDM_SETACCESSIBILITYNAME = 15040;
	public const uint32 IDM_UPDATESETTINGSFROMREGISTRY = 15041;
	public const uint32 IDM_PERFORMEDITACTIVATION = 15042;
	public const uint32 IDM_SETDEFAULTBACKGROUNDCOLOR = 15043;
	public const uint32 IDM_GETDEFAULTBACKGROUNDCOLOR = 15044;
	public const uint32 IDM_NOTIFYZOOMANDSCROLLANIMATIONEND = 15045;
	public const uint32 IDM_NOTIFYCONTEXTMENUDISMISSED = 15046;
	public const uint32 IDM_GETPRINTMANAGERDOCSOURCEASYNC = 15047;
	public const uint32 IDM_SETPAGEACTIONALLOWEDFLAGS = 15100;
	public const uint32 IDM_INVOKEFLIPAHEADTARGET = 15200;
	public const uint32 IDM_ENABLEFLIPAHEADTARGET = 15201;
	public const uint32 IDM_DEBUGGERDYNAMICATTACH = 15202;
	public const uint32 IDM_DEBUGGERDYNAMICDETACH = 15203;
	public const uint32 IDM_DEBUGGERDYNAMICATTACHSOURCERUNDOWN = 15204;
	public const uint32 IDM_GETDEBUGGERSTATE = 15205;
	public const uint32 IDM_SELECTIONSEARCH = 15206;
	public const uint32 IDM_SHOWSHAREUI = 15207;
	public const uint32 IDM_RUNFLASH = 15208;
	public const uint32 DISPID_INTERNAL_CELEMENTCLASSCACHE = 2147483648;
	public const uint32 DISPID_HTMLOBJECT = 66036;
	public const uint32 DISPID_ELEMENT = 66536;
	public const uint32 DISPID_SITE = 67536;
	public const uint32 DISPID_OBJECT = 68536;
	public const uint32 DISPID_STYLE = 69536;
	public const uint32 DISPID_BASE_STYLE = 70036;
	public const uint32 DISPID_ATTRS = 70536;
	public const uint32 DISPID_EVENTS = 71536;
	public const uint32 DISPID_XOBJ_EXPANDO = 72536;
	public const uint32 DISPID_XOBJ_ORDINAL = 73536;
	public const uint32 DISPID_ACTIVEX_EXPANDO_BASE = 72536;
	public const uint32 DISPID_ACTIVEX_EXPANDO_MAX = 73535;
	public const uint32 DISPID_OBJECT_ORDINAL_BASE = 73536;
	public const uint32 DISPID_OBJECT_ORDINAL_MAX = 74535;
	public const uint32 DISPID_COLLECTION_MIN = 1000000;
	public const uint32 DISPID_COLLECTION_MAX = 2999999;
	public const uint32 DISPID_STYLESHEETSCOLLECTION_NAMED_BASE = 1000000;
	public const uint32 DISPID_STYLESHEETSCOLLECTION_ORDINAL_BASE = 2000000;
	public const uint32 DISPID_STYLESHEETSCOLLECTION_ORDINAL_MAX = 2999999;
	public const uint32 DISPID_EXPANDO_BASE = 3000000;
	public const uint32 DISPID_EXPANDO_MAX = 3999999;
	public const uint32 DISPID_EVENTHOOK_SENSITIVE_BASE = 4000000;
	public const uint32 DISPID_EVENTHOOK_SENSITIVE_MAX = 4499999;
	public const uint32 DISPID_EVENTHOOK_INSENSITIVE_BASE = 4500000;
	public const uint32 DISPID_EVENTHOOK_INSENSITIVE_MAX = 4999999;
	public const uint32 DISPID_PEER_HOLDER_BASE = 5000000;
	public const uint32 DISPID_CANVASPIXELARRAY_BASE = 5000000;
	public const uint32 DISPID_CANVASPIXELARRAY_MAX = 2000000000;
	public const uint32 DISPID_CommonCtrl_FONTNAME = 1;
	public const uint32 DISPID_CommonCtrl_FONTSIZE = 2;
	public const uint32 DISPID_CommonCtrl_FONTBOLD = 3;
	public const uint32 DISPID_CommonCtrl_FONTITAL = 4;
	public const uint32 DISPID_CommonCtrl_FONTUNDER = 5;
	public const uint32 DISPID_CommonCtrl_FONTSTRIKE = 6;
	public const uint32 DISPID_CommonCtrl_FONTWEIGHT = 7;
	public const uint32 DISPID_CommonCtrl_FONTCHARSET = 8;
	public const uint32 DISPID_CommonCtrl_FONTSUPERSCRIPT = 9;
	public const uint32 DISPID_CommonCtrl_FONTSUBSCRIPT = 10;
	public const int32 DISPID_MSDATASRCINTERFACE = -3900;
	public const int32 DISPID_ADVISEDATASRCCHANGEEVENT = -3901;
	public const uint32 DISPID_HTMLDLG = 25000;
	public const uint32 DISPID_HTMLDLGMODEL = 26000;
	public const uint32 DISPID_HTMLPOPUP = 27000;
	public const uint32 DISPID_HTMLAPP = 5000;
	public const uint32 STDPROPID_XOBJ_NAME = 65536;
	public const uint32 STDPROPID_XOBJ_INDEX = 65537;
	public const uint32 STDPROPID_IE3XOBJ_OBJECTALIGN = 65537;
	public const uint32 STDPROPID_XOBJ_BASEHREF = 65538;
	public const uint32 STDPROPID_XOBJ_LEFT = 65539;
	public const uint32 STDPROPID_XOBJ_TOP = 65540;
	public const uint32 STDPROPID_XOBJ_WIDTH = 65541;
	public const uint32 STDPROPID_XOBJ_HEIGHT = 65542;
	public const uint32 STDPROPID_XOBJ_VISIBLE = 65543;
	public const uint32 STDPROPID_XOBJ_PARENT = 65544;
	public const uint32 STDPROPID_XOBJ_DRAGMODE = 65545;
	public const uint32 STDPROPID_XOBJ_DRAGICON = 65546;
	public const uint32 STDPROPID_XOBJ_TAG = 65547;
	public const uint32 STDPROPID_XOBJ_TABSTOP = 65550;
	public const uint32 STDPROPID_XOBJ_TABINDEX = 65551;
	public const uint32 STDPROPID_XOBJ_HELPCONTEXTID = 65586;
	public const uint32 STDPROPID_XOBJ_DEFAULT = 65591;
	public const uint32 STDPROPID_XOBJ_CANCEL = 65592;
	public const uint32 STDPROPID_XOBJ_LEFTNORUN = 65593;
	public const uint32 STDPROPID_XOBJ_TOPNORUN = 65594;
	public const uint32 STDPROPID_XOBJ_ALIGNPERSIST = 65596;
	public const uint32 STDPROPID_XOBJ_LINKTIMEOUT = 65597;
	public const uint32 STDPROPID_XOBJ_LINKTOPIC = 65598;
	public const uint32 STDPROPID_XOBJ_LINKITEM = 65599;
	public const uint32 STDPROPID_XOBJ_LINKMODE = 65600;
	public const uint32 STDPROPID_XOBJ_DATACHANGED = 65601;
	public const uint32 STDPROPID_XOBJ_DATAFIELD = 65602;
	public const uint32 STDPROPID_XOBJ_DATASOURCE = 65603;
	public const uint32 STDPROPID_XOBJ_WHATSTHISHELPID = 65604;
	public const uint32 STDPROPID_XOBJ_CONTROLTIPTEXT = 65605;
	public const uint32 STDPROPID_XOBJ_STATUSBARTEXT = 65606;
	public const uint32 STDPROPID_XOBJ_APPLICATION = 65607;
	public const uint32 STDPROPID_XOBJ_BLOCKALIGN = 65608;
	public const uint32 STDPROPID_XOBJ_CONTROLALIGN = 65609;
	public const uint32 STDPROPID_XOBJ_STYLE = 65610;
	public const uint32 STDPROPID_XOBJ_COUNT = 65611;
	public const uint32 STDPROPID_XOBJ_DISABLED = 65612;
	public const uint32 STDPROPID_XOBJ_RIGHT = 65613;
	public const uint32 STDPROPID_XOBJ_BOTTOM = 65614;
	public const uint32 STDPROPID_XOBJ_GETSVGDOCUMENT = 65615;
	public const uint32 STDDISPID_XOBJ_ONFOCUS = 65537;
	public const uint32 STDDISPID_XOBJ_BEFOREUPDATE = 65540;
	public const uint32 STDDISPID_XOBJ_AFTERUPDATE = 65541;
	public const uint32 STDDISPID_XOBJ_ONROWEXIT = 65542;
	public const uint32 STDDISPID_XOBJ_ONROWENTER = 65543;
	public const uint32 STDDISPID_XOBJ_ONMOUSEOVER = 65544;
	public const uint32 STDDISPID_XOBJ_ONMOUSEOUT = 65545;
	public const uint32 STDDISPID_XOBJ_ONHELP = 65546;
	public const uint32 STDDISPID_XOBJ_ONDRAGSTART = 65547;
	public const uint32 STDDISPID_XOBJ_ONSELECTSTART = 65548;
	public const uint32 STDDISPID_XOBJ_ERRORUPDATE = 65549;
	public const uint32 STDDISPID_XOBJ_ONDATASETCHANGED = 65550;
	public const uint32 STDDISPID_XOBJ_ONDATAAVAILABLE = 65551;
	public const uint32 STDDISPID_XOBJ_ONDATASETCOMPLETE = 65552;
	public const uint32 STDDISPID_XOBJ_ONFILTER = 65553;
	public const uint32 STDDISPID_XOBJ_ONLOSECAPTURE = 65554;
	public const uint32 STDDISPID_XOBJ_ONPROPERTYCHANGE = 65555;
	public const uint32 STDDISPID_XOBJ_ONDRAG = 65556;
	public const uint32 STDDISPID_XOBJ_ONDRAGEND = 65557;
	public const uint32 STDDISPID_XOBJ_ONDRAGENTER = 65558;
	public const uint32 STDDISPID_XOBJ_ONDRAGOVER = 65559;
	public const uint32 STDDISPID_XOBJ_ONDRAGLEAVE = 65560;
	public const uint32 STDDISPID_XOBJ_ONDROP = 65561;
	public const uint32 STDDISPID_XOBJ_ONCUT = 65562;
	public const uint32 STDDISPID_XOBJ_ONCOPY = 65563;
	public const uint32 STDDISPID_XOBJ_ONPASTE = 65564;
	public const uint32 STDDISPID_XOBJ_ONBEFORECUT = 65565;
	public const uint32 STDDISPID_XOBJ_ONBEFORECOPY = 65566;
	public const uint32 STDDISPID_XOBJ_ONBEFOREPASTE = 65567;
	public const uint32 STDDISPID_XOBJ_ONROWSDELETE = 65568;
	public const uint32 STDDISPID_XOBJ_ONROWSINSERTED = 65569;
	public const uint32 STDDISPID_XOBJ_ONCELLCHANGE = 65570;
	public const uint32 DISPID_NORMAL_FIRST = 1000;
	public const uint32 DISPID_IE8_NORMAL_FIRST = 1150;
	public const uint32 DISPID_ANCHOR = 1000;
	public const uint32 DISPID_BLOCK = 1000;
	public const uint32 DISPID_BODY = 2000;
	public const uint32 DISPID_BR = 1000;
	public const uint32 DISPID_BGSOUND = 1000;
	public const uint32 DISPID_DD = 1000;
	public const uint32 DISPID_DIR = 1000;
	public const uint32 DISPID_DIV = 1000;
	public const uint32 DISPID_DL = 1000;
	public const uint32 DISPID_DT = 1000;
	public const uint32 DISPID_EFONT = 1000;
	public const uint32 DISPID_FORM = 1000;
	public const uint32 DISPID_HEADER = 1000;
	public const uint32 DISPID_HEDELEMS = 1000;
	public const uint32 DISPID_HR = 1000;
	public const uint32 DISPID_LABEL = 1000;
	public const uint32 DISPID_LI = 1000;
	public const uint32 DISPID_IMGBASE = 1000;
	public const uint32 DISPID_IMG = 2000;
	public const uint32 DISPID_INPUTIMAGE = 2000;
	public const uint32 DISPID_INPUT = 2000;
	public const uint32 DISPID_INPUTTEXTBASE = 3000;
	public const uint32 DISPID_INPUTTEXT = 4000;
	public const uint32 DISPID_MENU = 1000;
	public const uint32 DISPID_OL = 1000;
	public const uint32 DISPID_PARA = 1000;
	public const uint32 DISPID_SELECT = 1000;
	public const uint32 DISPID_SELECTOBJ = 1000;
	public const uint32 DISPID_TABLE = 1000;
	public const uint32 DISPID_TEXTSITE = 1000;
	public const uint32 DISPID_TEXTAREA = 5000;
	public const uint32 DISPID_MARQUEE = 6000;
	public const uint32 DISPID_RICHTEXT = 7000;
	public const uint32 DISPID_BUTTON = 8000;
	public const uint32 DISPID_UL = 1000;
	public const uint32 DISPID_PHRASE = 1000;
	public const uint32 DISPID_UNKNOWNPDL = 1000;
	public const uint32 DISPID_COMMENTPDL = 1000;
	public const uint32 DISPID_TABLECELL = 2000;
	public const uint32 DISPID_RANGE = 1000;
	public const uint32 DISPID_SELECTION = 1000;
	public const uint32 DISPID_OPTION = 1000;
	public const uint32 DISPID_1D = 2000;
	public const uint32 DISPID_MAP = 1000;
	public const uint32 DISPID_AREA = 1000;
	public const uint32 DISPID_PARAM = 1000;
	public const uint32 DISPID_TABLESECTION = 1000;
	public const uint32 DISPID_TABLEROW = 1000;
	public const uint32 DISPID_TABLECOL = 1000;
	public const uint32 DISPID_SCRIPT = 1000;
	public const uint32 DISPID_STYLESHEET = 1000;
	public const uint32 DISPID_STYLERULE = 1000;
	public const uint32 DISPID_BASE_STYLERULE = 1100;
	public const uint32 DISPID_STYLEPAGE = 1000;
	public const uint32 DISPID_STYLESHEETS_COL = 1000;
	public const uint32 DISPID_STYLERULES_COL = 1000;
	public const uint32 DISPID_STYLEPAGES_COL = 1000;
	public const uint32 DISPID_MEDIALIST = 1000;
	public const uint32 DISPID_MIMETYPES_COL = 1000;
	public const uint32 DISPID_PLUGINS_COL = 1000;
	public const uint32 DISPID_2D = 1000;
	public const uint32 DISPID_OMWINDOW = 1000;
	public const uint32 DISPID_EVENTOBJ = 1000;
	public const uint32 DISPID_PERSISTDATA = 1000;
	public const uint32 DISPID_OLESITE = 1000;
	public const uint32 DISPID_FRAMESET = 1000;
	public const uint32 DISPID_LINK = 1000;
	public const uint32 DISPID_STYLEELEMENT = 1000;
	public const uint32 DISPID_FILTERS = 1000;
	public const uint32 DISPID_OMRECT = 1000;
	public const uint32 DISPID_DOMATTRIBUTE = 1000;
	public const uint32 DISPID_DOMTEXTNODE = 1000;
	public const uint32 DISPID_GENERIC = 1000;
	public const uint32 DISPID_URN_COLL = 1000;
	public const uint32 DISPID_NAMESPACE_COLLECTION = 1000;
	public const uint32 DISPID_NAMESPACE = 1000;
	public const uint32 DISPID_TAGNAMES_COLLECTION = 1000;
	public const uint32 DISPID_XMLHTTPREQUEST = 1000;
	public const uint32 DISPID_XMLSERIALIZER = 1000;
	public const uint32 DISPID_DOMPARSER = 1000;
	public const uint32 DISPID_DOCUMENTCOMPATIBLEINFO_COLLECTION = 1000;
	public const uint32 DISPID_DOCUMENTCOMPATIBLEINFO = 1000;
	public const uint32 DISPID_XDOMAINREQUEST = 1000;
	public const uint32 DISPID_DOMSTORAGEITEM = 1000;
	public const uint32 DISPID_DOMSTORAGE = 1000;
	public const uint32 DISPID_DOMSTORAGELIST = 1000;
	public const uint32 DISPID_RULESAPPLIED = 1000;
	public const uint32 DISPID_RULESAPPLIED_COLLECTION = 1000;
	public const uint32 DISPID_STYLESHEETRULESAPPLIED_COLLECTION = 1000;
	public const uint32 DISPID_PROCESSINGINSTRUCTION = 1000;
	public const uint32 DISPID_MSPOINTERPOINT = 1000;
	public const uint32 DISPID_WEBSOCKET = 1000;
	public const uint32 DISPID_APPLICATIONCACHE = 1000;
	public const uint32 DISPID_DOMEVENT = 1000;
	public const uint32 DISPID_DOMUIEVENT = 1025;
	public const uint32 DISPID_DOMMOUSEEVENT = 1050;
	public const uint32 DISPID_DOMMOUSEWHEELEVENT = 1075;
	public const uint32 DISPID_DOMWHEELEVENT = 1100;
	public const uint32 DISPID_DOMTEXTEVENT = 1125;
	public const uint32 DISPID_DOMKEYBOARDEVENT = 1150;
	public const uint32 DISPID_DOMCOMPOSITIONEVENT = 1175;
	public const uint32 DISPID_DOMCUSTOMEVENT = 1200;
	public const uint32 DISPID_DOMMUTATIONEVENT = 1225;
	public const uint32 DISPID_DOMFOCUSEVENT = 1250;
	public const uint32 DISPID_SVGZOOMEVENT = 1275;
	public const uint32 DISPID_DOMSITEMODEEVENT = 1300;
	public const uint32 DISPID_DOMMESSAGEEVENT = 1325;
	public const uint32 DISPID_DOMSTORAGEEVENT = 1350;
	public const uint32 DISPID_DOMBEFOREUNLOADEVENT = 1375;
	public const uint32 DISPID_DOMDRAGEVENT = 1400;
	public const uint32 DISPID_DOMMSPOINTEREVENT = 1425;
	public const uint32 DISPID_DOMMSGESTUREEVENT = 1450;
	public const uint32 DISPID_DOMMSTRANSITIONEVENT = 1475;
	public const uint32 DISPID_DOMMSANIMATIONEVENT = 1500;
	public const uint32 DISPID_DOMMSMANIPULATIONEVENT = 1525;
	public const uint32 DISPID_DOMPROGRESSEVENT = 1550;
	public const uint32 DISPID_DOMCLOSEEVENT = 1525;
	public const uint32 DISPID_HTMLDOCUMENT = 1000;
	public const uint32 DISPID_OMDOCUMENT = 1000;
	public const uint32 DISPID_DATATRANSFER = 1000;
	public const uint32 DISPID_XMLDECL = 1000;
	public const uint32 DISPID_DOCFRAG = 1000;
	public const uint32 DISPID_ILINEINFO = 1000;
	public const uint32 DISPID_IHTMLCOMPUTEDSTYLE = 1000;
	public const uint32 DISPID_DOMRANGE = 1000;
	public const uint32 DISPID_HTMLSELECTION = 1000;
	public const uint32 DISPID_DOMTRAVERSAL = 1000;
	public const uint32 DISPID_DOMEXCEPTION = 1000;
	public const uint32 DISPID_SVGEXCEPTION = 1000;
	public const uint32 DISPID_RANGEEXCEPTION = 1000;
	public const uint32 DISPID_EVENTEXCEPTION = 1000;
	public const uint32 DISPID_DOCUMENTTYPE = 1000;
	public const uint32 DISPID_MEDIA = 1000;
	public const uint32 DISPID_MEDIAERROR = 1000;
	public const uint32 DISPID_TIMERANGES = 1000;
	public const uint32 DISPID_SOURCE = 1000;
	public const uint32 DISPID_TRACK = 1000;
	public const uint32 DISPID_AUDIO = 1050;
	public const uint32 DISPID_VIDEO = 1050;
	public const uint32 DISPID_STYLEMEDIA = 1000;
	public const uint32 DISPID_PROGRESS = 1000;
	public const uint32 DISPID_PLAYTO = 1000;
	public const uint32 DISPID_PLAYTODEVICE = 1000;
	public const uint32 DISPID_WINDOW = 1;
	public const uint32 DISPID_SCREEN = 1000;
	public const uint32 DISPID_FRAMESCOLLECTION = 1000;
	public const uint32 DISPID_HISTORY = 1;
	public const uint32 DISPID_LOCATION = 1;
	public const uint32 DISPID_NAVIGATOR = 1;
	public const uint32 DISPID_CLIENTCAPS = 1;
	public const uint32 DISPID_TEMPLATE_PRINTER = 1;
	public const uint32 DISPID_PRINTMANAGER_TEMPLATE_PRINTER = 501;
	public const uint32 DISPID_COLLECTION = 1500;
	public const uint32 DISPID_OPTIONS_COL = 1500;
	public const uint32 DISPID_CHECKBOX = 1000;
	public const uint32 DISPID_RADIO = 2000;
	public const uint32 DISPID_FRAMESITE = 68536;
	public const uint32 DISPID_FRAME = 69536;
	public const uint32 DISPID_IFRAME = 69536;
	public const uint32 WEBOC_DISPIDBASE = 70536;
	public const uint32 WEBOC_DISPIDMAX = 70636;
	public const uint32 DISPID_PROTECTEDELEMENT = 1000;
	public const uint32 DISPID_DEFAULTS = 1000;
	public const uint32 DISPID_MARKUP = 1000;
	public const uint32 DISPID_DOMIMPLEMENTATION = 1000;
	public const uint32 DISPID_MEDIAQUERY = 1000;
	public const uint32 DISPID_HTML5ATTRIBUTESELECTORCI = 1000;
	public const uint32 DISPID_SVGMIXINS = 1000;
	public const uint32 DISPID_SVGELEMENT = 1030;
	public const uint32 DISPID_SVGELEMENT_BASE = 1050;
	public const uint32 DISPID_SVGAELEMENT = 1050;
	public const uint32 DISPID_SVGALTGLYPHDEFELEMENT = 1050;
	public const uint32 DISPID_SVGALTGLYPHELEMENT = 1050;
	public const uint32 DISPID_SVGALTGLYPHITEMELEMENT = 1050;
	public const uint32 DISPID_SVGANGLE = 1000;
	public const uint32 DISPID_SVGANIMATECOLORELEMENT = 1050;
	public const uint32 DISPID_SVGANIMATEDANGLE = 1000;
	public const uint32 DISPID_SVGANIMATEDBOOLEAN = 1000;
	public const uint32 DISPID_SVGANIMATEDENUMERATION = 1000;
	public const uint32 DISPID_SVGANIMATEDINTEGER = 1000;
	public const uint32 DISPID_SVGANIMATEDLENGTH = 1000;
	public const uint32 DISPID_SVGANIMATEDLENGTHLIST = 1000;
	public const uint32 DISPID_SVGANIMATEDNUMBER = 1000;
	public const uint32 DISPID_SVGANIMATEDNUMBERLIST = 1000;
	public const uint32 DISPID_SVGANIMATEDPOINTS = 1000;
	public const uint32 DISPID_SVGANIMATEDRECT = 1000;
	public const uint32 DISPID_SVGANIMATEDSTRING = 1000;
	public const uint32 DISPID_SVGANIMATEELEMENT = 1050;
	public const uint32 DISPID_SVGANIMATEMOTIONELEMENT = 1050;
	public const uint32 DISPID_SVGANIMATETRANSFORMELEMENT = 1050;
	public const uint32 DISPID_SVGCIRCLEELEMENT = 1050;
	public const uint32 DISPID_SVGCLIPPATHELEMENT = 1050;
	public const uint32 DISPID_SVGCOLOR_PROFILEELEMENT = 1050;
	public const uint32 DISPID_SVGCURSORELEMENT = 1050;
	public const uint32 DISPID_SVGDEFINITION_SRCELEMENT = 1050;
	public const uint32 DISPID_SVGDEFSELEMENT = 1050;
	public const uint32 DISPID_SVGDESCELEMENT = 1050;
	public const uint32 DISPID_SVGELEMENTINSTANCE = 1000;
	public const uint32 DISPID_SVGELEMENTINSTANCELIST = 1000;
	public const uint32 DISPID_SVGELLIPSEELEMENT = 1050;
	public const uint32 DISPID_SVGFEBLENDELEMENT = 1050;
	public const uint32 DISPID_SVGFECOLORMATRIXELEMENT = 1050;
	public const uint32 DISPID_SVGFECOMPONENTTRANSFERELEMENT = 1050;
	public const uint32 DISPID_SVGCOMPONENTTRANSFERFUNCTIONELEMENT = 1050;
	public const uint32 DISPID_SVGFECOMPOSITEELEMENT = 1050;
	public const uint32 DISPID_SVGFECONVOLVEMATRIXELEMENT = 1050;
	public const uint32 DISPID_SVGFEDIFFUSELIGHTINGELEMENT = 1050;
	public const uint32 DISPID_SVGFEDISPLACEMENTMAPELEMENT = 1050;
	public const uint32 DISPID_SVGFEDISTANTLIGHTELEMENT = 1050;
	public const uint32 DISPID_SVGFEFLOODELEMENT = 1050;
	public const uint32 DISPID_SVGFEFUNCAELEMENT = 1050;
	public const uint32 DISPID_SVGFEFUNCBELEMENT = 1050;
	public const uint32 DISPID_SVGFEFUNCGELEMENT = 1050;
	public const uint32 DISPID_SVGFEFUNCRELEMENT = 1050;
	public const uint32 DISPID_SVGFEGAUSSIANBLURELEMENT = 1050;
	public const uint32 DISPID_SVGFEIMAGEELEMENT = 1050;
	public const uint32 DISPID_SVGFEMERGEELEMENT = 1050;
	public const uint32 DISPID_SVGFEMERGENODEELEMENT = 1050;
	public const uint32 DISPID_SVGFEMORPHOLOGYELEMENT = 1050;
	public const uint32 DISPID_SVGFEOFFSETELEMENT = 1050;
	public const uint32 DISPID_SVGFEPOINTLIGHTELEMENT = 1050;
	public const uint32 DISPID_SVGFESPECULARLIGHTINGELEMENT = 1050;
	public const uint32 DISPID_SVGFESPOTLIGHTELEMENT = 1050;
	public const uint32 DISPID_SVGFETILEELEMENT = 1050;
	public const uint32 DISPID_SVGFETURBULENCEELEMENT = 1050;
	public const uint32 DISPID_SVGFILTERELEMENT = 1050;
	public const uint32 DISPID_SVGFONT_FACE_FORMATELEMENT = 1050;
	public const uint32 DISPID_SVGFONT_FACE_NAMEELEMENT = 1050;
	public const uint32 DISPID_SVGFONT_FACE_SRCELEMENT = 1050;
	public const uint32 DISPID_SVGFONT_FACE_URIELEMENT = 1050;
	public const uint32 DISPID_SVGFONT_FACEELEMENT = 1050;
	public const uint32 DISPID_SVGFONTELEMENT = 1050;
	public const uint32 DISPID_SVGFOREIGNOBJECTELEMENT = 1050;
	public const uint32 DISPID_SVGGELEMENT = 1050;
	public const uint32 DISPID_SVGGLYPHELEMENT = 1050;
	public const uint32 DISPID_SVGGLYPHREFELEMENT = 1050;
	public const uint32 DISPID_SVGGRADIENTELEMENT = 1050;
	public const uint32 DISPID_SVGHKERNELEMENT = 1050;
	public const uint32 DISPID_SVGIMAGEELEMENT = 1050;
	public const uint32 DISPID_SVGLENGTH = 1000;
	public const uint32 DISPID_SVGLENGTHLIST = 1000;
	public const uint32 DISPID_SVGPRESERVEASPECTRATIO = 1000;
	public const uint32 DISPID_SVGANIMATEDPRESERVEASPECTRATIO = 1000;
	public const uint32 DISPID_SVGPOINT = 1000;
	public const uint32 DISPID_SVGPOINTLIST = 1000;
	public const uint32 DISPID_SVGLINEARGRADIENTELEMENT = 1070;
	public const uint32 DISPID_SVGLINEELEMENT = 1050;
	public const uint32 DISPID_SVGMARKERELEMENT = 1050;
	public const uint32 DISPID_SVGMASKELEMENT = 1050;
	public const uint32 DISPID_SVGMETADATAELEMENT = 1050;
	public const uint32 DISPID_SVGMISSING_GLYPHELEMENT = 1050;
	public const uint32 DISPID_SVGMPATHELEMENT = 1050;
	public const uint32 DISPID_SVGNUMBER = 1000;
	public const uint32 DISPID_SVGNUMBERLIST = 1000;
	public const uint32 DISPID_SVGPATHELEMENT = 1050;
	public const uint32 DISPID_SVGPATTERNELEMENT = 1050;
	public const uint32 DISPID_SVGPOLYGONELEMENT = 1050;
	public const uint32 DISPID_SVGPOLYLINEELEMENT = 1050;
	public const uint32 DISPID_SVGRADIALGRADIENTELEMENT = 1070;
	public const uint32 DISPID_SVGRECT = 1000;
	public const uint32 DISPID_SVGRECTELEMENT = 1050;
	public const uint32 DISPID_SVGSCRIPTELEMENT = 1050;
	public const uint32 DISPID_SVGSETELEMENT = 1050;
	public const uint32 DISPID_SVGSTOPELEMENT = 1050;
	public const uint32 DISPID_SVGSTRINGLIST = 1000;
	public const uint32 DISPID_SVGSTYLEELEMENT = 1050;
	public const uint32 DISPID_SVGSVGELEMENT = 1050;
	public const uint32 DISPID_SVGSWITCHELEMENT = 1050;
	public const uint32 DISPID_SVGSYMBOLELEMENT = 1050;
	public const uint32 DISPID_SVGTITLEELEMENT = 1050;
	public const uint32 DISPID_SVGTREFELEMENT = 1050;
	public const uint32 DISPID_SVGTEXTCONTENTELEMENT = 1050;
	public const uint32 DISPID_SVGTEXTCONTENTELEMENT_BASE = 1070;
	public const uint32 DISPID_SVGTEXTPOSITIONINGELEMENT = 1070;
	public const uint32 DISPID_SVGTEXTPOSITIONINGELEMENT_BASE = 1090;
	public const uint32 DISPID_SVGTEXTELEMENT = 1090;
	public const uint32 DISPID_SVGTSPANELEMENT = 1090;
	public const uint32 DISPID_SVGTEXTPATHELEMENT = 1070;
	public const uint32 DISPID_SVGUSEELEMENT = 1050;
	public const uint32 DISPID_SVGVIEWELEMENT = 1050;
	public const uint32 DISPID_SVGVKERNELEMENT = 1050;
	public const uint32 DISPID_SVGMATRIX = 1000;
	public const uint32 DISPID_SVGTRANSFORM = 1000;
	public const uint32 DISPID_SVGTRANSFORMLIST = 1000;
	public const uint32 DISPID_SVGANIMATEDTRANSFORMLIST = 1000;
	public const uint32 DISPID_SVGPATHSEG = 1000;
	public const uint32 DISPID_SVGPATHSEG_BASE = 1020;
	public const uint32 DISPID_SVGPATHSEGLIST = 1000;
	public const uint32 DISPID_SVGPATHSEGARCABS = 1020;
	public const uint32 DISPID_SVGPATHSEGARCREL = 1020;
	public const uint32 DISPID_SVGPATHSEGCLOSEPATH = 1020;
	public const uint32 DISPID_SVGPATHSEGMOVETOABS = 1020;
	public const uint32 DISPID_SVGPATHSEGMOVETOREL = 1020;
	public const uint32 DISPID_SVGPATHSEGLINETOABS = 1020;
	public const uint32 DISPID_SVGPATHSEGLINETOREL = 1020;
	public const uint32 DISPID_SVGPATHSEGCURVETOCUBICABS = 1020;
	public const uint32 DISPID_SVGPATHSEGCURVETOCUBICREL = 1020;
	public const uint32 DISPID_SVGPATHSEGCURVETOCUBICSMOOTHABS = 1020;
	public const uint32 DISPID_SVGPATHSEGCURVETOCUBICSMOOTHREL = 1020;
	public const uint32 DISPID_SVGPATHSEGCURVETOQUADRATICABS = 1020;
	public const uint32 DISPID_SVGPATHSEGCURVETOQUADRATICREL = 1020;
	public const uint32 DISPID_SVGPATHSEGCURVETOQUADRATICSMOOTHABS = 1020;
	public const uint32 DISPID_SVGPATHSEGCURVETOQUADRATICSMOOTHREL = 1020;
	public const uint32 DISPID_SVGPATHSEGLINETOHORIZONTALABS = 1020;
	public const uint32 DISPID_SVGPATHSEGLINETOHORIZONTALREL = 1020;
	public const uint32 DISPID_SVGPATHSEGLINETOVERTICALABS = 1020;
	public const uint32 DISPID_SVGPATHSEGLINETOVERTICALREL = 1020;
	public const uint32 DISPID_CANVASELEMENT = 1000;
	public const uint32 DISPID_CANVASRENDERCONTEXT2D = 1000;
	public const uint32 DISPID_CANVASGRADIENT = 1000;
	public const uint32 DISPID_CANVASTEXTMETRICS = 1000;
	public const uint32 DISPID_CANVASIMAGEDATA = 1000;
	public const uint32 DISPID_CANVASPIXELARRAY = 1000;
	public const uint32 DISPID_PERFORMANCE = 1000;
	public const uint32 DISPID_PERFORMANCENAVIGATION = 1000;
	public const uint32 DISPID_PERFORMANCETIMING = 1000;
	public const uint32 DISPID_MSHTMLWEBVIEWELEMENT = 1000;
	public const uint32 DISPID_WEBGEOLOCATION = 1000;
	public const uint32 DISPID_WEBGEOPOSITION = 1000;
	public const uint32 DISPID_WEBGEOCOORDINATES = 1000;
	public const uint32 DISPID_WEBGEOPOSITION_ERROR = 1000;
	public const uint32 DISPID_DATALIST = 1000;
	public const uint32 DISPID_IE8_ANCHOR = 1150;
	public const uint32 DISPID_IE8_AREA = 1150;
	public const uint32 DISPID_IE8_BASE = 1150;
	public const uint32 DISPID_IE8_BODY = 1150;
	public const uint32 DISPID_IE8_FORM = 1150;
	public const uint32 DISPID_IE8_HEAD = 1150;
	public const uint32 DISPID_IE8_IMG = 1150;
	public const uint32 DISPID_IE8_INPUT = 1150;
	public const uint32 DISPID_IE8_LINK = 1150;
	public const uint32 DISPID_IE8_MOD = 1150;
	public const uint32 DISPID_IE8_SCRIPT = 1150;
	public const uint32 DISPID_IE8_ATTR = 1150;
	public const uint32 DISPID_IE8_NAMEDNODEMAP = 1150;
	public const uint32 DISPID_IE8_COLLECTION = 1150;
	public const uint32 DISPID_IE8_PARAM = 1150;
	public const uint32 DISPID_IE8_EMBED = 1150;
	public const uint32 DISPID_IE8_BLOCK = 1150;
	public const uint32 DISPID_IE8_META = 1150;
	public const uint32 DISPID_IE8_STYLE = 1150;
	public const uint32 DISPID_IE8_SELECT = 1150;
	public const uint32 DISPID_IE8_ELEMENTBASE = 66736;
	public const uint32 DISPID_IE8_ELEMENTMAX = 66776;
	public const uint32 DISPID_IE8_ELEMENT = 66736;
	public const uint32 DISPID_IE8_FRAMESITEBASE = 69656;
	public const uint32 DISPID_IE8_FRAME = 69656;
	public const uint32 DISPID_IE8_IFRAME = 69656;
	public const uint32 DISPID_IE8_OBJECTBASE = 68566;
	public const uint32 DISPID_IE8_OBJECT = 68566;
	public const uint32 DISPID_IE9_ELEMENTBASE = 66786;
	public const uint32 DISPID_IE9_ELEMENTMAX = 66821;
	public const uint32 DISPID_IE9_ELEMENT = 66786;
	public const uint32 DISPID_IE10_ELEMENTBASE = 66822;
	public const uint32 DISPID_IE10_ELEMENT = 66822;
	public const uint32 DISP10_IE10_XMSARIAFLOWFROM = 66835;
	public const int32 DISPID_WINDOWOBJECT = -5500;
	public const int32 DISPID_PERFORMANCEOBJECT = -5505;
	public const int32 DISPID_LOCATIONOBJECT = -5506;
	public const int32 DISPID_HISTORYOBJECT = -5507;
	public const int32 DISPID_NAVIGATOROBJECT = -5508;
	public const int32 DISPID_SECURITYCTX = -5511;
	public const int32 DISPID_AMBIENT_DLCONTROL = -5512;
	public const int32 DISPID_AMBIENT_USERAGENT = -5513;
	public const int32 DISPID_SECURITYDOMAIN = -5514;
	public const int32 DISPID_DEBUG_ISSECUREPROXY = -5515;
	public const int32 DISPID_DEBUG_TRUSTEDPROXY = -5516;
	public const int32 DISPID_DEBUG_INTERNALWINDOW = -5517;
	public const int32 DISPID_DEBUG_ENABLESECUREPROXYASSERTS = -5518;
	public const uint32 DLCTL_DLIMAGES = 16;
	public const uint32 DLCTL_VIDEOS = 32;
	public const uint32 DLCTL_BGSOUNDS = 64;
	public const uint32 DLCTL_NO_SCRIPTS = 128;
	public const uint32 DLCTL_NO_JAVA = 256;
	public const uint32 DLCTL_NO_RUNACTIVEXCTLS = 512;
	public const uint32 DLCTL_NO_DLACTIVEXCTLS = 1024;
	public const uint32 DLCTL_DOWNLOADONLY = 2048;
	public const uint32 DLCTL_NO_FRAMEDOWNLOAD = 4096;
	public const uint32 DLCTL_RESYNCHRONIZE = 8192;
	public const uint32 DLCTL_PRAGMA_NO_CACHE = 16384;
	public const uint32 DLCTL_NO_BEHAVIORS = 32768;
	public const uint32 DLCTL_NO_METACHARSET = 65536;
	public const uint32 DLCTL_URL_ENCODING_DISABLE_UTF8 = 131072;
	public const uint32 DLCTL_URL_ENCODING_ENABLE_UTF8 = 262144;
	public const uint32 DLCTL_NOFRAMES = 524288;
	public const uint32 DLCTL_FORCEOFFLINE = 268435456;
	public const uint32 DLCTL_NO_CLIENTPULL = 536870912;
	public const uint32 DLCTL_SILENT = 1073741824;
	public const uint32 DLCTL_OFFLINEIFNOTCONNECTED = 2147483648;
	public const uint32 DLCTL_OFFLINE = 2147483648;
	public const uint32 DISPID_ONABORT = 1000;
	public const uint32 DISPID_ONCHANGE = 1001;
	public const uint32 DISPID_ONERROR = 1002;
	public const uint32 DISPID_ONLOAD = 1003;
	public const uint32 DISPID_ONSELECT = 1006;
	public const uint32 DISPID_ONSUBMIT = 1007;
	public const uint32 DISPID_ONUNLOAD = 1008;
	public const uint32 DISPID_ONBOUNCE = 1009;
	public const uint32 DISPID_ONFINISH = 1010;
	public const uint32 DISPID_ONSTART = 1011;
	public const uint32 DISPID_ONLAYOUT = 1013;
	public const uint32 DISPID_ONSCROLL = 1014;
	public const uint32 DISPID_ONRESET = 1015;
	public const uint32 DISPID_ONRESIZE = 1016;
	public const uint32 DISPID_ONBEFOREUNLOAD = 1017;
	public const uint32 DISPID_ONCHANGEFOCUS = 1018;
	public const uint32 DISPID_ONCHANGEBLUR = 1019;
	public const uint32 DISPID_ONPERSIST = 1020;
	public const uint32 DISPID_ONPERSISTSAVE = 1021;
	public const uint32 DISPID_ONPERSISTLOAD = 1022;
	public const uint32 DISPID_ONCONTEXTMENU = 1023;
	public const uint32 DISPID_ONBEFOREPRINT = 1024;
	public const uint32 DISPID_ONAFTERPRINT = 1025;
	public const uint32 DISPID_ONSTOP = 1026;
	public const uint32 DISPID_ONBEFOREEDITFOCUS = 1027;
	public const uint32 DISPID_ONMOUSEHOVER = 1028;
	public const uint32 DISPID_ONCONTENTREADY = 1029;
	public const uint32 DISPID_ONLAYOUTCOMPLETE = 1030;
	public const uint32 DISPID_ONPAGE = 1031;
	public const uint32 DISPID_ONLINKEDOVERFLOW = 1032;
	public const uint32 DISPID_ONMOUSEWHEEL = 1033;
	public const uint32 DISPID_ONBEFOREDEACTIVATE = 1034;
	public const uint32 DISPID_ONMOVE = 1035;
	public const uint32 DISPID_ONCONTROLSELECT = 1036;
	public const uint32 DISPID_ONSELECTIONCHANGE = 1037;
	public const uint32 DISPID_ONMOVESTART = 1038;
	public const uint32 DISPID_ONMOVEEND = 1039;
	public const uint32 DISPID_ONRESIZESTART = 1040;
	public const uint32 DISPID_ONRESIZEEND = 1041;
	public const uint32 DISPID_ONMOUSEENTER = 1042;
	public const uint32 DISPID_ONMOUSELEAVE = 1043;
	public const uint32 DISPID_ONACTIVATE = 1044;
	public const uint32 DISPID_ONDEACTIVATE = 1045;
	public const uint32 DISPID_ONMULTILAYOUTCLEANUP = 1046;
	public const uint32 DISPID_ONBEFOREACTIVATE = 1047;
	public const uint32 DISPID_ONFOCUSIN = 1048;
	public const uint32 DISPID_ONFOCUSOUT = 1049;
	public const uint32 DISPID_ONVALUECHANGE = 1050;
	public const uint32 DISPID_ONSELECTADD = 1051;
	public const uint32 DISPID_ONSELECTREMOVE = 1052;
	public const uint32 DISPID_ONSELECTWITHIN = 1053;
	public const uint32 DISPID_ONSYSTEMSCROLLINGSTART = 1054;
	public const uint32 DISPID_ONSYSTEMSCROLLINGEND = 1055;
	public const uint32 DISPID_ONOBJECTCONTENTSCROLLED = 1056;
	public const uint32 DISPID_ONSTORAGE = 1057;
	public const uint32 DISPID_ONSTORAGECOMMIT = 1058;
	public const uint32 DISPID_ONSHOW = 1059;
	public const uint32 DISPID_ONHIDE = 1060;
	public const uint32 DISPID_ONALERT = 1061;
	public const uint32 DISPID_ONPOPUPMENUSTART = 1062;
	public const uint32 DISPID_ONPOPUPMENUEND = 1063;
	public const uint32 DISPID_ONONLINE = 1064;
	public const uint32 DISPID_ONOFFLINE = 1065;
	public const uint32 DISPID_ONHASHCHANGE = 1066;
	public const uint32 DISPID_ONMESSAGE = 1067;
	public const uint32 DISPID_ONDOMMUTATION = 1068;
	public const uint32 DISPID_SVGLOAD = 1069;
	public const uint32 DISPID_SVGUNLOAD = 1070;
	public const uint32 DISPID_SVGABORT = 1071;
	public const uint32 DISPID_SVGERROR = 1072;
	public const uint32 DISPID_SVGRESIZE = 1073;
	public const uint32 DISPID_SVGSCROLL = 1074;
	public const uint32 DISPID_SVGZOOM = 1075;
	public const uint32 DISPID_MSPOINTERDOWN = 1076;
	public const uint32 DISPID_MSPOINTERMOVE = 1077;
	public const uint32 DISPID_MSPOINTERUP = 1078;
	public const uint32 DISPID_MSPOINTEROVER = 1079;
	public const uint32 DISPID_MSPOINTEROUT = 1080;
	public const uint32 DISPID_MSPOINTERCANCEL = 1081;
	public const uint32 DISPID_MSPOINTERHOVER = 1082;
	public const uint32 DISPID_MSGESTURESTART = 1083;
	public const uint32 DISPID_MSGESTURECHANGE = 1084;
	public const uint32 DISPID_MSGESTUREEND = 1085;
	public const uint32 DISPID_MSGESTUREHOLD = 1086;
	public const uint32 DISPID_MSGESTURETAP = 1087;
	public const uint32 DISPID_MSGESTUREDOUBLETAP = 1088;
	public const uint32 DISPID_MSINERTIASTART = 1089;
	public const uint32 DISPID_MSLOSTPOINTERCAPTURE = 1090;
	public const uint32 DISPID_MSGOTPOINTERCAPTURE = 1091;
	public const uint32 DISPID_MSTRANSITIONSTART = 1092;
	public const uint32 DISPID_MSTRANSITIONEND = 1093;
	public const uint32 DISPID_MSANIMATIONSTART = 1094;
	public const uint32 DISPID_MSANIMATIONEND = 1095;
	public const uint32 DISPID_MSANIMATIONITERATION = 1096;
	public const uint32 DISPID_MSGESTUREINIT = 1097;
	public const uint32 DISPID_MSMANIPULATIONSTATECHANGED = 1098;
	public const uint32 DISPID_ONOPEN = 1099;
	public const uint32 DISPID_ONCLOSE = 1100;
	public const uint32 DISPID_MSPOINTERENTER = 1101;
	public const uint32 DISPID_MSPOINTERLEAVE = 1102;
	public const uint32 DISPID_MSORIENTATIONCHANGE = 1103;
	public const uint32 DISPID_ONDEVICEORIENTATION = 1104;
	public const uint32 DISPID_ONDEVICEMOTION = 1105;
	public const uint32 DISPID_ONPAGESHOW = 1106;
	public const uint32 DISPID_ONPAGEHIDE = 1107;
	public const uint32 DISPID_ONCOMPASSNEEDSCALIBRATION = 1108;
	public const uint32 DISPID_A_FIRST = 70536;
	public const uint32 DISPID_A_MIN = 70536;
	public const uint32 DISPID_A_MAX = 71535;
	public const uint32 DISPID_A_BACKGROUNDIMAGE = 70537;
	public const uint32 DISPID_A_COLOR = 70538;
	public const uint32 DISPID_A_TEXTTRANSFORM = 70540;
	public const uint32 DISPID_A_NOWRAP = 70541;
	public const uint32 DISPID_A_LINEHEIGHT = 70542;
	public const uint32 DISPID_A_TEXTINDENT = 70543;
	public const uint32 DISPID_A_LETTERSPACING = 70544;
	public const uint32 DISPID_A_LANG = 70545;
	public const uint32 DISPID_A_OVERFLOW = 70546;
	public const uint32 DISPID_A_PADDING = 70547;
	public const uint32 DISPID_A_PADDINGTOP = 70548;
	public const uint32 DISPID_A_PADDINGRIGHT = 70549;
	public const uint32 DISPID_A_PADDINGBOTTOM = 70550;
	public const uint32 DISPID_A_PADDINGLEFT = 70551;
	public const uint32 DISPID_A_CLEAR = 70552;
	public const uint32 DISPID_A_LISTTYPE = 70553;
	public const uint32 DISPID_A_FONTFACE = 70554;
	public const uint32 DISPID_A_FONTSIZE = 70555;
	public const uint32 DISPID_A_TEXTDECORATIONLINETHROUGH = 70556;
	public const uint32 DISPID_A_TEXTDECORATIONUNDERLINE = 70557;
	public const uint32 DISPID_A_TEXTDECORATIONBLINK = 70558;
	public const uint32 DISPID_A_TEXTDECORATIONNONE = 70559;
	public const uint32 DISPID_A_FONTSTYLE = 70560;
	public const uint32 DISPID_A_FONTVARIANT = 70561;
	public const uint32 DISPID_A_BASEFONT = 70562;
	public const uint32 DISPID_A_FONTWEIGHT = 70563;
	public const uint32 DISPID_A_TABLEBORDERCOLOR = 70564;
	public const uint32 DISPID_A_TABLEBORDERCOLORLIGHT = 70565;
	public const uint32 DISPID_A_TABLEBORDERCOLORDARK = 70566;
	public const uint32 DISPID_A_TABLEVALIGN = 70567;
	public const uint32 DISPID_A_BACKGROUND = 70568;
	public const uint32 DISPID_A_BACKGROUNDPOSX = 70569;
	public const uint32 DISPID_A_BACKGROUNDPOSY = 70570;
	public const uint32 DISPID_A_TEXTDECORATION = 70571;
	public const uint32 DISPID_A_MARGIN = 70572;
	public const uint32 DISPID_A_MARGINTOP = 70573;
	public const uint32 DISPID_A_MARGINRIGHT = 70574;
	public const uint32 DISPID_A_MARGINBOTTOM = 70575;
	public const uint32 DISPID_A_MARGINLEFT = 70576;
	public const uint32 DISPID_A_FONT = 70577;
	public const uint32 DISPID_A_FONTSIZEKEYWORD = 70578;
	public const uint32 DISPID_A_FONTSIZECOMBINE = 70579;
	public const uint32 DISPID_A_BACKGROUNDREPEAT = 70580;
	public const uint32 DISPID_A_BACKGROUNDATTACHMENT = 70581;
	public const uint32 DISPID_A_BACKGROUNDPOSITION = 70582;
	public const uint32 DISPID_A_WORDSPACING = 70583;
	public const uint32 DISPID_A_VERTICALALIGN = 70584;
	public const uint32 DISPID_A_BORDER = 70585;
	public const uint32 DISPID_A_BORDERTOP = 70586;
	public const uint32 DISPID_A_BORDERRIGHT = 70587;
	public const uint32 DISPID_A_BORDERBOTTOM = 70588;
	public const uint32 DISPID_A_BORDERLEFT = 70589;
	public const uint32 DISPID_A_BORDERCOLOR = 70590;
	public const uint32 DISPID_A_BORDERTOPCOLOR = 70591;
	public const uint32 DISPID_A_BORDERRIGHTCOLOR = 70592;
	public const uint32 DISPID_A_BORDERBOTTOMCOLOR = 70593;
	public const uint32 DISPID_A_BORDERLEFTCOLOR = 70594;
	public const uint32 DISPID_A_BORDERWIDTH = 70595;
	public const uint32 DISPID_A_BORDERTOPWIDTH = 70596;
	public const uint32 DISPID_A_BORDERRIGHTWIDTH = 70597;
	public const uint32 DISPID_A_BORDERBOTTOMWIDTH = 70598;
	public const uint32 DISPID_A_BORDERLEFTWIDTH = 70599;
	public const uint32 DISPID_A_BORDERSTYLE = 70600;
	public const uint32 DISPID_A_BORDERTOPSTYLE = 70601;
	public const uint32 DISPID_A_BORDERRIGHTSTYLE = 70602;
	public const uint32 DISPID_A_BORDERBOTTOMSTYLE = 70603;
	public const uint32 DISPID_A_BORDERLEFTSTYLE = 70604;
	public const uint32 DISPID_A_TEXTDECORATIONOVERLINE = 70605;
	public const uint32 DISPID_A_FLOAT = 70606;
	public const uint32 DISPID_A_DISPLAY = 70607;
	public const uint32 DISPID_A_LISTSTYLETYPE = 70608;
	public const uint32 DISPID_A_LISTSTYLEPOSITION = 70609;
	public const uint32 DISPID_A_LISTSTYLEIMAGE = 70610;
	public const uint32 DISPID_A_LISTSTYLE = 70611;
	public const uint32 DISPID_A_WHITESPACE = 70612;
	public const uint32 DISPID_A_PAGEBREAKBEFORE = 70613;
	public const uint32 DISPID_A_PAGEBREAKAFTER = 70614;
	public const uint32 DISPID_A_SCROLL = 70615;
	public const uint32 DISPID_A_VISIBILITY = 70616;
	public const uint32 DISPID_A_HIDDEN = 70617;
	public const uint32 DISPID_A_FILTER = 70618;
	public const uint32 DISPID_DEFAULTVALUE = 70619;
	public const uint32 DISPID_A_BORDERCOLLAPSE = 70620;
	public const uint32 DISPID_A_POSITION = 70626;
	public const uint32 DISPID_A_ZINDEX = 70627;
	public const uint32 DISPID_A_CLIP = 70628;
	public const uint32 DISPID_A_CLIPRECTTOP = 70629;
	public const uint32 DISPID_A_CLIPRECTRIGHT = 70630;
	public const uint32 DISPID_A_CLIPRECTBOTTOM = 70631;
	public const uint32 DISPID_A_CLIPRECTLEFT = 70632;
	public const uint32 DISPID_A_FONTFACESRC = 70633;
	public const uint32 DISPID_A_TABLELAYOUT = 70634;
	public const uint32 DISPID_A_STYLETEXT = 70635;
	public const uint32 DISPID_A_LANGUAGE = 70636;
	public const uint32 DISPID_A_VALUE = 70637;
	public const uint32 DISPID_A_CURSOR = 70638;
	public const uint32 DISPID_A_EVENTSINK = 70639;
	public const uint32 DISPID_A_PROPNOTIFYSINK = 70640;
	public const uint32 DISPID_A_ROWSETNOTIFYSINK = 70641;
	public const uint32 DISPID_INTERNAL_INLINESTYLEAA = 70642;
	public const uint32 DISPID_INTERNAL_CSTYLEPTRCACHE = 70643;
	public const uint32 DISPID_INTERNAL_CRUNTIMESTYLEPTRCACHE = 70644;
	public const uint32 DISPID_INTERNAL_INVOKECONTEXT = 70645;
	public const uint32 DISPID_A_BGURLIMGCTXCACHEINDEX = 70646;
	public const uint32 DISPID_A_LIURLIMGCTXCACHEINDEX = 70647;
	public const uint32 DISPID_A_ROWSETASYNCHNOTIFYSINK = 70648;
	public const uint32 DISPID_INTERNAL_FILTERPTRCACHE = 70649;
	public const uint32 DISPID_A_ROWPOSITIONCHANGESINK = 70650;
	public const uint32 DISPID_A_BEHAVIOR = 70651;
	public const uint32 DISPID_A_READYSTATE = 70652;
	public const uint32 DISPID_A_DIR = 70653;
	public const uint32 DISPID_A_UNICODEBIDI = 70654;
	public const uint32 DISPID_A_DIRECTION = 70655;
	public const uint32 DISPID_A_IMEMODE = 70656;
	public const uint32 DISPID_A_RUBYALIGN = 70657;
	public const uint32 DISPID_A_RUBYPOSITION = 70658;
	public const uint32 DISPID_A_RUBYOVERHANG = 70659;
	public const uint32 DISPID_INTERNAL_ONBEHAVIOR_CONTENTREADY = 70660;
	public const uint32 DISPID_INTERNAL_ONBEHAVIOR_DOCUMENTREADY = 70661;
	public const uint32 DISPID_INTERNAL_CDOMCHILDRENPTRCACHE = 70662;
	public const uint32 DISPID_A_LAYOUTGRIDCHAR = 70663;
	public const uint32 DISPID_A_LAYOUTGRIDLINE = 70664;
	public const uint32 DISPID_A_LAYOUTGRIDMODE = 70665;
	public const uint32 DISPID_A_LAYOUTGRIDTYPE = 70666;
	public const uint32 DISPID_A_LAYOUTGRID = 70667;
	public const uint32 DISPID_A_TEXTAUTOSPACE = 70668;
	public const uint32 DISPID_A_LINEBREAK = 70669;
	public const uint32 DISPID_A_WORDBREAK = 70670;
	public const uint32 DISPID_A_TEXTJUSTIFY = 70671;
	public const uint32 DISPID_A_TEXTJUSTIFYTRIM = 70672;
	public const uint32 DISPID_A_TEXTKASHIDA = 70673;
	public const uint32 DISPID_A_OVERFLOWX = 70675;
	public const uint32 DISPID_A_OVERFLOWY = 70676;
	public const uint32 DISPID_A_HTCDISPATCHITEM_VALUE = 70677;
	public const uint32 DISPID_A_DOCFRAGMENT = 70678;
	public const uint32 DISPID_A_HTCDD_ELEMENT = 70679;
	public const uint32 DISPID_A_HTCDD_CREATEEVENTOBJECT = 70680;
	public const uint32 DISPID_A_URNATOM = 70681;
	public const uint32 DISPID_A_UNIQUEPEERNUMBER = 70682;
	public const uint32 DISPID_A_ACCELERATOR = 70683;
	public const uint32 DISPID_INTERNAL_ONBEHAVIOR_APPLYSTYLE = 70684;
	public const uint32 DISPID_INTERNAL_RUNTIMESTYLEAA = 70685;
	public const uint32 DISPID_A_HTCDISPATCHITEM_VALUE_SCRIPTSONLY = 70686;
	public const uint32 DISPID_A_EXTENDEDTAGDESC = 70687;
	public const uint32 DISPID_A_ROTATE = 70688;
	public const uint32 DISPID_A_ZOOM = 70689;
	public const uint32 DISPID_A_HTCDD_PROTECTEDELEMENT = 70690;
	public const uint32 DISPID_A_LAYOUTFLOW = 70691;
	public const uint32 DISPID_INTERNAL_FILTERNATIVEINFOPTRCACHE = 70692;
	public const uint32 DISPID_A_HTCDD_ISMARKUPSHARED = 70693;
	public const uint32 DISPID_A_WORDWRAP = 70694;
	public const uint32 DISPID_A_TEXTUNDERLINEPOSITION = 70695;
	public const uint32 DISPID_A_HASLAYOUT = 70696;
	public const uint32 DISPID_A_MEDIA = 70697;
	public const uint32 DISPID_A_EDITABLE = 70698;
	public const uint32 DISPID_A_HIDEFOCUS = 70699;
	public const uint32 DISPID_INTERNAL_LAYOUTRECTREGISTRYPTRCACHE = 70700;
	public const uint32 DISPID_A_HTCDD_DEFAULTS = 70701;
	public const uint32 DISPID_A_TEXTLINETHROUGHSTYLE = 70702;
	public const uint32 DISPID_A_TEXTUNDERLINESTYLE = 70703;
	public const uint32 DISPID_A_TEXTEFFECT = 70704;
	public const uint32 DISPID_A_TEXTBACKGROUNDCOLOR = 70705;
	public const uint32 DISPID_A_RENDERINGPRIORITY = 70706;
	public const uint32 DISPID_INTERNAL_DWNPOSTPTRCACHE = 70707;
	public const uint32 DISPID_INTERNAL_CODEPAGESETTINGSPTRCACHE = 70708;
	public const uint32 DISPID_INTERNAL_DWNDOCPTRCACHE = 70709;
	public const uint32 DISPID_INTERNAL_DATABINDTASKPTRCACHE = 70710;
	public const uint32 DISPID_INTERNAL_URLLOCATIONCACHE = 70711;
	public const uint32 DISPID_INTERNAL_ARYELEMENTRELEASENOTIFYPTRCACHE = 70712;
	public const uint32 DISPID_INTERNAL_PEERFACTORYURLMAPPTRCACHE = 70713;
	public const uint32 DISPID_INTERNAL_STMDIRTYPTRCACHE = 70714;
	public const uint32 DISPID_INTERNAL_COMPUTEFORMATSTATECACHE = 70715;
	public const uint32 DISPID_A_SCROLLBARBASECOLOR = 70716;
	public const uint32 DISPID_A_SCROLLBARFACECOLOR = 70717;
	public const uint32 DISPID_A_SCROLLBAR3DLIGHTCOLOR = 70718;
	public const uint32 DISPID_A_SCROLLBARSHADOWCOLOR = 70719;
	public const uint32 DISPID_A_SCROLLBARHIGHLIGHTCOLOR = 70720;
	public const uint32 DISPID_A_SCROLLBARDARKSHADOWCOLOR = 70721;
	public const uint32 DISPID_A_SCROLLBARARROWCOLOR = 70722;
	public const uint32 DISPID_INTERNAL_ONBEHAVIOR_CONTENTSAVE = 70723;
	public const uint32 DISPID_A_DEFAULTTEXTSELECTION = 70724;
	public const uint32 DISPID_A_TEXTDECORATIONCOLOR = 70725;
	public const uint32 DISPID_A_TEXTCOLOR = 70726;
	public const uint32 DISPID_A_STYLETEXTDECORATION = 70727;
	public const uint32 DISPID_A_WRITINGMODE = 70728;
	public const uint32 DISPID_INTERNAL_MEDIA_REFERENCE = 70729;
	public const uint32 DISPID_INTERNAL_GENERICCOMPLUSREF = 70730;
	public const uint32 DISPID_INTERNAL_FOCUSITEMS = 70731;
	public const uint32 DISPID_A_SCROLLBARTRACKCOLOR = 70732;
	public const uint32 DISPID_INTERNAL_DWNHEADERCACHE = 70733;
	public const uint32 DISPID_A_FROZEN = 70734;
	public const uint32 DISPID_A_VIEWINHERITSTYLE = 70735;
	public const uint32 DISPID_INTERNAL_FRAMESCOLLECTION = 70736;
	public const uint32 DISPID_A_BGURLIMGCTXCACHEINDEX_FLINE = 70737;
	public const uint32 DISPID_A_BGURLIMGCTXCACHEINDEX_FLETTER = 70738;
	public const uint32 DISPID_A_TEXTALIGNLAST = 70739;
	public const uint32 DISPID_A_TEXTKASHIDASPACE = 70740;
	public const uint32 DISPID_INTERNAL_FONTHISTORYINDEX = 70741;
	public const uint32 DISPID_A_ALLOWTRANSPARENCY = 70742;
	public const uint32 DISPID_INTERNAL_URLSEARCHCACHE = 70743;
	public const uint32 DISPID_A_ISBLOCK = 70744;
	public const uint32 DISPID_A_TEXTOVERFLOW = 70745;
	public const uint32 DISPID_INTERNAL_CATTRIBUTECOLLPTRCACHE = 70746;
	public const uint32 DISPID_A_MINHEIGHT = 70747;
	public const uint32 DISPID_INTERNAL_INVOKECONTEXTDOCUMENT = 70748;
	public const uint32 DISPID_A_INTERPOLATION = 70749;
	public const uint32 DISPID_A_MAXHEIGHT = 70750;
	public const uint32 DISPID_A_MINWIDTH = 70751;
	public const uint32 DISPID_A_MAXWIDTH = 70752;
	public const uint32 DISPID_INTERNAL_ARYOBJECTRELEASECLEANUPPTRCACHE = 70753;
	public const uint32 DISPID_A_CONTENT = 70754;
	public const uint32 DISPID_A_CAPTIONSIDE = 70755;
	public const uint32 DISPID_A_COUNTERINCREMENT = 70756;
	public const uint32 DISPID_A_COUNTERRESET = 70757;
	public const uint32 DISPID_A_OUTLINE = 70758;
	public const uint32 DISPID_A_OUTLINEWIDTH = 70759;
	public const uint32 DISPID_A_OUTLINESTYLE = 70760;
	public const uint32 DISPID_A_OUTLINECOLOR = 70761;
	public const uint32 DISPID_A_BOXSIZING = 70762;
	public const uint32 DISPID_A_BORDERSPACING = 70763;
	public const uint32 DISPID_A_ORPHANS = 70764;
	public const uint32 DISPID_A_WIDOWS = 70765;
	public const uint32 DISPID_A_PAGEBREAKINSIDE = 70766;
	public const uint32 DISPID_A_MS_BEHAVIOR = 70767;
	public const uint32 DISPID_A_MS_SCROLLBARBASECOLOR = 70768;
	public const uint32 DISPID_A_MS_SCROLLBARFACECOLOR = 70769;
	public const uint32 DISPID_A_MS_SCROLLBAR3DLIGHTCOLOR = 70770;
	public const uint32 DISPID_A_MS_SCROLLBARSHADOWCOLOR = 70771;
	public const uint32 DISPID_A_MS_SCROLLBARHIGHLIGHTCOLOR = 70772;
	public const uint32 DISPID_A_MS_SCROLLBARDARKSHADOWCOLOR = 70773;
	public const uint32 DISPID_A_MS_SCROLLBARARROWCOLOR = 70774;
	public const uint32 DISPID_A_MS_SCROLLBARTRACKCOLOR = 70775;
	public const uint32 DISPID_A_MS_TEXTALIGNLAST = 70776;
	public const uint32 DISPID_A_MS_TEXTOVERFLOW = 70777;
	public const uint32 DISPID_A_MS_TEXTUNDERLINEPOSITION = 70778;
	public const uint32 DISPID_A_MS_WRITINGMODE = 70779;
	public const uint32 DISPID_A_MS_IMEMODE = 70780;
	public const uint32 DISPID_A_MS_BACKGROUNDPOSX = 70781;
	public const uint32 DISPID_A_MS_BACKGROUNDPOSY = 70782;
	public const uint32 DISPID_A_MS_ACCELERATOR = 70783;
	public const uint32 DISPID_A_MS_LAYOUTFLOW = 70784;
	public const uint32 DISPID_A_MS_ZOOM = 70785;
	public const uint32 DISPID_A_EMPTYCELLS = 70786;
	public const uint32 DISPID_A_MS_BLOCKPROGRESSION = 70787;
	public const uint32 DISPID_A_QUOTES = 70788;
	public const uint32 DISPID_INTERNAL_BGURLIMGCTXCACHEINDEX_GCBEFORE = 70789;
	public const uint32 DISPID_INTERNAL_BGURLIMGCTXCACHEINDEX_GCAFTER = 70790;
	public const uint32 DISPID_INTERNAL_BGURLIMGCTXCACHEINDEX_URLBEFORE = 70791;
	public const uint32 DISPID_INTERNAL_BGURLIMGCTXCACHEINDEX_URLAFTER = 70792;
	public const uint32 DISPID_AAHEADER = 70793;
	public const uint32 DISPID_INTERNAL_GETTERSETTERCOLLECTION = 70794;
	public const uint32 DISPID_A_MS_LAYOUTGRIDCHAR = 70795;
	public const uint32 DISPID_A_MS_LAYOUTGRIDLINE = 70796;
	public const uint32 DISPID_A_MS_LAYOUTGRIDMODE = 70797;
	public const uint32 DISPID_A_MS_LAYOUTGRIDTYPE = 70798;
	public const uint32 DISPID_A_MS_LAYOUTGRID = 70799;
	public const uint32 DISPID_A_MS_LINEBREAK = 70800;
	public const uint32 DISPID_A_MS_FILTER = 70801;
	public const uint32 DISPID_A_MS_OVERFLOWX = 70802;
	public const uint32 DISPID_A_MS_OVERFLOWY = 70803;
	public const uint32 DISPID_A_MS_TEXTAUTOSPACE = 70804;
	public const uint32 DISPID_A_MS_TEXTJUSTIFY = 70805;
	public const uint32 DISPID_A_MS_TEXTKASHIDASPACE = 70806;
	public const uint32 DISPID_A_MS_WORDBREAK = 70807;
	public const uint32 DISPID_A_MS_WORDWRAP = 70808;
	public const uint32 DISPID_INTERNAL_URIBEFOREREDIRECT = 70809;
	public const uint32 DISPID_A_ALIGNMENTBASELINE = 70814;
	public const uint32 DISPID_A_BASELINESHIFT = 70815;
	public const uint32 DISPID_A_DOMINANTBASELINE = 70816;
	public const uint32 DISPID_A_FONTSIZEADJUST = 70817;
	public const uint32 DISPID_A_FONTSTRETCH = 70818;
	public const uint32 DISPID_A_OPACITY = 70819;
	public const uint32 DISPID_A_CLIPPATH = 70820;
	public const uint32 DISPID_A_CLIPRULE = 70821;
	public const uint32 DISPID_A_FILL = 70822;
	public const uint32 DISPID_A_FILLOPACITY = 70823;
	public const uint32 DISPID_A_FILLRULE = 70824;
	public const uint32 DISPID_A_KERNING = 70825;
	public const uint32 DISPID_A_MARKER = 70826;
	public const uint32 DISPID_A_MARKEREND = 70827;
	public const uint32 DISPID_A_MARKERMID = 70828;
	public const uint32 DISPID_A_MARKERSTART = 70829;
	public const uint32 DISPID_A_MASK = 70830;
	public const uint32 DISPID_A_POINTEREVENTS = 70831;
	public const uint32 DISPID_A_STOPCOLOR = 70832;
	public const uint32 DISPID_A_STOPOPACITY = 70833;
	public const uint32 DISPID_A_STROKE = 70834;
	public const uint32 DISPID_A_STROKEDASHARRAY = 70835;
	public const uint32 DISPID_A_STROKEDASHOFFSET = 70836;
	public const uint32 DISPID_A_STROKELINECAP = 70837;
	public const uint32 DISPID_A_STROKELINEJOIN = 70838;
	public const uint32 DISPID_A_STROKEMITERLIMIT = 70839;
	public const uint32 DISPID_A_STROKEOPACITY = 70840;
	public const uint32 DISPID_A_STROKEWIDTH = 70841;
	public const uint32 DISPID_A_TEXTANCHOR = 70842;
	public const uint32 DISPID_A_GLYPHORIENTATIONHORIZONTAL = 70843;
	public const uint32 DISPID_A_GLYPHORIENTATIONVERTICAL = 70844;
	public const uint32 DISPID_A_CSSFLOAT = 70845;
	public const uint32 DISPID_A_BORDERRADIUS = 70846;
	public const uint32 DISPID_A_BORDERTOPLEFTRADIUS = 70847;
	public const uint32 DISPID_A_BORDERTOPRIGHTRADIUS = 70848;
	public const uint32 DISPID_A_BORDERBOTTOMRIGHTRADIUS = 70849;
	public const uint32 DISPID_A_BORDERBOTTOMLEFTRADIUS = 70850;
	public const uint32 DISPID_A_MS_TRANSFORM = 70851;
	public const uint32 DISPID_A_IE9_BACKGROUNDCLIP = 70852;
	public const uint32 DISPID_A_IE9_BACKGROUNDORIGIN = 70853;
	public const uint32 DISPID_A_IE9_BACKGROUNDSIZE = 70854;
	public const uint32 DISPID_A_IE9_BOXSHADOW = 70855;
	public const uint32 DISPID_A_MS_TRANSFORMORIGIN = 70861;
	public const uint32 DISPID_A_MS_TRANSFORMORIGINX = 70862;
	public const uint32 DISPID_A_MS_TRANSFORMORIGINY = 70863;
	public const uint32 DISPID_A_MS_TEXTSIZEADJUST = 70864;
	public const uint32 DISPID_A_MS_TRANSITIONPROPERTY = 70866;
	public const uint32 DISPID_A_MS_TRANSITIONDURATION = 70867;
	public const uint32 DISPID_A_MS_TRANSITIONTIMINGFUNCTION = 70868;
	public const uint32 DISPID_A_MS_TRANSITIONDELAY = 70869;
	public const uint32 DISPID_A_MS_TRANSITION = 70870;
	public const uint32 DISPID_A_COLUMNS = 70871;
	public const uint32 DISPID_A_COLUMNCOUNT = 70872;
	public const uint32 DISPID_A_COLUMNWIDTH = 70873;
	public const uint32 DISPID_A_COLUMNGAP = 70874;
	public const uint32 DISPID_A_COLUMNFILL = 70875;
	public const uint32 DISPID_A_COLUMNSPAN = 70876;
	public const uint32 DISPID_A_COLUMNRULE = 70877;
	public const uint32 DISPID_A_COLUMNRULESTYLE = 70878;
	public const uint32 DISPID_A_COLUMNRULEWIDTH = 70879;
	public const uint32 DISPID_A_COLUMNRULECOLOR = 70880;
	public const uint32 DISPID_A_BREAKBEFORE = 70881;
	public const uint32 DISPID_A_BREAKAFTER = 70882;
	public const uint32 DISPID_A_BREAKINSIDE = 70883;
	public const uint32 DISPID_A_MS_TRANSFORMORIGINZ = 70884;
	public const uint32 DISPID_A_MS_PERSPECTIVE = 70885;
	public const uint32 DISPID_A_MS_PERSPECTIVEORIGIN = 70886;
	public const uint32 DISPID_A_MS_PERSPECTIVEORIGINX = 70887;
	public const uint32 DISPID_A_MS_PERSPECTIVEORIGINY = 70888;
	public const uint32 DISPID_A_MS_TRANSFORMSTYLE = 70889;
	public const uint32 DISPID_A_MS_BACKFACEVISIBILITY = 70890;
	public const uint32 DISPID_A_MS_SCROLLCHAINING = 70891;
	public const uint32 DISPID_A_MS_CONTENTZOOMING = 70892;
	public const uint32 DISPID_A_MS_CONTENTZOOMSNAPTYPE = 70893;
	public const uint32 DISPID_A_MS_SCROLLRAILS = 70894;
	public const uint32 DISPID_A_MS_CONTENTZOOMCHAINING = 70895;
	public const uint32 DISPID_A_MS_SCROLLSNAPTYPE = 70896;
	public const uint32 DISPID_A_MS_CONTENTZOOMLIMIT = 70897;
	public const uint32 DISPID_A_MS_CONTENTZOOMSNAP = 70898;
	public const uint32 DISPID_A_MS_CONTENTZOOMSNAPPOINTS = 70899;
	public const uint32 DISPID_A_MS_CONTENTZOOMFACTOR = 70900;
	public const uint32 DISPID_A_MS_CONTENTZOOMLIMITMIN = 70901;
	public const uint32 DISPID_A_MS_CONTENTZOOMLIMITMAX = 70902;
	public const uint32 DISPID_A_MS_SCROLLSNAPX = 70903;
	public const uint32 DISPID_A_MS_SCROLLSNAPY = 70904;
	public const uint32 DISPID_A_MS_SCROLLSNAPPOINTSX = 70905;
	public const uint32 DISPID_A_MS_SCROLLSNAPPOINTSY = 70906;
	public const uint32 DISPID_A_SPELLCHECK = 70907;
	public const uint32 DISPID_A_MS_GRIDCOLUMN = 70908;
	public const uint32 DISPID_A_MS_GRIDCOLUMNALIGN = 70909;
	public const uint32 DISPID_A_MS_GRIDCOLUMNS = 70910;
	public const uint32 DISPID_A_MS_GRIDCOLUMNSPAN = 70911;
	public const uint32 DISPID_A_MS_GRIDROW = 70913;
	public const uint32 DISPID_A_MS_GRIDROWALIGN = 70914;
	public const uint32 DISPID_A_MS_GRIDROWS = 70915;
	public const uint32 DISPID_A_MS_GRIDROWSPAN = 70916;
	public const uint32 DISPID_A_MS_ANIMATIONNAME = 70917;
	public const uint32 DISPID_A_MS_ANIMATIONDURATION = 70918;
	public const uint32 DISPID_A_MS_ANIMATIONTIMINGFUNCTION = 70919;
	public const uint32 DISPID_A_MS_ANIMATIONDELAY = 70920;
	public const uint32 DISPID_A_MS_ANIMATIONDIRECTION = 70921;
	public const uint32 DISPID_A_MS_ANIMATIONPLAYSTATE = 70922;
	public const uint32 DISPID_A_MS_ANIMATIONITERATIONCOUNT = 70923;
	public const uint32 DISPID_A_MS_ANIMATION = 70924;
	public const uint32 DISPID_A_MS_ANIMATIONFILLMODE = 70925;
	public const uint32 DISPID_A_FLOODCOLOR = 70926;
	public const uint32 DISPID_A_FLOODOPACITY = 70927;
	public const uint32 DISPID_A_COLORINTERPOLATIONFILTERS = 70928;
	public const uint32 DISPID_A_LIGHTINGCOLOR = 70929;
	public const uint32 DISPID_A_MS_SCROLLLIMITXMIN = 70930;
	public const uint32 DISPID_A_MS_SCROLLLIMITYMIN = 70931;
	public const uint32 DISPID_A_MS_SCROLLLIMITXMAX = 70932;
	public const uint32 DISPID_A_MS_SCROLLLIMITYMAX = 70933;
	public const uint32 DISPID_A_MS_SCROLLLIMIT = 70934;
	public const uint32 DISPID_A_MS_OVERFLOWSTYLE = 70935;
	public const uint32 DISPID_A_TEXTSHADOW = 70936;
	public const uint32 DISPID_A_MS_WRAPTHROUGH = 70937;
	public const uint32 DISPID_A_MS_FLOWFROM = 70938;
	public const uint32 DISPID_A_MS_FLOWINTO = 70939;
	public const uint32 DISPID_A_MS_HYPHENS = 70940;
	public const uint32 DISPID_A_MS_HYPHENATE_LIMIT_ZONE = 70941;
	public const uint32 DISPID_A_MS_HYPHENATE_LIMIT_CHARS = 70942;
	public const uint32 DISPID_A_MS_HYPHENATE_LIMIT_LINES = 70943;
	public const uint32 DISPID_A_DRAGGABLE = 70944;
	public const uint32 DISPID_A_MS_HIGHCONTRASTADJUST = 70945;
	public const uint32 DISPID_A_ENABLEBACKGROUND = 70946;
	public const uint32 DISPID_A_MS_WRAPMARGIN = 70947;
	public const uint32 DISPID_A_MS_WRAPFLOW = 70949;
	public const uint32 DISPID_A_MS_FONTFEATURESETTINGS = 70950;
	public const uint32 DISPID_A_MS_USERSELECT = 70951;
	public const uint32 DISPID_A_MS_TOUCHACTION = 70952;
	public const uint32 DISPID_A_CLASSLIST = 70953;
	public const uint32 DISPID_A_MS_SCROLLTRANSLATION = 70954;
	public const uint32 DISPID_A_MS_FLEX = 70955;
	public const uint32 DISPID_A_MS_FLEXPOSITIVE = 70956;
	public const uint32 DISPID_A_MS_FLEXNEGATIVE = 70957;
	public const uint32 DISPID_A_MS_FLEXPREFERREDSIZE = 70958;
	public const uint32 DISPID_A_MS_FLEXFLOW = 70959;
	public const uint32 DISPID_A_MS_FLEXDIRECTION = 70960;
	public const uint32 DISPID_A_MS_FLEXWRAP = 70961;
	public const uint32 DISPID_A_MS_FLEXALIGN = 70962;
	public const uint32 DISPID_A_MS_FLEXITEMALIGN = 70963;
	public const uint32 DISPID_A_MS_FLEXPACK = 70964;
	public const uint32 DISPID_A_MS_FLEXLINEPACK = 70965;
	public const uint32 DISPID_A_MS_FLEXORDER = 70966;
	public const uint32 DISPID_A_TRANSFORM = 70967;
	public const uint32 DISPID_A_TRANSFORMORIGIN = 70968;
	public const uint32 DISPID_A_TRANSITIONPROPERTY = 70969;
	public const uint32 DISPID_A_TRANSITIONDURATION = 70970;
	public const uint32 DISPID_A_TRANSITIONTIMINGFUNCTION = 70971;
	public const uint32 DISPID_A_TRANSITIONDELAY = 70972;
	public const uint32 DISPID_A_TRANSITION = 70973;
	public const uint32 DISPID_A_PERSPECTIVE = 70974;
	public const uint32 DISPID_A_PERSPECTIVEORIGIN = 70975;
	public const uint32 DISPID_A_TRANSFORMSTYLE = 70976;
	public const uint32 DISPID_A_BACKFACEVISIBILITY = 70977;
	public const uint32 DISPID_A_ANIMATIONNAME = 70978;
	public const uint32 DISPID_A_ANIMATIONDURATION = 70979;
	public const uint32 DISPID_A_ANIMATIONTIMINGFUNCTION = 70980;
	public const uint32 DISPID_A_ANIMATIONDELAY = 70981;
	public const uint32 DISPID_A_ANIMATIONDIRECTION = 70982;
	public const uint32 DISPID_A_ANIMATIONPLAYSTATE = 70983;
	public const uint32 DISPID_A_ANIMATIONITERATIONCOUNT = 70984;
	public const uint32 DISPID_A_ANIMATION = 70985;
	public const uint32 DISPID_A_ANIMATIONFILLMODE = 70986;
	public const uint32 DISPID_A_FONTFEATURESETTINGS = 70987;
	public const uint32 DISPID_A_TRANSFORMORIGINX = 70988;
	public const uint32 DISPID_A_TRANSFORMORIGINY = 70989;
	public const uint32 DISPID_A_TRANSFORMORIGINZ = 70990;
	public const uint32 DISPID_A_PERSPECTIVEORIGINX = 70992;
	public const uint32 DISPID_A_PERSPECTIVEORIGINY = 70993;
	public const uint32 DISPID_A_MS_TOUCHSELECT = 70994;
	public const uint32 DISPID_INTERNAL_ERRORPAGEREFRESHURL = 70995;
	public const uint32 DISPID_INTERNAL_ERRORPAGEREASON = 70996;
	public const uint32 DISPID_INTERNAL_ERRORPAGEDWNPOST = 70997;
	public const uint32 DISPID_A_FLEXDIRECTION = 70998;
	public const uint32 DISPID_A_FLEXWRAP = 70999;
	public const uint32 DISPID_A_FLEXFLOW = 71000;
	public const uint32 DISPID_A_ORDER = 71001;
	public const uint32 DISPID_A_FLEX = 71002;
	public const uint32 DISPID_A_FLEXGROW = 71003;
	public const uint32 DISPID_A_FLEXSHRINK = 71004;
	public const uint32 DISPID_A_FLEXBASIS = 71005;
	public const uint32 DISPID_A_JUSTIFYCONTENT = 71006;
	public const uint32 DISPID_A_ALIGNITEMS = 71007;
	public const uint32 DISPID_A_ALIGNSELF = 71008;
	public const uint32 DISPID_A_ALIGNCONTENT = 71009;
	public const uint32 DISPID_A_BORDERIMAGE = 71010;
	public const uint32 DISPID_A_BORDERIMAGESOURCE = 71011;
	public const uint32 DISPID_A_BORDERIMAGESLICE = 71012;
	public const uint32 DISPID_A_BORDERIMAGEWIDTH = 71013;
	public const uint32 DISPID_A_BORDERIMAGEOUTSET = 71014;
	public const uint32 DISPID_A_BORDERIMAGEREPEAT = 71015;
	public const uint32 DISPID_A_DATASET = 71016;
	public const uint32 DISPID_A_MS_IMEALIGN = 71017;
	public const uint32 DISPID_A_MS_TEXTCOMBINEHORIZONTAL = 71018;
	public const uint32 DISPID_A_TOUCHACTION = 71019;
	public const uint32 DISPID_A_WEBKIT_APPEARANCE = 71020;
	public const uint32 DISPID_A_WEBKIT_BOXALIGN = 71021;
	public const uint32 DISPID_A_WEBKIT_BOXORDINALGROUP = 71022;
	public const uint32 DISPID_A_WEBKIT_BOXPACK = 71023;
	public const uint32 DISPID_A_WEBKIT_BOXFLEX = 71024;
	public const uint32 DISPID_A_WEBKIT_BOXORIENT = 71025;
	public const uint32 DISPID_A_WEBKIT_BOXDIRECTION = 71026;
	public const uint32 DISPID_A_WEBKIT_ANIMATIONFILLMODE = 71027;
	public const uint32 DISPID_A_WEBKIT_TRANSFORM = 71028;
	public const uint32 DISPID_A_WEBKIT_BACKGROUNDSIZE = 71029;
	public const uint32 DISPID_A_WEBKIT_BACKFACEVISIBILITY = 71030;
	public const uint32 DISPID_A_WEBKIT_BOXSIZING = 71031;
	public const uint32 DISPID_A_WEBKIT_USERSELECT = 71032;
	public const uint32 DISPID_A_WEBKIT_ANIMATION = 71033;
	public const uint32 DISPID_A_WEBKIT_TRANSITION = 71034;
	public const uint32 DISPID_A_WEBKIT_ANIMATIONNAME = 71035;
	public const uint32 DISPID_A_WEBKIT_ANIMATIONDURATION = 71036;
	public const uint32 DISPID_A_WEBKIT_ANIMATIONTIMINGFUNCTION = 71037;
	public const uint32 DISPID_A_WEBKIT_ANIMATIONDELAY = 71038;
	public const uint32 DISPID_A_WEBKIT_ANIMATIONITERATIONCOUNT = 71039;
	public const uint32 DISPID_A_WEBKIT_ANIMATIONDIRECTION = 71040;
	public const uint32 DISPID_A_WEBKIT_ANIMATIONPLAYSTATE = 71041;
	public const uint32 DISPID_A_WEBKIT_TRANSITIONPROPERTY = 71042;
	public const uint32 DISPID_A_WEBKIT_TRANSITIONDURATION = 71043;
	public const uint32 DISPID_A_WEBKIT_TRANSITIONTIMINGFUNCTION = 71044;
	public const uint32 DISPID_A_WEBKIT_TRANSITIONDELAY = 71045;
	public const uint32 DISPID_A_WEBKIT_BACKGROUNDATTACHMENT = 71046;
	public const uint32 DISPID_A_WEBKIT_BACKGROUNDCOLOR = 71047;
	public const uint32 DISPID_A_WEBKIT_BACKGROUNDCLIP = 71048;
	public const uint32 DISPID_A_WEBKIT_BACKGROUNDIMAGE = 71049;
	public const uint32 DISPID_A_WEBKIT_BACKGROUNDREPEAT = 71050;
	public const uint32 DISPID_A_WEBKIT_BACKGROUNDORIGIN = 71051;
	public const uint32 DISPID_A_WEBKIT_BACKGROUNDPOSITION = 71052;
	public const uint32 DISPID_A_WEBKIT_BACKGROUNDPOSITIONX = 71053;
	public const uint32 DISPID_A_WEBKIT_BACKGROUNDPOSITIONY = 71054;
	public const uint32 DISPID_A_WEBKIT_BACKGROUND = 71055;
	public const uint32 DISPID_A_WEBKIT_TRANSFORMORIGIN = 71056;
	public const uint32 DISPID_A_WEBKIT_TRANSFORMORIGINX = 71057;
	public const uint32 DISPID_A_WEBKIT_TRANSFORMORIGINY = 71058;
	public const uint32 DISPID_A_WEBKIT_TRANSFORMORIGINZ = 71059;
	public const uint32 DISPID_A_WEBKIT_TEXTSIZEADJUST = 71060;
	public const uint32 DISPID_A_WEBKIT_BORDERIMAGE = 71061;
	public const uint32 DISPID_A_WEBKIT_BORDERIMAGESOURCE = 71062;
	public const uint32 DISPID_A_WEBKIT_BORDERIMAGESLICE = 71063;
	public const uint32 DISPID_A_WEBKIT_BORDERIMAGEWIDTH = 71064;
	public const uint32 DISPID_A_WEBKIT_BORDERIMAGEOUTSET = 71065;
	public const uint32 DISPID_A_WEBKIT_BORDERIMAGEREPEAT = 71066;
	public const uint32 DISPID_INTERNAL_FIRST = 71136;
	public const uint32 DISPID_INTERNAL_BACKGROUNDDEFINITION = 71137;
	public const uint32 DISPID_A_MEDIAORIENTATION = 71138;
	public const uint32 DISPID_A_MEDIAMAXWIDTH = 71139;
	public const uint32 DISPID_A_MEDIAMINWIDTH = 71140;
	public const uint32 DISPID_A_MEDIAWIDTH = 71141;
	public const uint32 DISPID_A_MEDIAMAXHEIGHT = 71142;
	public const uint32 DISPID_A_MEDIAMINHEIGHT = 71143;
	public const uint32 DISPID_A_MEDIAHEIGHT = 71144;
	public const uint32 DISPID_A_MEDIAMAXDEVICEWIDTH = 71145;
	public const uint32 DISPID_A_MEDIAMINDEVICEWIDTH = 71146;
	public const uint32 DISPID_A_MEDIADEVICEWIDTH = 71147;
	public const uint32 DISPID_A_MEDIAMAXDEVICEHEIGHT = 71148;
	public const uint32 DISPID_A_MEDIAMINDEVICEHEIGHT = 71149;
	public const uint32 DISPID_A_MEDIADEVICEHEIGHT = 71150;
	public const uint32 DISPID_A_MEDIAMAXASPECTRATIO = 71151;
	public const uint32 DISPID_A_MEDIAMINASPECTRATIO = 71152;
	public const uint32 DISPID_A_MEDIAASPECTRATIO = 71153;
	public const uint32 DISPID_A_MEDIAMAXDEVICEASPECTRATIO = 71154;
	public const uint32 DISPID_A_MEDIAMINDEVICEASPECTRATIO = 71155;
	public const uint32 DISPID_A_MEDIADEVICEASPECTRATIO = 71156;
	public const uint32 DISPID_A_MEDIAMAXCOLOR = 71157;
	public const uint32 DISPID_A_MEDIAMINCOLOR = 71158;
	public const uint32 DISPID_A_MEDIACOLOR = 71159;
	public const uint32 DISPID_A_MEDIAMAXCOLORINDEX = 71160;
	public const uint32 DISPID_A_MEDIAMINCOLORINDEX = 71161;
	public const uint32 DISPID_A_MEDIACOLORINDEX = 71162;
	public const uint32 DISPID_A_MEDIAMAXMONOCHROME = 71163;
	public const uint32 DISPID_A_MEDIAMINMONOCHROME = 71164;
	public const uint32 DISPID_A_MEDIAMONOCHROME = 71165;
	public const uint32 DISPID_A_MEDIAMAXRESOLUTION = 71166;
	public const uint32 DISPID_A_MEDIAMINRESOLUTION = 71167;
	public const uint32 DISPID_A_MEDIARESOLUTION = 71168;
	public const uint32 DISPID_INTERNAL_CATTRIBUTEPTRCACHE = 71169;
	public const uint32 DISPID_INTERNAL_FONTFACEUNICODERANGE = 71170;
	public const uint32 DISPID_INTERNAL_TOUCHTARGETHANDLER = 71171;
	public const uint32 DISPID_INTERNAL_PAGEFLOWCOLLECTION = 71172;
	public const uint32 DISPID_INTERNAL_NAMEDFLOWCOLLECTION = 71173;
	public const uint32 DISPID_A_MEDIAMSHIGHCONTRAST = 71174;
	public const uint32 DISPID_INTERNAL_A_MS_HYPHENATE_LIMIT_WORDS = 71175;
	public const uint32 DISPID_INTERNAL_A_MS_HYPHENATE_LIMIT_BEFORE = 71176;
	public const uint32 DISPID_INTERNAL_A_MS_HYPHENATE_LIMIT_AFTER = 71177;
	public const uint32 DISPID_A_MEDIAMSVIEWSTATE = 71178;
	public const uint32 DISPID_INTERNAL_ARIAATOMIC = 71179;
	public const uint32 DISPID_INTERNAL_ARIAAUTOCOMPLETE = 71180;
	public const uint32 DISPID_INTERNAL_ARIADROPEFFECT = 71181;
	public const uint32 DISPID_INTERNAL_ARIAGRABBED = 71182;
	public const uint32 DISPID_INTERNAL_ARIALABEL = 71183;
	public const uint32 DISPID_INTERNAL_ARIAMULTILINE = 71184;
	public const uint32 DISPID_INTERNAL_ARIAORIENTATION = 71185;
	public const uint32 DISPID_INTERNAL_ARIASORT = 71186;
	public const uint32 DISPID_INTERNAL_ARIAVALUETEXT = 71187;
	public const uint32 DISPID_A_MEDIAGRID = 71188;
	public const uint32 DISPID_A_MEDIASCAN = 71189;
	public const uint32 DISPID_A_ACCEVENTRECORDID_START = 71190;
	public const uint32 DISPID_A_ACCEVENTRECORDID_END = 71209;
	public const uint32 DISPID_INTERNAL_REQUIRED = 71210;
	public const uint32 DISPID_INTERNAL_CSS_PARSEDARY = 71211;
	public const uint32 DISPID_INTERNAL_SOURCELOCATION = 71212;
	public const uint32 DISPID_INTERNAL_CSS_TRACEDSTYLES = 71213;
	public const uint32 DISPID_A_BDURLIMGCTXCACHEINDEX = 71214;
	public const uint32 DISPID_A_MEDIAWEBKITDEVICEPIXELRATIO = 71215;
	public const uint32 DISPID_A_MEDIAWEBKITMAXDEVICEPIXELRATIO = 71216;
	public const uint32 DISPID_A_MEDIAWEBKITMINDEVICEPIXELRATIO = 71217;
	public const uint32 DISPID_SVGSTYLABLE_CLASSNAME_PROP = 1001;
	public const uint32 DISPID_SVGLOCATABLE_NEARESTVIEWPORTELEMENT = 1002;
	public const uint32 DISPID_SVGLOCATABLE_FARTHESTVIEWPORTELEMENT = 1003;
	public const uint32 DISPID_SVGLOCATABLE_GETBBOX = 1004;
	public const uint32 DISPID_SVGLOCATABLE_GETCTM = 1005;
	public const uint32 DISPID_SVGLOCATABLE_GETSCREENCTM = 1006;
	public const uint32 DISPID_SVGLOCATABLE_GETTRANSFORMTOELEMENT = 1007;
	public const uint32 DISPID_SVGTRANSFORMABLE_TRANSFORM_ATTR = 1008;
	public const uint32 DISPID_SVGTRANSFORMABLE_TRANSFORM_PROP = 1009;
	public const uint32 DISPID_SVGTESTS_REQUIREDFEATURES_ATTR = 1010;
	public const uint32 DISPID_SVGTESTS_REQUIREDFEATURES_PROP = 1011;
	public const uint32 DISPID_SVGTESTS_REQUIREDEXTENSIONS_ATTR = 1012;
	public const uint32 DISPID_SVGTESTS_REQUIREDEXTENSIONS_PROP = 1013;
	public const uint32 DISPID_SVGTESTS_SYSTEMLANGUAGE_ATTR = 1014;
	public const uint32 DISPID_SVGTESTS_SYSTEMLANGUAGE_PROP = 1015;
	public const uint32 DISPID_SVGTESTS_HASEXTENSION = 1016;
	public const uint32 DISPID_SVGLANGSPACE_XMLLANG = 1017;
	public const uint32 DISPID_SVGLANGSPACE_XMLSPACE = 1018;
	public const uint32 DISPID_SVGEXTERNALRESOURCESREQUIRED_EXTERNALRESOURCESREQUIRED_ATTR = 1019;
	public const uint32 DISPID_SVGEXTERNALRESOURCESREQUIRED_EXTERNALRESOURCESREQUIRED_PROP = 1020;
	public const uint32 DISPID_SVGFITTOVIEWBOX_VIEWBOX_ATTR = 1021;
	public const uint32 DISPID_SVGFITTOVIEWBOX_VIEWBOX_PROP = 1022;
	public const uint32 DISPID_SVGFITTOVIEWBOX_PRESERVEASPECTRATIO_ATTR = 1023;
	public const uint32 DISPID_SVGFITTOVIEWBOX_PRESERVEASPECTRATIO_PROP = 1024;
	public const uint32 DISPID_SVGZOOMANDPAN_ZOOMANDPAN = 1025;
	public const uint32 DISPID_SVGURIREFERENCE_HREF = 1026;
	public const uint32 DISPID_EVPROP_ONMOUSEOVER = 71536;
	public const uint32 DISPID_EVMETH_ONMOUSEOVER = 65544;
	public const uint32 DISPID_EVPROP_ONMOUSEOUT = 71537;
	public const uint32 DISPID_EVMETH_ONMOUSEOUT = 65545;
	public const uint32 DISPID_EVPROP_ONMOUSEDOWN = 71538;
	public const int32 DISPID_EVMETH_ONMOUSEDOWN = -605;
	public const uint32 DISPID_EVPROP_ONMOUSEUP = 71539;
	public const int32 DISPID_EVMETH_ONMOUSEUP = -607;
	public const uint32 DISPID_EVPROP_ONMOUSEMOVE = 71540;
	public const int32 DISPID_EVMETH_ONMOUSEMOVE = -606;
	public const uint32 DISPID_EVPROP_ONKEYDOWN = 71541;
	public const int32 DISPID_EVMETH_ONKEYDOWN = -602;
	public const uint32 DISPID_EVPROP_ONKEYUP = 71542;
	public const int32 DISPID_EVMETH_ONKEYUP = -604;
	public const uint32 DISPID_EVPROP_ONKEYPRESS = 71543;
	public const int32 DISPID_EVMETH_ONKEYPRESS = -603;
	public const uint32 DISPID_EVPROP_ONCLICK = 71544;
	public const int32 DISPID_EVMETH_ONCLICK = -600;
	public const uint32 DISPID_EVPROP_ONDBLCLICK = 71545;
	public const int32 DISPID_EVMETH_ONDBLCLICK = -601;
	public const uint32 DISPID_EVPROP_ONSELECT = 71546;
	public const uint32 DISPID_EVMETH_ONSELECT = 1006;
	public const uint32 DISPID_EVPROP_ONSUBMIT = 71547;
	public const uint32 DISPID_EVMETH_ONSUBMIT = 1007;
	public const uint32 DISPID_EVPROP_ONRESET = 71548;
	public const uint32 DISPID_EVMETH_ONRESET = 1015;
	public const uint32 DISPID_EVPROP_ONHELP = 71549;
	public const uint32 DISPID_EVMETH_ONHELP = 65546;
	public const uint32 DISPID_EVPROP_ONFOCUS = 71550;
	public const uint32 DISPID_EVMETH_ONFOCUS = 65537;
	public const uint32 DISPID_EVPROP_ONBLUR = 71551;
	public const uint32 DISPID_EVPROP_ONROWEXIT = 71554;
	public const uint32 DISPID_EVMETH_ONROWEXIT = 65542;
	public const uint32 DISPID_EVPROP_ONROWENTER = 71555;
	public const uint32 DISPID_EVMETH_ONROWENTER = 65543;
	public const uint32 DISPID_EVPROP_ONBOUNCE = 71556;
	public const uint32 DISPID_EVMETH_ONBOUNCE = 1009;
	public const uint32 DISPID_EVPROP_ONBEFOREUPDATE = 71557;
	public const uint32 DISPID_EVMETH_ONBEFOREUPDATE = 65540;
	public const uint32 DISPID_EVPROP_ONAFTERUPDATE = 71558;
	public const uint32 DISPID_EVMETH_ONAFTERUPDATE = 65541;
	public const uint32 DISPID_EVPROP_ONBEFOREDRAGOVER = 71559;
	public const uint32 DISPID_EVPROP_ONBEFOREDROPORPASTE = 71560;
	public const uint32 DISPID_EVPROP_ONREADYSTATECHANGE = 71561;
	public const int32 DISPID_EVMETH_ONREADYSTATECHANGE = -609;
	public const uint32 DISPID_EVPROP_ONFINISH = 71562;
	public const uint32 DISPID_EVMETH_ONFINISH = 1010;
	public const uint32 DISPID_EVPROP_ONSTART = 71563;
	public const uint32 DISPID_EVMETH_ONSTART = 1011;
	public const uint32 DISPID_EVPROP_ONABORT = 71564;
	public const uint32 DISPID_EVMETH_ONABORT = 1000;
	public const uint32 DISPID_EVPROP_ONERROR = 71565;
	public const uint32 DISPID_EVMETH_ONERROR = 1002;
	public const uint32 DISPID_EVPROP_ONCHANGE = 71566;
	public const uint32 DISPID_EVMETH_ONCHANGE = 1001;
	public const uint32 DISPID_EVPROP_ONSCROLL = 71567;
	public const uint32 DISPID_EVMETH_ONSCROLL = 1014;
	public const uint32 DISPID_EVPROP_ONLOAD = 71568;
	public const uint32 DISPID_EVMETH_ONLOAD = 1003;
	public const uint32 DISPID_EVPROP_ONUNLOAD = 71569;
	public const uint32 DISPID_EVMETH_ONUNLOAD = 1008;
	public const uint32 DISPID_EVPROP_ONLAYOUT = 71570;
	public const uint32 DISPID_EVMETH_ONLAYOUT = 1013;
	public const uint32 DISPID_EVPROP_ONDRAGSTART = 71571;
	public const uint32 DISPID_EVMETH_ONDRAGSTART = 65547;
	public const uint32 DISPID_EVPROP_ONRESIZE = 71572;
	public const uint32 DISPID_EVMETH_ONRESIZE = 1016;
	public const uint32 DISPID_EVPROP_ONSELECTSTART = 71573;
	public const uint32 DISPID_EVMETH_ONSELECTSTART = 65548;
	public const uint32 DISPID_EVPROP_ONERRORUPDATE = 71574;
	public const uint32 DISPID_EVMETH_ONERRORUPDATE = 65549;
	public const uint32 DISPID_EVPROP_ONBEFOREUNLOAD = 71575;
	public const uint32 DISPID_EVMETH_ONBEFOREUNLOAD = 1017;
	public const uint32 DISPID_EVPROP_ONDATASETCHANGED = 71576;
	public const uint32 DISPID_EVMETH_ONDATASETCHANGED = 65550;
	public const uint32 DISPID_EVPROP_ONDATAAVAILABLE = 71577;
	public const uint32 DISPID_EVMETH_ONDATAAVAILABLE = 65551;
	public const uint32 DISPID_EVPROP_ONDATASETCOMPLETE = 71578;
	public const uint32 DISPID_EVMETH_ONDATASETCOMPLETE = 65552;
	public const uint32 DISPID_EVPROP_ONFILTER = 71579;
	public const uint32 DISPID_EVMETH_ONFILTER = 65553;
	public const uint32 DISPID_EVPROP_ONCHANGEFOCUS = 71580;
	public const uint32 DISPID_EVMETH_ONCHANGEFOCUS = 1018;
	public const uint32 DISPID_EVPROP_ONCHANGEBLUR = 71581;
	public const uint32 DISPID_EVMETH_ONCHANGEBLUR = 1019;
	public const uint32 DISPID_EVPROP_ONLOSECAPTURE = 71582;
	public const uint32 DISPID_EVMETH_ONLOSECAPTURE = 65554;
	public const uint32 DISPID_EVPROP_ONPROPERTYCHANGE = 71583;
	public const uint32 DISPID_EVMETH_ONPROPERTYCHANGE = 65555;
	public const uint32 DISPID_EVPROP_ONPERSISTSAVE = 71584;
	public const uint32 DISPID_EVMETH_ONPERSISTSAVE = 1021;
	public const uint32 DISPID_EVPROP_ONDRAG = 71585;
	public const uint32 DISPID_EVMETH_ONDRAG = 65556;
	public const uint32 DISPID_EVPROP_ONDRAGEND = 71586;
	public const uint32 DISPID_EVMETH_ONDRAGEND = 65557;
	public const uint32 DISPID_EVPROP_ONDRAGENTER = 71587;
	public const uint32 DISPID_EVMETH_ONDRAGENTER = 65558;
	public const uint32 DISPID_EVPROP_ONDRAGOVER = 71588;
	public const uint32 DISPID_EVMETH_ONDRAGOVER = 65559;
	public const uint32 DISPID_EVPROP_ONDRAGLEAVE = 71589;
	public const uint32 DISPID_EVMETH_ONDRAGLEAVE = 65560;
	public const uint32 DISPID_EVPROP_ONDROP = 71590;
	public const uint32 DISPID_EVMETH_ONDROP = 65561;
	public const uint32 DISPID_EVPROP_ONCUT = 71591;
	public const uint32 DISPID_EVMETH_ONCUT = 65562;
	public const uint32 DISPID_EVPROP_ONCOPY = 71592;
	public const uint32 DISPID_EVMETH_ONCOPY = 65563;
	public const uint32 DISPID_EVPROP_ONPASTE = 71593;
	public const uint32 DISPID_EVMETH_ONPASTE = 65564;
	public const uint32 DISPID_EVPROP_ONBEFORECUT = 71594;
	public const uint32 DISPID_EVMETH_ONBEFORECUT = 65565;
	public const uint32 DISPID_EVPROP_ONBEFORECOPY = 71595;
	public const uint32 DISPID_EVMETH_ONBEFORECOPY = 65566;
	public const uint32 DISPID_EVPROP_ONBEFOREPASTE = 71596;
	public const uint32 DISPID_EVMETH_ONBEFOREPASTE = 65567;
	public const uint32 DISPID_EVPROP_ONPERSISTLOAD = 71597;
	public const uint32 DISPID_EVMETH_ONPERSISTLOAD = 1022;
	public const uint32 DISPID_EVPROP_ONROWSDELETE = 71598;
	public const uint32 DISPID_EVMETH_ONROWSDELETE = 65568;
	public const uint32 DISPID_EVPROP_ONROWSINSERTED = 71599;
	public const uint32 DISPID_EVMETH_ONROWSINSERTED = 65569;
	public const uint32 DISPID_EVPROP_ONCELLCHANGE = 71600;
	public const uint32 DISPID_EVMETH_ONCELLCHANGE = 65570;
	public const uint32 DISPID_EVPROP_ONCONTEXTMENU = 71601;
	public const uint32 DISPID_EVMETH_ONCONTEXTMENU = 1023;
	public const uint32 DISPID_EVPROP_ONBEFOREPRINT = 71602;
	public const uint32 DISPID_EVMETH_ONBEFOREPRINT = 1024;
	public const uint32 DISPID_EVPROP_ONAFTERPRINT = 71603;
	public const uint32 DISPID_EVMETH_ONAFTERPRINT = 1025;
	public const uint32 DISPID_EVPROP_ONSTOP = 71604;
	public const uint32 DISPID_EVMETH_ONSTOP = 1026;
	public const uint32 DISPID_EVPROP_ONBEFOREEDITFOCUS = 71605;
	public const uint32 DISPID_EVMETH_ONBEFOREEDITFOCUS = 1027;
	public const uint32 DISPID_EVPROP_ONATTACHEVENT = 71606;
	public const uint32 DISPID_EVPROP_ONMOUSEHOVER = 71607;
	public const uint32 DISPID_EVMETH_ONMOUSEHOVER = 1028;
	public const uint32 DISPID_EVPROP_ONCONTENTREADY = 71608;
	public const uint32 DISPID_EVMETH_ONCONTENTREADY = 1029;
	public const uint32 DISPID_EVPROP_ONLAYOUTCOMPLETE = 71609;
	public const uint32 DISPID_EVMETH_ONLAYOUTCOMPLETE = 1030;
	public const uint32 DISPID_EVPROP_ONPAGE = 71610;
	public const uint32 DISPID_EVMETH_ONPAGE = 1031;
	public const uint32 DISPID_EVPROP_ONLINKEDOVERFLOW = 71611;
	public const uint32 DISPID_EVMETH_ONLINKEDOVERFLOW = 1032;
	public const uint32 DISPID_EVPROP_ONMOUSEWHEEL = 71612;
	public const uint32 DISPID_EVMETH_ONMOUSEWHEEL = 1033;
	public const uint32 DISPID_EVPROP_ONBEFOREDEACTIVATE = 71613;
	public const uint32 DISPID_EVMETH_ONBEFOREDEACTIVATE = 1034;
	public const uint32 DISPID_EVPROP_ONMOVE = 71614;
	public const uint32 DISPID_EVMETH_ONMOVE = 1035;
	public const uint32 DISPID_EVPROP_ONCONTROLSELECT = 71615;
	public const uint32 DISPID_EVMETH_ONCONTROLSELECT = 1036;
	public const uint32 DISPID_EVPROP_ONSELECTIONCHANGE = 71616;
	public const uint32 DISPID_EVMETH_ONSELECTIONCHANGE = 1037;
	public const uint32 DISPID_EVPROP_ONMOVESTART = 71617;
	public const uint32 DISPID_EVMETH_ONMOVESTART = 1038;
	public const uint32 DISPID_EVPROP_ONMOVEEND = 71618;
	public const uint32 DISPID_EVMETH_ONMOVEEND = 1039;
	public const uint32 DISPID_EVPROP_ONRESIZESTART = 71619;
	public const uint32 DISPID_EVMETH_ONRESIZESTART = 1040;
	public const uint32 DISPID_EVPROP_ONRESIZEEND = 71620;
	public const uint32 DISPID_EVMETH_ONRESIZEEND = 1041;
	public const uint32 DISPID_EVPROP_ONMOUSEENTER = 71621;
	public const uint32 DISPID_EVMETH_ONMOUSEENTER = 1042;
	public const uint32 DISPID_EVPROP_ONMOUSELEAVE = 71622;
	public const uint32 DISPID_EVMETH_ONMOUSELEAVE = 1043;
	public const uint32 DISPID_EVPROP_ONACTIVATE = 71623;
	public const uint32 DISPID_EVMETH_ONACTIVATE = 1044;
	public const uint32 DISPID_EVPROP_ONDEACTIVATE = 71624;
	public const uint32 DISPID_EVMETH_ONDEACTIVATE = 1045;
	public const uint32 DISPID_EVPROP_ONMULTILAYOUTCLEANUP = 71625;
	public const uint32 DISPID_EVMETH_ONMULTILAYOUTCLEANUP = 1046;
	public const uint32 DISPID_EVPROP_ONBEFOREACTIVATE = 71626;
	public const uint32 DISPID_EVMETH_ONBEFOREACTIVATE = 1047;
	public const uint32 DISPID_EVPROP_ONFOCUSIN = 71627;
	public const uint32 DISPID_EVMETH_ONFOCUSIN = 1048;
	public const uint32 DISPID_EVPROP_ONFOCUSOUT = 71628;
	public const uint32 DISPID_EVMETH_ONFOCUSOUT = 1049;
	public const uint32 DISPID_EVPROP_ONVALUECHANGE = 71629;
	public const uint32 DISPID_EVMETH_ONVALUECHANGE = 1050;
	public const uint32 DISPID_EVPROP_ONSELECTADD = 71630;
	public const uint32 DISPID_EVMETH_ONSELECTADD = 1051;
	public const uint32 DISPID_EVPROP_ONSELECTREMOVE = 71631;
	public const uint32 DISPID_EVMETH_ONSELECTREMOVE = 1052;
	public const uint32 DISPID_EVPROP_ONSELECTWITHIN = 71632;
	public const uint32 DISPID_EVMETH_ONSELECTWITHIN = 1053;
	public const uint32 DISPID_EVPROP_ONSYSTEMSCROLLINGSTART = 71633;
	public const uint32 DISPID_EVMETH_ONSYSTEMSCROLLINGSTART = 1054;
	public const uint32 DISPID_EVPROP_ONSYSTEMSCROLLINGEND = 71634;
	public const uint32 DISPID_EVMETH_ONSYSTEMSCROLLINGEND = 1055;
	public const uint32 DISPID_EVPROP_ONOBJECTCONTENTSCROLLED = 71635;
	public const uint32 DISPID_EVMETH_ONOBJECTCONTENTSCROLLED = 1056;
	public const uint32 DISPID_EVPROP_ONSTORAGE = 71636;
	public const uint32 DISPID_EVMETH_ONSTORAGE = 1057;
	public const uint32 DISPID_EVPROP_ONSTORAGECOMMIT = 71637;
	public const uint32 DISPID_EVMETH_ONSTORAGECOMMIT = 1058;
	public const uint32 DISPID_EVPROP_ONSHOW = 71638;
	public const uint32 DISPID_EVMETH_ONSHOW = 1059;
	public const uint32 DISPID_EVPROP_ONHIDE = 71639;
	public const uint32 DISPID_EVMETH_ONHIDE = 1060;
	public const uint32 DISPID_EVPROP_ONALERT = 71640;
	public const uint32 DISPID_EVMETH_ONALERT = 1061;
	public const uint32 DISPID_EVPROP_ONPOPUPMENUSTART = 71641;
	public const uint32 DISPID_EVMETH_ONPOPUPMENUSTART = 1062;
	public const uint32 DISPID_EVPROP_ONPOPUPMENUEND = 71642;
	public const uint32 DISPID_EVMETH_ONPOPUPMENUEND = 1063;
	public const uint32 DISPID_EVPROP_ONONLINE = 71643;
	public const uint32 DISPID_EVMETH_ONONLINE = 1064;
	public const uint32 DISPID_EVPROP_ONOFFLINE = 71644;
	public const uint32 DISPID_EVMETH_ONOFFLINE = 1065;
	public const uint32 DISPID_EVPROP_ONHASHCHANGE = 71645;
	public const uint32 DISPID_EVMETH_ONHASHCHANGE = 1066;
	public const uint32 DISPID_EVPROP_ONMESSAGE = 71646;
	public const uint32 DISPID_EVMETH_ONMESSAGE = 1067;
	public const uint32 DISPID_EVPROP_ONDOMMUTATION = 71647;
	public const uint32 DISPID_EVMETH_ONDOMMUTATION = 1068;
	public const uint32 DISPID_EVPROP_SINKLIMIT = 71647;
	public const uint32 DISPID_EVPROP_TIMEOUT = 71648;
	public const uint32 DISPID_EVPROP_WHEEL = 71649;
	public const uint32 DISPID_EVPROP_SVGLOAD = 71650;
	public const uint32 DISPID_EVPROP_SVGUNLOAD = 71651;
	public const uint32 DISPID_EVPROP_SVGABORT = 71652;
	public const uint32 DISPID_EVPROP_SVGERROR = 71653;
	public const uint32 DISPID_EVPROP_SVGRESIZE = 71654;
	public const uint32 DISPID_EVPROP_SVGSCROLL = 71655;
	public const uint32 DISPID_EVPROP_SVGZOOM = 71656;
	public const uint32 DISPID_EVPROP_ONMSTHUMBNAILCLICK = 71657;
	public const uint32 DISPID_EVPROP_COMPOSITIONSTART = 71658;
	public const uint32 DISPID_EVPROP_COMPOSITIONUPDATE = 71659;
	public const uint32 DISPID_EVPROP_COMPOSITIONEND = 71660;
	public const uint32 DISPID_EVPROP_DOMATTRMODIFIED = 71661;
	public const uint32 DISPID_EVPROP_DOMCONTENTLOADED = 71662;
	public const uint32 DISPID_EVPROP_INPUT = 71663;
	public const uint32 DISPID_EVPROP_DOMCHARDATAMODIFIED = 71664;
	public const uint32 DISPID_EVPROP_TEXTINPUT = 71665;
	public const uint32 DISPID_EVPROP_ONMSSITEMODEJUMPLISTITEMREMOVED = 71666;
	public const uint32 DISPID_EVPROP_DOMNODEINSERTED = 71667;
	public const uint32 DISPID_EVPROP_DOMNODEREMOVED = 71668;
	public const uint32 DISPID_EVPROP_DOMSUBTREEMODIFIED = 71669;
	public const uint32 DISPID_EVPROP_CANPLAY = 71670;
	public const uint32 DISPID_EVPROP_CANPLAYTHROUGH = 71671;
	public const uint32 DISPID_EVPROP_DURATIONCHANGE = 71672;
	public const uint32 DISPID_EVPROP_EMPTIED = 71673;
	public const uint32 DISPID_EVPROP_ENDED = 71674;
	public const uint32 DISPID_EVPROP_LOADEDDATA = 71675;
	public const uint32 DISPID_EVPROP_LOADEDMETADATA = 71676;
	public const uint32 DISPID_EVPROP_LOADSTART = 71677;
	public const uint32 DISPID_EVPROP_PAUSE = 71678;
	public const uint32 DISPID_EVPROP_PLAY = 71679;
	public const uint32 DISPID_EVPROP_PLAYING = 71680;
	public const uint32 DISPID_EVPROP_PROGRESS = 71681;
	public const uint32 DISPID_EVPROP_RATECHANGE = 71682;
	public const uint32 DISPID_EVPROP_SEEKED = 71683;
	public const uint32 DISPID_EVPROP_SEEKING = 71684;
	public const uint32 DISPID_EVPROP_STALLED = 71685;
	public const uint32 DISPID_EVPROP_SUSPEND = 71686;
	public const uint32 DISPID_EVPROP_TIMEUPDATE = 71687;
	public const uint32 DISPID_EVPROP_VOLUMECHANGE = 71688;
	public const uint32 DISPID_EVPROP_WAITING = 71689;
	public const uint32 DISPID_EVPROP_ONMSPOINTERDOWN = 71690;
	public const uint32 DISPID_EVPROP_ONMSPOINTERMOVE = 71691;
	public const uint32 DISPID_EVPROP_ONMSPOINTERUP = 71692;
	public const uint32 DISPID_EVPROP_ONMSPOINTEROVER = 71693;
	public const uint32 DISPID_EVPROP_ONMSPOINTEROUT = 71694;
	public const uint32 DISPID_EVPROP_ONMSPOINTERCANCEL = 71695;
	public const uint32 DISPID_EVPROP_ONMSPOINTERHOVER = 71696;
	public const uint32 DISPID_EVPROP_MSCONNECT = 71697;
	public const uint32 DISPID_EVPROP_MSDISCONNECT = 71698;
	public const uint32 DISPID_EVPROP_ONMSGESTURESTART = 71699;
	public const uint32 DISPID_EVPROP_ONMSGESTURECHANGE = 71700;
	public const uint32 DISPID_EVPROP_ONMSGESTUREEND = 71701;
	public const uint32 DISPID_EVPROP_ONMSGESTUREHOLD = 71702;
	public const uint32 DISPID_EVPROP_ONMSGESTURETAP = 71703;
	public const uint32 DISPID_EVPROP_ONMSGESTUREDOUBLETAP = 71704;
	public const uint32 DISPID_EVPROP_ONMSINERTIASTART = 71705;
	public const uint32 DISPID_EVPROP_ONMSLOSTPOINTERCAPTURE = 71706;
	public const uint32 DISPID_EVPROP_ONMSGOTPOINTERCAPTURE = 71707;
	public const uint32 DISPID_EVPROP_ONMSCONTENTZOOM = 71708;
	public const uint32 DISPID_EVPROP_ONTRANSITIONSTART = 71709;
	public const uint32 DISPID_EVPROP_ONTRANSITIONEND = 71710;
	public const uint32 DISPID_EVPROP_ONANIMATIONSTART = 71711;
	public const uint32 DISPID_EVPROP_ONANIMATIONEND = 71712;
	public const uint32 DISPID_EVPROP_ONANIMATIONITERATION = 71713;
	public const uint32 DISPID_EVPROP_ONMSMANIPULATIONSTATECHANGED = 71714;
	public const uint32 DISPID_EVPROP_ONOPEN = 71715;
	public const uint32 DISPID_EVPROP_ONCLOSE = 71716;
	public const uint32 DISPID_EVPROP_CHECKING = 71717;
	public const uint32 DISPID_EVPROP_NOUPDATE = 71718;
	public const uint32 DISPID_EVPROP_DOWNLOADING = 71719;
	public const uint32 DISPID_EVPROP_UPDATEREADY = 71720;
	public const uint32 DISPID_EVPROP_CACHED = 71721;
	public const uint32 DISPID_EVPROP_OBSOLETE = 71722;
	public const uint32 DISPID_EVPROP_LOADEND = 71723;
	public const uint32 DISPID_EVPROP_INVALID = 71724;
	public const uint32 DISPID_EVPROP_ONSUCCESS = 71725;
	public const uint32 DISPID_EVPROP_ONBLOCKED = 71726;
	public const uint32 DISPID_EVPROP_ONCOMPLETE = 71727;
	public const uint32 DISPID_EVPROP_ONPOPSTATE = 71728;
	public const uint32 DISPID_EVPROP_ONCUECHANGE = 71729;
	public const uint32 DISPID_EVPROP_ONENTER = 71730;
	public const uint32 DISPID_EVPROP_ONEXIT = 71731;
	public const uint32 DISPID_EVPROP_VISIBILITYCHANGE = 71732;
	public const uint32 DISPID_EVPROP_ONMSREGIONUPDATE = 71733;
	public const uint32 DISPID_EVPROP_ONUPGRADENEEDED = 71734;
	public const uint32 DISPID_EVPROP_ONMSVIDEOFORMATCHANGED = 71735;
	public const uint32 DISPID_EVPROP_ADDTRACK = 71736;
	public const uint32 DISPID_EVPROP_ONMSVIDEOFRAMESTEPCOMPLETED = 71737;
	public const uint32 DISPID_EVPROP_ONMSHOLDVISUAL = 71738;
	public const uint32 DISPID_EVPROP_ONMSVIDEOOPTIMALLAYOUTCHANGED = 71739;
	public const uint32 DISPID_EVPROP_ONMSFULLSCREENCHANGE = 71740;
	public const uint32 DISPID_EVPROP_ONMSFULLSCREENERROR = 71741;
	public const uint32 DISPID_EVPROP_MSELEMENTRESIZE = 71742;
	public const uint32 DISPID_EVPROP_ONSOURCEOPEN = 71743;
	public const uint32 DISPID_EVPROP_ONSOURCECLOSE = 71744;
	public const uint32 DISPID_EVPROP_ONSOURCEENDED = 71745;
	public const uint32 DISPID_EVPROP_ONADDSOURCEBUFFER = 71746;
	public const uint32 DISPID_EVPROP_ONREMOVESOURCEBUFFER = 71747;
	public const uint32 DISPID_EVPROP_ONMSNEEDKEY = 71748;
	public const uint32 DISPID_EVPROP_ONMSKEYMESSAGE = 71749;
	public const uint32 DISPID_EVPROP_ONMSKEYERROR = 71750;
	public const uint32 DISPID_EVPROP_ONMSKEYADDED = 71751;
	public const uint32 DISPID_EVPROP_MSHTMLWEBVIEW_ONDOMCONTENTLOADED = 71752;
	public const uint32 DISPID_EVPROP_MSHTMLWEBVIEW_ONCONTENTLOADING = 71753;
	public const uint32 DISPID_EVPROP_MSHTMLWEBVIEW_ONNAVIGATIONSTARTING = 71754;
	public const uint32 DISPID_EVPROP_MSHTMLWEBVIEW_ONNAVIGATIONCOMPLETED = 71755;
	public const uint32 DISPID_EVPROP_MSHTMLWEBVIEW_ONFRAMEDOMCONTENTLOADED = 71756;
	public const uint32 DISPID_EVPROP_MSHTMLWEBVIEW_ONFRAMECONTENTLOADING = 71757;
	public const uint32 DISPID_EVPROP_MSHTMLWEBVIEW_ONFRAMENAVIGATIONSTARTING = 71758;
	public const uint32 DISPID_EVPROP_MSHTMLWEBVIEW_ONFRAMENAVIGATIONCOMPLETED = 71759;
	public const uint32 DISPID_EVPROP_MSHTMLWEBVIEW_ONSCRIPTNOTIFY = 71760;
	public const uint32 DISPID_EVPROP_MSHTMLWEBVIEW_ONUNVIEWABLECONTENT = 71761;
	public const uint32 DISPID_EVPROP_MSHTMLWEBVIEW_ONUNSAFECONTENTWARNINGDISPLAYING = 71762;
	public const uint32 DISPID_EVPROP_MSHTMLWEBVIEW_ONLONGRUNNINGSCRIPTDETECTED = 71763;
	public const uint32 DISPID_EVPROP_WEBGLCONTEXTLOST = 71764;
	public const uint32 DISPID_EVPROP_WEBGLCONTEXTRESTORED = 71765;
	public const uint32 DISPID_EVPROP_ONUPDATESTART = 71766;
	public const uint32 DISPID_EVPROP_ONUPDATE = 71767;
	public const uint32 DISPID_EVPROP_ONUPDATEEND = 71768;
	public const uint32 DISPID_EVPROP_ONMSPOINTERENTER = 71769;
	public const uint32 DISPID_EVPROP_ONMSPOINTERLEAVE = 71770;
	public const uint32 DISPID_EVPROP_ONMSSITEPINNED = 71771;
	public const uint32 DISPID_EVPROP_MSORIENTATIONCHANGE = 71772;
	public const uint32 DISPID_EVPROP_ONDEVICEORIENTATION = 71773;
	public const uint32 DISPID_EVPROP_ONDEVICEMOTION = 71774;
	public const uint32 DISPID_EVPROP_ONPAGESHOW = 71775;
	public const uint32 DISPID_EVPROP_ONPAGEHIDE = 71776;
	public const uint32 DISPID_EVPROP_ONMSCANDIDATEWINDOWSHOW = 71777;
	public const uint32 DISPID_EVPROP_ONMSCANDIDATEWINDOWUPDATE = 71778;
	public const uint32 DISPID_EVPROP_ONMSCANDIDATEWINDOWHIDE = 71779;
	public const uint32 DISPID_EVPROP_HTML5ONREADYSTATECHANGE = 71780;
	public const uint32 DISPID_EVPROP_REMOVETRACK = 71781;
	public const uint32 DISPID_EVPROP_ONCOMPASSNEEDSCALIBRATION = 71782;
	public const uint32 DISPID_EVPROP_MSHTMLWEBVIEW_ONCONTAINSFULLSCREENELEMENTCHANGED = 71783;
	public const uint32 DISPID_EVPROP_ONTOUCHSTART = 71784;
	public const uint32 DISPID_EVPROP_ONTOUCHEND = 71785;
	public const uint32 DISPID_EVPROP_ONTOUCHMOVE = 71786;
	public const uint32 DISPID_EVPROP_ONTOUCHCANCEL = 71787;
	public const uint32 DISPID_EVPROP_ONWEBKITTRANSITIONEND = 71788;
	public const uint32 DISPID_EVPROP_ONWEBKITANIMATIONSTART = 71789;
	public const uint32 DISPID_EVPROP_ONWEBKITANIMATIONEND = 71790;
	public const uint32 DISPID_EVPROP_ONWEBKITANIMATIONITERATION = 71791;
	public const uint32 DISPID_EVPROP_WEBGLCONTEXTCREATIONERROR = 71792;
	public const uint32 DISPID_EVPROP_ONDOMFOCUSIN = 71793;
	public const uint32 DISPID_EVPROP_ONDOMFOCUSOUT = 71794;
	public const uint32 DISPID_EVPROP_ORIENTATIONCHANGE = 71795;
	public const uint32 DISPID_EVPROPS_COUNT = 260;
	public const uint32 DISPID_IHTMLFILTERSCOLLECTION_LENGTH = 1001;
	public const int32 DISPID_IHTMLFILTERSCOLLECTION__NEWENUM = -4;
	public const uint32 DISPID_IHTMLFILTERSCOLLECTION_ITEM = 0;
	public const uint32 DISPID_IHTMLDOMCONSTRUCTOR_CONSTRUCTOR = 66045;
	public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION_LENGTH = 70037;
	public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION_PARENTRULE = 70038;
	public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION_GETPROPERTYVALUE = 70039;
	public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION_GETPROPERTYPRIORITY = 70040;
	public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION_REMOVEPROPERTY = 70041;
	public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION_SETPROPERTY = 70042;
	public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION_ITEM = 0;
	public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION_FONTFAMILY = 70554;
	public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION_FONTSTYLE = 70560;
	public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION_FONTVARIANT = 70561;
	public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION_FONTWEIGHT = 70563;
	public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION_FONTSIZE = 70555;
	public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION_FONT = 70577;
	public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION_COLOR = 70538;
	public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION_BACKGROUND = 70568;
	public const int32 DISPID_IHTMLCSSSTYLEDECLARATION_BACKGROUNDCOLOR = -501;
	public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION_BACKGROUNDIMAGE = 70537;
	public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION_BACKGROUNDREPEAT = 70580;
	public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION_BACKGROUNDATTACHMENT = 70581;
	public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION_BACKGROUNDPOSITION = 70582;
	public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION_BACKGROUNDPOSITIONX = 70569;
	public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION_BACKGROUNDPOSITIONY = 70570;
	public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION_WORDSPACING = 70583;
	public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION_LETTERSPACING = 70544;
	public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION_TEXTDECORATION = 70571;
	public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION_VERTICALALIGN = 70584;
	public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION_TEXTTRANSFORM = 70540;
	public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION_TEXTALIGN = 65608;
	public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION_TEXTINDENT = 70543;
	public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION_LINEHEIGHT = 70542;
	public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION_MARGINTOP = 70573;
	public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION_MARGINRIGHT = 70574;
	public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION_MARGINBOTTOM = 70575;
	public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION_MARGINLEFT = 70576;
	public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION_MARGIN = 70572;
	public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION_PADDINGTOP = 70548;
	public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION_PADDINGRIGHT = 70549;
	public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION_PADDINGBOTTOM = 70550;
	public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION_PADDINGLEFT = 70551;
	public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION_PADDING = 70547;
	public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION_BORDER = 70585;
	public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION_BORDERTOP = 70586;
	public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION_BORDERRIGHT = 70587;
	public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION_BORDERBOTTOM = 70588;
	public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION_BORDERLEFT = 70589;
	public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION_BORDERCOLOR = 70590;
	public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION_BORDERTOPCOLOR = 70591;
	public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION_BORDERRIGHTCOLOR = 70592;
	public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION_BORDERBOTTOMCOLOR = 70593;
	public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION_BORDERLEFTCOLOR = 70594;
	public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION_BORDERWIDTH = 70595;
	public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION_BORDERTOPWIDTH = 70596;
	public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION_BORDERRIGHTWIDTH = 70597;
	public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION_BORDERBOTTOMWIDTH = 70598;
	public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION_BORDERLEFTWIDTH = 70599;
	public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION_BORDERSTYLE = 70600;
	public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION_BORDERTOPSTYLE = 70601;
	public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION_BORDERRIGHTSTYLE = 70602;
	public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION_BORDERBOTTOMSTYLE = 70603;
	public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION_BORDERLEFTSTYLE = 70604;
	public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION_WIDTH = 65541;
	public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION_HEIGHT = 65542;
	public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION_STYLEFLOAT = 70606;
	public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION_CLEAR = 70552;
	public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION_DISPLAY = 70607;
	public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION_VISIBILITY = 70616;
	public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION_LISTSTYLETYPE = 70608;
	public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION_LISTSTYLEPOSITION = 70609;
	public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION_LISTSTYLEIMAGE = 70610;
	public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION_LISTSTYLE = 70611;
	public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION_WHITESPACE = 70612;
	public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION_TOP = 65540;
	public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION_LEFT = 65539;
	public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION_ZINDEX = 70627;
	public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION_OVERFLOW = 70546;
	public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION_PAGEBREAKBEFORE = 70613;
	public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION_PAGEBREAKAFTER = 70614;
	public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION_CSSTEXT = 70635;
	public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION_CURSOR = 70638;
	public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION_CLIP = 70628;
	public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION_FILTER = 70618;
	public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION_TABLELAYOUT = 70634;
	public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION_BORDERCOLLAPSE = 70620;
	public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION_DIRECTION = 70655;
	public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION_BEHAVIOR = 70651;
	public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION_POSITION = 70626;
	public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION_UNICODEBIDI = 70654;
	public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION_BOTTOM = 65614;
	public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION_RIGHT = 65613;
	public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION_IMEMODE = 70656;
	public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION_RUBYALIGN = 70657;
	public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION_RUBYPOSITION = 70658;
	public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION_RUBYOVERHANG = 70659;
	public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION_LAYOUTGRIDCHAR = 70663;
	public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION_LAYOUTGRIDLINE = 70664;
	public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION_LAYOUTGRIDMODE = 70665;
	public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION_LAYOUTGRIDTYPE = 70666;
	public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION_LAYOUTGRID = 70667;
	public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION_TEXTAUTOSPACE = 70668;
	public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION_WORDBREAK = 70670;
	public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION_LINEBREAK = 70669;
	public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION_TEXTJUSTIFY = 70671;
	public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION_TEXTJUSTIFYTRIM = 70672;
	public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION_TEXTKASHIDA = 70673;
	public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION_OVERFLOWX = 70675;
	public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION_OVERFLOWY = 70676;
	public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION_ACCELERATOR = 70683;
	public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION_LAYOUTFLOW = 70691;
	public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION_ZOOM = 70689;
	public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION_WORDWRAP = 70694;
	public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION_TEXTUNDERLINEPOSITION = 70695;
	public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION_SCROLLBARBASECOLOR = 70716;
	public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION_SCROLLBARFACECOLOR = 70717;
	public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION_SCROLLBAR3DLIGHTCOLOR = 70718;
	public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION_SCROLLBARSHADOWCOLOR = 70719;
	public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION_SCROLLBARHIGHLIGHTCOLOR = 70720;
	public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION_SCROLLBARDARKSHADOWCOLOR = 70721;
	public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION_SCROLLBARARROWCOLOR = 70722;
	public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION_SCROLLBARTRACKCOLOR = 70732;
	public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION_WRITINGMODE = 70728;
	public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION_TEXTALIGNLAST = 70739;
	public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION_TEXTKASHIDASPACE = 70740;
	public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION_TEXTOVERFLOW = 70745;
	public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION_MINHEIGHT = 70747;
	public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION_MSINTERPOLATIONMODE = 70749;
	public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION_MAXHEIGHT = 70750;
	public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION_MINWIDTH = 70751;
	public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION_MAXWIDTH = 70752;
	public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION_CONTENT = 70754;
	public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION_CAPTIONSIDE = 70755;
	public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION_COUNTERINCREMENT = 70756;
	public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION_COUNTERRESET = 70757;
	public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION_OUTLINE = 70758;
	public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION_OUTLINEWIDTH = 70759;
	public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION_OUTLINESTYLE = 70760;
	public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION_OUTLINECOLOR = 70761;
	public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION_BOXSIZING = 70762;
	public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION_BORDERSPACING = 70763;
	public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION_ORPHANS = 70764;
	public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION_WIDOWS = 70765;
	public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION_PAGEBREAKINSIDE = 70766;
	public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION_EMPTYCELLS = 70786;
	public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION_MSBLOCKPROGRESSION = 70787;
	public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION_QUOTES = 70788;
	public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION_ALIGNMENTBASELINE = 70814;
	public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION_BASELINESHIFT = 70815;
	public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION_DOMINANTBASELINE = 70816;
	public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION_FONTSIZEADJUST = 70817;
	public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION_FONTSTRETCH = 70818;
	public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION_OPACITY = 70819;
	public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION_CLIPPATH = 70820;
	public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION_CLIPRULE = 70821;
	public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION_FILL = 70822;
	public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION_FILLOPACITY = 70823;
	public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION_FILLRULE = 70824;
	public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION_KERNING = 70825;
	public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION_MARKER = 70826;
	public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION_MARKEREND = 70827;
	public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION_MARKERMID = 70828;
	public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION_MARKERSTART = 70829;
	public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION_MASK = 70830;
	public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION_POINTEREVENTS = 70831;
	public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION_STOPCOLOR = 70832;
	public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION_STOPOPACITY = 70833;
	public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION_STROKE = 70834;
	public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION_STROKEDASHARRAY = 70835;
	public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION_STROKEDASHOFFSET = 70836;
	public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION_STROKELINECAP = 70837;
	public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION_STROKELINEJOIN = 70838;
	public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION_STROKEMITERLIMIT = 70839;
	public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION_STROKEOPACITY = 70840;
	public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION_STROKEWIDTH = 70841;
	public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION_TEXTANCHOR = 70842;
	public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION_GLYPHORIENTATIONHORIZONTAL = 70843;
	public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION_GLYPHORIENTATIONVERTICAL = 70844;
	public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION_BORDERRADIUS = 70846;
	public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION_BORDERTOPLEFTRADIUS = 70847;
	public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION_BORDERTOPRIGHTRADIUS = 70848;
	public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION_BORDERBOTTOMRIGHTRADIUS = 70849;
	public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION_BORDERBOTTOMLEFTRADIUS = 70850;
	public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION_CLIPTOP = 70629;
	public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION_CLIPRIGHT = 70630;
	public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION_CLIPBOTTOM = 70631;
	public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION_CLIPLEFT = 70632;
	public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION_CSSFLOAT = 70845;
	public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION_BACKGROUNDCLIP = 70852;
	public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION_BACKGROUNDORIGIN = 70853;
	public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION_BACKGROUNDSIZE = 70854;
	public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION_BOXSHADOW = 70855;
	public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION_MSTRANSFORM = 70851;
	public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION_MSTRANSFORMORIGIN = 70861;
	public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION2_MSSCROLLCHAINING = 70891;
	public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION2_MSCONTENTZOOMING = 70892;
	public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION2_MSCONTENTZOOMSNAPTYPE = 70893;
	public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION2_MSSCROLLRAILS = 70894;
	public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION2_MSCONTENTZOOMCHAINING = 70895;
	public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION2_MSSCROLLSNAPTYPE = 70896;
	public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION2_MSCONTENTZOOMLIMIT = 70897;
	public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION2_MSCONTENTZOOMSNAP = 70898;
	public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION2_MSCONTENTZOOMSNAPPOINTS = 70899;
	public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION2_MSCONTENTZOOMLIMITMIN = 70901;
	public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION2_MSCONTENTZOOMLIMITMAX = 70902;
	public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION2_MSSCROLLSNAPX = 70903;
	public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION2_MSSCROLLSNAPY = 70904;
	public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION2_MSSCROLLSNAPPOINTSX = 70905;
	public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION2_MSSCROLLSNAPPOINTSY = 70906;
	public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION2_MSGRIDCOLUMN = 70908;
	public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION2_MSGRIDCOLUMNALIGN = 70909;
	public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION2_MSGRIDCOLUMNS = 70910;
	public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION2_MSGRIDCOLUMNSPAN = 70911;
	public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION2_MSGRIDROW = 70913;
	public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION2_MSGRIDROWALIGN = 70914;
	public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION2_MSGRIDROWS = 70915;
	public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION2_MSGRIDROWSPAN = 70916;
	public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION2_MSWRAPTHROUGH = 70937;
	public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION2_MSWRAPMARGIN = 70947;
	public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION2_MSWRAPFLOW = 70949;
	public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION2_MSANIMATIONNAME = 70917;
	public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION2_MSANIMATIONDURATION = 70918;
	public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION2_MSANIMATIONTIMINGFUNCTION = 70919;
	public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION2_MSANIMATIONDELAY = 70920;
	public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION2_MSANIMATIONDIRECTION = 70921;
	public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION2_MSANIMATIONPLAYSTATE = 70922;
	public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION2_MSANIMATIONITERATIONCOUNT = 70923;
	public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION2_MSANIMATION = 70924;
	public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION2_MSANIMATIONFILLMODE = 70925;
	public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION2_COLORINTERPOLATIONFILTERS = 70928;
	public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION2_COLUMNCOUNT = 70872;
	public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION2_COLUMNWIDTH = 70873;
	public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION2_COLUMNGAP = 70874;
	public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION2_COLUMNFILL = 70875;
	public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION2_COLUMNSPAN = 70876;
	public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION2_COLUMNS = 70871;
	public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION2_COLUMNRULE = 70877;
	public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION2_COLUMNRULECOLOR = 70880;
	public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION2_COLUMNRULESTYLE = 70878;
	public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION2_COLUMNRULEWIDTH = 70879;
	public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION2_BREAKBEFORE = 70881;
	public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION2_BREAKAFTER = 70882;
	public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION2_BREAKINSIDE = 70883;
	public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION2_FLOODCOLOR = 70926;
	public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION2_FLOODOPACITY = 70927;
	public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION2_LIGHTINGCOLOR = 70929;
	public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION2_MSSCROLLLIMITXMIN = 70930;
	public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION2_MSSCROLLLIMITYMIN = 70931;
	public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION2_MSSCROLLLIMITXMAX = 70932;
	public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION2_MSSCROLLLIMITYMAX = 70933;
	public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION2_MSSCROLLLIMIT = 70934;
	public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION2_TEXTSHADOW = 70936;
	public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION2_MSFLOWFROM = 70938;
	public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION2_MSFLOWINTO = 70939;
	public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION2_MSHYPHENS = 70940;
	public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION2_MSHYPHENATELIMITZONE = 70941;
	public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION2_MSHYPHENATELIMITCHARS = 70942;
	public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION2_MSHYPHENATELIMITLINES = 70943;
	public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION2_MSHIGHCONTRASTADJUST = 70945;
	public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION2_ENABLEBACKGROUND = 70946;
	public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION2_MSFONTFEATURESETTINGS = 70950;
	public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION2_MSUSERSELECT = 70951;
	public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION2_MSOVERFLOWSTYLE = 70935;
	public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION2_MSTRANSFORMSTYLE = 70889;
	public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION2_MSBACKFACEVISIBILITY = 70890;
	public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION2_MSPERSPECTIVE = 70885;
	public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION2_MSPERSPECTIVEORIGIN = 70886;
	public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION2_MSTRANSITIONPROPERTY = 70866;
	public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION2_MSTRANSITIONDURATION = 70867;
	public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION2_MSTRANSITIONTIMINGFUNCTION = 70868;
	public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION2_MSTRANSITIONDELAY = 70869;
	public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION2_MSTRANSITION = 70870;
	public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION2_MSTOUCHACTION = 70952;
	public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION2_MSSCROLLTRANSLATION = 70954;
	public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION2_MSFLEX = 70955;
	public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION2_MSFLEXPOSITIVE = 70956;
	public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION2_MSFLEXNEGATIVE = 70957;
	public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION2_MSFLEXPREFERREDSIZE = 70958;
	public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION2_MSFLEXFLOW = 70959;
	public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION2_MSFLEXDIRECTION = 70960;
	public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION2_MSFLEXWRAP = 70961;
	public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION2_MSFLEXALIGN = 70962;
	public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION2_MSFLEXITEMALIGN = 70963;
	public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION2_MSFLEXPACK = 70964;
	public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION2_MSFLEXLINEPACK = 70965;
	public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION2_MSFLEXORDER = 70966;
	public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION2_MSTOUCHSELECT = 70994;
	public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION2_TRANSFORM = 70967;
	public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION2_TRANSFORMORIGIN = 70968;
	public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION2_TRANSFORMSTYLE = 70976;
	public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION2_BACKFACEVISIBILITY = 70977;
	public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION2_PERSPECTIVE = 70974;
	public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION2_PERSPECTIVEORIGIN = 70975;
	public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION2_TRANSITIONPROPERTY = 70969;
	public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION2_TRANSITIONDURATION = 70970;
	public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION2_TRANSITIONTIMINGFUNCTION = 70971;
	public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION2_TRANSITIONDELAY = 70972;
	public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION2_TRANSITION = 70973;
	public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION2_FONTFEATURESETTINGS = 70987;
	public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION2_ANIMATIONNAME = 70978;
	public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION2_ANIMATIONDURATION = 70979;
	public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION2_ANIMATIONTIMINGFUNCTION = 70980;
	public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION2_ANIMATIONDELAY = 70981;
	public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION2_ANIMATIONDIRECTION = 70982;
	public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION2_ANIMATIONPLAYSTATE = 70983;
	public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION2_ANIMATIONITERATIONCOUNT = 70984;
	public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION2_ANIMATION = 70985;
	public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION2_ANIMATIONFILLMODE = 70986;
	public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION3_FLEX = 71002;
	public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION3_FLEXDIRECTION = 70998;
	public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION3_FLEXWRAP = 70999;
	public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION3_FLEXFLOW = 71000;
	public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION3_FLEXGROW = 71003;
	public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION3_FLEXSHRINK = 71004;
	public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION3_FLEXBASIS = 71005;
	public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION3_JUSTIFYCONTENT = 71006;
	public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION3_ALIGNITEMS = 71007;
	public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION3_ALIGNSELF = 71008;
	public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION3_ALIGNCONTENT = 71009;
	public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION3_BORDERIMAGE = 71010;
	public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION3_BORDERIMAGESOURCE = 71011;
	public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION3_BORDERIMAGESLICE = 71012;
	public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION3_BORDERIMAGEWIDTH = 71013;
	public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION3_BORDERIMAGEOUTSET = 71014;
	public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION3_BORDERIMAGEREPEAT = 71015;
	public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION3_MSIMEALIGN = 71017;
	public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION3_MSTEXTCOMBINEHORIZONTAL = 71018;
	public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION3_TOUCHACTION = 71019;
	public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION4_WEBKITAPPEARANCE = 71020;
	public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION4_WEBKITUSERSELECT = 71032;
	public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION4_WEBKITBOXALIGN = 71021;
	public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION4_WEBKITBOXORDINALGROUP = 71022;
	public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION4_WEBKITBOXPACK = 71023;
	public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION4_WEBKITBOXFLEX = 71024;
	public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION4_WEBKITBOXORIENT = 71025;
	public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION4_WEBKITBOXDIRECTION = 71026;
	public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION4_WEBKITTRANSFORM = 71028;
	public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION4_WEBKITBACKGROUNDSIZE = 71029;
	public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION4_WEBKITBACKFACEVISIBILITY = 71030;
	public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION4_WEBKITANIMATION = 71033;
	public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION4_WEBKITTRANSITION = 71034;
	public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION4_WEBKITANIMATIONNAME = 71035;
	public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION4_WEBKITANIMATIONDURATION = 71036;
	public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION4_WEBKITANIMATIONTIMINGFUNCTION = 71037;
	public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION4_WEBKITANIMATIONDELAY = 71038;
	public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION4_WEBKITANIMATIONITERATIONCOUNT = 71039;
	public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION4_WEBKITANIMATIONDIRECTION = 71040;
	public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION4_WEBKITANIMATIONPLAYSTATE = 71041;
	public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION4_WEBKITTRANSITIONPROPERTY = 71042;
	public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION4_WEBKITTRANSITIONDURATION = 71043;
	public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION4_WEBKITTRANSITIONTIMINGFUNCTION = 71044;
	public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION4_WEBKITTRANSITIONDELAY = 71045;
	public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION4_WEBKITBACKGROUNDATTACHMENT = 71046;
	public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION4_WEBKITBACKGROUNDCOLOR = 71047;
	public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION4_WEBKITBACKGROUNDCLIP = 71048;
	public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION4_WEBKITBACKGROUNDIMAGE = 71049;
	public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION4_WEBKITBACKGROUNDREPEAT = 71050;
	public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION4_WEBKITBACKGROUNDORIGIN = 71051;
	public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION4_WEBKITBACKGROUNDPOSITION = 71052;
	public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION4_WEBKITBACKGROUNDPOSITIONX = 71053;
	public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION4_WEBKITBACKGROUNDPOSITIONY = 71054;
	public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION4_WEBKITBACKGROUND = 71055;
	public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION4_WEBKITTRANSFORMORIGIN = 71056;
	public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION4_MSTEXTSIZEADJUST = 70864;
	public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION4_WEBKITTEXTSIZEADJUST = 71060;
	public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION4_WEBKITBORDERIMAGE = 71061;
	public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION4_WEBKITBORDERIMAGESOURCE = 71062;
	public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION4_WEBKITBORDERIMAGESLICE = 71063;
	public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION4_WEBKITBORDERIMAGEWIDTH = 71064;
	public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION4_WEBKITBORDERIMAGEOUTSET = 71065;
	public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION4_WEBKITBORDERIMAGEREPEAT = 71066;
	public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION4_WEBKITBOXSIZING = 71031;
	public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION4_WEBKITANIMATIONFILLMODE = 71027;
	public const uint32 DISPID_IHTMLSTYLEENABLED_MSGETPROPERTYENABLED = 70043;
	public const uint32 DISPID_IHTMLSTYLEENABLED_MSPUTPROPERTYENABLED = 70044;
	public const uint32 DISPID_IHTMLSTYLE_FONTFAMILY = 70554;
	public const uint32 DISPID_IHTMLSTYLE_FONTSTYLE = 70560;
	public const uint32 DISPID_IHTMLSTYLE_FONTVARIANT = 70561;
	public const uint32 DISPID_IHTMLSTYLE_FONTWEIGHT = 70563;
	public const uint32 DISPID_IHTMLSTYLE_FONTSIZE = 70555;
	public const uint32 DISPID_IHTMLSTYLE_FONT = 70577;
	public const uint32 DISPID_IHTMLSTYLE_COLOR = 70538;
	public const uint32 DISPID_IHTMLSTYLE_BACKGROUND = 70568;
	public const int32 DISPID_IHTMLSTYLE_BACKGROUNDCOLOR = -501;
	public const uint32 DISPID_IHTMLSTYLE_BACKGROUNDIMAGE = 70537;
	public const uint32 DISPID_IHTMLSTYLE_BACKGROUNDREPEAT = 70580;
	public const uint32 DISPID_IHTMLSTYLE_BACKGROUNDATTACHMENT = 70581;
	public const uint32 DISPID_IHTMLSTYLE_BACKGROUNDPOSITION = 70582;
	public const uint32 DISPID_IHTMLSTYLE_BACKGROUNDPOSITIONX = 70569;
	public const uint32 DISPID_IHTMLSTYLE_BACKGROUNDPOSITIONY = 70570;
	public const uint32 DISPID_IHTMLSTYLE_WORDSPACING = 70583;
	public const uint32 DISPID_IHTMLSTYLE_LETTERSPACING = 70544;
	public const uint32 DISPID_IHTMLSTYLE_TEXTDECORATION = 70571;
	public const uint32 DISPID_IHTMLSTYLE_TEXTDECORATIONNONE = 70559;
	public const uint32 DISPID_IHTMLSTYLE_TEXTDECORATIONUNDERLINE = 70557;
	public const uint32 DISPID_IHTMLSTYLE_TEXTDECORATIONOVERLINE = 70605;
	public const uint32 DISPID_IHTMLSTYLE_TEXTDECORATIONLINETHROUGH = 70556;
	public const uint32 DISPID_IHTMLSTYLE_TEXTDECORATIONBLINK = 70558;
	public const uint32 DISPID_IHTMLSTYLE_VERTICALALIGN = 70584;
	public const uint32 DISPID_IHTMLSTYLE_TEXTTRANSFORM = 70540;
	public const uint32 DISPID_IHTMLSTYLE_TEXTALIGN = 65608;
	public const uint32 DISPID_IHTMLSTYLE_TEXTINDENT = 70543;
	public const uint32 DISPID_IHTMLSTYLE_LINEHEIGHT = 70542;
	public const uint32 DISPID_IHTMLSTYLE_MARGINTOP = 70573;
	public const uint32 DISPID_IHTMLSTYLE_MARGINRIGHT = 70574;
	public const uint32 DISPID_IHTMLSTYLE_MARGINBOTTOM = 70575;
	public const uint32 DISPID_IHTMLSTYLE_MARGINLEFT = 70576;
	public const uint32 DISPID_IHTMLSTYLE_MARGIN = 70572;
	public const uint32 DISPID_IHTMLSTYLE_PADDINGTOP = 70548;
	public const uint32 DISPID_IHTMLSTYLE_PADDINGRIGHT = 70549;
	public const uint32 DISPID_IHTMLSTYLE_PADDINGBOTTOM = 70550;
	public const uint32 DISPID_IHTMLSTYLE_PADDINGLEFT = 70551;
	public const uint32 DISPID_IHTMLSTYLE_PADDING = 70547;
	public const uint32 DISPID_IHTMLSTYLE_BORDER = 70585;
	public const uint32 DISPID_IHTMLSTYLE_BORDERTOP = 70586;
	public const uint32 DISPID_IHTMLSTYLE_BORDERRIGHT = 70587;
	public const uint32 DISPID_IHTMLSTYLE_BORDERBOTTOM = 70588;
	public const uint32 DISPID_IHTMLSTYLE_BORDERLEFT = 70589;
	public const uint32 DISPID_IHTMLSTYLE_BORDERCOLOR = 70590;
	public const uint32 DISPID_IHTMLSTYLE_BORDERTOPCOLOR = 70591;
	public const uint32 DISPID_IHTMLSTYLE_BORDERRIGHTCOLOR = 70592;
	public const uint32 DISPID_IHTMLSTYLE_BORDERBOTTOMCOLOR = 70593;
	public const uint32 DISPID_IHTMLSTYLE_BORDERLEFTCOLOR = 70594;
	public const uint32 DISPID_IHTMLSTYLE_BORDERWIDTH = 70595;
	public const uint32 DISPID_IHTMLSTYLE_BORDERTOPWIDTH = 70596;
	public const uint32 DISPID_IHTMLSTYLE_BORDERRIGHTWIDTH = 70597;
	public const uint32 DISPID_IHTMLSTYLE_BORDERBOTTOMWIDTH = 70598;
	public const uint32 DISPID_IHTMLSTYLE_BORDERLEFTWIDTH = 70599;
	public const uint32 DISPID_IHTMLSTYLE_BORDERSTYLE = 70600;
	public const uint32 DISPID_IHTMLSTYLE_BORDERTOPSTYLE = 70601;
	public const uint32 DISPID_IHTMLSTYLE_BORDERRIGHTSTYLE = 70602;
	public const uint32 DISPID_IHTMLSTYLE_BORDERBOTTOMSTYLE = 70603;
	public const uint32 DISPID_IHTMLSTYLE_BORDERLEFTSTYLE = 70604;
	public const uint32 DISPID_IHTMLSTYLE_WIDTH = 65541;
	public const uint32 DISPID_IHTMLSTYLE_HEIGHT = 65542;
	public const uint32 DISPID_IHTMLSTYLE_STYLEFLOAT = 70606;
	public const uint32 DISPID_IHTMLSTYLE_CLEAR = 70552;
	public const uint32 DISPID_IHTMLSTYLE_DISPLAY = 70607;
	public const uint32 DISPID_IHTMLSTYLE_VISIBILITY = 70616;
	public const uint32 DISPID_IHTMLSTYLE_LISTSTYLETYPE = 70608;
	public const uint32 DISPID_IHTMLSTYLE_LISTSTYLEPOSITION = 70609;
	public const uint32 DISPID_IHTMLSTYLE_LISTSTYLEIMAGE = 70610;
	public const uint32 DISPID_IHTMLSTYLE_LISTSTYLE = 70611;
	public const uint32 DISPID_IHTMLSTYLE_WHITESPACE = 70612;
	public const uint32 DISPID_IHTMLSTYLE_TOP = 65540;
	public const uint32 DISPID_IHTMLSTYLE_LEFT = 65539;
	public const uint32 DISPID_IHTMLSTYLE_POSITION = 70626;
	public const uint32 DISPID_IHTMLSTYLE_ZINDEX = 70627;
	public const uint32 DISPID_IHTMLSTYLE_OVERFLOW = 70546;
	public const uint32 DISPID_IHTMLSTYLE_PAGEBREAKBEFORE = 70613;
	public const uint32 DISPID_IHTMLSTYLE_PAGEBREAKAFTER = 70614;
	public const uint32 DISPID_IHTMLSTYLE_CSSTEXT = 70635;
	public const uint32 DISPID_IHTMLSTYLE_PIXELTOP = 69536;
	public const uint32 DISPID_IHTMLSTYLE_PIXELLEFT = 69537;
	public const uint32 DISPID_IHTMLSTYLE_PIXELWIDTH = 69538;
	public const uint32 DISPID_IHTMLSTYLE_PIXELHEIGHT = 69539;
	public const uint32 DISPID_IHTMLSTYLE_POSTOP = 69540;
	public const uint32 DISPID_IHTMLSTYLE_POSLEFT = 69541;
	public const uint32 DISPID_IHTMLSTYLE_POSWIDTH = 69542;
	public const uint32 DISPID_IHTMLSTYLE_POSHEIGHT = 69543;
	public const uint32 DISPID_IHTMLSTYLE_CURSOR = 70638;
	public const uint32 DISPID_IHTMLSTYLE_CLIP = 70628;
	public const uint32 DISPID_IHTMLSTYLE_FILTER = 70618;
	public const uint32 DISPID_IHTMLSTYLE_SETATTRIBUTE = 66037;
	public const uint32 DISPID_IHTMLSTYLE_GETATTRIBUTE = 66038;
	public const uint32 DISPID_IHTMLSTYLE_REMOVEATTRIBUTE = 66039;
	public const uint32 DISPID_IHTMLSTYLE_TOSTRING = 69544;
	public const uint32 DISPID_IHTMLSTYLE2_TABLELAYOUT = 70634;
	public const uint32 DISPID_IHTMLSTYLE2_BORDERCOLLAPSE = 70620;
	public const uint32 DISPID_IHTMLSTYLE2_DIRECTION = 70655;
	public const uint32 DISPID_IHTMLSTYLE2_BEHAVIOR = 70651;
	public const uint32 DISPID_IHTMLSTYLE2_SETEXPRESSION = 66040;
	public const uint32 DISPID_IHTMLSTYLE2_GETEXPRESSION = 66041;
	public const uint32 DISPID_IHTMLSTYLE2_REMOVEEXPRESSION = 66042;
	public const uint32 DISPID_IHTMLSTYLE2_POSITION = 70626;
	public const uint32 DISPID_IHTMLSTYLE2_UNICODEBIDI = 70654;
	public const uint32 DISPID_IHTMLSTYLE2_BOTTOM = 65614;
	public const uint32 DISPID_IHTMLSTYLE2_RIGHT = 65613;
	public const uint32 DISPID_IHTMLSTYLE2_PIXELBOTTOM = 69545;
	public const uint32 DISPID_IHTMLSTYLE2_PIXELRIGHT = 69546;
	public const uint32 DISPID_IHTMLSTYLE2_POSBOTTOM = 69547;
	public const uint32 DISPID_IHTMLSTYLE2_POSRIGHT = 69548;
	public const uint32 DISPID_IHTMLSTYLE2_IMEMODE = 70656;
	public const uint32 DISPID_IHTMLSTYLE2_RUBYALIGN = 70657;
	public const uint32 DISPID_IHTMLSTYLE2_RUBYPOSITION = 70658;
	public const uint32 DISPID_IHTMLSTYLE2_RUBYOVERHANG = 70659;
	public const uint32 DISPID_IHTMLSTYLE2_LAYOUTGRIDCHAR = 70663;
	public const uint32 DISPID_IHTMLSTYLE2_LAYOUTGRIDLINE = 70664;
	public const uint32 DISPID_IHTMLSTYLE2_LAYOUTGRIDMODE = 70665;
	public const uint32 DISPID_IHTMLSTYLE2_LAYOUTGRIDTYPE = 70666;
	public const uint32 DISPID_IHTMLSTYLE2_LAYOUTGRID = 70667;
	public const uint32 DISPID_IHTMLSTYLE2_WORDBREAK = 70670;
	public const uint32 DISPID_IHTMLSTYLE2_LINEBREAK = 70669;
	public const uint32 DISPID_IHTMLSTYLE2_TEXTJUSTIFY = 70671;
	public const uint32 DISPID_IHTMLSTYLE2_TEXTJUSTIFYTRIM = 70672;
	public const uint32 DISPID_IHTMLSTYLE2_TEXTKASHIDA = 70673;
	public const uint32 DISPID_IHTMLSTYLE2_TEXTAUTOSPACE = 70668;
	public const uint32 DISPID_IHTMLSTYLE2_OVERFLOWX = 70675;
	public const uint32 DISPID_IHTMLSTYLE2_OVERFLOWY = 70676;
	public const uint32 DISPID_IHTMLSTYLE2_ACCELERATOR = 70683;
	public const uint32 DISPID_IHTMLSTYLE3_LAYOUTFLOW = 70691;
	public const uint32 DISPID_IHTMLSTYLE3_ZOOM = 70689;
	public const uint32 DISPID_IHTMLSTYLE3_WORDWRAP = 70694;
	public const uint32 DISPID_IHTMLSTYLE3_TEXTUNDERLINEPOSITION = 70695;
	public const uint32 DISPID_IHTMLSTYLE3_SCROLLBARBASECOLOR = 70716;
	public const uint32 DISPID_IHTMLSTYLE3_SCROLLBARFACECOLOR = 70717;
	public const uint32 DISPID_IHTMLSTYLE3_SCROLLBAR3DLIGHTCOLOR = 70718;
	public const uint32 DISPID_IHTMLSTYLE3_SCROLLBARSHADOWCOLOR = 70719;
	public const uint32 DISPID_IHTMLSTYLE3_SCROLLBARHIGHLIGHTCOLOR = 70720;
	public const uint32 DISPID_IHTMLSTYLE3_SCROLLBARDARKSHADOWCOLOR = 70721;
	public const uint32 DISPID_IHTMLSTYLE3_SCROLLBARARROWCOLOR = 70722;
	public const uint32 DISPID_IHTMLSTYLE3_SCROLLBARTRACKCOLOR = 70732;
	public const uint32 DISPID_IHTMLSTYLE3_WRITINGMODE = 70728;
	public const uint32 DISPID_IHTMLSTYLE3_TEXTALIGNLAST = 70739;
	public const uint32 DISPID_IHTMLSTYLE3_TEXTKASHIDASPACE = 70740;
	public const uint32 DISPID_IHTMLSTYLE4_TEXTOVERFLOW = 70745;
	public const uint32 DISPID_IHTMLSTYLE4_MINHEIGHT = 70747;
	public const uint32 DISPID_IHTMLSTYLE5_MSINTERPOLATIONMODE = 70749;
	public const uint32 DISPID_IHTMLSTYLE5_MAXHEIGHT = 70750;
	public const uint32 DISPID_IHTMLSTYLE5_MINWIDTH = 70751;
	public const uint32 DISPID_IHTMLSTYLE5_MAXWIDTH = 70752;
	public const uint32 DISPID_IHTMLSTYLE6_CONTENT = 70754;
	public const uint32 DISPID_IHTMLSTYLE6_CAPTIONSIDE = 70755;
	public const uint32 DISPID_IHTMLSTYLE6_COUNTERINCREMENT = 70756;
	public const uint32 DISPID_IHTMLSTYLE6_COUNTERRESET = 70757;
	public const uint32 DISPID_IHTMLSTYLE6_OUTLINE = 70758;
	public const uint32 DISPID_IHTMLSTYLE6_OUTLINEWIDTH = 70759;
	public const uint32 DISPID_IHTMLSTYLE6_OUTLINESTYLE = 70760;
	public const uint32 DISPID_IHTMLSTYLE6_OUTLINECOLOR = 70761;
	public const uint32 DISPID_IHTMLSTYLE6_BOXSIZING = 70762;
	public const uint32 DISPID_IHTMLSTYLE6_BORDERSPACING = 70763;
	public const uint32 DISPID_IHTMLSTYLE6_ORPHANS = 70764;
	public const uint32 DISPID_IHTMLSTYLE6_WIDOWS = 70765;
	public const uint32 DISPID_IHTMLSTYLE6_PAGEBREAKINSIDE = 70766;
	public const uint32 DISPID_IHTMLSTYLE6_EMPTYCELLS = 70786;
	public const uint32 DISPID_IHTMLSTYLE6_MSBLOCKPROGRESSION = 70787;
	public const uint32 DISPID_IHTMLSTYLE6_QUOTES = 70788;
	public const uint32 DISPID_IHTMLRULESTYLE_FONTFAMILY = 70554;
	public const uint32 DISPID_IHTMLRULESTYLE_FONTSTYLE = 70560;
	public const uint32 DISPID_IHTMLRULESTYLE_FONTVARIANT = 70561;
	public const uint32 DISPID_IHTMLRULESTYLE_FONTWEIGHT = 70563;
	public const uint32 DISPID_IHTMLRULESTYLE_FONTSIZE = 70555;
	public const uint32 DISPID_IHTMLRULESTYLE_FONT = 70577;
	public const uint32 DISPID_IHTMLRULESTYLE_COLOR = 70538;
	public const uint32 DISPID_IHTMLRULESTYLE_BACKGROUND = 70568;
	public const int32 DISPID_IHTMLRULESTYLE_BACKGROUNDCOLOR = -501;
	public const uint32 DISPID_IHTMLRULESTYLE_BACKGROUNDIMAGE = 70537;
	public const uint32 DISPID_IHTMLRULESTYLE_BACKGROUNDREPEAT = 70580;
	public const uint32 DISPID_IHTMLRULESTYLE_BACKGROUNDATTACHMENT = 70581;
	public const uint32 DISPID_IHTMLRULESTYLE_BACKGROUNDPOSITION = 70582;
	public const uint32 DISPID_IHTMLRULESTYLE_BACKGROUNDPOSITIONX = 70569;
	public const uint32 DISPID_IHTMLRULESTYLE_BACKGROUNDPOSITIONY = 70570;
	public const uint32 DISPID_IHTMLRULESTYLE_WORDSPACING = 70583;
	public const uint32 DISPID_IHTMLRULESTYLE_LETTERSPACING = 70544;
	public const uint32 DISPID_IHTMLRULESTYLE_TEXTDECORATION = 70571;
	public const uint32 DISPID_IHTMLRULESTYLE_TEXTDECORATIONNONE = 70559;
	public const uint32 DISPID_IHTMLRULESTYLE_TEXTDECORATIONUNDERLINE = 70557;
	public const uint32 DISPID_IHTMLRULESTYLE_TEXTDECORATIONOVERLINE = 70605;
	public const uint32 DISPID_IHTMLRULESTYLE_TEXTDECORATIONLINETHROUGH = 70556;
	public const uint32 DISPID_IHTMLRULESTYLE_TEXTDECORATIONBLINK = 70558;
	public const uint32 DISPID_IHTMLRULESTYLE_VERTICALALIGN = 70584;
	public const uint32 DISPID_IHTMLRULESTYLE_TEXTTRANSFORM = 70540;
	public const uint32 DISPID_IHTMLRULESTYLE_TEXTALIGN = 65608;
	public const uint32 DISPID_IHTMLRULESTYLE_TEXTINDENT = 70543;
	public const uint32 DISPID_IHTMLRULESTYLE_LINEHEIGHT = 70542;
	public const uint32 DISPID_IHTMLRULESTYLE_MARGINTOP = 70573;
	public const uint32 DISPID_IHTMLRULESTYLE_MARGINRIGHT = 70574;
	public const uint32 DISPID_IHTMLRULESTYLE_MARGINBOTTOM = 70575;
	public const uint32 DISPID_IHTMLRULESTYLE_MARGINLEFT = 70576;
	public const uint32 DISPID_IHTMLRULESTYLE_MARGIN = 70572;
	public const uint32 DISPID_IHTMLRULESTYLE_PADDINGTOP = 70548;
	public const uint32 DISPID_IHTMLRULESTYLE_PADDINGRIGHT = 70549;
	public const uint32 DISPID_IHTMLRULESTYLE_PADDINGBOTTOM = 70550;
	public const uint32 DISPID_IHTMLRULESTYLE_PADDINGLEFT = 70551;
	public const uint32 DISPID_IHTMLRULESTYLE_PADDING = 70547;
	public const uint32 DISPID_IHTMLRULESTYLE_BORDER = 70585;
	public const uint32 DISPID_IHTMLRULESTYLE_BORDERTOP = 70586;
	public const uint32 DISPID_IHTMLRULESTYLE_BORDERRIGHT = 70587;
	public const uint32 DISPID_IHTMLRULESTYLE_BORDERBOTTOM = 70588;
	public const uint32 DISPID_IHTMLRULESTYLE_BORDERLEFT = 70589;
	public const uint32 DISPID_IHTMLRULESTYLE_BORDERCOLOR = 70590;
	public const uint32 DISPID_IHTMLRULESTYLE_BORDERTOPCOLOR = 70591;
	public const uint32 DISPID_IHTMLRULESTYLE_BORDERRIGHTCOLOR = 70592;
	public const uint32 DISPID_IHTMLRULESTYLE_BORDERBOTTOMCOLOR = 70593;
	public const uint32 DISPID_IHTMLRULESTYLE_BORDERLEFTCOLOR = 70594;
	public const uint32 DISPID_IHTMLRULESTYLE_BORDERWIDTH = 70595;
	public const uint32 DISPID_IHTMLRULESTYLE_BORDERTOPWIDTH = 70596;
	public const uint32 DISPID_IHTMLRULESTYLE_BORDERRIGHTWIDTH = 70597;
	public const uint32 DISPID_IHTMLRULESTYLE_BORDERBOTTOMWIDTH = 70598;
	public const uint32 DISPID_IHTMLRULESTYLE_BORDERLEFTWIDTH = 70599;
	public const uint32 DISPID_IHTMLRULESTYLE_BORDERSTYLE = 70600;
	public const uint32 DISPID_IHTMLRULESTYLE_BORDERTOPSTYLE = 70601;
	public const uint32 DISPID_IHTMLRULESTYLE_BORDERRIGHTSTYLE = 70602;
	public const uint32 DISPID_IHTMLRULESTYLE_BORDERBOTTOMSTYLE = 70603;
	public const uint32 DISPID_IHTMLRULESTYLE_BORDERLEFTSTYLE = 70604;
	public const uint32 DISPID_IHTMLRULESTYLE_WIDTH = 65541;
	public const uint32 DISPID_IHTMLRULESTYLE_HEIGHT = 65542;
	public const uint32 DISPID_IHTMLRULESTYLE_STYLEFLOAT = 70606;
	public const uint32 DISPID_IHTMLRULESTYLE_CLEAR = 70552;
	public const uint32 DISPID_IHTMLRULESTYLE_DISPLAY = 70607;
	public const uint32 DISPID_IHTMLRULESTYLE_VISIBILITY = 70616;
	public const uint32 DISPID_IHTMLRULESTYLE_LISTSTYLETYPE = 70608;
	public const uint32 DISPID_IHTMLRULESTYLE_LISTSTYLEPOSITION = 70609;
	public const uint32 DISPID_IHTMLRULESTYLE_LISTSTYLEIMAGE = 70610;
	public const uint32 DISPID_IHTMLRULESTYLE_LISTSTYLE = 70611;
	public const uint32 DISPID_IHTMLRULESTYLE_WHITESPACE = 70612;
	public const uint32 DISPID_IHTMLRULESTYLE_TOP = 65540;
	public const uint32 DISPID_IHTMLRULESTYLE_LEFT = 65539;
	public const uint32 DISPID_IHTMLRULESTYLE_POSITION = 70626;
	public const uint32 DISPID_IHTMLRULESTYLE_ZINDEX = 70627;
	public const uint32 DISPID_IHTMLRULESTYLE_OVERFLOW = 70546;
	public const uint32 DISPID_IHTMLRULESTYLE_PAGEBREAKBEFORE = 70613;
	public const uint32 DISPID_IHTMLRULESTYLE_PAGEBREAKAFTER = 70614;
	public const uint32 DISPID_IHTMLRULESTYLE_CSSTEXT = 70635;
	public const uint32 DISPID_IHTMLRULESTYLE_CURSOR = 70638;
	public const uint32 DISPID_IHTMLRULESTYLE_CLIP = 70628;
	public const uint32 DISPID_IHTMLRULESTYLE_FILTER = 70618;
	public const uint32 DISPID_IHTMLRULESTYLE_SETATTRIBUTE = 66037;
	public const uint32 DISPID_IHTMLRULESTYLE_GETATTRIBUTE = 66038;
	public const uint32 DISPID_IHTMLRULESTYLE_REMOVEATTRIBUTE = 66039;
	public const uint32 DISPID_IHTMLRULESTYLE2_TABLELAYOUT = 70634;
	public const uint32 DISPID_IHTMLRULESTYLE2_BORDERCOLLAPSE = 70620;
	public const uint32 DISPID_IHTMLRULESTYLE2_DIRECTION = 70655;
	public const uint32 DISPID_IHTMLRULESTYLE2_BEHAVIOR = 70651;
	public const uint32 DISPID_IHTMLRULESTYLE2_POSITION = 70626;
	public const uint32 DISPID_IHTMLRULESTYLE2_UNICODEBIDI = 70654;
	public const uint32 DISPID_IHTMLRULESTYLE2_BOTTOM = 65614;
	public const uint32 DISPID_IHTMLRULESTYLE2_RIGHT = 65613;
	public const uint32 DISPID_IHTMLRULESTYLE2_PIXELBOTTOM = 69545;
	public const uint32 DISPID_IHTMLRULESTYLE2_PIXELRIGHT = 69546;
	public const uint32 DISPID_IHTMLRULESTYLE2_POSBOTTOM = 69547;
	public const uint32 DISPID_IHTMLRULESTYLE2_POSRIGHT = 69548;
	public const uint32 DISPID_IHTMLRULESTYLE2_IMEMODE = 70656;
	public const uint32 DISPID_IHTMLRULESTYLE2_RUBYALIGN = 70657;
	public const uint32 DISPID_IHTMLRULESTYLE2_RUBYPOSITION = 70658;
	public const uint32 DISPID_IHTMLRULESTYLE2_RUBYOVERHANG = 70659;
	public const uint32 DISPID_IHTMLRULESTYLE2_LAYOUTGRIDCHAR = 70663;
	public const uint32 DISPID_IHTMLRULESTYLE2_LAYOUTGRIDLINE = 70664;
	public const uint32 DISPID_IHTMLRULESTYLE2_LAYOUTGRIDMODE = 70665;
	public const uint32 DISPID_IHTMLRULESTYLE2_LAYOUTGRIDTYPE = 70666;
	public const uint32 DISPID_IHTMLRULESTYLE2_LAYOUTGRID = 70667;
	public const uint32 DISPID_IHTMLRULESTYLE2_TEXTAUTOSPACE = 70668;
	public const uint32 DISPID_IHTMLRULESTYLE2_WORDBREAK = 70670;
	public const uint32 DISPID_IHTMLRULESTYLE2_LINEBREAK = 70669;
	public const uint32 DISPID_IHTMLRULESTYLE2_TEXTJUSTIFY = 70671;
	public const uint32 DISPID_IHTMLRULESTYLE2_TEXTJUSTIFYTRIM = 70672;
	public const uint32 DISPID_IHTMLRULESTYLE2_TEXTKASHIDA = 70673;
	public const uint32 DISPID_IHTMLRULESTYLE2_OVERFLOWX = 70675;
	public const uint32 DISPID_IHTMLRULESTYLE2_OVERFLOWY = 70676;
	public const uint32 DISPID_IHTMLRULESTYLE2_ACCELERATOR = 70683;
	public const uint32 DISPID_IHTMLRULESTYLE3_LAYOUTFLOW = 70691;
	public const uint32 DISPID_IHTMLRULESTYLE3_ZOOM = 70689;
	public const uint32 DISPID_IHTMLRULESTYLE3_WORDWRAP = 70694;
	public const uint32 DISPID_IHTMLRULESTYLE3_TEXTUNDERLINEPOSITION = 70695;
	public const uint32 DISPID_IHTMLRULESTYLE3_SCROLLBARBASECOLOR = 70716;
	public const uint32 DISPID_IHTMLRULESTYLE3_SCROLLBARFACECOLOR = 70717;
	public const uint32 DISPID_IHTMLRULESTYLE3_SCROLLBAR3DLIGHTCOLOR = 70718;
	public const uint32 DISPID_IHTMLRULESTYLE3_SCROLLBARSHADOWCOLOR = 70719;
	public const uint32 DISPID_IHTMLRULESTYLE3_SCROLLBARHIGHLIGHTCOLOR = 70720;
	public const uint32 DISPID_IHTMLRULESTYLE3_SCROLLBARDARKSHADOWCOLOR = 70721;
	public const uint32 DISPID_IHTMLRULESTYLE3_SCROLLBARARROWCOLOR = 70722;
	public const uint32 DISPID_IHTMLRULESTYLE3_SCROLLBARTRACKCOLOR = 70732;
	public const uint32 DISPID_IHTMLRULESTYLE3_WRITINGMODE = 70728;
	public const uint32 DISPID_IHTMLRULESTYLE3_TEXTALIGNLAST = 70739;
	public const uint32 DISPID_IHTMLRULESTYLE3_TEXTKASHIDASPACE = 70740;
	public const uint32 DISPID_IHTMLRULESTYLE4_TEXTOVERFLOW = 70745;
	public const uint32 DISPID_IHTMLRULESTYLE4_MINHEIGHT = 70747;
	public const uint32 DISPID_IHTMLRULESTYLE5_MSINTERPOLATIONMODE = 70749;
	public const uint32 DISPID_IHTMLRULESTYLE5_MAXHEIGHT = 70750;
	public const uint32 DISPID_IHTMLRULESTYLE5_MINWIDTH = 70751;
	public const uint32 DISPID_IHTMLRULESTYLE5_MAXWIDTH = 70752;
	public const uint32 DISPID_IHTMLRULESTYLE6_CONTENT = 70754;
	public const uint32 DISPID_IHTMLRULESTYLE6_CAPTIONSIDE = 70755;
	public const uint32 DISPID_IHTMLRULESTYLE6_COUNTERINCREMENT = 70756;
	public const uint32 DISPID_IHTMLRULESTYLE6_COUNTERRESET = 70757;
	public const uint32 DISPID_IHTMLRULESTYLE6_OUTLINE = 70758;
	public const uint32 DISPID_IHTMLRULESTYLE6_OUTLINEWIDTH = 70759;
	public const uint32 DISPID_IHTMLRULESTYLE6_OUTLINESTYLE = 70760;
	public const uint32 DISPID_IHTMLRULESTYLE6_OUTLINECOLOR = 70761;
	public const uint32 DISPID_IHTMLRULESTYLE6_BOXSIZING = 70762;
	public const uint32 DISPID_IHTMLRULESTYLE6_BORDERSPACING = 70763;
	public const uint32 DISPID_IHTMLRULESTYLE6_ORPHANS = 70764;
	public const uint32 DISPID_IHTMLRULESTYLE6_WIDOWS = 70765;
	public const uint32 DISPID_IHTMLRULESTYLE6_PAGEBREAKINSIDE = 70766;
	public const uint32 DISPID_IHTMLRULESTYLE6_EMPTYCELLS = 70786;
	public const uint32 DISPID_IHTMLRULESTYLE6_MSBLOCKPROGRESSION = 70787;
	public const uint32 DISPID_IHTMLRULESTYLE6_QUOTES = 70788;
	public const uint32 DISPID_IHTMLCSSRULE_TYPE = 1101;
	public const uint32 DISPID_IHTMLCSSRULE_CSSTEXT = 1102;
	public const uint32 DISPID_IHTMLCSSRULE_PARENTRULE = 1103;
	public const uint32 DISPID_IHTMLCSSRULE_PARENTSTYLESHEET = 1104;
	public const uint32 DISPID_IHTMLCSSIMPORTRULE_HREF = 1001;
	public const uint32 DISPID_IHTMLCSSIMPORTRULE_MEDIA = 1002;
	public const uint32 DISPID_IHTMLCSSIMPORTRULE_STYLESHEET = 1003;
	public const uint32 DISPID_IHTMLCSSMEDIARULE_MEDIA = 1001;
	public const uint32 DISPID_IHTMLCSSMEDIARULE_CSSRULES = 1002;
	public const uint32 DISPID_IHTMLCSSMEDIARULE_INSERTRULE = 1003;
	public const uint32 DISPID_IHTMLCSSMEDIARULE_DELETERULE = 1004;
	public const uint32 DISPID_IHTMLCSSMEDIALIST_MEDIATEXT = 1001;
	public const uint32 DISPID_IHTMLCSSMEDIALIST_LENGTH = 1002;
	public const uint32 DISPID_IHTMLCSSMEDIALIST_ITEM = 1003;
	public const uint32 DISPID_IHTMLCSSMEDIALIST_APPENDMEDIUM = 1004;
	public const uint32 DISPID_IHTMLCSSMEDIALIST_DELETEMEDIUM = 1005;
	public const uint32 DISPID_IHTMLCSSNAMESPACERULE_NAMESPACEURI = 1001;
	public const uint32 DISPID_IHTMLCSSNAMESPACERULE_PREFIX = 1002;
	public const uint32 DISPID_IHTMLMSCSSKEYFRAMERULE_KEYTEXT = 1001;
	public const uint32 DISPID_IHTMLMSCSSKEYFRAMERULE_STYLE = 1002;
	public const uint32 DISPID_IHTMLMSCSSKEYFRAMESRULE_NAME = 1001;
	public const uint32 DISPID_IHTMLMSCSSKEYFRAMESRULE_CSSRULES = 1002;
	public const uint32 DISPID_IHTMLMSCSSKEYFRAMESRULE_APPENDRULE = 1003;
	public const uint32 DISPID_IHTMLMSCSSKEYFRAMESRULE_DELETERULE = 1004;
	public const uint32 DISPID_IHTMLMSCSSKEYFRAMESRULE_FINDRULE = 1005;
	public const uint32 DISPID_IHTMLRENDERSTYLE_TEXTLINETHROUGHSTYLE = 70702;
	public const uint32 DISPID_IHTMLRENDERSTYLE_TEXTUNDERLINESTYLE = 70703;
	public const uint32 DISPID_IHTMLRENDERSTYLE_TEXTEFFECT = 70704;
	public const uint32 DISPID_IHTMLRENDERSTYLE_TEXTCOLOR = 70726;
	public const uint32 DISPID_IHTMLRENDERSTYLE_TEXTBACKGROUNDCOLOR = 70705;
	public const uint32 DISPID_IHTMLRENDERSTYLE_TEXTDECORATIONCOLOR = 70725;
	public const uint32 DISPID_IHTMLRENDERSTYLE_RENDERINGPRIORITY = 70706;
	public const uint32 DISPID_IHTMLRENDERSTYLE_DEFAULTTEXTSELECTION = 70724;
	public const uint32 DISPID_IHTMLRENDERSTYLE_TEXTDECORATION = 70727;
	public const uint32 DISPID_IHTMLCURRENTSTYLE_POSITION = 70626;
	public const uint32 DISPID_IHTMLCURRENTSTYLE_STYLEFLOAT = 70606;
	public const uint32 DISPID_IHTMLCURRENTSTYLE_COLOR = 70538;
	public const int32 DISPID_IHTMLCURRENTSTYLE_BACKGROUNDCOLOR = -501;
	public const uint32 DISPID_IHTMLCURRENTSTYLE_FONTFAMILY = 70554;
	public const uint32 DISPID_IHTMLCURRENTSTYLE_FONTSTYLE = 70560;
	public const uint32 DISPID_IHTMLCURRENTSTYLE_FONTVARIANT = 70561;
	public const uint32 DISPID_IHTMLCURRENTSTYLE_FONTWEIGHT = 70563;
	public const uint32 DISPID_IHTMLCURRENTSTYLE_FONTSIZE = 70555;
	public const uint32 DISPID_IHTMLCURRENTSTYLE_BACKGROUNDIMAGE = 70537;
	public const uint32 DISPID_IHTMLCURRENTSTYLE_BACKGROUNDPOSITIONX = 70569;
	public const uint32 DISPID_IHTMLCURRENTSTYLE_BACKGROUNDPOSITIONY = 70570;
	public const uint32 DISPID_IHTMLCURRENTSTYLE_BACKGROUNDREPEAT = 70580;
	public const uint32 DISPID_IHTMLCURRENTSTYLE_BORDERLEFTCOLOR = 70594;
	public const uint32 DISPID_IHTMLCURRENTSTYLE_BORDERTOPCOLOR = 70591;
	public const uint32 DISPID_IHTMLCURRENTSTYLE_BORDERRIGHTCOLOR = 70592;
	public const uint32 DISPID_IHTMLCURRENTSTYLE_BORDERBOTTOMCOLOR = 70593;
	public const uint32 DISPID_IHTMLCURRENTSTYLE_BORDERTOPSTYLE = 70601;
	public const uint32 DISPID_IHTMLCURRENTSTYLE_BORDERRIGHTSTYLE = 70602;
	public const uint32 DISPID_IHTMLCURRENTSTYLE_BORDERBOTTOMSTYLE = 70603;
	public const uint32 DISPID_IHTMLCURRENTSTYLE_BORDERLEFTSTYLE = 70604;
	public const uint32 DISPID_IHTMLCURRENTSTYLE_BORDERTOPWIDTH = 70596;
	public const uint32 DISPID_IHTMLCURRENTSTYLE_BORDERRIGHTWIDTH = 70597;
	public const uint32 DISPID_IHTMLCURRENTSTYLE_BORDERBOTTOMWIDTH = 70598;
	public const uint32 DISPID_IHTMLCURRENTSTYLE_BORDERLEFTWIDTH = 70599;
	public const uint32 DISPID_IHTMLCURRENTSTYLE_LEFT = 65539;
	public const uint32 DISPID_IHTMLCURRENTSTYLE_TOP = 65540;
	public const uint32 DISPID_IHTMLCURRENTSTYLE_WIDTH = 65541;
	public const uint32 DISPID_IHTMLCURRENTSTYLE_HEIGHT = 65542;
	public const uint32 DISPID_IHTMLCURRENTSTYLE_PADDINGLEFT = 70551;
	public const uint32 DISPID_IHTMLCURRENTSTYLE_PADDINGTOP = 70548;
	public const uint32 DISPID_IHTMLCURRENTSTYLE_PADDINGRIGHT = 70549;
	public const uint32 DISPID_IHTMLCURRENTSTYLE_PADDINGBOTTOM = 70550;
	public const uint32 DISPID_IHTMLCURRENTSTYLE_TEXTALIGN = 65608;
	public const uint32 DISPID_IHTMLCURRENTSTYLE_TEXTDECORATION = 70571;
	public const uint32 DISPID_IHTMLCURRENTSTYLE_DISPLAY = 70607;
	public const uint32 DISPID_IHTMLCURRENTSTYLE_VISIBILITY = 70616;
	public const uint32 DISPID_IHTMLCURRENTSTYLE_ZINDEX = 70627;
	public const uint32 DISPID_IHTMLCURRENTSTYLE_LETTERSPACING = 70544;
	public const uint32 DISPID_IHTMLCURRENTSTYLE_LINEHEIGHT = 70542;
	public const uint32 DISPID_IHTMLCURRENTSTYLE_TEXTINDENT = 70543;
	public const uint32 DISPID_IHTMLCURRENTSTYLE_VERTICALALIGN = 70584;
	public const uint32 DISPID_IHTMLCURRENTSTYLE_BACKGROUNDATTACHMENT = 70581;
	public const uint32 DISPID_IHTMLCURRENTSTYLE_MARGINTOP = 70573;
	public const uint32 DISPID_IHTMLCURRENTSTYLE_MARGINRIGHT = 70574;
	public const uint32 DISPID_IHTMLCURRENTSTYLE_MARGINBOTTOM = 70575;
	public const uint32 DISPID_IHTMLCURRENTSTYLE_MARGINLEFT = 70576;
	public const uint32 DISPID_IHTMLCURRENTSTYLE_CLEAR = 70552;
	public const uint32 DISPID_IHTMLCURRENTSTYLE_LISTSTYLETYPE = 70608;
	public const uint32 DISPID_IHTMLCURRENTSTYLE_LISTSTYLEPOSITION = 70609;
	public const uint32 DISPID_IHTMLCURRENTSTYLE_LISTSTYLEIMAGE = 70610;
	public const uint32 DISPID_IHTMLCURRENTSTYLE_CLIPTOP = 70629;
	public const uint32 DISPID_IHTMLCURRENTSTYLE_CLIPRIGHT = 70630;
	public const uint32 DISPID_IHTMLCURRENTSTYLE_CLIPBOTTOM = 70631;
	public const uint32 DISPID_IHTMLCURRENTSTYLE_CLIPLEFT = 70632;
	public const uint32 DISPID_IHTMLCURRENTSTYLE_OVERFLOW = 70546;
	public const uint32 DISPID_IHTMLCURRENTSTYLE_PAGEBREAKBEFORE = 70613;
	public const uint32 DISPID_IHTMLCURRENTSTYLE_PAGEBREAKAFTER = 70614;
	public const uint32 DISPID_IHTMLCURRENTSTYLE_CURSOR = 70638;
	public const uint32 DISPID_IHTMLCURRENTSTYLE_TABLELAYOUT = 70634;
	public const uint32 DISPID_IHTMLCURRENTSTYLE_BORDERCOLLAPSE = 70620;
	public const uint32 DISPID_IHTMLCURRENTSTYLE_DIRECTION = 70655;
	public const uint32 DISPID_IHTMLCURRENTSTYLE_BEHAVIOR = 70651;
	public const uint32 DISPID_IHTMLCURRENTSTYLE_GETATTRIBUTE = 66038;
	public const uint32 DISPID_IHTMLCURRENTSTYLE_UNICODEBIDI = 70654;
	public const uint32 DISPID_IHTMLCURRENTSTYLE_RIGHT = 65613;
	public const uint32 DISPID_IHTMLCURRENTSTYLE_BOTTOM = 65614;
	public const uint32 DISPID_IHTMLCURRENTSTYLE_IMEMODE = 70656;
	public const uint32 DISPID_IHTMLCURRENTSTYLE_RUBYALIGN = 70657;
	public const uint32 DISPID_IHTMLCURRENTSTYLE_RUBYPOSITION = 70658;
	public const uint32 DISPID_IHTMLCURRENTSTYLE_RUBYOVERHANG = 70659;
	public const uint32 DISPID_IHTMLCURRENTSTYLE_TEXTAUTOSPACE = 70668;
	public const uint32 DISPID_IHTMLCURRENTSTYLE_LINEBREAK = 70669;
	public const uint32 DISPID_IHTMLCURRENTSTYLE_WORDBREAK = 70670;
	public const uint32 DISPID_IHTMLCURRENTSTYLE_TEXTJUSTIFY = 70671;
	public const uint32 DISPID_IHTMLCURRENTSTYLE_TEXTJUSTIFYTRIM = 70672;
	public const uint32 DISPID_IHTMLCURRENTSTYLE_TEXTKASHIDA = 70673;
	public const uint32 DISPID_IHTMLCURRENTSTYLE_BLOCKDIRECTION = 70653;
	public const uint32 DISPID_IHTMLCURRENTSTYLE_LAYOUTGRIDCHAR = 70663;
	public const uint32 DISPID_IHTMLCURRENTSTYLE_LAYOUTGRIDLINE = 70664;
	public const uint32 DISPID_IHTMLCURRENTSTYLE_LAYOUTGRIDMODE = 70665;
	public const uint32 DISPID_IHTMLCURRENTSTYLE_LAYOUTGRIDTYPE = 70666;
	public const uint32 DISPID_IHTMLCURRENTSTYLE_BORDERSTYLE = 70600;
	public const uint32 DISPID_IHTMLCURRENTSTYLE_BORDERCOLOR = 70590;
	public const uint32 DISPID_IHTMLCURRENTSTYLE_BORDERWIDTH = 70595;
	public const uint32 DISPID_IHTMLCURRENTSTYLE_PADDING = 70547;
	public const uint32 DISPID_IHTMLCURRENTSTYLE_MARGIN = 70572;
	public const uint32 DISPID_IHTMLCURRENTSTYLE_ACCELERATOR = 70683;
	public const uint32 DISPID_IHTMLCURRENTSTYLE_OVERFLOWX = 70675;
	public const uint32 DISPID_IHTMLCURRENTSTYLE_OVERFLOWY = 70676;
	public const uint32 DISPID_IHTMLCURRENTSTYLE_TEXTTRANSFORM = 70540;
	public const uint32 DISPID_IHTMLCURRENTSTYLE2_LAYOUTFLOW = 70691;
	public const uint32 DISPID_IHTMLCURRENTSTYLE2_WORDWRAP = 70694;
	public const uint32 DISPID_IHTMLCURRENTSTYLE2_TEXTUNDERLINEPOSITION = 70695;
	public const uint32 DISPID_IHTMLCURRENTSTYLE2_HASLAYOUT = 70696;
	public const uint32 DISPID_IHTMLCURRENTSTYLE2_SCROLLBARBASECOLOR = 70716;
	public const uint32 DISPID_IHTMLCURRENTSTYLE2_SCROLLBARFACECOLOR = 70717;
	public const uint32 DISPID_IHTMLCURRENTSTYLE2_SCROLLBAR3DLIGHTCOLOR = 70718;
	public const uint32 DISPID_IHTMLCURRENTSTYLE2_SCROLLBARSHADOWCOLOR = 70719;
	public const uint32 DISPID_IHTMLCURRENTSTYLE2_SCROLLBARHIGHLIGHTCOLOR = 70720;
	public const uint32 DISPID_IHTMLCURRENTSTYLE2_SCROLLBARDARKSHADOWCOLOR = 70721;
	public const uint32 DISPID_IHTMLCURRENTSTYLE2_SCROLLBARARROWCOLOR = 70722;
	public const uint32 DISPID_IHTMLCURRENTSTYLE2_SCROLLBARTRACKCOLOR = 70732;
	public const uint32 DISPID_IHTMLCURRENTSTYLE2_WRITINGMODE = 70728;
	public const uint32 DISPID_IHTMLCURRENTSTYLE2_ZOOM = 70689;
	public const uint32 DISPID_IHTMLCURRENTSTYLE2_FILTER = 70618;
	public const uint32 DISPID_IHTMLCURRENTSTYLE2_TEXTALIGNLAST = 70739;
	public const uint32 DISPID_IHTMLCURRENTSTYLE2_TEXTKASHIDASPACE = 70740;
	public const uint32 DISPID_IHTMLCURRENTSTYLE2_ISBLOCK = 70744;
	public const uint32 DISPID_IHTMLCURRENTSTYLE3_TEXTOVERFLOW = 70745;
	public const uint32 DISPID_IHTMLCURRENTSTYLE3_MINHEIGHT = 70747;
	public const uint32 DISPID_IHTMLCURRENTSTYLE3_WORDSPACING = 70583;
	public const uint32 DISPID_IHTMLCURRENTSTYLE3_WHITESPACE = 70612;
	public const uint32 DISPID_IHTMLCURRENTSTYLE4_MSINTERPOLATIONMODE = 70749;
	public const uint32 DISPID_IHTMLCURRENTSTYLE4_MAXHEIGHT = 70750;
	public const uint32 DISPID_IHTMLCURRENTSTYLE4_MINWIDTH = 70751;
	public const uint32 DISPID_IHTMLCURRENTSTYLE4_MAXWIDTH = 70752;
	public const uint32 DISPID_IHTMLCURRENTSTYLE5_CAPTIONSIDE = 70755;
	public const uint32 DISPID_IHTMLCURRENTSTYLE5_OUTLINE = 70758;
	public const uint32 DISPID_IHTMLCURRENTSTYLE5_OUTLINEWIDTH = 70759;
	public const uint32 DISPID_IHTMLCURRENTSTYLE5_OUTLINESTYLE = 70760;
	public const uint32 DISPID_IHTMLCURRENTSTYLE5_OUTLINECOLOR = 70761;
	public const uint32 DISPID_IHTMLCURRENTSTYLE5_BOXSIZING = 70762;
	public const uint32 DISPID_IHTMLCURRENTSTYLE5_BORDERSPACING = 70763;
	public const uint32 DISPID_IHTMLCURRENTSTYLE5_ORPHANS = 70764;
	public const uint32 DISPID_IHTMLCURRENTSTYLE5_WIDOWS = 70765;
	public const uint32 DISPID_IHTMLCURRENTSTYLE5_PAGEBREAKINSIDE = 70766;
	public const uint32 DISPID_IHTMLCURRENTSTYLE5_EMPTYCELLS = 70786;
	public const uint32 DISPID_IHTMLCURRENTSTYLE5_MSBLOCKPROGRESSION = 70787;
	public const uint32 DISPID_IHTMLCURRENTSTYLE5_QUOTES = 70788;
	public const uint32 DISPID_IHTMLRECT_LEFT = 1001;
	public const uint32 DISPID_IHTMLRECT_TOP = 1002;
	public const uint32 DISPID_IHTMLRECT_RIGHT = 1003;
	public const uint32 DISPID_IHTMLRECT_BOTTOM = 1004;
	public const uint32 DISPID_IHTMLRECT2_WIDTH = 1005;
	public const uint32 DISPID_IHTMLRECT2_HEIGHT = 1006;
	public const uint32 DISPID_IHTMLRECTCOLLECTION_LENGTH = 1500;
	public const int32 DISPID_IHTMLRECTCOLLECTION__NEWENUM = -4;
	public const uint32 DISPID_IHTMLRECTCOLLECTION_ITEM = 0;
	public const uint32 DISPID_IHTMLDOMNODE_NODETYPE = 66582;
	public const uint32 DISPID_IHTMLDOMNODE_PARENTNODE = 66583;
	public const uint32 DISPID_IHTMLDOMNODE_HASCHILDNODES = 66584;
	public const uint32 DISPID_IHTMLDOMNODE_CHILDNODES = 66585;
	public const uint32 DISPID_IHTMLDOMNODE_ATTRIBUTES = 66586;
	public const uint32 DISPID_IHTMLDOMNODE_INSERTBEFORE = 66587;
	public const uint32 DISPID_IHTMLDOMNODE_REMOVECHILD = 66588;
	public const uint32 DISPID_IHTMLDOMNODE_REPLACECHILD = 66589;
	public const uint32 DISPID_IHTMLDOMNODE_CLONENODE = 66597;
	public const uint32 DISPID_IHTMLDOMNODE_REMOVENODE = 66602;
	public const uint32 DISPID_IHTMLDOMNODE_SWAPNODE = 66604;
	public const uint32 DISPID_IHTMLDOMNODE_REPLACENODE = 66603;
	public const uint32 DISPID_IHTMLDOMNODE_APPENDCHILD = 66609;
	public const uint32 DISPID_IHTMLDOMNODE_NODENAME = 66610;
	public const uint32 DISPID_IHTMLDOMNODE_NODEVALUE = 66611;
	public const uint32 DISPID_IHTMLDOMNODE_FIRSTCHILD = 66612;
	public const uint32 DISPID_IHTMLDOMNODE_LASTCHILD = 66613;
	public const uint32 DISPID_IHTMLDOMNODE_PREVIOUSSIBLING = 66614;
	public const uint32 DISPID_IHTMLDOMNODE_NEXTSIBLING = 66615;
	public const uint32 DISPID_IHTMLDOMNODE2_OWNERDOCUMENT = 66649;
	public const uint32 DISPID_IHTMLDOMNODE3_PREFIX = 66656;
	public const uint32 DISPID_IHTMLDOMNODE3_LOCALNAME = 66654;
	public const uint32 DISPID_IHTMLDOMNODE3_NAMESPACEURI = 66655;
	public const uint32 DISPID_IHTMLDOMNODE3_TEXTCONTENT = 66663;
	public const uint32 DISPID_IHTMLDOMNODE3_ISEQUALNODE = 66657;
	public const uint32 DISPID_IHTMLDOMNODE3_LOOKUPNAMESPACEURI = 66658;
	public const uint32 DISPID_IHTMLDOMNODE3_LOOKUPPREFIX = 66659;
	public const uint32 DISPID_IHTMLDOMNODE3_ISDEFAULTNAMESPACE = 66660;
	public const uint32 DISPID_IHTMLDOMNODE3_IE9_APPENDCHILD = 66804;
	public const uint32 DISPID_IHTMLDOMNODE3_IE9_INSERTBEFORE = 66805;
	public const uint32 DISPID_IHTMLDOMNODE3_IE9_REMOVECHILD = 66806;
	public const uint32 DISPID_IHTMLDOMNODE3_IE9_REPLACECHILD = 66807;
	public const uint32 DISPID_IHTMLDOMNODE3_ISSAMENODE = 66661;
	public const uint32 DISPID_IHTMLDOMNODE3_COMPAREDOCUMENTPOSITION = 66662;
	public const uint32 DISPID_IHTMLDOMNODE3_ISSUPPORTED = 66813;
	public const uint32 DISPID_IHTMLDOMATTRIBUTE_NODENAME = 1000;
	public const uint32 DISPID_IHTMLDOMATTRIBUTE_NODEVALUE = 1002;
	public const uint32 DISPID_IHTMLDOMATTRIBUTE_SPECIFIED = 1001;
	public const uint32 DISPID_IHTMLDOMATTRIBUTE2_NAME = 1003;
	public const uint32 DISPID_IHTMLDOMATTRIBUTE2_VALUE = 1004;
	public const uint32 DISPID_IHTMLDOMATTRIBUTE2_EXPANDO = 1005;
	public const uint32 DISPID_IHTMLDOMATTRIBUTE2_NODETYPE = 1006;
	public const uint32 DISPID_IHTMLDOMATTRIBUTE2_PARENTNODE = 1007;
	public const uint32 DISPID_IHTMLDOMATTRIBUTE2_CHILDNODES = 1008;
	public const uint32 DISPID_IHTMLDOMATTRIBUTE2_FIRSTCHILD = 1009;
	public const uint32 DISPID_IHTMLDOMATTRIBUTE2_LASTCHILD = 1010;
	public const uint32 DISPID_IHTMLDOMATTRIBUTE2_PREVIOUSSIBLING = 1011;
	public const uint32 DISPID_IHTMLDOMATTRIBUTE2_NEXTSIBLING = 1012;
	public const uint32 DISPID_IHTMLDOMATTRIBUTE2_ATTRIBUTES = 1013;
	public const uint32 DISPID_IHTMLDOMATTRIBUTE2_OWNERDOCUMENT = 1014;
	public const uint32 DISPID_IHTMLDOMATTRIBUTE2_INSERTBEFORE = 1015;
	public const uint32 DISPID_IHTMLDOMATTRIBUTE2_REPLACECHILD = 1016;
	public const uint32 DISPID_IHTMLDOMATTRIBUTE2_REMOVECHILD = 1017;
	public const uint32 DISPID_IHTMLDOMATTRIBUTE2_APPENDCHILD = 1018;
	public const uint32 DISPID_IHTMLDOMATTRIBUTE2_HASCHILDNODES = 1019;
	public const uint32 DISPID_IHTMLDOMATTRIBUTE2_CLONENODE = 1020;
	public const uint32 DISPID_IHTMLDOMATTRIBUTE3_IE8_NODEVALUE = 1153;
	public const uint32 DISPID_IHTMLDOMATTRIBUTE3_IE8_VALUE = 1154;
	public const uint32 DISPID_IHTMLDOMATTRIBUTE3_IE8_SPECIFIED = 1150;
	public const uint32 DISPID_IHTMLDOMATTRIBUTE3_OWNERELEMENT = 1151;
	public const uint32 DISPID_IHTMLDOMATTRIBUTE4_IE9_NODEVALUE = 1159;
	public const uint32 DISPID_IHTMLDOMATTRIBUTE4_IE9_NODENAME = 1160;
	public const uint32 DISPID_IHTMLDOMATTRIBUTE4_IE9_NAME = 1161;
	public const uint32 DISPID_IHTMLDOMATTRIBUTE4_IE9_VALUE = 1162;
	public const uint32 DISPID_IHTMLDOMATTRIBUTE4_IE9_FIRSTCHILD = 1163;
	public const uint32 DISPID_IHTMLDOMATTRIBUTE4_IE9_LASTCHILD = 1164;
	public const uint32 DISPID_IHTMLDOMATTRIBUTE4_IE9_CHILDNODES = 1165;
	public const uint32 DISPID_IHTMLDOMATTRIBUTE4_HASATTRIBUTES = 1166;
	public const uint32 DISPID_IHTMLDOMATTRIBUTE4_IE9_HASCHILDNODES = 1167;
	public const uint32 DISPID_IHTMLDOMATTRIBUTE4_NORMALIZE = 1170;
	public const uint32 DISPID_IHTMLDOMATTRIBUTE4_IE9_SPECIFIED = 1171;
	public const uint32 DISPID_IHTMLDOMTEXTNODE_DATA = 1000;
	public const uint32 DISPID_IHTMLDOMTEXTNODE_TOSTRING = 1001;
	public const uint32 DISPID_IHTMLDOMTEXTNODE_LENGTH = 1002;
	public const uint32 DISPID_IHTMLDOMTEXTNODE_SPLITTEXT = 1003;
	public const uint32 DISPID_IHTMLDOMTEXTNODE2_SUBSTRINGDATA = 1004;
	public const uint32 DISPID_IHTMLDOMTEXTNODE2_APPENDDATA = 1005;
	public const uint32 DISPID_IHTMLDOMTEXTNODE2_INSERTDATA = 1006;
	public const uint32 DISPID_IHTMLDOMTEXTNODE2_DELETEDATA = 1007;
	public const uint32 DISPID_IHTMLDOMTEXTNODE2_REPLACEDATA = 1008;
	public const uint32 DISPID_IHTMLDOMTEXTNODE3_IE9_SUBSTRINGDATA = 1010;
	public const uint32 DISPID_IHTMLDOMTEXTNODE3_IE9_INSERTDATA = 1011;
	public const uint32 DISPID_IHTMLDOMTEXTNODE3_IE9_DELETEDATA = 1012;
	public const uint32 DISPID_IHTMLDOMTEXTNODE3_IE9_REPLACEDATA = 1013;
	public const uint32 DISPID_IHTMLDOMTEXTNODE3_IE9_SPLITTEXT = 1009;
	public const uint32 DISPID_IHTMLDOMTEXTNODE3_WHOLETEXT = 1014;
	public const uint32 DISPID_IHTMLDOMTEXTNODE3_REPLACEWHOLETEXT = 1015;
	public const uint32 DISPID_IHTMLDOMTEXTNODE3_HASATTRIBUTES = 1017;
	public const uint32 DISPID_IHTMLDOMTEXTNODE3_NORMALIZE = 1019;
	public const uint32 DISPID_IHTMLDOMIMPLEMENTATION_HASFEATURE = 1000;
	public const uint32 DISPID_IHTMLDOMIMPLEMENTATION2_CREATEDOCUMENTTYPE = 1001;
	public const uint32 DISPID_IHTMLDOMIMPLEMENTATION2_CREATEDOCUMENT = 1002;
	public const uint32 DISPID_IHTMLDOMIMPLEMENTATION2_CREATEHTMLDOCUMENT = 1003;
	public const uint32 DISPID_IHTMLDOMIMPLEMENTATION2_IE9_HASFEATURE = 1004;
	public const uint32 DISPID_IHTMLATTRIBUTECOLLECTION_LENGTH = 1500;
	public const int32 DISPID_IHTMLATTRIBUTECOLLECTION__NEWENUM = -4;
	public const uint32 DISPID_IHTMLATTRIBUTECOLLECTION_ITEM = 0;
	public const uint32 DISPID_IHTMLATTRIBUTECOLLECTION2_GETNAMEDITEM = 1501;
	public const uint32 DISPID_IHTMLATTRIBUTECOLLECTION2_SETNAMEDITEM = 1502;
	public const uint32 DISPID_IHTMLATTRIBUTECOLLECTION2_REMOVENAMEDITEM = 1503;
	public const uint32 DISPID_IHTMLATTRIBUTECOLLECTION3_IE8_GETNAMEDITEM = 1150;
	public const uint32 DISPID_IHTMLATTRIBUTECOLLECTION3_IE8_SETNAMEDITEM = 1151;
	public const uint32 DISPID_IHTMLATTRIBUTECOLLECTION3_IE8_REMOVENAMEDITEM = 1152;
	public const uint32 DISPID_IHTMLATTRIBUTECOLLECTION3_IE8_ITEM = 1154;
	public const uint32 DISPID_IHTMLATTRIBUTECOLLECTION3_IE8_LENGTH = 1153;
	public const uint32 DISPID_IHTMLATTRIBUTECOLLECTION4_GETNAMEDITEMNS = 1155;
	public const uint32 DISPID_IHTMLATTRIBUTECOLLECTION4_SETNAMEDITEMNS = 1156;
	public const uint32 DISPID_IHTMLATTRIBUTECOLLECTION4_REMOVENAMEDITEMNS = 1157;
	public const uint32 DISPID_IHTMLATTRIBUTECOLLECTION4_IE9_GETNAMEDITEM = 1158;
	public const uint32 DISPID_IHTMLATTRIBUTECOLLECTION4_IE9_SETNAMEDITEM = 1159;
	public const uint32 DISPID_IHTMLATTRIBUTECOLLECTION4_IE9_REMOVENAMEDITEM = 1160;
	public const uint32 DISPID_IHTMLATTRIBUTECOLLECTION4_IE9_ITEM = 1161;
	public const uint32 DISPID_IHTMLATTRIBUTECOLLECTION4_IE9_LENGTH = 1162;
	public const uint32 DISPID_IHTMLDOMCHILDRENCOLLECTION_LENGTH = 1500;
	public const int32 DISPID_IHTMLDOMCHILDRENCOLLECTION__NEWENUM = -4;
	public const uint32 DISPID_IHTMLDOMCHILDRENCOLLECTION_ITEM = 0;
	public const uint32 DISPID_IHTMLDOMCHILDRENCOLLECTION2_IE9_ITEM = 1;
	public const uint32 DISPID_IHTMLELEMENT_SETATTRIBUTE = 66037;
	public const uint32 DISPID_IHTMLELEMENT_GETATTRIBUTE = 66038;
	public const uint32 DISPID_IHTMLELEMENT_REMOVEATTRIBUTE = 66039;
	public const uint32 DISPID_IHTMLELEMENT_CLASSNAME = 66537;
	public const uint32 DISPID_IHTMLELEMENT_ID = 66538;
	public const uint32 DISPID_IHTMLELEMENT_TAGNAME = 66540;
	public const uint32 DISPID_IHTMLELEMENT_PARENTELEMENT = 65544;
	public const uint32 DISPID_IHTMLELEMENT_STYLE = 65610;
	public const uint32 DISPID_IHTMLELEMENT_ONHELP = 71549;
	public const uint32 DISPID_IHTMLELEMENT_ONCLICK = 71544;
	public const uint32 DISPID_IHTMLELEMENT_ONDBLCLICK = 71545;
	public const uint32 DISPID_IHTMLELEMENT_ONKEYDOWN = 71541;
	public const uint32 DISPID_IHTMLELEMENT_ONKEYUP = 71542;
	public const uint32 DISPID_IHTMLELEMENT_ONKEYPRESS = 71543;
	public const uint32 DISPID_IHTMLELEMENT_ONMOUSEOUT = 71537;
	public const uint32 DISPID_IHTMLELEMENT_ONMOUSEOVER = 71536;
	public const uint32 DISPID_IHTMLELEMENT_ONMOUSEMOVE = 71540;
	public const uint32 DISPID_IHTMLELEMENT_ONMOUSEDOWN = 71538;
	public const uint32 DISPID_IHTMLELEMENT_ONMOUSEUP = 71539;
	public const uint32 DISPID_IHTMLELEMENT_DOCUMENT = 66554;
	public const uint32 DISPID_IHTMLELEMENT_TITLE = 65605;
	public const uint32 DISPID_IHTMLELEMENT_LANGUAGE = 70636;
	public const uint32 DISPID_IHTMLELEMENT_ONSELECTSTART = 71573;
	public const uint32 DISPID_IHTMLELEMENT_SCROLLINTOVIEW = 66555;
	public const uint32 DISPID_IHTMLELEMENT_CONTAINS = 66556;
	public const uint32 DISPID_IHTMLELEMENT_SOURCEINDEX = 66560;
	public const uint32 DISPID_IHTMLELEMENT_RECORDNUMBER = 66561;
	public const uint32 DISPID_IHTMLELEMENT_LANG = 70545;
	public const uint32 DISPID_IHTMLELEMENT_OFFSETLEFT = 66544;
	public const uint32 DISPID_IHTMLELEMENT_OFFSETTOP = 66545;
	public const uint32 DISPID_IHTMLELEMENT_OFFSETWIDTH = 66546;
	public const uint32 DISPID_IHTMLELEMENT_OFFSETHEIGHT = 66547;
	public const uint32 DISPID_IHTMLELEMENT_OFFSETPARENT = 66548;
	public const uint32 DISPID_IHTMLELEMENT_INNERHTML = 66562;
	public const uint32 DISPID_IHTMLELEMENT_INNERTEXT = 66563;
	public const uint32 DISPID_IHTMLELEMENT_OUTERHTML = 66564;
	public const uint32 DISPID_IHTMLELEMENT_OUTERTEXT = 66565;
	public const uint32 DISPID_IHTMLELEMENT_INSERTADJACENTHTML = 66566;
	public const uint32 DISPID_IHTMLELEMENT_INSERTADJACENTTEXT = 66567;
	public const uint32 DISPID_IHTMLELEMENT_PARENTTEXTEDIT = 66568;
	public const uint32 DISPID_IHTMLELEMENT_ISTEXTEDIT = 66570;
	public const uint32 DISPID_IHTMLELEMENT_CLICK = 66569;
	public const uint32 DISPID_IHTMLELEMENT_FILTERS = 66571;
	public const uint32 DISPID_IHTMLELEMENT_ONDRAGSTART = 71571;
	public const uint32 DISPID_IHTMLELEMENT_TOSTRING = 66572;
	public const uint32 DISPID_IHTMLELEMENT_ONBEFOREUPDATE = 71557;
	public const uint32 DISPID_IHTMLELEMENT_ONAFTERUPDATE = 71558;
	public const uint32 DISPID_IHTMLELEMENT_ONERRORUPDATE = 71574;
	public const uint32 DISPID_IHTMLELEMENT_ONROWEXIT = 71554;
	public const uint32 DISPID_IHTMLELEMENT_ONROWENTER = 71555;
	public const uint32 DISPID_IHTMLELEMENT_ONDATASETCHANGED = 71576;
	public const uint32 DISPID_IHTMLELEMENT_ONDATAAVAILABLE = 71577;
	public const uint32 DISPID_IHTMLELEMENT_ONDATASETCOMPLETE = 71578;
	public const uint32 DISPID_IHTMLELEMENT_ONFILTERCHANGE = 71579;
	public const uint32 DISPID_IHTMLELEMENT_CHILDREN = 66573;
	public const uint32 DISPID_IHTMLELEMENT_ALL = 66574;
	public const uint32 DISPID_IHTMLELEMENT2_SCOPENAME = 66575;
	public const uint32 DISPID_IHTMLELEMENT2_SETCAPTURE = 66576;
	public const uint32 DISPID_IHTMLELEMENT2_RELEASECAPTURE = 66577;
	public const uint32 DISPID_IHTMLELEMENT2_ONLOSECAPTURE = 71582;
	public const uint32 DISPID_IHTMLELEMENT2_COMPONENTFROMPOINT = 66578;
	public const uint32 DISPID_IHTMLELEMENT2_DOSCROLL = 66579;
	public const uint32 DISPID_IHTMLELEMENT2_ONSCROLL = 71567;
	public const uint32 DISPID_IHTMLELEMENT2_ONDRAG = 71585;
	public const uint32 DISPID_IHTMLELEMENT2_ONDRAGEND = 71586;
	public const uint32 DISPID_IHTMLELEMENT2_ONDRAGENTER = 71587;
	public const uint32 DISPID_IHTMLELEMENT2_ONDRAGOVER = 71588;
	public const uint32 DISPID_IHTMLELEMENT2_ONDRAGLEAVE = 71589;
	public const uint32 DISPID_IHTMLELEMENT2_ONDROP = 71590;
	public const uint32 DISPID_IHTMLELEMENT2_ONBEFORECUT = 71594;
	public const uint32 DISPID_IHTMLELEMENT2_ONCUT = 71591;
	public const uint32 DISPID_IHTMLELEMENT2_ONBEFORECOPY = 71595;
	public const uint32 DISPID_IHTMLELEMENT2_ONCOPY = 71592;
	public const uint32 DISPID_IHTMLELEMENT2_ONBEFOREPASTE = 71596;
	public const uint32 DISPID_IHTMLELEMENT2_ONPASTE = 71593;
	public const uint32 DISPID_IHTMLELEMENT2_CURRENTSTYLE = 66543;
	public const uint32 DISPID_IHTMLELEMENT2_ONPROPERTYCHANGE = 71583;
	public const uint32 DISPID_IHTMLELEMENT2_GETCLIENTRECTS = 66580;
	public const uint32 DISPID_IHTMLELEMENT2_GETBOUNDINGCLIENTRECT = 66581;
	public const uint32 DISPID_IHTMLELEMENT2_SETEXPRESSION = 66040;
	public const uint32 DISPID_IHTMLELEMENT2_GETEXPRESSION = 66041;
	public const uint32 DISPID_IHTMLELEMENT2_REMOVEEXPRESSION = 66042;
	public const uint32 DISPID_IHTMLELEMENT2_TABINDEX = 65551;
	public const uint32 DISPID_IHTMLELEMENT2_FOCUS = 67536;
	public const uint32 DISPID_IHTMLELEMENT2_ACCESSKEY = 67541;
	public const uint32 DISPID_IHTMLELEMENT2_ONBLUR = 71551;
	public const uint32 DISPID_IHTMLELEMENT2_ONFOCUS = 71550;
	public const uint32 DISPID_IHTMLELEMENT2_ONRESIZE = 71572;
	public const uint32 DISPID_IHTMLELEMENT2_BLUR = 67538;
	public const uint32 DISPID_IHTMLELEMENT2_ADDFILTER = 67553;
	public const uint32 DISPID_IHTMLELEMENT2_REMOVEFILTER = 67554;
	public const uint32 DISPID_IHTMLELEMENT2_CLIENTHEIGHT = 67555;
	public const uint32 DISPID_IHTMLELEMENT2_CLIENTWIDTH = 67556;
	public const uint32 DISPID_IHTMLELEMENT2_CLIENTTOP = 67557;
	public const uint32 DISPID_IHTMLELEMENT2_CLIENTLEFT = 67558;
	public const uint32 DISPID_IHTMLELEMENT2_ATTACHEVENT = 66043;
	public const uint32 DISPID_IHTMLELEMENT2_DETACHEVENT = 66044;
	public const uint32 DISPID_IHTMLELEMENT2_READYSTATE = 70652;
	public const uint32 DISPID_IHTMLELEMENT2_ONREADYSTATECHANGE = 71561;
	public const uint32 DISPID_IHTMLELEMENT2_ONROWSDELETE = 71598;
	public const uint32 DISPID_IHTMLELEMENT2_ONROWSINSERTED = 71599;
	public const uint32 DISPID_IHTMLELEMENT2_ONCELLCHANGE = 71600;
	public const uint32 DISPID_IHTMLELEMENT2_DIR = 70653;
	public const uint32 DISPID_IHTMLELEMENT2_CREATECONTROLRANGE = 66592;
	public const uint32 DISPID_IHTMLELEMENT2_SCROLLHEIGHT = 66593;
	public const uint32 DISPID_IHTMLELEMENT2_SCROLLWIDTH = 66594;
	public const uint32 DISPID_IHTMLELEMENT2_SCROLLTOP = 66595;
	public const uint32 DISPID_IHTMLELEMENT2_SCROLLLEFT = 66596;
	public const uint32 DISPID_IHTMLELEMENT2_CLEARATTRIBUTES = 66598;
	public const uint32 DISPID_IHTMLELEMENT2_MERGEATTRIBUTES = 66599;
	public const uint32 DISPID_IHTMLELEMENT2_ONCONTEXTMENU = 71601;
	public const uint32 DISPID_IHTMLELEMENT2_INSERTADJACENTELEMENT = 66605;
	public const uint32 DISPID_IHTMLELEMENT2_APPLYELEMENT = 66601;
	public const uint32 DISPID_IHTMLELEMENT2_GETADJACENTTEXT = 66606;
	public const uint32 DISPID_IHTMLELEMENT2_REPLACEADJACENTTEXT = 66607;
	public const uint32 DISPID_IHTMLELEMENT2_CANHAVECHILDREN = 66608;
	public const uint32 DISPID_IHTMLELEMENT2_ADDBEHAVIOR = 66616;
	public const uint32 DISPID_IHTMLELEMENT2_REMOVEBEHAVIOR = 66617;
	public const uint32 DISPID_IHTMLELEMENT2_RUNTIMESTYLE = 66600;
	public const uint32 DISPID_IHTMLELEMENT2_BEHAVIORURNS = 66618;
	public const uint32 DISPID_IHTMLELEMENT2_TAGURN = 66619;
	public const uint32 DISPID_IHTMLELEMENT2_ONBEFOREEDITFOCUS = 71605;
	public const uint32 DISPID_IHTMLELEMENT2_READYSTATEVALUE = 66620;
	public const uint32 DISPID_IHTMLELEMENT2_GETELEMENTSBYTAGNAME = 66621;
	public const uint32 DISPID_IHTMLELEMENT3_MERGEATTRIBUTES = 66632;
	public const uint32 DISPID_IHTMLELEMENT3_ISMULTILINE = 66633;
	public const uint32 DISPID_IHTMLELEMENT3_CANHAVEHTML = 66634;
	public const uint32 DISPID_IHTMLELEMENT3_ONLAYOUTCOMPLETE = 71609;
	public const uint32 DISPID_IHTMLELEMENT3_ONPAGE = 71610;
	public const uint32 DISPID_IHTMLELEMENT3_INFLATEBLOCK = 66636;
	public const uint32 DISPID_IHTMLELEMENT3_ONBEFOREDEACTIVATE = 71613;
	public const uint32 DISPID_IHTMLELEMENT3_SETACTIVE = 66637;
	public const uint32 DISPID_IHTMLELEMENT3_CONTENTEDITABLE = 70698;
	public const uint32 DISPID_IHTMLELEMENT3_ISCONTENTEDITABLE = 66638;
	public const uint32 DISPID_IHTMLELEMENT3_HIDEFOCUS = 70699;
	public const uint32 DISPID_IHTMLELEMENT3_DISABLED = 65612;
	public const uint32 DISPID_IHTMLELEMENT3_ISDISABLED = 66641;
	public const uint32 DISPID_IHTMLELEMENT3_ONMOVE = 71614;
	public const uint32 DISPID_IHTMLELEMENT3_ONCONTROLSELECT = 71615;
	public const uint32 DISPID_IHTMLELEMENT3_FIREEVENT = 66642;
	public const uint32 DISPID_IHTMLELEMENT3_ONRESIZESTART = 71619;
	public const uint32 DISPID_IHTMLELEMENT3_ONRESIZEEND = 71620;
	public const uint32 DISPID_IHTMLELEMENT3_ONMOVESTART = 71617;
	public const uint32 DISPID_IHTMLELEMENT3_ONMOVEEND = 71618;
	public const uint32 DISPID_IHTMLELEMENT3_ONMOUSEENTER = 71621;
	public const uint32 DISPID_IHTMLELEMENT3_ONMOUSELEAVE = 71622;
	public const uint32 DISPID_IHTMLELEMENT3_ONACTIVATE = 71623;
	public const uint32 DISPID_IHTMLELEMENT3_ONDEACTIVATE = 71624;
	public const uint32 DISPID_IHTMLELEMENT3_DRAGDROP = 66643;
	public const uint32 DISPID_IHTMLELEMENT3_GLYPHMODE = 66644;
	public const uint32 DISPID_IHTMLELEMENT4_ONMOUSEWHEEL = 71612;
	public const uint32 DISPID_IHTMLELEMENT4_NORMALIZE = 66648;
	public const uint32 DISPID_IHTMLELEMENT4_GETATTRIBUTENODE = 66645;
	public const uint32 DISPID_IHTMLELEMENT4_SETATTRIBUTENODE = 66646;
	public const uint32 DISPID_IHTMLELEMENT4_REMOVEATTRIBUTENODE = 66647;
	public const uint32 DISPID_IHTMLELEMENT4_ONBEFOREACTIVATE = 71626;
	public const uint32 DISPID_IHTMLELEMENT4_ONFOCUSIN = 71627;
	public const uint32 DISPID_IHTMLELEMENT4_ONFOCUSOUT = 71628;
	public const uint32 DISPID_IELEMENTSELECTOR_QUERYSELECTOR = 66650;
	public const uint32 DISPID_IELEMENTSELECTOR_QUERYSELECTORALL = 66651;
	public const uint32 DISPID_IHTMLUNIQUENAME_UNIQUENUMBER = 66590;
	public const uint32 DISPID_IHTMLUNIQUENAME_UNIQUEID = 66591;
	public const uint32 DISPID_IHTMLELEMENT5_IE8_GETATTRIBUTENODE = 66736;
	public const uint32 DISPID_IHTMLELEMENT5_IE8_SETATTRIBUTENODE = 66737;
	public const uint32 DISPID_IHTMLELEMENT5_IE8_REMOVEATTRIBUTENODE = 66738;
	public const uint32 DISPID_IHTMLELEMENT5_HASATTRIBUTE = 66739;
	public const uint32 DISPID_IHTMLELEMENT5_ROLE = 66740;
	public const uint32 DISPID_IHTMLELEMENT5_ARIABUSY = 66741;
	public const uint32 DISPID_IHTMLELEMENT5_ARIACHECKED = 66742;
	public const uint32 DISPID_IHTMLELEMENT5_ARIADISABLED = 66743;
	public const uint32 DISPID_IHTMLELEMENT5_ARIAEXPANDED = 66744;
	public const uint32 DISPID_IHTMLELEMENT5_ARIAHASPOPUP = 66745;
	public const uint32 DISPID_IHTMLELEMENT5_ARIAHIDDEN = 66746;
	public const uint32 DISPID_IHTMLELEMENT5_ARIAINVALID = 66747;
	public const uint32 DISPID_IHTMLELEMENT5_ARIAMULTISELECTABLE = 66748;
	public const uint32 DISPID_IHTMLELEMENT5_ARIAPRESSED = 66749;
	public const uint32 DISPID_IHTMLELEMENT5_ARIAREADONLY = 66750;
	public const uint32 DISPID_IHTMLELEMENT5_ARIAREQUIRED = 66751;
	public const uint32 DISPID_IHTMLELEMENT5_ARIASECRET = 66752;
	public const uint32 DISPID_IHTMLELEMENT5_ARIASELECTED = 66753;
	public const uint32 DISPID_IHTMLELEMENT5_IE8_GETATTRIBUTE = 66754;
	public const uint32 DISPID_IHTMLELEMENT5_IE8_SETATTRIBUTE = 66755;
	public const uint32 DISPID_IHTMLELEMENT5_IE8_REMOVEATTRIBUTE = 66756;
	public const uint32 DISPID_IHTMLELEMENT5_IE8_ATTRIBUTES = 66757;
	public const uint32 DISPID_IHTMLELEMENT5_ARIAVALUENOW = 66758;
	public const uint32 DISPID_IHTMLELEMENT5_ARIAPOSINSET = 66759;
	public const uint32 DISPID_IHTMLELEMENT5_ARIASETSIZE = 66760;
	public const uint32 DISPID_IHTMLELEMENT5_ARIALEVEL = 66761;
	public const uint32 DISPID_IHTMLELEMENT5_ARIAVALUEMIN = 66762;
	public const uint32 DISPID_IHTMLELEMENT5_ARIAVALUEMAX = 66763;
	public const uint32 DISPID_IHTMLELEMENT5_ARIACONTROLS = 66764;
	public const uint32 DISPID_IHTMLELEMENT5_ARIADESCRIBEDBY = 66765;
	public const uint32 DISPID_IHTMLELEMENT5_ARIAFLOWTO = 66766;
	public const uint32 DISPID_IHTMLELEMENT5_ARIALABELLEDBY = 66767;
	public const uint32 DISPID_IHTMLELEMENT5_ARIAACTIVEDESCENDANT = 66768;
	public const uint32 DISPID_IHTMLELEMENT5_ARIAOWNS = 66769;
	public const uint32 DISPID_IHTMLELEMENT5_HASATTRIBUTES = 66770;
	public const uint32 DISPID_IHTMLELEMENT5_ARIALIVE = 66771;
	public const uint32 DISPID_IHTMLELEMENT5_ARIARELEVANT = 66772;
	public const uint32 DISPID_IHTMLELEMENT6_GETATTRIBUTENS = 66789;
	public const uint32 DISPID_IHTMLELEMENT6_SETATTRIBUTENS = 66790;
	public const uint32 DISPID_IHTMLELEMENT6_REMOVEATTRIBUTENS = 66791;
	public const uint32 DISPID_IHTMLELEMENT6_GETATTRIBUTENODENS = 66786;
	public const uint32 DISPID_IHTMLELEMENT6_SETATTRIBUTENODENS = 66787;
	public const uint32 DISPID_IHTMLELEMENT6_HASATTRIBUTENS = 66788;
	public const uint32 DISPID_IHTMLELEMENT6_IE9_GETATTRIBUTE = 66796;
	public const uint32 DISPID_IHTMLELEMENT6_IE9_SETATTRIBUTE = 66797;
	public const uint32 DISPID_IHTMLELEMENT6_IE9_REMOVEATTRIBUTE = 66798;
	public const uint32 DISPID_IHTMLELEMENT6_IE9_GETATTRIBUTENODE = 66792;
	public const uint32 DISPID_IHTMLELEMENT6_IE9_SETATTRIBUTENODE = 66793;
	public const uint32 DISPID_IHTMLELEMENT6_IE9_REMOVEATTRIBUTENODE = 66794;
	public const uint32 DISPID_IHTMLELEMENT6_IE9_HASATTRIBUTE = 66795;
	public const uint32 DISPID_IHTMLELEMENT6_GETELEMENTSBYTAGNAMENS = 66799;
	public const uint32 DISPID_IHTMLELEMENT6_IE9_TAGNAME = 66801;
	public const uint32 DISPID_IHTMLELEMENT6_IE9_NODENAME = 66802;
	public const uint32 DISPID_IHTMLELEMENT6_GETELEMENTSBYCLASSNAME = 66803;
	public const uint32 DISPID_IHTMLELEMENT6_MSMATCHESSELECTOR = 66814;
	public const uint32 DISPID_IHTMLELEMENT6_ONABORT = 71564;
	public const uint32 DISPID_IHTMLELEMENT6_ONCANPLAY = 71670;
	public const uint32 DISPID_IHTMLELEMENT6_ONCANPLAYTHROUGH = 71671;
	public const uint32 DISPID_IHTMLELEMENT6_ONCHANGE = 71566;
	public const uint32 DISPID_IHTMLELEMENT6_ONDURATIONCHANGE = 71672;
	public const uint32 DISPID_IHTMLELEMENT6_ONEMPTIED = 71673;
	public const uint32 DISPID_IHTMLELEMENT6_ONENDED = 71674;
	public const uint32 DISPID_IHTMLELEMENT6_ONERROR = 71565;
	public const uint32 DISPID_IHTMLELEMENT6_ONINPUT = 71663;
	public const uint32 DISPID_IHTMLELEMENT6_ONLOAD = 71568;
	public const uint32 DISPID_IHTMLELEMENT6_ONLOADEDDATA = 71675;
	public const uint32 DISPID_IHTMLELEMENT6_ONLOADEDMETADATA = 71676;
	public const uint32 DISPID_IHTMLELEMENT6_ONLOADSTART = 71677;
	public const uint32 DISPID_IHTMLELEMENT6_ONPAUSE = 71678;
	public const uint32 DISPID_IHTMLELEMENT6_ONPLAY = 71679;
	public const uint32 DISPID_IHTMLELEMENT6_ONPLAYING = 71680;
	public const uint32 DISPID_IHTMLELEMENT6_ONPROGRESS = 71681;
	public const uint32 DISPID_IHTMLELEMENT6_ONRATECHANGE = 71682;
	public const uint32 DISPID_IHTMLELEMENT6_ONRESET = 71548;
	public const uint32 DISPID_IHTMLELEMENT6_ONSEEKED = 71683;
	public const uint32 DISPID_IHTMLELEMENT6_ONSEEKING = 71684;
	public const uint32 DISPID_IHTMLELEMENT6_ONSELECT = 71546;
	public const uint32 DISPID_IHTMLELEMENT6_ONSTALLED = 71685;
	public const uint32 DISPID_IHTMLELEMENT6_ONSUBMIT = 71547;
	public const uint32 DISPID_IHTMLELEMENT6_ONSUSPEND = 71686;
	public const uint32 DISPID_IHTMLELEMENT6_ONTIMEUPDATE = 71687;
	public const uint32 DISPID_IHTMLELEMENT6_ONVOLUMECHANGE = 71688;
	public const uint32 DISPID_IHTMLELEMENT6_ONWAITING = 71689;
	public const uint32 DISPID_IHTMLELEMENT6_IE9_HASATTRIBUTES = 66815;
	public const uint32 DISPID_IHTMLELEMENT7_ONMSPOINTERDOWN = 71690;
	public const uint32 DISPID_IHTMLELEMENT7_ONMSPOINTERMOVE = 71691;
	public const uint32 DISPID_IHTMLELEMENT7_ONMSPOINTERUP = 71692;
	public const uint32 DISPID_IHTMLELEMENT7_ONMSPOINTEROVER = 71693;
	public const uint32 DISPID_IHTMLELEMENT7_ONMSPOINTEROUT = 71694;
	public const uint32 DISPID_IHTMLELEMENT7_ONMSPOINTERCANCEL = 71695;
	public const uint32 DISPID_IHTMLELEMENT7_ONMSPOINTERHOVER = 71696;
	public const uint32 DISPID_IHTMLELEMENT7_ONMSLOSTPOINTERCAPTURE = 71706;
	public const uint32 DISPID_IHTMLELEMENT7_ONMSGOTPOINTERCAPTURE = 71707;
	public const uint32 DISPID_IHTMLELEMENT7_ONMSGESTURESTART = 71699;
	public const uint32 DISPID_IHTMLELEMENT7_ONMSGESTURECHANGE = 71700;
	public const uint32 DISPID_IHTMLELEMENT7_ONMSGESTUREEND = 71701;
	public const uint32 DISPID_IHTMLELEMENT7_ONMSGESTUREHOLD = 71702;
	public const uint32 DISPID_IHTMLELEMENT7_ONMSGESTURETAP = 71703;
	public const uint32 DISPID_IHTMLELEMENT7_ONMSGESTUREDOUBLETAP = 71704;
	public const uint32 DISPID_IHTMLELEMENT7_ONMSINERTIASTART = 71705;
	public const uint32 DISPID_IHTMLELEMENT7_MSSETPOINTERCAPTURE = 66822;
	public const uint32 DISPID_IHTMLELEMENT7_MSRELEASEPOINTERCAPTURE = 66823;
	public const uint32 DISPID_IHTMLELEMENT7_ONMSTRANSITIONSTART = 71709;
	public const uint32 DISPID_IHTMLELEMENT7_ONMSTRANSITIONEND = 71710;
	public const uint32 DISPID_IHTMLELEMENT7_ONMSANIMATIONSTART = 71711;
	public const uint32 DISPID_IHTMLELEMENT7_ONMSANIMATIONEND = 71712;
	public const uint32 DISPID_IHTMLELEMENT7_ONMSANIMATIONITERATION = 71713;
	public const uint32 DISPID_IHTMLELEMENT7_ONINVALID = 71724;
	public const uint32 DISPID_IHTMLELEMENT7_XMSACCELERATORKEY = 66834;
	public const uint32 DISPID_IHTMLELEMENT7_SPELLCHECK = 70907;
	public const uint32 DISPID_IHTMLELEMENT7_ONMSMANIPULATIONSTATECHANGED = 71714;
	public const uint32 DISPID_IHTMLELEMENT7_ONCUECHANGE = 71729;
	public const uint32 DISPID_IHTMLELEMENTAPPLIEDSTYLES_MSGETRULESAPPLIED = 66652;
	public const uint32 DISPID_IHTMLELEMENTAPPLIEDSTYLES_MSGETRULESAPPLIEDWITHANCESTOR = 66653;
	public const uint32 DISPID_IELEMENTTRAVERSAL_FIRSTELEMENTCHILD = 66808;
	public const uint32 DISPID_IELEMENTTRAVERSAL_LASTELEMENTCHILD = 66809;
	public const uint32 DISPID_IELEMENTTRAVERSAL_PREVIOUSELEMENTSIBLING = 66810;
	public const uint32 DISPID_IELEMENTTRAVERSAL_NEXTELEMENTSIBLING = 66811;
	public const uint32 DISPID_IELEMENTTRAVERSAL_CHILDELEMENTCOUNT = 66812;
	public const uint32 DISPID_IHTMLDATABINDING_DATAFLD = 66557;
	public const uint32 DISPID_IHTMLDATABINDING_DATASRC = 66558;
	public const uint32 DISPID_IHTMLDATABINDING_DATAFORMATAS = 66559;
	public const uint32 DISPID_HTMLELEMENTEVENTS4_ONABORT = 1000;
	public const uint32 DISPID_HTMLELEMENTEVENTS4_ONCHANGE = 1001;
	public const uint32 DISPID_HTMLELEMENTEVENTS4_ONERROR = 1002;
	public const uint32 DISPID_HTMLELEMENTEVENTS4_ONLOAD = 1003;
	public const uint32 DISPID_HTMLELEMENTEVENTS4_ONRESET = 1015;
	public const uint32 DISPID_HTMLELEMENTEVENTS4_ONSELECT = 1006;
	public const uint32 DISPID_HTMLELEMENTEVENTS4_ONSUBMIT = 1007;
	public const uint32 DISPID_HTMLELEMENTEVENTS4_ONMSCONTENTZOOM = 71708;
	public const uint32 DISPID_HTMLELEMENTEVENTS3_ONONLINE = 1064;
	public const uint32 DISPID_HTMLELEMENTEVENTS3_ONOFFLINE = 1065;
	public const uint32 DISPID_HTMLELEMENTEVENTS2_ONHELP = 65546;
	public const int32 DISPID_HTMLELEMENTEVENTS2_ONCLICK = -600;
	public const int32 DISPID_HTMLELEMENTEVENTS2_ONDBLCLICK = -601;
	public const int32 DISPID_HTMLELEMENTEVENTS2_ONKEYPRESS = -603;
	public const int32 DISPID_HTMLELEMENTEVENTS2_ONKEYDOWN = -602;
	public const int32 DISPID_HTMLELEMENTEVENTS2_ONKEYUP = -604;
	public const uint32 DISPID_HTMLELEMENTEVENTS2_ONMOUSEOUT = 65545;
	public const uint32 DISPID_HTMLELEMENTEVENTS2_ONMOUSEOVER = 65544;
	public const int32 DISPID_HTMLELEMENTEVENTS2_ONMOUSEMOVE = -606;
	public const int32 DISPID_HTMLELEMENTEVENTS2_ONMOUSEDOWN = -605;
	public const int32 DISPID_HTMLELEMENTEVENTS2_ONMOUSEUP = -607;
	public const uint32 DISPID_HTMLELEMENTEVENTS2_ONSELECTSTART = 65548;
	public const uint32 DISPID_HTMLELEMENTEVENTS2_ONFILTERCHANGE = 65553;
	public const uint32 DISPID_HTMLELEMENTEVENTS2_ONDRAGSTART = 65547;
	public const uint32 DISPID_HTMLELEMENTEVENTS2_ONBEFOREUPDATE = 65540;
	public const uint32 DISPID_HTMLELEMENTEVENTS2_ONAFTERUPDATE = 65541;
	public const uint32 DISPID_HTMLELEMENTEVENTS2_ONERRORUPDATE = 65549;
	public const uint32 DISPID_HTMLELEMENTEVENTS2_ONROWEXIT = 65542;
	public const uint32 DISPID_HTMLELEMENTEVENTS2_ONROWENTER = 65543;
	public const uint32 DISPID_HTMLELEMENTEVENTS2_ONDATASETCHANGED = 65550;
	public const uint32 DISPID_HTMLELEMENTEVENTS2_ONDATAAVAILABLE = 65551;
	public const uint32 DISPID_HTMLELEMENTEVENTS2_ONDATASETCOMPLETE = 65552;
	public const uint32 DISPID_HTMLELEMENTEVENTS2_ONLOSECAPTURE = 65554;
	public const uint32 DISPID_HTMLELEMENTEVENTS2_ONPROPERTYCHANGE = 65555;
	public const uint32 DISPID_HTMLELEMENTEVENTS2_ONSCROLL = 1014;
	public const uint32 DISPID_HTMLELEMENTEVENTS2_ONFOCUS = 65537;
	public const uint32 DISPID_HTMLELEMENTEVENTS2_ONRESIZE = 1016;
	public const uint32 DISPID_HTMLELEMENTEVENTS2_ONDRAG = 65556;
	public const uint32 DISPID_HTMLELEMENTEVENTS2_ONDRAGEND = 65557;
	public const uint32 DISPID_HTMLELEMENTEVENTS2_ONDRAGENTER = 65558;
	public const uint32 DISPID_HTMLELEMENTEVENTS2_ONDRAGOVER = 65559;
	public const uint32 DISPID_HTMLELEMENTEVENTS2_ONDRAGLEAVE = 65560;
	public const uint32 DISPID_HTMLELEMENTEVENTS2_ONDROP = 65561;
	public const uint32 DISPID_HTMLELEMENTEVENTS2_ONBEFORECUT = 65565;
	public const uint32 DISPID_HTMLELEMENTEVENTS2_ONCUT = 65562;
	public const uint32 DISPID_HTMLELEMENTEVENTS2_ONBEFORECOPY = 65566;
	public const uint32 DISPID_HTMLELEMENTEVENTS2_ONCOPY = 65563;
	public const uint32 DISPID_HTMLELEMENTEVENTS2_ONBEFOREPASTE = 65567;
	public const uint32 DISPID_HTMLELEMENTEVENTS2_ONPASTE = 65564;
	public const uint32 DISPID_HTMLELEMENTEVENTS2_ONCONTEXTMENU = 1023;
	public const uint32 DISPID_HTMLELEMENTEVENTS2_ONROWSDELETE = 65568;
	public const uint32 DISPID_HTMLELEMENTEVENTS2_ONROWSINSERTED = 65569;
	public const uint32 DISPID_HTMLELEMENTEVENTS2_ONCELLCHANGE = 65570;
	public const int32 DISPID_HTMLELEMENTEVENTS2_ONREADYSTATECHANGE = -609;
	public const uint32 DISPID_HTMLELEMENTEVENTS2_ONLAYOUTCOMPLETE = 1030;
	public const uint32 DISPID_HTMLELEMENTEVENTS2_ONPAGE = 1031;
	public const uint32 DISPID_HTMLELEMENTEVENTS2_ONMOUSEENTER = 1042;
	public const uint32 DISPID_HTMLELEMENTEVENTS2_ONMOUSELEAVE = 1043;
	public const uint32 DISPID_HTMLELEMENTEVENTS2_ONACTIVATE = 1044;
	public const uint32 DISPID_HTMLELEMENTEVENTS2_ONDEACTIVATE = 1045;
	public const uint32 DISPID_HTMLELEMENTEVENTS2_ONBEFOREDEACTIVATE = 1034;
	public const uint32 DISPID_HTMLELEMENTEVENTS2_ONBEFOREACTIVATE = 1047;
	public const uint32 DISPID_HTMLELEMENTEVENTS2_ONFOCUSIN = 1048;
	public const uint32 DISPID_HTMLELEMENTEVENTS2_ONFOCUSOUT = 1049;
	public const uint32 DISPID_HTMLELEMENTEVENTS2_ONMOVE = 1035;
	public const uint32 DISPID_HTMLELEMENTEVENTS2_ONCONTROLSELECT = 1036;
	public const uint32 DISPID_HTMLELEMENTEVENTS2_ONMOVESTART = 1038;
	public const uint32 DISPID_HTMLELEMENTEVENTS2_ONMOVEEND = 1039;
	public const uint32 DISPID_HTMLELEMENTEVENTS2_ONRESIZESTART = 1040;
	public const uint32 DISPID_HTMLELEMENTEVENTS2_ONRESIZEEND = 1041;
	public const uint32 DISPID_HTMLELEMENTEVENTS2_ONMOUSEWHEEL = 1033;
	public const uint32 DISPID_HTMLELEMENTEVENTS_ONHELP = 65546;
	public const int32 DISPID_HTMLELEMENTEVENTS_ONCLICK = -600;
	public const int32 DISPID_HTMLELEMENTEVENTS_ONDBLCLICK = -601;
	public const int32 DISPID_HTMLELEMENTEVENTS_ONKEYPRESS = -603;
	public const int32 DISPID_HTMLELEMENTEVENTS_ONKEYDOWN = -602;
	public const int32 DISPID_HTMLELEMENTEVENTS_ONKEYUP = -604;
	public const uint32 DISPID_HTMLELEMENTEVENTS_ONMOUSEOUT = 65545;
	public const uint32 DISPID_HTMLELEMENTEVENTS_ONMOUSEOVER = 65544;
	public const int32 DISPID_HTMLELEMENTEVENTS_ONMOUSEMOVE = -606;
	public const int32 DISPID_HTMLELEMENTEVENTS_ONMOUSEDOWN = -605;
	public const int32 DISPID_HTMLELEMENTEVENTS_ONMOUSEUP = -607;
	public const uint32 DISPID_HTMLELEMENTEVENTS_ONSELECTSTART = 65548;
	public const uint32 DISPID_HTMLELEMENTEVENTS_ONFILTERCHANGE = 65553;
	public const uint32 DISPID_HTMLELEMENTEVENTS_ONDRAGSTART = 65547;
	public const uint32 DISPID_HTMLELEMENTEVENTS_ONBEFOREUPDATE = 65540;
	public const uint32 DISPID_HTMLELEMENTEVENTS_ONAFTERUPDATE = 65541;
	public const uint32 DISPID_HTMLELEMENTEVENTS_ONERRORUPDATE = 65549;
	public const uint32 DISPID_HTMLELEMENTEVENTS_ONROWEXIT = 65542;
	public const uint32 DISPID_HTMLELEMENTEVENTS_ONROWENTER = 65543;
	public const uint32 DISPID_HTMLELEMENTEVENTS_ONDATASETCHANGED = 65550;
	public const uint32 DISPID_HTMLELEMENTEVENTS_ONDATAAVAILABLE = 65551;
	public const uint32 DISPID_HTMLELEMENTEVENTS_ONDATASETCOMPLETE = 65552;
	public const uint32 DISPID_HTMLELEMENTEVENTS_ONLOSECAPTURE = 65554;
	public const uint32 DISPID_HTMLELEMENTEVENTS_ONPROPERTYCHANGE = 65555;
	public const uint32 DISPID_HTMLELEMENTEVENTS_ONSCROLL = 1014;
	public const uint32 DISPID_HTMLELEMENTEVENTS_ONFOCUS = 65537;
	public const uint32 DISPID_HTMLELEMENTEVENTS_ONRESIZE = 1016;
	public const uint32 DISPID_HTMLELEMENTEVENTS_ONDRAG = 65556;
	public const uint32 DISPID_HTMLELEMENTEVENTS_ONDRAGEND = 65557;
	public const uint32 DISPID_HTMLELEMENTEVENTS_ONDRAGENTER = 65558;
	public const uint32 DISPID_HTMLELEMENTEVENTS_ONDRAGOVER = 65559;
	public const uint32 DISPID_HTMLELEMENTEVENTS_ONDRAGLEAVE = 65560;
	public const uint32 DISPID_HTMLELEMENTEVENTS_ONDROP = 65561;
	public const uint32 DISPID_HTMLELEMENTEVENTS_ONBEFORECUT = 65565;
	public const uint32 DISPID_HTMLELEMENTEVENTS_ONCUT = 65562;
	public const uint32 DISPID_HTMLELEMENTEVENTS_ONBEFORECOPY = 65566;
	public const uint32 DISPID_HTMLELEMENTEVENTS_ONCOPY = 65563;
	public const uint32 DISPID_HTMLELEMENTEVENTS_ONBEFOREPASTE = 65567;
	public const uint32 DISPID_HTMLELEMENTEVENTS_ONPASTE = 65564;
	public const uint32 DISPID_HTMLELEMENTEVENTS_ONCONTEXTMENU = 1023;
	public const uint32 DISPID_HTMLELEMENTEVENTS_ONROWSDELETE = 65568;
	public const uint32 DISPID_HTMLELEMENTEVENTS_ONROWSINSERTED = 65569;
	public const uint32 DISPID_HTMLELEMENTEVENTS_ONCELLCHANGE = 65570;
	public const int32 DISPID_HTMLELEMENTEVENTS_ONREADYSTATECHANGE = -609;
	public const uint32 DISPID_HTMLELEMENTEVENTS_ONBEFOREEDITFOCUS = 1027;
	public const uint32 DISPID_HTMLELEMENTEVENTS_ONLAYOUTCOMPLETE = 1030;
	public const uint32 DISPID_HTMLELEMENTEVENTS_ONPAGE = 1031;
	public const uint32 DISPID_HTMLELEMENTEVENTS_ONBEFOREDEACTIVATE = 1034;
	public const uint32 DISPID_HTMLELEMENTEVENTS_ONBEFOREACTIVATE = 1047;
	public const uint32 DISPID_HTMLELEMENTEVENTS_ONMOVE = 1035;
	public const uint32 DISPID_HTMLELEMENTEVENTS_ONCONTROLSELECT = 1036;
	public const uint32 DISPID_HTMLELEMENTEVENTS_ONMOVESTART = 1038;
	public const uint32 DISPID_HTMLELEMENTEVENTS_ONMOVEEND = 1039;
	public const uint32 DISPID_HTMLELEMENTEVENTS_ONRESIZESTART = 1040;
	public const uint32 DISPID_HTMLELEMENTEVENTS_ONRESIZEEND = 1041;
	public const uint32 DISPID_HTMLELEMENTEVENTS_ONMOUSEENTER = 1042;
	public const uint32 DISPID_HTMLELEMENTEVENTS_ONMOUSELEAVE = 1043;
	public const uint32 DISPID_HTMLELEMENTEVENTS_ONMOUSEWHEEL = 1033;
	public const uint32 DISPID_HTMLELEMENTEVENTS_ONACTIVATE = 1044;
	public const uint32 DISPID_HTMLELEMENTEVENTS_ONDEACTIVATE = 1045;
	public const uint32 DISPID_HTMLELEMENTEVENTS_ONFOCUSIN = 1048;
	public const uint32 DISPID_HTMLELEMENTEVENTS_ONFOCUSOUT = 1049;
	public const uint32 DISPID_IHTMLELEMENTDEFAULTS_STYLE = 1001;
	public const uint32 DISPID_IHTMLELEMENTDEFAULTS_TABSTOP = 1002;
	public const uint32 DISPID_IHTMLELEMENTDEFAULTS_VIEWINHERITSTYLE = 70735;
	public const uint32 DISPID_IHTMLELEMENTDEFAULTS_VIEWMASTERTAB = 1006;
	public const uint32 DISPID_IHTMLELEMENTDEFAULTS_SCROLLSEGMENTX = 1003;
	public const uint32 DISPID_IHTMLELEMENTDEFAULTS_SCROLLSEGMENTY = 1004;
	public const uint32 DISPID_IHTMLELEMENTDEFAULTS_ISMULTILINE = 1008;
	public const uint32 DISPID_IHTMLELEMENTDEFAULTS_CONTENTEDITABLE = 70698;
	public const uint32 DISPID_IHTMLELEMENTDEFAULTS_CANHAVEHTML = 1009;
	public const uint32 DISPID_IHTMLELEMENTDEFAULTS_VIEWLINK = 1011;
	public const uint32 DISPID_IHTMLELEMENTDEFAULTS_FROZEN = 70734;
	public const uint32 DISPID_IHTCDEFAULTDISPATCH_ELEMENT = 70679;
	public const uint32 DISPID_IHTCDEFAULTDISPATCH_CREATEEVENTOBJECT = 70680;
	public const uint32 DISPID_IHTCDEFAULTDISPATCH_DEFAULTS = 70701;
	public const uint32 DISPID_IHTCDEFAULTDISPATCH_DOCUMENT = 70678;
	public const uint32 DISPID_IHTCPROPERTYBEHAVIOR_FIRECHANGE = 66036;
	public const uint32 DISPID_IHTCPROPERTYBEHAVIOR_VALUE = 70677;
	public const uint32 DISPID_IHTCEVENTBEHAVIOR_FIRE = 66036;
	public const uint32 DISPID_IHTCATTACHBEHAVIOR_FIREEVENT = 0;
	public const uint32 DISPID_IHTCATTACHBEHAVIOR_DETACHEVENT = 66036;
	public const uint32 DISPID_IHTCATTACHBEHAVIOR2_FIREEVENT = 0;
	public const uint32 DISPID_IHTCDESCBEHAVIOR_URN = 66036;
	public const uint32 DISPID_IHTCDESCBEHAVIOR_NAME = 66037;
	public const uint32 DISPID_IHTMLURNCOLLECTION_LENGTH = 1001;
	public const uint32 DISPID_IHTMLURNCOLLECTION_ITEM = 0;
	public const uint32 DISPID_IHTMLGENERICELEMENT_RECORDSET = 1001;
	public const uint32 DISPID_IHTMLGENERICELEMENT_NAMEDRECORDSET = 1002;
	public const uint32 DISPID_IHTMLSTYLESHEETRULE_SELECTORTEXT = 1001;
	public const uint32 DISPID_IHTMLSTYLESHEETRULE_STYLE = 65610;
	public const uint32 DISPID_IHTMLSTYLESHEETRULE_READONLY = 1002;
	public const uint32 DISPID_IHTMLSTYLESHEETRULEAPPLIED_MSSPECIFICITY = 1003;
	public const uint32 DISPID_IHTMLSTYLESHEETRULEAPPLIED_MSGETSPECIFICITY = 1004;
	public const uint32 DISPID_IHTMLSTYLESHEETRULE2_IE9_SELECTORTEXT = 1005;
	public const uint32 DISPID_IHTMLSTYLESHEETRULESCOLLECTION_LENGTH = 1001;
	public const uint32 DISPID_IHTMLSTYLESHEETRULESCOLLECTION_ITEM = 0;
	public const uint32 DISPID_IHTMLSTYLESHEETRULESCOLLECTION2_IE9_LENGTH = 1003;
	public const uint32 DISPID_IHTMLSTYLESHEETRULESCOLLECTION2_IE9_ITEM = 1002;
	public const uint32 DISPID_IHTMLSTYLESHEETPAGE_SELECTOR = 1001;
	public const uint32 DISPID_IHTMLSTYLESHEETPAGE_PSEUDOCLASS = 1002;
	public const uint32 DISPID_IHTMLSTYLESHEETPAGE2_SELECTORTEXT = 1003;
	public const uint32 DISPID_IHTMLSTYLESHEETPAGE2_STYLE = 65610;
	public const uint32 DISPID_IHTMLSTYLESHEETPAGESCOLLECTION_LENGTH = 1001;
	public const uint32 DISPID_IHTMLSTYLESHEETPAGESCOLLECTION_ITEM = 0;
	public const uint32 DISPID_IHTMLSTYLESHEET_TITLE = 1001;
	public const uint32 DISPID_IHTMLSTYLESHEET_PARENTSTYLESHEET = 1002;
	public const uint32 DISPID_IHTMLSTYLESHEET_OWNINGELEMENT = 1003;
	public const uint32 DISPID_IHTMLSTYLESHEET_DISABLED = 65612;
	public const uint32 DISPID_IHTMLSTYLESHEET_READONLY = 1004;
	public const uint32 DISPID_IHTMLSTYLESHEET_IMPORTS = 1005;
	public const uint32 DISPID_IHTMLSTYLESHEET_HREF = 1006;
	public const uint32 DISPID_IHTMLSTYLESHEET_TYPE = 1007;
	public const uint32 DISPID_IHTMLSTYLESHEET_ID = 1008;
	public const uint32 DISPID_IHTMLSTYLESHEET_ADDIMPORT = 1009;
	public const uint32 DISPID_IHTMLSTYLESHEET_ADDRULE = 1010;
	public const uint32 DISPID_IHTMLSTYLESHEET_REMOVEIMPORT = 1011;
	public const uint32 DISPID_IHTMLSTYLESHEET_REMOVERULE = 1012;
	public const uint32 DISPID_IHTMLSTYLESHEET_MEDIA = 1013;
	public const uint32 DISPID_IHTMLSTYLESHEET_CSSTEXT = 1014;
	public const uint32 DISPID_IHTMLSTYLESHEET_RULES = 1015;
	public const uint32 DISPID_IHTMLSTYLESHEET2_PAGES = 1016;
	public const uint32 DISPID_IHTMLSTYLESHEET2_ADDPAGERULE = 1017;
	public const uint32 DISPID_IHTMLSTYLESHEET3_IE8_HREF = 1150;
	public const uint32 DISPID_IHTMLSTYLESHEET3_ISALTERNATE = 1151;
	public const uint32 DISPID_IHTMLSTYLESHEET3_ISPREFALTERNATE = 1152;
	public const uint32 DISPID_IHTMLSTYLESHEET4_IE9_TYPE = 1153;
	public const uint32 DISPID_IHTMLSTYLESHEET4_IE9_HREF = 1154;
	public const uint32 DISPID_IHTMLSTYLESHEET4_IE9_TITLE = 1155;
	public const uint32 DISPID_IHTMLSTYLESHEET4_OWNERNODE = 1156;
	public const uint32 DISPID_IHTMLSTYLESHEET4_OWNERRULE = 1157;
	public const uint32 DISPID_IHTMLSTYLESHEET4_CSSRULES = 1158;
	public const uint32 DISPID_IHTMLSTYLESHEET4_IE9_MEDIA = 1159;
	public const uint32 DISPID_IHTMLSTYLESHEET4_INSERTRULE = 1160;
	public const uint32 DISPID_IHTMLSTYLESHEET4_DELETERULE = 1161;
	public const uint32 DISPID_IHTMLSTYLESHEETSCOLLECTION_LENGTH = 1001;
	public const int32 DISPID_IHTMLSTYLESHEETSCOLLECTION__NEWENUM = -4;
	public const uint32 DISPID_IHTMLSTYLESHEETSCOLLECTION_ITEM = 0;
	public const uint32 DISPID_IHTMLSTYLESHEETSCOLLECTION2_IE9_ITEM = 1002;
	public const uint32 DISPID_IHTMLLINKELEMENT_HREF = 1005;
	public const uint32 DISPID_IHTMLLINKELEMENT_REL = 1006;
	public const uint32 DISPID_IHTMLLINKELEMENT_REV = 1007;
	public const uint32 DISPID_IHTMLLINKELEMENT_TYPE = 1008;
	public const uint32 DISPID_IHTMLLINKELEMENT_READYSTATE = 70652;
	public const uint32 DISPID_IHTMLLINKELEMENT_ONREADYSTATECHANGE = 71561;
	public const uint32 DISPID_IHTMLLINKELEMENT_ONLOAD = 71568;
	public const uint32 DISPID_IHTMLLINKELEMENT_ONERROR = 71565;
	public const uint32 DISPID_IHTMLLINKELEMENT_STYLESHEET = 1014;
	public const uint32 DISPID_IHTMLLINKELEMENT_DISABLED = 65612;
	public const uint32 DISPID_IHTMLLINKELEMENT_MEDIA = 1016;
	public const uint32 DISPID_IHTMLLINKELEMENT2_TARGET = 1017;
	public const uint32 DISPID_IHTMLLINKELEMENT3_CHARSET = 1018;
	public const uint32 DISPID_IHTMLLINKELEMENT3_HREFLANG = 1019;
	public const uint32 DISPID_IHTMLLINKELEMENT4_IE8_HREF = 1150;
	public const uint32 DISPID_IHTMLLINKELEMENT5_SHEET = 1020;
	public const uint32 DISPID_HTMLLINKELEMENTEVENTS2_ONLOAD = 1003;
	public const uint32 DISPID_HTMLLINKELEMENTEVENTS2_ONERROR = 1002;
	public const uint32 DISPID_HTMLLINKELEMENTEVENTS_ONLOAD = 1003;
	public const uint32 DISPID_HTMLLINKELEMENTEVENTS_ONERROR = 1002;
	public const uint32 DISPID_IHTMLTXTRANGE_HTMLTEXT = 1003;
	public const uint32 DISPID_IHTMLTXTRANGE_TEXT = 1004;
	public const uint32 DISPID_IHTMLTXTRANGE_PARENTELEMENT = 1006;
	public const uint32 DISPID_IHTMLTXTRANGE_DUPLICATE = 1008;
	public const uint32 DISPID_IHTMLTXTRANGE_INRANGE = 1010;
	public const uint32 DISPID_IHTMLTXTRANGE_ISEQUAL = 1011;
	public const uint32 DISPID_IHTMLTXTRANGE_SCROLLINTOVIEW = 1012;
	public const uint32 DISPID_IHTMLTXTRANGE_COLLAPSE = 1013;
	public const uint32 DISPID_IHTMLTXTRANGE_EXPAND = 1014;
	public const uint32 DISPID_IHTMLTXTRANGE_MOVE = 1015;
	public const uint32 DISPID_IHTMLTXTRANGE_MOVESTART = 1016;
	public const uint32 DISPID_IHTMLTXTRANGE_MOVEEND = 1017;
	public const uint32 DISPID_IHTMLTXTRANGE_SELECT = 1024;
	public const uint32 DISPID_IHTMLTXTRANGE_PASTEHTML = 1026;
	public const uint32 DISPID_IHTMLTXTRANGE_MOVETOELEMENTTEXT = 1001;
	public const uint32 DISPID_IHTMLTXTRANGE_SETENDPOINT = 1025;
	public const uint32 DISPID_IHTMLTXTRANGE_COMPAREENDPOINTS = 1018;
	public const uint32 DISPID_IHTMLTXTRANGE_FINDTEXT = 1019;
	public const uint32 DISPID_IHTMLTXTRANGE_MOVETOPOINT = 1020;
	public const uint32 DISPID_IHTMLTXTRANGE_GETBOOKMARK = 1021;
	public const uint32 DISPID_IHTMLTXTRANGE_MOVETOBOOKMARK = 1009;
	public const uint32 DISPID_IHTMLTXTRANGE_QUERYCOMMANDSUPPORTED = 1027;
	public const uint32 DISPID_IHTMLTXTRANGE_QUERYCOMMANDENABLED = 1028;
	public const uint32 DISPID_IHTMLTXTRANGE_QUERYCOMMANDSTATE = 1029;
	public const uint32 DISPID_IHTMLTXTRANGE_QUERYCOMMANDINDETERM = 1030;
	public const uint32 DISPID_IHTMLTXTRANGE_QUERYCOMMANDTEXT = 1031;
	public const uint32 DISPID_IHTMLTXTRANGE_QUERYCOMMANDVALUE = 1032;
	public const uint32 DISPID_IHTMLTXTRANGE_EXECCOMMAND = 1033;
	public const uint32 DISPID_IHTMLTXTRANGE_EXECCOMMANDSHOWHELP = 1034;
	public const uint32 DISPID_IHTMLTEXTRANGEMETRICS_OFFSETTOP = 1035;
	public const uint32 DISPID_IHTMLTEXTRANGEMETRICS_OFFSETLEFT = 1036;
	public const uint32 DISPID_IHTMLTEXTRANGEMETRICS_BOUNDINGTOP = 1037;
	public const uint32 DISPID_IHTMLTEXTRANGEMETRICS_BOUNDINGLEFT = 1038;
	public const uint32 DISPID_IHTMLTEXTRANGEMETRICS_BOUNDINGWIDTH = 1039;
	public const uint32 DISPID_IHTMLTEXTRANGEMETRICS_BOUNDINGHEIGHT = 1040;
	public const uint32 DISPID_IHTMLTEXTRANGEMETRICS2_GETCLIENTRECTS = 1041;
	public const uint32 DISPID_IHTMLTEXTRANGEMETRICS2_GETBOUNDINGCLIENTRECT = 1042;
	public const uint32 DISPID_IHTMLTXTRANGECOLLECTION_LENGTH = 1500;
	public const int32 DISPID_IHTMLTXTRANGECOLLECTION__NEWENUM = -4;
	public const uint32 DISPID_IHTMLTXTRANGECOLLECTION_ITEM = 0;
	public const uint32 DISPID_IHTMLDOMRANGE_STARTCONTAINER = 1001;
	public const uint32 DISPID_IHTMLDOMRANGE_STARTOFFSET = 1002;
	public const uint32 DISPID_IHTMLDOMRANGE_ENDCONTAINER = 1003;
	public const uint32 DISPID_IHTMLDOMRANGE_ENDOFFSET = 1004;
	public const uint32 DISPID_IHTMLDOMRANGE_COLLAPSED = 1005;
	public const uint32 DISPID_IHTMLDOMRANGE_COMMONANCESTORCONTAINER = 1006;
	public const uint32 DISPID_IHTMLDOMRANGE_SETSTART = 1007;
	public const uint32 DISPID_IHTMLDOMRANGE_SETEND = 1008;
	public const uint32 DISPID_IHTMLDOMRANGE_SETSTARTBEFORE = 1009;
	public const uint32 DISPID_IHTMLDOMRANGE_SETSTARTAFTER = 1010;
	public const uint32 DISPID_IHTMLDOMRANGE_SETENDBEFORE = 1011;
	public const uint32 DISPID_IHTMLDOMRANGE_SETENDAFTER = 1012;
	public const uint32 DISPID_IHTMLDOMRANGE_COLLAPSE = 1013;
	public const uint32 DISPID_IHTMLDOMRANGE_SELECTNODE = 1014;
	public const uint32 DISPID_IHTMLDOMRANGE_SELECTNODECONTENTS = 1015;
	public const uint32 DISPID_IHTMLDOMRANGE_COMPAREBOUNDARYPOINTS = 1016;
	public const uint32 DISPID_IHTMLDOMRANGE_DELETECONTENTS = 1017;
	public const uint32 DISPID_IHTMLDOMRANGE_EXTRACTCONTENTS = 1018;
	public const uint32 DISPID_IHTMLDOMRANGE_CLONECONTENTS = 1019;
	public const uint32 DISPID_IHTMLDOMRANGE_INSERTNODE = 1020;
	public const uint32 DISPID_IHTMLDOMRANGE_SURROUNDCONTENTS = 1021;
	public const uint32 DISPID_IHTMLDOMRANGE_CLONERANGE = 1022;
	public const uint32 DISPID_IHTMLDOMRANGE_TOSTRING = 1023;
	public const uint32 DISPID_IHTMLDOMRANGE_DETACH = 1024;
	public const uint32 DISPID_IHTMLDOMRANGE_GETCLIENTRECTS = 1025;
	public const uint32 DISPID_IHTMLDOMRANGE_GETBOUNDINGCLIENTRECT = 1026;
	public const uint32 DISPID_IHTMLFORMELEMENT_ACTION = 1001;
	public const uint32 DISPID_IHTMLFORMELEMENT_DIR = 70653;
	public const uint32 DISPID_IHTMLFORMELEMENT_ENCODING = 1003;
	public const uint32 DISPID_IHTMLFORMELEMENT_METHOD = 1004;
	public const uint32 DISPID_IHTMLFORMELEMENT_ELEMENTS = 1005;
	public const uint32 DISPID_IHTMLFORMELEMENT_TARGET = 1006;
	public const uint32 DISPID_IHTMLFORMELEMENT_NAME = 65536;
	public const uint32 DISPID_IHTMLFORMELEMENT_ONSUBMIT = 71547;
	public const uint32 DISPID_IHTMLFORMELEMENT_ONRESET = 71548;
	public const uint32 DISPID_IHTMLFORMELEMENT_SUBMIT = 1009;
	public const uint32 DISPID_IHTMLFORMELEMENT_RESET = 1010;
	public const uint32 DISPID_IHTMLFORMELEMENT_LENGTH = 1500;
	public const int32 DISPID_IHTMLFORMELEMENT__NEWENUM = -4;
	public const uint32 DISPID_IHTMLFORMELEMENT_ITEM = 0;
	public const uint32 DISPID_IHTMLFORMELEMENT_TAGS = 1502;
	public const uint32 DISPID_IHTMLFORMELEMENT2_ACCEPTCHARSET = 1011;
	public const uint32 DISPID_IHTMLFORMELEMENT2_URNS = 1505;
	public const uint32 DISPID_IHTMLFORMELEMENT3_NAMEDITEM = 1506;
	public const uint32 DISPID_IHTMLSUBMITDATA_APPENDNAMEVALUEPAIR = 1012;
	public const uint32 DISPID_IHTMLSUBMITDATA_APPENDNAMEFILEPAIR = 1013;
	public const uint32 DISPID_IHTMLSUBMITDATA_APPENDITEMSEPARATOR = 1014;
	public const uint32 DISPID_IHTMLFORMELEMENT4_IE8_ACTION = 1150;
	public const uint32 DISPID_HTMLFORMELEMENTEVENTS2_ONSUBMIT = 1007;
	public const uint32 DISPID_HTMLFORMELEMENTEVENTS2_ONRESET = 1015;
	public const uint32 DISPID_HTMLFORMELEMENTEVENTS_ONSUBMIT = 1007;
	public const uint32 DISPID_HTMLFORMELEMENTEVENTS_ONRESET = 1015;
	public const uint32 DISPID_IHTMLCONTROLELEMENT_TABINDEX = 65551;
	public const uint32 DISPID_IHTMLCONTROLELEMENT_FOCUS = 67536;
	public const uint32 DISPID_IHTMLCONTROLELEMENT_ACCESSKEY = 67541;
	public const uint32 DISPID_IHTMLCONTROLELEMENT_ONBLUR = 71551;
	public const uint32 DISPID_IHTMLCONTROLELEMENT_ONFOCUS = 71550;
	public const uint32 DISPID_IHTMLCONTROLELEMENT_ONRESIZE = 71572;
	public const uint32 DISPID_IHTMLCONTROLELEMENT_BLUR = 67538;
	public const uint32 DISPID_IHTMLCONTROLELEMENT_ADDFILTER = 67553;
	public const uint32 DISPID_IHTMLCONTROLELEMENT_REMOVEFILTER = 67554;
	public const uint32 DISPID_IHTMLCONTROLELEMENT_CLIENTHEIGHT = 67555;
	public const uint32 DISPID_IHTMLCONTROLELEMENT_CLIENTWIDTH = 67556;
	public const uint32 DISPID_IHTMLCONTROLELEMENT_CLIENTTOP = 67557;
	public const uint32 DISPID_IHTMLCONTROLELEMENT_CLIENTLEFT = 67558;
	public const uint32 DISPID_IHTMLTEXTCONTAINER_CREATECONTROLRANGE = 1001;
	public const uint32 DISPID_IHTMLTEXTCONTAINER_SCROLLHEIGHT = 1002;
	public const uint32 DISPID_IHTMLTEXTCONTAINER_SCROLLWIDTH = 1003;
	public const uint32 DISPID_IHTMLTEXTCONTAINER_SCROLLTOP = 1004;
	public const uint32 DISPID_IHTMLTEXTCONTAINER_SCROLLLEFT = 1005;
	public const uint32 DISPID_IHTMLTEXTCONTAINER_ONSCROLL = 71567;
	public const uint32 DISPID_HTMLTEXTCONTAINEREVENTS2_ONCHANGE = 1001;
	public const uint32 DISPID_HTMLTEXTCONTAINEREVENTS2_ONSELECT = 1006;
	public const uint32 DISPID_HTMLTEXTCONTAINEREVENTS_ONCHANGE = 1001;
	public const uint32 DISPID_HTMLTEXTCONTAINEREVENTS_ONSELECT = 1006;
	public const uint32 DISPID_IHTMLCONTROLRANGE_SELECT = 1002;
	public const uint32 DISPID_IHTMLCONTROLRANGE_ADD = 1003;
	public const uint32 DISPID_IHTMLCONTROLRANGE_REMOVE = 1004;
	public const uint32 DISPID_IHTMLCONTROLRANGE_ITEM = 0;
	public const uint32 DISPID_IHTMLCONTROLRANGE_SCROLLINTOVIEW = 1006;
	public const uint32 DISPID_IHTMLCONTROLRANGE_QUERYCOMMANDSUPPORTED = 1007;
	public const uint32 DISPID_IHTMLCONTROLRANGE_QUERYCOMMANDENABLED = 1008;
	public const uint32 DISPID_IHTMLCONTROLRANGE_QUERYCOMMANDSTATE = 1009;
	public const uint32 DISPID_IHTMLCONTROLRANGE_QUERYCOMMANDINDETERM = 1010;
	public const uint32 DISPID_IHTMLCONTROLRANGE_QUERYCOMMANDTEXT = 1011;
	public const uint32 DISPID_IHTMLCONTROLRANGE_QUERYCOMMANDVALUE = 1012;
	public const uint32 DISPID_IHTMLCONTROLRANGE_EXECCOMMAND = 1013;
	public const uint32 DISPID_IHTMLCONTROLRANGE_EXECCOMMANDSHOWHELP = 1014;
	public const uint32 DISPID_IHTMLCONTROLRANGE_COMMONPARENTELEMENT = 1015;
	public const uint32 DISPID_IHTMLCONTROLRANGE_LENGTH = 1005;
	public const uint32 DISPID_IHTMLCONTROLRANGE2_ADDELEMENT = 1016;
	public const uint32 DISPID_IHTMLIMGELEMENT_ISMAP = 2002;
	public const uint32 DISPID_IHTMLIMGELEMENT_USEMAP = 2008;
	public const uint32 DISPID_IHTMLIMGELEMENT_MIMETYPE = 2010;
	public const uint32 DISPID_IHTMLIMGELEMENT_FILESIZE = 2011;
	public const uint32 DISPID_IHTMLIMGELEMENT_FILECREATEDDATE = 2012;
	public const uint32 DISPID_IHTMLIMGELEMENT_FILEMODIFIEDDATE = 2013;
	public const uint32 DISPID_IHTMLIMGELEMENT_FILEUPDATEDDATE = 2014;
	public const uint32 DISPID_IHTMLIMGELEMENT_PROTOCOL = 2015;
	public const uint32 DISPID_IHTMLIMGELEMENT_HREF = 2016;
	public const uint32 DISPID_IHTMLIMGELEMENT_NAMEPROP = 2017;
	public const uint32 DISPID_IHTMLIMGELEMENT_BORDER = 1004;
	public const uint32 DISPID_IHTMLIMGELEMENT_VSPACE = 1005;
	public const uint32 DISPID_IHTMLIMGELEMENT_HSPACE = 1006;
	public const uint32 DISPID_IHTMLIMGELEMENT_ALT = 1002;
	public const uint32 DISPID_IHTMLIMGELEMENT_SRC = 1003;
	public const uint32 DISPID_IHTMLIMGELEMENT_LOWSRC = 1007;
	public const uint32 DISPID_IHTMLIMGELEMENT_VRML = 1008;
	public const uint32 DISPID_IHTMLIMGELEMENT_DYNSRC = 1009;
	public const uint32 DISPID_IHTMLIMGELEMENT_READYSTATE = 70652;
	public const uint32 DISPID_IHTMLIMGELEMENT_COMPLETE = 1010;
	public const uint32 DISPID_IHTMLIMGELEMENT_LOOP = 1011;
	public const uint32 DISPID_IHTMLIMGELEMENT_ALIGN = 65609;
	public const uint32 DISPID_IHTMLIMGELEMENT_ONLOAD = 71568;
	public const uint32 DISPID_IHTMLIMGELEMENT_ONERROR = 71565;
	public const uint32 DISPID_IHTMLIMGELEMENT_ONABORT = 71564;
	public const uint32 DISPID_IHTMLIMGELEMENT_NAME = 65536;
	public const uint32 DISPID_IHTMLIMGELEMENT_WIDTH = 65541;
	public const uint32 DISPID_IHTMLIMGELEMENT_HEIGHT = 65542;
	public const uint32 DISPID_IHTMLIMGELEMENT_START = 1013;
	public const uint32 DISPID_IHTMLIMGELEMENT2_LONGDESC = 2019;
	public const uint32 DISPID_IHTMLIMGELEMENT3_IE8_LONGDESC = 1151;
	public const uint32 DISPID_IHTMLIMGELEMENT3_IE8_VRML = 1152;
	public const uint32 DISPID_IHTMLIMGELEMENT3_IE8_LOWSRC = 1153;
	public const uint32 DISPID_IHTMLIMGELEMENT3_IE8_DYNSRC = 1154;
	public const uint32 DISPID_IHTMLIMGELEMENT4_NATURALWIDTH = 1155;
	public const uint32 DISPID_IHTMLIMGELEMENT4_NATURALHEIGHT = 1156;
	public const uint32 DISPID_IHTMLMSIMGELEMENT_MSPLAYTODISABLED = 1157;
	public const uint32 DISPID_IHTMLMSIMGELEMENT_MSPLAYTOPRIMARY = 1158;
	public const uint32 DISPID_IHTMLIMAGEELEMENTFACTORY_CREATE = 0;
	public const uint32 DISPID_HTMLIMGEVENTS2_ONLOAD = 1003;
	public const uint32 DISPID_HTMLIMGEVENTS2_ONERROR = 1002;
	public const uint32 DISPID_HTMLIMGEVENTS2_ONABORT = 1000;
	public const uint32 DISPID_HTMLIMGEVENTS_ONLOAD = 1003;
	public const uint32 DISPID_HTMLIMGEVENTS_ONERROR = 1002;
	public const uint32 DISPID_HTMLIMGEVENTS_ONABORT = 1000;
	public const uint32 DISPID_IHTMLBODYELEMENT_BACKGROUND = 70537;
	public const uint32 DISPID_IHTMLBODYELEMENT_BGPROPERTIES = 70581;
	public const uint32 DISPID_IHTMLBODYELEMENT_LEFTMARGIN = 70576;
	public const uint32 DISPID_IHTMLBODYELEMENT_TOPMARGIN = 70573;
	public const uint32 DISPID_IHTMLBODYELEMENT_RIGHTMARGIN = 70574;
	public const uint32 DISPID_IHTMLBODYELEMENT_BOTTOMMARGIN = 70575;
	public const uint32 DISPID_IHTMLBODYELEMENT_NOWRAP = 70541;
	public const int32 DISPID_IHTMLBODYELEMENT_BGCOLOR = -501;
	public const uint32 DISPID_IHTMLBODYELEMENT_TEXT = 70538;
	public const uint32 DISPID_IHTMLBODYELEMENT_LINK = 2010;
	public const uint32 DISPID_IHTMLBODYELEMENT_VLINK = 2012;
	public const uint32 DISPID_IHTMLBODYELEMENT_ALINK = 2011;
	public const uint32 DISPID_IHTMLBODYELEMENT_ONLOAD = 71568;
	public const uint32 DISPID_IHTMLBODYELEMENT_ONUNLOAD = 71569;
	public const uint32 DISPID_IHTMLBODYELEMENT_SCROLL = 70615;
	public const uint32 DISPID_IHTMLBODYELEMENT_ONSELECT = 71546;
	public const uint32 DISPID_IHTMLBODYELEMENT_ONBEFOREUNLOAD = 71575;
	public const uint32 DISPID_IHTMLBODYELEMENT_CREATETEXTRANGE = 2013;
	public const uint32 DISPID_IHTMLBODYELEMENT2_ONBEFOREPRINT = 71602;
	public const uint32 DISPID_IHTMLBODYELEMENT2_ONAFTERPRINT = 71603;
	public const uint32 DISPID_IHTMLBODYELEMENT3_IE8_BACKGROUND = 1150;
	public const uint32 DISPID_IHTMLBODYELEMENT3_ONONLINE = 71643;
	public const uint32 DISPID_IHTMLBODYELEMENT3_ONOFFLINE = 71644;
	public const uint32 DISPID_IHTMLBODYELEMENT3_ONHASHCHANGE = 71645;
	public const uint32 DISPID_IHTMLBODYELEMENT4_ONMESSAGE = 71646;
	public const uint32 DISPID_IHTMLBODYELEMENT4_ONSTORAGE = 71636;
	public const uint32 DISPID_IHTMLBODYELEMENT5_ONPOPSTATE = 71728;
	public const uint32 DISPID_IHTMLFONTELEMENT_COLOR = 70538;
	public const uint32 DISPID_IHTMLFONTELEMENT_FACE = 70554;
	public const uint32 DISPID_IHTMLFONTELEMENT_SIZE = 70555;
	public const uint32 DISPID_IHTMLANCHORELEMENT_HREF = 0;
	public const uint32 DISPID_IHTMLANCHORELEMENT_TARGET = 1003;
	public const uint32 DISPID_IHTMLANCHORELEMENT_REL = 1005;
	public const uint32 DISPID_IHTMLANCHORELEMENT_REV = 1006;
	public const uint32 DISPID_IHTMLANCHORELEMENT_URN = 1007;
	public const uint32 DISPID_IHTMLANCHORELEMENT_METHODS = 1008;
	public const uint32 DISPID_IHTMLANCHORELEMENT_NAME = 65536;
	public const uint32 DISPID_IHTMLANCHORELEMENT_HOST = 1012;
	public const uint32 DISPID_IHTMLANCHORELEMENT_HOSTNAME = 1013;
	public const uint32 DISPID_IHTMLANCHORELEMENT_PATHNAME = 1014;
	public const uint32 DISPID_IHTMLANCHORELEMENT_PORT = 1015;
	public const uint32 DISPID_IHTMLANCHORELEMENT_PROTOCOL = 1016;
	public const uint32 DISPID_IHTMLANCHORELEMENT_SEARCH = 1017;
	public const uint32 DISPID_IHTMLANCHORELEMENT_HASH = 1018;
	public const uint32 DISPID_IHTMLANCHORELEMENT_ONBLUR = 71551;
	public const uint32 DISPID_IHTMLANCHORELEMENT_ONFOCUS = 71550;
	public const uint32 DISPID_IHTMLANCHORELEMENT_ACCESSKEY = 67541;
	public const uint32 DISPID_IHTMLANCHORELEMENT_PROTOCOLLONG = 1031;
	public const uint32 DISPID_IHTMLANCHORELEMENT_MIMETYPE = 1030;
	public const uint32 DISPID_IHTMLANCHORELEMENT_NAMEPROP = 1032;
	public const uint32 DISPID_IHTMLANCHORELEMENT_TABINDEX = 65551;
	public const uint32 DISPID_IHTMLANCHORELEMENT_FOCUS = 67536;
	public const uint32 DISPID_IHTMLANCHORELEMENT_BLUR = 67538;
	public const uint32 DISPID_IHTMLANCHORELEMENT2_CHARSET = 1023;
	public const uint32 DISPID_IHTMLANCHORELEMENT2_COORDS = 1024;
	public const uint32 DISPID_IHTMLANCHORELEMENT2_HREFLANG = 1025;
	public const uint32 DISPID_IHTMLANCHORELEMENT2_SHAPE = 1026;
	public const uint32 DISPID_IHTMLANCHORELEMENT2_TYPE = 1027;
	public const uint32 DISPID_IHTMLANCHORELEMENT3_IE8_SHAPE = 1151;
	public const uint32 DISPID_IHTMLANCHORELEMENT3_IE8_COORDS = 1152;
	public const uint32 DISPID_IHTMLANCHORELEMENT3_IE8_HREF = 1153;
	public const uint32 DISPID_IHTMLLABELELEMENT_HTMLFOR = 1000;
	public const uint32 DISPID_IHTMLLABELELEMENT_ACCESSKEY = 67541;
	public const uint32 DISPID_IHTMLLABELELEMENT2_FORM = 1002;
	public const uint32 DISPID_IHTMLLISTELEMENT2_COMPACT = 1001;
	public const uint32 DISPID_IHTMLULISTELEMENT_COMPACT = 1001;
	public const uint32 DISPID_IHTMLULISTELEMENT_TYPE = 70553;
	public const uint32 DISPID_IHTMLOLISTELEMENT_COMPACT = 1001;
	public const uint32 DISPID_IHTMLOLISTELEMENT_START = 1003;
	public const uint32 DISPID_IHTMLOLISTELEMENT_TYPE = 70553;
	public const uint32 DISPID_IHTMLLIELEMENT_TYPE = 70553;
	public const uint32 DISPID_IHTMLLIELEMENT_VALUE = 1001;
	public const uint32 DISPID_IHTMLBLOCKELEMENT_CLEAR = 70552;
	public const uint32 DISPID_IHTMLBLOCKELEMENT2_CITE = 1001;
	public const uint32 DISPID_IHTMLBLOCKELEMENT2_WIDTH = 1002;
	public const uint32 DISPID_IHTMLBLOCKELEMENT3_IE8_CITE = 1150;
	public const uint32 DISPID_IHTMLDIVELEMENT_ALIGN = 65608;
	public const uint32 DISPID_IHTMLDIVELEMENT_NOWRAP = 70541;
	public const uint32 DISPID_IHTMLDDELEMENT_NOWRAP = 70541;
	public const uint32 DISPID_IHTMLDTELEMENT_NOWRAP = 70541;
	public const uint32 DISPID_IHTMLBRELEMENT_CLEAR = 70552;
	public const uint32 DISPID_IHTMLDLISTELEMENT_COMPACT = 1001;
	public const uint32 DISPID_IHTMLHRELEMENT_ALIGN = 65608;
	public const uint32 DISPID_IHTMLHRELEMENT_COLOR = 70538;
	public const uint32 DISPID_IHTMLHRELEMENT_NOSHADE = 1001;
	public const uint32 DISPID_IHTMLHRELEMENT_WIDTH = 65541;
	public const uint32 DISPID_IHTMLHRELEMENT_SIZE = 65542;
	public const uint32 DISPID_IHTMLPARAELEMENT_ALIGN = 65608;
	public const uint32 DISPID_IHTMLELEMENTCOLLECTION_TOSTRING = 1501;
	public const uint32 DISPID_IHTMLELEMENTCOLLECTION_LENGTH = 1500;
	public const int32 DISPID_IHTMLELEMENTCOLLECTION__NEWENUM = -4;
	public const uint32 DISPID_IHTMLELEMENTCOLLECTION_ITEM = 0;
	public const uint32 DISPID_IHTMLELEMENTCOLLECTION_TAGS = 1502;
	public const uint32 DISPID_IHTMLELEMENTCOLLECTION2_URNS = 1505;
	public const uint32 DISPID_IHTMLELEMENTCOLLECTION3_NAMEDITEM = 1506;
	public const uint32 DISPID_IHTMLELEMENTCOLLECTION4_IE8_LENGTH = 1150;
	public const uint32 DISPID_IHTMLELEMENTCOLLECTION4_IE8_ITEM = 1152;
	public const uint32 DISPID_IHTMLELEMENTCOLLECTION4_IE8_NAMEDITEM = 1153;
	public const uint32 DISPID_IHTMLHEADERELEMENT_ALIGN = 65608;
	public const uint32 DISPID_IHTMLSELECTELEMENT_SIZE = 1002;
	public const uint32 DISPID_IHTMLSELECTELEMENT_MULTIPLE = 1003;
	public const uint32 DISPID_IHTMLSELECTELEMENT_NAME = 65536;
	public const uint32 DISPID_IHTMLSELECTELEMENT_OPTIONS = 1005;
	public const uint32 DISPID_IHTMLSELECTELEMENT_ONCHANGE = 71566;
	public const uint32 DISPID_IHTMLSELECTELEMENT_SELECTEDINDEX = 1010;
	public const uint32 DISPID_IHTMLSELECTELEMENT_TYPE = 1012;
	public const uint32 DISPID_IHTMLSELECTELEMENT_VALUE = 1011;
	public const uint32 DISPID_IHTMLSELECTELEMENT_DISABLED = 65612;
	public const uint32 DISPID_IHTMLSELECTELEMENT_FORM = 67540;
	public const uint32 DISPID_IHTMLSELECTELEMENT_ADD = 1503;
	public const uint32 DISPID_IHTMLSELECTELEMENT_REMOVE = 1504;
	public const uint32 DISPID_IHTMLSELECTELEMENT_LENGTH = 1500;
	public const int32 DISPID_IHTMLSELECTELEMENT__NEWENUM = -4;
	public const uint32 DISPID_IHTMLSELECTELEMENT_ITEM = 0;
	public const uint32 DISPID_IHTMLSELECTELEMENT_TAGS = 1502;
	public const uint32 DISPID_IHTMLSELECTELEMENT2_URNS = 1505;
	public const uint32 DISPID_IHTMLSELECTELEMENT4_NAMEDITEM = 1506;
	public const uint32 DISPID_IHTMLSELECTELEMENT5_IE8_ADD = 1150;
	public const uint32 DISPID_IHTMLSELECTELEMENT6_IE9_ADD = 1151;
	public const uint32 DISPID_IHTMLSELECTELEMENT6_IE9_VALUE = 1152;
	public const uint32 DISPID_HTMLSELECTELEMENTEVENTS2_ONCHANGE = 1001;
	public const uint32 DISPID_HTMLSELECTELEMENTEVENTS_ONCHANGE = 1001;
	public const uint32 DISPID_IHTMLSELECTIONOBJECT_CREATERANGE = 1001;
	public const uint32 DISPID_IHTMLSELECTIONOBJECT_EMPTY = 1002;
	public const uint32 DISPID_IHTMLSELECTIONOBJECT_CLEAR = 1003;
	public const uint32 DISPID_IHTMLSELECTIONOBJECT_TYPE = 1004;
	public const uint32 DISPID_IHTMLSELECTIONOBJECT2_CREATERANGECOLLECTION = 1005;
	public const uint32 DISPID_IHTMLSELECTIONOBJECT2_TYPEDETAIL = 1006;
	public const uint32 DISPID_IHTMLSELECTION_ANCHORNODE = 1001;
	public const uint32 DISPID_IHTMLSELECTION_ANCHOROFFSET = 1002;
	public const uint32 DISPID_IHTMLSELECTION_FOCUSNODE = 1003;
	public const uint32 DISPID_IHTMLSELECTION_FOCUSOFFSET = 1004;
	public const uint32 DISPID_IHTMLSELECTION_ISCOLLAPSED = 1005;
	public const uint32 DISPID_IHTMLSELECTION_COLLAPSE = 1006;
	public const uint32 DISPID_IHTMLSELECTION_COLLAPSETOSTART = 1007;
	public const uint32 DISPID_IHTMLSELECTION_COLLAPSETOEND = 1008;
	public const uint32 DISPID_IHTMLSELECTION_SELECTALLCHILDREN = 1009;
	public const uint32 DISPID_IHTMLSELECTION_DELETEFROMDOCUMENT = 1010;
	public const uint32 DISPID_IHTMLSELECTION_RANGECOUNT = 1011;
	public const uint32 DISPID_IHTMLSELECTION_GETRANGEAT = 1012;
	public const uint32 DISPID_IHTMLSELECTION_ADDRANGE = 1013;
	public const uint32 DISPID_IHTMLSELECTION_REMOVERANGE = 1014;
	public const uint32 DISPID_IHTMLSELECTION_REMOVEALLRANGES = 1015;
	public const uint32 DISPID_IHTMLSELECTION_TOSTRING = 1016;
	public const uint32 DISPID_IHTMLOPTIONELEMENT_SELECTED = 1001;
	public const uint32 DISPID_IHTMLOPTIONELEMENT_VALUE = 1002;
	public const uint32 DISPID_IHTMLOPTIONELEMENT_DEFAULTSELECTED = 1003;
	public const uint32 DISPID_IHTMLOPTIONELEMENT_INDEX = 1005;
	public const uint32 DISPID_IHTMLOPTIONELEMENT_TEXT = 1004;
	public const uint32 DISPID_IHTMLOPTIONELEMENT_FORM = 1006;
	public const uint32 DISPID_IHTMLOPTIONELEMENT3_LABEL = 1007;
	public const uint32 DISPID_IHTMLOPTIONELEMENT4_IE9_VALUE = 1008;
	public const uint32 DISPID_IHTMLOPTIONELEMENTFACTORY_CREATE = 0;
	public const uint32 DISPID_IHTMLINPUTELEMENT_TYPE = 2000;
	public const uint32 DISPID_IHTMLINPUTELEMENT_VALUE = 70637;
	public const uint32 DISPID_IHTMLINPUTELEMENT_NAME = 65536;
	public const uint32 DISPID_IHTMLINPUTELEMENT_STATUS = 2001;
	public const uint32 DISPID_IHTMLINPUTELEMENT_DISABLED = 65612;
	public const uint32 DISPID_IHTMLINPUTELEMENT_FORM = 67540;
	public const uint32 DISPID_IHTMLINPUTELEMENT_SIZE = 2002;
	public const uint32 DISPID_IHTMLINPUTELEMENT_MAXLENGTH = 2003;
	public const uint32 DISPID_IHTMLINPUTELEMENT_SELECT = 2004;
	public const uint32 DISPID_IHTMLINPUTELEMENT_ONCHANGE = 71566;
	public const uint32 DISPID_IHTMLINPUTELEMENT_ONSELECT = 71546;
	public const uint32 DISPID_IHTMLINPUTELEMENT_DEFAULTVALUE = 70619;
	public const uint32 DISPID_IHTMLINPUTELEMENT_READONLY = 2005;
	public const uint32 DISPID_IHTMLINPUTELEMENT_CREATETEXTRANGE = 2006;
	public const uint32 DISPID_IHTMLINPUTELEMENT_INDETERMINATE = 2007;
	public const uint32 DISPID_IHTMLINPUTELEMENT_DEFAULTCHECKED = 2008;
	public const uint32 DISPID_IHTMLINPUTELEMENT_CHECKED = 2009;
	public const uint32 DISPID_IHTMLINPUTELEMENT_BORDER = 2012;
	public const uint32 DISPID_IHTMLINPUTELEMENT_VSPACE = 2013;
	public const uint32 DISPID_IHTMLINPUTELEMENT_HSPACE = 2014;
	public const uint32 DISPID_IHTMLINPUTELEMENT_ALT = 2010;
	public const uint32 DISPID_IHTMLINPUTELEMENT_SRC = 2011;
	public const uint32 DISPID_IHTMLINPUTELEMENT_LOWSRC = 2015;
	public const uint32 DISPID_IHTMLINPUTELEMENT_VRML = 2016;
	public const uint32 DISPID_IHTMLINPUTELEMENT_DYNSRC = 2017;
	public const uint32 DISPID_IHTMLINPUTELEMENT_READYSTATE = 70652;
	public const uint32 DISPID_IHTMLINPUTELEMENT_COMPLETE = 2018;
	public const uint32 DISPID_IHTMLINPUTELEMENT_LOOP = 2019;
	public const uint32 DISPID_IHTMLINPUTELEMENT_ALIGN = 65609;
	public const uint32 DISPID_IHTMLINPUTELEMENT_ONLOAD = 71568;
	public const uint32 DISPID_IHTMLINPUTELEMENT_ONERROR = 71565;
	public const uint32 DISPID_IHTMLINPUTELEMENT_ONABORT = 71564;
	public const uint32 DISPID_IHTMLINPUTELEMENT_WIDTH = 65541;
	public const uint32 DISPID_IHTMLINPUTELEMENT_HEIGHT = 65542;
	public const uint32 DISPID_IHTMLINPUTELEMENT_START = 2020;
	public const uint32 DISPID_IHTMLINPUTELEMENT2_ACCEPT = 2022;
	public const uint32 DISPID_IHTMLINPUTELEMENT2_USEMAP = 2023;
	public const uint32 DISPID_IHTMLINPUTELEMENT3_IE8_SRC = 1150;
	public const uint32 DISPID_IHTMLINPUTELEMENT3_IE8_LOWSRC = 1151;
	public const uint32 DISPID_IHTMLINPUTELEMENT3_IE8_VRML = 1152;
	public const uint32 DISPID_IHTMLINPUTELEMENT3_IE8_DYNSRC = 1153;
	public const uint32 DISPID_IHTMLINPUTBUTTONELEMENT_TYPE = 2000;
	public const uint32 DISPID_IHTMLINPUTBUTTONELEMENT_VALUE = 70637;
	public const uint32 DISPID_IHTMLINPUTBUTTONELEMENT_NAME = 65536;
	public const uint32 DISPID_IHTMLINPUTBUTTONELEMENT_STATUS = 2021;
	public const uint32 DISPID_IHTMLINPUTBUTTONELEMENT_DISABLED = 65612;
	public const uint32 DISPID_IHTMLINPUTBUTTONELEMENT_FORM = 67540;
	public const uint32 DISPID_IHTMLINPUTBUTTONELEMENT_CREATETEXTRANGE = 2006;
	public const uint32 DISPID_IHTMLINPUTHIDDENELEMENT_TYPE = 2000;
	public const uint32 DISPID_IHTMLINPUTHIDDENELEMENT_VALUE = 70637;
	public const uint32 DISPID_IHTMLINPUTHIDDENELEMENT_NAME = 65536;
	public const uint32 DISPID_IHTMLINPUTHIDDENELEMENT_STATUS = 2021;
	public const uint32 DISPID_IHTMLINPUTHIDDENELEMENT_DISABLED = 65612;
	public const uint32 DISPID_IHTMLINPUTHIDDENELEMENT_FORM = 67540;
	public const uint32 DISPID_IHTMLINPUTHIDDENELEMENT_CREATETEXTRANGE = 2006;
	public const uint32 DISPID_IHTMLINPUTTEXTELEMENT_TYPE = 2000;
	public const uint32 DISPID_IHTMLINPUTTEXTELEMENT_VALUE = 70637;
	public const uint32 DISPID_IHTMLINPUTTEXTELEMENT_NAME = 65536;
	public const uint32 DISPID_IHTMLINPUTTEXTELEMENT_STATUS = 2021;
	public const uint32 DISPID_IHTMLINPUTTEXTELEMENT_DISABLED = 65612;
	public const uint32 DISPID_IHTMLINPUTTEXTELEMENT_FORM = 67540;
	public const uint32 DISPID_IHTMLINPUTTEXTELEMENT_DEFAULTVALUE = 70619;
	public const uint32 DISPID_IHTMLINPUTTEXTELEMENT_SIZE = 2002;
	public const uint32 DISPID_IHTMLINPUTTEXTELEMENT_MAXLENGTH = 2003;
	public const uint32 DISPID_IHTMLINPUTTEXTELEMENT_SELECT = 2004;
	public const uint32 DISPID_IHTMLINPUTTEXTELEMENT_ONCHANGE = 71566;
	public const uint32 DISPID_IHTMLINPUTTEXTELEMENT_ONSELECT = 71546;
	public const uint32 DISPID_IHTMLINPUTTEXTELEMENT_READONLY = 2005;
	public const uint32 DISPID_IHTMLINPUTTEXTELEMENT_CREATETEXTRANGE = 2006;
	public const uint32 DISPID_IHTMLINPUTTEXTELEMENT2_SELECTIONSTART = 2025;
	public const uint32 DISPID_IHTMLINPUTTEXTELEMENT2_SELECTIONEND = 2026;
	public const uint32 DISPID_IHTMLINPUTTEXTELEMENT2_SETSELECTIONRANGE = 2027;
	public const uint32 DISPID_IHTMLINPUTFILEELEMENT_TYPE = 2000;
	public const uint32 DISPID_IHTMLINPUTFILEELEMENT_NAME = 65536;
	public const uint32 DISPID_IHTMLINPUTFILEELEMENT_STATUS = 2021;
	public const uint32 DISPID_IHTMLINPUTFILEELEMENT_DISABLED = 65612;
	public const uint32 DISPID_IHTMLINPUTFILEELEMENT_FORM = 67540;
	public const uint32 DISPID_IHTMLINPUTFILEELEMENT_SIZE = 2002;
	public const uint32 DISPID_IHTMLINPUTFILEELEMENT_MAXLENGTH = 2003;
	public const uint32 DISPID_IHTMLINPUTFILEELEMENT_SELECT = 2004;
	public const uint32 DISPID_IHTMLINPUTFILEELEMENT_ONCHANGE = 71566;
	public const uint32 DISPID_IHTMLINPUTFILEELEMENT_ONSELECT = 71546;
	public const uint32 DISPID_IHTMLINPUTFILEELEMENT_VALUE = 70637;
	public const uint32 DISPID_IHTMLOPTIONBUTTONELEMENT_VALUE = 70637;
	public const uint32 DISPID_IHTMLOPTIONBUTTONELEMENT_TYPE = 2000;
	public const uint32 DISPID_IHTMLOPTIONBUTTONELEMENT_NAME = 65536;
	public const uint32 DISPID_IHTMLOPTIONBUTTONELEMENT_CHECKED = 2009;
	public const uint32 DISPID_IHTMLOPTIONBUTTONELEMENT_DEFAULTCHECKED = 2008;
	public const uint32 DISPID_IHTMLOPTIONBUTTONELEMENT_ONCHANGE = 71566;
	public const uint32 DISPID_IHTMLOPTIONBUTTONELEMENT_DISABLED = 65612;
	public const uint32 DISPID_IHTMLOPTIONBUTTONELEMENT_STATUS = 2001;
	public const uint32 DISPID_IHTMLOPTIONBUTTONELEMENT_INDETERMINATE = 2007;
	public const uint32 DISPID_IHTMLOPTIONBUTTONELEMENT_FORM = 67540;
	public const uint32 DISPID_IHTMLINPUTIMAGE_TYPE = 2000;
	public const uint32 DISPID_IHTMLINPUTIMAGE_DISABLED = 65612;
	public const uint32 DISPID_IHTMLINPUTIMAGE_BORDER = 2012;
	public const uint32 DISPID_IHTMLINPUTIMAGE_VSPACE = 2013;
	public const uint32 DISPID_IHTMLINPUTIMAGE_HSPACE = 2014;
	public const uint32 DISPID_IHTMLINPUTIMAGE_ALT = 2010;
	public const uint32 DISPID_IHTMLINPUTIMAGE_SRC = 2011;
	public const uint32 DISPID_IHTMLINPUTIMAGE_LOWSRC = 2015;
	public const uint32 DISPID_IHTMLINPUTIMAGE_VRML = 2016;
	public const uint32 DISPID_IHTMLINPUTIMAGE_DYNSRC = 2017;
	public const uint32 DISPID_IHTMLINPUTIMAGE_READYSTATE = 70652;
	public const uint32 DISPID_IHTMLINPUTIMAGE_COMPLETE = 2018;
	public const uint32 DISPID_IHTMLINPUTIMAGE_LOOP = 2019;
	public const uint32 DISPID_IHTMLINPUTIMAGE_ALIGN = 65609;
	public const uint32 DISPID_IHTMLINPUTIMAGE_ONLOAD = 71568;
	public const uint32 DISPID_IHTMLINPUTIMAGE_ONERROR = 71565;
	public const uint32 DISPID_IHTMLINPUTIMAGE_ONABORT = 71564;
	public const uint32 DISPID_IHTMLINPUTIMAGE_NAME = 65536;
	public const uint32 DISPID_IHTMLINPUTIMAGE_WIDTH = 65541;
	public const uint32 DISPID_IHTMLINPUTIMAGE_HEIGHT = 65542;
	public const uint32 DISPID_IHTMLINPUTIMAGE_START = 2020;
	public const uint32 DISPID_IHTMLINPUTRANGEELEMENT_DISABLED = 65612;
	public const uint32 DISPID_IHTMLINPUTRANGEELEMENT_TYPE = 2000;
	public const uint32 DISPID_IHTMLINPUTRANGEELEMENT_ALT = 2010;
	public const uint32 DISPID_IHTMLINPUTRANGEELEMENT_NAME = 65536;
	public const uint32 DISPID_IHTMLINPUTRANGEELEMENT_VALUE = 70637;
	public const uint32 DISPID_IHTMLINPUTRANGEELEMENT_MIN = 2028;
	public const uint32 DISPID_IHTMLINPUTRANGEELEMENT_MAX = 2029;
	public const uint32 DISPID_IHTMLINPUTRANGEELEMENT_STEP = 2030;
	public const uint32 DISPID_IHTMLINPUTRANGEELEMENT_VALUEASNUMBER = 2031;
	public const uint32 DISPID_IHTMLINPUTRANGEELEMENT_STEPUP = 2033;
	public const uint32 DISPID_IHTMLINPUTRANGEELEMENT_STEPDOWN = 2032;
	public const uint32 DISPID_HTMLINPUTTEXTELEMENTEVENTS2_ONCHANGE = 1001;
	public const uint32 DISPID_HTMLINPUTTEXTELEMENTEVENTS2_ONSELECT = 1006;
	public const uint32 DISPID_HTMLINPUTTEXTELEMENTEVENTS2_ONLOAD = 1003;
	public const uint32 DISPID_HTMLINPUTTEXTELEMENTEVENTS2_ONERROR = 1002;
	public const uint32 DISPID_HTMLINPUTTEXTELEMENTEVENTS2_ONABORT = 1000;
	public const uint32 DISPID_HTMLINPUTIMAGEEVENTS2_ONLOAD = 1003;
	public const uint32 DISPID_HTMLINPUTIMAGEEVENTS2_ONERROR = 1002;
	public const uint32 DISPID_HTMLINPUTIMAGEEVENTS2_ONABORT = 1000;
	public const uint32 DISPID_HTMLINPUTTEXTELEMENTEVENTS_ONCHANGE = 1001;
	public const uint32 DISPID_HTMLINPUTTEXTELEMENTEVENTS_ONSELECT = 1006;
	public const uint32 DISPID_HTMLINPUTTEXTELEMENTEVENTS_ONLOAD = 1003;
	public const uint32 DISPID_HTMLINPUTTEXTELEMENTEVENTS_ONERROR = 1002;
	public const uint32 DISPID_HTMLINPUTTEXTELEMENTEVENTS_ONABORT = 1000;
	public const uint32 DISPID_HTMLINPUTIMAGEEVENTS_ONLOAD = 1003;
	public const uint32 DISPID_HTMLINPUTIMAGEEVENTS_ONERROR = 1002;
	public const uint32 DISPID_HTMLINPUTIMAGEEVENTS_ONABORT = 1000;
	public const uint32 DISPID_IHTMLTEXTAREAELEMENT_TYPE = 2000;
	public const uint32 DISPID_IHTMLTEXTAREAELEMENT_VALUE = 70637;
	public const uint32 DISPID_IHTMLTEXTAREAELEMENT_NAME = 65536;
	public const uint32 DISPID_IHTMLTEXTAREAELEMENT_STATUS = 2001;
	public const uint32 DISPID_IHTMLTEXTAREAELEMENT_DISABLED = 65612;
	public const uint32 DISPID_IHTMLTEXTAREAELEMENT_FORM = 67540;
	public const uint32 DISPID_IHTMLTEXTAREAELEMENT_DEFAULTVALUE = 70619;
	public const uint32 DISPID_IHTMLTEXTAREAELEMENT_SELECT = 7005;
	public const uint32 DISPID_IHTMLTEXTAREAELEMENT_ONCHANGE = 71566;
	public const uint32 DISPID_IHTMLTEXTAREAELEMENT_ONSELECT = 71546;
	public const uint32 DISPID_IHTMLTEXTAREAELEMENT_READONLY = 7004;
	public const uint32 DISPID_IHTMLTEXTAREAELEMENT_ROWS = 7001;
	public const uint32 DISPID_IHTMLTEXTAREAELEMENT_COLS = 7002;
	public const uint32 DISPID_IHTMLTEXTAREAELEMENT_WRAP = 7003;
	public const uint32 DISPID_IHTMLTEXTAREAELEMENT_CREATETEXTRANGE = 7006;
	public const uint32 DISPID_IHTMLTEXTAREAELEMENT2_SELECTIONSTART = 7007;
	public const uint32 DISPID_IHTMLTEXTAREAELEMENT2_SELECTIONEND = 7008;
	public const uint32 DISPID_IHTMLTEXTAREAELEMENT2_SETSELECTIONRANGE = 7009;
	public const uint32 DISPID_IHTMLBUTTONELEMENT_TYPE = 2000;
	public const uint32 DISPID_IHTMLBUTTONELEMENT_VALUE = 70637;
	public const uint32 DISPID_IHTMLBUTTONELEMENT_NAME = 65536;
	public const uint32 DISPID_IHTMLBUTTONELEMENT_STATUS = 8001;
	public const uint32 DISPID_IHTMLBUTTONELEMENT_DISABLED = 65612;
	public const uint32 DISPID_IHTMLBUTTONELEMENT_FORM = 67540;
	public const uint32 DISPID_IHTMLBUTTONELEMENT_CREATETEXTRANGE = 8002;
	public const uint32 DISPID_IHTMLBUTTONELEMENT2_IE9_TYPE = 8003;
	public const int32 DISPID_IHTMLMARQUEEELEMENT_BGCOLOR = -501;
	public const uint32 DISPID_IHTMLMARQUEEELEMENT_SCROLLDELAY = 6000;
	public const uint32 DISPID_IHTMLMARQUEEELEMENT_DIRECTION = 6001;
	public const uint32 DISPID_IHTMLMARQUEEELEMENT_BEHAVIOR = 6002;
	public const uint32 DISPID_IHTMLMARQUEEELEMENT_SCROLLAMOUNT = 6003;
	public const uint32 DISPID_IHTMLMARQUEEELEMENT_LOOP = 6004;
	public const uint32 DISPID_IHTMLMARQUEEELEMENT_VSPACE = 6005;
	public const uint32 DISPID_IHTMLMARQUEEELEMENT_HSPACE = 6006;
	public const uint32 DISPID_IHTMLMARQUEEELEMENT_ONFINISH = 71562;
	public const uint32 DISPID_IHTMLMARQUEEELEMENT_ONSTART = 71563;
	public const uint32 DISPID_IHTMLMARQUEEELEMENT_ONBOUNCE = 71556;
	public const uint32 DISPID_IHTMLMARQUEEELEMENT_WIDTH = 65541;
	public const uint32 DISPID_IHTMLMARQUEEELEMENT_HEIGHT = 65542;
	public const uint32 DISPID_IHTMLMARQUEEELEMENT_TRUESPEED = 6007;
	public const uint32 DISPID_IHTMLMARQUEEELEMENT_START = 6010;
	public const uint32 DISPID_IHTMLMARQUEEELEMENT_STOP = 6011;
	public const uint32 DISPID_HTMLMARQUEEELEMENTEVENTS2_ONBOUNCE = 1009;
	public const uint32 DISPID_HTMLMARQUEEELEMENTEVENTS2_ONFINISH = 1010;
	public const uint32 DISPID_HTMLMARQUEEELEMENTEVENTS2_ONSTART = 1011;
	public const uint32 DISPID_HTMLMARQUEEELEMENTEVENTS_ONBOUNCE = 1009;
	public const uint32 DISPID_HTMLMARQUEEELEMENTEVENTS_ONFINISH = 1010;
	public const uint32 DISPID_HTMLMARQUEEELEMENTEVENTS_ONSTART = 1011;
	public const uint32 DISPID_IHTMLHTMLELEMENT_VERSION = 1001;
	public const uint32 DISPID_IHTMLHEADELEMENT_PROFILE = 1001;
	public const uint32 DISPID_IHTMLHEADELEMENT2_IE8_PROFILE = 1150;
	public const uint32 DISPID_IHTMLTITLEELEMENT_TEXT = 70637;
	public const uint32 DISPID_IHTMLMETAELEMENT_HTTPEQUIV = 1001;
	public const uint32 DISPID_IHTMLMETAELEMENT_CONTENT = 1002;
	public const uint32 DISPID_IHTMLMETAELEMENT_NAME = 65536;
	public const uint32 DISPID_IHTMLMETAELEMENT_URL = 1003;
	public const uint32 DISPID_IHTMLMETAELEMENT_CHARSET = 1013;
	public const uint32 DISPID_IHTMLMETAELEMENT2_SCHEME = 1020;
	public const uint32 DISPID_IHTMLMETAELEMENT3_IE8_URL = 1150;
	public const uint32 DISPID_IHTMLBASEELEMENT_HREF = 1003;
	public const uint32 DISPID_IHTMLBASEELEMENT_TARGET = 1004;
	public const uint32 DISPID_IHTMLBASEELEMENT2_IE8_HREF = 1150;
	public const uint32 DISPID_IHTMLISINDEXELEMENT_PROMPT = 1010;
	public const uint32 DISPID_IHTMLISINDEXELEMENT_ACTION = 1011;
	public const uint32 DISPID_IHTMLISINDEXELEMENT2_FORM = 1012;
	public const uint32 DISPID_IHTMLNEXTIDELEMENT_N = 1012;
	public const uint32 DISPID_IHTMLBASEFONTELEMENT_COLOR = 70538;
	public const uint32 DISPID_IHTMLBASEFONTELEMENT_FACE = 70554;
	public const uint32 DISPID_IHTMLBASEFONTELEMENT_SIZE = 70562;
	public const uint32 DISPID_IOMHISTORY_LENGTH = 1;
	public const uint32 DISPID_IOMHISTORY_BACK = 2;
	public const uint32 DISPID_IOMHISTORY_FORWARD = 3;
	public const uint32 DISPID_IOMHISTORY_GO = 4;
	public const uint32 DISPID_IHTMLOPSPROFILE_ADDREQUEST = 1;
	public const uint32 DISPID_IHTMLOPSPROFILE_CLEARREQUEST = 2;
	public const uint32 DISPID_IHTMLOPSPROFILE_DOREQUEST = 3;
	public const uint32 DISPID_IHTMLOPSPROFILE_GETATTRIBUTE = 4;
	public const uint32 DISPID_IHTMLOPSPROFILE_SETATTRIBUTE = 5;
	public const uint32 DISPID_IHTMLOPSPROFILE_COMMITCHANGES = 6;
	public const uint32 DISPID_IHTMLOPSPROFILE_ADDREADREQUEST = 7;
	public const uint32 DISPID_IHTMLOPSPROFILE_DOREADREQUEST = 8;
	public const uint32 DISPID_IHTMLOPSPROFILE_DOWRITEREQUEST = 9;
	public const uint32 DISPID_IOMNAVIGATOR_APPCODENAME = 1;
	public const uint32 DISPID_IOMNAVIGATOR_APPNAME = 2;
	public const uint32 DISPID_IOMNAVIGATOR_APPVERSION = 3;
	public const uint32 DISPID_IOMNAVIGATOR_USERAGENT = 4;
	public const uint32 DISPID_IOMNAVIGATOR_JAVAENABLED = 5;
	public const uint32 DISPID_IOMNAVIGATOR_TAINTENABLED = 6;
	public const uint32 DISPID_IOMNAVIGATOR_MIMETYPES = 7;
	public const uint32 DISPID_IOMNAVIGATOR_PLUGINS = 8;
	public const uint32 DISPID_IOMNAVIGATOR_COOKIEENABLED = 9;
	public const uint32 DISPID_IOMNAVIGATOR_OPSPROFILE = 10;
	public const uint32 DISPID_IOMNAVIGATOR_TOSTRING = 11;
	public const uint32 DISPID_IOMNAVIGATOR_CPUCLASS = 12;
	public const uint32 DISPID_IOMNAVIGATOR_SYSTEMLANGUAGE = 13;
	public const uint32 DISPID_IOMNAVIGATOR_BROWSERLANGUAGE = 14;
	public const uint32 DISPID_IOMNAVIGATOR_USERLANGUAGE = 15;
	public const uint32 DISPID_IOMNAVIGATOR_PLATFORM = 16;
	public const uint32 DISPID_IOMNAVIGATOR_APPMINORVERSION = 17;
	public const uint32 DISPID_IOMNAVIGATOR_CONNECTIONSPEED = 18;
	public const uint32 DISPID_IOMNAVIGATOR_ONLINE = 19;
	public const uint32 DISPID_IOMNAVIGATOR_USERPROFILE = 20;
	public const uint32 DISPID_INAVIGATORGEOLOCATION_GEOLOCATION = 21;
	public const uint32 DISPID_INAVIGATORDONOTTRACK_MSDONOTTRACK = 22;
	public const uint32 DISPID_IHTMLLOCATION_HREF = 0;
	public const uint32 DISPID_IHTMLLOCATION_PROTOCOL = 1;
	public const uint32 DISPID_IHTMLLOCATION_HOST = 2;
	public const uint32 DISPID_IHTMLLOCATION_HOSTNAME = 3;
	public const uint32 DISPID_IHTMLLOCATION_PORT = 4;
	public const uint32 DISPID_IHTMLLOCATION_PATHNAME = 5;
	public const uint32 DISPID_IHTMLLOCATION_SEARCH = 6;
	public const uint32 DISPID_IHTMLLOCATION_HASH = 7;
	public const uint32 DISPID_IHTMLLOCATION_RELOAD = 8;
	public const uint32 DISPID_IHTMLLOCATION_REPLACE = 9;
	public const uint32 DISPID_IHTMLLOCATION_ASSIGN = 10;
	public const uint32 DISPID_IHTMLLOCATION_TOSTRING = 11;
	public const uint32 DISPID_IHTMLMIMETYPESCOLLECTION_LENGTH = 1;
	public const uint32 DISPID_IHTMLPLUGINSCOLLECTION_LENGTH = 1;
	public const uint32 DISPID_IHTMLPLUGINSCOLLECTION_REFRESH = 2;
	public const uint32 DISPID_IHTMLBOOKMARKCOLLECTION_LENGTH = 1501;
	public const int32 DISPID_IHTMLBOOKMARKCOLLECTION__NEWENUM = -4;
	public const uint32 DISPID_IHTMLBOOKMARKCOLLECTION_ITEM = 0;
	public const uint32 DISPID_IHTMLDATATRANSFER_SETDATA = 1001;
	public const uint32 DISPID_IHTMLDATATRANSFER_GETDATA = 1002;
	public const uint32 DISPID_IHTMLDATATRANSFER_CLEARDATA = 1003;
	public const uint32 DISPID_IHTMLDATATRANSFER_DROPEFFECT = 1004;
	public const uint32 DISPID_IHTMLDATATRANSFER_EFFECTALLOWED = 1005;
	public const uint32 DISPID_IHTMLEVENTOBJ_SRCELEMENT = 1001;
	public const uint32 DISPID_IHTMLEVENTOBJ_ALTKEY = 1002;
	public const uint32 DISPID_IHTMLEVENTOBJ_CTRLKEY = 1003;
	public const uint32 DISPID_IHTMLEVENTOBJ_SHIFTKEY = 1004;
	public const uint32 DISPID_IHTMLEVENTOBJ_RETURNVALUE = 1007;
	public const uint32 DISPID_IHTMLEVENTOBJ_CANCELBUBBLE = 1008;
	public const uint32 DISPID_IHTMLEVENTOBJ_FROMELEMENT = 1009;
	public const uint32 DISPID_IHTMLEVENTOBJ_TOELEMENT = 1010;
	public const uint32 DISPID_IHTMLEVENTOBJ_KEYCODE = 1011;
	public const uint32 DISPID_IHTMLEVENTOBJ_BUTTON = 1012;
	public const uint32 DISPID_IHTMLEVENTOBJ_TYPE = 1013;
	public const uint32 DISPID_IHTMLEVENTOBJ_QUALIFIER = 1014;
	public const uint32 DISPID_IHTMLEVENTOBJ_REASON = 1015;
	public const uint32 DISPID_IHTMLEVENTOBJ_X = 1005;
	public const uint32 DISPID_IHTMLEVENTOBJ_Y = 1006;
	public const uint32 DISPID_IHTMLEVENTOBJ_CLIENTX = 1020;
	public const uint32 DISPID_IHTMLEVENTOBJ_CLIENTY = 1021;
	public const uint32 DISPID_IHTMLEVENTOBJ_OFFSETX = 1022;
	public const uint32 DISPID_IHTMLEVENTOBJ_OFFSETY = 1023;
	public const uint32 DISPID_IHTMLEVENTOBJ_SCREENX = 1024;
	public const uint32 DISPID_IHTMLEVENTOBJ_SCREENY = 1025;
	public const uint32 DISPID_IHTMLEVENTOBJ_SRCFILTER = 1026;
	public const uint32 DISPID_IHTMLEVENTOBJ2_SETATTRIBUTE = 66037;
	public const uint32 DISPID_IHTMLEVENTOBJ2_GETATTRIBUTE = 66038;
	public const uint32 DISPID_IHTMLEVENTOBJ2_REMOVEATTRIBUTE = 66039;
	public const uint32 DISPID_IHTMLEVENTOBJ2_PROPERTYNAME = 1027;
	public const uint32 DISPID_IHTMLEVENTOBJ2_BOOKMARKS = 1031;
	public const uint32 DISPID_IHTMLEVENTOBJ2_RECORDSET = 1032;
	public const uint32 DISPID_IHTMLEVENTOBJ2_DATAFLD = 1033;
	public const uint32 DISPID_IHTMLEVENTOBJ2_BOUNDELEMENTS = 1034;
	public const uint32 DISPID_IHTMLEVENTOBJ2_REPEAT = 1035;
	public const uint32 DISPID_IHTMLEVENTOBJ2_SRCURN = 1036;
	public const uint32 DISPID_IHTMLEVENTOBJ2_SRCELEMENT = 1001;
	public const uint32 DISPID_IHTMLEVENTOBJ2_ALTKEY = 1002;
	public const uint32 DISPID_IHTMLEVENTOBJ2_CTRLKEY = 1003;
	public const uint32 DISPID_IHTMLEVENTOBJ2_SHIFTKEY = 1004;
	public const uint32 DISPID_IHTMLEVENTOBJ2_FROMELEMENT = 1009;
	public const uint32 DISPID_IHTMLEVENTOBJ2_TOELEMENT = 1010;
	public const uint32 DISPID_IHTMLEVENTOBJ2_BUTTON = 1012;
	public const uint32 DISPID_IHTMLEVENTOBJ2_TYPE = 1013;
	public const uint32 DISPID_IHTMLEVENTOBJ2_QUALIFIER = 1014;
	public const uint32 DISPID_IHTMLEVENTOBJ2_REASON = 1015;
	public const uint32 DISPID_IHTMLEVENTOBJ2_X = 1005;
	public const uint32 DISPID_IHTMLEVENTOBJ2_Y = 1006;
	public const uint32 DISPID_IHTMLEVENTOBJ2_CLIENTX = 1020;
	public const uint32 DISPID_IHTMLEVENTOBJ2_CLIENTY = 1021;
	public const uint32 DISPID_IHTMLEVENTOBJ2_OFFSETX = 1022;
	public const uint32 DISPID_IHTMLEVENTOBJ2_OFFSETY = 1023;
	public const uint32 DISPID_IHTMLEVENTOBJ2_SCREENX = 1024;
	public const uint32 DISPID_IHTMLEVENTOBJ2_SCREENY = 1025;
	public const uint32 DISPID_IHTMLEVENTOBJ2_SRCFILTER = 1026;
	public const uint32 DISPID_IHTMLEVENTOBJ2_DATATRANSFER = 1037;
	public const uint32 DISPID_IHTMLEVENTOBJ3_CONTENTOVERFLOW = 1038;
	public const uint32 DISPID_IHTMLEVENTOBJ3_SHIFTLEFT = 1039;
	public const uint32 DISPID_IHTMLEVENTOBJ3_ALTLEFT = 1040;
	public const uint32 DISPID_IHTMLEVENTOBJ3_CTRLLEFT = 1041;
	public const uint32 DISPID_IHTMLEVENTOBJ3_IMECOMPOSITIONCHANGE = 1042;
	public const uint32 DISPID_IHTMLEVENTOBJ3_IMENOTIFYCOMMAND = 1043;
	public const uint32 DISPID_IHTMLEVENTOBJ3_IMENOTIFYDATA = 1044;
	public const uint32 DISPID_IHTMLEVENTOBJ3_IMEREQUEST = 1046;
	public const uint32 DISPID_IHTMLEVENTOBJ3_IMEREQUESTDATA = 1047;
	public const uint32 DISPID_IHTMLEVENTOBJ3_KEYBOARDLAYOUT = 1045;
	public const uint32 DISPID_IHTMLEVENTOBJ3_BEHAVIORCOOKIE = 1048;
	public const uint32 DISPID_IHTMLEVENTOBJ3_BEHAVIORPART = 1049;
	public const uint32 DISPID_IHTMLEVENTOBJ3_NEXTPAGE = 1050;
	public const uint32 DISPID_IHTMLEVENTOBJ4_WHEELDELTA = 1051;
	public const uint32 DISPID_IHTMLEVENTOBJ5_URL = 1052;
	public const uint32 DISPID_IHTMLEVENTOBJ5_DATA = 1054;
	public const uint32 DISPID_IHTMLEVENTOBJ5_SOURCE = 1055;
	public const uint32 DISPID_IHTMLEVENTOBJ5_ORIGIN = 1053;
	public const uint32 DISPID_IHTMLEVENTOBJ5_ISSESSION = 1056;
	public const uint32 DISPID_IHTMLEVENTOBJ6_ACTIONURL = 1058;
	public const uint32 DISPID_IHTMLEVENTOBJ6_BUTTONID = 1057;
	public const uint32 DISPID_IHTMLSTYLEMEDIA_TYPE = 1001;
	public const uint32 DISPID_IHTMLSTYLEMEDIA_MATCHMEDIUM = 1002;
	public const uint32 DISPID_IHTMLFRAMESCOLLECTION2_ITEM = 0;
	public const uint32 DISPID_IHTMLFRAMESCOLLECTION2_LENGTH = 1001;
	public const uint32 DISPID_IHTMLSCREEN_COLORDEPTH = 1001;
	public const uint32 DISPID_IHTMLSCREEN_BUFFERDEPTH = 1002;
	public const uint32 DISPID_IHTMLSCREEN_WIDTH = 1003;
	public const uint32 DISPID_IHTMLSCREEN_HEIGHT = 1004;
	public const uint32 DISPID_IHTMLSCREEN_UPDATEINTERVAL = 1005;
	public const uint32 DISPID_IHTMLSCREEN_AVAILHEIGHT = 1006;
	public const uint32 DISPID_IHTMLSCREEN_AVAILWIDTH = 1007;
	public const uint32 DISPID_IHTMLSCREEN_FONTSMOOTHINGENABLED = 1008;
	public const uint32 DISPID_IHTMLSCREEN2_LOGICALXDPI = 1009;
	public const uint32 DISPID_IHTMLSCREEN2_LOGICALYDPI = 1010;
	public const uint32 DISPID_IHTMLSCREEN2_DEVICEXDPI = 1011;
	public const uint32 DISPID_IHTMLSCREEN2_DEVICEYDPI = 1012;
	public const uint32 DISPID_IHTMLSCREEN3_SYSTEMXDPI = 1013;
	public const uint32 DISPID_IHTMLSCREEN3_SYSTEMYDPI = 1014;
	public const uint32 DISPID_IHTMLSCREEN4_PIXELDEPTH = 1015;
	public const uint32 DISPID_IHTMLWINDOW2_FRAMES = 1100;
	public const uint32 DISPID_IHTMLWINDOW2_DEFAULTSTATUS = 1101;
	public const uint32 DISPID_IHTMLWINDOW2_STATUS = 1102;
	public const uint32 DISPID_IHTMLWINDOW2_SETTIMEOUT = 1172;
	public const uint32 DISPID_IHTMLWINDOW2_CLEARTIMEOUT = 1104;
	public const uint32 DISPID_IHTMLWINDOW2_ALERT = 1105;
	public const uint32 DISPID_IHTMLWINDOW2_CONFIRM = 1110;
	public const uint32 DISPID_IHTMLWINDOW2_PROMPT = 1111;
	public const uint32 DISPID_IHTMLWINDOW2_IMAGE = 1125;
	public const uint32 DISPID_IHTMLWINDOW2_LOCATION = 14;
	public const uint32 DISPID_IHTMLWINDOW2_HISTORY = 2;
	public const uint32 DISPID_IHTMLWINDOW2_CLOSE = 3;
	public const uint32 DISPID_IHTMLWINDOW2_OPENER = 4;
	public const uint32 DISPID_IHTMLWINDOW2_NAVIGATOR = 5;
	public const uint32 DISPID_IHTMLWINDOW2_NAME = 11;
	public const uint32 DISPID_IHTMLWINDOW2_PARENT = 12;
	public const uint32 DISPID_IHTMLWINDOW2_OPEN = 13;
	public const uint32 DISPID_IHTMLWINDOW2_SELF = 20;
	public const uint32 DISPID_IHTMLWINDOW2_TOP = 21;
	public const uint32 DISPID_IHTMLWINDOW2_WINDOW = 22;
	public const uint32 DISPID_IHTMLWINDOW2_NAVIGATE = 25;
	public const uint32 DISPID_IHTMLWINDOW2_ONFOCUS = 71550;
	public const uint32 DISPID_IHTMLWINDOW2_ONBLUR = 71551;
	public const uint32 DISPID_IHTMLWINDOW2_ONLOAD = 71568;
	public const uint32 DISPID_IHTMLWINDOW2_ONBEFOREUNLOAD = 71575;
	public const uint32 DISPID_IHTMLWINDOW2_ONUNLOAD = 71569;
	public const uint32 DISPID_IHTMLWINDOW2_ONHELP = 71549;
	public const uint32 DISPID_IHTMLWINDOW2_ONERROR = 71565;
	public const uint32 DISPID_IHTMLWINDOW2_ONRESIZE = 71572;
	public const uint32 DISPID_IHTMLWINDOW2_ONSCROLL = 71567;
	public const uint32 DISPID_IHTMLWINDOW2_DOCUMENT = 1151;
	public const uint32 DISPID_IHTMLWINDOW2_EVENT = 1152;
	public const uint32 DISPID_IHTMLWINDOW2__NEWENUM = 1153;
	public const uint32 DISPID_IHTMLWINDOW2_SHOWMODALDIALOG = 1154;
	public const uint32 DISPID_IHTMLWINDOW2_SHOWHELP = 1155;
	public const uint32 DISPID_IHTMLWINDOW2_SCREEN = 1156;
	public const uint32 DISPID_IHTMLWINDOW2_OPTION = 1157;
	public const uint32 DISPID_IHTMLWINDOW2_FOCUS = 1158;
	public const uint32 DISPID_IHTMLWINDOW2_CLOSED = 23;
	public const uint32 DISPID_IHTMLWINDOW2_BLUR = 1159;
	public const uint32 DISPID_IHTMLWINDOW2_SCROLL = 1160;
	public const uint32 DISPID_IHTMLWINDOW2_CLIENTINFORMATION = 1161;
	public const uint32 DISPID_IHTMLWINDOW2_SETINTERVAL = 1173;
	public const uint32 DISPID_IHTMLWINDOW2_CLEARINTERVAL = 1163;
	public const uint32 DISPID_IHTMLWINDOW2_OFFSCREENBUFFERING = 1164;
	public const uint32 DISPID_IHTMLWINDOW2_EXECSCRIPT = 1165;
	public const uint32 DISPID_IHTMLWINDOW2_TOSTRING = 1166;
	public const uint32 DISPID_IHTMLWINDOW2_SCROLLBY = 1167;
	public const uint32 DISPID_IHTMLWINDOW2_SCROLLTO = 1168;
	public const uint32 DISPID_IHTMLWINDOW2_MOVETO = 6;
	public const uint32 DISPID_IHTMLWINDOW2_MOVEBY = 7;
	public const uint32 DISPID_IHTMLWINDOW2_RESIZETO = 9;
	public const uint32 DISPID_IHTMLWINDOW2_RESIZEBY = 8;
	public const uint32 DISPID_IHTMLWINDOW2_EXTERNAL = 1169;
	public const uint32 DISPID_IHTMLWINDOW3_SCREENLEFT = 1170;
	public const uint32 DISPID_IHTMLWINDOW3_SCREENTOP = 1171;
	public const uint32 DISPID_IHTMLWINDOW3_ATTACHEVENT = 66043;
	public const uint32 DISPID_IHTMLWINDOW3_DETACHEVENT = 66044;
	public const uint32 DISPID_IHTMLWINDOW3_SETTIMEOUT = 1103;
	public const uint32 DISPID_IHTMLWINDOW3_SETINTERVAL = 1162;
	public const uint32 DISPID_IHTMLWINDOW3_PRINT = 1174;
	public const uint32 DISPID_IHTMLWINDOW3_ONBEFOREPRINT = 71602;
	public const uint32 DISPID_IHTMLWINDOW3_ONAFTERPRINT = 71603;
	public const uint32 DISPID_IHTMLWINDOW3_CLIPBOARDDATA = 1175;
	public const uint32 DISPID_IHTMLWINDOW3_SHOWMODELESSDIALOG = 1176;
	public const uint32 DISPID_IHTMLWINDOW4_CREATEPOPUP = 1180;
	public const uint32 DISPID_IHTMLWINDOW4_FRAMEELEMENT = 1181;
	public const uint32 DISPID_IHTMLWINDOW5_XMLHTTPREQUEST = 1190;
	public const uint32 DISPID_IHTMLWINDOW6_XDOMAINREQUEST = 1191;
	public const uint32 DISPID_IHTMLWINDOW6_SESSIONSTORAGE = 1192;
	public const uint32 DISPID_IHTMLWINDOW6_LOCALSTORAGE = 1193;
	public const uint32 DISPID_IHTMLWINDOW6_ONHASHCHANGE = 71645;
	public const uint32 DISPID_IHTMLWINDOW6_MAXCONNECTIONSPERSERVER = 1194;
	public const uint32 DISPID_IHTMLWINDOW6_POSTMESSAGE = 1196;
	public const uint32 DISPID_IHTMLWINDOW6_TOSTATICHTML = 1197;
	public const uint32 DISPID_IHTMLWINDOW6_ONMESSAGE = 71646;
	public const uint32 DISPID_IHTMLWINDOW6_MSWRITEPROFILERMARK = 1198;
	public const uint32 DISPID_IHTMLWINDOW7_GETSELECTION = 1199;
	public const uint32 DISPID_IHTMLWINDOW7_GETCOMPUTEDSTYLE = 1200;
	public const uint32 DISPID_IHTMLWINDOW7_STYLEMEDIA = 1202;
	public const uint32 DISPID_IHTMLWINDOW7_PERFORMANCE = 1203;
	public const uint32 DISPID_IHTMLWINDOW7_INNERWIDTH = 1204;
	public const uint32 DISPID_IHTMLWINDOW7_INNERHEIGHT = 1205;
	public const uint32 DISPID_IHTMLWINDOW7_PAGEXOFFSET = 1206;
	public const uint32 DISPID_IHTMLWINDOW7_PAGEYOFFSET = 1207;
	public const uint32 DISPID_IHTMLWINDOW7_SCREENX = 1208;
	public const uint32 DISPID_IHTMLWINDOW7_SCREENY = 1209;
	public const uint32 DISPID_IHTMLWINDOW7_OUTERWIDTH = 1210;
	public const uint32 DISPID_IHTMLWINDOW7_OUTERHEIGHT = 1211;
	public const uint32 DISPID_IHTMLWINDOW7_ONABORT = 71564;
	public const uint32 DISPID_IHTMLWINDOW7_ONCANPLAY = 71670;
	public const uint32 DISPID_IHTMLWINDOW7_ONCANPLAYTHROUGH = 71671;
	public const uint32 DISPID_IHTMLWINDOW7_ONCHANGE = 71566;
	public const uint32 DISPID_IHTMLWINDOW7_ONCLICK = 71544;
	public const uint32 DISPID_IHTMLWINDOW7_ONCONTEXTMENU = 71601;
	public const uint32 DISPID_IHTMLWINDOW7_ONDBLCLICK = 71545;
	public const uint32 DISPID_IHTMLWINDOW7_ONDRAG = 71585;
	public const uint32 DISPID_IHTMLWINDOW7_ONDRAGEND = 71586;
	public const uint32 DISPID_IHTMLWINDOW7_ONDRAGENTER = 71587;
	public const uint32 DISPID_IHTMLWINDOW7_ONDRAGLEAVE = 71589;
	public const uint32 DISPID_IHTMLWINDOW7_ONDRAGOVER = 71588;
	public const uint32 DISPID_IHTMLWINDOW7_ONDRAGSTART = 71571;
	public const uint32 DISPID_IHTMLWINDOW7_ONDROP = 71590;
	public const uint32 DISPID_IHTMLWINDOW7_ONDURATIONCHANGE = 71672;
	public const uint32 DISPID_IHTMLWINDOW7_ONFOCUSIN = 71627;
	public const uint32 DISPID_IHTMLWINDOW7_ONFOCUSOUT = 71628;
	public const uint32 DISPID_IHTMLWINDOW7_ONINPUT = 71663;
	public const uint32 DISPID_IHTMLWINDOW7_ONEMPTIED = 71673;
	public const uint32 DISPID_IHTMLWINDOW7_ONENDED = 71674;
	public const uint32 DISPID_IHTMLWINDOW7_ONKEYDOWN = 71541;
	public const uint32 DISPID_IHTMLWINDOW7_ONKEYPRESS = 71543;
	public const uint32 DISPID_IHTMLWINDOW7_ONKEYUP = 71542;
	public const uint32 DISPID_IHTMLWINDOW7_ONLOADEDDATA = 71675;
	public const uint32 DISPID_IHTMLWINDOW7_ONLOADEDMETADATA = 71676;
	public const uint32 DISPID_IHTMLWINDOW7_ONLOADSTART = 71677;
	public const uint32 DISPID_IHTMLWINDOW7_ONMOUSEDOWN = 71538;
	public const uint32 DISPID_IHTMLWINDOW7_ONMOUSEENTER = 71621;
	public const uint32 DISPID_IHTMLWINDOW7_ONMOUSELEAVE = 71622;
	public const uint32 DISPID_IHTMLWINDOW7_ONMOUSEMOVE = 71540;
	public const uint32 DISPID_IHTMLWINDOW7_ONMOUSEOUT = 71537;
	public const uint32 DISPID_IHTMLWINDOW7_ONMOUSEOVER = 71536;
	public const uint32 DISPID_IHTMLWINDOW7_ONMOUSEUP = 71539;
	public const uint32 DISPID_IHTMLWINDOW7_ONMOUSEWHEEL = 71612;
	public const uint32 DISPID_IHTMLWINDOW7_ONOFFLINE = 71644;
	public const uint32 DISPID_IHTMLWINDOW7_ONONLINE = 71643;
	public const uint32 DISPID_IHTMLWINDOW7_ONPROGRESS = 71681;
	public const uint32 DISPID_IHTMLWINDOW7_ONRATECHANGE = 71682;
	public const uint32 DISPID_IHTMLWINDOW7_ONREADYSTATECHANGE = 71561;
	public const uint32 DISPID_IHTMLWINDOW7_ONRESET = 71548;
	public const uint32 DISPID_IHTMLWINDOW7_ONSEEKED = 71683;
	public const uint32 DISPID_IHTMLWINDOW7_ONSEEKING = 71684;
	public const uint32 DISPID_IHTMLWINDOW7_ONSELECT = 71546;
	public const uint32 DISPID_IHTMLWINDOW7_ONSTALLED = 71685;
	public const uint32 DISPID_IHTMLWINDOW7_ONSTORAGE = 71636;
	public const uint32 DISPID_IHTMLWINDOW7_ONSUBMIT = 71547;
	public const uint32 DISPID_IHTMLWINDOW7_ONSUSPEND = 71686;
	public const uint32 DISPID_IHTMLWINDOW7_ONTIMEUPDATE = 71687;
	public const uint32 DISPID_IHTMLWINDOW7_ONPAUSE = 71678;
	public const uint32 DISPID_IHTMLWINDOW7_ONPLAY = 71679;
	public const uint32 DISPID_IHTMLWINDOW7_ONPLAYING = 71680;
	public const uint32 DISPID_IHTMLWINDOW7_ONVOLUMECHANGE = 71688;
	public const uint32 DISPID_IHTMLWINDOW7_ONWAITING = 71689;
	public const uint32 DISPID_IHTMLWINDOW8_ONMSPOINTERDOWN = 71690;
	public const uint32 DISPID_IHTMLWINDOW8_ONMSPOINTERMOVE = 71691;
	public const uint32 DISPID_IHTMLWINDOW8_ONMSPOINTERUP = 71692;
	public const uint32 DISPID_IHTMLWINDOW8_ONMSPOINTEROVER = 71693;
	public const uint32 DISPID_IHTMLWINDOW8_ONMSPOINTEROUT = 71694;
	public const uint32 DISPID_IHTMLWINDOW8_ONMSPOINTERCANCEL = 71695;
	public const uint32 DISPID_IHTMLWINDOW8_ONMSPOINTERHOVER = 71696;
	public const uint32 DISPID_IHTMLWINDOW8_ONMSGESTURESTART = 71699;
	public const uint32 DISPID_IHTMLWINDOW8_ONMSGESTURECHANGE = 71700;
	public const uint32 DISPID_IHTMLWINDOW8_ONMSGESTUREEND = 71701;
	public const uint32 DISPID_IHTMLWINDOW8_ONMSGESTUREHOLD = 71702;
	public const uint32 DISPID_IHTMLWINDOW8_ONMSGESTURETAP = 71703;
	public const uint32 DISPID_IHTMLWINDOW8_ONMSGESTUREDOUBLETAP = 71704;
	public const uint32 DISPID_IHTMLWINDOW8_ONMSINERTIASTART = 71705;
	public const uint32 DISPID_IHTMLWINDOW8_APPLICATIONCACHE = 1213;
	public const uint32 DISPID_IHTMLWINDOW8_ONPOPSTATE = 71728;
	public const uint32 DISPID_HTMLWINDOWEVENTS3_ONHASHCHANGE = 1066;
	public const uint32 DISPID_HTMLWINDOWEVENTS3_ONMESSAGE = 1067;
	public const uint32 DISPID_HTMLWINDOWEVENTS2_ONLOAD = 1003;
	public const uint32 DISPID_HTMLWINDOWEVENTS2_ONUNLOAD = 1008;
	public const uint32 DISPID_HTMLWINDOWEVENTS2_ONHELP = 65546;
	public const uint32 DISPID_HTMLWINDOWEVENTS2_ONFOCUS = 65537;
	public const uint32 DISPID_HTMLWINDOWEVENTS2_ONERROR = 1002;
	public const uint32 DISPID_HTMLWINDOWEVENTS2_ONRESIZE = 1016;
	public const uint32 DISPID_HTMLWINDOWEVENTS2_ONSCROLL = 1014;
	public const uint32 DISPID_HTMLWINDOWEVENTS2_ONBEFOREUNLOAD = 1017;
	public const uint32 DISPID_HTMLWINDOWEVENTS2_ONBEFOREPRINT = 1024;
	public const uint32 DISPID_HTMLWINDOWEVENTS2_ONAFTERPRINT = 1025;
	public const uint32 DISPID_HTMLWINDOWEVENTS_ONLOAD = 1003;
	public const uint32 DISPID_HTMLWINDOWEVENTS_ONUNLOAD = 1008;
	public const uint32 DISPID_HTMLWINDOWEVENTS_ONHELP = 65546;
	public const uint32 DISPID_HTMLWINDOWEVENTS_ONFOCUS = 65537;
	public const uint32 DISPID_HTMLWINDOWEVENTS_ONERROR = 1002;
	public const uint32 DISPID_HTMLWINDOWEVENTS_ONRESIZE = 1016;
	public const uint32 DISPID_HTMLWINDOWEVENTS_ONSCROLL = 1014;
	public const uint32 DISPID_HTMLWINDOWEVENTS_ONBEFOREUNLOAD = 1017;
	public const uint32 DISPID_HTMLWINDOWEVENTS_ONBEFOREPRINT = 1024;
	public const uint32 DISPID_HTMLWINDOWEVENTS_ONAFTERPRINT = 1025;
	public const uint32 DISPID_IHTMLDOCUMENTCOMPATIBLEINFO_USERAGENT = 1001;
	public const uint32 DISPID_IHTMLDOCUMENTCOMPATIBLEINFO_VERSION = 1002;
	public const uint32 DISPID_IHTMLDOCUMENTCOMPATIBLEINFOCOLLECTION_LENGTH = 1001;
	public const uint32 DISPID_IHTMLDOCUMENTCOMPATIBLEINFOCOLLECTION_ITEM = 0;
	public const uint32 DISPID_IHTMLDOCUMENT_SCRIPT = 1001;
	public const uint32 DISPID_IHTMLDOCUMENT2_ALL = 1003;
	public const uint32 DISPID_IHTMLDOCUMENT2_BODY = 1004;
	public const uint32 DISPID_IHTMLDOCUMENT2_ACTIVEELEMENT = 1005;
	public const uint32 DISPID_IHTMLDOCUMENT2_IMAGES = 1011;
	public const uint32 DISPID_IHTMLDOCUMENT2_APPLETS = 1008;
	public const uint32 DISPID_IHTMLDOCUMENT2_LINKS = 1009;
	public const uint32 DISPID_IHTMLDOCUMENT2_FORMS = 1010;
	public const uint32 DISPID_IHTMLDOCUMENT2_ANCHORS = 1007;
	public const uint32 DISPID_IHTMLDOCUMENT2_TITLE = 1012;
	public const uint32 DISPID_IHTMLDOCUMENT2_SCRIPTS = 1013;
	public const uint32 DISPID_IHTMLDOCUMENT2_DESIGNMODE = 1014;
	public const uint32 DISPID_IHTMLDOCUMENT2_SELECTION = 1017;
	public const uint32 DISPID_IHTMLDOCUMENT2_READYSTATE = 1018;
	public const uint32 DISPID_IHTMLDOCUMENT2_FRAMES = 1019;
	public const uint32 DISPID_IHTMLDOCUMENT2_EMBEDS = 1015;
	public const uint32 DISPID_IHTMLDOCUMENT2_PLUGINS = 1021;
	public const uint32 DISPID_IHTMLDOCUMENT2_ALINKCOLOR = 1022;
	public const int32 DISPID_IHTMLDOCUMENT2_BGCOLOR = -501;
	public const uint32 DISPID_IHTMLDOCUMENT2_FGCOLOR = 70538;
	public const uint32 DISPID_IHTMLDOCUMENT2_LINKCOLOR = 1024;
	public const uint32 DISPID_IHTMLDOCUMENT2_VLINKCOLOR = 1023;
	public const uint32 DISPID_IHTMLDOCUMENT2_REFERRER = 1027;
	public const uint32 DISPID_IHTMLDOCUMENT2_LOCATION = 1026;
	public const uint32 DISPID_IHTMLDOCUMENT2_LASTMODIFIED = 1028;
	public const uint32 DISPID_IHTMLDOCUMENT2_URL = 1025;
	public const uint32 DISPID_IHTMLDOCUMENT2_DOMAIN = 1029;
	public const uint32 DISPID_IHTMLDOCUMENT2_COOKIE = 1030;
	public const uint32 DISPID_IHTMLDOCUMENT2_EXPANDO = 1031;
	public const uint32 DISPID_IHTMLDOCUMENT2_CHARSET = 1032;
	public const uint32 DISPID_IHTMLDOCUMENT2_DEFAULTCHARSET = 1033;
	public const uint32 DISPID_IHTMLDOCUMENT2_MIMETYPE = 1041;
	public const uint32 DISPID_IHTMLDOCUMENT2_FILESIZE = 1042;
	public const uint32 DISPID_IHTMLDOCUMENT2_FILECREATEDDATE = 1043;
	public const uint32 DISPID_IHTMLDOCUMENT2_FILEMODIFIEDDATE = 1044;
	public const uint32 DISPID_IHTMLDOCUMENT2_FILEUPDATEDDATE = 1045;
	public const uint32 DISPID_IHTMLDOCUMENT2_SECURITY = 1046;
	public const uint32 DISPID_IHTMLDOCUMENT2_PROTOCOL = 1047;
	public const uint32 DISPID_IHTMLDOCUMENT2_NAMEPROP = 1048;
	public const uint32 DISPID_IHTMLDOCUMENT2_WRITE = 1054;
	public const uint32 DISPID_IHTMLDOCUMENT2_WRITELN = 1055;
	public const uint32 DISPID_IHTMLDOCUMENT2_OPEN = 1056;
	public const uint32 DISPID_IHTMLDOCUMENT2_CLOSE = 1057;
	public const uint32 DISPID_IHTMLDOCUMENT2_CLEAR = 1058;
	public const uint32 DISPID_IHTMLDOCUMENT2_QUERYCOMMANDSUPPORTED = 1059;
	public const uint32 DISPID_IHTMLDOCUMENT2_QUERYCOMMANDENABLED = 1060;
	public const uint32 DISPID_IHTMLDOCUMENT2_QUERYCOMMANDSTATE = 1061;
	public const uint32 DISPID_IHTMLDOCUMENT2_QUERYCOMMANDINDETERM = 1062;
	public const uint32 DISPID_IHTMLDOCUMENT2_QUERYCOMMANDTEXT = 1063;
	public const uint32 DISPID_IHTMLDOCUMENT2_QUERYCOMMANDVALUE = 1064;
	public const uint32 DISPID_IHTMLDOCUMENT2_EXECCOMMAND = 1065;
	public const uint32 DISPID_IHTMLDOCUMENT2_EXECCOMMANDSHOWHELP = 1066;
	public const uint32 DISPID_IHTMLDOCUMENT2_CREATEELEMENT = 1067;
	public const uint32 DISPID_IHTMLDOCUMENT2_ONHELP = 71549;
	public const uint32 DISPID_IHTMLDOCUMENT2_ONCLICK = 71544;
	public const uint32 DISPID_IHTMLDOCUMENT2_ONDBLCLICK = 71545;
	public const uint32 DISPID_IHTMLDOCUMENT2_ONKEYUP = 71542;
	public const uint32 DISPID_IHTMLDOCUMENT2_ONKEYDOWN = 71541;
	public const uint32 DISPID_IHTMLDOCUMENT2_ONKEYPRESS = 71543;
	public const uint32 DISPID_IHTMLDOCUMENT2_ONMOUSEUP = 71539;
	public const uint32 DISPID_IHTMLDOCUMENT2_ONMOUSEDOWN = 71538;
	public const uint32 DISPID_IHTMLDOCUMENT2_ONMOUSEMOVE = 71540;
	public const uint32 DISPID_IHTMLDOCUMENT2_ONMOUSEOUT = 71537;
	public const uint32 DISPID_IHTMLDOCUMENT2_ONMOUSEOVER = 71536;
	public const uint32 DISPID_IHTMLDOCUMENT2_ONREADYSTATECHANGE = 71561;
	public const uint32 DISPID_IHTMLDOCUMENT2_ONAFTERUPDATE = 71558;
	public const uint32 DISPID_IHTMLDOCUMENT2_ONROWEXIT = 71554;
	public const uint32 DISPID_IHTMLDOCUMENT2_ONROWENTER = 71555;
	public const uint32 DISPID_IHTMLDOCUMENT2_ONDRAGSTART = 71571;
	public const uint32 DISPID_IHTMLDOCUMENT2_ONSELECTSTART = 71573;
	public const uint32 DISPID_IHTMLDOCUMENT2_ELEMENTFROMPOINT = 1068;
	public const uint32 DISPID_IHTMLDOCUMENT2_PARENTWINDOW = 1034;
	public const uint32 DISPID_IHTMLDOCUMENT2_STYLESHEETS = 1069;
	public const uint32 DISPID_IHTMLDOCUMENT2_ONBEFOREUPDATE = 71557;
	public const uint32 DISPID_IHTMLDOCUMENT2_ONERRORUPDATE = 71574;
	public const uint32 DISPID_IHTMLDOCUMENT2_TOSTRING = 1070;
	public const uint32 DISPID_IHTMLDOCUMENT2_CREATESTYLESHEET = 1071;
	public const uint32 DISPID_IHTMLDOCUMENT3_RELEASECAPTURE = 1072;
	public const uint32 DISPID_IHTMLDOCUMENT3_RECALC = 1073;
	public const uint32 DISPID_IHTMLDOCUMENT3_CREATETEXTNODE = 1074;
	public const uint32 DISPID_IHTMLDOCUMENT3_DOCUMENTELEMENT = 1075;
	public const uint32 DISPID_IHTMLDOCUMENT3_UNIQUEID = 1077;
	public const uint32 DISPID_IHTMLDOCUMENT3_ATTACHEVENT = 66043;
	public const uint32 DISPID_IHTMLDOCUMENT3_DETACHEVENT = 66044;
	public const uint32 DISPID_IHTMLDOCUMENT3_ONROWSDELETE = 71598;
	public const uint32 DISPID_IHTMLDOCUMENT3_ONROWSINSERTED = 71599;
	public const uint32 DISPID_IHTMLDOCUMENT3_ONCELLCHANGE = 71600;
	public const uint32 DISPID_IHTMLDOCUMENT3_ONDATASETCHANGED = 71576;
	public const uint32 DISPID_IHTMLDOCUMENT3_ONDATAAVAILABLE = 71577;
	public const uint32 DISPID_IHTMLDOCUMENT3_ONDATASETCOMPLETE = 71578;
	public const uint32 DISPID_IHTMLDOCUMENT3_ONPROPERTYCHANGE = 71583;
	public const uint32 DISPID_IHTMLDOCUMENT3_DIR = 70653;
	public const uint32 DISPID_IHTMLDOCUMENT3_ONCONTEXTMENU = 71601;
	public const uint32 DISPID_IHTMLDOCUMENT3_ONSTOP = 71604;
	public const uint32 DISPID_IHTMLDOCUMENT3_CREATEDOCUMENTFRAGMENT = 1076;
	public const uint32 DISPID_IHTMLDOCUMENT3_PARENTDOCUMENT = 1078;
	public const uint32 DISPID_IHTMLDOCUMENT3_ENABLEDOWNLOAD = 1079;
	public const uint32 DISPID_IHTMLDOCUMENT3_BASEURL = 1080;
	public const uint32 DISPID_IHTMLDOCUMENT3_CHILDNODES = 66585;
	public const uint32 DISPID_IHTMLDOCUMENT3_INHERITSTYLESHEETS = 1082;
	public const uint32 DISPID_IHTMLDOCUMENT3_ONBEFOREEDITFOCUS = 71605;
	public const uint32 DISPID_IHTMLDOCUMENT3_GETELEMENTSBYNAME = 1086;
	public const uint32 DISPID_IHTMLDOCUMENT3_GETELEMENTBYID = 1088;
	public const uint32 DISPID_IHTMLDOCUMENT3_GETELEMENTSBYTAGNAME = 1087;
	public const uint32 DISPID_IHTMLDOCUMENT4_FOCUS = 1089;
	public const uint32 DISPID_IHTMLDOCUMENT4_HASFOCUS = 1090;
	public const uint32 DISPID_IHTMLDOCUMENT4_ONSELECTIONCHANGE = 71616;
	public const uint32 DISPID_IHTMLDOCUMENT4_NAMESPACES = 1091;
	public const uint32 DISPID_IHTMLDOCUMENT4_CREATEDOCUMENTFROMURL = 1092;
	public const uint32 DISPID_IHTMLDOCUMENT4_MEDIA = 1093;
	public const uint32 DISPID_IHTMLDOCUMENT4_CREATEEVENTOBJECT = 1094;
	public const uint32 DISPID_IHTMLDOCUMENT4_FIREEVENT = 1095;
	public const uint32 DISPID_IHTMLDOCUMENT4_CREATERENDERSTYLE = 1096;
	public const uint32 DISPID_IHTMLDOCUMENT4_ONCONTROLSELECT = 71615;
	public const uint32 DISPID_IHTMLDOCUMENT4_URLUNENCODED = 1097;
	public const uint32 DISPID_IHTMLDOCUMENT5_ONMOUSEWHEEL = 71612;
	public const uint32 DISPID_IHTMLDOCUMENT5_DOCTYPE = 1098;
	public const uint32 DISPID_IHTMLDOCUMENT5_IMPLEMENTATION = 1099;
	public const uint32 DISPID_IHTMLDOCUMENT5_CREATEATTRIBUTE = 1100;
	public const uint32 DISPID_IHTMLDOCUMENT5_CREATECOMMENT = 1101;
	public const uint32 DISPID_IHTMLDOCUMENT5_ONFOCUSIN = 71627;
	public const uint32 DISPID_IHTMLDOCUMENT5_ONFOCUSOUT = 71628;
	public const uint32 DISPID_IHTMLDOCUMENT5_ONACTIVATE = 71623;
	public const uint32 DISPID_IHTMLDOCUMENT5_ONDEACTIVATE = 71624;
	public const uint32 DISPID_IHTMLDOCUMENT5_ONBEFOREACTIVATE = 71626;
	public const uint32 DISPID_IHTMLDOCUMENT5_ONBEFOREDEACTIVATE = 71613;
	public const uint32 DISPID_IHTMLDOCUMENT5_COMPATMODE = 1102;
	public const uint32 DISPID_IHTMLDOCUMENT6_COMPATIBLE = 1103;
	public const uint32 DISPID_IHTMLDOCUMENT6_DOCUMENTMODE = 1104;
	public const uint32 DISPID_IHTMLDOCUMENT6_ONSTORAGE = 71636;
	public const uint32 DISPID_IHTMLDOCUMENT6_ONSTORAGECOMMIT = 71637;
	public const uint32 DISPID_IHTMLDOCUMENT6_IE8_GETELEMENTBYID = 1107;
	public const uint32 DISPID_IHTMLDOCUMENT6_UPDATESETTINGS = 1109;
	public const uint32 DISPID_IHTMLDOCUMENT7_DEFAULTVIEW = 1110;
	public const uint32 DISPID_IHTMLDOCUMENT7_CREATECDATASECTION = 1123;
	public const uint32 DISPID_IHTMLDOCUMENT7_GETSELECTION = 1112;
	public const uint32 DISPID_IHTMLDOCUMENT7_GETELEMENTSBYTAGNAMENS = 1113;
	public const uint32 DISPID_IHTMLDOCUMENT7_CREATEELEMENTNS = 1114;
	public const uint32 DISPID_IHTMLDOCUMENT7_CREATEATTRIBUTENS = 1115;
	public const uint32 DISPID_IHTMLDOCUMENT7_ONMSTHUMBNAILCLICK = 71657;
	public const uint32 DISPID_IHTMLDOCUMENT7_CHARACTERSET = 1117;
	public const uint32 DISPID_IHTMLDOCUMENT7_IE9_CREATEELEMENT = 1118;
	public const uint32 DISPID_IHTMLDOCUMENT7_IE9_CREATEATTRIBUTE = 1119;
	public const uint32 DISPID_IHTMLDOCUMENT7_GETELEMENTSBYCLASSNAME = 1120;
	public const uint32 DISPID_IHTMLDOCUMENT7_CREATEPROCESSINGINSTRUCTION = 1124;
	public const uint32 DISPID_IHTMLDOCUMENT7_ADOPTNODE = 1125;
	public const uint32 DISPID_IHTMLDOCUMENT7_ONMSSITEMODEJUMPLISTITEMREMOVED = 71666;
	public const uint32 DISPID_IHTMLDOCUMENT7_IE9_ALL = 1126;
	public const uint32 DISPID_IHTMLDOCUMENT7_INPUTENCODING = 1127;
	public const uint32 DISPID_IHTMLDOCUMENT7_XMLENCODING = 1128;
	public const uint32 DISPID_IHTMLDOCUMENT7_XMLSTANDALONE = 1129;
	public const uint32 DISPID_IHTMLDOCUMENT7_XMLVERSION = 1130;
	public const uint32 DISPID_IHTMLDOCUMENT7_HASATTRIBUTES = 1132;
	public const uint32 DISPID_IHTMLDOCUMENT7_ONABORT = 71564;
	public const uint32 DISPID_IHTMLDOCUMENT7_ONBLUR = 71551;
	public const uint32 DISPID_IHTMLDOCUMENT7_ONCANPLAY = 71670;
	public const uint32 DISPID_IHTMLDOCUMENT7_ONCANPLAYTHROUGH = 71671;
	public const uint32 DISPID_IHTMLDOCUMENT7_ONCHANGE = 71566;
	public const uint32 DISPID_IHTMLDOCUMENT7_ONDRAG = 71585;
	public const uint32 DISPID_IHTMLDOCUMENT7_ONDRAGEND = 71586;
	public const uint32 DISPID_IHTMLDOCUMENT7_ONDRAGENTER = 71587;
	public const uint32 DISPID_IHTMLDOCUMENT7_ONDRAGLEAVE = 71589;
	public const uint32 DISPID_IHTMLDOCUMENT7_ONDRAGOVER = 71588;
	public const uint32 DISPID_IHTMLDOCUMENT7_ONDROP = 71590;
	public const uint32 DISPID_IHTMLDOCUMENT7_ONDURATIONCHANGE = 71672;
	public const uint32 DISPID_IHTMLDOCUMENT7_ONEMPTIED = 71673;
	public const uint32 DISPID_IHTMLDOCUMENT7_ONENDED = 71674;
	public const uint32 DISPID_IHTMLDOCUMENT7_ONERROR = 71565;
	public const uint32 DISPID_IHTMLDOCUMENT7_ONFOCUS = 71550;
	public const uint32 DISPID_IHTMLDOCUMENT7_ONINPUT = 71663;
	public const uint32 DISPID_IHTMLDOCUMENT7_ONLOAD = 71568;
	public const uint32 DISPID_IHTMLDOCUMENT7_ONLOADEDDATA = 71675;
	public const uint32 DISPID_IHTMLDOCUMENT7_ONLOADEDMETADATA = 71676;
	public const uint32 DISPID_IHTMLDOCUMENT7_ONLOADSTART = 71677;
	public const uint32 DISPID_IHTMLDOCUMENT7_ONPAUSE = 71678;
	public const uint32 DISPID_IHTMLDOCUMENT7_ONPLAY = 71679;
	public const uint32 DISPID_IHTMLDOCUMENT7_ONPLAYING = 71680;
	public const uint32 DISPID_IHTMLDOCUMENT7_ONPROGRESS = 71681;
	public const uint32 DISPID_IHTMLDOCUMENT7_ONRATECHANGE = 71682;
	public const uint32 DISPID_IHTMLDOCUMENT7_ONRESET = 71548;
	public const uint32 DISPID_IHTMLDOCUMENT7_ONSCROLL = 71567;
	public const uint32 DISPID_IHTMLDOCUMENT7_ONSEEKED = 71683;
	public const uint32 DISPID_IHTMLDOCUMENT7_ONSEEKING = 71684;
	public const uint32 DISPID_IHTMLDOCUMENT7_ONSELECT = 71546;
	public const uint32 DISPID_IHTMLDOCUMENT7_ONSTALLED = 71685;
	public const uint32 DISPID_IHTMLDOCUMENT7_ONSUBMIT = 71547;
	public const uint32 DISPID_IHTMLDOCUMENT7_ONSUSPEND = 71686;
	public const uint32 DISPID_IHTMLDOCUMENT7_ONTIMEUPDATE = 71687;
	public const uint32 DISPID_IHTMLDOCUMENT7_ONVOLUMECHANGE = 71688;
	public const uint32 DISPID_IHTMLDOCUMENT7_ONWAITING = 71689;
	public const uint32 DISPID_IHTMLDOCUMENT7_NORMALIZE = 1134;
	public const uint32 DISPID_IHTMLDOCUMENT7_IMPORTNODE = 1135;
	public const uint32 DISPID_IHTMLDOCUMENT7_IE9_PARENTWINDOW = 1136;
	public const uint32 DISPID_IHTMLDOCUMENT7_IE9_BODY = 1137;
	public const uint32 DISPID_IHTMLDOCUMENT7_HEAD = 1138;
	public const uint32 DISPID_IHTMLDOCUMENT8_ONMSCONTENTZOOM = 71708;
	public const uint32 DISPID_IHTMLDOCUMENT8_ONMSPOINTERDOWN = 71690;
	public const uint32 DISPID_IHTMLDOCUMENT8_ONMSPOINTERMOVE = 71691;
	public const uint32 DISPID_IHTMLDOCUMENT8_ONMSPOINTERUP = 71692;
	public const uint32 DISPID_IHTMLDOCUMENT8_ONMSPOINTEROVER = 71693;
	public const uint32 DISPID_IHTMLDOCUMENT8_ONMSPOINTEROUT = 71694;
	public const uint32 DISPID_IHTMLDOCUMENT8_ONMSPOINTERCANCEL = 71695;
	public const uint32 DISPID_IHTMLDOCUMENT8_ONMSPOINTERHOVER = 71696;
	public const uint32 DISPID_IHTMLDOCUMENT8_ONMSGESTURESTART = 71699;
	public const uint32 DISPID_IHTMLDOCUMENT8_ONMSGESTURECHANGE = 71700;
	public const uint32 DISPID_IHTMLDOCUMENT8_ONMSGESTUREEND = 71701;
	public const uint32 DISPID_IHTMLDOCUMENT8_ONMSGESTUREHOLD = 71702;
	public const uint32 DISPID_IHTMLDOCUMENT8_ONMSGESTURETAP = 71703;
	public const uint32 DISPID_IHTMLDOCUMENT8_ONMSGESTUREDOUBLETAP = 71704;
	public const uint32 DISPID_IHTMLDOCUMENT8_ONMSINERTIASTART = 71705;
	public const uint32 DISPID_IHTMLDOCUMENT8_ELEMENTSFROMPOINT = 1139;
	public const uint32 DISPID_IHTMLDOCUMENT8_ELEMENTSFROMRECT = 1140;
	public const uint32 DISPID_IHTMLDOCUMENT8_ONMSMANIPULATIONSTATECHANGED = 71714;
	public const uint32 DISPID_IHTMLDOCUMENT8_MSCAPSLOCKWARNINGOFF = 1141;
	public const uint32 DISPID_IDOCUMENTEVENT_CREATEEVENT = 1108;
	public const uint32 DISPID_IDOCUMENTRANGE_CREATERANGE = 1111;
	public const uint32 DISPID_IDOCUMENTSELECTOR_QUERYSELECTOR = 1105;
	public const uint32 DISPID_IDOCUMENTSELECTOR_QUERYSELECTORALL = 1106;
	public const uint32 DISPID_IDOCUMENTTRAVERSAL_CREATENODEITERATOR = 1121;
	public const uint32 DISPID_IDOCUMENTTRAVERSAL_CREATETREEWALKER = 1122;
	public const uint32 DISPID_HTMLDOCUMENTEVENTS4_ONMSTHUMBNAILCLICK = 71657;
	public const uint32 DISPID_HTMLDOCUMENTEVENTS4_ONMSSITEMODEJUMPLISTITEMREMOVED = 71666;
	public const uint32 DISPID_HTMLDOCUMENTEVENTS3_ONSTORAGE = 1057;
	public const uint32 DISPID_HTMLDOCUMENTEVENTS3_ONSTORAGECOMMIT = 1058;
	public const uint32 DISPID_HTMLDOCUMENTEVENTS2_ONHELP = 65546;
	public const int32 DISPID_HTMLDOCUMENTEVENTS2_ONCLICK = -600;
	public const int32 DISPID_HTMLDOCUMENTEVENTS2_ONDBLCLICK = -601;
	public const int32 DISPID_HTMLDOCUMENTEVENTS2_ONKEYDOWN = -602;
	public const int32 DISPID_HTMLDOCUMENTEVENTS2_ONKEYUP = -604;
	public const int32 DISPID_HTMLDOCUMENTEVENTS2_ONKEYPRESS = -603;
	public const int32 DISPID_HTMLDOCUMENTEVENTS2_ONMOUSEDOWN = -605;
	public const int32 DISPID_HTMLDOCUMENTEVENTS2_ONMOUSEMOVE = -606;
	public const int32 DISPID_HTMLDOCUMENTEVENTS2_ONMOUSEUP = -607;
	public const uint32 DISPID_HTMLDOCUMENTEVENTS2_ONMOUSEOUT = 65545;
	public const uint32 DISPID_HTMLDOCUMENTEVENTS2_ONMOUSEOVER = 65544;
	public const int32 DISPID_HTMLDOCUMENTEVENTS2_ONREADYSTATECHANGE = -609;
	public const uint32 DISPID_HTMLDOCUMENTEVENTS2_ONBEFOREUPDATE = 65540;
	public const uint32 DISPID_HTMLDOCUMENTEVENTS2_ONAFTERUPDATE = 65541;
	public const uint32 DISPID_HTMLDOCUMENTEVENTS2_ONROWEXIT = 65542;
	public const uint32 DISPID_HTMLDOCUMENTEVENTS2_ONROWENTER = 65543;
	public const uint32 DISPID_HTMLDOCUMENTEVENTS2_ONDRAGSTART = 65547;
	public const uint32 DISPID_HTMLDOCUMENTEVENTS2_ONSELECTSTART = 65548;
	public const uint32 DISPID_HTMLDOCUMENTEVENTS2_ONERRORUPDATE = 65549;
	public const uint32 DISPID_HTMLDOCUMENTEVENTS2_ONCONTEXTMENU = 1023;
	public const uint32 DISPID_HTMLDOCUMENTEVENTS2_ONSTOP = 1026;
	public const uint32 DISPID_HTMLDOCUMENTEVENTS2_ONROWSDELETE = 65568;
	public const uint32 DISPID_HTMLDOCUMENTEVENTS2_ONROWSINSERTED = 65569;
	public const uint32 DISPID_HTMLDOCUMENTEVENTS2_ONCELLCHANGE = 65570;
	public const uint32 DISPID_HTMLDOCUMENTEVENTS2_ONPROPERTYCHANGE = 65555;
	public const uint32 DISPID_HTMLDOCUMENTEVENTS2_ONDATASETCHANGED = 65550;
	public const uint32 DISPID_HTMLDOCUMENTEVENTS2_ONDATAAVAILABLE = 65551;
	public const uint32 DISPID_HTMLDOCUMENTEVENTS2_ONDATASETCOMPLETE = 65552;
	public const uint32 DISPID_HTMLDOCUMENTEVENTS2_ONBEFOREEDITFOCUS = 1027;
	public const uint32 DISPID_HTMLDOCUMENTEVENTS2_ONSELECTIONCHANGE = 1037;
	public const uint32 DISPID_HTMLDOCUMENTEVENTS2_ONCONTROLSELECT = 1036;
	public const uint32 DISPID_HTMLDOCUMENTEVENTS2_ONMOUSEWHEEL = 1033;
	public const uint32 DISPID_HTMLDOCUMENTEVENTS2_ONFOCUSIN = 1048;
	public const uint32 DISPID_HTMLDOCUMENTEVENTS2_ONFOCUSOUT = 1049;
	public const uint32 DISPID_HTMLDOCUMENTEVENTS2_ONACTIVATE = 1044;
	public const uint32 DISPID_HTMLDOCUMENTEVENTS2_ONDEACTIVATE = 1045;
	public const uint32 DISPID_HTMLDOCUMENTEVENTS2_ONBEFOREACTIVATE = 1047;
	public const uint32 DISPID_HTMLDOCUMENTEVENTS2_ONBEFOREDEACTIVATE = 1034;
	public const uint32 DISPID_HTMLDOCUMENTEVENTS_ONHELP = 65546;
	public const int32 DISPID_HTMLDOCUMENTEVENTS_ONCLICK = -600;
	public const int32 DISPID_HTMLDOCUMENTEVENTS_ONDBLCLICK = -601;
	public const int32 DISPID_HTMLDOCUMENTEVENTS_ONKEYDOWN = -602;
	public const int32 DISPID_HTMLDOCUMENTEVENTS_ONKEYUP = -604;
	public const int32 DISPID_HTMLDOCUMENTEVENTS_ONKEYPRESS = -603;
	public const int32 DISPID_HTMLDOCUMENTEVENTS_ONMOUSEDOWN = -605;
	public const int32 DISPID_HTMLDOCUMENTEVENTS_ONMOUSEMOVE = -606;
	public const int32 DISPID_HTMLDOCUMENTEVENTS_ONMOUSEUP = -607;
	public const uint32 DISPID_HTMLDOCUMENTEVENTS_ONMOUSEOUT = 65545;
	public const uint32 DISPID_HTMLDOCUMENTEVENTS_ONMOUSEOVER = 65544;
	public const int32 DISPID_HTMLDOCUMENTEVENTS_ONREADYSTATECHANGE = -609;
	public const uint32 DISPID_HTMLDOCUMENTEVENTS_ONBEFOREUPDATE = 65540;
	public const uint32 DISPID_HTMLDOCUMENTEVENTS_ONAFTERUPDATE = 65541;
	public const uint32 DISPID_HTMLDOCUMENTEVENTS_ONROWEXIT = 65542;
	public const uint32 DISPID_HTMLDOCUMENTEVENTS_ONROWENTER = 65543;
	public const uint32 DISPID_HTMLDOCUMENTEVENTS_ONDRAGSTART = 65547;
	public const uint32 DISPID_HTMLDOCUMENTEVENTS_ONSELECTSTART = 65548;
	public const uint32 DISPID_HTMLDOCUMENTEVENTS_ONERRORUPDATE = 65549;
	public const uint32 DISPID_HTMLDOCUMENTEVENTS_ONCONTEXTMENU = 1023;
	public const uint32 DISPID_HTMLDOCUMENTEVENTS_ONSTOP = 1026;
	public const uint32 DISPID_HTMLDOCUMENTEVENTS_ONROWSDELETE = 65568;
	public const uint32 DISPID_HTMLDOCUMENTEVENTS_ONROWSINSERTED = 65569;
	public const uint32 DISPID_HTMLDOCUMENTEVENTS_ONCELLCHANGE = 65570;
	public const uint32 DISPID_HTMLDOCUMENTEVENTS_ONPROPERTYCHANGE = 65555;
	public const uint32 DISPID_HTMLDOCUMENTEVENTS_ONDATASETCHANGED = 65550;
	public const uint32 DISPID_HTMLDOCUMENTEVENTS_ONDATAAVAILABLE = 65551;
	public const uint32 DISPID_HTMLDOCUMENTEVENTS_ONDATASETCOMPLETE = 65552;
	public const uint32 DISPID_HTMLDOCUMENTEVENTS_ONBEFOREEDITFOCUS = 1027;
	public const uint32 DISPID_HTMLDOCUMENTEVENTS_ONSELECTIONCHANGE = 1037;
	public const uint32 DISPID_HTMLDOCUMENTEVENTS_ONCONTROLSELECT = 1036;
	public const uint32 DISPID_HTMLDOCUMENTEVENTS_ONMOUSEWHEEL = 1033;
	public const uint32 DISPID_HTMLDOCUMENTEVENTS_ONFOCUSIN = 1048;
	public const uint32 DISPID_HTMLDOCUMENTEVENTS_ONFOCUSOUT = 1049;
	public const uint32 DISPID_HTMLDOCUMENTEVENTS_ONACTIVATE = 1044;
	public const uint32 DISPID_HTMLDOCUMENTEVENTS_ONDEACTIVATE = 1045;
	public const uint32 DISPID_HTMLDOCUMENTEVENTS_ONBEFOREACTIVATE = 1047;
	public const uint32 DISPID_HTMLDOCUMENTEVENTS_ONBEFOREDEACTIVATE = 1034;
	public const uint32 DISPID_IWEBBRIDGE_URL = 1;
	public const uint32 DISPID_IWEBBRIDGE_SCROLLBAR = 2;
	public const uint32 DISPID_IWEBBRIDGE_EMBED = 3;
	public const uint32 DISPID_IWEBBRIDGE_EVENT = 1152;
	public const int32 DISPID_IWEBBRIDGE_READYSTATE = -525;
	public const int32 DISPID_IWEBBRIDGE_ABOUTBOX = -552;
	public const uint32 DISPID_IWBSCRIPTCONTROL_RAISEEVENT = 1;
	public const uint32 DISPID_IWBSCRIPTCONTROL_BUBBLEEVENT = 2;
	public const uint32 DISPID_IWBSCRIPTCONTROL_SETCONTEXTMENU = 3;
	public const uint32 DISPID_IWBSCRIPTCONTROL_SELECTABLECONTENT = 4;
	public const uint32 DISPID_IWBSCRIPTCONTROL_FROZEN = 5;
	public const uint32 DISPID_IWBSCRIPTCONTROL_SCROLLBAR = 7;
	public const uint32 DISPID_IWBSCRIPTCONTROL_VERSION = 8;
	public const uint32 DISPID_IWBSCRIPTCONTROL_VISIBILITY = 9;
	public const uint32 DISPID_IWBSCRIPTCONTROL_ONVISIBILITYCHANGE = 10;
	public const uint32 DISPID_DWEBBRIDGEEVENTS_ONSCRIPTLETEVENT = 1;
	public const int32 DISPID_DWEBBRIDGEEVENTS_ONREADYSTATECHANGE = -609;
	public const int32 DISPID_DWEBBRIDGEEVENTS_ONCLICK = -600;
	public const int32 DISPID_DWEBBRIDGEEVENTS_ONDBLCLICK = -601;
	public const int32 DISPID_DWEBBRIDGEEVENTS_ONKEYDOWN = -602;
	public const int32 DISPID_DWEBBRIDGEEVENTS_ONKEYUP = -604;
	public const int32 DISPID_DWEBBRIDGEEVENTS_ONKEYPRESS = -603;
	public const int32 DISPID_DWEBBRIDGEEVENTS_ONMOUSEDOWN = -605;
	public const int32 DISPID_DWEBBRIDGEEVENTS_ONMOUSEMOVE = -606;
	public const int32 DISPID_DWEBBRIDGEEVENTS_ONMOUSEUP = -607;
	public const uint32 DISPID_IHTMLEMBEDELEMENT_HIDDEN = 68546;
	public const uint32 DISPID_IHTMLEMBEDELEMENT_PALETTE = 68540;
	public const uint32 DISPID_IHTMLEMBEDELEMENT_PLUGINSPAGE = 68541;
	public const uint32 DISPID_IHTMLEMBEDELEMENT_SRC = 68542;
	public const uint32 DISPID_IHTMLEMBEDELEMENT_UNITS = 68544;
	public const uint32 DISPID_IHTMLEMBEDELEMENT_NAME = 65536;
	public const uint32 DISPID_IHTMLEMBEDELEMENT_WIDTH = 65541;
	public const uint32 DISPID_IHTMLEMBEDELEMENT_HEIGHT = 65542;
	public const uint32 DISPID_IHTMLEMBEDELEMENT2_IE8_SRC = 1150;
	public const uint32 DISPID_IHTMLEMBEDELEMENT2_IE8_PLUGINSPAGE = 1151;
	public const uint32 DISPID_IHTMLAREASCOLLECTION_LENGTH = 1500;
	public const int32 DISPID_IHTMLAREASCOLLECTION__NEWENUM = -4;
	public const uint32 DISPID_IHTMLAREASCOLLECTION_ITEM = 0;
	public const uint32 DISPID_IHTMLAREASCOLLECTION_TAGS = 1502;
	public const uint32 DISPID_IHTMLAREASCOLLECTION_ADD = 1503;
	public const uint32 DISPID_IHTMLAREASCOLLECTION_REMOVE = 1504;
	public const uint32 DISPID_IHTMLAREASCOLLECTION2_URNS = 1505;
	public const uint32 DISPID_IHTMLAREASCOLLECTION3_NAMEDITEM = 1506;
	public const uint32 DISPID_IHTMLAREASCOLLECTION4_IE8_LENGTH = 1150;
	public const uint32 DISPID_IHTMLAREASCOLLECTION4_IE8_ITEM = 1152;
	public const uint32 DISPID_IHTMLAREASCOLLECTION4_IE8_NAMEDITEM = 1153;
	public const uint32 DISPID_IHTMLMAPELEMENT_AREAS = 1002;
	public const uint32 DISPID_IHTMLMAPELEMENT_NAME = 65536;
	public const uint32 DISPID_IHTMLAREAELEMENT_SHAPE = 1001;
	public const uint32 DISPID_IHTMLAREAELEMENT_COORDS = 1002;
	public const uint32 DISPID_IHTMLAREAELEMENT_HREF = 0;
	public const uint32 DISPID_IHTMLAREAELEMENT_TARGET = 1004;
	public const uint32 DISPID_IHTMLAREAELEMENT_ALT = 1005;
	public const uint32 DISPID_IHTMLAREAELEMENT_NOHREF = 1006;
	public const uint32 DISPID_IHTMLAREAELEMENT_HOST = 1007;
	public const uint32 DISPID_IHTMLAREAELEMENT_HOSTNAME = 1008;
	public const uint32 DISPID_IHTMLAREAELEMENT_PATHNAME = 1009;
	public const uint32 DISPID_IHTMLAREAELEMENT_PORT = 1010;
	public const uint32 DISPID_IHTMLAREAELEMENT_PROTOCOL = 1011;
	public const uint32 DISPID_IHTMLAREAELEMENT_SEARCH = 1012;
	public const uint32 DISPID_IHTMLAREAELEMENT_HASH = 1013;
	public const uint32 DISPID_IHTMLAREAELEMENT_ONBLUR = 71551;
	public const uint32 DISPID_IHTMLAREAELEMENT_ONFOCUS = 71550;
	public const uint32 DISPID_IHTMLAREAELEMENT_TABINDEX = 65551;
	public const uint32 DISPID_IHTMLAREAELEMENT_FOCUS = 67536;
	public const uint32 DISPID_IHTMLAREAELEMENT_BLUR = 67538;
	public const uint32 DISPID_IHTMLAREAELEMENT2_IE8_SHAPE = 1151;
	public const uint32 DISPID_IHTMLAREAELEMENT2_IE8_COORDS = 1152;
	public const uint32 DISPID_IHTMLAREAELEMENT2_IE8_HREF = 1153;
	public const uint32 DISPID_IHTMLTABLECAPTION_ALIGN = 65608;
	public const uint32 DISPID_IHTMLTABLECAPTION_VALIGN = 70567;
	public const uint32 DISPID_IHTMLCOMMENTELEMENT_TEXT = 1001;
	public const uint32 DISPID_IHTMLCOMMENTELEMENT_ATOMIC = 1002;
	public const uint32 DISPID_IHTMLCOMMENTELEMENT2_DATA = 1003;
	public const uint32 DISPID_IHTMLCOMMENTELEMENT2_LENGTH = 1004;
	public const uint32 DISPID_IHTMLCOMMENTELEMENT2_SUBSTRINGDATA = 1005;
	public const uint32 DISPID_IHTMLCOMMENTELEMENT2_APPENDDATA = 1006;
	public const uint32 DISPID_IHTMLCOMMENTELEMENT2_INSERTDATA = 1007;
	public const uint32 DISPID_IHTMLCOMMENTELEMENT2_DELETEDATA = 1008;
	public const uint32 DISPID_IHTMLCOMMENTELEMENT2_REPLACEDATA = 1009;
	public const uint32 DISPID_IHTMLCOMMENTELEMENT3_IE9_SUBSTRINGDATA = 1010;
	public const uint32 DISPID_IHTMLCOMMENTELEMENT3_IE9_INSERTDATA = 1011;
	public const uint32 DISPID_IHTMLCOMMENTELEMENT3_IE9_DELETEDATA = 1012;
	public const uint32 DISPID_IHTMLCOMMENTELEMENT3_IE9_REPLACEDATA = 1013;
	public const uint32 DISPID_IHTMLPHRASEELEMENT2_CITE = 1001;
	public const uint32 DISPID_IHTMLPHRASEELEMENT2_DATETIME = 1002;
	public const uint32 DISPID_IHTMLPHRASEELEMENT3_IE8_CITE = 1150;
	public const uint32 DISPID_IHTMLTABLE_COLS = 1001;
	public const uint32 DISPID_IHTMLTABLE_BORDER = 1002;
	public const uint32 DISPID_IHTMLTABLE_FRAME = 1004;
	public const uint32 DISPID_IHTMLTABLE_RULES = 1003;
	public const uint32 DISPID_IHTMLTABLE_CELLSPACING = 1005;
	public const uint32 DISPID_IHTMLTABLE_CELLPADDING = 1006;
	public const uint32 DISPID_IHTMLTABLE_BACKGROUND = 70537;
	public const int32 DISPID_IHTMLTABLE_BGCOLOR = -501;
	public const uint32 DISPID_IHTMLTABLE_BORDERCOLOR = 70564;
	public const uint32 DISPID_IHTMLTABLE_BORDERCOLORLIGHT = 70565;
	public const uint32 DISPID_IHTMLTABLE_BORDERCOLORDARK = 70566;
	public const uint32 DISPID_IHTMLTABLE_ALIGN = 65609;
	public const uint32 DISPID_IHTMLTABLE_REFRESH = 1015;
	public const uint32 DISPID_IHTMLTABLE_ROWS = 1016;
	public const uint32 DISPID_IHTMLTABLE_WIDTH = 65541;
	public const uint32 DISPID_IHTMLTABLE_HEIGHT = 65542;
	public const uint32 DISPID_IHTMLTABLE_DATAPAGESIZE = 1017;
	public const uint32 DISPID_IHTMLTABLE_NEXTPAGE = 1018;
	public const uint32 DISPID_IHTMLTABLE_PREVIOUSPAGE = 1019;
	public const uint32 DISPID_IHTMLTABLE_THEAD = 1020;
	public const uint32 DISPID_IHTMLTABLE_TFOOT = 1021;
	public const uint32 DISPID_IHTMLTABLE_TBODIES = 1024;
	public const uint32 DISPID_IHTMLTABLE_CAPTION = 1025;
	public const uint32 DISPID_IHTMLTABLE_CREATETHEAD = 1026;
	public const uint32 DISPID_IHTMLTABLE_DELETETHEAD = 1027;
	public const uint32 DISPID_IHTMLTABLE_CREATETFOOT = 1028;
	public const uint32 DISPID_IHTMLTABLE_DELETETFOOT = 1029;
	public const uint32 DISPID_IHTMLTABLE_CREATECAPTION = 1030;
	public const uint32 DISPID_IHTMLTABLE_DELETECAPTION = 1031;
	public const uint32 DISPID_IHTMLTABLE_INSERTROW = 1032;
	public const uint32 DISPID_IHTMLTABLE_DELETEROW = 1033;
	public const uint32 DISPID_IHTMLTABLE_READYSTATE = 70652;
	public const uint32 DISPID_IHTMLTABLE_ONREADYSTATECHANGE = 71561;
	public const uint32 DISPID_IHTMLTABLE2_FIRSTPAGE = 1035;
	public const uint32 DISPID_IHTMLTABLE2_LASTPAGE = 1036;
	public const uint32 DISPID_IHTMLTABLE2_CELLS = 1037;
	public const uint32 DISPID_IHTMLTABLE2_MOVEROW = 1038;
	public const uint32 DISPID_IHTMLTABLE3_SUMMARY = 1039;
	public const uint32 DISPID_IHTMLTABLE4_IE9_THEAD = 1040;
	public const uint32 DISPID_IHTMLTABLE4_IE9_TFOOT = 1041;
	public const uint32 DISPID_IHTMLTABLE4_IE9_CAPTION = 1042;
	public const uint32 DISPID_IHTMLTABLE4_IE9_INSERTROW = 1043;
	public const uint32 DISPID_IHTMLTABLE4_IE9_DELETEROW = 1044;
	public const uint32 DISPID_IHTMLTABLE4_CREATETBODY = 1045;
	public const uint32 DISPID_IHTMLTABLECOL_SPAN = 1001;
	public const uint32 DISPID_IHTMLTABLECOL_WIDTH = 65541;
	public const uint32 DISPID_IHTMLTABLECOL_ALIGN = 65608;
	public const uint32 DISPID_IHTMLTABLECOL_VALIGN = 70567;
	public const uint32 DISPID_IHTMLTABLECOL2_CH = 1002;
	public const uint32 DISPID_IHTMLTABLECOL2_CHOFF = 1003;
	public const uint32 DISPID_IHTMLTABLECOL3_IE9_CH = 1004;
	public const uint32 DISPID_IHTMLTABLECOL3_IE9_CHOFF = 1005;
	public const uint32 DISPID_IHTMLTABLESECTION_ALIGN = 65608;
	public const uint32 DISPID_IHTMLTABLESECTION_VALIGN = 70567;
	public const int32 DISPID_IHTMLTABLESECTION_BGCOLOR = -501;
	public const uint32 DISPID_IHTMLTABLESECTION_ROWS = 1000;
	public const uint32 DISPID_IHTMLTABLESECTION_INSERTROW = 1001;
	public const uint32 DISPID_IHTMLTABLESECTION_DELETEROW = 1002;
	public const uint32 DISPID_IHTMLTABLESECTION2_MOVEROW = 1003;
	public const uint32 DISPID_IHTMLTABLESECTION3_CH = 1004;
	public const uint32 DISPID_IHTMLTABLESECTION3_CHOFF = 1005;
	public const uint32 DISPID_IHTMLTABLESECTION4_IE9_CH = 1006;
	public const uint32 DISPID_IHTMLTABLESECTION4_IE9_CHOFF = 1007;
	public const uint32 DISPID_IHTMLTABLESECTION4_IE9_INSERTROW = 1008;
	public const uint32 DISPID_IHTMLTABLESECTION4_IE9_DELETEROW = 1009;
	public const uint32 DISPID_IHTMLTABLEROW_ALIGN = 65608;
	public const uint32 DISPID_IHTMLTABLEROW_VALIGN = 70567;
	public const int32 DISPID_IHTMLTABLEROW_BGCOLOR = -501;
	public const uint32 DISPID_IHTMLTABLEROW_BORDERCOLOR = 70564;
	public const uint32 DISPID_IHTMLTABLEROW_BORDERCOLORLIGHT = 70565;
	public const uint32 DISPID_IHTMLTABLEROW_BORDERCOLORDARK = 70566;
	public const uint32 DISPID_IHTMLTABLEROW_ROWINDEX = 1000;
	public const uint32 DISPID_IHTMLTABLEROW_SECTIONROWINDEX = 1001;
	public const uint32 DISPID_IHTMLTABLEROW_CELLS = 1002;
	public const uint32 DISPID_IHTMLTABLEROW_INSERTCELL = 1003;
	public const uint32 DISPID_IHTMLTABLEROW_DELETECELL = 1004;
	public const uint32 DISPID_IHTMLTABLEROW2_HEIGHT = 65542;
	public const uint32 DISPID_IHTMLTABLEROW3_CH = 1009;
	public const uint32 DISPID_IHTMLTABLEROW3_CHOFF = 1010;
	public const uint32 DISPID_IHTMLTABLEROW4_IE9_CH = 1011;
	public const uint32 DISPID_IHTMLTABLEROW4_IE9_CHOFF = 1012;
	public const uint32 DISPID_IHTMLTABLEROW4_IE9_INSERTCELL = 1013;
	public const uint32 DISPID_IHTMLTABLEROW4_IE9_DELETECELL = 1014;
	public const uint32 DISPID_IHTMLTABLEROWMETRICS_CLIENTHEIGHT = 67555;
	public const uint32 DISPID_IHTMLTABLEROWMETRICS_CLIENTWIDTH = 67556;
	public const uint32 DISPID_IHTMLTABLEROWMETRICS_CLIENTTOP = 67557;
	public const uint32 DISPID_IHTMLTABLEROWMETRICS_CLIENTLEFT = 67558;
	public const uint32 DISPID_IHTMLTABLECELL_ROWSPAN = 2001;
	public const uint32 DISPID_IHTMLTABLECELL_COLSPAN = 2002;
	public const uint32 DISPID_IHTMLTABLECELL_ALIGN = 65608;
	public const uint32 DISPID_IHTMLTABLECELL_VALIGN = 70567;
	public const int32 DISPID_IHTMLTABLECELL_BGCOLOR = -501;
	public const uint32 DISPID_IHTMLTABLECELL_NOWRAP = 70541;
	public const uint32 DISPID_IHTMLTABLECELL_BACKGROUND = 70537;
	public const uint32 DISPID_IHTMLTABLECELL_BORDERCOLOR = 70564;
	public const uint32 DISPID_IHTMLTABLECELL_BORDERCOLORLIGHT = 70565;
	public const uint32 DISPID_IHTMLTABLECELL_BORDERCOLORDARK = 70566;
	public const uint32 DISPID_IHTMLTABLECELL_WIDTH = 65541;
	public const uint32 DISPID_IHTMLTABLECELL_HEIGHT = 65542;
	public const uint32 DISPID_IHTMLTABLECELL_CELLINDEX = 2003;
	public const uint32 DISPID_IHTMLTABLECELL2_ABBR = 2004;
	public const uint32 DISPID_IHTMLTABLECELL2_AXIS = 2005;
	public const uint32 DISPID_IHTMLTABLECELL2_CH = 2006;
	public const uint32 DISPID_IHTMLTABLECELL2_CHOFF = 2007;
	public const uint32 DISPID_IHTMLTABLECELL2_HEADERS = 2008;
	public const uint32 DISPID_IHTMLTABLECELL2_SCOPE = 2009;
	public const uint32 DISPID_IHTMLTABLECELL3_IE9_CH = 2010;
	public const uint32 DISPID_IHTMLTABLECELL3_IE9_CHOFF = 2011;
	public const uint32 DISPID_IHTMLSCRIPTELEMENT_SRC = 1001;
	public const uint32 DISPID_IHTMLSCRIPTELEMENT_HTMLFOR = 1004;
	public const uint32 DISPID_IHTMLSCRIPTELEMENT_EVENT = 1005;
	public const uint32 DISPID_IHTMLSCRIPTELEMENT_TEXT = 1006;
	public const uint32 DISPID_IHTMLSCRIPTELEMENT_DEFER = 1007;
	public const uint32 DISPID_IHTMLSCRIPTELEMENT_READYSTATE = 70652;
	public const uint32 DISPID_IHTMLSCRIPTELEMENT_ONERROR = 71565;
	public const uint32 DISPID_IHTMLSCRIPTELEMENT_TYPE = 1009;
	public const uint32 DISPID_IHTMLSCRIPTELEMENT2_CHARSET = 1010;
	public const uint32 DISPID_IHTMLSCRIPTELEMENT3_IE8_SRC = 1150;
	public const uint32 DISPID_IHTMLSCRIPTELEMENT4_USEDCHARSET = 1011;
	public const uint32 DISPID_HTMLSCRIPTEVENTS2_ONERROR = 1002;
	public const uint32 DISPID_HTMLSCRIPTEVENTS_ONERROR = 1002;
	public const uint32 DISPID_IHTMLOBJECTELEMENT_OBJECT = 68537;
	public const uint32 DISPID_IHTMLOBJECTELEMENT_CLASSID = 68538;
	public const uint32 DISPID_IHTMLOBJECTELEMENT_DATA = 68539;
	public const uint32 DISPID_IHTMLOBJECTELEMENT_RECORDSET = 68541;
	public const uint32 DISPID_IHTMLOBJECTELEMENT_ALIGN = 65609;
	public const uint32 DISPID_IHTMLOBJECTELEMENT_NAME = 65536;
	public const uint32 DISPID_IHTMLOBJECTELEMENT_CODEBASE = 68542;
	public const uint32 DISPID_IHTMLOBJECTELEMENT_CODETYPE = 68543;
	public const uint32 DISPID_IHTMLOBJECTELEMENT_CODE = 68544;
	public const uint32 DISPID_IHTMLOBJECTELEMENT_BASEHREF = 65538;
	public const uint32 DISPID_IHTMLOBJECTELEMENT_TYPE = 68545;
	public const uint32 DISPID_IHTMLOBJECTELEMENT_FORM = 67540;
	public const uint32 DISPID_IHTMLOBJECTELEMENT_WIDTH = 65541;
	public const uint32 DISPID_IHTMLOBJECTELEMENT_HEIGHT = 65542;
	public const uint32 DISPID_IHTMLOBJECTELEMENT_READYSTATE = 68546;
	public const uint32 DISPID_IHTMLOBJECTELEMENT_ONREADYSTATECHANGE = 71561;
	public const uint32 DISPID_IHTMLOBJECTELEMENT_ONERROR = 71565;
	public const uint32 DISPID_IHTMLOBJECTELEMENT_ALTHTML = 68547;
	public const uint32 DISPID_IHTMLOBJECTELEMENT_VSPACE = 68548;
	public const uint32 DISPID_IHTMLOBJECTELEMENT_HSPACE = 68549;
	public const uint32 DISPID_IHTMLOBJECTELEMENT2_NAMEDRECORDSET = 68550;
	public const uint32 DISPID_IHTMLOBJECTELEMENT2_CLASSID = 68538;
	public const uint32 DISPID_IHTMLOBJECTELEMENT2_DATA = 68539;
	public const uint32 DISPID_IHTMLOBJECTELEMENT3_ARCHIVE = 68551;
	public const uint32 DISPID_IHTMLOBJECTELEMENT3_ALT = 68552;
	public const uint32 DISPID_IHTMLOBJECTELEMENT3_DECLARE = 68553;
	public const uint32 DISPID_IHTMLOBJECTELEMENT3_STANDBY = 68554;
	public const uint32 DISPID_IHTMLOBJECTELEMENT3_BORDER = 68555;
	public const uint32 DISPID_IHTMLOBJECTELEMENT3_USEMAP = 68556;
	public const uint32 DISPID_IHTMLOBJECTELEMENT4_CONTENTDOCUMENT = 68566;
	public const uint32 DISPID_IHTMLOBJECTELEMENT4_IE8_CODEBASE = 68567;
	public const uint32 DISPID_IHTMLOBJECTELEMENT4_IE8_DATA = 68568;
	public const uint32 DISPID_IHTMLOBJECTELEMENT5_IE9_OBJECT = 68569;
	public const uint32 DISPID_IHTMLPARAMELEMENT_NAME = 1001;
	public const uint32 DISPID_IHTMLPARAMELEMENT_VALUE = 1002;
	public const uint32 DISPID_IHTMLPARAMELEMENT_TYPE = 1003;
	public const uint32 DISPID_IHTMLPARAMELEMENT_VALUETYPE = 1004;
	public const uint32 DISPID_IHTMLPARAMELEMENT2_NAME = 1001;
	public const uint32 DISPID_IHTMLPARAMELEMENT2_TYPE = 1003;
	public const uint32 DISPID_IHTMLPARAMELEMENT2_VALUE = 1002;
	public const uint32 DISPID_IHTMLPARAMELEMENT2_IE8_VALUETYPE = 1150;
	public const uint32 DISPID_HTMLOBJECTELEMENTEVENTS2_ONBEFOREUPDATE = 65540;
	public const uint32 DISPID_HTMLOBJECTELEMENTEVENTS2_ONAFTERUPDATE = 65541;
	public const uint32 DISPID_HTMLOBJECTELEMENTEVENTS2_ONERRORUPDATE = 65549;
	public const uint32 DISPID_HTMLOBJECTELEMENTEVENTS2_ONROWEXIT = 65542;
	public const uint32 DISPID_HTMLOBJECTELEMENTEVENTS2_ONROWENTER = 65543;
	public const uint32 DISPID_HTMLOBJECTELEMENTEVENTS2_ONDATASETCHANGED = 65550;
	public const uint32 DISPID_HTMLOBJECTELEMENTEVENTS2_ONDATAAVAILABLE = 65551;
	public const uint32 DISPID_HTMLOBJECTELEMENTEVENTS2_ONDATASETCOMPLETE = 65552;
	public const uint32 DISPID_HTMLOBJECTELEMENTEVENTS2_ONERROR = 65555;
	public const uint32 DISPID_HTMLOBJECTELEMENTEVENTS2_ONROWSDELETE = 65568;
	public const uint32 DISPID_HTMLOBJECTELEMENTEVENTS2_ONROWSINSERTED = 65569;
	public const uint32 DISPID_HTMLOBJECTELEMENTEVENTS2_ONCELLCHANGE = 65570;
	public const uint32 DISPID_HTMLOBJECTELEMENTEVENTS2_ONREADYSTATECHANGE = 65556;
	public const uint32 DISPID_HTMLOBJECTELEMENTEVENTS_ONBEFOREUPDATE = 65540;
	public const uint32 DISPID_HTMLOBJECTELEMENTEVENTS_ONAFTERUPDATE = 65541;
	public const uint32 DISPID_HTMLOBJECTELEMENTEVENTS_ONERRORUPDATE = 65549;
	public const uint32 DISPID_HTMLOBJECTELEMENTEVENTS_ONROWEXIT = 65542;
	public const uint32 DISPID_HTMLOBJECTELEMENTEVENTS_ONROWENTER = 65543;
	public const uint32 DISPID_HTMLOBJECTELEMENTEVENTS_ONDATASETCHANGED = 65550;
	public const uint32 DISPID_HTMLOBJECTELEMENTEVENTS_ONDATAAVAILABLE = 65551;
	public const uint32 DISPID_HTMLOBJECTELEMENTEVENTS_ONDATASETCOMPLETE = 65552;
	public const uint32 DISPID_HTMLOBJECTELEMENTEVENTS_ONERROR = 65555;
	public const uint32 DISPID_HTMLOBJECTELEMENTEVENTS_ONROWSDELETE = 65568;
	public const uint32 DISPID_HTMLOBJECTELEMENTEVENTS_ONROWSINSERTED = 65569;
	public const uint32 DISPID_HTMLOBJECTELEMENTEVENTS_ONCELLCHANGE = 65570;
	public const uint32 DISPID_HTMLOBJECTELEMENTEVENTS_ONREADYSTATECHANGE = 65556;
	public const uint32 DISPID_IHTMLFRAMEBASE_SRC = 68536;
	public const uint32 DISPID_IHTMLFRAMEBASE_NAME = 65536;
	public const uint32 DISPID_IHTMLFRAMEBASE_BORDER = 68538;
	public const uint32 DISPID_IHTMLFRAMEBASE_FRAMEBORDER = 68539;
	public const uint32 DISPID_IHTMLFRAMEBASE_FRAMESPACING = 68540;
	public const uint32 DISPID_IHTMLFRAMEBASE_MARGINWIDTH = 68541;
	public const uint32 DISPID_IHTMLFRAMEBASE_MARGINHEIGHT = 68542;
	public const uint32 DISPID_IHTMLFRAMEBASE_NORESIZE = 68543;
	public const uint32 DISPID_IHTMLFRAMEBASE_SCROLLING = 68544;
	public const uint32 DISPID_IHTMLFRAMEBASE2_CONTENTWINDOW = 68545;
	public const uint32 DISPID_IHTMLFRAMEBASE2_ONLOAD = 71568;
	public const uint32 DISPID_IHTMLFRAMEBASE2_ONREADYSTATECHANGE = 71561;
	public const uint32 DISPID_IHTMLFRAMEBASE2_READYSTATE = 70652;
	public const uint32 DISPID_IHTMLFRAMEBASE2_ALLOWTRANSPARENCY = 70742;
	public const uint32 DISPID_IHTMLFRAMEBASE3_LONGDESC = 68546;
	public const uint32 DISPID_HTMLFRAMESITEEVENTS2_ONLOAD = 1003;
	public const uint32 DISPID_HTMLFRAMESITEEVENTS_ONLOAD = 1003;
	public const uint32 DISPID_IHTMLFRAMEELEMENT_BORDERCOLOR = 69537;
	public const uint32 DISPID_IHTMLFRAMEELEMENT2_HEIGHT = 65542;
	public const uint32 DISPID_IHTMLFRAMEELEMENT2_WIDTH = 65541;
	public const uint32 DISPID_IHTMLFRAMEELEMENT3_CONTENTDOCUMENT = 69656;
	public const uint32 DISPID_IHTMLFRAMEELEMENT3_IE8_SRC = 69657;
	public const uint32 DISPID_IHTMLFRAMEELEMENT3_IE8_LONGDESC = 69658;
	public const uint32 DISPID_IHTMLFRAMEELEMENT3_IE8_FRAMEBORDER = 69659;
	public const uint32 DISPID_IHTMLIFRAMEELEMENT_VSPACE = 69537;
	public const uint32 DISPID_IHTMLIFRAMEELEMENT_HSPACE = 69538;
	public const uint32 DISPID_IHTMLIFRAMEELEMENT_ALIGN = 65609;
	public const uint32 DISPID_IHTMLIFRAMEELEMENT2_HEIGHT = 65542;
	public const uint32 DISPID_IHTMLIFRAMEELEMENT2_WIDTH = 65541;
	public const uint32 DISPID_IHTMLIFRAMEELEMENT3_CONTENTDOCUMENT = 69656;
	public const uint32 DISPID_IHTMLIFRAMEELEMENT3_IE8_SRC = 69657;
	public const uint32 DISPID_IHTMLIFRAMEELEMENT3_IE8_LONGDESC = 69658;
	public const uint32 DISPID_IHTMLIFRAMEELEMENT3_IE8_FRAMEBORDER = 69659;
	public const uint32 DISPID_IHTMLDIVPOSITION_ALIGN = 65609;
	public const uint32 DISPID_IHTMLFIELDSETELEMENT_ALIGN = 65609;
	public const uint32 DISPID_IHTMLFIELDSETELEMENT2_FORM = 67540;
	public const uint32 DISPID_IHTMLLEGENDELEMENT_ALIGN = 65609;
	public const uint32 DISPID_IHTMLLEGENDELEMENT2_FORM = 67540;
	public const uint32 DISPID_IHTMLSPANFLOW_ALIGN = 65609;
	public const uint32 DISPID_IHTMLFRAMESETELEMENT_ROWS = 1000;
	public const uint32 DISPID_IHTMLFRAMESETELEMENT_COLS = 1001;
	public const uint32 DISPID_IHTMLFRAMESETELEMENT_BORDER = 1002;
	public const uint32 DISPID_IHTMLFRAMESETELEMENT_BORDERCOLOR = 1003;
	public const uint32 DISPID_IHTMLFRAMESETELEMENT_FRAMEBORDER = 1004;
	public const uint32 DISPID_IHTMLFRAMESETELEMENT_FRAMESPACING = 1005;
	public const uint32 DISPID_IHTMLFRAMESETELEMENT_NAME = 65536;
	public const uint32 DISPID_IHTMLFRAMESETELEMENT_ONLOAD = 71568;
	public const uint32 DISPID_IHTMLFRAMESETELEMENT_ONUNLOAD = 71569;
	public const uint32 DISPID_IHTMLFRAMESETELEMENT_ONBEFOREUNLOAD = 71575;
	public const uint32 DISPID_IHTMLFRAMESETELEMENT2_ONBEFOREPRINT = 71602;
	public const uint32 DISPID_IHTMLFRAMESETELEMENT2_ONAFTERPRINT = 71603;
	public const uint32 DISPID_IHTMLFRAMESETELEMENT3_ONHASHCHANGE = 71645;
	public const uint32 DISPID_IHTMLFRAMESETELEMENT3_ONMESSAGE = 71646;
	public const uint32 DISPID_IHTMLFRAMESETELEMENT3_ONOFFLINE = 71644;
	public const uint32 DISPID_IHTMLFRAMESETELEMENT3_ONONLINE = 71643;
	public const uint32 DISPID_IHTMLFRAMESETELEMENT3_ONSTORAGE = 71636;
	public const uint32 DISPID_IHTMLBGSOUND_SRC = 1001;
	public const uint32 DISPID_IHTMLBGSOUND_LOOP = 1002;
	public const uint32 DISPID_IHTMLBGSOUND_VOLUME = 1003;
	public const uint32 DISPID_IHTMLBGSOUND_BALANCE = 1004;
	public const uint32 DISPID_IHTMLFONTNAMESCOLLECTION_LENGTH = 1501;
	public const int32 DISPID_IHTMLFONTNAMESCOLLECTION__NEWENUM = -4;
	public const uint32 DISPID_IHTMLFONTNAMESCOLLECTION_ITEM = 0;
	public const uint32 DISPID_IHTMLFONTSIZESCOLLECTION_LENGTH = 1502;
	public const int32 DISPID_IHTMLFONTSIZESCOLLECTION__NEWENUM = -4;
	public const uint32 DISPID_IHTMLFONTSIZESCOLLECTION_FORFONT = 1503;
	public const uint32 DISPID_IHTMLFONTSIZESCOLLECTION_ITEM = 0;
	public const uint32 DISPID_IHTMLOPTIONSHOLDER_DOCUMENT = 1503;
	public const uint32 DISPID_IHTMLOPTIONSHOLDER_FONTS = 1504;
	public const uint32 DISPID_IHTMLOPTIONSHOLDER_EXECARG = 1505;
	public const uint32 DISPID_IHTMLOPTIONSHOLDER_ERRORLINE = 1506;
	public const uint32 DISPID_IHTMLOPTIONSHOLDER_ERRORCHARACTER = 1507;
	public const uint32 DISPID_IHTMLOPTIONSHOLDER_ERRORCODE = 1508;
	public const uint32 DISPID_IHTMLOPTIONSHOLDER_ERRORMESSAGE = 1509;
	public const uint32 DISPID_IHTMLOPTIONSHOLDER_ERRORDEBUG = 1510;
	public const uint32 DISPID_IHTMLOPTIONSHOLDER_UNSECUREDWINDOWOFDOCUMENT = 1511;
	public const uint32 DISPID_IHTMLOPTIONSHOLDER_FINDTEXT = 1512;
	public const uint32 DISPID_IHTMLOPTIONSHOLDER_ANYTHINGAFTERFRAMESET = 1513;
	public const uint32 DISPID_IHTMLOPTIONSHOLDER_SIZES = 1514;
	public const uint32 DISPID_IHTMLOPTIONSHOLDER_OPENFILEDLG = 1515;
	public const uint32 DISPID_IHTMLOPTIONSHOLDER_SAVEFILEDLG = 1516;
	public const uint32 DISPID_IHTMLOPTIONSHOLDER_CHOOSECOLORDLG = 1517;
	public const uint32 DISPID_IHTMLOPTIONSHOLDER_SHOWSECURITYINFO = 1518;
	public const uint32 DISPID_IHTMLOPTIONSHOLDER_ISAPARTMENTMODEL = 1519;
	public const uint32 DISPID_IHTMLOPTIONSHOLDER_GETCHARSET = 1520;
	public const uint32 DISPID_IHTMLOPTIONSHOLDER_SECURECONNECTIONINFO = 1521;
	public const uint32 DISPID_IHTMLSTYLEELEMENT_TYPE = 1002;
	public const uint32 DISPID_IHTMLSTYLEELEMENT_READYSTATE = 70652;
	public const uint32 DISPID_IHTMLSTYLEELEMENT_ONREADYSTATECHANGE = 71561;
	public const uint32 DISPID_IHTMLSTYLEELEMENT_ONLOAD = 71568;
	public const uint32 DISPID_IHTMLSTYLEELEMENT_ONERROR = 71565;
	public const uint32 DISPID_IHTMLSTYLEELEMENT_STYLESHEET = 1004;
	public const uint32 DISPID_IHTMLSTYLEELEMENT_DISABLED = 65612;
	public const uint32 DISPID_IHTMLSTYLEELEMENT_MEDIA = 1006;
	public const uint32 DISPID_IHTMLSTYLEELEMENT2_SHEET = 1007;
	public const uint32 DISPID_HTMLSTYLEELEMENTEVENTS2_ONLOAD = 1003;
	public const uint32 DISPID_HTMLSTYLEELEMENTEVENTS2_ONERROR = 1002;
	public const uint32 DISPID_HTMLSTYLEELEMENTEVENTS_ONLOAD = 1003;
	public const uint32 DISPID_HTMLSTYLEELEMENTEVENTS_ONERROR = 1002;
	public const uint32 DISPID_IHTMLSTYLEFONTFACE_FONTSRC = 70633;
	public const uint32 DISPID_IHTMLSTYLEFONTFACE2_STYLE = 65610;
	public const uint32 DISPID_IHTMLXDOMAINREQUEST_RESPONSETEXT = 1003;
	public const uint32 DISPID_IHTMLXDOMAINREQUEST_TIMEOUT = 1004;
	public const uint32 DISPID_IHTMLXDOMAINREQUEST_CONTENTTYPE = 1005;
	public const uint32 DISPID_IHTMLXDOMAINREQUEST_ONPROGRESS = 1006;
	public const uint32 DISPID_IHTMLXDOMAINREQUEST_ONERROR = 71565;
	public const uint32 DISPID_IHTMLXDOMAINREQUEST_ONTIMEOUT = 71648;
	public const uint32 DISPID_IHTMLXDOMAINREQUEST_ONLOAD = 71568;
	public const uint32 DISPID_IHTMLXDOMAINREQUEST_ABORT = 1010;
	public const uint32 DISPID_IHTMLXDOMAINREQUEST_OPEN = 1011;
	public const uint32 DISPID_IHTMLXDOMAINREQUEST_SEND = 1012;
	public const uint32 DISPID_IHTMLXDOMAINREQUESTFACTORY_CREATE = 0;
	public const uint32 DISPID_IHTMLSTORAGE_LENGTH = 1001;
	public const uint32 DISPID_IHTMLSTORAGE_REMAININGSPACE = 1002;
	public const uint32 DISPID_IHTMLSTORAGE_KEY = 1006;
	public const uint32 DISPID_IHTMLSTORAGE_GETITEM = 1003;
	public const uint32 DISPID_IHTMLSTORAGE_SETITEM = 1004;
	public const uint32 DISPID_IHTMLSTORAGE_REMOVEITEM = 1005;
	public const uint32 DISPID_IHTMLSTORAGE_CLEAR = 1007;
	public const uint32 DISPID_IHTMLSTORAGE2_IE9_SETITEM = 1008;
	public const uint32 DISPID_IEVENTTARGET_ADDEVENTLISTENER = 66046;
	public const uint32 DISPID_IEVENTTARGET_REMOVEEVENTLISTENER = 66047;
	public const uint32 DISPID_IEVENTTARGET_DISPATCHEVENT = 66048;
	public const uint32 DISPID_IDOMEVENT_BUBBLES = 1001;
	public const uint32 DISPID_IDOMEVENT_CANCELABLE = 1002;
	public const uint32 DISPID_IDOMEVENT_CURRENTTARGET = 1003;
	public const uint32 DISPID_IDOMEVENT_DEFAULTPREVENTED = 1004;
	public const uint32 DISPID_IDOMEVENT_EVENTPHASE = 1005;
	public const uint32 DISPID_IDOMEVENT_TARGET = 1006;
	public const uint32 DISPID_IDOMEVENT_TIMESTAMP = 1007;
	public const uint32 DISPID_IDOMEVENT_TYPE = 1008;
	public const uint32 DISPID_IDOMEVENT_INITEVENT = 1009;
	public const uint32 DISPID_IDOMEVENT_PREVENTDEFAULT = 1010;
	public const uint32 DISPID_IDOMEVENT_STOPPROPAGATION = 1011;
	public const uint32 DISPID_IDOMEVENT_STOPIMMEDIATEPROPAGATION = 1012;
	public const uint32 DISPID_IDOMEVENT_ISTRUSTED = 1013;
	public const uint32 DISPID_IDOMEVENT_CANCELBUBBLE = 1014;
	public const uint32 DISPID_IDOMEVENT_SRCELEMENT = 1015;
	public const uint32 DISPID_IDOMUIEVENT_VIEW = 1026;
	public const uint32 DISPID_IDOMUIEVENT_DETAIL = 1027;
	public const uint32 DISPID_IDOMUIEVENT_INITUIEVENT = 1028;
	public const uint32 DISPID_IDOMMOUSEEVENT_SCREENX = 1051;
	public const uint32 DISPID_IDOMMOUSEEVENT_SCREENY = 1052;
	public const uint32 DISPID_IDOMMOUSEEVENT_CLIENTX = 1053;
	public const uint32 DISPID_IDOMMOUSEEVENT_CLIENTY = 1054;
	public const uint32 DISPID_IDOMMOUSEEVENT_CTRLKEY = 1055;
	public const uint32 DISPID_IDOMMOUSEEVENT_SHIFTKEY = 1056;
	public const uint32 DISPID_IDOMMOUSEEVENT_ALTKEY = 1057;
	public const uint32 DISPID_IDOMMOUSEEVENT_METAKEY = 1058;
	public const uint32 DISPID_IDOMMOUSEEVENT_BUTTON = 1059;
	public const uint32 DISPID_IDOMMOUSEEVENT_RELATEDTARGET = 1060;
	public const uint32 DISPID_IDOMMOUSEEVENT_INITMOUSEEVENT = 1061;
	public const uint32 DISPID_IDOMMOUSEEVENT_GETMODIFIERSTATE = 1062;
	public const uint32 DISPID_IDOMMOUSEEVENT_BUTTONS = 1063;
	public const uint32 DISPID_IDOMMOUSEEVENT_FROMELEMENT = 1064;
	public const uint32 DISPID_IDOMMOUSEEVENT_TOELEMENT = 1065;
	public const uint32 DISPID_IDOMMOUSEEVENT_X = 1066;
	public const uint32 DISPID_IDOMMOUSEEVENT_Y = 1067;
	public const uint32 DISPID_IDOMMOUSEEVENT_OFFSETX = 1068;
	public const uint32 DISPID_IDOMMOUSEEVENT_OFFSETY = 1069;
	public const uint32 DISPID_IDOMMOUSEEVENT_PAGEX = 1070;
	public const uint32 DISPID_IDOMMOUSEEVENT_PAGEY = 1071;
	public const uint32 DISPID_IDOMMOUSEEVENT_LAYERX = 1072;
	public const uint32 DISPID_IDOMMOUSEEVENT_LAYERY = 1073;
	public const uint32 DISPID_IDOMMOUSEEVENT_WHICH = 1074;
	public const uint32 DISPID_IDOMDRAGEVENT_DATATRANSFER = 1401;
	public const uint32 DISPID_IDOMDRAGEVENT_INITDRAGEVENT = 1402;
	public const uint32 DISPID_IDOMMOUSEWHEELEVENT_WHEELDELTA = 1076;
	public const uint32 DISPID_IDOMMOUSEWHEELEVENT_INITMOUSEWHEELEVENT = 1077;
	public const uint32 DISPID_IDOMWHEELEVENT_DELTAX = 1101;
	public const uint32 DISPID_IDOMWHEELEVENT_DELTAY = 1102;
	public const uint32 DISPID_IDOMWHEELEVENT_DELTAZ = 1103;
	public const uint32 DISPID_IDOMWHEELEVENT_DELTAMODE = 1104;
	public const uint32 DISPID_IDOMWHEELEVENT_INITWHEELEVENT = 1105;
	public const uint32 DISPID_IDOMTEXTEVENT_DATA = 1126;
	public const uint32 DISPID_IDOMTEXTEVENT_INPUTMETHOD = 1127;
	public const uint32 DISPID_IDOMTEXTEVENT_INITTEXTEVENT = 1128;
	public const uint32 DISPID_IDOMTEXTEVENT_LOCALE = 1129;
	public const uint32 DISPID_IDOMKEYBOARDEVENT_KEY = 1151;
	public const uint32 DISPID_IDOMKEYBOARDEVENT_LOCATION = 1152;
	public const uint32 DISPID_IDOMKEYBOARDEVENT_CTRLKEY = 1153;
	public const uint32 DISPID_IDOMKEYBOARDEVENT_SHIFTKEY = 1154;
	public const uint32 DISPID_IDOMKEYBOARDEVENT_ALTKEY = 1155;
	public const uint32 DISPID_IDOMKEYBOARDEVENT_METAKEY = 1156;
	public const uint32 DISPID_IDOMKEYBOARDEVENT_REPEAT = 1157;
	public const uint32 DISPID_IDOMKEYBOARDEVENT_GETMODIFIERSTATE = 1158;
	public const uint32 DISPID_IDOMKEYBOARDEVENT_INITKEYBOARDEVENT = 1159;
	public const uint32 DISPID_IDOMKEYBOARDEVENT_KEYCODE = 1160;
	public const uint32 DISPID_IDOMKEYBOARDEVENT_CHARCODE = 1161;
	public const uint32 DISPID_IDOMKEYBOARDEVENT_WHICH = 1162;
	public const uint32 DISPID_IDOMKEYBOARDEVENT_IE9_CHAR = 1163;
	public const uint32 DISPID_IDOMKEYBOARDEVENT_LOCALE = 1164;
	public const uint32 DISPID_IDOMCOMPOSITIONEVENT_DATA = 1176;
	public const uint32 DISPID_IDOMCOMPOSITIONEVENT_INITCOMPOSITIONEVENT = 1177;
	public const uint32 DISPID_IDOMCOMPOSITIONEVENT_LOCALE = 1178;
	public const uint32 DISPID_IDOMMUTATIONEVENT_RELATEDNODE = 1226;
	public const uint32 DISPID_IDOMMUTATIONEVENT_PREVVALUE = 1227;
	public const uint32 DISPID_IDOMMUTATIONEVENT_NEWVALUE = 1228;
	public const uint32 DISPID_IDOMMUTATIONEVENT_ATTRNAME = 1229;
	public const uint32 DISPID_IDOMMUTATIONEVENT_ATTRCHANGE = 1230;
	public const uint32 DISPID_IDOMMUTATIONEVENT_INITMUTATIONEVENT = 1231;
	public const uint32 DISPID_IDOMBEFOREUNLOADEVENT_RETURNVALUE = 1376;
	public const uint32 DISPID_IDOMFOCUSEVENT_RELATEDTARGET = 1251;
	public const uint32 DISPID_IDOMFOCUSEVENT_INITFOCUSEVENT = 1252;
	public const uint32 DISPID_IDOMCUSTOMEVENT_DETAIL = 1201;
	public const uint32 DISPID_IDOMCUSTOMEVENT_INITCUSTOMEVENT = 1202;
	public const uint32 DISPID_ICANVASGRADIENT_ADDCOLORSTOP = 1000;
	public const uint32 DISPID_ICANVASTEXTMETRICS_WIDTH = 1000;
	public const uint32 DISPID_ICANVASIMAGEDATA_WIDTH = 1000;
	public const uint32 DISPID_ICANVASIMAGEDATA_HEIGHT = 1001;
	public const uint32 DISPID_ICANVASIMAGEDATA_DATA = 1002;
	public const uint32 DISPID_ICANVASPIXELARRAY_LENGTH = 1000;
	public const uint32 DISPID_ICANVASRENDERINGCONTEXT2D_CANVAS = 1000;
	public const uint32 DISPID_ICANVASRENDERINGCONTEXT2D_RESTORE = 1001;
	public const uint32 DISPID_ICANVASRENDERINGCONTEXT2D_SAVE = 1002;
	public const uint32 DISPID_ICANVASRENDERINGCONTEXT2D_ROTATE = 1003;
	public const uint32 DISPID_ICANVASRENDERINGCONTEXT2D_SCALE = 1004;
	public const uint32 DISPID_ICANVASRENDERINGCONTEXT2D_SETTRANSFORM = 1005;
	public const uint32 DISPID_ICANVASRENDERINGCONTEXT2D_TRANSFORM = 1006;
	public const uint32 DISPID_ICANVASRENDERINGCONTEXT2D_TRANSLATE = 1007;
	public const uint32 DISPID_ICANVASRENDERINGCONTEXT2D_GLOBALALPHA = 1008;
	public const uint32 DISPID_ICANVASRENDERINGCONTEXT2D_GLOBALCOMPOSITEOPERATION = 1009;
	public const uint32 DISPID_ICANVASRENDERINGCONTEXT2D_FILLSTYLE = 1010;
	public const uint32 DISPID_ICANVASRENDERINGCONTEXT2D_STROKESTYLE = 1011;
	public const uint32 DISPID_ICANVASRENDERINGCONTEXT2D_CREATELINEARGRADIENT = 1012;
	public const uint32 DISPID_ICANVASRENDERINGCONTEXT2D_CREATERADIALGRADIENT = 1013;
	public const uint32 DISPID_ICANVASRENDERINGCONTEXT2D_CREATEPATTERN = 1014;
	public const uint32 DISPID_ICANVASRENDERINGCONTEXT2D_LINECAP = 1015;
	public const uint32 DISPID_ICANVASRENDERINGCONTEXT2D_LINEJOIN = 1016;
	public const uint32 DISPID_ICANVASRENDERINGCONTEXT2D_LINEWIDTH = 1017;
	public const uint32 DISPID_ICANVASRENDERINGCONTEXT2D_MITERLIMIT = 1018;
	public const uint32 DISPID_ICANVASRENDERINGCONTEXT2D_SHADOWBLUR = 1019;
	public const uint32 DISPID_ICANVASRENDERINGCONTEXT2D_SHADOWCOLOR = 1020;
	public const uint32 DISPID_ICANVASRENDERINGCONTEXT2D_SHADOWOFFSETX = 1021;
	public const uint32 DISPID_ICANVASRENDERINGCONTEXT2D_SHADOWOFFSETY = 1022;
	public const uint32 DISPID_ICANVASRENDERINGCONTEXT2D_CLEARRECT = 1023;
	public const uint32 DISPID_ICANVASRENDERINGCONTEXT2D_FILLRECT = 1024;
	public const uint32 DISPID_ICANVASRENDERINGCONTEXT2D_STROKERECT = 1025;
	public const uint32 DISPID_ICANVASRENDERINGCONTEXT2D_ARC = 1026;
	public const uint32 DISPID_ICANVASRENDERINGCONTEXT2D_ARCTO = 1027;
	public const uint32 DISPID_ICANVASRENDERINGCONTEXT2D_BEGINPATH = 1028;
	public const uint32 DISPID_ICANVASRENDERINGCONTEXT2D_BEZIERCURVETO = 1029;
	public const uint32 DISPID_ICANVASRENDERINGCONTEXT2D_CLIP = 1030;
	public const uint32 DISPID_ICANVASRENDERINGCONTEXT2D_CLOSEPATH = 1031;
	public const uint32 DISPID_ICANVASRENDERINGCONTEXT2D_FILL = 1032;
	public const uint32 DISPID_ICANVASRENDERINGCONTEXT2D_LINETO = 1033;
	public const uint32 DISPID_ICANVASRENDERINGCONTEXT2D_MOVETO = 1034;
	public const uint32 DISPID_ICANVASRENDERINGCONTEXT2D_QUADRATICCURVETO = 1035;
	public const uint32 DISPID_ICANVASRENDERINGCONTEXT2D_RECT = 1036;
	public const uint32 DISPID_ICANVASRENDERINGCONTEXT2D_STROKE = 1037;
	public const uint32 DISPID_ICANVASRENDERINGCONTEXT2D_ISPOINTINPATH = 1038;
	public const uint32 DISPID_ICANVASRENDERINGCONTEXT2D_FONT = 1039;
	public const uint32 DISPID_ICANVASRENDERINGCONTEXT2D_TEXTALIGN = 1040;
	public const uint32 DISPID_ICANVASRENDERINGCONTEXT2D_TEXTBASELINE = 1041;
	public const uint32 DISPID_ICANVASRENDERINGCONTEXT2D_FILLTEXT = 1042;
	public const uint32 DISPID_ICANVASRENDERINGCONTEXT2D_MEASURETEXT = 1043;
	public const uint32 DISPID_ICANVASRENDERINGCONTEXT2D_STROKETEXT = 1044;
	public const uint32 DISPID_ICANVASRENDERINGCONTEXT2D_DRAWIMAGE = 1045;
	public const uint32 DISPID_ICANVASRENDERINGCONTEXT2D_CREATEIMAGEDATA = 1046;
	public const uint32 DISPID_ICANVASRENDERINGCONTEXT2D_GETIMAGEDATA = 1047;
	public const uint32 DISPID_ICANVASRENDERINGCONTEXT2D_PUTIMAGEDATA = 1048;
	public const uint32 DISPID_IHTMLCANVASELEMENT_WIDTH = 65541;
	public const uint32 DISPID_IHTMLCANVASELEMENT_HEIGHT = 65542;
	public const uint32 DISPID_IHTMLCANVASELEMENT_GETCONTEXT = 1001;
	public const uint32 DISPID_IHTMLCANVASELEMENT_TODATAURL = 1002;
	public const uint32 DISPID_IDOMPROGRESSEVENT_LENGTHCOMPUTABLE = 1551;
	public const uint32 DISPID_IDOMPROGRESSEVENT_LOADED = 1552;
	public const uint32 DISPID_IDOMPROGRESSEVENT_TOTAL = 1553;
	public const uint32 DISPID_IDOMPROGRESSEVENT_INITPROGRESSEVENT = 1554;
	public const uint32 DISPID_IDOMMESSAGEEVENT_DATA = 1326;
	public const uint32 DISPID_IDOMMESSAGEEVENT_ORIGIN = 1327;
	public const uint32 DISPID_IDOMMESSAGEEVENT_SOURCE = 1328;
	public const uint32 DISPID_IDOMMESSAGEEVENT_INITMESSAGEEVENT = 1329;
	public const uint32 DISPID_IDOMSITEMODEEVENT_BUTTONID = 1301;
	public const uint32 DISPID_IDOMSITEMODEEVENT_ACTIONURL = 1302;
	public const uint32 DISPID_IDOMSTORAGEEVENT_KEY = 1351;
	public const uint32 DISPID_IDOMSTORAGEEVENT_OLDVALUE = 1352;
	public const uint32 DISPID_IDOMSTORAGEEVENT_NEWVALUE = 1353;
	public const uint32 DISPID_IDOMSTORAGEEVENT_URL = 1354;
	public const uint32 DISPID_IDOMSTORAGEEVENT_STORAGEAREA = 1355;
	public const uint32 DISPID_IDOMSTORAGEEVENT_INITSTORAGEEVENT = 1356;
	public const uint32 DISPID_IHTMLXMLHTTPREQUEST_READYSTATE = 1002;
	public const uint32 DISPID_IHTMLXMLHTTPREQUEST_RESPONSEBODY = 1003;
	public const uint32 DISPID_IHTMLXMLHTTPREQUEST_RESPONSETEXT = 1004;
	public const uint32 DISPID_IHTMLXMLHTTPREQUEST_RESPONSEXML = 1005;
	public const uint32 DISPID_IHTMLXMLHTTPREQUEST_STATUS = 1006;
	public const uint32 DISPID_IHTMLXMLHTTPREQUEST_STATUSTEXT = 1007;
	public const uint32 DISPID_IHTMLXMLHTTPREQUEST_ONREADYSTATECHANGE = 71561;
	public const uint32 DISPID_IHTMLXMLHTTPREQUEST_ABORT = 1009;
	public const uint32 DISPID_IHTMLXMLHTTPREQUEST_OPEN = 1010;
	public const uint32 DISPID_IHTMLXMLHTTPREQUEST_SEND = 1011;
	public const uint32 DISPID_IHTMLXMLHTTPREQUEST_GETALLRESPONSEHEADERS = 1012;
	public const uint32 DISPID_IHTMLXMLHTTPREQUEST_GETRESPONSEHEADER = 1013;
	public const uint32 DISPID_IHTMLXMLHTTPREQUEST_SETREQUESTHEADER = 1014;
	public const uint32 DISPID_IHTMLXMLHTTPREQUEST2_TIMEOUT = 1015;
	public const uint32 DISPID_IHTMLXMLHTTPREQUEST2_ONTIMEOUT = 71648;
	public const uint32 DISPID_IHTMLXMLHTTPREQUESTFACTORY_CREATE = 0;
	public const uint32 DISPID_HTMLXMLHTTPREQUESTEVENTS_ONTIMEOUT = 1016;
	public const uint32 DISPID_HTMLXMLHTTPREQUESTEVENTS_ONREADYSTATECHANGE = 1008;
	public const uint32 DISPID_ISVGANGLE_UNITTYPE = 1000;
	public const uint32 DISPID_ISVGANGLE_VALUE = 1001;
	public const uint32 DISPID_ISVGANGLE_VALUEINSPECIFIEDUNITS = 1002;
	public const uint32 DISPID_ISVGANGLE_VALUEASSTRING = 1003;
	public const uint32 DISPID_ISVGANGLE_NEWVALUESPECIFIEDUNITS = 1004;
	public const uint32 DISPID_ISVGANGLE_CONVERTTOSPECIFIEDUNITS = 1005;
	public const uint32 DISPID_ISVGSTYLABLE_CLASSNAME = 1001;
	public const uint32 DISPID_ISVGLOCATABLE_NEARESTVIEWPORTELEMENT = 1002;
	public const uint32 DISPID_ISVGLOCATABLE_FARTHESTVIEWPORTELEMENT = 1003;
	public const uint32 DISPID_ISVGLOCATABLE_GETBBOX = 1004;
	public const uint32 DISPID_ISVGLOCATABLE_GETCTM = 1005;
	public const uint32 DISPID_ISVGLOCATABLE_GETSCREENCTM = 1006;
	public const uint32 DISPID_ISVGLOCATABLE_GETTRANSFORMTOELEMENT = 1007;
	public const uint32 DISPID_ISVGTRANSFORMABLE_TRANSFORM = 1009;
	public const uint32 DISPID_ISVGTESTS_REQUIREDFEATURES = 1011;
	public const uint32 DISPID_ISVGTESTS_REQUIREDEXTENSIONS = 1013;
	public const uint32 DISPID_ISVGTESTS_SYSTEMLANGUAGE = 1015;
	public const uint32 DISPID_ISVGTESTS_HASEXTENSION = 1016;
	public const uint32 DISPID_ISVGLANGSPACE_XMLLANG = 1017;
	public const uint32 DISPID_ISVGLANGSPACE_XMLSPACE = 1018;
	public const uint32 DISPID_ISVGEXTERNALRESOURCESREQUIRED_EXTERNALRESOURCESREQUIRED = 1020;
	public const uint32 DISPID_ISVGFITTOVIEWBOX_VIEWBOX = 1022;
	public const uint32 DISPID_ISVGFITTOVIEWBOX_PRESERVEASPECTRATIO = 1024;
	public const uint32 DISPID_ISVGZOOMANDPAN_ZOOMANDPAN = 1025;
	public const uint32 DISPID_ISVGURIREFERENCE_HREF = 1026;
	public const uint32 DISPID_ISVGANIMATEDANGLE_BASEVAL = 1000;
	public const uint32 DISPID_ISVGANIMATEDANGLE_ANIMVAL = 1001;
	public const uint32 DISPID_ISVGANIMATEDTRANSFORMLIST_BASEVAL = 1000;
	public const uint32 DISPID_ISVGANIMATEDTRANSFORMLIST_ANIMVAL = 1001;
	public const uint32 DISPID_ISVGANIMATEDBOOLEAN_BASEVAL = 1000;
	public const uint32 DISPID_ISVGANIMATEDBOOLEAN_ANIMVAL = 1001;
	public const uint32 DISPID_ISVGANIMATEDENUMERATION_BASEVAL = 1000;
	public const uint32 DISPID_ISVGANIMATEDENUMERATION_ANIMVAL = 1001;
	public const uint32 DISPID_ISVGANIMATEDINTEGER_BASEVAL = 1000;
	public const uint32 DISPID_ISVGANIMATEDINTEGER_ANIMVAL = 1001;
	public const uint32 DISPID_ISVGANIMATEDLENGTH_BASEVAL = 1000;
	public const uint32 DISPID_ISVGANIMATEDLENGTH_ANIMVAL = 1001;
	public const uint32 DISPID_ISVGANIMATEDLENGTHLIST_BASEVAL = 1000;
	public const uint32 DISPID_ISVGANIMATEDLENGTHLIST_ANIMVAL = 1001;
	public const uint32 DISPID_ISVGANIMATEDNUMBER_BASEVAL = 1000;
	public const uint32 DISPID_ISVGANIMATEDNUMBER_ANIMVAL = 1001;
	public const uint32 DISPID_ISVGANIMATEDNUMBERLIST_BASEVAL = 1000;
	public const uint32 DISPID_ISVGANIMATEDNUMBERLIST_ANIMVAL = 1001;
	public const uint32 DISPID_ISVGANIMATEDRECT_BASEVAL = 1000;
	public const uint32 DISPID_ISVGANIMATEDRECT_ANIMVAL = 1001;
	public const uint32 DISPID_ISVGANIMATEDSTRING_BASEVAL = 1000;
	public const uint32 DISPID_ISVGANIMATEDSTRING_ANIMVAL = 1001;
	public const uint32 DISPID_ISVGCLIPPATHELEMENT_CLIPPATHUNITS = 1051;
	public const uint32 DISPID_ISVGDOCUMENT_ROOTELEMENT = 1116;
	public const uint32 DISPID_IGETSVGDOCUMENT_GETSVGDOCUMENT = 65615;
	public const uint32 DISPID_ISVGELEMENT_XMLBASE = 1032;
	public const uint32 DISPID_ISVGELEMENT_OWNERSVGELEMENT = 1033;
	public const uint32 DISPID_ISVGELEMENT_VIEWPORTELEMENT = 1034;
	public const uint32 DISPID_ISVGELEMENT_FOCUSABLE = 1036;
	public const uint32 DISPID_ISVGLENGTH_UNITTYPE = 1000;
	public const uint32 DISPID_ISVGLENGTH_VALUE = 1001;
	public const uint32 DISPID_ISVGLENGTH_VALUEINSPECIFIEDUNITS = 1002;
	public const uint32 DISPID_ISVGLENGTH_VALUEASSTRING = 1003;
	public const uint32 DISPID_ISVGLENGTH_NEWVALUESPECIFIEDUNITS = 1004;
	public const uint32 DISPID_ISVGLENGTH_CONVERTTOSPECIFIEDUNITS = 1005;
	public const uint32 DISPID_ISVGLENGTHLIST_NUMBEROFITEMS = 1000;
	public const uint32 DISPID_ISVGLENGTHLIST_CLEAR = 1001;
	public const uint32 DISPID_ISVGLENGTHLIST_INITIALIZE = 1002;
	public const uint32 DISPID_ISVGLENGTHLIST_GETITEM = 1003;
	public const uint32 DISPID_ISVGLENGTHLIST_INSERTITEMBEFORE = 1004;
	public const uint32 DISPID_ISVGLENGTHLIST_REPLACEITEM = 1005;
	public const uint32 DISPID_ISVGLENGTHLIST_REMOVEITEM = 1006;
	public const uint32 DISPID_ISVGLENGTHLIST_APPENDITEM = 1007;
	public const uint32 DISPID_ISVGMATRIX_A = 1000;
	public const uint32 DISPID_ISVGMATRIX_B = 1001;
	public const uint32 DISPID_ISVGMATRIX_C = 1002;
	public const uint32 DISPID_ISVGMATRIX_D = 1003;
	public const uint32 DISPID_ISVGMATRIX_E = 1004;
	public const uint32 DISPID_ISVGMATRIX_F = 1005;
	public const uint32 DISPID_ISVGMATRIX_MULTIPLY = 1006;
	public const uint32 DISPID_ISVGMATRIX_INVERSE = 1007;
	public const uint32 DISPID_ISVGMATRIX_TRANSLATE = 1008;
	public const uint32 DISPID_ISVGMATRIX_SCALE = 1009;
	public const uint32 DISPID_ISVGMATRIX_SCALENONUNIFORM = 1010;
	public const uint32 DISPID_ISVGMATRIX_ROTATE = 1011;
	public const uint32 DISPID_ISVGMATRIX_ROTATEFROMVECTOR = 1012;
	public const uint32 DISPID_ISVGMATRIX_FLIPX = 1013;
	public const uint32 DISPID_ISVGMATRIX_FLIPY = 1014;
	public const uint32 DISPID_ISVGMATRIX_SKEWX = 1015;
	public const uint32 DISPID_ISVGMATRIX_SKEWY = 1016;
	public const uint32 DISPID_ISVGNUMBER_VALUE = 1000;
	public const uint32 DISPID_ISVGNUMBERLIST_NUMBEROFITEMS = 1000;
	public const uint32 DISPID_ISVGNUMBERLIST_CLEAR = 1001;
	public const uint32 DISPID_ISVGNUMBERLIST_INITIALIZE = 1002;
	public const uint32 DISPID_ISVGNUMBERLIST_GETITEM = 1003;
	public const uint32 DISPID_ISVGNUMBERLIST_INSERTITEMBEFORE = 1004;
	public const uint32 DISPID_ISVGNUMBERLIST_REPLACEITEM = 1005;
	public const uint32 DISPID_ISVGNUMBERLIST_REMOVEITEM = 1006;
	public const uint32 DISPID_ISVGNUMBERLIST_APPENDITEM = 1007;
	public const uint32 DISPID_ISVGPATTERNELEMENT_PATTERNUNITS = 1051;
	public const uint32 DISPID_ISVGPATTERNELEMENT_PATTERNCONTENTUNITS = 1053;
	public const uint32 DISPID_ISVGPATTERNELEMENT_PATTERNTRANSFORM = 1055;
	public const uint32 DISPID_ISVGPATTERNELEMENT_X = 1057;
	public const uint32 DISPID_ISVGPATTERNELEMENT_Y = 1059;
	public const uint32 DISPID_ISVGPATTERNELEMENT_WIDTH = 1061;
	public const uint32 DISPID_ISVGPATTERNELEMENT_HEIGHT = 1063;
	public const uint32 DISPID_ISVGPATHSEG_PATHSEGTYPE = 1000;
	public const uint32 DISPID_ISVGPATHSEG_PATHSEGTYPEASLETTER = 1001;
	public const uint32 DISPID_ISVGPATHSEGARCABS_X = 1020;
	public const uint32 DISPID_ISVGPATHSEGARCABS_Y = 1021;
	public const uint32 DISPID_ISVGPATHSEGARCABS_R1 = 1022;
	public const uint32 DISPID_ISVGPATHSEGARCABS_R2 = 1023;
	public const uint32 DISPID_ISVGPATHSEGARCABS_ANGLE = 1024;
	public const uint32 DISPID_ISVGPATHSEGARCABS_LARGEARCFLAG = 1025;
	public const uint32 DISPID_ISVGPATHSEGARCABS_SWEEPFLAG = 1026;
	public const uint32 DISPID_ISVGPATHSEGARCREL_X = 1020;
	public const uint32 DISPID_ISVGPATHSEGARCREL_Y = 1021;
	public const uint32 DISPID_ISVGPATHSEGARCREL_R1 = 1022;
	public const uint32 DISPID_ISVGPATHSEGARCREL_R2 = 1023;
	public const uint32 DISPID_ISVGPATHSEGARCREL_ANGLE = 1024;
	public const uint32 DISPID_ISVGPATHSEGARCREL_LARGEARCFLAG = 1025;
	public const uint32 DISPID_ISVGPATHSEGARCREL_SWEEPFLAG = 1026;
	public const uint32 DISPID_ISVGPATHSEGMOVETOABS_X = 1020;
	public const uint32 DISPID_ISVGPATHSEGMOVETOABS_Y = 1021;
	public const uint32 DISPID_ISVGPATHSEGMOVETOREL_X = 1020;
	public const uint32 DISPID_ISVGPATHSEGMOVETOREL_Y = 1021;
	public const uint32 DISPID_ISVGPATHSEGLINETOABS_X = 1020;
	public const uint32 DISPID_ISVGPATHSEGLINETOABS_Y = 1021;
	public const uint32 DISPID_ISVGPATHSEGLINETOREL_X = 1020;
	public const uint32 DISPID_ISVGPATHSEGLINETOREL_Y = 1021;
	public const uint32 DISPID_ISVGPATHSEGCURVETOCUBICABS_X = 1020;
	public const uint32 DISPID_ISVGPATHSEGCURVETOCUBICABS_Y = 1021;
	public const uint32 DISPID_ISVGPATHSEGCURVETOCUBICABS_X1 = 1022;
	public const uint32 DISPID_ISVGPATHSEGCURVETOCUBICABS_Y1 = 1023;
	public const uint32 DISPID_ISVGPATHSEGCURVETOCUBICABS_X2 = 1024;
	public const uint32 DISPID_ISVGPATHSEGCURVETOCUBICABS_Y2 = 1025;
	public const uint32 DISPID_ISVGPATHSEGCURVETOCUBICREL_X = 1020;
	public const uint32 DISPID_ISVGPATHSEGCURVETOCUBICREL_Y = 1021;
	public const uint32 DISPID_ISVGPATHSEGCURVETOCUBICREL_X1 = 1022;
	public const uint32 DISPID_ISVGPATHSEGCURVETOCUBICREL_Y1 = 1023;
	public const uint32 DISPID_ISVGPATHSEGCURVETOCUBICREL_X2 = 1024;
	public const uint32 DISPID_ISVGPATHSEGCURVETOCUBICREL_Y2 = 1025;
	public const uint32 DISPID_ISVGPATHSEGCURVETOCUBICSMOOTHABS_X = 1020;
	public const uint32 DISPID_ISVGPATHSEGCURVETOCUBICSMOOTHABS_Y = 1021;
	public const uint32 DISPID_ISVGPATHSEGCURVETOCUBICSMOOTHABS_X2 = 1022;
	public const uint32 DISPID_ISVGPATHSEGCURVETOCUBICSMOOTHABS_Y2 = 1023;
	public const uint32 DISPID_ISVGPATHSEGCURVETOCUBICSMOOTHREL_X = 1020;
	public const uint32 DISPID_ISVGPATHSEGCURVETOCUBICSMOOTHREL_Y = 1021;
	public const uint32 DISPID_ISVGPATHSEGCURVETOCUBICSMOOTHREL_X2 = 1022;
	public const uint32 DISPID_ISVGPATHSEGCURVETOCUBICSMOOTHREL_Y2 = 1023;
	public const uint32 DISPID_ISVGPATHSEGCURVETOQUADRATICABS_X = 1020;
	public const uint32 DISPID_ISVGPATHSEGCURVETOQUADRATICABS_Y = 1021;
	public const uint32 DISPID_ISVGPATHSEGCURVETOQUADRATICABS_X1 = 1022;
	public const uint32 DISPID_ISVGPATHSEGCURVETOQUADRATICABS_Y1 = 1023;
	public const uint32 DISPID_ISVGPATHSEGCURVETOQUADRATICREL_X = 1020;
	public const uint32 DISPID_ISVGPATHSEGCURVETOQUADRATICREL_Y = 1021;
	public const uint32 DISPID_ISVGPATHSEGCURVETOQUADRATICREL_X1 = 1022;
	public const uint32 DISPID_ISVGPATHSEGCURVETOQUADRATICREL_Y1 = 1023;
	public const uint32 DISPID_ISVGPATHSEGCURVETOQUADRATICSMOOTHABS_X = 1020;
	public const uint32 DISPID_ISVGPATHSEGCURVETOQUADRATICSMOOTHABS_Y = 1021;
	public const uint32 DISPID_ISVGPATHSEGCURVETOQUADRATICSMOOTHREL_X = 1020;
	public const uint32 DISPID_ISVGPATHSEGCURVETOQUADRATICSMOOTHREL_Y = 1021;
	public const uint32 DISPID_ISVGPATHSEGLINETOHORIZONTALABS_X = 1020;
	public const uint32 DISPID_ISVGPATHSEGLINETOHORIZONTALREL_X = 1020;
	public const uint32 DISPID_ISVGPATHSEGLINETOVERTICALABS_Y = 1020;
	public const uint32 DISPID_ISVGPATHSEGLINETOVERTICALREL_Y = 1020;
	public const uint32 DISPID_ISVGPATHSEGLIST_NUMBEROFITEMS = 1000;
	public const uint32 DISPID_ISVGPATHSEGLIST_CLEAR = 1001;
	public const uint32 DISPID_ISVGPATHSEGLIST_INITIALIZE = 1002;
	public const uint32 DISPID_ISVGPATHSEGLIST_GETITEM = 1003;
	public const uint32 DISPID_ISVGPATHSEGLIST_INSERTITEMBEFORE = 1004;
	public const uint32 DISPID_ISVGPATHSEGLIST_REPLACEITEM = 1005;
	public const uint32 DISPID_ISVGPATHSEGLIST_REMOVEITEM = 1006;
	public const uint32 DISPID_ISVGPATHSEGLIST_APPENDITEM = 1007;
	public const uint32 DISPID_ISVGPOINT_X = 1000;
	public const uint32 DISPID_ISVGPOINT_Y = 1001;
	public const uint32 DISPID_ISVGPOINT_MATRIXTRANSFORM = 1002;
	public const uint32 DISPID_ISVGPOINTLIST_NUMBEROFITEMS = 1000;
	public const uint32 DISPID_ISVGPOINTLIST_CLEAR = 1001;
	public const uint32 DISPID_ISVGPOINTLIST_INITIALIZE = 1002;
	public const uint32 DISPID_ISVGPOINTLIST_GETITEM = 1003;
	public const uint32 DISPID_ISVGPOINTLIST_INSERTITEMBEFORE = 1004;
	public const uint32 DISPID_ISVGPOINTLIST_REPLACEITEM = 1005;
	public const uint32 DISPID_ISVGPOINTLIST_REMOVEITEM = 1006;
	public const uint32 DISPID_ISVGPOINTLIST_APPENDITEM = 1007;
	public const uint32 DISPID_ISVGRECT_X = 1000;
	public const uint32 DISPID_ISVGRECT_Y = 1001;
	public const uint32 DISPID_ISVGRECT_WIDTH = 1002;
	public const uint32 DISPID_ISVGRECT_HEIGHT = 1003;
	public const uint32 DISPID_ISVGSTRINGLIST_NUMBEROFITEMS = 1000;
	public const uint32 DISPID_ISVGSTRINGLIST_CLEAR = 1001;
	public const uint32 DISPID_ISVGSTRINGLIST_INITIALIZE = 1002;
	public const uint32 DISPID_ISVGSTRINGLIST_GETITEM = 1003;
	public const uint32 DISPID_ISVGSTRINGLIST_INSERTITEMBEFORE = 1004;
	public const uint32 DISPID_ISVGSTRINGLIST_REPLACEITEM = 1005;
	public const uint32 DISPID_ISVGSTRINGLIST_REMOVEITEM = 1006;
	public const uint32 DISPID_ISVGSTRINGLIST_APPENDITEM = 1007;
	public const uint32 DISPID_ISVGTRANSFORM_TYPE = 1000;
	public const uint32 DISPID_ISVGTRANSFORM_MATRIX = 1001;
	public const uint32 DISPID_ISVGTRANSFORM_ANGLE = 1002;
	public const uint32 DISPID_ISVGTRANSFORM_SETMATRIX = 1003;
	public const uint32 DISPID_ISVGTRANSFORM_SETTRANSLATE = 1004;
	public const uint32 DISPID_ISVGTRANSFORM_SETSCALE = 1005;
	public const uint32 DISPID_ISVGTRANSFORM_SETROTATE = 1006;
	public const uint32 DISPID_ISVGTRANSFORM_SETSKEWX = 1007;
	public const uint32 DISPID_ISVGTRANSFORM_SETSKEWY = 1008;
	public const uint32 DISPID_ISVGSVGELEMENT_X = 1052;
	public const uint32 DISPID_ISVGSVGELEMENT_Y = 1054;
	public const uint32 DISPID_ISVGSVGELEMENT_WIDTH = 1056;
	public const uint32 DISPID_ISVGSVGELEMENT_HEIGHT = 1058;
	public const uint32 DISPID_ISVGSVGELEMENT_CONTENTSCRIPTTYPE = 1059;
	public const uint32 DISPID_ISVGSVGELEMENT_CONTENTSTYLETYPE = 1060;
	public const uint32 DISPID_ISVGSVGELEMENT_VIEWPORT = 1061;
	public const uint32 DISPID_ISVGSVGELEMENT_PIXELUNITTOMILLIMETERX = 1062;
	public const uint32 DISPID_ISVGSVGELEMENT_PIXELUNITTOMILLIMETERY = 1063;
	public const uint32 DISPID_ISVGSVGELEMENT_SCREENPIXELTOMILLIMETERX = 1064;
	public const uint32 DISPID_ISVGSVGELEMENT_SCREENPIXELTOMILLIMETERY = 1065;
	public const uint32 DISPID_ISVGSVGELEMENT_USECURRENTVIEW = 1066;
	public const uint32 DISPID_ISVGSVGELEMENT_CURRENTVIEW = 1067;
	public const uint32 DISPID_ISVGSVGELEMENT_CURRENTSCALE = 1068;
	public const uint32 DISPID_ISVGSVGELEMENT_CURRENTTRANSLATE = 1069;
	public const uint32 DISPID_ISVGSVGELEMENT_SUSPENDREDRAW = 1070;
	public const uint32 DISPID_ISVGSVGELEMENT_UNSUSPENDREDRAW = 1071;
	public const uint32 DISPID_ISVGSVGELEMENT_UNSUSPENDREDRAWALL = 1072;
	public const uint32 DISPID_ISVGSVGELEMENT_FORCEREDRAW = 1073;
	public const uint32 DISPID_ISVGSVGELEMENT_PAUSEANIMATIONS = 1074;
	public const uint32 DISPID_ISVGSVGELEMENT_UNPAUSEANIMATIONS = 1075;
	public const uint32 DISPID_ISVGSVGELEMENT_ANIMATIONSPAUSED = 1076;
	public const uint32 DISPID_ISVGSVGELEMENT_GETCURRENTTIME = 1077;
	public const uint32 DISPID_ISVGSVGELEMENT_SETCURRENTTIME = 1078;
	public const uint32 DISPID_ISVGSVGELEMENT_GETINTERSECTIONLIST = 1079;
	public const uint32 DISPID_ISVGSVGELEMENT_GETENCLOSURELIST = 1080;
	public const uint32 DISPID_ISVGSVGELEMENT_CHECKINTERSECTION = 1081;
	public const uint32 DISPID_ISVGSVGELEMENT_CHECKENCLOSURE = 1082;
	public const uint32 DISPID_ISVGSVGELEMENT_DESELECTALL = 1083;
	public const uint32 DISPID_ISVGSVGELEMENT_CREATESVGNUMBER = 1084;
	public const uint32 DISPID_ISVGSVGELEMENT_CREATESVGLENGTH = 1085;
	public const uint32 DISPID_ISVGSVGELEMENT_CREATESVGANGLE = 1086;
	public const uint32 DISPID_ISVGSVGELEMENT_CREATESVGPOINT = 1087;
	public const uint32 DISPID_ISVGSVGELEMENT_CREATESVGMATRIX = 1088;
	public const uint32 DISPID_ISVGSVGELEMENT_CREATESVGRECT = 1089;
	public const uint32 DISPID_ISVGSVGELEMENT_CREATESVGTRANSFORM = 1090;
	public const uint32 DISPID_ISVGSVGELEMENT_CREATESVGTRANSFORMFROMMATRIX = 1091;
	public const uint32 DISPID_ISVGSVGELEMENT_GETELEMENTBYID = 1092;
	public const uint32 DISPID_ISVGUSEELEMENT_X = 1052;
	public const uint32 DISPID_ISVGUSEELEMENT_Y = 1054;
	public const uint32 DISPID_ISVGUSEELEMENT_WIDTH = 1056;
	public const uint32 DISPID_ISVGUSEELEMENT_HEIGHT = 1058;
	public const uint32 DISPID_ISVGUSEELEMENT_INSTANCEROOT = 1059;
	public const uint32 DISPID_ISVGUSEELEMENT_ANIMATEDINSTANCEROOT = 1060;
	public const uint32 DISPID_IHTMLSTYLESHEETRULESAPPLIEDCOLLECTION_ITEM = 0;
	public const uint32 DISPID_IHTMLSTYLESHEETRULESAPPLIEDCOLLECTION_LENGTH = 1001;
	public const uint32 DISPID_IHTMLSTYLESHEETRULESAPPLIEDCOLLECTION_PROPERTYAPPLIEDBY = 1002;
	public const uint32 DISPID_IHTMLSTYLESHEETRULESAPPLIEDCOLLECTION_PROPERTYAPPLIEDTRACE = 1004;
	public const uint32 DISPID_IHTMLSTYLESHEETRULESAPPLIEDCOLLECTION_PROPERTYAPPLIEDTRACELENGTH = 1005;
	public const uint32 DISPID_IRULESAPPLIED_ELEMENT = 1001;
	public const uint32 DISPID_IRULESAPPLIED_INLINESTYLES = 1002;
	public const uint32 DISPID_IRULESAPPLIED_APPLIEDRULES = 1003;
	public const uint32 DISPID_IRULESAPPLIED_PROPERTYISINLINE = 1004;
	public const uint32 DISPID_IRULESAPPLIED_PROPERTYISINHERITABLE = 1005;
	public const uint32 DISPID_IRULESAPPLIED_HASINHERITABLEPROPERTY = 1006;
	public const uint32 DISPID_IRULESAPPLIEDCOLLECTION_ITEM = 0;
	public const uint32 DISPID_IRULESAPPLIEDCOLLECTION_LENGTH = 1001;
	public const uint32 DISPID_IRULESAPPLIEDCOLLECTION_ELEMENT = 1002;
	public const uint32 DISPID_IRULESAPPLIEDCOLLECTION_PROPERTYINHERITEDFROM = 1003;
	public const uint32 DISPID_IRULESAPPLIEDCOLLECTION_PROPERTYCOUNT = 1004;
	public const uint32 DISPID_IRULESAPPLIEDCOLLECTION_PROPERTY = 1005;
	public const uint32 DISPID_IRULESAPPLIEDCOLLECTION_PROPERTYINHERITEDTRACE = 1006;
	public const uint32 DISPID_IRULESAPPLIEDCOLLECTION_PROPERTYINHERITEDTRACELENGTH = 1007;
	public const uint32 DISPID_ISVGTRANSFORMLIST_NUMBEROFITEMS = 1000;
	public const uint32 DISPID_ISVGTRANSFORMLIST_CLEAR = 1001;
	public const uint32 DISPID_ISVGTRANSFORMLIST_INITIALIZE = 1002;
	public const uint32 DISPID_ISVGTRANSFORMLIST_GETITEM = 1003;
	public const uint32 DISPID_ISVGTRANSFORMLIST_INSERTITEMBEFORE = 1004;
	public const uint32 DISPID_ISVGTRANSFORMLIST_REPLACEITEM = 1005;
	public const uint32 DISPID_ISVGTRANSFORMLIST_REMOVEITEM = 1006;
	public const uint32 DISPID_ISVGTRANSFORMLIST_APPENDITEM = 1007;
	public const uint32 DISPID_ISVGTRANSFORMLIST_CREATESVGTRANSFORMFROMMATRIX = 1008;
	public const uint32 DISPID_ISVGTRANSFORMLIST_CONSOLIDATE = 1009;
	public const uint32 DISPID_ISVGANIMATEDPOINTS_POINTS = 1050;
	public const uint32 DISPID_ISVGANIMATEDPOINTS_ANIMATEDPOINTS = 1052;
	public const uint32 DISPID_ISVGCIRCLEELEMENT_CX = 1052;
	public const uint32 DISPID_ISVGCIRCLEELEMENT_CY = 1054;
	public const uint32 DISPID_ISVGCIRCLEELEMENT_R = 1056;
	public const uint32 DISPID_ISVGELLIPSEELEMENT_CX = 1052;
	public const uint32 DISPID_ISVGELLIPSEELEMENT_CY = 1054;
	public const uint32 DISPID_ISVGELLIPSEELEMENT_RX = 1056;
	public const uint32 DISPID_ISVGELLIPSEELEMENT_RY = 1058;
	public const uint32 DISPID_ISVGLINEELEMENT_X1 = 1052;
	public const uint32 DISPID_ISVGLINEELEMENT_Y1 = 1054;
	public const uint32 DISPID_ISVGLINEELEMENT_X2 = 1056;
	public const uint32 DISPID_ISVGLINEELEMENT_Y2 = 1058;
	public const uint32 DISPID_ISVGRECTELEMENT_X = 1052;
	public const uint32 DISPID_ISVGRECTELEMENT_Y = 1054;
	public const uint32 DISPID_ISVGRECTELEMENT_WIDTH = 1056;
	public const uint32 DISPID_ISVGRECTELEMENT_HEIGHT = 1058;
	public const uint32 DISPID_ISVGRECTELEMENT_RX = 1060;
	public const uint32 DISPID_ISVGRECTELEMENT_RY = 1062;
	public const uint32 DISPID_ISVGANIMATEDPATHDATA_PATHSEGLIST = 1052;
	public const uint32 DISPID_ISVGANIMATEDPATHDATA_NORMALIZEDPATHSEGLIST = 1076;
	public const uint32 DISPID_ISVGANIMATEDPATHDATA_ANIMATEDPATHSEGLIST = 1077;
	public const uint32 DISPID_ISVGANIMATEDPATHDATA_ANIMATEDNORMALIZEDPATHSEGLIST = 1078;
	public const uint32 DISPID_ISVGPATHELEMENT_PATHLENGTH = 1053;
	public const uint32 DISPID_ISVGPATHELEMENT_GETTOTALLENGTH = 1073;
	public const uint32 DISPID_ISVGPATHELEMENT_GETPOINTATLENGTH = 1074;
	public const uint32 DISPID_ISVGPATHELEMENT_GETPATHSEGATLENGTH = 1075;
	public const uint32 DISPID_ISVGPATHELEMENT_CREATESVGPATHSEGCLOSEPATH = 1054;
	public const uint32 DISPID_ISVGPATHELEMENT_CREATESVGPATHSEGMOVETOABS = 1055;
	public const uint32 DISPID_ISVGPATHELEMENT_CREATESVGPATHSEGMOVETOREL = 1056;
	public const uint32 DISPID_ISVGPATHELEMENT_CREATESVGPATHSEGLINETOABS = 1057;
	public const uint32 DISPID_ISVGPATHELEMENT_CREATESVGPATHSEGLINETOREL = 1058;
	public const uint32 DISPID_ISVGPATHELEMENT_CREATESVGPATHSEGCURVETOCUBICABS = 1059;
	public const uint32 DISPID_ISVGPATHELEMENT_CREATESVGPATHSEGCURVETOCUBICREL = 1060;
	public const uint32 DISPID_ISVGPATHELEMENT_CREATESVGPATHSEGCURVETOQUADRATICABS = 1061;
	public const uint32 DISPID_ISVGPATHELEMENT_CREATESVGPATHSEGCURVETOQUADRATICREL = 1062;
	public const uint32 DISPID_ISVGPATHELEMENT_CREATESVGPATHSEGARCABS = 1063;
	public const uint32 DISPID_ISVGPATHELEMENT_CREATESVGPATHSEGARCREL = 1064;
	public const uint32 DISPID_ISVGPATHELEMENT_CREATESVGPATHSEGLINETOHORIZONTALABS = 1065;
	public const uint32 DISPID_ISVGPATHELEMENT_CREATESVGPATHSEGLINETOHORIZONTALREL = 1066;
	public const uint32 DISPID_ISVGPATHELEMENT_CREATESVGPATHSEGLINETOVERTICALABS = 1067;
	public const uint32 DISPID_ISVGPATHELEMENT_CREATESVGPATHSEGLINETOVERTICALREL = 1068;
	public const uint32 DISPID_ISVGPATHELEMENT_CREATESVGPATHSEGCURVETOCUBICSMOOTHABS = 1069;
	public const uint32 DISPID_ISVGPATHELEMENT_CREATESVGPATHSEGCURVETOCUBICSMOOTHREL = 1070;
	public const uint32 DISPID_ISVGPATHELEMENT_CREATESVGPATHSEGCURVETOQUADRATICSMOOTHABS = 1071;
	public const uint32 DISPID_ISVGPATHELEMENT_CREATESVGPATHSEGCURVETOQUADRATICSMOOTHREL = 1072;
	public const uint32 DISPID_ISVGPRESERVEASPECTRATIO_ALIGN = 1000;
	public const uint32 DISPID_ISVGPRESERVEASPECTRATIO_MEETORSLICE = 1001;
	public const uint32 DISPID_ISVGANIMATEDPRESERVEASPECTRATIO_BASEVAL = 1000;
	public const uint32 DISPID_ISVGANIMATEDPRESERVEASPECTRATIO_ANIMVAL = 1001;
	public const uint32 DISPID_ISVGIMAGEELEMENT_X = 1051;
	public const uint32 DISPID_ISVGIMAGEELEMENT_Y = 1053;
	public const uint32 DISPID_ISVGIMAGEELEMENT_WIDTH = 1055;
	public const uint32 DISPID_ISVGIMAGEELEMENT_HEIGHT = 1057;
	public const uint32 DISPID_ISVGSTOPELEMENT_OFFSET = 1051;
	public const uint32 DISPID_ISVGGRADIENTELEMENT_GRADIENTUNITS = 1051;
	public const uint32 DISPID_ISVGGRADIENTELEMENT_GRADIENTTRANSFORM = 1053;
	public const uint32 DISPID_ISVGGRADIENTELEMENT_SPREADMETHOD = 1055;
	public const uint32 DISPID_ISVGLINEARGRADIENTELEMENT_X1 = 1071;
	public const uint32 DISPID_ISVGLINEARGRADIENTELEMENT_Y1 = 1073;
	public const uint32 DISPID_ISVGLINEARGRADIENTELEMENT_X2 = 1075;
	public const uint32 DISPID_ISVGLINEARGRADIENTELEMENT_Y2 = 1077;
	public const uint32 DISPID_ISVGRADIALGRADIENTELEMENT_CX = 1071;
	public const uint32 DISPID_ISVGRADIALGRADIENTELEMENT_CY = 1073;
	public const uint32 DISPID_ISVGRADIALGRADIENTELEMENT_R = 1075;
	public const uint32 DISPID_ISVGRADIALGRADIENTELEMENT_FX = 1077;
	public const uint32 DISPID_ISVGRADIALGRADIENTELEMENT_FY = 1079;
	public const uint32 DISPID_ISVGMASKELEMENT_MASKUNITS = 1051;
	public const uint32 DISPID_ISVGMASKELEMENT_MASKCONTENTUNITS = 1053;
	public const uint32 DISPID_ISVGMASKELEMENT_X = 1055;
	public const uint32 DISPID_ISVGMASKELEMENT_Y = 1057;
	public const uint32 DISPID_ISVGMASKELEMENT_WIDTH = 1059;
	public const uint32 DISPID_ISVGMASKELEMENT_HEIGHT = 1061;
	public const uint32 DISPID_ISVGMARKERELEMENT_REFX = 1051;
	public const uint32 DISPID_ISVGMARKERELEMENT_REFY = 1053;
	public const uint32 DISPID_ISVGMARKERELEMENT_MARKERUNITS = 1055;
	public const uint32 DISPID_ISVGMARKERELEMENT_MARKERWIDTH = 1057;
	public const uint32 DISPID_ISVGMARKERELEMENT_MARKERHEIGHT = 1059;
	public const uint32 DISPID_ISVGMARKERELEMENT_ORIENTTYPE = 1061;
	public const uint32 DISPID_ISVGMARKERELEMENT_ORIENTANGLE = 1062;
	public const uint32 DISPID_ISVGMARKERELEMENT_SETORIENTTOAUTO = 1063;
	public const uint32 DISPID_ISVGMARKERELEMENT_SETORIENTTOANGLE = 1064;
	public const uint32 DISPID_ISVGZOOMEVENT_ZOOMRECTSCREEN = 1276;
	public const uint32 DISPID_ISVGZOOMEVENT_PREVIOUSSCALE = 1277;
	public const uint32 DISPID_ISVGZOOMEVENT_PREVIOUSTRANSLATE = 1278;
	public const uint32 DISPID_ISVGZOOMEVENT_NEWSCALE = 1279;
	public const uint32 DISPID_ISVGZOOMEVENT_NEWTRANSLATE = 1280;
	public const uint32 DISPID_ISVGAELEMENT_TARGET = 1052;
	public const uint32 DISPID_ISVGVIEWELEMENT_VIEWTARGET = 1052;
	public const uint32 DISPID_IHTMLMEDIAERROR_CODE = 1000;
	public const uint32 DISPID_IHTMLTIMERANGES_LENGTH = 1000;
	public const uint32 DISPID_IHTMLTIMERANGES_START = 1001;
	public const uint32 DISPID_IHTMLTIMERANGES_END = 1002;
	public const uint32 DISPID_IHTMLTIMERANGES2_STARTDOUBLE = 1003;
	public const uint32 DISPID_IHTMLTIMERANGES2_ENDDOUBLE = 1004;
	public const uint32 DISPID_IHTMLMEDIAELEMENT_ERROR = 1000;
	public const uint32 DISPID_IHTMLMEDIAELEMENT_SRC = 1001;
	public const uint32 DISPID_IHTMLMEDIAELEMENT_CURRENTSRC = 1002;
	public const uint32 DISPID_IHTMLMEDIAELEMENT_NETWORKSTATE = 1003;
	public const uint32 DISPID_IHTMLMEDIAELEMENT_PRELOAD = 1004;
	public const uint32 DISPID_IHTMLMEDIAELEMENT_BUFFERED = 1005;
	public const uint32 DISPID_IHTMLMEDIAELEMENT_LOAD = 1006;
	public const uint32 DISPID_IHTMLMEDIAELEMENT_CANPLAYTYPE = 1007;
	public const uint32 DISPID_IHTMLMEDIAELEMENT_SEEKING = 1009;
	public const uint32 DISPID_IHTMLMEDIAELEMENT_CURRENTTIME = 1010;
	public const uint32 DISPID_IHTMLMEDIAELEMENT_INITIALTIME = 1011;
	public const uint32 DISPID_IHTMLMEDIAELEMENT_DURATION = 1012;
	public const uint32 DISPID_IHTMLMEDIAELEMENT_PAUSED = 1013;
	public const uint32 DISPID_IHTMLMEDIAELEMENT_DEFAULTPLAYBACKRATE = 1014;
	public const uint32 DISPID_IHTMLMEDIAELEMENT_PLAYBACKRATE = 1015;
	public const uint32 DISPID_IHTMLMEDIAELEMENT_PLAYED = 1016;
	public const uint32 DISPID_IHTMLMEDIAELEMENT_SEEKABLE = 1017;
	public const uint32 DISPID_IHTMLMEDIAELEMENT_ENDED = 1018;
	public const uint32 DISPID_IHTMLMEDIAELEMENT_AUTOPLAY = 1019;
	public const uint32 DISPID_IHTMLMEDIAELEMENT_LOOP = 1020;
	public const uint32 DISPID_IHTMLMEDIAELEMENT_PLAY = 1021;
	public const uint32 DISPID_IHTMLMEDIAELEMENT_PAUSE = 1022;
	public const uint32 DISPID_IHTMLMEDIAELEMENT_CONTROLS = 1023;
	public const uint32 DISPID_IHTMLMEDIAELEMENT_VOLUME = 1024;
	public const uint32 DISPID_IHTMLMEDIAELEMENT_MUTED = 1025;
	public const uint32 DISPID_IHTMLMEDIAELEMENT_AUTOBUFFER = 1026;
	public const uint32 DISPID_IHTMLMEDIAELEMENT2_CURRENTTIMEDOUBLE = 1027;
	public const uint32 DISPID_IHTMLMEDIAELEMENT2_INITIALTIMEDOUBLE = 1028;
	public const uint32 DISPID_IHTMLMEDIAELEMENT2_DURATIONDOUBLE = 1029;
	public const uint32 DISPID_IHTMLMEDIAELEMENT2_DEFAULTPLAYBACKRATEDOUBLE = 1030;
	public const uint32 DISPID_IHTMLMEDIAELEMENT2_PLAYBACKRATEDOUBLE = 1031;
	public const uint32 DISPID_IHTMLMEDIAELEMENT2_VOLUMEDOUBLE = 1032;
	public const uint32 DISPID_IHTMLMSMEDIAELEMENT_MSPLAYTODISABLED = 1033;
	public const uint32 DISPID_IHTMLMSMEDIAELEMENT_MSPLAYTOPRIMARY = 1034;
	public const uint32 DISPID_IHTMLSOURCEELEMENT_SRC = 1000;
	public const uint32 DISPID_IHTMLSOURCEELEMENT_TYPE = 1001;
	public const uint32 DISPID_IHTMLSOURCEELEMENT_MEDIA = 1002;
	public const uint32 DISPID_IHTMLVIDEOELEMENT_WIDTH = 65541;
	public const uint32 DISPID_IHTMLVIDEOELEMENT_HEIGHT = 65542;
	public const uint32 DISPID_IHTMLVIDEOELEMENT_VIDEOWIDTH = 1050;
	public const uint32 DISPID_IHTMLVIDEOELEMENT_VIDEOHEIGHT = 1051;
	public const uint32 DISPID_IHTMLVIDEOELEMENT_POSTER = 1052;
	public const uint32 DISPID_IHTMLAUDIOELEMENTFACTORY_CREATE = 0;
	public const uint32 DISPID_ISVGELEMENTINSTANCE_CORRESPONDINGELEMENT = 1000;
	public const uint32 DISPID_ISVGELEMENTINSTANCE_CORRESPONDINGUSEELEMENT = 1001;
	public const uint32 DISPID_ISVGELEMENTINSTANCE_PARENTNODE = 1002;
	public const uint32 DISPID_ISVGELEMENTINSTANCE_CHILDNODES = 1003;
	public const uint32 DISPID_ISVGELEMENTINSTANCE_FIRSTCHILD = 1004;
	public const uint32 DISPID_ISVGELEMENTINSTANCE_LASTCHILD = 1005;
	public const uint32 DISPID_ISVGELEMENTINSTANCE_PREVIOUSSIBLING = 1006;
	public const uint32 DISPID_ISVGELEMENTINSTANCE_NEXTSIBLING = 1007;
	public const uint32 DISPID_ISVGELEMENTINSTANCELIST_LENGTH = 1000;
	public const uint32 DISPID_ISVGELEMENTINSTANCELIST_ITEM = 1001;
	public const uint32 DISPID_IDOMEXCEPTION_CODE = 1000;
	public const uint32 DISPID_IDOMEXCEPTION_MESSAGE = 1001;
	public const uint32 DISPID_IRANGEEXCEPTION_CODE = 1000;
	public const uint32 DISPID_IRANGEEXCEPTION_MESSAGE = 1001;
	public const uint32 DISPID_ISVGEXCEPTION_CODE = 1000;
	public const uint32 DISPID_ISVGEXCEPTION_MESSAGE = 1001;
	public const uint32 DISPID_IEVENTEXCEPTION_CODE = 1000;
	public const uint32 DISPID_IEVENTEXCEPTION_MESSAGE = 1001;
	public const uint32 DISPID_ISVGSCRIPTELEMENT_TYPE = 1052;
	public const uint32 DISPID_ISVGSTYLEELEMENT_TYPE = 1051;
	public const uint32 DISPID_ISVGSTYLEELEMENT_MEDIA = 1052;
	public const uint32 DISPID_ISVGTEXTCONTENTELEMENT_TEXTLENGTH = 1053;
	public const uint32 DISPID_ISVGTEXTCONTENTELEMENT_LENGTHADJUST = 1051;
	public const uint32 DISPID_ISVGTEXTCONTENTELEMENT_GETNUMBEROFCHARS = 1054;
	public const uint32 DISPID_ISVGTEXTCONTENTELEMENT_GETCOMPUTEDTEXTLENGTH = 1055;
	public const uint32 DISPID_ISVGTEXTCONTENTELEMENT_GETSUBSTRINGLENGTH = 1056;
	public const uint32 DISPID_ISVGTEXTCONTENTELEMENT_GETSTARTPOSITIONOFCHAR = 1057;
	public const uint32 DISPID_ISVGTEXTCONTENTELEMENT_GETENDPOSITIONOFCHAR = 1058;
	public const uint32 DISPID_ISVGTEXTCONTENTELEMENT_GETEXTENTOFCHAR = 1059;
	public const uint32 DISPID_ISVGTEXTCONTENTELEMENT_GETROTATIONOFCHAR = 1060;
	public const uint32 DISPID_ISVGTEXTCONTENTELEMENT_GETCHARNUMATPOSITION = 1061;
	public const uint32 DISPID_ISVGTEXTCONTENTELEMENT_SELECTSUBSTRING = 1062;
	public const uint32 DISPID_ISVGTEXTPOSITIONINGELEMENT_X = 1071;
	public const uint32 DISPID_ISVGTEXTPOSITIONINGELEMENT_Y = 1073;
	public const uint32 DISPID_ISVGTEXTPOSITIONINGELEMENT_DX = 1075;
	public const uint32 DISPID_ISVGTEXTPOSITIONINGELEMENT_DY = 1077;
	public const uint32 DISPID_ISVGTEXTPOSITIONINGELEMENT_ROTATE = 1079;
	public const uint32 DISPID_IDOMDOCUMENTTYPE_NAME = 1000;
	public const uint32 DISPID_IDOMDOCUMENTTYPE_ENTITIES = 1001;
	public const uint32 DISPID_IDOMDOCUMENTTYPE_NOTATIONS = 1002;
	public const uint32 DISPID_IDOMDOCUMENTTYPE_PUBLICID = 1003;
	public const uint32 DISPID_IDOMDOCUMENTTYPE_SYSTEMID = 1004;
	public const uint32 DISPID_IDOMDOCUMENTTYPE_INTERNALSUBSET = 1005;
	public const uint32 DISPID_IDOMNODEITERATOR_ROOT = 1000;
	public const uint32 DISPID_IDOMNODEITERATOR_WHATTOSHOW = 1001;
	public const uint32 DISPID_IDOMNODEITERATOR_FILTER = 1002;
	public const uint32 DISPID_IDOMNODEITERATOR_EXPANDENTITYREFERENCES = 1003;
	public const uint32 DISPID_IDOMNODEITERATOR_NEXTNODE = 1010;
	public const uint32 DISPID_IDOMNODEITERATOR_PREVIOUSNODE = 1011;
	public const uint32 DISPID_IDOMNODEITERATOR_DETACH = 1012;
	public const uint32 DISPID_IDOMTREEWALKER_ROOT = 1000;
	public const uint32 DISPID_IDOMTREEWALKER_WHATTOSHOW = 1001;
	public const uint32 DISPID_IDOMTREEWALKER_FILTER = 1002;
	public const uint32 DISPID_IDOMTREEWALKER_EXPANDENTITYREFERENCES = 1003;
	public const uint32 DISPID_IDOMTREEWALKER_CURRENTNODE = 1020;
	public const uint32 DISPID_IDOMTREEWALKER_PARENTNODE = 1021;
	public const uint32 DISPID_IDOMTREEWALKER_FIRSTCHILD = 1022;
	public const uint32 DISPID_IDOMTREEWALKER_LASTCHILD = 1023;
	public const uint32 DISPID_IDOMTREEWALKER_PREVIOUSSIBLING = 1024;
	public const uint32 DISPID_IDOMTREEWALKER_NEXTSIBLING = 1025;
	public const uint32 DISPID_IDOMTREEWALKER_PREVIOUSNODE = 1026;
	public const uint32 DISPID_IDOMTREEWALKER_NEXTNODE = 1027;
	public const uint32 DISPID_IDOMPROCESSINGINSTRUCTION_TARGET = 1000;
	public const uint32 DISPID_IDOMPROCESSINGINSTRUCTION_DATA = 1001;
	public const uint32 DISPID_IHTMLPERFORMANCE_NAVIGATION = 1000;
	public const uint32 DISPID_IHTMLPERFORMANCE_TIMING = 1001;
	public const uint32 DISPID_IHTMLPERFORMANCE_TOSTRING = 1002;
	public const uint32 DISPID_IHTMLPERFORMANCE_TOJSON = 1003;
	public const uint32 DISPID_IHTMLPERFORMANCENAVIGATION_TYPE = 1000;
	public const uint32 DISPID_IHTMLPERFORMANCENAVIGATION_REDIRECTCOUNT = 1001;
	public const uint32 DISPID_IHTMLPERFORMANCENAVIGATION_TOSTRING = 1002;
	public const uint32 DISPID_IHTMLPERFORMANCENAVIGATION_TOJSON = 1003;
	public const uint32 DISPID_IHTMLPERFORMANCETIMING_NAVIGATIONSTART = 1000;
	public const uint32 DISPID_IHTMLPERFORMANCETIMING_UNLOADEVENTSTART = 1001;
	public const uint32 DISPID_IHTMLPERFORMANCETIMING_UNLOADEVENTEND = 1002;
	public const uint32 DISPID_IHTMLPERFORMANCETIMING_REDIRECTSTART = 1003;
	public const uint32 DISPID_IHTMLPERFORMANCETIMING_REDIRECTEND = 1004;
	public const uint32 DISPID_IHTMLPERFORMANCETIMING_FETCHSTART = 1005;
	public const uint32 DISPID_IHTMLPERFORMANCETIMING_DOMAINLOOKUPSTART = 1006;
	public const uint32 DISPID_IHTMLPERFORMANCETIMING_DOMAINLOOKUPEND = 1007;
	public const uint32 DISPID_IHTMLPERFORMANCETIMING_CONNECTSTART = 1008;
	public const uint32 DISPID_IHTMLPERFORMANCETIMING_CONNECTEND = 1009;
	public const uint32 DISPID_IHTMLPERFORMANCETIMING_REQUESTSTART = 1010;
	public const uint32 DISPID_IHTMLPERFORMANCETIMING_RESPONSESTART = 1011;
	public const uint32 DISPID_IHTMLPERFORMANCETIMING_RESPONSEEND = 1012;
	public const uint32 DISPID_IHTMLPERFORMANCETIMING_DOMLOADING = 1013;
	public const uint32 DISPID_IHTMLPERFORMANCETIMING_DOMINTERACTIVE = 1014;
	public const uint32 DISPID_IHTMLPERFORMANCETIMING_DOMCONTENTLOADEDEVENTSTART = 1015;
	public const uint32 DISPID_IHTMLPERFORMANCETIMING_DOMCONTENTLOADEDEVENTEND = 1016;
	public const uint32 DISPID_IHTMLPERFORMANCETIMING_DOMCOMPLETE = 1017;
	public const uint32 DISPID_IHTMLPERFORMANCETIMING_LOADEVENTSTART = 1018;
	public const uint32 DISPID_IHTMLPERFORMANCETIMING_LOADEVENTEND = 1019;
	public const uint32 DISPID_IHTMLPERFORMANCETIMING_MSFIRSTPAINT = 1020;
	public const uint32 DISPID_IHTMLPERFORMANCETIMING_TOSTRING = 1021;
	public const uint32 DISPID_IHTMLPERFORMANCETIMING_TOJSON = 1022;
	public const uint32 DISPID_ITEMPLATEPRINTER_STARTDOC = 1;
	public const uint32 DISPID_ITEMPLATEPRINTER_STOPDOC = 2;
	public const uint32 DISPID_ITEMPLATEPRINTER_PRINTBLANKPAGE = 3;
	public const uint32 DISPID_ITEMPLATEPRINTER_PRINTPAGE = 4;
	public const uint32 DISPID_ITEMPLATEPRINTER_ENSUREPRINTDIALOGDEFAULTS = 5;
	public const uint32 DISPID_ITEMPLATEPRINTER_SHOWPRINTDIALOG = 6;
	public const uint32 DISPID_ITEMPLATEPRINTER_SHOWPAGESETUPDIALOG = 7;
	public const uint32 DISPID_ITEMPLATEPRINTER_PRINTNONNATIVE = 8;
	public const uint32 DISPID_ITEMPLATEPRINTER_PRINTNONNATIVEFRAMES = 9;
	public const uint32 DISPID_ITEMPLATEPRINTER_FRAMESETDOCUMENT = 10;
	public const uint32 DISPID_ITEMPLATEPRINTER_FRAMEACTIVE = 11;
	public const uint32 DISPID_ITEMPLATEPRINTER_FRAMEASSHOWN = 12;
	public const uint32 DISPID_ITEMPLATEPRINTER_SELECTION = 13;
	public const uint32 DISPID_ITEMPLATEPRINTER_SELECTEDPAGES = 14;
	public const uint32 DISPID_ITEMPLATEPRINTER_CURRENTPAGE = 15;
	public const uint32 DISPID_ITEMPLATEPRINTER_CURRENTPAGEAVAIL = 16;
	public const uint32 DISPID_ITEMPLATEPRINTER_COLLATE = 17;
	public const uint32 DISPID_ITEMPLATEPRINTER_DUPLEX = 18;
	public const uint32 DISPID_ITEMPLATEPRINTER_COPIES = 19;
	public const uint32 DISPID_ITEMPLATEPRINTER_PAGEFROM = 20;
	public const uint32 DISPID_ITEMPLATEPRINTER_PAGETO = 21;
	public const uint32 DISPID_ITEMPLATEPRINTER_TABLEOFLINKS = 22;
	public const uint32 DISPID_ITEMPLATEPRINTER_ALLLINKEDDOCUMENTS = 23;
	public const uint32 DISPID_ITEMPLATEPRINTER_HEADER = 24;
	public const uint32 DISPID_ITEMPLATEPRINTER_FOOTER = 25;
	public const uint32 DISPID_ITEMPLATEPRINTER_MARGINLEFT = 26;
	public const uint32 DISPID_ITEMPLATEPRINTER_MARGINRIGHT = 27;
	public const uint32 DISPID_ITEMPLATEPRINTER_MARGINTOP = 28;
	public const uint32 DISPID_ITEMPLATEPRINTER_MARGINBOTTOM = 29;
	public const uint32 DISPID_ITEMPLATEPRINTER_PAGEWIDTH = 30;
	public const uint32 DISPID_ITEMPLATEPRINTER_PAGEHEIGHT = 31;
	public const uint32 DISPID_ITEMPLATEPRINTER_UNPRINTABLELEFT = 32;
	public const uint32 DISPID_ITEMPLATEPRINTER_UNPRINTABLETOP = 33;
	public const uint32 DISPID_ITEMPLATEPRINTER_UNPRINTABLERIGHT = 34;
	public const uint32 DISPID_ITEMPLATEPRINTER_UNPRINTABLEBOTTOM = 35;
	public const uint32 DISPID_ITEMPLATEPRINTER_UPDATEPAGESTATUS = 36;
	public const uint32 DISPID_ITEMPLATEPRINTER2_SELECTIONENABLED = 37;
	public const uint32 DISPID_ITEMPLATEPRINTER2_FRAMEACTIVEENABLED = 38;
	public const uint32 DISPID_ITEMPLATEPRINTER2_ORIENTATION = 39;
	public const uint32 DISPID_ITEMPLATEPRINTER2_USEPRINTERCOPYCOLLATE = 40;
	public const uint32 DISPID_ITEMPLATEPRINTER2_DEVICESUPPORTS = 41;
	public const uint32 DISPID_ITEMPLATEPRINTER3_HEADERFOOTERFONT = 42;
	public const uint32 DISPID_ITEMPLATEPRINTER3_GETPAGEMARGINTOP = 43;
	public const uint32 DISPID_ITEMPLATEPRINTER3_GETPAGEMARGINRIGHT = 44;
	public const uint32 DISPID_ITEMPLATEPRINTER3_GETPAGEMARGINBOTTOM = 45;
	public const uint32 DISPID_ITEMPLATEPRINTER3_GETPAGEMARGINLEFT = 46;
	public const uint32 DISPID_ITEMPLATEPRINTER3_GETPAGEMARGINTOPIMPORTANT = 47;
	public const uint32 DISPID_ITEMPLATEPRINTER3_GETPAGEMARGINRIGHTIMPORTANT = 48;
	public const uint32 DISPID_ITEMPLATEPRINTER3_GETPAGEMARGINBOTTOMIMPORTANT = 49;
	public const uint32 DISPID_ITEMPLATEPRINTER3_GETPAGEMARGINLEFTIMPORTANT = 50;
	public const uint32 DISPID_IPRINTMANAGERTEMPLATEPRINTER_STARTPRINT = 501;
	public const uint32 DISPID_IPRINTMANAGERTEMPLATEPRINTER_DRAWPREVIEWPAGE = 502;
	public const uint32 DISPID_IPRINTMANAGERTEMPLATEPRINTER_SETPAGECOUNT = 503;
	public const uint32 DISPID_IPRINTMANAGERTEMPLATEPRINTER_INVALIDATEPREVIEW = 504;
	public const uint32 DISPID_IPRINTMANAGERTEMPLATEPRINTER_GETPRINTTASKOPTIONVALUE = 505;
	public const uint32 DISPID_IPRINTMANAGERTEMPLATEPRINTER_ENDPRINT = 506;
	public const uint32 DISPID_IPRINTMANAGERTEMPLATEPRINTER2_SHOWHEADERFOOTER = 507;
	public const uint32 DISPID_IPRINTMANAGERTEMPLATEPRINTER2_SHRINKTOFIT = 508;
	public const uint32 DISPID_IPRINTMANAGERTEMPLATEPRINTER2_PERCENTSCALE = 509;
	public const uint32 DISPID_ISVGTEXTPATHELEMENT_STARTOFFSET = 1071;
	public const uint32 DISPID_ISVGTEXTPATHELEMENT_METHOD = 1073;
	public const uint32 DISPID_ISVGTEXTPATHELEMENT_SPACING = 1075;
	public const uint32 DISPID_IDOMXMLSERIALIZER_SERIALIZETOSTRING = 1000;
	public const uint32 DISPID_IDOMPARSER_PARSEFROMSTRING = 1000;
	public const uint32 DISPID_IDOMXMLSERIALIZERFACTORY_CREATE = 0;
	public const uint32 DISPID_IDOMPARSERFACTORY_CREATE = 0;
	public const uint32 DISPID_IHTMLPROGRESSELEMENT_VALUE = 0;
	public const uint32 DISPID_IHTMLPROGRESSELEMENT_MAX = 1000;
	public const uint32 DISPID_IHTMLPROGRESSELEMENT_POSITION = 1001;
	public const uint32 DISPID_IHTMLPROGRESSELEMENT_FORM = 67540;
	public const uint32 DISPID_IDOMMSTRANSITIONEVENT_PROPERTYNAME = 1476;
	public const uint32 DISPID_IDOMMSTRANSITIONEVENT_ELAPSEDTIME = 1477;
	public const uint32 DISPID_IDOMMSTRANSITIONEVENT_INITMSTRANSITIONEVENT = 1478;
	public const uint32 DISPID_IDOMMSANIMATIONEVENT_ANIMATIONNAME = 1501;
	public const uint32 DISPID_IDOMMSANIMATIONEVENT_ELAPSEDTIME = 1502;
	public const uint32 DISPID_IDOMMSANIMATIONEVENT_INITMSANIMATIONEVENT = 1503;
	public const uint32 DISPID_IWEBGEOLOCATION_GETCURRENTPOSITION = 1001;
	public const uint32 DISPID_IWEBGEOLOCATION_WATCHPOSITION = 1002;
	public const uint32 DISPID_IWEBGEOLOCATION_CLEARWATCH = 1003;
	public const uint32 DISPID_IWEBGEOCOORDINATES_LATITUDE = 1001;
	public const uint32 DISPID_IWEBGEOCOORDINATES_LONGITUDE = 1002;
	public const uint32 DISPID_IWEBGEOCOORDINATES_ALTITUDE = 1003;
	public const uint32 DISPID_IWEBGEOCOORDINATES_ACCURACY = 1004;
	public const uint32 DISPID_IWEBGEOCOORDINATES_ALTITUDEACCURACY = 1005;
	public const uint32 DISPID_IWEBGEOCOORDINATES_HEADING = 1006;
	public const uint32 DISPID_IWEBGEOCOORDINATES_SPEED = 1007;
	public const uint32 DISPID_IWEBGEOPOSITIONERROR_CODE = 1001;
	public const uint32 DISPID_IWEBGEOPOSITIONERROR_MESSAGE = 1002;
	public const uint32 DISPID_IWEBGEOPOSITION_COORDS = 1001;
	public const uint32 DISPID_IWEBGEOPOSITION_TIMESTAMP = 1002;
	public const uint32 DISPID_ICLIENTCAPS_JAVAENABLED = 1;
	public const uint32 DISPID_ICLIENTCAPS_COOKIEENABLED = 2;
	public const uint32 DISPID_ICLIENTCAPS_CPUCLASS = 3;
	public const uint32 DISPID_ICLIENTCAPS_SYSTEMLANGUAGE = 4;
	public const uint32 DISPID_ICLIENTCAPS_USERLANGUAGE = 5;
	public const uint32 DISPID_ICLIENTCAPS_PLATFORM = 6;
	public const uint32 DISPID_ICLIENTCAPS_CONNECTIONSPEED = 7;
	public const uint32 DISPID_ICLIENTCAPS_ONLINE = 8;
	public const uint32 DISPID_ICLIENTCAPS_COLORDEPTH = 9;
	public const uint32 DISPID_ICLIENTCAPS_BUFFERDEPTH = 10;
	public const uint32 DISPID_ICLIENTCAPS_WIDTH = 11;
	public const uint32 DISPID_ICLIENTCAPS_HEIGHT = 12;
	public const uint32 DISPID_ICLIENTCAPS_AVAILHEIGHT = 13;
	public const uint32 DISPID_ICLIENTCAPS_AVAILWIDTH = 14;
	public const uint32 DISPID_ICLIENTCAPS_CONNECTIONTYPE = 15;
	public const uint32 DISPID_ICLIENTCAPS_ISCOMPONENTINSTALLED = 16;
	public const uint32 DISPID_ICLIENTCAPS_GETCOMPONENTVERSION = 17;
	public const uint32 DISPID_ICLIENTCAPS_COMPAREVERSIONS = 18;
	public const uint32 DISPID_ICLIENTCAPS_ADDCOMPONENTREQUEST = 19;
	public const uint32 DISPID_ICLIENTCAPS_DOCOMPONENTREQUEST = 20;
	public const uint32 DISPID_ICLIENTCAPS_CLEARCOMPONENTREQUEST = 21;
	public const uint32 DISPID_IDOMMSMANIPULATIONEVENT_LASTSTATE = 1526;
	public const uint32 DISPID_IDOMMSMANIPULATIONEVENT_CURRENTSTATE = 1527;
	public const uint32 DISPID_IDOMMSMANIPULATIONEVENT_INITMSMANIPULATIONEVENT = 1528;
	public const uint32 DISPID_IDOMCLOSEEVENT_WASCLEAN = 1526;
	public const uint32 DISPID_IDOMCLOSEEVENT_INITCLOSEEVENT = 1529;
	public const uint32 DISPID_IHTMLAPPLICATIONCACHE_STATUS = 1001;
	public const uint32 DISPID_IHTMLAPPLICATIONCACHE_ONCHECKING = 71717;
	public const uint32 DISPID_IHTMLAPPLICATIONCACHE_ONERROR = 71565;
	public const uint32 DISPID_IHTMLAPPLICATIONCACHE_ONNOUPDATE = 71718;
	public const uint32 DISPID_IHTMLAPPLICATIONCACHE_ONDOWNLOADING = 71719;
	public const uint32 DISPID_IHTMLAPPLICATIONCACHE_ONPROGRESS = 71681;
	public const uint32 DISPID_IHTMLAPPLICATIONCACHE_ONUPDATEREADY = 71720;
	public const uint32 DISPID_IHTMLAPPLICATIONCACHE_ONCACHED = 71721;
	public const uint32 DISPID_IHTMLAPPLICATIONCACHE_ONOBSOLETE = 71722;
	public const uint32 DISPID_IHTMLAPPLICATIONCACHE_UPDATE = 1002;
	public const uint32 DISPID_IHTMLAPPLICATIONCACHE_SWAPCACHE = 1003;
	public const uint32 DISPID_IHTMLAPPLICATIONCACHE_ABORT = 1004;
	public const uint32 DISPID_ILINEINFO_X = 1001;
	public const uint32 DISPID_ILINEINFO_BASELINE = 1002;
	public const uint32 DISPID_ILINEINFO_TEXTDESCENT = 1003;
	public const uint32 DISPID_ILINEINFO_TEXTHEIGHT = 1004;
	public const uint32 DISPID_ILINEINFO_LINEDIRECTION = 1005;
	public const uint32 DISPID_IHTMLCOMPUTEDSTYLE_BOLD = 1001;
	public const uint32 DISPID_IHTMLCOMPUTEDSTYLE_ITALIC = 1002;
	public const uint32 DISPID_IHTMLCOMPUTEDSTYLE_UNDERLINE = 1003;
	public const uint32 DISPID_IHTMLCOMPUTEDSTYLE_OVERLINE = 1004;
	public const uint32 DISPID_IHTMLCOMPUTEDSTYLE_STRIKEOUT = 1005;
	public const uint32 DISPID_IHTMLCOMPUTEDSTYLE_SUBSCRIPT = 1006;
	public const uint32 DISPID_IHTMLCOMPUTEDSTYLE_SUPERSCRIPT = 1007;
	public const uint32 DISPID_IHTMLCOMPUTEDSTYLE_EXPLICITFACE = 1008;
	public const uint32 DISPID_IHTMLCOMPUTEDSTYLE_FONTWEIGHT = 1009;
	public const uint32 DISPID_IHTMLCOMPUTEDSTYLE_FONTSIZE = 1010;
	public const uint32 DISPID_IHTMLCOMPUTEDSTYLE_FONTNAME = 1011;
	public const uint32 DISPID_IHTMLCOMPUTEDSTYLE_HASBGCOLOR = 1012;
	public const uint32 DISPID_IHTMLCOMPUTEDSTYLE_TEXTCOLOR = 1013;
	public const uint32 DISPID_IHTMLCOMPUTEDSTYLE_BACKGROUNDCOLOR = 1014;
	public const uint32 DISPID_IHTMLCOMPUTEDSTYLE_PREFORMATTED = 1015;
	public const uint32 DISPID_IHTMLCOMPUTEDSTYLE_DIRECTION = 1016;
	public const uint32 DISPID_IHTMLCOMPUTEDSTYLE_BLOCKDIRECTION = 1017;
	public const uint32 DISPID_IHTMLCOMPUTEDSTYLE_OL = 1018;
	public const uint32 DISPID_IHTMLDLGSAFEHELPER_CHOOSECOLORDLG = 1;
	public const uint32 DISPID_IHTMLDLGSAFEHELPER_GETCHARSET = 2;
	public const uint32 DISPID_IHTMLDLGSAFEHELPER_FONTS = 3;
	public const uint32 DISPID_IHTMLDLGSAFEHELPER_BLOCKFORMATS = 4;
	public const int32 DISPID_IBLOCKFORMATS__NEWENUM = -4;
	public const uint32 DISPID_IBLOCKFORMATS_COUNT = 1;
	public const uint32 DISPID_IBLOCKFORMATS_ITEM = 0;
	public const int32 DISPID_IFONTNAMES__NEWENUM = -4;
	public const uint32 DISPID_IFONTNAMES_COUNT = 1;
	public const uint32 DISPID_IFONTNAMES_ITEM = 0;
	public const uint32 DISPID_IHTMLNAMESPACE_NAME = 1000;
	public const uint32 DISPID_IHTMLNAMESPACE_URN = 1001;
	public const uint32 DISPID_IHTMLNAMESPACE_TAGNAMES = 1002;
	public const uint32 DISPID_IHTMLNAMESPACE_READYSTATE = 70652;
	public const uint32 DISPID_IHTMLNAMESPACE_ONREADYSTATECHANGE = 71561;
	public const uint32 DISPID_IHTMLNAMESPACE_DOIMPORT = 1003;
	public const uint32 DISPID_IHTMLNAMESPACE_ATTACHEVENT = 66043;
	public const uint32 DISPID_IHTMLNAMESPACE_DETACHEVENT = 66044;
	public const uint32 DISPID_IHTMLNAMESPACECOLLECTION_LENGTH = 1000;
	public const uint32 DISPID_IHTMLNAMESPACECOLLECTION_ITEM = 0;
	public const uint32 DISPID_IHTMLNAMESPACECOLLECTION_ADD = 1001;
	public const int32 DISPID_HTMLNAMESPACEEVENTS_ONREADYSTATECHANGE = -609;
	public const uint32 DISPID_IHTMLIPRINTCOLLECTION_LENGTH = 1501;
	public const int32 DISPID_IHTMLIPRINTCOLLECTION__NEWENUM = -4;
	public const uint32 DISPID_IHTMLIPRINTCOLLECTION_ITEM = 0;
	public const uint32 DISPID_IHTMLDIALOG_DIALOGTOP = 65540;
	public const uint32 DISPID_IHTMLDIALOG_DIALOGLEFT = 65539;
	public const uint32 DISPID_IHTMLDIALOG_DIALOGWIDTH = 65541;
	public const uint32 DISPID_IHTMLDIALOG_DIALOGHEIGHT = 65542;
	public const uint32 DISPID_IHTMLDIALOG_DIALOGARGUMENTS = 25000;
	public const uint32 DISPID_IHTMLDIALOG_MENUARGUMENTS = 25013;
	public const uint32 DISPID_IHTMLDIALOG_RETURNVALUE = 25001;
	public const uint32 DISPID_IHTMLDIALOG_CLOSE = 25011;
	public const uint32 DISPID_IHTMLDIALOG_TOSTRING = 25012;
	public const uint32 DISPID_IHTMLDIALOG2_STATUS = 25014;
	public const uint32 DISPID_IHTMLDIALOG2_RESIZABLE = 25015;
	public const uint32 DISPID_IHTMLDIALOG3_UNADORNED = 25016;
	public const uint32 DISPID_IHTMLDIALOG3_DIALOGHIDE = 25007;
	public const uint32 DISPID_IHTMLMODELESSINIT_PARAMETERS = 25000;
	public const uint32 DISPID_IHTMLMODELESSINIT_OPTIONSTRING = 25001;
	public const uint32 DISPID_IHTMLMODELESSINIT_MONIKER = 25006;
	public const uint32 DISPID_IHTMLMODELESSINIT_DOCUMENT = 25007;
	public const uint32 DISPID_IHTMLPOPUP_SHOW = 27001;
	public const uint32 DISPID_IHTMLPOPUP_HIDE = 27002;
	public const uint32 DISPID_IHTMLPOPUP_DOCUMENT = 27003;
	public const uint32 DISPID_IHTMLPOPUP_ISOPEN = 27004;
	public const uint32 DISPID_IHTMLAPPBEHAVIOR_APPLICATIONNAME = 5000;
	public const uint32 DISPID_IHTMLAPPBEHAVIOR_VERSION = 5001;
	public const uint32 DISPID_IHTMLAPPBEHAVIOR_ICON = 5002;
	public const uint32 DISPID_IHTMLAPPBEHAVIOR_SINGLEINSTANCE = 5003;
	public const uint32 DISPID_IHTMLAPPBEHAVIOR_MINIMIZEBUTTON = 5005;
	public const uint32 DISPID_IHTMLAPPBEHAVIOR_MAXIMIZEBUTTON = 5006;
	public const uint32 DISPID_IHTMLAPPBEHAVIOR_BORDER = 5007;
	public const uint32 DISPID_IHTMLAPPBEHAVIOR_BORDERSTYLE = 5008;
	public const uint32 DISPID_IHTMLAPPBEHAVIOR_SYSMENU = 5009;
	public const uint32 DISPID_IHTMLAPPBEHAVIOR_CAPTION = 5010;
	public const uint32 DISPID_IHTMLAPPBEHAVIOR_WINDOWSTATE = 5011;
	public const uint32 DISPID_IHTMLAPPBEHAVIOR_SHOWINTASKBAR = 5012;
	public const uint32 DISPID_IHTMLAPPBEHAVIOR_COMMANDLINE = 5013;
	public const uint32 DISPID_IHTMLAPPBEHAVIOR2_CONTEXTMENU = 5014;
	public const uint32 DISPID_IHTMLAPPBEHAVIOR2_INNERBORDER = 5015;
	public const uint32 DISPID_IHTMLAPPBEHAVIOR2_SCROLL = 5016;
	public const uint32 DISPID_IHTMLAPPBEHAVIOR2_SCROLLFLAT = 5017;
	public const uint32 DISPID_IHTMLAPPBEHAVIOR2_SELECTION = 5018;
	public const uint32 DISPID_IHTMLAPPBEHAVIOR3_NAVIGABLE = 5019;
	public const uint32 DISPID_IHTMLTXTRANGEINTERNAL_GET_VISIBLETEXT = 1050;
	public const uint32 DISPID_IE9EVENTS_ABORT = 1000;
	public const uint32 DISPID_IE9EVENTS_ACTIVATE = 1044;
	public const uint32 DISPID_IE9EVENTS_AFTERPRINT = 1025;
	public const uint32 DISPID_IE9EVENTS_BEFOREACTIVATE = 1047;
	public const uint32 DISPID_IE9EVENTS_BEFOREDEACTIVATE = 1034;
	public const uint32 DISPID_IE9EVENTS_BEFOREUNLOAD = 1017;
	public const uint32 DISPID_IE9EVENTS_BEFOREPRINT = 1024;
	public const uint32 DISPID_IE9EVENTS_BOUNCE = 1009;
	public const uint32 DISPID_IE9EVENTS_CHANGE = 1001;
	public const int32 DISPID_IE9EVENTS_CLICK = -600;
	public const uint32 DISPID_IE9EVENTS_COMPLETE = 71727;
	public const uint32 DISPID_IE9EVENTS_CONTEXTMENU = 1023;
	public const uint32 DISPID_IE9EVENTS_DEACTIVATE = 1045;
	public const uint32 DISPID_IE9EVENTS_DOMCONTENTLOADED = 71662;
	public const uint32 DISPID_IE9EVENTS_SUCCESS = 71725;
	public const uint32 DISPID_IE9EVENTS_ERROR = 1002;
	public const uint32 DISPID_IE9EVENTS_FINISH = 1010;
	public const uint32 DISPID_IE9EVENTS_FOCUS = 65537;
	public const uint32 DISPID_IE9EVENTS_FOCUSIN = 1048;
	public const uint32 DISPID_IE9EVENTS_FOCUSOUT = 1049;
	public const uint32 DISPID_IE9EVENTS_HASHCHANGE = 1066;
	public const uint32 DISPID_IE9EVENTS_HELP = 65546;
	public const uint32 DISPID_IE9EVENTS_INPUT = 71663;
	public const uint32 DISPID_IE9EVENTS_LOAD = 1003;
	public const int32 DISPID_IE9EVENTS_KEYDOWN = -602;
	public const int32 DISPID_IE9EVENTS_KEYPRESS = -603;
	public const int32 DISPID_IE9EVENTS_KEYUP = -604;
	public const uint32 DISPID_IE9EVENTS_MESSAGE = 1067;
	public const uint32 DISPID_IE9EVENTS_ONLINE = 1064;
	public const uint32 DISPID_IE9EVENTS_OFFLINE = 1065;
	public const int32 DISPID_IE9EVENTS_READYSTATECHANGE = -609;
	public const uint32 DISPID_IE9EVENTS_RESET = 1015;
	public const uint32 DISPID_IE9EVENTS_RESIZE = 1016;
	public const uint32 DISPID_IE9EVENTS_SCROLL = 1014;
	public const uint32 DISPID_IE9EVENTS_SELECT = 1006;
	public const uint32 DISPID_IE9EVENTS_SELECTIONCHANGE = 1037;
	public const uint32 DISPID_IE9EVENTS_SELECTSTART = 65548;
	public const uint32 DISPID_IE9EVENTS_START = 1011;
	public const uint32 DISPID_IE9EVENTS_STOP = 1026;
	public const uint32 DISPID_IE9EVENTS_STORAGE = 1057;
	public const uint32 DISPID_IE9EVENTS_STORAGECOMMIT = 1058;
	public const uint32 DISPID_IE9EVENTS_SUBMIT = 1007;
	public const uint32 DISPID_IE9EVENTS_TEXTINPUT = 71665;
	public const uint32 DISPID_IE9EVENTS_TIMEOUT = 0;
	public const uint32 DISPID_IE9EVENTS_UNLOAD = 1008;
	public const uint32 DISPID_IE9EVENTS_WHEEL = 71649;
	public const int32 DISPID_IE9EVENTS_DBLCLICK = -601;
	public const int32 DISPID_IE9EVENTS_MOUSEDOWN = -605;
	public const uint32 DISPID_IE9EVENTS_MOUSEENTER = 1042;
	public const uint32 DISPID_IE9EVENTS_MOUSELEAVE = 1043;
	public const int32 DISPID_IE9EVENTS_MOUSEMOVE = -606;
	public const uint32 DISPID_IE9EVENTS_MOUSEOUT = 65545;
	public const uint32 DISPID_IE9EVENTS_MOUSEOVER = 65544;
	public const int32 DISPID_IE9EVENTS_MOUSEUP = -607;
	public const uint32 DISPID_IE9EVENTS_MOUSEWHEEL = 1033;
	public const uint32 DISPID_IE9EVENTS_BEFORECOPY = 65566;
	public const uint32 DISPID_IE9EVENTS_BEFORECUT = 65565;
	public const uint32 DISPID_IE9EVENTS_BEFOREPASTE = 65567;
	public const uint32 DISPID_IE9EVENTS_COPY = 65563;
	public const uint32 DISPID_IE9EVENTS_CUT = 65562;
	public const uint32 DISPID_IE9EVENTS_DRAG = 65556;
	public const uint32 DISPID_IE9EVENTS_DRAGEND = 65557;
	public const uint32 DISPID_IE9EVENTS_DRAGENTER = 65558;
	public const uint32 DISPID_IE9EVENTS_DRAGLEAVE = 65560;
	public const uint32 DISPID_IE9EVENTS_DRAGOVER = 65559;
	public const uint32 DISPID_IE9EVENTS_DRAGSTART = 65547;
	public const uint32 DISPID_IE9EVENTS_DROP = 65561;
	public const uint32 DISPID_IE9EVENTS_PASTE = 65564;
	public const uint32 DISPID_IE9EVENTS_MSBEFOREEDITFOCUS = 1027;
	public const uint32 DISPID_IE9EVENTS_MSCONTROLSELECT = 1036;
	public const uint32 DISPID_IE9EVENTS_MSCONTROLRESIZESTART = 1040;
	public const uint32 DISPID_IE9EVENTS_MSCONTROLRESIZEEND = 1041;
	public const uint32 DISPID_IE9EVENTS_COMPOSITIONSTART = 71658;
	public const uint32 DISPID_IE9EVENTS_COMPOSITIONUPDATE = 71659;
	public const uint32 DISPID_IE9EVENTS_COMPOSITIONEND = 71660;
	public const uint32 DISPID_IE9EVENTS_DOMATTRMODIFIED = 71661;
	public const uint32 DISPID_IE9EVENTS_DOMCHARACTERDATAMODIFIED = 71664;
	public const uint32 DISPID_IE9EVENTS_DOMNODEINSERTED = 71667;
	public const uint32 DISPID_IE9EVENTS_DOMNODEREMOVED = 71668;
	public const uint32 DISPID_IE9EVENTS_DOMSUBTREEMODIFIED = 71669;
	public const uint32 DISPID_IE9EVENTS_SVGLOAD = 71650;
	public const uint32 DISPID_IE9EVENTS_SVGUNLOAD = 71651;
	public const uint32 DISPID_IE9EVENTS_SVGABORT = 71652;
	public const uint32 DISPID_IE9EVENTS_SVGERROR = 71653;
	public const uint32 DISPID_IE9EVENTS_SVGRESIZE = 71654;
	public const uint32 DISPID_IE9EVENTS_SVGSCROLL = 71655;
	public const uint32 DISPID_IE9EVENTS_SVGZOOM = 71656;
	public const uint32 DISPID_IE9EVENTS_MSTHUMBNAILCLICK = 71657;
	public const uint32 DISPID_IE9EVENTS_MSSITEMODEJUMPLISTITEMREMOVED = 71666;
	public const uint32 DISPID_IE9EVENTS_CANPLAY = 71670;
	public const uint32 DISPID_IE9EVENTS_CANPLAYTHROUGH = 71671;
	public const uint32 DISPID_IE9EVENTS_DURATIONCHANGE = 71672;
	public const uint32 DISPID_IE9EVENTS_EMPTIED = 71673;
	public const uint32 DISPID_IE9EVENTS_ENDED = 71674;
	public const uint32 DISPID_IE9EVENTS_LOADEDDATA = 71675;
	public const uint32 DISPID_IE9EVENTS_LOADEDMETADATA = 71676;
	public const uint32 DISPID_IE9EVENTS_LOADSTART = 71677;
	public const uint32 DISPID_IE9EVENTS_PAUSE = 71678;
	public const uint32 DISPID_IE9EVENTS_PLAY = 71679;
	public const uint32 DISPID_IE9EVENTS_PLAYING = 71680;
	public const uint32 DISPID_IE9EVENTS_PROGRESS = 71681;
	public const uint32 DISPID_IE9EVENTS_RATECHANGE = 71682;
	public const uint32 DISPID_IE9EVENTS_SEEKED = 71683;
	public const uint32 DISPID_IE9EVENTS_SEEKING = 71684;
	public const uint32 DISPID_IE9EVENTS_STALLED = 71685;
	public const uint32 DISPID_IE9EVENTS_SUSPEND = 71686;
	public const uint32 DISPID_IE9EVENTS_TIMEUPDATE = 71687;
	public const uint32 DISPID_IE9EVENTS_VOLUMECHANGE = 71688;
	public const uint32 DISPID_IE9EVENTS_WAITING = 71689;
	public const uint32 DISPID_IE9EVENTS_BLOCKED = 71726;
	public const uint32 DISPID_IE9EVENTS_UPGRADENEEDED = 71734;
	public const uint32 DISPID_IE9EVENTS_CUECHANGE = 71729;
	public const uint32 DISPID_IE9EVENTS_ENTER = 71730;
	public const uint32 DISPID_IE9EVENTS_EXIT = 71731;
	public const uint32 DISPID_IE9EVENTS_ADDTRACK = 71736;
	public const uint32 DISPID_IE9EVENTS_REMOVETRACK = 71781;
	public const uint32 DISPID_IE9EVENTS_MSPOINTERDOWN = 71690;
	public const uint32 DISPID_IE9EVENTS_MSPOINTERMOVE = 71691;
	public const uint32 DISPID_IE9EVENTS_MSPOINTERUP = 71692;
	public const uint32 DISPID_IE9EVENTS_MSPOINTEROVER = 71693;
	public const uint32 DISPID_IE9EVENTS_MSPOINTEROUT = 71694;
	public const uint32 DISPID_IE9EVENTS_MSPOINTERCANCEL = 71695;
	public const uint32 DISPID_IE9EVENTS_MSPOINTERHOVER = 71696;
	public const uint32 DISPID_IE9EVENTS_MSLOSTPOINTERCAPTURE = 71706;
	public const uint32 DISPID_IE9EVENTS_MSGOTPOINTERCAPTURE = 71707;
	public const uint32 DISPID_IE9EVENTS_MSPOINTERENTER = 71769;
	public const uint32 DISPID_IE9EVENTS_MSPOINTERLEAVE = 71770;
	public const uint32 DISPID_IE9EVENTS_TOUCHSTART = 71784;
	public const uint32 DISPID_IE9EVENTS_TOUCHEND = 71785;
	public const uint32 DISPID_IE9EVENTS_TOUCHMOVE = 71786;
	public const uint32 DISPID_IE9EVENTS_TOUCHCANCEL = 71787;
	public const uint32 DISPID_IE9EVENTS_MSGESTURESTART = 71699;
	public const uint32 DISPID_IE9EVENTS_MSGESTURECHANGE = 71700;
	public const uint32 DISPID_IE9EVENTS_MSGESTUREEND = 71701;
	public const uint32 DISPID_IE9EVENTS_MSGESTUREHOLD = 71702;
	public const uint32 DISPID_IE9EVENTS_MSGESTURETAP = 71703;
	public const uint32 DISPID_IE9EVENTS_MSGESTUREDOUBLETAP = 71704;
	public const uint32 DISPID_IE9EVENTS_MSINERTIASTART = 71705;
	public const uint32 DISPID_IE9EVENTS_MSCONTENTZOOM = 71708;
	public const uint32 DISPID_IE9EVENTS_MSHOLDVISUAL = 71738;
	public const uint32 DISPID_IE9EVENTS_TRANSITIONSTART = 71709;
	public const uint32 DISPID_IE9EVENTS_TRANSITIONEND = 71710;
	public const uint32 DISPID_IE9EVENTS_ANIMATIONSTART = 71711;
	public const uint32 DISPID_IE9EVENTS_ANIMATIONEND = 71712;
	public const uint32 DISPID_IE9EVENTS_ANIMATIONITERATION = 71713;
	public const uint32 DISPID_IE9EVENTS_MSMANIPULATIONSTATECHANGED = 71714;
	public const uint32 DISPID_IE9EVENTS_CHECKING = 71717;
	public const uint32 DISPID_IE9EVENTS_NOUPDATE = 71718;
	public const uint32 DISPID_IE9EVENTS_DOWNLOADING = 71719;
	public const uint32 DISPID_IE9EVENTS_UPDATEREADY = 71720;
	public const uint32 DISPID_IE9EVENTS_CACHED = 71721;
	public const uint32 DISPID_IE9EVENTS_OBSOLETE = 71722;
	public const uint32 DISPID_IE9EVENTS_INVALID = 71724;
	public const uint32 DISPID_IE9EVENTS_OPEN = 71715;
	public const uint32 DISPID_IE9EVENTS_CLOSE = 71716;
	public const uint32 DISPID_IE9EVENTS_LOADEND = 71723;
	public const uint32 DISPID_IE9EVENTS_POPSTATE = 71728;
	public const uint32 DISPID_IE9EVENTS_VISIBILITYCHANGE = 71732;
	public const uint32 DISPID_IE9EVENTS_MSREGIONUPDATE = 71733;
	public const uint32 DISPID_IE9EVENTS_MSVIDEOFORMATCHANGED = 71735;
	public const uint32 DISPID_IE9EVENTS_MSVIDEOFRAMESTEPCOMPLETED = 71737;
	public const uint32 DISPID_IE9EVENTS_MSVIDEOOPTIMALLAYOUTCHANGED = 71739;
	public const uint32 DISPID_IE9EVENTS_MSFULLSCREENCHANGE = 71740;
	public const uint32 DISPID_IE9EVENTS_MSFULLSCREENERROR = 71741;
	public const uint32 DISPID_IE9EVENTS_MSELEMENTRESIZE = 71742;
	public const uint32 DISPID_IE9EVENTS_SOURCEOPEN = 71743;
	public const uint32 DISPID_IE9EVENTS_SOURCEENDED = 71745;
	public const uint32 DISPID_IE9EVENTS_SOURCECLOSE = 71744;
	public const uint32 DISPID_IE9EVENTS_ADDSOURCEBUFFER = 71746;
	public const uint32 DISPID_IE9EVENTS_REMOVESOURCEBUFFER = 71747;
	public const uint32 DISPID_IE9EVENTS_UPDATESTART = 71766;
	public const uint32 DISPID_IE9EVENTS_UPDATE = 71767;
	public const uint32 DISPID_IE9EVENTS_UPDATEEND = 71768;
	public const uint32 DISPID_IE9EVENTS_MSNEEDKEY = 71748;
	public const uint32 DISPID_IE9EVENTS_MSKEYMESSAGE = 71749;
	public const uint32 DISPID_IE9EVENTS_MSKEYERROR = 71750;
	public const uint32 DISPID_IE9EVENTS_MSKEYADDED = 71751;
	public const uint32 DISPID_IE9EVENTS_MSWEBVIEWDOMCONTENTLOADED = 71752;
	public const uint32 DISPID_IE9EVENTS_MSWEBVIEWCONTENTLOADING = 71753;
	public const uint32 DISPID_IE9EVENTS_MSWEBVIEWNAVIGATIONSTARTING = 71754;
	public const uint32 DISPID_IE9EVENTS_MSWEBVIEWNAVIGATIONCOMPLETED = 71755;
	public const uint32 DISPID_IE9EVENTS_MSWEBVIEWFRAMEDOMCONTENTLOADED = 71756;
	public const uint32 DISPID_IE9EVENTS_MSWEBVIEWFRAMECONTENTLOADING = 71757;
	public const uint32 DISPID_IE9EVENTS_MSWEBVIEWFRAMENAVIGATIONSTARTING = 71758;
	public const uint32 DISPID_IE9EVENTS_MSWEBVIEWFRAMENAVIGATIONCOMPLETED = 71759;
	public const uint32 DISPID_IE9EVENTS_MSWEBVIEWSCRIPTNOTIFY = 71760;
	public const uint32 DISPID_IE9EVENTS_MSWEBVIEWLONGRUNNINGSCRIPTDETECTED = 71763;
	public const uint32 DISPID_IE9EVENTS_MSWEBVIEWUNVIEWABLECONTENTIDENTIFIED = 71761;
	public const uint32 DISPID_IE9EVENTS_MSWEBVIEWUNSAFECONTENTWARNINGDISPLAYING = 71762;
	public const uint32 DISPID_IE9EVENTS_MSWEBVIEWCONTAINSFULLSCREENELEMENTCHANGED = 71783;
	public const uint32 DISPID_IE9EVENTS_WEBGLCONTEXTLOST = 71764;
	public const uint32 DISPID_IE9EVENTS_WEBGLCONTEXTRESTORED = 71765;
	public const uint32 DISPID_IE9EVENTS_WEBGLCONTEXTCREATIONERROR = 71792;
	public const uint32 DISPID_IE9EVENTS_MSSITEPINNED = 71771;
	public const uint32 DISPID_IE9EVENTS_MSORIENTATIONCHANGE = 71772;
	public const uint32 DISPID_IE9EVENTS_ORIENTATIONCHANGE = 71795;
	public const uint32 DISPID_IE9EVENTS_DEVICEORIENTATION = 71773;
	public const uint32 DISPID_IE9EVENTS_DEVICEMOTION = 71774;
	public const uint32 DISPID_IE9EVENTS_COMPASSNEEDSCALIBRATION = 71782;
	public const uint32 DISPID_IE9EVENTS_PAGESHOW = 71775;
	public const uint32 DISPID_IE9EVENTS_PAGEHIDE = 71776;
	public const uint32 DISPID_IE9EVENTS_MSCANDIDATEWINDOWSHOW = 71777;
	public const uint32 DISPID_IE9EVENTS_MSCANDIDATEWINDOWUPDATE = 71778;
	public const uint32 DISPID_IE9EVENTS_MSCANDIDATEWINDOWHIDE = 71779;
	public const uint32 CONTEXT_MENU_DEFAULT = 0;
	public const uint32 CONTEXT_MENU_IMAGE = 1;
	public const uint32 CONTEXT_MENU_CONTROL = 2;
	public const uint32 CONTEXT_MENU_TABLE = 3;
	public const uint32 CONTEXT_MENU_TEXTSELECT = 4;
	public const uint32 CONTEXT_MENU_ANCHOR = 5;
	public const uint32 CONTEXT_MENU_UNKNOWN = 6;
	public const uint32 CONTEXT_MENU_IMGDYNSRC = 7;
	public const uint32 CONTEXT_MENU_DEBUG = 8;
	public const uint32 CONTEXT_MENU_VSCROLL = 9;
	public const uint32 CONTEXT_MENU_HSCROLL = 10;
	public const uint32 CONTEXT_MENU_MEDIA = 11;
	public const uint32 CONTEXT_MENU_ENTITY = 12;
	public const uint32 CONTEXT_MENU_PDF = 13;
	public const uint32 CONTEXT_MENU_DISABLEDFLASH = 14;
	public const uint32 MENUEXT_SHOWDIALOG = 1;
	public const uint32 HTMLDLG_NOUI = 16;
	public const uint32 HTMLDLG_MODAL = 32;
	public const uint32 HTMLDLG_MODELESS = 64;
	public const uint32 HTMLDLG_PRINT_TEMPLATE = 128;
	public const uint32 HTMLDLG_VERIFY = 256;
	public const uint32 HTMLDLG_ALLOW_UNKNOWN_THREAD = 512;
	public const uint32 PRINT_DONTBOTHERUSER = 1;
	public const uint32 PRINT_WAITFORCOMPLETION = 2;
	public const uint32 CMDID_SCRIPTSITE_URL = 0;
	public const uint32 CMDID_SCRIPTSITE_HTMLDLGTRUST = 1;
	public const uint32 CMDID_SCRIPTSITE_SECSTATE = 2;
	public const uint32 CMDID_SCRIPTSITE_SID = 3;
	public const uint32 CMDID_SCRIPTSITE_TRUSTEDDOC = 4;
	public const uint32 CMDID_SCRIPTSITE_SECURITY_WINDOW = 5;
	public const uint32 CMDID_SCRIPTSITE_NAMESPACE = 6;
	public const uint32 CMDID_SCRIPTSITE_IURI = 7;
	public const uint32 CMDID_HOSTCONTEXT_URL = 8;
	public const uint32 CMDID_SCRIPTSITE_ALLOWRECOVERY = 9;
	public const uint32 CMDID_SCRIPTSITE_BASEIURI = 10;
	public const Guid CGID_DocHostCommandHandler = .(0xf38bc242, 0xb950, 0x11d1, 0x89, 0x18, 0x00, 0xc0, 0x4f, 0xc2, 0xc8, 0x36);
	public const uint32 IECMDID_CLEAR_AUTOCOMPLETE_FOR_FORMS = 0;
	public const uint32 IECMDID_SETID_AUTOCOMPLETE_FOR_FORMS = 1;
	public const uint32 IECMDID_BEFORENAVIGATE_GETSHELLBROWSE = 2;
	public const uint32 IECMDID_BEFORENAVIGATE_DOEXTERNALBROWSE = 3;
	public const uint32 IECMDID_BEFORENAVIGATE_GETIDLIST = 4;
	public const uint32 IECMDID_SET_INVOKE_DEFAULT_BROWSER_ON_NEW_WINDOW = 5;
	public const uint32 IECMDID_GET_INVOKE_DEFAULT_BROWSER_ON_NEW_WINDOW = 6;
	public const uint32 IECMDID_ARG_CLEAR_FORMS_ALL = 0;
	public const uint32 IECMDID_ARG_CLEAR_FORMS_ALL_BUT_PASSWORDS = 1;
	public const uint32 IECMDID_ARG_CLEAR_FORMS_PASSWORDS_ONLY = 2;
	public const Guid CATID_MSOfficeAntiVirus = .(0x56ffcc30, 0xd398, 0x11d0, 0xb2, 0xae, 0x00, 0xa0, 0xc9, 0x08, 0xfa, 0x49);
	public const uint32 STATURL_QUERYFLAG_ISCACHED = 65536;
	public const uint32 STATURL_QUERYFLAG_NOURL = 131072;
	public const uint32 STATURL_QUERYFLAG_NOTITLE = 262144;
	public const uint32 STATURL_QUERYFLAG_TOPLEVEL = 524288;
	public const uint32 STATURLFLAG_ISCACHED = 1;
	public const uint32 STATURLFLAG_ISTOPLEVEL = 2;
	public const uint32 SURFACE_LOCK_EXCLUSIVE = 1;
	public const uint32 SURFACE_LOCK_ALLOW_DISCARD = 2;
	public const uint32 SURFACE_LOCK_WAIT = 4;
	public const int32 E_SURFACE_NOSURFACE = -2147434496;
	public const int32 E_SURFACE_UNKNOWN_FORMAT = -2147434495;
	public const int32 E_SURFACE_NOTMYPOINTER = -2147434494;
	public const int32 E_SURFACE_DISCARDED = -2147434493;
	public const int32 E_SURFACE_NODC = -2147434492;
	public const int32 E_SURFACE_NOTMYDC = -2147434491;
	public const int32 S_SURFACE_DISCARDED = 49155;
	public const uint32 COLOR_NO_TRANSPARENT = 4294967295;
	public const uint32 IMGDECODE_EVENT_PROGRESS = 1;
	public const uint32 IMGDECODE_EVENT_PALETTE = 2;
	public const uint32 IMGDECODE_EVENT_BEGINBITS = 4;
	public const uint32 IMGDECODE_EVENT_BITSCOMPLETE = 8;
	public const uint32 IMGDECODE_EVENT_USEDDRAW = 16;
	public const uint32 IMGDECODE_HINT_TOPDOWN = 1;
	public const uint32 IMGDECODE_HINT_BOTTOMUP = 2;
	public const uint32 IMGDECODE_HINT_FULLWIDTH = 4;
	public const uint32 MAPMIME_DEFAULT = 0;
	public const uint32 MAPMIME_CLSID = 1;
	public const uint32 MAPMIME_DISABLE = 2;
	public const uint32 MAPMIME_DEFAULT_ALWAYS = 3;
	public const uint32 TIMERMODE_NORMAL = 0;
	public const uint32 TIMERMODE_VISIBILITYAWARE = 1;
}
#endregion

#region Enums

[AllowDuplicates]
public enum htmlDesignMode : int32
{
	htmlDesignModeInherit = -2,
	htmlDesignModeOn = -1,
	htmlDesignModeOff = 0,
	htmlDesignMode_Max = 2147483647,
}


[AllowDuplicates]
public enum htmlZOrder : int32
{
	htmlZOrderFront = 0,
	htmlZOrderBack = 1,
	htmlZOrder_Max = 2147483647,
}


[AllowDuplicates]
public enum htmlClear : int32
{
	htmlClearNotSet = 0,
	htmlClearAll = 1,
	htmlClearLeft = 2,
	htmlClearRight = 3,
	htmlClearBoth = 4,
	htmlClearNone = 5,
	htmlClear_Max = 2147483647,
}


[AllowDuplicates]
public enum htmlControlAlign : int32
{
	htmlControlAlignNotSet = 0,
	htmlControlAlignLeft = 1,
	htmlControlAlignCenter = 2,
	htmlControlAlignRight = 3,
	htmlControlAlignTextTop = 4,
	htmlControlAlignAbsMiddle = 5,
	htmlControlAlignBaseline = 6,
	htmlControlAlignAbsBottom = 7,
	htmlControlAlignBottom = 8,
	htmlControlAlignMiddle = 9,
	htmlControlAlignTop = 10,
	htmlControlAlign_Max = 2147483647,
}


[AllowDuplicates]
public enum htmlBlockAlign : int32
{
	htmlBlockAlignNotSet = 0,
	htmlBlockAlignLeft = 1,
	htmlBlockAlignCenter = 2,
	htmlBlockAlignRight = 3,
	htmlBlockAlignJustify = 4,
	htmlBlockAlign_Max = 2147483647,
}


[AllowDuplicates]
public enum htmlReadyState : int32
{
	htmlReadyStateuninitialized = 0,
	htmlReadyStateloading = 1,
	htmlReadyStateloaded = 2,
	htmlReadyStateinteractive = 3,
	htmlReadyStatecomplete = 4,
	htmlReadyState_Max = 2147483647,
}


[AllowDuplicates]
public enum htmlLoop : int32
{
	htmlLoopLoopInfinite = -1,
	htmlLoop_Max = 2147483647,
}


[AllowDuplicates]
public enum mediaType : int32
{
	mediaTypeNotSet = 0,
	mediaTypeAll = 511,
	mediaTypeAural = 1,
	mediaTypeBraille = 2,
	mediaTypeEmbossed = 4,
	mediaTypeHandheld = 8,
	mediaTypePrint = 16,
	mediaTypeProjection = 32,
	mediaTypeScreen = 64,
	mediaTypeTty = 128,
	mediaTypeTv = 256,
	mediaType_Max = 2147483647,
}


[AllowDuplicates]
public enum DomConstructor : int32
{
	DomConstructorObject = 0,
	DomConstructorAttr = 1,
	DomConstructorBehaviorUrnsCollection = 2,
	DomConstructorBookmarkCollection = 3,
	DomConstructorCompatibleInfo = 4,
	DomConstructorCompatibleInfoCollection = 5,
	DomConstructorControlRangeCollection = 6,
	DomConstructorCSSCurrentStyleDeclaration = 7,
	DomConstructorCSSRuleList = 8,
	DomConstructorCSSRuleStyleDeclaration = 9,
	DomConstructorCSSStyleDeclaration = 10,
	DomConstructorCSSStyleRule = 11,
	DomConstructorCSSStyleSheet = 12,
	DomConstructorDataTransfer = 13,
	DomConstructorDOMImplementation = 14,
	DomConstructorElement = 15,
	DomConstructorEvent = 16,
	DomConstructorHistory = 17,
	DomConstructorHTCElementBehaviorDefaults = 18,
	DomConstructorHTMLAnchorElement = 19,
	DomConstructorHTMLAreaElement = 20,
	DomConstructorHTMLAreasCollection = 21,
	DomConstructorHTMLBaseElement = 22,
	DomConstructorHTMLBaseFontElement = 23,
	DomConstructorHTMLBGSoundElement = 24,
	DomConstructorHTMLBlockElement = 25,
	DomConstructorHTMLBodyElement = 26,
	DomConstructorHTMLBRElement = 27,
	DomConstructorHTMLButtonElement = 28,
	DomConstructorHTMLCollection = 29,
	DomConstructorHTMLCommentElement = 30,
	DomConstructorHTMLDDElement = 31,
	DomConstructorHTMLDivElement = 32,
	DomConstructorHTMLDocument = 33,
	DomConstructorHTMLDListElement = 34,
	DomConstructorHTMLDTElement = 35,
	DomConstructorHTMLEmbedElement = 36,
	DomConstructorHTMLFieldSetElement = 37,
	DomConstructorHTMLFontElement = 38,
	DomConstructorHTMLFormElement = 39,
	DomConstructorHTMLFrameElement = 40,
	DomConstructorHTMLFrameSetElement = 41,
	DomConstructorHTMLGenericElement = 42,
	DomConstructorHTMLHeadElement = 43,
	DomConstructorHTMLHeadingElement = 44,
	DomConstructorHTMLHRElement = 45,
	DomConstructorHTMLHtmlElement = 46,
	DomConstructorHTMLIFrameElement = 47,
	DomConstructorHTMLImageElement = 48,
	DomConstructorHTMLInputElement = 49,
	DomConstructorHTMLIsIndexElement = 50,
	DomConstructorHTMLLabelElement = 51,
	DomConstructorHTMLLegendElement = 52,
	DomConstructorHTMLLIElement = 53,
	DomConstructorHTMLLinkElement = 54,
	DomConstructorHTMLMapElement = 55,
	DomConstructorHTMLMarqueeElement = 56,
	DomConstructorHTMLMetaElement = 57,
	DomConstructorHTMLModelessDialog = 58,
	DomConstructorHTMLNamespaceInfo = 59,
	DomConstructorHTMLNamespaceInfoCollection = 60,
	DomConstructorHTMLNextIdElement = 61,
	DomConstructorHTMLNoShowElement = 62,
	DomConstructorHTMLObjectElement = 63,
	DomConstructorHTMLOListElement = 64,
	DomConstructorHTMLOptionElement = 65,
	DomConstructorHTMLParagraphElement = 66,
	DomConstructorHTMLParamElement = 67,
	DomConstructorHTMLPhraseElement = 68,
	DomConstructorHTMLPluginsCollection = 69,
	DomConstructorHTMLPopup = 70,
	DomConstructorHTMLScriptElement = 71,
	DomConstructorHTMLSelectElement = 72,
	DomConstructorHTMLSpanElement = 73,
	DomConstructorHTMLStyleElement = 74,
	DomConstructorHTMLTableCaptionElement = 75,
	DomConstructorHTMLTableCellElement = 76,
	DomConstructorHTMLTableColElement = 77,
	DomConstructorHTMLTableElement = 78,
	DomConstructorHTMLTableRowElement = 79,
	DomConstructorHTMLTableSectionElement = 80,
	DomConstructorHTMLTextAreaElement = 81,
	DomConstructorHTMLTextElement = 82,
	DomConstructorHTMLTitleElement = 83,
	DomConstructorHTMLUListElement = 84,
	DomConstructorHTMLUnknownElement = 85,
	DomConstructorImage = 86,
	DomConstructorLocation = 87,
	DomConstructorNamedNodeMap = 88,
	DomConstructorNavigator = 89,
	DomConstructorNodeList = 90,
	DomConstructorOption = 91,
	DomConstructorScreen = 92,
	DomConstructorSelection = 93,
	DomConstructorStaticNodeList = 94,
	DomConstructorStorage = 95,
	DomConstructorStyleSheetList = 96,
	DomConstructorStyleSheetPage = 97,
	DomConstructorStyleSheetPageList = 98,
	DomConstructorText = 99,
	DomConstructorTextRange = 100,
	DomConstructorTextRangeCollection = 101,
	DomConstructorTextRectangle = 102,
	DomConstructorTextRectangleList = 103,
	DomConstructorWindow = 104,
	DomConstructorXDomainRequest = 105,
	DomConstructorXMLHttpRequest = 106,
	DomConstructorMax = 107,
	DomConstructor_Max = 2147483647,
}


[AllowDuplicates]
public enum styleTextTransform : int32
{
	styleTextTransformNotSet = 0,
	styleTextTransformCapitalize = 1,
	styleTextTransformLowercase = 2,
	styleTextTransformUppercase = 3,
	styleTextTransformNone = 4,
	styleTextTransform_Max = 2147483647,
}


[AllowDuplicates]
public enum styleDataRepeat : int32
{
	styleDataRepeatNone = 0,
	styleDataRepeatInner = 1,
	styleDataRepeat_Max = 2147483647,
}


[AllowDuplicates]
public enum styleOverflow : int32
{
	styleOverflowNotSet = 0,
	styleOverflowAuto = 1,
	styleOverflowHidden = 2,
	styleOverflowVisible = 3,
	styleOverflowScroll = 4,
	styleOverflow_Max = 2147483647,
}


[AllowDuplicates]
public enum styleMsOverflowStyle : int32
{
	styleMsOverflowStyleNotSet = 0,
	styleMsOverflowStyleAuto = 1,
	styleMsOverflowStyleNone = 2,
	styleMsOverflowStyleScrollbar = 3,
	styleMsOverflowStyleMsAutoHidingScrollbar = 4,
	styleMsOverflowStyle_Max = 2147483647,
}


[AllowDuplicates]
public enum styleTableLayout : int32
{
	styleTableLayoutNotSet = 0,
	styleTableLayoutAuto = 1,
	styleTableLayoutFixed = 2,
	styleTableLayout_Max = 2147483647,
}


[AllowDuplicates]
public enum styleBorderCollapse : int32
{
	styleBorderCollapseNotSet = 0,
	styleBorderCollapseSeparate = 1,
	styleBorderCollapseCollapse = 2,
	styleBorderCollapse_Max = 2147483647,
}


[AllowDuplicates]
public enum styleCaptionSide : int32
{
	styleCaptionSideNotSet = 0,
	styleCaptionSideTop = 1,
	styleCaptionSideBottom = 2,
	styleCaptionSideLeft = 3,
	styleCaptionSideRight = 4,
	styleCaptionSide_Max = 2147483647,
}


[AllowDuplicates]
public enum styleEmptyCells : int32
{
	styleEmptyCellsNotSet = 0,
	styleEmptyCellsShow = 1,
	styleEmptyCellsHide = 2,
	styleEmptyCells_Max = 2147483647,
}


[AllowDuplicates]
public enum styleFontStyle : int32
{
	styleFontStyleNotSet = 0,
	styleFontStyleItalic = 1,
	styleFontStyleOblique = 2,
	styleFontStyleNormal = 3,
	styleFontStyle_Max = 2147483647,
}


[AllowDuplicates]
public enum styleFontVariant : int32
{
	styleFontVariantNotSet = 0,
	styleFontVariantSmallCaps = 1,
	styleFontVariantNormal = 2,
	styleFontVariant_Max = 2147483647,
}


[AllowDuplicates]
public enum styleBackgroundRepeat : int32
{
	styleBackgroundRepeatRepeat = 0,
	styleBackgroundRepeatRepeatX = 1,
	styleBackgroundRepeatRepeatY = 2,
	styleBackgroundRepeatNoRepeat = 3,
	styleBackgroundRepeatNotSet = 4,
	styleBackgroundRepeat_Max = 2147483647,
}


[AllowDuplicates]
public enum styleBackgroundAttachment : int32
{
	styleBackgroundAttachmentFixed = 0,
	styleBackgroundAttachmentScroll = 1,
	styleBackgroundAttachmentNotSet = 2,
	styleBackgroundAttachment_Max = 2147483647,
}


[AllowDuplicates]
public enum styleBackgroundAttachment3 : int32
{
	styleBackgroundAttachment3Fixed = 0,
	styleBackgroundAttachment3Scroll = 1,
	styleBackgroundAttachment3Local = 2,
	styleBackgroundAttachment3NotSet = 3,
	styleBackgroundAttachment3_Max = 2147483647,
}


[AllowDuplicates]
public enum styleBackgroundClip : int32
{
	styleBackgroundClipBorderBox = 0,
	styleBackgroundClipPaddingBox = 1,
	styleBackgroundClipContentBox = 2,
	styleBackgroundClipNotSet = 3,
	styleBackgroundClip_Max = 2147483647,
}


[AllowDuplicates]
public enum styleBackgroundOrigin : int32
{
	styleBackgroundOriginBorderBox = 0,
	styleBackgroundOriginPaddingBox = 1,
	styleBackgroundOriginContentBox = 2,
	styleBackgroundOriginNotSet = 3,
	styleBackgroundOrigin_Max = 2147483647,
}


[AllowDuplicates]
public enum styleVerticalAlign : int32
{
	styleVerticalAlignAuto = 0,
	styleVerticalAlignBaseline = 1,
	styleVerticalAlignSub = 2,
	styleVerticalAlignSuper = 3,
	styleVerticalAlignTop = 4,
	styleVerticalAlignTextTop = 5,
	styleVerticalAlignMiddle = 6,
	styleVerticalAlignBottom = 7,
	styleVerticalAlignTextBottom = 8,
	styleVerticalAlignInherit = 9,
	styleVerticalAlignNotSet = 10,
	styleVerticalAlign_Max = 2147483647,
}


[AllowDuplicates]
public enum styleFontWeight : int32
{
	styleFontWeightNotSet = 0,
	styleFontWeight100 = 1,
	styleFontWeight200 = 2,
	styleFontWeight300 = 3,
	styleFontWeight400 = 4,
	styleFontWeight500 = 5,
	styleFontWeight600 = 6,
	styleFontWeight700 = 7,
	styleFontWeight800 = 8,
	styleFontWeight900 = 9,
	styleFontWeightNormal = 10,
	styleFontWeightBold = 11,
	styleFontWeightBolder = 12,
	styleFontWeightLighter = 13,
	styleFontWeight_Max = 2147483647,
}


[AllowDuplicates]
public enum styleFontSize : int32
{
	styleFontSizeXXSmall = 0,
	styleFontSizeXSmall = 1,
	styleFontSizeSmall = 2,
	styleFontSizeMedium = 3,
	styleFontSizeLarge = 4,
	styleFontSizeXLarge = 5,
	styleFontSizeXXLarge = 6,
	styleFontSizeSmaller = 7,
	styleFontSizeLarger = 8,
	styleFontSize_Max = 2147483647,
}


[AllowDuplicates]
public enum styleZIndex : int32
{
	styleZIndexAuto = -2147483647,
	styleZIndex_Max = 2147483647,
}


[AllowDuplicates]
public enum styleWidowsOrphans : int32
{
	styleWidowsOrphansNotSet = -2147483647,
	styleWidowsOrphans_Max = 2147483647,
}


[AllowDuplicates]
public enum styleAuto : int32
{
	styleAutoAuto = 0,
	styleAuto_Max = 2147483647,
}


[AllowDuplicates]
public enum styleNone : int32
{
	styleNoneNone = 0,
	styleNone_Max = 2147483647,
}


[AllowDuplicates]
public enum styleNormal : int32
{
	styleNormalNormal = 0,
	styleNormal_Max = 2147483647,
}


[AllowDuplicates]
public enum styleBorderWidth : int32
{
	styleBorderWidthThin = 0,
	styleBorderWidthMedium = 1,
	styleBorderWidthThick = 2,
	styleBorderWidth_Max = 2147483647,
}


[AllowDuplicates]
public enum stylePosition : int32
{
	stylePositionNotSet = 0,
	stylePositionstatic = 1,
	stylePositionrelative = 2,
	stylePositionabsolute = 3,
	stylePositionfixed = 4,
	stylePositionMsPage = 5,
	stylePositionMsDeviceFixed = 6,
	stylePosition_Max = 2147483647,
}


[AllowDuplicates]
public enum styleBorderStyle : int32
{
	styleBorderStyleNotSet = 0,
	styleBorderStyleDotted = 1,
	styleBorderStyleDashed = 2,
	styleBorderStyleSolid = 3,
	styleBorderStyleDouble = 4,
	styleBorderStyleGroove = 5,
	styleBorderStyleRidge = 6,
	styleBorderStyleInset = 7,
	styleBorderStyleOutset = 8,
	styleBorderStyleWindowInset = 9,
	styleBorderStyleNone = 10,
	styleBorderStyleHidden = 11,
	styleBorderStyle_Max = 2147483647,
}


[AllowDuplicates]
public enum styleOutlineStyle : int32
{
	styleOutlineStyleNotSet = 0,
	styleOutlineStyleDotted = 1,
	styleOutlineStyleDashed = 2,
	styleOutlineStyleSolid = 3,
	styleOutlineStyleDouble = 4,
	styleOutlineStyleGroove = 5,
	styleOutlineStyleRidge = 6,
	styleOutlineStyleInset = 7,
	styleOutlineStyleOutset = 8,
	styleOutlineStyleWindowInset = 9,
	styleOutlineStyleNone = 10,
	styleOutlineStyle_Max = 2147483647,
}


[AllowDuplicates]
public enum styleStyleFloat : int32
{
	styleStyleFloatNotSet = 0,
	styleStyleFloatLeft = 1,
	styleStyleFloatRight = 2,
	styleStyleFloatNone = 3,
	styleStyleFloat_Max = 2147483647,
}


[AllowDuplicates]
public enum styleDisplay : int32
{
	styleDisplayNotSet = 0,
	styleDisplayBlock = 1,
	styleDisplayInline = 2,
	styleDisplayListItem = 3,
	styleDisplayNone = 4,
	styleDisplayTableHeaderGroup = 5,
	styleDisplayTableFooterGroup = 6,
	styleDisplayInlineBlock = 7,
	styleDisplayTable = 8,
	styleDisplayInlineTable = 9,
	styleDisplayTableRow = 10,
	styleDisplayTableRowGroup = 11,
	styleDisplayTableColumn = 12,
	styleDisplayTableColumnGroup = 13,
	styleDisplayTableCell = 14,
	styleDisplayTableCaption = 15,
	styleDisplayRunIn = 16,
	styleDisplayRuby = 17,
	styleDisplayRubyBase = 18,
	styleDisplayRubyText = 19,
	styleDisplayRubyBaseContainer = 20,
	styleDisplayRubyTextContainer = 21,
	styleDisplayMsFlexbox = 22,
	styleDisplayMsInlineFlexbox = 23,
	styleDisplayMsGrid = 24,
	styleDisplayMsInlineGrid = 25,
	styleDisplayFlex = 26,
	styleDisplayInlineFlex = 27,
	styleDisplayWebkitBox = 28,
	styleDisplayWebkitInlineBox = 29,
	styleDisplay_Max = 2147483647,
}


[AllowDuplicates]
public enum styleVisibility : int32
{
	styleVisibilityNotSet = 0,
	styleVisibilityInherit = 1,
	styleVisibilityVisible = 2,
	styleVisibilityHidden = 3,
	styleVisibilityCollapse = 4,
	styleVisibility_Max = 2147483647,
}


[AllowDuplicates]
public enum styleListStyleType : int32
{
	styleListStyleTypeNotSet = 0,
	styleListStyleTypeDisc = 1,
	styleListStyleTypeCircle = 2,
	styleListStyleTypeSquare = 3,
	styleListStyleTypeDecimal = 4,
	styleListStyleTypeLowerRoman = 5,
	styleListStyleTypeUpperRoman = 6,
	styleListStyleTypeLowerAlpha = 7,
	styleListStyleTypeUpperAlpha = 8,
	styleListStyleTypeNone = 9,
	styleListStyleTypeDecimalLeadingZero = 10,
	styleListStyleTypeGeorgian = 11,
	styleListStyleTypeArmenian = 12,
	styleListStyleTypeUpperLatin = 13,
	styleListStyleTypeLowerLatin = 14,
	styleListStyleTypeUpperGreek = 15,
	styleListStyleTypeLowerGreek = 16,
	styleListStyleType_Max = 2147483647,
}


[AllowDuplicates]
public enum styleListStylePosition : int32
{
	styleListStylePositionNotSet = 0,
	styleListStylePositionInside = 1,
	styleListStylePositionOutSide = 2,
	styleListStylePosition_Max = 2147483647,
}


[AllowDuplicates]
public enum styleWhiteSpace : int32
{
	styleWhiteSpaceNotSet = 0,
	styleWhiteSpaceNormal = 1,
	styleWhiteSpacePre = 2,
	styleWhiteSpaceNowrap = 3,
	styleWhiteSpacePreline = 4,
	styleWhiteSpacePrewrap = 5,
	styleWhiteSpace_Max = 2147483647,
}


[AllowDuplicates]
public enum stylePageBreak : int32
{
	stylePageBreakNotSet = 0,
	stylePageBreakAuto = 1,
	stylePageBreakAlways = 2,
	stylePageBreakLeft = 3,
	stylePageBreakRight = 4,
	stylePageBreakAvoid = 5,
	stylePageBreak_Max = 2147483647,
}


[AllowDuplicates]
public enum stylePageBreakInside : int32
{
	stylePageBreakInsideNotSet = 0,
	stylePageBreakInsideAuto = 1,
	stylePageBreakInsideAvoid = 2,
	stylePageBreakInside_Max = 2147483647,
}


[AllowDuplicates]
public enum styleCursor : int32
{
	styleCursorAuto = 0,
	styleCursorCrosshair = 1,
	styleCursorDefault = 2,
	styleCursorHand = 3,
	styleCursorMove = 4,
	styleCursorE_resize = 5,
	styleCursorNe_resize = 6,
	styleCursorNw_resize = 7,
	styleCursorN_resize = 8,
	styleCursorSe_resize = 9,
	styleCursorSw_resize = 10,
	styleCursorS_resize = 11,
	styleCursorW_resize = 12,
	styleCursorText = 13,
	styleCursorWait = 14,
	styleCursorHelp = 15,
	styleCursorPointer = 16,
	styleCursorProgress = 17,
	styleCursorNot_allowed = 18,
	styleCursorNo_drop = 19,
	styleCursorVertical_text = 20,
	styleCursorall_scroll = 21,
	styleCursorcol_resize = 22,
	styleCursorrow_resize = 23,
	styleCursorNone = 24,
	styleCursorContext_menu = 25,
	styleCursorEw_resize = 26,
	styleCursorNs_resize = 27,
	styleCursorNesw_resize = 28,
	styleCursorNwse_resize = 29,
	styleCursorCell = 30,
	styleCursorCopy = 31,
	styleCursorAlias = 32,
	styleCursorcustom = 33,
	styleCursorNotSet = 34,
	styleCursor_Max = 2147483647,
}


[AllowDuplicates]
public enum styleDir : int32
{
	styleDirNotSet = 0,
	styleDirLeftToRight = 1,
	styleDirRightToLeft = 2,
	styleDirInherit = 3,
	styleDir_Max = 2147483647,
}


[AllowDuplicates]
public enum styleBidi : int32
{
	styleBidiNotSet = 0,
	styleBidiNormal = 1,
	styleBidiEmbed = 2,
	styleBidiOverride = 3,
	styleBidiInherit = 4,
	styleBidi_Max = 2147483647,
}


[AllowDuplicates]
public enum styleImeMode : int32
{
	styleImeModeAuto = 0,
	styleImeModeActive = 1,
	styleImeModeInactive = 2,
	styleImeModeDisabled = 3,
	styleImeModeNotSet = 4,
	styleImeMode_Max = 2147483647,
}


[AllowDuplicates]
public enum styleRubyAlign : int32
{
	styleRubyAlignNotSet = 0,
	styleRubyAlignAuto = 1,
	styleRubyAlignLeft = 2,
	styleRubyAlignCenter = 3,
	styleRubyAlignRight = 4,
	styleRubyAlignDistributeLetter = 5,
	styleRubyAlignDistributeSpace = 6,
	styleRubyAlignLineEdge = 7,
	styleRubyAlign_Max = 2147483647,
}


[AllowDuplicates]
public enum styleRubyPosition : int32
{
	styleRubyPositionNotSet = 0,
	styleRubyPositionAbove = 1,
	styleRubyPositionInline = 2,
	styleRubyPosition_Max = 2147483647,
}


[AllowDuplicates]
public enum styleRubyOverhang : int32
{
	styleRubyOverhangNotSet = 0,
	styleRubyOverhangAuto = 1,
	styleRubyOverhangWhitespace = 2,
	styleRubyOverhangNone = 3,
	styleRubyOverhang_Max = 2147483647,
}


[AllowDuplicates]
public enum styleLayoutGridChar : int32
{
	styleLayoutGridCharNotSet = 0,
	styleLayoutGridCharAuto = 1,
	styleLayoutGridCharNone = 2,
	styleLayoutGridChar_Max = 2147483647,
}


[AllowDuplicates]
public enum styleLayoutGridLine : int32
{
	styleLayoutGridLineNotSet = 0,
	styleLayoutGridLineAuto = 1,
	styleLayoutGridLineNone = 2,
	styleLayoutGridLine_Max = 2147483647,
}


[AllowDuplicates]
public enum styleLayoutGridMode : int32
{
	styleLayoutGridModeNotSet = 0,
	styleLayoutGridModeChar = 1,
	styleLayoutGridModeLine = 2,
	styleLayoutGridModeBoth = 3,
	styleLayoutGridModeNone = 4,
	styleLayoutGridMode_Max = 2147483647,
}


[AllowDuplicates]
public enum styleLayoutGridType : int32
{
	styleLayoutGridTypeNotSet = 0,
	styleLayoutGridTypeLoose = 1,
	styleLayoutGridTypeStrict = 2,
	styleLayoutGridTypeFixed = 3,
	styleLayoutGridType_Max = 2147483647,
}


[AllowDuplicates]
public enum styleLineBreak : int32
{
	styleLineBreakNotSet = 0,
	styleLineBreakNormal = 1,
	styleLineBreakStrict = 2,
	styleLineBreak_Max = 2147483647,
}


[AllowDuplicates]
public enum styleWordBreak : int32
{
	styleWordBreakNotSet = 0,
	styleWordBreakNormal = 1,
	styleWordBreakBreakAll = 2,
	styleWordBreakKeepAll = 3,
	styleWordBreak_Max = 2147483647,
}


[AllowDuplicates]
public enum styleWordWrap : int32
{
	styleWordWrapNotSet = 0,
	styleWordWrapOff = 1,
	styleWordWrapOn = 2,
	styleWordWrap_Max = 2147483647,
}


[AllowDuplicates]
public enum styleTextJustify : int32
{
	styleTextJustifyNotSet = 0,
	styleTextJustifyInterWord = 1,
	styleTextJustifyNewspaper = 2,
	styleTextJustifyDistribute = 3,
	styleTextJustifyDistributeAllLines = 4,
	styleTextJustifyInterIdeograph = 5,
	styleTextJustifyInterCluster = 6,
	styleTextJustifyKashida = 7,
	styleTextJustifyAuto = 8,
	styleTextJustify_Max = 2147483647,
}


[AllowDuplicates]
public enum styleTextAlignLast : int32
{
	styleTextAlignLastNotSet = 0,
	styleTextAlignLastLeft = 1,
	styleTextAlignLastCenter = 2,
	styleTextAlignLastRight = 3,
	styleTextAlignLastJustify = 4,
	styleTextAlignLastAuto = 5,
	styleTextAlignLast_Max = 2147483647,
}


[AllowDuplicates]
public enum styleTextJustifyTrim : int32
{
	styleTextJustifyTrimNotSet = 0,
	styleTextJustifyTrimNone = 1,
	styleTextJustifyTrimPunctuation = 2,
	styleTextJustifyTrimPunctAndKana = 3,
	styleTextJustifyTrim_Max = 2147483647,
}


[AllowDuplicates]
public enum styleAccelerator : int32
{
	styleAcceleratorFalse = 0,
	styleAcceleratorTrue = 1,
	styleAccelerator_Max = 2147483647,
}


[AllowDuplicates]
public enum styleLayoutFlow : int32
{
	styleLayoutFlowHorizontal = 0,
	styleLayoutFlowVerticalIdeographic = 1,
	styleLayoutFlowNotSet = 2,
	styleLayoutFlow_Max = 2147483647,
}


[AllowDuplicates]
public enum styleBlockProgression : int32
{
	styleBlockProgressionTb = 0,
	styleBlockProgressionRl = 1,
	styleBlockProgressionBt = 2,
	styleBlockProgressionLr = 3,
	styleBlockProgressionNotSet = 4,
	styleBlockProgression_Max = 2147483647,
}


[AllowDuplicates]
public enum styleWritingMode : int32
{
	styleWritingModeLrtb = 0,
	styleWritingModeTbrl = 1,
	styleWritingModeRltb = 2,
	styleWritingModeBtrl = 3,
	styleWritingModeNotSet = 4,
	styleWritingModeTblr = 5,
	styleWritingModeBtlr = 6,
	styleWritingModeLrbt = 7,
	styleWritingModeRlbt = 8,
	styleWritingModeLr = 9,
	styleWritingModeRl = 10,
	styleWritingModeTb = 11,
	styleWritingMode_Max = 2147483647,
}


[AllowDuplicates]
public enum styleBool : int32
{
	styleBoolFalse = 0,
	styleBoolTrue = 1,
	styleBool_Max = 2147483647,
}


[AllowDuplicates]
public enum styleTextUnderlinePosition : int32
{
	styleTextUnderlinePositionBelow = 0,
	styleTextUnderlinePositionAbove = 1,
	styleTextUnderlinePositionAuto = 2,
	styleTextUnderlinePositionNotSet = 3,
	styleTextUnderlinePosition_Max = 2147483647,
}


[AllowDuplicates]
public enum styleTextOverflow : int32
{
	styleTextOverflowClip = 0,
	styleTextOverflowEllipsis = 1,
	styleTextOverflowNotSet = 2,
	styleTextOverflow_Max = 2147483647,
}


[AllowDuplicates]
public enum styleInterpolation : int32
{
	styleInterpolationNotSet = 0,
	styleInterpolationNN = 1,
	styleInterpolationBCH = 2,
	styleInterpolation_Max = 2147483647,
}


[AllowDuplicates]
public enum styleBoxSizing : int32
{
	styleBoxSizingNotSet = 0,
	styleBoxSizingContentBox = 1,
	styleBoxSizingBorderBox = 2,
	styleBoxSizing_Max = 2147483647,
}


[AllowDuplicates]
public enum styleFlex : int32
{
	styleFlexNone = 0,
	styleFlexNotSet = 1,
	styleFlex_Max = 2147483647,
}


[AllowDuplicates]
public enum styleFlexBasis : int32
{
	styleFlexBasisAuto = 0,
	styleFlexBasisNotSet = 1,
	styleFlexBasis_Max = 2147483647,
}


[AllowDuplicates]
public enum styleFlexDirection : int32
{
	styleFlexDirectionRow = 0,
	styleFlexDirectionRowReverse = 1,
	styleFlexDirectionColumn = 2,
	styleFlexDirectionColumnReverse = 3,
	styleFlexDirectionNotSet = 4,
	styleFlexDirection_Max = 2147483647,
}


[AllowDuplicates]
public enum styleWebkitBoxOrient : int32
{
	styleWebkitBoxOrientHorizontal = 0,
	styleWebkitBoxOrientInlineAxis = 1,
	styleWebkitBoxOrientVertical = 2,
	styleWebkitBoxOrientBlockAxis = 3,
	styleWebkitBoxOrientNotSet = 4,
	styleWebkitBoxOrient_Max = 2147483647,
}


[AllowDuplicates]
public enum styleWebkitBoxDirection : int32
{
	styleWebkitBoxDirectionNormal = 0,
	styleWebkitBoxDirectionReverse = 1,
	styleWebkitBoxDirectionNotSet = 2,
	styleWebkitBoxDirection_Max = 2147483647,
}


[AllowDuplicates]
public enum styleFlexWrap : int32
{
	styleFlexWrapNowrap = 0,
	styleFlexWrapWrap = 1,
	styleFlexWrapWrapReverse = 2,
	styleFlexWrapNotSet = 3,
	styleFlexWrap_Max = 2147483647,
}


[AllowDuplicates]
public enum styleAlignItems : int32
{
	styleAlignItemsFlexStart = 0,
	styleAlignItemsFlexEnd = 1,
	styleAlignItemsCenter = 2,
	styleAlignItemsBaseline = 3,
	styleAlignItemsStretch = 4,
	styleAlignItemsNotSet = 5,
	styleAlignItems_Max = 2147483647,
}


[AllowDuplicates]
public enum styleMsFlexAlign : int32
{
	styleMsFlexAlignStart = 0,
	styleMsFlexAlignEnd = 1,
	styleMsFlexAlignCenter = 2,
	styleMsFlexAlignBaseline = 3,
	styleMsFlexAlignStretch = 4,
	styleMsFlexAlignNotSet = 5,
	styleMsFlexAlign_Max = 2147483647,
}


[AllowDuplicates]
public enum styleMsFlexItemAlign : int32
{
	styleMsFlexItemAlignStart = 0,
	styleMsFlexItemAlignEnd = 1,
	styleMsFlexItemAlignCenter = 2,
	styleMsFlexItemAlignBaseline = 3,
	styleMsFlexItemAlignStretch = 4,
	styleMsFlexItemAlignAuto = 5,
	styleMsFlexItemAlignNotSet = 6,
	styleMsFlexItemAlign_Max = 2147483647,
}


[AllowDuplicates]
public enum styleAlignSelf : int32
{
	styleAlignSelfFlexStart = 0,
	styleAlignSelfFlexEnd = 1,
	styleAlignSelfCenter = 2,
	styleAlignSelfBaseline = 3,
	styleAlignSelfStretch = 4,
	styleAlignSelfAuto = 5,
	styleAlignSelfNotSet = 6,
	styleAlignSelf_Max = 2147483647,
}


[AllowDuplicates]
public enum styleJustifyContent : int32
{
	styleJustifyContentFlexStart = 0,
	styleJustifyContentFlexEnd = 1,
	styleJustifyContentCenter = 2,
	styleJustifyContentSpaceBetween = 3,
	styleJustifyContentSpaceAround = 4,
	styleJustifyContentNotSet = 5,
	styleJustifyContent_Max = 2147483647,
}


[AllowDuplicates]
public enum styleMsFlexPack : int32
{
	styleMsFlexPackStart = 0,
	styleMsFlexPackEnd = 1,
	styleMsFlexPackCenter = 2,
	styleMsFlexPackJustify = 3,
	styleMsFlexPackDistribute = 4,
	styleMsFlexPackNotSet = 5,
	styleMsFlexPack_Max = 2147483647,
}


[AllowDuplicates]
public enum styleWebkitBoxPack : int32
{
	styleWebkitBoxPackStart = 0,
	styleWebkitBoxPackEnd = 1,
	styleWebkitBoxPackCenter = 2,
	styleWebkitBoxPackJustify = 3,
	styleWebkitBoxPackNotSet = 5,
	styleWebkitBoxPack_Max = 2147483647,
}


[AllowDuplicates]
public enum styleMsFlexLinePack : int32
{
	styleMsFlexLinePackStart = 0,
	styleMsFlexLinePackEnd = 1,
	styleMsFlexLinePackCenter = 2,
	styleMsFlexLinePackJustify = 3,
	styleMsFlexLinePackDistribute = 4,
	styleMsFlexLinePackStretch = 5,
	styleMsFlexLinePackNotSet = 6,
	styleMsFlexLinePack_Max = 2147483647,
}


[AllowDuplicates]
public enum styleAlignContent : int32
{
	styleAlignContentFlexStart = 0,
	styleAlignContentFlexEnd = 1,
	styleAlignContentCenter = 2,
	styleAlignContentSpaceBetween = 3,
	styleAlignContentSpaceAround = 4,
	styleAlignContentStretch = 5,
	styleAlignContentNotSet = 6,
	styleAlignContent_Max = 2147483647,
}


[AllowDuplicates]
public enum styleColumnFill : int32
{
	styleColumnFillAuto = 0,
	styleColumnFillBalance = 1,
	styleColumnFillNotSet = 2,
	styleColumnFill_Max = 2147483647,
}


[AllowDuplicates]
public enum styleColumnSpan : int32
{
	styleColumnSpanNone = 0,
	styleColumnSpanAll = 1,
	styleColumnSpanOne = 2,
	styleColumnSpanNotSet = 3,
	styleColumnSpan_Max = 2147483647,
}


[AllowDuplicates]
public enum styleBreak : int32
{
	styleBreakNotSet = 0,
	styleBreakAuto = 1,
	styleBreakAlways = 2,
	styleBreakAvoid = 3,
	styleBreakLeft = 4,
	styleBreakRight = 5,
	styleBreakPage = 6,
	styleBreakColumn = 7,
	styleBreakAvoidPage = 8,
	styleBreakAvoidColumn = 9,
	styleBreak_Max = 2147483647,
}


[AllowDuplicates]
public enum styleBreakInside : int32
{
	styleBreakInsideNotSet = 0,
	styleBreakInsideAuto = 1,
	styleBreakInsideAvoid = 2,
	styleBreakInsideAvoidPage = 3,
	styleBreakInsideAvoidColumn = 4,
	styleBreakInside_Max = 2147483647,
}


[AllowDuplicates]
public enum styleMsScrollChaining : int32
{
	styleMsScrollChainingNotSet = 0,
	styleMsScrollChainingNone = 1,
	styleMsScrollChainingChained = 2,
	styleMsScrollChaining_Max = 2147483647,
}


[AllowDuplicates]
public enum styleMsContentZooming : int32
{
	styleMsContentZoomingNotSet = 0,
	styleMsContentZoomingNone = 1,
	styleMsContentZoomingZoom = 2,
	styleMsContentZooming_Max = 2147483647,
}


[AllowDuplicates]
public enum styleMsContentZoomSnapType : int32
{
	styleMsContentZoomSnapTypeNotSet = 0,
	styleMsContentZoomSnapTypeNone = 1,
	styleMsContentZoomSnapTypeMandatory = 2,
	styleMsContentZoomSnapTypeProximity = 3,
	styleMsContentZoomSnapType_Max = 2147483647,
}


[AllowDuplicates]
public enum styleMsScrollRails : int32
{
	styleMsScrollRailsNotSet = 0,
	styleMsScrollRailsNone = 1,
	styleMsScrollRailsRailed = 2,
	styleMsScrollRails_Max = 2147483647,
}


[AllowDuplicates]
public enum styleMsContentZoomChaining : int32
{
	styleMsContentZoomChainingNotSet = 0,
	styleMsContentZoomChainingNone = 1,
	styleMsContentZoomChainingChained = 2,
	styleMsContentZoomChaining_Max = 2147483647,
}


[AllowDuplicates]
public enum styleMsScrollSnapType : int32
{
	styleMsScrollSnapTypeNotSet = 0,
	styleMsScrollSnapTypeNone = 1,
	styleMsScrollSnapTypeMandatory = 2,
	styleMsScrollSnapTypeProximity = 3,
	styleMsScrollSnapType_Max = 2147483647,
}


[AllowDuplicates]
public enum styleGridColumn : int32
{
	styleGridColumnNotSet = 0,
	styleGridColumn_Max = 2147483647,
}


[AllowDuplicates]
public enum styleGridColumnAlign : int32
{
	styleGridColumnAlignCenter = 0,
	styleGridColumnAlignEnd = 1,
	styleGridColumnAlignStart = 2,
	styleGridColumnAlignStretch = 3,
	styleGridColumnAlignNotSet = 4,
	styleGridColumnAlign_Max = 2147483647,
}


[AllowDuplicates]
public enum styleGridColumnSpan : int32
{
	styleGridColumnSpanNotSet = 0,
	styleGridColumnSpan_Max = 2147483647,
}


[AllowDuplicates]
public enum styleGridRow : int32
{
	styleGridRowNotSet = 0,
	styleGridRow_Max = 2147483647,
}


[AllowDuplicates]
public enum styleGridRowAlign : int32
{
	styleGridRowAlignCenter = 0,
	styleGridRowAlignEnd = 1,
	styleGridRowAlignStart = 2,
	styleGridRowAlignStretch = 3,
	styleGridRowAlignNotSet = 4,
	styleGridRowAlign_Max = 2147483647,
}


[AllowDuplicates]
public enum styleGridRowSpan : int32
{
	styleGridRowSpanNotSet = 0,
	styleGridRowSpan_Max = 2147483647,
}


[AllowDuplicates]
public enum styleWrapThrough : int32
{
	styleWrapThroughNotSet = 0,
	styleWrapThroughWrap = 1,
	styleWrapThroughNone = 2,
	styleWrapThrough_Max = 2147483647,
}


[AllowDuplicates]
public enum styleWrapFlow : int32
{
	styleWrapFlowNotSet = 0,
	styleWrapFlowAuto = 1,
	styleWrapFlowBoth = 2,
	styleWrapFlowStart = 3,
	styleWrapFlowEnd = 4,
	styleWrapFlowClear = 5,
	styleWrapFlowMinimum = 6,
	styleWrapFlowMaximum = 7,
	styleWrapFlow_Max = 2147483647,
}


[AllowDuplicates]
public enum styleAlignmentBaseline : int32
{
	styleAlignmentBaselineNotSet = 0,
	styleAlignmentBaselineAfterEdge = 1,
	styleAlignmentBaselineAlphabetic = 2,
	styleAlignmentBaselineAuto = 3,
	styleAlignmentBaselineBaseline = 4,
	styleAlignmentBaselineBeforeEdge = 5,
	styleAlignmentBaselineCentral = 6,
	styleAlignmentBaselineHanging = 7,
	styleAlignmentBaselineMathematical = 8,
	styleAlignmentBaselineMiddle = 9,
	styleAlignmentBaselineTextAfterEdge = 10,
	styleAlignmentBaselineTextBeforeEdge = 11,
	styleAlignmentBaselineIdeographic = 12,
	styleAlignmentBaseline_Max = 2147483647,
}


[AllowDuplicates]
public enum styleBaselineShift : int32
{
	styleBaselineShiftBaseline = 0,
	styleBaselineShiftSub = 1,
	styleBaselineShiftSuper = 2,
	styleBaselineShift_Max = 2147483647,
}


[AllowDuplicates]
public enum styleClipRule : int32
{
	styleClipRuleNotSet = 0,
	styleClipRuleNonZero = 1,
	styleClipRuleEvenOdd = 2,
	styleClipRule_Max = 2147483647,
}


[AllowDuplicates]
public enum styleDominantBaseline : int32
{
	styleDominantBaselineNotSet = 0,
	styleDominantBaselineAlphabetic = 1,
	styleDominantBaselineAuto = 2,
	styleDominantBaselineCentral = 3,
	styleDominantBaselineHanging = 4,
	styleDominantBaselineIdeographic = 5,
	styleDominantBaselineMathematical = 6,
	styleDominantBaselineMiddle = 7,
	styleDominantBaselineNoChange = 8,
	styleDominantBaselineResetSize = 9,
	styleDominantBaselineTextAfterEdge = 10,
	styleDominantBaselineTextBeforeEdge = 11,
	styleDominantBaselineUseScript = 12,
	styleDominantBaseline_Max = 2147483647,
}


[AllowDuplicates]
public enum styleFillRule : int32
{
	styleFillRuleNotSet = 0,
	styleFillRuleNonZero = 1,
	styleFillRuleEvenOdd = 2,
	styleFillRule_Max = 2147483647,
}


[AllowDuplicates]
public enum styleFontStretch : int32
{
	styleFontStretchNotSet = 0,
	styleFontStretchWider = 1,
	styleFontStretchNarrower = 2,
	styleFontStretchUltraCondensed = 3,
	styleFontStretchExtraCondensed = 4,
	styleFontStretchCondensed = 5,
	styleFontStretchSemiCondensed = 6,
	styleFontStretchNormal = 7,
	styleFontStretchSemiExpanded = 8,
	styleFontStretchExpanded = 9,
	styleFontStretchExtraExpanded = 10,
	styleFontStretchUltraExpanded = 11,
	styleFontStretch_Max = 2147483647,
}


[AllowDuplicates]
public enum stylePointerEvents : int32
{
	stylePointerEventsNotSet = 0,
	stylePointerEventsVisiblePainted = 1,
	stylePointerEventsVisibleFill = 2,
	stylePointerEventsVisibleStroke = 3,
	stylePointerEventsVisible = 4,
	stylePointerEventsPainted = 5,
	stylePointerEventsFill = 6,
	stylePointerEventsStroke = 7,
	stylePointerEventsAll = 8,
	stylePointerEventsNone = 9,
	stylePointerEventsInitial = 10,
	stylePointerEventsAuto = 11,
	stylePointerEvents_Max = 2147483647,
}


[AllowDuplicates]
public enum styleEnableBackground : int32
{
	styleEnableBackgroundNotSet = 0,
	styleEnableBackgroundAccumulate = 1,
	styleEnableBackgroundNew = 2,
	styleEnableBackgroundInherit = 3,
	styleEnableBackground_Max = 2147483647,
}


[AllowDuplicates]
public enum styleStrokeLinecap : int32
{
	styleStrokeLinecapNotSet = 0,
	styleStrokeLinecapButt = 1,
	styleStrokeLinecapRound = 2,
	styleStrokeLinecapSquare = 3,
	styleStrokeLinecap_Max = 2147483647,
}


[AllowDuplicates]
public enum styleStrokeLinejoin : int32
{
	styleStrokeLinejoinNotSet = 0,
	styleStrokeLinejoinMiter = 1,
	styleStrokeLinejoinRound = 2,
	styleStrokeLinejoinBevel = 3,
	styleStrokeLinejoin_Max = 2147483647,
}


[AllowDuplicates]
public enum styleTextAnchor : int32
{
	styleTextAnchorNotSet = 0,
	styleTextAnchorStart = 1,
	styleTextAnchorMiddle = 2,
	styleTextAnchorEnd = 3,
	styleTextAnchor_Max = 2147483647,
}


[AllowDuplicates]
public enum styleAttrType : int32
{
	styleAttrTypeString = 0,
	styleAttrTypeColor = 1,
	styleAttrTypeUrl = 2,
	styleAttrTypeInteger = 3,
	styleAttrTypeNumber = 4,
	styleAttrTypeLength = 5,
	styleAttrTypePx = 6,
	styleAttrTypeEm = 7,
	styleAttrTypeEx = 8,
	styleAttrTypeIn = 9,
	styleAttrTypeCm = 10,
	styleAttrTypeMm = 11,
	styleAttrTypePt = 12,
	styleAttrTypePc = 13,
	styleAttrTypeRem = 14,
	styleAttrTypeCh = 15,
	styleAttrTypeVh = 16,
	styleAttrTypeVw = 17,
	styleAttrTypeVmin = 18,
	styleAttrTypePercentage = 19,
	styleAttrTypeAngle = 20,
	styleAttrTypeDeg = 21,
	styleAttrTypeRad = 22,
	styleAttrTypeGrad = 23,
	styleAttrTypeTime = 24,
	styleAttrTypeS = 25,
	styleAttrTypeMs = 26,
	styleAttrType_Max = 2147483647,
}


[AllowDuplicates]
public enum styleInitialColor : int32
{
	styleInitialColorNoInitial = 0,
	styleInitialColorColorProperty = 1,
	styleInitialColorTransparent = 2,
	styleInitialColorInvert = 3,
	styleInitialColor_Max = 2147483647,
}


[AllowDuplicates]
public enum styleInitialString : int32
{
	styleInitialStringNoInitial = 0,
	styleInitialStringNone = 1,
	styleInitialStringAuto = 2,
	styleInitialStringNormal = 3,
	styleInitialString_Max = 2147483647,
}


[AllowDuplicates]
public enum styleTransformOriginX : int32
{
	styleTransformOriginXNotSet = 0,
	styleTransformOriginXLeft = 1,
	styleTransformOriginXCenter = 2,
	styleTransformOriginXRight = 3,
	styleTransformOriginX_Max = 2147483647,
}


[AllowDuplicates]
public enum styleTransformOriginY : int32
{
	styleTransformOriginYNotSet = 0,
	styleTransformOriginYTop = 1,
	styleTransformOriginYCenter = 2,
	styleTransformOriginYBottom = 3,
	styleTransformOriginY_Max = 2147483647,
}


[AllowDuplicates]
public enum stylePerspectiveOriginX : int32
{
	stylePerspectiveOriginXNotSet = 0,
	stylePerspectiveOriginXLeft = 1,
	stylePerspectiveOriginXCenter = 2,
	stylePerspectiveOriginXRight = 3,
	stylePerspectiveOriginX_Max = 2147483647,
}


[AllowDuplicates]
public enum stylePerspectiveOriginY : int32
{
	stylePerspectiveOriginYNotSet = 0,
	stylePerspectiveOriginYTop = 1,
	stylePerspectiveOriginYCenter = 2,
	stylePerspectiveOriginYBottom = 3,
	stylePerspectiveOriginY_Max = 2147483647,
}


[AllowDuplicates]
public enum styleTransformStyle : int32
{
	styleTransformStyleFlat = 0,
	styleTransformStylePreserve3D = 1,
	styleTransformStyleNotSet = 2,
	styleTransformStyle_Max = 2147483647,
}


[AllowDuplicates]
public enum styleBackfaceVisibility : int32
{
	styleBackfaceVisibilityVisible = 0,
	styleBackfaceVisibilityHidden = 1,
	styleBackfaceVisibilityNotSet = 2,
	styleBackfaceVisibility_Max = 2147483647,
}


[AllowDuplicates]
public enum styleTextSizeAdjust : int32
{
	styleTextSizeAdjustNone = 0,
	styleTextSizeAdjustAuto = 1,
	styleTextSizeAdjust_Max = 2147483647,
}


[AllowDuplicates]
public enum styleColorInterpolationFilters : int32
{
	styleColorInterpolationFiltersAuto = 0,
	styleColorInterpolationFiltersSRgb = 1,
	styleColorInterpolationFiltersLinearRgb = 2,
	styleColorInterpolationFiltersNotSet = 3,
	styleColorInterpolationFilters_Max = 2147483647,
}


[AllowDuplicates]
public enum styleHyphens : int32
{
	styleHyphensNone = 0,
	styleHyphensManual = 1,
	styleHyphensAuto = 2,
	styleHyphensNotSet = 3,
	styleHyphens_Max = 2147483647,
}


[AllowDuplicates]
public enum styleHyphenateLimitLines : int32
{
	styleHyphenateLimitLinesNoLimit = 0,
	styleHyphenateLimitLines_Max = 2147483647,
}


[AllowDuplicates]
public enum styleMsAnimationPlayState : int32
{
	styleMsAnimationPlayStateRunning = 0,
	styleMsAnimationPlayStatePaused = 1,
	styleMsAnimationPlayStateNotSet = 2,
	styleMsAnimationPlayState_Max = 2147483647,
}


[AllowDuplicates]
public enum styleMsAnimationDirection : int32
{
	styleMsAnimationDirectionNormal = 0,
	styleMsAnimationDirectionAlternate = 1,
	styleMsAnimationDirectionReverse = 2,
	styleMsAnimationDirectionAlternateReverse = 3,
	styleMsAnimationDirectionNotSet = 4,
	styleMsAnimationDirection_Max = 2147483647,
}


[AllowDuplicates]
public enum styleMsAnimationFillMode : int32
{
	styleMsAnimationFillModeNone = 0,
	styleMsAnimationFillModeForwards = 1,
	styleMsAnimationFillModeBackwards = 2,
	styleMsAnimationFillModeBoth = 3,
	styleMsAnimationFillModeNotSet = 4,
	styleMsAnimationFillMode_Max = 2147483647,
}


[AllowDuplicates]
public enum styleMsHighContrastAdjust : int32
{
	styleMsHighContrastAdjustNotSet = 0,
	styleMsHighContrastAdjustAuto = 1,
	styleMsHighContrastAdjustNone = 2,
	styleMsHighContrastAdjust_Max = 2147483647,
}


[AllowDuplicates]
public enum styleMsUserSelect : int32
{
	styleMsUserSelectAuto = 0,
	styleMsUserSelectText = 1,
	styleMsUserSelectElement = 2,
	styleMsUserSelectNone = 3,
	styleMsUserSelectNotSet = 4,
	styleMsUserSelect_Max = 2147483647,
}


[AllowDuplicates]
public enum styleMsTouchAction : int32
{
	styleMsTouchActionNotSet = -1,
	styleMsTouchActionNone = 0,
	styleMsTouchActionAuto = 1,
	styleMsTouchActionManipulation = 2,
	styleMsTouchActionDoubleTapZoom = 4,
	styleMsTouchActionPanX = 8,
	styleMsTouchActionPanY = 16,
	styleMsTouchActionPinchZoom = 32,
	styleMsTouchActionCrossSlideX = 64,
	styleMsTouchActionCrossSlideY = 128,
	styleMsTouchAction_Max = 2147483647,
}


[AllowDuplicates]
public enum styleMsTouchSelect : int32
{
	styleMsTouchSelectGrippers = 0,
	styleMsTouchSelectNone = 1,
	styleMsTouchSelectNotSet = 2,
	styleMsTouchSelect_Max = 2147483647,
}


[AllowDuplicates]
public enum styleMsScrollTranslation : int32
{
	styleMsScrollTranslationNotSet = 0,
	styleMsScrollTranslationNone = 1,
	styleMsScrollTranslationVtoH = 2,
	styleMsScrollTranslation_Max = 2147483647,
}


[AllowDuplicates]
public enum styleBorderImageRepeat : int32
{
	styleBorderImageRepeatStretch = 0,
	styleBorderImageRepeatRepeat = 1,
	styleBorderImageRepeatRound = 2,
	styleBorderImageRepeatSpace = 3,
	styleBorderImageRepeatNotSet = 4,
	styleBorderImageRepeat_Max = 2147483647,
}


[AllowDuplicates]
public enum styleBorderImageSliceFill : int32
{
	styleBorderImageSliceFillNotSet = 0,
	styleBorderImageSliceFillFill = 1,
	styleBorderImageSliceFill_Max = 2147483647,
}


[AllowDuplicates]
public enum styleMsImeAlign : int32
{
	styleMsImeAlignAuto = 0,
	styleMsImeAlignAfter = 1,
	styleMsImeAlignNotSet = 2,
	styleMsImeAlign_Max = 2147483647,
}


[AllowDuplicates]
public enum styleMsTextCombineHorizontal : int32
{
	styleMsTextCombineHorizontalNone = 0,
	styleMsTextCombineHorizontalAll = 1,
	styleMsTextCombineHorizontalDigits = 2,
	styleMsTextCombineHorizontalNotSet = 3,
	styleMsTextCombineHorizontal_Max = 2147483647,
}


[AllowDuplicates]
public enum styleWebkitAppearance : int32
{
	styleWebkitAppearanceNone = 0,
	styleWebkitAppearanceCapsLockIndicator = 1,
	styleWebkitAppearanceButton = 2,
	styleWebkitAppearanceButtonBevel = 3,
	styleWebkitAppearanceCaret = 4,
	styleWebkitAppearanceCheckbox = 5,
	styleWebkitAppearanceDefaultButton = 6,
	styleWebkitAppearanceListbox = 7,
	styleWebkitAppearanceListitem = 8,
	styleWebkitAppearanceMediaFullscreenButton = 9,
	styleWebkitAppearanceMediaMuteButton = 10,
	styleWebkitAppearanceMediaPlayButton = 11,
	styleWebkitAppearanceMediaSeekBackButton = 12,
	styleWebkitAppearanceMediaSeekForwardButton = 13,
	styleWebkitAppearanceMediaSlider = 14,
	styleWebkitAppearanceMediaSliderthumb = 15,
	styleWebkitAppearanceMenulist = 16,
	styleWebkitAppearanceMenulistButton = 17,
	styleWebkitAppearanceMenulistText = 18,
	styleWebkitAppearanceMenulistTextfield = 19,
	styleWebkitAppearancePushButton = 20,
	styleWebkitAppearanceRadio = 21,
	styleWebkitAppearanceSearchfield = 22,
	styleWebkitAppearanceSearchfieldCancelButton = 23,
	styleWebkitAppearanceSearchfieldDecoration = 24,
	styleWebkitAppearanceSearchfieldResultsButton = 25,
	styleWebkitAppearanceSearchfieldResultsDecoration = 26,
	styleWebkitAppearanceSliderHorizontal = 27,
	styleWebkitAppearanceSliderVertical = 28,
	styleWebkitAppearanceSliderthumbHorizontal = 29,
	styleWebkitAppearanceSliderthumbVertical = 30,
	styleWebkitAppearanceSquareButton = 31,
	styleWebkitAppearanceTextarea = 32,
	styleWebkitAppearanceTextfield = 33,
	styleWebkitAppearanceNotSet = 34,
	styleWebkitAppearance_Max = 2147483647,
}


[AllowDuplicates]
public enum styleViewportSize : int32
{
	styleViewportSizeAuto = 0,
	styleViewportSizeDeviceWidth = 1,
	styleViewportSizeDeviceHeight = 2,
	styleViewportSize_Max = 2147483647,
}


[AllowDuplicates]
public enum styleUserZoom : int32
{
	styleUserZoomNotSet = 0,
	styleUserZoomZoom = 1,
	styleUserZoomFixed = 2,
	styleUserZoom_Max = 2147483647,
}


[AllowDuplicates]
public enum styleTextLineThroughStyle : int32
{
	styleTextLineThroughStyleUndefined = 0,
	styleTextLineThroughStyleSingle = 1,
	styleTextLineThroughStyleDouble = 2,
	styleTextLineThroughStyle_Max = 2147483647,
}


[AllowDuplicates]
public enum styleTextUnderlineStyle : int32
{
	styleTextUnderlineStyleUndefined = 0,
	styleTextUnderlineStyleSingle = 1,
	styleTextUnderlineStyleDouble = 2,
	styleTextUnderlineStyleWords = 3,
	styleTextUnderlineStyleDotted = 4,
	styleTextUnderlineStyleThick = 5,
	styleTextUnderlineStyleDash = 6,
	styleTextUnderlineStyleDotDash = 7,
	styleTextUnderlineStyleDotDotDash = 8,
	styleTextUnderlineStyleWave = 9,
	styleTextUnderlineStyleSingleAccounting = 10,
	styleTextUnderlineStyleDoubleAccounting = 11,
	styleTextUnderlineStyleThickDash = 12,
	styleTextUnderlineStyle_Max = 2147483647,
}


[AllowDuplicates]
public enum styleTextEffect : int32
{
	styleTextEffectNone = 0,
	styleTextEffectEmboss = 1,
	styleTextEffectEngrave = 2,
	styleTextEffectOutline = 3,
	styleTextEffect_Max = 2147483647,
}


[AllowDuplicates]
public enum styleDefaultTextSelection : int32
{
	styleDefaultTextSelectionFalse = 0,
	styleDefaultTextSelectionTrue = 1,
	styleDefaultTextSelection_Max = 2147483647,
}


[AllowDuplicates]
public enum styleTextDecoration : int32
{
	styleTextDecorationNone = 0,
	styleTextDecorationUnderline = 1,
	styleTextDecorationOverline = 2,
	styleTextDecorationLineThrough = 3,
	styleTextDecorationBlink = 4,
	styleTextDecoration_Max = 2147483647,
}


[AllowDuplicates]
public enum textDecoration : int32
{
	textDecorationNone = 0,
	textDecorationUnderline = 1,
	textDecorationOverline = 2,
	textDecorationLineThrough = 3,
	textDecorationBlink = 4,
	textDecoration_Max = 2147483647,
}


[AllowDuplicates]
public enum htmlListType : int32
{
	htmlListTypeNotSet = 0,
	htmlListTypeLargeAlpha = 1,
	htmlListTypeSmallAlpha = 2,
	htmlListTypeLargeRoman = 3,
	htmlListTypeSmallRoman = 4,
	htmlListTypeNumbers = 5,
	htmlListTypeDisc = 6,
	htmlListTypeCircle = 7,
	htmlListTypeSquare = 8,
	htmlListType_Max = 2147483647,
}


[AllowDuplicates]
public enum htmlMethod : int32
{
	htmlMethodNotSet = 0,
	htmlMethodGet = 1,
	htmlMethodPost = 2,
	htmlMethod_Max = 2147483647,
}


[AllowDuplicates]
public enum htmlWrap : int32
{
	htmlWrapOff = 1,
	htmlWrapSoft = 2,
	htmlWrapHard = 3,
	htmlWrap_Max = 2147483647,
}


[AllowDuplicates]
public enum htmlDir : int32
{
	htmlDirNotSet = 0,
	htmlDirLeftToRight = 1,
	htmlDirRightToLeft = 2,
	htmlDir_Max = 2147483647,
}


[AllowDuplicates]
public enum htmlEditable : int32
{
	htmlEditableInherit = 0,
	htmlEditableTrue = 1,
	htmlEditableFalse = 2,
	htmlEditable_Max = 2147483647,
}


[AllowDuplicates]
public enum htmlInput : int32
{
	htmlInputNotSet = 0,
	htmlInputButton = 1,
	htmlInputCheckbox = 2,
	htmlInputFile = 3,
	htmlInputHidden = 4,
	htmlInputImage = 5,
	htmlInputPassword = 6,
	htmlInputRadio = 7,
	htmlInputReset = 8,
	htmlInputSelectOne = 9,
	htmlInputSelectMultiple = 10,
	htmlInputSubmit = 11,
	htmlInputText = 12,
	htmlInputTextarea = 13,
	htmlInputRichtext = 14,
	htmlInputRange = 15,
	htmlInputUrl = 16,
	htmlInputEmail = 17,
	htmlInputNumber = 18,
	htmlInputTel = 19,
	htmlInputSearch = 20,
	htmlInput_Max = 2147483647,
}


[AllowDuplicates]
public enum htmlSpellCheck : int32
{
	htmlSpellCheckNotSet = 0,
	htmlSpellCheckTrue = 1,
	htmlSpellCheckFalse = 2,
	htmlSpellCheckDefault = 3,
	htmlSpellCheck_Max = 2147483647,
}


[AllowDuplicates]
public enum htmlEncoding : int32
{
	htmlEncodingURL = 0,
	htmlEncodingMultipart = 1,
	htmlEncodingText = 2,
	htmlEncoding_Max = 2147483647,
}


[AllowDuplicates]
public enum htmlAdjacency : int32
{
	htmlAdjacencyBeforeBegin = 1,
	htmlAdjacencyAfterBegin = 2,
	htmlAdjacencyBeforeEnd = 3,
	htmlAdjacencyAfterEnd = 4,
	htmlAdjacency_Max = 2147483647,
}


[AllowDuplicates]
public enum htmlTabIndex : int32
{
	htmlTabIndexNotSet = -32768,
	htmlTabIndex_Max = 2147483647,
}


[AllowDuplicates]
public enum htmlComponent : int32
{
	htmlComponentClient = 0,
	htmlComponentSbLeft = 1,
	htmlComponentSbPageLeft = 2,
	htmlComponentSbHThumb = 3,
	htmlComponentSbPageRight = 4,
	htmlComponentSbRight = 5,
	htmlComponentSbUp = 6,
	htmlComponentSbPageUp = 7,
	htmlComponentSbVThumb = 8,
	htmlComponentSbPageDown = 9,
	htmlComponentSbDown = 10,
	htmlComponentSbLeft2 = 11,
	htmlComponentSbPageLeft2 = 12,
	htmlComponentSbRight2 = 13,
	htmlComponentSbPageRight2 = 14,
	htmlComponentSbUp2 = 15,
	htmlComponentSbPageUp2 = 16,
	htmlComponentSbDown2 = 17,
	htmlComponentSbPageDown2 = 18,
	htmlComponentSbTop = 19,
	htmlComponentSbBottom = 20,
	htmlComponentOutside = 21,
	htmlComponentGHTopLeft = 22,
	htmlComponentGHLeft = 23,
	htmlComponentGHTop = 24,
	htmlComponentGHBottomLeft = 25,
	htmlComponentGHTopRight = 26,
	htmlComponentGHBottom = 27,
	htmlComponentGHRight = 28,
	htmlComponentGHBottomRight = 29,
	htmlComponent_Max = 2147483647,
}


[AllowDuplicates]
public enum htmlApplyLocation : int32
{
	htmlApplyLocationInside = 0,
	htmlApplyLocationOutside = 1,
	htmlApplyLocation_Max = 2147483647,
}


[AllowDuplicates]
public enum htmlGlyphMode : int32
{
	htmlGlyphModeNone = 0,
	htmlGlyphModeBegin = 1,
	htmlGlyphModeEnd = 2,
	htmlGlyphModeBoth = 3,
	htmlGlyphMode_Max = 2147483647,
}


[AllowDuplicates]
public enum htmlDraggable : int32
{
	htmlDraggableAuto = 0,
	htmlDraggableTrue = 1,
	htmlDraggableFalse = 2,
	htmlDraggable_Max = 2147483647,
}


[AllowDuplicates]
public enum htmlUnit : int32
{
	htmlUnitCharacter = 1,
	htmlUnitWord = 2,
	htmlUnitSentence = 3,
	htmlUnitTextEdit = 6,
	htmlUnit_Max = 2147483647,
}


[AllowDuplicates]
public enum htmlEndPoints : int32
{
	htmlEndPointsStartToStart = 1,
	htmlEndPointsStartToEnd = 2,
	htmlEndPointsEndToStart = 3,
	htmlEndPointsEndToEnd = 4,
	htmlEndPoints_Max = 2147483647,
}


[AllowDuplicates]
public enum htmlDirection : int32
{
	htmlDirectionForward = 99999,
	htmlDirectionBackward = -99999,
	htmlDirection_Max = 2147483647,
}


[AllowDuplicates]
public enum htmlStart : int32
{
	htmlStartfileopen = 0,
	htmlStartmouseover = 1,
	htmlStart_Max = 2147483647,
}


[AllowDuplicates]
public enum bodyScroll : int32
{
	bodyScrollyes = 1,
	bodyScrollno = 2,
	bodyScrollauto = 4,
	bodyScrolldefault = 3,
	bodyScroll_Max = 2147483647,
}


[AllowDuplicates]
public enum htmlSelectType : int32
{
	htmlSelectTypeSelectOne = 1,
	htmlSelectTypeSelectMultiple = 2,
	htmlSelectType_Max = 2147483647,
}


[AllowDuplicates]
public enum htmlSelectExFlag : int32
{
	htmlSelectExFlagNone = 0,
	htmlSelectExFlagHideSelectionInDesign = 1,
	htmlSelectExFlag_Max = 2147483647,
}


[AllowDuplicates]
public enum htmlSelection : int32
{
	htmlSelectionNone = 0,
	htmlSelectionText = 1,
	htmlSelectionControl = 2,
	htmlSelectionTable = 3,
	htmlSelection_Max = 2147483647,
}


[AllowDuplicates]
public enum htmlMarqueeBehavior : int32
{
	htmlMarqueeBehaviorscroll = 1,
	htmlMarqueeBehaviorslide = 2,
	htmlMarqueeBehavioralternate = 3,
	htmlMarqueeBehavior_Max = 2147483647,
}


[AllowDuplicates]
public enum htmlMarqueeDirection : int32
{
	htmlMarqueeDirectionleft = 1,
	htmlMarqueeDirectionright = 3,
	htmlMarqueeDirectionup = 5,
	htmlMarqueeDirectiondown = 7,
	htmlMarqueeDirection_Max = 2147483647,
}


[AllowDuplicates]
public enum htmlPersistState : int32
{
	htmlPersistStateNormal = 0,
	htmlPersistStateFavorite = 1,
	htmlPersistStateHistory = 2,
	htmlPersistStateSnapshot = 3,
	htmlPersistStateUserData = 4,
	htmlPersistState_Max = 2147483647,
}


[AllowDuplicates]
public enum htmlDropEffect : int32
{
	htmlDropEffectCopy = 0,
	htmlDropEffectLink = 1,
	htmlDropEffectMove = 2,
	htmlDropEffectNone = 3,
	htmlDropEffect_Max = 2147483647,
}


[AllowDuplicates]
public enum htmlEffectAllowed : int32
{
	htmlEffectAllowedCopy = 0,
	htmlEffectAllowedLink = 1,
	htmlEffectAllowedMove = 2,
	htmlEffectAllowedCopyLink = 3,
	htmlEffectAllowedCopyMove = 4,
	htmlEffectAllowedLinkMove = 5,
	htmlEffectAllowedAll = 6,
	htmlEffectAllowedNone = 7,
	htmlEffectAllowedUninitialized = 8,
	htmlEffectAllowed_Max = 2147483647,
}


[AllowDuplicates]
public enum htmlCompatMode : int32
{
	htmlCompatModeBackCompat = 0,
	htmlCompatModeCSS1Compat = 1,
	htmlCompatMode_Max = 2147483647,
}


[AllowDuplicates]
public enum BoolValue : int32
{
	True = 1,
	False = 0,
	BoolValue_Max = 2147483647,
}


[AllowDuplicates]
public enum htmlCaptionAlign : int32
{
	htmlCaptionAlignNotSet = 0,
	htmlCaptionAlignLeft = 1,
	htmlCaptionAlignCenter = 2,
	htmlCaptionAlignRight = 3,
	htmlCaptionAlignJustify = 4,
	htmlCaptionAlignTop = 5,
	htmlCaptionAlignBottom = 6,
	htmlCaptionAlign_Max = 2147483647,
}


[AllowDuplicates]
public enum htmlCaptionVAlign : int32
{
	htmlCaptionVAlignNotSet = 0,
	htmlCaptionVAlignTop = 1,
	htmlCaptionVAlignBottom = 2,
	htmlCaptionVAlign_Max = 2147483647,
}


[AllowDuplicates]
public enum htmlFrame : int32
{
	htmlFrameNotSet = 0,
	htmlFramevoid = 1,
	htmlFrameabove = 2,
	htmlFramebelow = 3,
	htmlFramehsides = 4,
	htmlFramelhs = 5,
	htmlFramerhs = 6,
	htmlFramevsides = 7,
	htmlFramebox = 8,
	htmlFrameborder = 9,
	htmlFrame_Max = 2147483647,
}


[AllowDuplicates]
public enum htmlRules : int32
{
	htmlRulesNotSet = 0,
	htmlRulesnone = 1,
	htmlRulesgroups = 2,
	htmlRulesrows = 3,
	htmlRulescols = 4,
	htmlRulesall = 5,
	htmlRules_Max = 2147483647,
}


[AllowDuplicates]
public enum htmlCellAlign : int32
{
	htmlCellAlignNotSet = 0,
	htmlCellAlignLeft = 1,
	htmlCellAlignCenter = 2,
	htmlCellAlignRight = 3,
	htmlCellAlignMiddle = 2,
	htmlCellAlign_Max = 2147483647,
}


[AllowDuplicates]
public enum htmlCellVAlign : int32
{
	htmlCellVAlignNotSet = 0,
	htmlCellVAlignTop = 1,
	htmlCellVAlignMiddle = 2,
	htmlCellVAlignBottom = 3,
	htmlCellVAlignBaseline = 4,
	htmlCellVAlignCenter = 2,
	htmlCellVAlign_Max = 2147483647,
}


[AllowDuplicates]
public enum frameScrolling : int32
{
	frameScrollingyes = 1,
	frameScrollingno = 2,
	frameScrollingauto = 4,
	frameScrolling_Max = 2147483647,
}


[AllowDuplicates]
public enum sandboxAllow : int32
{
	sandboxAllowScripts = 0,
	sandboxAllowSameOrigin = 1,
	sandboxAllowTopNavigation = 2,
	sandboxAllowForms = 3,
	sandboxAllowPopups = 4,
	sandboxAllow_Max = 2147483647,
}


[AllowDuplicates]
public enum svgAngleType : int32
{
	SVG_ANGLETYPE_UNKNOWN = 0,
	SVG_ANGLETYPE_UNSPECIFIED = 1,
	SVG_ANGLETYPE_DEG = 2,
	SVG_ANGLETYPE_RAD = 3,
	SVG_ANGLETYPE_GRAD = 4,
	svgAngleType_Max = 2147483647,
}


[AllowDuplicates]
public enum svgExternalResourcesRequired : int32
{
	svgExternalResourcesRequiredFalse = 0,
	svgExternalResourcesRequiredTrue = 1,
	svgExternalResourcesRequired_Max = 2147483647,
}


[AllowDuplicates]
public enum svgFocusable : int32
{
	svgFocusableNotSet = 0,
	svgFocusableAuto = 1,
	svgFocusableTrue = 2,
	svgFocusableFalse = 3,
	svgFocusable_Max = 2147483647,
}


[AllowDuplicates]
public enum svgLengthType : int32
{
	SVG_LENGTHTYPE_UNKNOWN = 0,
	SVG_LENGTHTYPE_NUMBER = 1,
	SVG_LENGTHTYPE_PERCENTAGE = 2,
	SVG_LENGTHTYPE_EMS = 3,
	SVG_LENGTHTYPE_EXS = 4,
	SVG_LENGTHTYPE_PX = 5,
	SVG_LENGTHTYPE_CM = 6,
	SVG_LENGTHTYPE_MM = 7,
	SVG_LENGTHTYPE_IN = 8,
	SVG_LENGTHTYPE_PT = 9,
	SVG_LENGTHTYPE_PC = 10,
	svgLengthType_Max = 2147483647,
}


[AllowDuplicates]
public enum svgPathSegType : int32
{
	PATHSEG_UNKNOWN = 0,
	PATHSEG_CLOSEPATH = 1,
	PATHSEG_MOVETO_ABS = 2,
	PATHSEG_MOVETO_REL = 3,
	PATHSEG_LINETO_ABS = 4,
	PATHSEG_LINETO_REL = 5,
	PATHSEG_CURVETO_CUBIC_ABS = 6,
	PATHSEG_CURVETO_CUBIC_REL = 7,
	PATHSEG_CURVETO_QUADRATIC_ABS = 8,
	PATHSEG_CURVETO_QUADRATIC_REL = 9,
	PATHSEG_ARC_ABS = 10,
	PATHSEG_ARC_REL = 11,
	PATHSEG_LINETO_HORIZONTAL_ABS = 12,
	PATHSEG_LINETO_HORIZONTAL_REL = 13,
	PATHSEG_LINETO_VERTICAL_ABS = 14,
	PATHSEG_LINETO_VERTICAL_REL = 15,
	PATHSEG_CURVETO_CUBIC_SMOOTH_ABS = 16,
	PATHSEG_CURVETO_CUBIC_SMOOTH_REL = 17,
	PATHSEG_CURVETO_QUADRATIC_SMOOTH_ABS = 18,
	PATHSEG_CURVETO_QUADRATIC_SMOOTH_REL = 19,
	svgPathSegType_Max = 2147483647,
}


[AllowDuplicates]
public enum svgTransformType : int32
{
	SVG_TRANSFORM_UNKNOWN = 0,
	SVG_TRANSFORM_MATRIX = 1,
	SVG_TRANSFORM_TRANSLATE = 2,
	SVG_TRANSFORM_SCALE = 3,
	SVG_TRANSFORM_ROTATE = 4,
	SVG_TRANSFORM_SKEWX = 5,
	SVG_TRANSFORM_SKEWY = 6,
	svgTransformType_Max = 2147483647,
}


[AllowDuplicates]
public enum svgPreserveAspectRatioAlignType : int32
{
	SVG_PRESERVEASPECTRATIO_UNKNOWN = 0,
	SVG_PRESERVEASPECTRATIO_NONE = 1,
	SVG_PRESERVEASPECTRATIO_XMINYMIN = 2,
	SVG_PRESERVEASPECTRATIO_XMIDYMIN = 3,
	SVG_PRESERVEASPECTRATIO_XMAXYMIN = 4,
	SVG_PRESERVEASPECTRATIO_XMINYMID = 5,
	SVG_PRESERVEASPECTRATIO_XMIDYMID = 6,
	SVG_PRESERVEASPECTRATIO_XMAXYMID = 7,
	SVG_PRESERVEASPECTRATIO_XMINYMAX = 8,
	SVG_PRESERVEASPECTRATIO_XMIDYMAX = 9,
	SVG_PRESERVEASPECTRATIO_XMAXYMAX = 10,
	svgPreserveAspectRatioAlignType_Max = 2147483647,
}


[AllowDuplicates]
public enum svgPreserveAspectMeetOrSliceType : int32
{
	SVG_MEETORSLICE_UNKNOWN = 0,
	SVG_MEETORSLICE_MEET = 1,
	SVG_MEETORSLICE_SLICE = 2,
	svgPreserveAspectMeetOrSliceType_Max = 2147483647,
}


[AllowDuplicates]
public enum svgUnitTypes : int32
{
	SVG_UNITTYPE_UNKNOWN = 0,
	SVG_UNITTYPE_USERSPACEONUSE = 1,
	SVG_UNITTYPE_OBJECTBOUNDINGBOX = 2,
	svgUnitTypes_Max = 2147483647,
}


[AllowDuplicates]
public enum svgSpreadMethod : int32
{
	SVG_SPREADMETHOD_UNKNOWN = 0,
	SVG_SPREADMETHOD_PAD = 1,
	SVG_SPREADMETHOD_REFLECT = 2,
	SVG_SPREADMETHOD_REPEAT = 3,
	svgSpreadMethod_Max = 2147483647,
}


[AllowDuplicates]
public enum svgFeblendMode : int32
{
	SVG_FEBLEND_MODE_UNKNOWN = 0,
	SVG_FEBLEND_MODE_NORMAL = 1,
	SVG_FEBLEND_MODE_MULTIPLY = 2,
	SVG_FEBLEND_MODE_SCREEN = 3,
	SVG_FEBLEND_MODE_DARKEN = 4,
	SVG_FEBLEND_MODE_LIGHTEN = 5,
	svgFeblendMode_Max = 2147483647,
}


[AllowDuplicates]
public enum svgFecolormatrixType : int32
{
	SVG_FECOLORMATRIX_TYPE_UNKNOWN = 0,
	SVG_FECOLORMATRIX_TYPE_MATRIX = 1,
	SVG_FECOLORMATRIX_TYPE_SATURATE = 2,
	SVG_FECOLORMATRIX_TYPE_HUEROTATE = 3,
	SVG_FECOLORMATRIX_TYPE_LUMINANCETOALPHA = 4,
	svgFecolormatrixType_Max = 2147483647,
}


[AllowDuplicates]
public enum svgFecomponenttransferType : int32
{
	SVG_FECOMPONENTTRANSFER_TYPE_UNKNOWN = 0,
	SVG_FECOMPONENTTRANSFER_TYPE_IDENTITY = 1,
	SVG_FECOMPONENTTRANSFER_TYPE_TABLE = 2,
	SVG_FECOMPONENTTRANSFER_TYPE_DISCRETE = 3,
	SVG_FECOMPONENTTRANSFER_TYPE_LINEAR = 4,
	SVG_FECOMPONENTTRANSFER_TYPE_GAMMA = 5,
	svgFecomponenttransferType_Max = 2147483647,
}


[AllowDuplicates]
public enum svgFecompositeOperator : int32
{
	SVG_FECOMPOSITE_OPERATOR_UNKNOWN = 0,
	SVG_FECOMPOSITE_OPERATOR_OVER = 1,
	SVG_FECOMPOSITE_OPERATOR_IN = 2,
	SVG_FECOMPOSITE_OPERATOR_OUT = 3,
	SVG_FECOMPOSITE_OPERATOR_ATOP = 4,
	SVG_FECOMPOSITE_OPERATOR_XOR = 5,
	SVG_FECOMPOSITE_OPERATOR_ARITHMETIC = 6,
	svgFecompositeOperator_Max = 2147483647,
}


[AllowDuplicates]
public enum svgEdgemode : int32
{
	SVG_EDGEMODE_UNKNOWN = 0,
	SVG_EDGEMODE_DUPLICATE = 1,
	SVG_EDGEMODE_WRAP = 2,
	SVG_EDGEMODE_NONE = 3,
	svgEdgemode_Max = 2147483647,
}


[AllowDuplicates]
public enum svgPreserveAlpha : int32
{
	SVG_PRESERVEALPHA_FALSE = 0,
	SVG_PRESERVEALPHA_TRUE = 1,
	svgPreserveAlpha_Max = 2147483647,
}


[AllowDuplicates]
public enum svgChannel : int32
{
	SVG_CHANNEL_UNKNOWN = 0,
	SVG_CHANNEL_R = 1,
	SVG_CHANNEL_G = 2,
	SVG_CHANNEL_B = 3,
	SVG_CHANNEL_A = 4,
	svgChannel_Max = 2147483647,
}


[AllowDuplicates]
public enum svgMorphologyOperator : int32
{
	SVG_MORPHOLOGY_OPERATOR_UNKNOWN = 0,
	SVG_MORPHOLOGY_OPERATOR_ERODE = 1,
	SVG_MORPHOLOGY_OPERATOR_DILATE = 2,
	svgMorphologyOperator_Max = 2147483647,
}


[AllowDuplicates]
public enum svgTurbulenceType : int32
{
	SVG_TURBULENCE_TYPE_UNKNOWN = 0,
	SVG_TURBULENCE_TYPE_FACTALNOISE = 1,
	SVG_TURBULENCE_TYPE_TURBULENCE = 2,
	svgTurbulenceType_Max = 2147483647,
}


[AllowDuplicates]
public enum svgStitchtype : int32
{
	SVG_STITCHTYPE_UNKNOWN = 0,
	SVG_STITCHTYPE_STITCH = 1,
	SVG_STITCHTYPE_NOSTITCH = 2,
	svgStitchtype_Max = 2147483647,
}


[AllowDuplicates]
public enum svgMarkerUnits : int32
{
	SVG_MARKERUNITS_UNKNOWN = 0,
	SVG_MARKERUNITS_USERSPACEONUSE = 1,
	SVG_MARKERUNITS_STROKEWIDTH = 2,
	svgMarkerUnits_Max = 2147483647,
}


[AllowDuplicates]
public enum svgMarkerOrient : int32
{
	SVG_MARKER_ORIENT_UNKNOWN = 0,
	SVG_MARKER_ORIENT_AUTO = 1,
	SVG_MARKER_ORIENT_ANGLE = 2,
	svgMarkerOrient_Max = 2147483647,
}


[AllowDuplicates]
public enum svgMarkerOrientAttribute : int32
{
	svgMarkerOrientAttributeAuto = 0,
	svgMarkerOrientAttribute_Max = 2147483647,
}


[AllowDuplicates]
public enum htmlMediaNetworkState : int32
{
	htmlMediaNetworkStateEmpty = 0,
	htmlMediaNetworkStateIdle = 1,
	htmlMediaNetworkStateLoading = 2,
	htmlMediaNetworkStateNoSource = 3,
	htmlMediaNetworkState_Max = 2147483647,
}


[AllowDuplicates]
public enum htmlMediaReadyState : int32
{
	htmlMediaReadyStateHaveNothing = 0,
	htmlMediaReadyStateHaveMetadata = 1,
	htmlMediaReadyStateHaveCurrentData = 2,
	htmlMediaReadyStateHaveFutureData = 3,
	htmlMediaReadyStateHaveEnoughData = 4,
	htmlMediaReadyState_Max = 2147483647,
}


[AllowDuplicates]
public enum htmlMediaErr : int32
{
	htmlMediaErrAborted = 0,
	htmlMediaErrNetwork = 1,
	htmlMediaErrDecode = 2,
	htmlMediaErrSrcNotSupported = 3,
	htmlMediaErr_Max = 2147483647,
}


[AllowDuplicates]
public enum lengthAdjust : int32
{
	LENGTHADJUST_UNKNOWN = 0,
	LENGTHADJUST_SPACING = 1,
	LENGTHADJUST_SPACINGANDGLYPHS = 2,
	lengthAdjust_Max = 2147483647,
}


[AllowDuplicates]
public enum textpathMethodtype : int32
{
	TEXTPATH_METHODTYPE_UNKNOWN = 0,
	TEXTPATH_METHODTYPE_ALIGN = 1,
	TEXTPATH_METHODTYPE_STRETCH = 2,
	textpathMethodtype_Max = 2147483647,
}


[AllowDuplicates]
public enum textpathSpacingtype : int32
{
	TEXTPATH_SPACINGTYPE_UNKNOWN = 0,
	TEXTPATH_SPACINGTYPE_AUTO = 1,
	TEXTPATH_SPACINGTYPE_EXACT = 2,
	textpathSpacingtype_Max = 2147483647,
}


[AllowDuplicates]
public enum ELEMENT_CORNER : int32
{
	ELEMENT_CORNER_NONE = 0,
	ELEMENT_CORNER_TOP = 1,
	ELEMENT_CORNER_LEFT = 2,
	ELEMENT_CORNER_BOTTOM = 3,
	ELEMENT_CORNER_RIGHT = 4,
	ELEMENT_CORNER_TOPLEFT = 5,
	ELEMENT_CORNER_TOPRIGHT = 6,
	ELEMENT_CORNER_BOTTOMLEFT = 7,
	ELEMENT_CORNER_BOTTOMRIGHT = 8,
	ELEMENT_CORNER_Max = 2147483647,
}


[AllowDuplicates]
public enum SECUREURLHOSTVALIDATE_FLAGS : int32
{
	SUHV_PROMPTBEFORENO = 1,
	SUHV_SILENTYES = 2,
	SUHV_UNSECURESOURCE = 4,
	SECUREURLHOSTVALIDATE_FLAGS_Max = 2147483647,
}


[AllowDuplicates]
public enum POINTER_GRAVITY : int32
{
	POINTER_GRAVITY_Left = 0,
	POINTER_GRAVITY_Right = 1,
	POINTER_GRAVITY_Max = 2147483647,
}


[AllowDuplicates]
public enum ELEMENT_ADJACENCY : int32
{
	ELEM_ADJ_BeforeBegin = 0,
	ELEM_ADJ_AfterBegin = 1,
	ELEM_ADJ_BeforeEnd = 2,
	ELEM_ADJ_AfterEnd = 3,
	ELEMENT_ADJACENCY_Max = 2147483647,
}


[AllowDuplicates]
public enum MARKUP_CONTEXT_TYPE : int32
{
	CONTEXT_TYPE_None = 0,
	CONTEXT_TYPE_Text = 1,
	CONTEXT_TYPE_EnterScope = 2,
	CONTEXT_TYPE_ExitScope = 3,
	CONTEXT_TYPE_NoScope = 4,
	MARKUP_CONTEXT_TYPE_Max = 2147483647,
}


[AllowDuplicates]
public enum FINDTEXT_FLAGS : int32
{
	FINDTEXT_BACKWARDS = 1,
	FINDTEXT_WHOLEWORD = 2,
	FINDTEXT_MATCHCASE = 4,
	FINDTEXT_RAW = 131072,
	FINDTEXT_MATCHREPEATEDWHITESPACE = 262144,
	FINDTEXT_MATCHDIAC = 536870912,
	FINDTEXT_MATCHKASHIDA = 1073741824,
	FINDTEXT_MATCHALEFHAMZA = -2147483648,
	FINDTEXT_FLAGS_Max = 2147483647,
}


[AllowDuplicates]
public enum MOVEUNIT_ACTION : int32
{
	MOVEUNIT_PREVCHAR = 0,
	MOVEUNIT_NEXTCHAR = 1,
	MOVEUNIT_PREVCLUSTERBEGIN = 2,
	MOVEUNIT_NEXTCLUSTERBEGIN = 3,
	MOVEUNIT_PREVCLUSTEREND = 4,
	MOVEUNIT_NEXTCLUSTEREND = 5,
	MOVEUNIT_PREVWORDBEGIN = 6,
	MOVEUNIT_NEXTWORDBEGIN = 7,
	MOVEUNIT_PREVWORDEND = 8,
	MOVEUNIT_NEXTWORDEND = 9,
	MOVEUNIT_PREVPROOFWORD = 10,
	MOVEUNIT_NEXTPROOFWORD = 11,
	MOVEUNIT_NEXTURLBEGIN = 12,
	MOVEUNIT_PREVURLBEGIN = 13,
	MOVEUNIT_NEXTURLEND = 14,
	MOVEUNIT_PREVURLEND = 15,
	MOVEUNIT_PREVSENTENCE = 16,
	MOVEUNIT_NEXTSENTENCE = 17,
	MOVEUNIT_PREVBLOCK = 18,
	MOVEUNIT_NEXTBLOCK = 19,
	MOVEUNIT_ACTION_Max = 2147483647,
}


[AllowDuplicates]
public enum PARSE_FLAGS : int32
{
	PARSE_ABSOLUTIFYIE40URLS = 1,
	PARSE_DISABLEVML = 2,
	PARSE_FLAGS_Max = 2147483647,
}


[AllowDuplicates]
public enum ELEMENT_TAG_ID : int32
{
	TAGID_NULL = 0,
	TAGID_UNKNOWN = 1,
	TAGID_A = 2,
	TAGID_ACRONYM = 3,
	TAGID_ADDRESS = 4,
	TAGID_APPLET = 5,
	TAGID_AREA = 6,
	TAGID_B = 7,
	TAGID_BASE = 8,
	TAGID_BASEFONT = 9,
	TAGID_BDO = 10,
	TAGID_BGSOUND = 11,
	TAGID_BIG = 12,
	TAGID_BLINK = 13,
	TAGID_BLOCKQUOTE = 14,
	TAGID_BODY = 15,
	TAGID_BR = 16,
	TAGID_BUTTON = 17,
	TAGID_CAPTION = 18,
	TAGID_CENTER = 19,
	TAGID_CITE = 20,
	TAGID_CODE = 21,
	TAGID_COL = 22,
	TAGID_COLGROUP = 23,
	TAGID_COMMENT = 24,
	TAGID_COMMENT_RAW = 25,
	TAGID_DD = 26,
	TAGID_DEL = 27,
	TAGID_DFN = 28,
	TAGID_DIR = 29,
	TAGID_DIV = 30,
	TAGID_DL = 31,
	TAGID_DT = 32,
	TAGID_EM = 33,
	TAGID_EMBED = 34,
	TAGID_FIELDSET = 35,
	TAGID_FONT = 36,
	TAGID_FORM = 37,
	TAGID_FRAME = 38,
	TAGID_FRAMESET = 39,
	TAGID_GENERIC = 40,
	TAGID_H1 = 41,
	TAGID_H2 = 42,
	TAGID_H3 = 43,
	TAGID_H4 = 44,
	TAGID_H5 = 45,
	TAGID_H6 = 46,
	TAGID_HEAD = 47,
	TAGID_HR = 48,
	TAGID_HTML = 49,
	TAGID_I = 50,
	TAGID_IFRAME = 51,
	TAGID_IMG = 52,
	TAGID_INPUT = 53,
	TAGID_INS = 54,
	TAGID_KBD = 55,
	TAGID_LABEL = 56,
	TAGID_LEGEND = 57,
	TAGID_LI = 58,
	TAGID_LINK = 59,
	TAGID_LISTING = 60,
	TAGID_MAP = 61,
	TAGID_MARQUEE = 62,
	TAGID_MENU = 63,
	TAGID_META = 64,
	TAGID_NEXTID = 65,
	TAGID_NOBR = 66,
	TAGID_NOEMBED = 67,
	TAGID_NOFRAMES = 68,
	TAGID_NOSCRIPT = 69,
	TAGID_OBJECT = 70,
	TAGID_OL = 71,
	TAGID_OPTION = 72,
	TAGID_P = 73,
	TAGID_PARAM = 74,
	TAGID_PLAINTEXT = 75,
	TAGID_PRE = 76,
	TAGID_Q = 77,
	TAGID_RP = 78,
	TAGID_RT = 79,
	TAGID_RUBY = 80,
	TAGID_S = 81,
	TAGID_SAMP = 82,
	TAGID_SCRIPT = 83,
	TAGID_SELECT = 84,
	TAGID_SMALL = 85,
	TAGID_SPAN = 86,
	TAGID_STRIKE = 87,
	TAGID_STRONG = 88,
	TAGID_STYLE = 89,
	TAGID_SUB = 90,
	TAGID_SUP = 91,
	TAGID_TABLE = 92,
	TAGID_TBODY = 93,
	TAGID_TC = 94,
	TAGID_TD = 95,
	TAGID_TEXTAREA = 96,
	TAGID_TFOOT = 97,
	TAGID_TH = 98,
	TAGID_THEAD = 99,
	TAGID_TITLE = 100,
	TAGID_TR = 101,
	TAGID_TT = 102,
	TAGID_U = 103,
	TAGID_UL = 104,
	TAGID_VAR = 105,
	TAGID_WBR = 106,
	TAGID_XMP = 107,
	TAGID_ROOT = 108,
	TAGID_OPTGROUP = 109,
	TAGID_ABBR = 110,
	TAGID_SVG_A = 111,
	TAGID_SVG_ALTGLYPH = 112,
	TAGID_SVG_ALTGLYPHDEF = 113,
	TAGID_SVG_ALTGLYPHITEM = 114,
	TAGID_SVG_ANIMATE = 115,
	TAGID_SVG_ANIMATECOLOR = 116,
	TAGID_SVG_ANIMATEMOTION = 117,
	TAGID_SVG_ANIMATETRANSFORM = 118,
	TAGID_SVG_CIRCLE = 119,
	TAGID_SVG_CLIPPATH = 120,
	TAGID_SVG_COLOR_PROFILE = 121,
	TAGID_SVG_CURSOR = 122,
	TAGID_SVG_DEFINITION_SRC = 123,
	TAGID_SVG_DEFS = 124,
	TAGID_SVG_DESC = 125,
	TAGID_SVG_ELLIPSE = 126,
	TAGID_SVG_FEBLEND = 127,
	TAGID_SVG_FECOLORMATRIX = 128,
	TAGID_SVG_FECOMPONENTTRANSFER = 129,
	TAGID_SVG_FECOMPOSITE = 130,
	TAGID_SVG_FECONVOLVEMATRIX = 131,
	TAGID_SVG_FEDIFFUSELIGHTING = 132,
	TAGID_SVG_FEDISPLACEMENTMAP = 133,
	TAGID_SVG_FEDISTANTLIGHT = 134,
	TAGID_SVG_FEFLOOD = 135,
	TAGID_SVG_FEFUNCA = 136,
	TAGID_SVG_FEFUNCB = 137,
	TAGID_SVG_FEFUNCG = 138,
	TAGID_SVG_FEFUNCR = 139,
	TAGID_SVG_FEGAUSSIANBLUR = 140,
	TAGID_SVG_FEIMAGE = 141,
	TAGID_SVG_FEMERGE = 142,
	TAGID_SVG_FEMERGENODE = 143,
	TAGID_SVG_FEMORPHOLOGY = 144,
	TAGID_SVG_FEOFFSET = 145,
	TAGID_SVG_FEPOINTLIGHT = 146,
	TAGID_SVG_FESPECULARLIGHTING = 147,
	TAGID_SVG_FESPOTLIGHT = 148,
	TAGID_SVG_FETILE = 149,
	TAGID_SVG_FETURBULENCE = 150,
	TAGID_SVG_FILTER = 151,
	TAGID_SVG_FONT = 152,
	TAGID_SVG_FONT_FACE = 153,
	TAGID_SVG_FONT_FACE_FORMAT = 154,
	TAGID_SVG_FONT_FACE_NAME = 155,
	TAGID_SVG_FONT_FACE_SRC = 156,
	TAGID_SVG_FONT_FACE_URI = 157,
	TAGID_SVG_FOREIGNOBJECT = 158,
	TAGID_SVG_G = 159,
	TAGID_SVG_GLYPH = 160,
	TAGID_SVG_GLYPHREF = 161,
	TAGID_SVG_HKERN = 162,
	TAGID_SVG_IMAGE = 163,
	TAGID_SVG_LINE = 164,
	TAGID_SVG_LINEARGRADIENT = 165,
	TAGID_SVG_MARKER = 166,
	TAGID_SVG_MASK = 167,
	TAGID_SVG_METADATA = 168,
	TAGID_SVG_MISSING_GLYPH = 169,
	TAGID_SVG_MPATH = 170,
	TAGID_SVG_PATH = 171,
	TAGID_SVG_PATTERN = 172,
	TAGID_SVG_POLYGON = 173,
	TAGID_SVG_POLYLINE = 174,
	TAGID_SVG_RADIALGRADIENT = 175,
	TAGID_SVG_RECT = 176,
	TAGID_SVG_SCRIPT = 177,
	TAGID_SVG_SET = 178,
	TAGID_SVG_STOP = 179,
	TAGID_SVG_STYLE = 180,
	TAGID_SVG_SVG = 181,
	TAGID_SVG_SWITCH = 182,
	TAGID_SVG_SYMBOL = 183,
	TAGID_SVG_TEXT = 184,
	TAGID_SVG_TEXTPATH = 185,
	TAGID_SVG_TITLE = 186,
	TAGID_SVG_TREF = 187,
	TAGID_SVG_TSPAN = 188,
	TAGID_SVG_USE = 189,
	TAGID_SVG_VIEW = 190,
	TAGID_SVG_VKERN = 191,
	TAGID_AUDIO = 192,
	TAGID_SOURCE = 193,
	TAGID_VIDEO = 194,
	TAGID_CANVAS = 195,
	TAGID_DOCTYPE = 196,
	TAGID_KEYGEN = 197,
	TAGID_PROCESSINGINSTRUCTION = 198,
	TAGID_ARTICLE = 199,
	TAGID_ASIDE = 200,
	TAGID_FIGCAPTION = 201,
	TAGID_FIGURE = 202,
	TAGID_FOOTER = 203,
	TAGID_HEADER = 204,
	TAGID_HGROUP = 205,
	TAGID_MARK = 206,
	TAGID_NAV = 207,
	TAGID_SECTION = 208,
	TAGID_PROGRESS = 209,
	TAGID_MATHML_ANNOTATION_XML = 210,
	TAGID_MATHML_MATH = 211,
	TAGID_MATHML_MI = 212,
	TAGID_MATHML_MN = 213,
	TAGID_MATHML_MO = 214,
	TAGID_MATHML_MS = 215,
	TAGID_MATHML_MTEXT = 216,
	TAGID_DATALIST = 217,
	TAGID_TRACK = 218,
	TAGID_ISINDEX = 219,
	TAGID_COMMAND = 220,
	TAGID_DETAILS = 221,
	TAGID_SUMMARY = 222,
	TAGID_X_MS_WEBVIEW = 223,
	TAGID_COUNT = 224,
	TAGID_LAST_PREDEFINED = 10000,
	ELEMENT_TAG_ID_Max = 2147483647,
}


[AllowDuplicates]
public enum SELECTION_TYPE : int32
{
	SELECTION_TYPE_None = 0,
	SELECTION_TYPE_Caret = 1,
	SELECTION_TYPE_Text = 2,
	SELECTION_TYPE_Control = 3,
	SELECTION_TYPE_Max = 2147483647,
}


[AllowDuplicates]
public enum SAVE_SEGMENTS_FLAGS : int32
{
	SAVE_SEGMENTS_NoIE4SelectionCompat = 1,
	SAVE_SEGMENTS_FLAGS_Max = 2147483647,
}


[AllowDuplicates]
public enum CARET_DIRECTION : int32
{
	CARET_DIRECTION_INDETERMINATE = 0,
	CARET_DIRECTION_SAME = 1,
	CARET_DIRECTION_BACKWARD = 2,
	CARET_DIRECTION_FORWARD = 3,
	CARET_DIRECTION_Max = 2147483647,
}


[AllowDuplicates]
public enum LINE_DIRECTION : int32
{
	LINE_DIRECTION_RightToLeft = 1,
	LINE_DIRECTION_LeftToRight = 2,
	LINE_DIRECTION_Max = 2147483647,
}


[AllowDuplicates]
public enum HT_OPTIONS : int32
{
	HT_OPT_AllowAfterEOL = 1,
	HT_OPTIONS_Max = 2147483647,
}


[AllowDuplicates]
public enum HT_RESULTS : int32
{
	HT_RESULTS_Glyph = 1,
	HT_RESULTS_Max = 2147483647,
}


[AllowDuplicates]
public enum DISPLAY_MOVEUNIT : int32
{
	DISPLAY_MOVEUNIT_PreviousLine = 1,
	DISPLAY_MOVEUNIT_NextLine = 2,
	DISPLAY_MOVEUNIT_CurrentLineStart = 3,
	DISPLAY_MOVEUNIT_CurrentLineEnd = 4,
	DISPLAY_MOVEUNIT_TopOfWindow = 5,
	DISPLAY_MOVEUNIT_BottomOfWindow = 6,
	DISPLAY_MOVEUNIT_Max = 2147483647,
}


[AllowDuplicates]
public enum DISPLAY_GRAVITY : int32
{
	DISPLAY_GRAVITY_PreviousLine = 1,
	DISPLAY_GRAVITY_NextLine = 2,
	DISPLAY_GRAVITY_Max = 2147483647,
}


[AllowDuplicates]
public enum DISPLAY_BREAK : int32
{
	DISPLAY_BREAK_None = 0,
	DISPLAY_BREAK_Block = 1,
	DISPLAY_BREAK_Break = 2,
	DISPLAY_BREAK_Max = 2147483647,
}


[AllowDuplicates]
public enum COORD_SYSTEM : int32
{
	COORD_SYSTEM_GLOBAL = 0,
	COORD_SYSTEM_PARENT = 1,
	COORD_SYSTEM_CONTAINER = 2,
	COORD_SYSTEM_CONTENT = 3,
	COORD_SYSTEM_FRAME = 4,
	COORD_SYSTEM_CLIENT = 5,
	COORD_SYSTEM_Max = 2147483647,
}


[AllowDuplicates]
public enum DEV_CONSOLE_MESSAGE_LEVEL : int32
{
	DCML_INFORMATIONAL = 0,
	DCML_WARNING = 1,
	DCML_ERROR = 2,
	DEV_CONSOLE_MESSAGE_LEVEL_Max = 2147483647,
}


[AllowDuplicates]
public enum DOM_EVENT_PHASE : int32
{
	DEP_CAPTURING_PHASE = 1,
	DEP_AT_TARGET = 2,
	DEP_BUBBLING_PHASE = 3,
	DOM_EVENT_PHASE_Max = 2147483647,
}


[AllowDuplicates]
public enum SCRIPT_TIMER_TYPE : int32
{
	STT_TIMEOUT = 0,
	STT_INTERVAL = 1,
	STT_IMMEDIATE = 2,
	STT_ANIMATION_FRAME = 3,
	SCRIPT_TIMER_TYPE_Max = 2147483647,
}


[AllowDuplicates]
public enum HTML_PAINTER : int32
{
	HTMLPAINTER_OPAQUE = 1,
	HTMLPAINTER_TRANSPARENT = 2,
	HTMLPAINTER_ALPHA = 4,
	HTMLPAINTER_COMPLEX = 8,
	HTMLPAINTER_OVERLAY = 16,
	HTMLPAINTER_HITTEST = 32,
	HTMLPAINTER_SURFACE = 256,
	HTMLPAINTER_3DSURFACE = 512,
	HTMLPAINTER_NOBAND = 1024,
	HTMLPAINTER_NODC = 4096,
	HTMLPAINTER_NOPHYSICALCLIP = 8192,
	HTMLPAINTER_NOSAVEDC = 16384,
	HTMLPAINTER_SUPPORTS_XFORM = 32768,
	HTMLPAINTER_EXPAND = 65536,
	HTMLPAINTER_NOSCROLLBITS = 131072,
	HTML_PAINTER_Max = 2147483647,
}


[AllowDuplicates]
public enum HTML_PAINT_ZORDER : int32
{
	HTMLPAINT_ZORDER_NONE = 0,
	HTMLPAINT_ZORDER_REPLACE_ALL = 1,
	HTMLPAINT_ZORDER_REPLACE_CONTENT = 2,
	HTMLPAINT_ZORDER_REPLACE_BACKGROUND = 3,
	HTMLPAINT_ZORDER_BELOW_CONTENT = 4,
	HTMLPAINT_ZORDER_BELOW_FLOW = 5,
	HTMLPAINT_ZORDER_ABOVE_FLOW = 6,
	HTMLPAINT_ZORDER_ABOVE_CONTENT = 7,
	HTMLPAINT_ZORDER_WINDOW_TOP = 8,
	HTML_PAINT_ZORDER_Max = 2147483647,
}


[AllowDuplicates]
public enum HTML_PAINT_DRAW_FLAGS : int32
{
	HTMLPAINT_DRAW_UPDATEREGION = 1,
	HTMLPAINT_DRAW_USE_XFORM = 2,
	HTML_PAINT_DRAW_FLAGS_Max = 2147483647,
}


[AllowDuplicates]
public enum HTML_PAINT_EVENT_FLAGS : int32
{
	HTMLPAINT_EVENT_TARGET = 1,
	HTMLPAINT_EVENT_SETCURSOR = 2,
	HTML_PAINT_EVENT_FLAGS_Max = 2147483647,
}


[AllowDuplicates]
public enum HTML_PAINT_DRAW_INFO_FLAGS : int32
{
	HTMLPAINT_DRAWINFO_VIEWPORT = 1,
	HTMLPAINT_DRAWINFO_UPDATEREGION = 2,
	HTMLPAINT_DRAWINFO_XFORM = 4,
	HTML_PAINT_DRAW_INFO_FLAGS_Max = 2147483647,
}


[AllowDuplicates]
public enum HTMLDlgFlag : int32
{
	HTMLDlgFlagNo = 0,
	HTMLDlgFlagOff = 0,
	HTMLDlgFlag0 = 0,
	HTMLDlgFlagYes = 1,
	HTMLDlgFlagOn = 1,
	HTMLDlgFlag1 = 1,
	HTMLDlgFlagNotSet = -1,
	HTMLDlgFlag_Max = 2147483647,
}


[AllowDuplicates]
public enum HTMLDlgBorder : int32
{
	HTMLDlgBorderThin = 0,
	HTMLDlgBorderThick = 262144,
	HTMLDlgBorder_Max = 2147483647,
}


[AllowDuplicates]
public enum HTMLDlgEdge : int32
{
	HTMLDlgEdgeSunken = 0,
	HTMLDlgEdgeRaised = 16,
	HTMLDlgEdge_Max = 2147483647,
}


[AllowDuplicates]
public enum HTMLDlgCenter : int32
{
	HTMLDlgCenterNo = 0,
	HTMLDlgCenterOff = 0,
	HTMLDlgCenter0 = 0,
	HTMLDlgCenterYes = 1,
	HTMLDlgCenterOn = 1,
	HTMLDlgCenter1 = 1,
	HTMLDlgCenterParent = 1,
	HTMLDlgCenterDesktop = 2,
	HTMLDlgCenter_Max = 2147483647,
}


[AllowDuplicates]
public enum HTMLAppFlag : int32
{
	HTMLAppFlagNo = 0,
	HTMLAppFlagOff = 0,
	HTMLAppFlag0 = 0,
	HTMLAppFlagYes = 1,
	HTMLAppFlagOn = 1,
	HTMLAppFlag1 = 1,
	HTMLAppFlag_Max = 2147483647,
}


[AllowDuplicates]
public enum HTMLMinimizeFlag : int32
{
	HTMLMinimizeFlagNo = 0,
	HTMLMinimizeFlagYes = 131072,
	HTMLMinimizeFlag_Max = 2147483647,
}


[AllowDuplicates]
public enum HTMLMaximizeFlag : int32
{
	HTMLMaximizeFlagNo = 0,
	HTMLMaximizeFlagYes = 65536,
	HTMLMaximizeFlag_Max = 2147483647,
}


[AllowDuplicates]
public enum HTMLCaptionFlag : int32
{
	HTMLCaptionFlagNo = 0,
	HTMLCaptionFlagYes = 12582912,
	HTMLCaptionFlag_Max = 2147483647,
}


[AllowDuplicates]
public enum HTMLSysMenuFlag : int32
{
	HTMLSysMenuFlagNo = 0,
	HTMLSysMenuFlagYes = 524288,
	HTMLSysMenuFlag_Max = 2147483647,
}


[AllowDuplicates]
public enum HTMLBorder : int32
{
	HTMLBorderNone = 0,
	HTMLBorderThick = 262144,
	HTMLBorderDialog = 4194304,
	HTMLBorderThin = 8388608,
	HTMLBorder_Max = 2147483647,
}


[AllowDuplicates]
public enum HTMLBorderStyle : int32
{
	HTMLBorderStyleNormal = 0,
	HTMLBorderStyleRaised = 256,
	HTMLBorderStyleSunken = 512,
	HTMLBorderStylecombined = 768,
	HTMLBorderStyleStatic = 131072,
	HTMLBorderStyle_Max = 2147483647,
}


[AllowDuplicates]
public enum HTMLWindowState : int32
{
	HTMLWindowStateNormal = 1,
	HTMLWindowStateMaximize = 3,
	HTMLWindowStateMinimize = 6,
	HTMLWindowState_Max = 2147483647,
}


[AllowDuplicates]
public enum BEHAVIOR_EVENT : int32
{
	BEHAVIOREVENT_FIRST = 0,
	BEHAVIOREVENT_CONTENTREADY = 0,
	BEHAVIOREVENT_DOCUMENTREADY = 1,
	BEHAVIOREVENT_APPLYSTYLE = 2,
	BEHAVIOREVENT_DOCUMENTCONTEXTCHANGE = 3,
	BEHAVIOREVENT_CONTENTSAVE = 4,
	BEHAVIOREVENT_LAST = 4,
	BEHAVIOR_EVENT_Max = 2147483647,
}


[AllowDuplicates]
public enum BEHAVIOR_EVENT_FLAGS : int32
{
	BEHAVIOREVENTFLAGS_BUBBLE = 1,
	BEHAVIOREVENTFLAGS_STANDARDADDITIVE = 2,
	BEHAVIOR_EVENT_FLAGS_Max = 2147483647,
}


[AllowDuplicates]
public enum BEHAVIOR_RENDER_INFO : int32
{
	BEHAVIORRENDERINFO_BEFOREBACKGROUND = 1,
	BEHAVIORRENDERINFO_AFTERBACKGROUND = 2,
	BEHAVIORRENDERINFO_BEFORECONTENT = 4,
	BEHAVIORRENDERINFO_AFTERCONTENT = 8,
	BEHAVIORRENDERINFO_AFTERFOREGROUND = 32,
	BEHAVIORRENDERINFO_ABOVECONTENT = 40,
	BEHAVIORRENDERINFO_ALLLAYERS = 255,
	BEHAVIORRENDERINFO_DISABLEBACKGROUND = 256,
	BEHAVIORRENDERINFO_DISABLENEGATIVEZ = 512,
	BEHAVIORRENDERINFO_DISABLECONTENT = 1024,
	BEHAVIORRENDERINFO_DISABLEPOSITIVEZ = 2048,
	BEHAVIORRENDERINFO_DISABLEALLLAYERS = 3840,
	BEHAVIORRENDERINFO_HITTESTING = 4096,
	BEHAVIORRENDERINFO_SURFACE = 1048576,
	BEHAVIORRENDERINFO_3DSURFACE = 2097152,
	BEHAVIOR_RENDER_INFO_Max = 2147483647,
}


[AllowDuplicates]
public enum BEHAVIOR_RELATION : int32
{
	BEHAVIOR_FIRSTRELATION = 0,
	BEHAVIOR_SAMEELEMENT = 0,
	BEHAVIOR_PARENT = 1,
	BEHAVIOR_CHILD = 2,
	BEHAVIOR_SIBLING = 3,
	BEHAVIOR_LASTRELATION = 3,
	BEHAVIOR_RELATION_Max = 2147483647,
}


[AllowDuplicates]
public enum BEHAVIOR_LAYOUT_INFO : int32
{
	BEHAVIORLAYOUTINFO_FULLDELEGATION = 1,
	BEHAVIORLAYOUTINFO_MODIFYNATURAL = 2,
	BEHAVIORLAYOUTINFO_MAPSIZE = 4,
	BEHAVIOR_LAYOUT_INFO_Max = 2147483647,
}


[AllowDuplicates]
public enum BEHAVIOR_LAYOUT_MODE : int32
{
	BEHAVIORLAYOUTMODE_NATURAL = 1,
	BEHAVIORLAYOUTMODE_MINWIDTH = 2,
	BEHAVIORLAYOUTMODE_MAXWIDTH = 4,
	BEHAVIORLAYOUTMODE_MEDIA_RESOLUTION = 16384,
	BEHAVIORLAYOUTMODE_FINAL_PERCENT = 32768,
	BEHAVIOR_LAYOUT_MODE_Max = 2147483647,
}


[AllowDuplicates]
public enum ELEMENTDESCRIPTOR_FLAGS : int32
{
	ELEMENTDESCRIPTORFLAGS_LITERAL = 1,
	ELEMENTDESCRIPTORFLAGS_NESTED_LITERAL = 2,
	ELEMENTDESCRIPTOR_FLAGS_Max = 2147483647,
}


[AllowDuplicates]
public enum ELEMENTNAMESPACE_FLAGS : int32
{
	ELEMENTNAMESPACEFLAGS_ALLOWANYTAG = 1,
	ELEMENTNAMESPACEFLAGS_QUERYFORUNKNOWNTAGS = 2,
	ELEMENTNAMESPACE_FLAGS_Max = 2147483647,
}


[AllowDuplicates]
public enum VIEW_OBJECT_ALPHA_MODE : int32
{
	VIEW_OBJECT_ALPHA_MODE_IGNORE = 0,
	VIEW_OBJECT_ALPHA_MODE_PREMULTIPLIED = 1,
	VIEW_OBJECT_ALPHA_MODE_Max = 2147483647,
}


[AllowDuplicates]
public enum VIEW_OBJECT_COMPOSITION_MODE : int32
{
	VIEW_OBJECT_COMPOSITION_MODE_LEGACY = 0,
	VIEW_OBJECT_COMPOSITION_MODE_SURFACEPRESENTER = 1,
	VIEW_OBJECT_COMPOSITION_MODE_Max = 2147483647,
}


[AllowDuplicates]
public enum ExtensionValidationContexts : int32
{
	ExtensionValidationContextNone = 0,
	ExtensionValidationContextDynamic = 1,
	ExtensionValidationContextParsed = 2,
}


[AllowDuplicates]
public enum ExtensionValidationResults : int32
{
	ExtensionValidationResultNone = 0,
	ExtensionValidationResultDoNotInstantiate = 1,
	ExtensionValidationResultArrestPageLoad = 2,
}


[AllowDuplicates]
public enum __MIDL_ITargetFrame2_0001 : int32
{
	FINDFRAME_NONE = 0,
	FINDFRAME_JUSTTESTEXISTENCE = 1,
	FINDFRAME_INTERNAL = -2147483648,
}


[AllowDuplicates]
public enum __MIDL_ITargetFrame2_0002 : int32
{
	FRAMEOPTIONS_SCROLL_YES = 1,
	FRAMEOPTIONS_SCROLL_NO = 2,
	FRAMEOPTIONS_SCROLL_AUTO = 4,
	FRAMEOPTIONS_NORESIZE = 8,
	FRAMEOPTIONS_NO3DBORDER = 16,
	FRAMEOPTIONS_DESKTOP = 32,
	FRAMEOPTIONS_BROWSERBAND = 64,
}


[AllowDuplicates]
public enum __MIDL_ITargetFrame_0001 : int32
{
	NAVIGATEFRAME_FL_RECORD = 1,
	NAVIGATEFRAME_FL_POST = 2,
	NAVIGATEFRAME_FL_NO_DOC_CACHE = 4,
	NAVIGATEFRAME_FL_NO_IMAGE_CACHE = 8,
	NAVIGATEFRAME_FL_AUTH_FAIL_CACHE_OK = 16,
	NAVIGATEFRAME_FL_SENDING_FROM_FORM = 32,
	NAVIGATEFRAME_FL_REALLY_SENDING_FROM_FORM = 64,
}


[AllowDuplicates]
public enum MediaActivityNotifyType : int32
{
	MediaPlayback = 0,
	MediaRecording = 1,
	MediaCasting = 2,
}


[AllowDuplicates]
public enum SCROLLABLECONTEXTMENU_PLACEMENT : int32
{
	SCMP_TOP = 0,
	SCMP_BOTTOM = 1,
	SCMP_LEFT = 2,
	SCMP_RIGHT = 3,
	SCMP_FULL = 4,
}


[AllowDuplicates]
public enum INTERNETEXPLORERCONFIGURATION : int32
{
	INTERNETEXPLORERCONFIGURATION_HOST = 1,
	INTERNETEXPLORERCONFIGURATION_WEB_DRIVER = 2,
	INTERNETEXPLORERCONFIGURATION_WEB_DRIVER_EDGE = 4,
}


[AllowDuplicates]
public enum IELAUNCHOPTION_FLAGS : int32
{
	IELAUNCHOPTION_SCRIPTDEBUG = 1,
	IELAUNCHOPTION_FORCE_COMPAT = 2,
	IELAUNCHOPTION_FORCE_EDGE = 4,
	IELAUNCHOPTION_LOCK_ENGINE = 8,
}


[AllowDuplicates]
public enum DOCHOSTUITYPE : int32
{
	DOCHOSTUITYPE_BROWSE = 0,
	DOCHOSTUITYPE_AUTHOR = 1,
}


[AllowDuplicates]
public enum DOCHOSTUIDBLCLK : int32
{
	DOCHOSTUIDBLCLK_DEFAULT = 0,
	DOCHOSTUIDBLCLK_SHOWPROPERTIES = 1,
	DOCHOSTUIDBLCLK_SHOWCODE = 2,
}


[AllowDuplicates]
public enum DOCHOSTUIFLAG : int32
{
	DOCHOSTUIFLAG_DIALOG = 1,
	DOCHOSTUIFLAG_DISABLE_HELP_MENU = 2,
	DOCHOSTUIFLAG_NO3DBORDER = 4,
	DOCHOSTUIFLAG_SCROLL_NO = 8,
	DOCHOSTUIFLAG_DISABLE_SCRIPT_INACTIVE = 16,
	DOCHOSTUIFLAG_OPENNEWWIN = 32,
	DOCHOSTUIFLAG_DISABLE_OFFSCREEN = 64,
	DOCHOSTUIFLAG_FLAT_SCROLLBAR = 128,
	DOCHOSTUIFLAG_DIV_BLOCKDEFAULT = 256,
	DOCHOSTUIFLAG_ACTIVATE_CLIENTHIT_ONLY = 512,
	DOCHOSTUIFLAG_OVERRIDEBEHAVIORFACTORY = 1024,
	DOCHOSTUIFLAG_CODEPAGELINKEDFONTS = 2048,
	DOCHOSTUIFLAG_URL_ENCODING_DISABLE_UTF8 = 4096,
	DOCHOSTUIFLAG_URL_ENCODING_ENABLE_UTF8 = 8192,
	DOCHOSTUIFLAG_ENABLE_FORMS_AUTOCOMPLETE = 16384,
	DOCHOSTUIFLAG_ENABLE_INPLACE_NAVIGATION = 65536,
	DOCHOSTUIFLAG_IME_ENABLE_RECONVERSION = 131072,
	DOCHOSTUIFLAG_THEME = 262144,
	DOCHOSTUIFLAG_NOTHEME = 524288,
	DOCHOSTUIFLAG_NOPICS = 1048576,
	DOCHOSTUIFLAG_NO3DOUTERBORDER = 2097152,
	DOCHOSTUIFLAG_DISABLE_EDIT_NS_FIXUP = 4194304,
	DOCHOSTUIFLAG_LOCAL_MACHINE_ACCESS_CHECK = 8388608,
	DOCHOSTUIFLAG_DISABLE_UNTRUSTEDPROTOCOL = 16777216,
	DOCHOSTUIFLAG_HOST_NAVIGATES = 33554432,
	DOCHOSTUIFLAG_ENABLE_REDIRECT_NOTIFICATION = 67108864,
	DOCHOSTUIFLAG_USE_WINDOWLESS_SELECTCONTROL = 134217728,
	DOCHOSTUIFLAG_USE_WINDOWED_SELECTCONTROL = 268435456,
	DOCHOSTUIFLAG_ENABLE_ACTIVEX_INACTIVATE_MODE = 536870912,
	DOCHOSTUIFLAG_DPI_AWARE = 1073741824,
}


[AllowDuplicates]
public enum OpenServiceErrors : int32
{
	OS_E_NOTFOUND = -2147287038,
	OS_E_NOTSUPPORTED = -2147467231,
	OS_E_CANCELLED = -2147471631,
	OS_E_GPDISABLED = -1072886820,
}


[AllowDuplicates]
public enum OpenServiceActivityContentType : int32
{
	ActivityContentNone = -1,
	ActivityContentDocument = 0,
	ActivityContentSelection = 1,
	ActivityContentLink = 2,
	ActivityContentCount = 3,
}


[AllowDuplicates]
public enum ADDURL_FLAG : int32
{
	ADDURL_FIRST = 0,
	ADDURL_ADDTOHISTORYANDCACHE = 0,
	ADDURL_ADDTOCACHE = 1,
	ADDURL_Max = 2147483647,
}

#endregion

#region Function Pointers
public function HRESULT SHOWHTMLDIALOGFN(HWND hwndParent, IMoniker* pmk, VARIANT* pvarArgIn, PWSTR pchOptions, VARIANT* pvArgOut);

public function HRESULT SHOWHTMLDIALOGEXFN(HWND hwndParent, IMoniker* pmk, uint32 dwDialogFlags, VARIANT* pvarArgIn, PWSTR pchOptions, VARIANT* pvArgOut);

public function HRESULT SHOWMODELESSHTMLDIALOGFN(HWND hwndParent, IMoniker* pmk, VARIANT* pvarArgIn, VARIANT* pvarOptions, IHTMLWindow2** ppWindow);

public function HRESULT IEREGISTERXMLNSFN(PWSTR lpszURI, Guid clsid, BOOL fMachine);

public function HRESULT IEISXMLNSREGISTEREDFN(PWSTR lpszURI, Guid* pCLSID);

#endregion

#region Structs
[CRepr]
public struct HTML_PAINTER_INFO
{
	public int32 lFlags;
	public int32 lZOrder;
	public Guid iidDrawObject;
	public RECT rcExpand;
}

[CRepr]
public struct HTML_PAINT_XFORM
{
	public float eM11;
	public float eM12;
	public float eM21;
	public float eM22;
	public float eDx;
	public float eDy;
}

[CRepr]
public struct HTML_PAINT_DRAW_INFO
{
	public RECT rcViewport;
	public HRGN hrgnUpdate;
	public HTML_PAINT_XFORM xform;
}

[CRepr]
public struct tagNavigateData
{
	public uint32 ulTarget;
	public uint32 ulURL;
	public uint32 ulRefURL;
	public uint32 ulPostData;
	public uint32 dwFlags;
}

[CRepr]
public struct IELAUNCHURLINFO
{
	public uint32 cbSize;
	public uint32 dwCreationFlags;
	public uint32 dwLaunchOptionFlags;
}

[CRepr]
public struct HTMLPersistEvents
{
}

[CRepr]
public struct LayoutRectEvents
{
}

[CRepr]
public struct HostDialogHelper
{
}

[CRepr]
public struct DOCHOSTUIINFO
{
	public uint32 cbSize;
	public uint32 dwFlags;
	public uint32 dwDoubleClick;
	public PWSTR pchHostCss;
	public PWSTR pchHostNS;
}

[CRepr]
public struct STATURL
{
	public uint32 cbSize;
	public PWSTR pwcsUrl;
	public PWSTR pwcsTitle;
	public FILETIME ftLastVisited;
	public FILETIME ftLastUpdated;
	public FILETIME ftExpires;
	public uint32 dwFlags;
}

#endregion

#region COM Class IDs
public static
{
	public const Guid CLSID_HTMLCSSStyleDeclaration = .(0x30510741, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);


	public const Guid CLSID_HTMLStyle = .(0x3050f285, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);


	public const Guid CLSID_HTMLRuleStyle = .(0x3050f3d0, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);


	public const Guid CLSID_HTMLCSSRule = .(0x305106ef, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);


	public const Guid CLSID_HTMLCSSImportRule = .(0x305106f0, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);


	public const Guid CLSID_HTMLCSSMediaRule = .(0x305106f1, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);


	public const Guid CLSID_HTMLCSSMediaList = .(0x30510732, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);


	public const Guid CLSID_HTMLCSSNamespaceRule = .(0x305106f2, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);


	public const Guid CLSID_HTMLMSCSSKeyframeRule = .(0x3051080e, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);


	public const Guid CLSID_HTMLMSCSSKeyframesRule = .(0x3051080f, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);


	public const Guid CLSID_HTMLRenderStyle = .(0x3050f6aa, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);


	public const Guid CLSID_HTMLCurrentStyle = .(0x3050f3dc, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);


	public const Guid CLSID_HTMLDOMAttribute = .(0x3050f4b2, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);


	public const Guid CLSID_HTMLDOMTextNode = .(0x3050f4ba, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);


	public const Guid CLSID_HTMLDOMImplementation = .(0x3050f80e, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);


	public const Guid CLSID_HTMLAttributeCollection = .(0x3050f4cc, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);


	public const Guid CLSID_StaticNodeList = .(0x30510467, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);


	public const Guid CLSID_DOMChildrenCollection = .(0x3050f5aa, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);


	public const Guid CLSID_HTMLDefaults = .(0x3050f6c8, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);


	public const Guid CLSID_HTCDefaultDispatch = .(0x3050f4fc, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);


	public const Guid CLSID_HTCPropertyBehavior = .(0x3050f5de, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);


	public const Guid CLSID_HTCMethodBehavior = .(0x3050f630, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);


	public const Guid CLSID_HTCEventBehavior = .(0x3050f4fe, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);


	public const Guid CLSID_HTCAttachBehavior = .(0x3050f5f5, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);


	public const Guid CLSID_HTCDescBehavior = .(0x3050f5dd, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);


	public const Guid CLSID_HTMLUrnCollection = .(0x3050f580, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);


	public const Guid CLSID_HTMLGenericElement = .(0x3050f4b8, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);


	public const Guid CLSID_HTMLStyleSheetRule = .(0x3050f3ce, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);


	public const Guid CLSID_HTMLStyleSheetRulesCollection = .(0x3050f3cd, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);


	public const Guid CLSID_HTMLStyleSheetPage = .(0x3050f7ef, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);


	public const Guid CLSID_HTMLStyleSheetPagesCollection = .(0x3050f7f1, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);


	public const Guid CLSID_HTMLStyleSheet = .(0x3050f2e4, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);


	public const Guid CLSID_HTMLStyleSheetsCollection = .(0x3050f37f, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);


	public const Guid CLSID_HTMLLinkElement = .(0x3050f277, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);


	public const Guid CLSID_HTMLDOMRange = .(0x305106c3, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);


	public const Guid CLSID_HTMLFormElement = .(0x3050f251, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);


	public const Guid CLSID_HTMLTextElement = .(0x3050f26a, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);


	public const Guid CLSID_HTMLImg = .(0x3050f241, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);


	public const Guid CLSID_HTMLImageElementFactory = .(0x3050f38f, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);


	public const Guid CLSID_HTMLBody = .(0x3050f24a, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);


	public const Guid CLSID_HTMLFontElement = .(0x3050f27b, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);


	public const Guid CLSID_HTMLAnchorElement = .(0x3050f248, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);


	public const Guid CLSID_HTMLLabelElement = .(0x3050f32b, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);


	public const Guid CLSID_HTMLListElement = .(0x3050f272, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);


	public const Guid CLSID_HTMLUListElement = .(0x3050f269, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);


	public const Guid CLSID_HTMLOListElement = .(0x3050f270, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);


	public const Guid CLSID_HTMLLIElement = .(0x3050f273, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);


	public const Guid CLSID_HTMLBlockElement = .(0x3050f281, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);


	public const Guid CLSID_HTMLDivElement = .(0x3050f27e, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);


	public const Guid CLSID_HTMLDDElement = .(0x3050f27f, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);


	public const Guid CLSID_HTMLDTElement = .(0x3050f27c, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);


	public const Guid CLSID_HTMLBRElement = .(0x3050f280, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);


	public const Guid CLSID_HTMLDListElement = .(0x3050f27d, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);


	public const Guid CLSID_HTMLHRElement = .(0x3050f252, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);


	public const Guid CLSID_HTMLParaElement = .(0x3050f26f, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);


	public const Guid CLSID_HTMLElementCollection = .(0x3050f4cb, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);


	public const Guid CLSID_HTMLHeaderElement = .(0x3050f27a, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);


	public const Guid CLSID_HTMLSelectElement = .(0x3050f245, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);


	public const Guid CLSID_HTMLWndSelectElement = .(0x3050f2cf, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);


	public const Guid CLSID_HTMLOptionElement = .(0x3050f24d, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);


	public const Guid CLSID_HTMLOptionElementFactory = .(0x3050f38d, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);


	public const Guid CLSID_HTMLWndOptionElement = .(0x3050f2d0, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);


	public const Guid CLSID_HTMLInputElement = .(0x3050f5d8, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);


	public const Guid CLSID_HTMLTextAreaElement = .(0x3050f2ac, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);


	public const Guid CLSID_HTMLRichtextElement = .(0x3050f2df, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);


	public const Guid CLSID_HTMLButtonElement = .(0x3050f2c6, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);


	public const Guid CLSID_HTMLMarqueeElement = .(0x3050f2b9, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);


	public const Guid CLSID_HTMLHtmlElement = .(0x3050f491, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);


	public const Guid CLSID_HTMLHeadElement = .(0x3050f493, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);


	public const Guid CLSID_HTMLTitleElement = .(0x3050f284, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);


	public const Guid CLSID_HTMLMetaElement = .(0x3050f275, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);


	public const Guid CLSID_HTMLBaseElement = .(0x3050f276, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);


	public const Guid CLSID_HTMLIsIndexElement = .(0x3050f278, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);


	public const Guid CLSID_HTMLNextIdElement = .(0x3050f279, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);


	public const Guid CLSID_HTMLBaseFontElement = .(0x3050f282, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);


	public const Guid CLSID_HTMLUnknownElement = .(0x3050f268, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);


	public const Guid CLSID_HTMLHistory = .(0xfeceaaa3, 0x8405, 0x11cf, 0x8b, 0xa1, 0x00, 0xaa, 0x00, 0x47, 0x6d, 0xa6);


	public const Guid CLSID_COpsProfile = .(0x3050f402, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);


	public const Guid CLSID_HTMLNavigator = .(0xfeceaaa6, 0x8405, 0x11cf, 0x8b, 0xa1, 0x00, 0xaa, 0x00, 0x47, 0x6d, 0xa6);


	public const Guid CLSID_HTMLLocation = .(0x163bb1e1, 0x6e00, 0x11cf, 0x83, 0x7a, 0x48, 0xdc, 0x04, 0xc1, 0x00, 0x00);


	public const Guid CLSID_CMimeTypes = .(0x3050f3fe, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);


	public const Guid CLSID_CPlugins = .(0x3050f3ff, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);


	public const Guid CLSID_CEventObj = .(0x3050f48a, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);


	public const Guid CLSID_HTMLStyleMedia = .(0x3051074c, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);


	public const Guid CLSID_FramesCollection = .(0x3050f7f6, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);


	public const Guid CLSID_HTMLScreen = .(0x3050f35d, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);


	public const Guid CLSID_HTMLWindow2 = .(0xd48a6ec6, 0x6a4a, 0x11cf, 0x94, 0xa7, 0x44, 0x45, 0x53, 0x54, 0x00, 0x00);


	public const Guid CLSID_HTMLWindowProxy = .(0x3050f391, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);


	public const Guid CLSID_HTMLDocumentCompatibleInfo = .(0x3051041b, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);


	public const Guid CLSID_HTMLDocumentCompatibleInfoCollection = .(0x30510419, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);


	public const Guid CLSID_HTMLDocument = .(0x25336920, 0x03f9, 0x11cf, 0x8f, 0xd0, 0x00, 0xaa, 0x00, 0x68, 0x6f, 0x13);


	public const Guid CLSID_Scriptlet = .(0xae24fdae, 0x03c6, 0x11d1, 0x8b, 0x76, 0x00, 0x80, 0xc7, 0x44, 0xf3, 0x89);


	public const Guid CLSID_HTMLEmbed = .(0x3050f25d, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);


	public const Guid CLSID_HTMLAreasCollection = .(0x3050f4ca, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);


	public const Guid CLSID_HTMLMapElement = .(0x3050f271, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);


	public const Guid CLSID_HTMLAreaElement = .(0x3050f283, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);


	public const Guid CLSID_HTMLTableCaption = .(0x3050f2ec, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);


	public const Guid CLSID_HTMLCommentElement = .(0x3050f317, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);


	public const Guid CLSID_HTMLPhraseElement = .(0x3050f26e, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);


	public const Guid CLSID_HTMLSpanElement = .(0x3050f3f5, 0x98b4, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);


	public const Guid CLSID_HTMLTable = .(0x3050f26b, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);


	public const Guid CLSID_HTMLTableCol = .(0x3050f26c, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);


	public const Guid CLSID_HTMLTableSection = .(0x3050f2e9, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);


	public const Guid CLSID_HTMLTableRow = .(0x3050f26d, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);


	public const Guid CLSID_HTMLTableCell = .(0x3050f246, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);


	public const Guid CLSID_HTMLScriptElement = .(0x3050f28c, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);


	public const Guid CLSID_HTMLNoShowElement = .(0x3050f38b, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);


	public const Guid CLSID_HTMLObjectElement = .(0x3050f24e, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);


	public const Guid CLSID_HTMLParamElement = .(0x3050f83e, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);


	public const Guid CLSID_HTMLFrameBase = .(0x3050f312, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);


	public const Guid CLSID_HTMLFrameElement = .(0x3050f314, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);


	public const Guid CLSID_HTMLIFrame = .(0x3050f316, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);


	public const Guid CLSID_HTMLDivPosition = .(0x3050f249, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);


	public const Guid CLSID_HTMLFieldSetElement = .(0x3050f3e8, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);


	public const Guid CLSID_HTMLLegendElement = .(0x3050f3e9, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);


	public const Guid CLSID_HTMLSpanFlow = .(0x3050f3e6, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);


	public const Guid CLSID_HTMLFrameSetSite = .(0x3050f31a, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);


	public const Guid CLSID_HTMLBGsound = .(0x3050f370, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);


	public const Guid CLSID_HTMLStyleElement = .(0x3050f37d, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);


	public const Guid CLSID_HTMLStyleFontFace = .(0x3050f3d4, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);


	public const Guid CLSID_XDomainRequest = .(0x30510455, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);


	public const Guid CLSID_XDomainRequestFactory = .(0x30510457, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);


	public const Guid CLSID_HTMLStorage = .(0x30510475, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);


	public const Guid CLSID_DOMEvent = .(0x305104bb, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);


	public const Guid CLSID_DOMUIEvent = .(0x305106cb, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);


	public const Guid CLSID_DOMMouseEvent = .(0x305106cf, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);


	public const Guid CLSID_DOMDragEvent = .(0x30510762, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);


	public const Guid CLSID_DOMMouseWheelEvent = .(0x305106d1, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);


	public const Guid CLSID_DOMWheelEvent = .(0x305106d3, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);


	public const Guid CLSID_DOMTextEvent = .(0x305106d5, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);


	public const Guid CLSID_DOMKeyboardEvent = .(0x305106d7, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);


	public const Guid CLSID_DOMCompositionEvent = .(0x305106d9, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);


	public const Guid CLSID_DOMMutationEvent = .(0x305106db, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);


	public const Guid CLSID_DOMBeforeUnloadEvent = .(0x30510764, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);


	public const Guid CLSID_DOMFocusEvent = .(0x305106cd, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);


	public const Guid CLSID_DOMCustomEvent = .(0x305106df, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);


	public const Guid CLSID_CanvasGradient = .(0x30510715, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);


	public const Guid CLSID_CanvasPattern = .(0x30510717, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);


	public const Guid CLSID_CanvasTextMetrics = .(0x30510719, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);


	public const Guid CLSID_CanvasImageData = .(0x3051071b, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);


	public const Guid CLSID_CanvasRenderingContext2D = .(0x30510700, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);


	public const Guid CLSID_HTMLCanvasElement = .(0x305106e5, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);


	public const Guid CLSID_DOMProgressEvent = .(0x3051071f, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);


	public const Guid CLSID_DOMMessageEvent = .(0x30510721, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);


	public const Guid CLSID_DOMSiteModeEvent = .(0x30510766, 0x98b6, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);


	public const Guid CLSID_DOMStorageEvent = .(0x30510723, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);


	public const Guid CLSID_XMLHttpRequestEventTarget = .(0x30510831, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);


	public const Guid CLSID_HTMLXMLHttpRequest = .(0x3051040b, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);


	public const Guid CLSID_HTMLXMLHttpRequestFactory = .(0x3051040d, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);


	public const Guid CLSID_SVGAngle = .(0x30510584, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);


	public const Guid CLSID_SVGAnimatedAngle = .(0x305105e4, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);


	public const Guid CLSID_SVGAnimatedTransformList = .(0x305105b1, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);


	public const Guid CLSID_SVGAnimatedBoolean = .(0x3051058b, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);


	public const Guid CLSID_SVGAnimatedEnumeration = .(0x3051058e, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);


	public const Guid CLSID_SVGAnimatedInteger = .(0x3051058f, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);


	public const Guid CLSID_SVGAnimatedLength = .(0x30510581, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);


	public const Guid CLSID_SVGAnimatedLengthList = .(0x30510582, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);


	public const Guid CLSID_SVGAnimatedNumber = .(0x30510588, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);


	public const Guid CLSID_SVGAnimatedNumberList = .(0x3051058a, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);


	public const Guid CLSID_SVGAnimatedRect = .(0x30510586, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);


	public const Guid CLSID_SVGAnimatedString = .(0x3051058c, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);


	public const Guid CLSID_SVGClipPathElement = .(0x305105e6, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);


	public const Guid CLSID_SVGElement = .(0x30510564, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);


	public const Guid CLSID_SVGLength = .(0x3051057e, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);


	public const Guid CLSID_SVGLengthList = .(0x30510580, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);


	public const Guid CLSID_SVGMatrix = .(0x305105ae, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);


	public const Guid CLSID_SVGNumber = .(0x30510587, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);


	public const Guid CLSID_SVGNumberList = .(0x30510589, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);


	public const Guid CLSID_SVGPatternElement = .(0x305105d4, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);


	public const Guid CLSID_SVGPathSeg = .(0x305105b3, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);


	public const Guid CLSID_SVGPathSegArcAbs = .(0x305105bb, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);


	public const Guid CLSID_SVGPathSegArcRel = .(0x305105bc, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);


	public const Guid CLSID_SVGPathSegClosePath = .(0x305105bd, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);


	public const Guid CLSID_SVGPathSegMovetoAbs = .(0x305105cc, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);


	public const Guid CLSID_SVGPathSegMovetoRel = .(0x305105cd, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);


	public const Guid CLSID_SVGPathSegLinetoAbs = .(0x305105c6, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);


	public const Guid CLSID_SVGPathSegLinetoRel = .(0x305105c9, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);


	public const Guid CLSID_SVGPathSegCurvetoCubicAbs = .(0x305105be, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);


	public const Guid CLSID_SVGPathSegCurvetoCubicRel = .(0x305105bf, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);


	public const Guid CLSID_SVGPathSegCurvetoCubicSmoothAbs = .(0x305105c0, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);


	public const Guid CLSID_SVGPathSegCurvetoCubicSmoothRel = .(0x305105c1, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);


	public const Guid CLSID_SVGPathSegCurvetoQuadraticAbs = .(0x305105c2, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);


	public const Guid CLSID_SVGPathSegCurvetoQuadraticRel = .(0x305105c3, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);


	public const Guid CLSID_SVGPathSegCurvetoQuadraticSmoothAbs = .(0x305105c4, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);


	public const Guid CLSID_SVGPathSegCurvetoQuadraticSmoothRel = .(0x305105c5, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);


	public const Guid CLSID_SVGPathSegLinetoHorizontalAbs = .(0x305105c7, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);


	public const Guid CLSID_SVGPathSegLinetoHorizontalRel = .(0x305105c8, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);


	public const Guid CLSID_SVGPathSegLinetoVerticalAbs = .(0x305105ca, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);


	public const Guid CLSID_SVGPathSegLinetoVerticalRel = .(0x305105cb, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);


	public const Guid CLSID_SVGPathSegList = .(0x305105b4, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);


	public const Guid CLSID_SVGPoint = .(0x305105ba, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);


	public const Guid CLSID_SVGPointList = .(0x305105b9, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);


	public const Guid CLSID_SVGRect = .(0x30510583, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);


	public const Guid CLSID_SVGStringList = .(0x3051058d, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);


	public const Guid CLSID_SVGTransform = .(0x305105af, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);


	public const Guid CLSID_SVGSVGElement = .(0x30510574, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);


	public const Guid CLSID_SVGUseElement = .(0x30510590, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);


	public const Guid CLSID_HTMLStyleSheetRulesAppliedCollection = .(0xeb36f845, 0x2395, 0x4719, 0xb8, 0x5c, 0xd0, 0xd8, 0x0e, 0x18, 0x4b, 0xd9);


	public const Guid CLSID_RulesApplied = .(0x7c803920, 0x7a53, 0x4d26, 0x98, 0xac, 0xfd, 0xd2, 0x3e, 0x6b, 0x9e, 0x01);


	public const Guid CLSID_RulesAppliedCollection = .(0x671926ee, 0xc3cf, 0x40af, 0xbe, 0x8f, 0x1c, 0xba, 0xee, 0x64, 0x86, 0xe8);


	public const Guid CLSID_HTMLW3CComputedStyle = .(0x305106c8, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);


	public const Guid CLSID_SVGTransformList = .(0x305105b0, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);


	public const Guid CLSID_SVGCircleElement = .(0x30510578, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);


	public const Guid CLSID_SVGEllipseElement = .(0x30510579, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);


	public const Guid CLSID_SVGLineElement = .(0x3051057a, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);


	public const Guid CLSID_SVGRectElement = .(0x30510577, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);


	public const Guid CLSID_SVGPolygonElement = .(0x3051057b, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);


	public const Guid CLSID_SVGPolylineElement = .(0x3051057c, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);


	public const Guid CLSID_SVGGElement = .(0x3051056f, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);


	public const Guid CLSID_SVGSymbolElement = .(0x30510571, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);


	public const Guid CLSID_SVGDefsElement = .(0x30510570, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);


	public const Guid CLSID_SVGPathElement = .(0x305105b2, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);


	public const Guid CLSID_SVGPreserveAspectRatio = .(0x305105d0, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);


	public const Guid CLSID_SVGTextElement = .(0x305105df, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);


	public const Guid CLSID_SVGAnimatedPreserveAspectRatio = .(0x305105ce, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);


	public const Guid CLSID_SVGImageElement = .(0x305105cf, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);


	public const Guid CLSID_SVGStopElement = .(0x305105d5, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);


	public const Guid CLSID_SVGGradientElement = .(0x305105d6, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);


	public const Guid CLSID_SVGLinearGradientElement = .(0x305105d2, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);


	public const Guid CLSID_SVGRadialGradientElement = .(0x305105d3, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);


	public const Guid CLSID_SVGMaskElement = .(0x305105e7, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);


	public const Guid CLSID_SVGMarkerElement = .(0x305105de, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);


	public const Guid CLSID_SVGZoomEvent = .(0x305105d9, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);


	public const Guid CLSID_SVGAElement = .(0x305105db, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);


	public const Guid CLSID_SVGViewElement = .(0x305105dc, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);


	public const Guid CLSID_HTMLMediaError = .(0x3051070a, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);


	public const Guid CLSID_HTMLTimeRanges = .(0x3051070b, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);


	public const Guid CLSID_HTMLMediaElement = .(0x3051070c, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);


	public const Guid CLSID_HTMLSourceElement = .(0x3051070d, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);


	public const Guid CLSID_HTMLAudioElement = .(0x3051070e, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);


	public const Guid CLSID_HTMLAudioElementFactory = .(0x305107ec, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);


	public const Guid CLSID_HTMLVideoElement = .(0x3051070f, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);


	public const Guid CLSID_SVGSwitchElement = .(0x305105d8, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);


	public const Guid CLSID_SVGDescElement = .(0x30510572, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);


	public const Guid CLSID_SVGTitleElement = .(0x30510573, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);


	public const Guid CLSID_SVGMetadataElement = .(0x305105d7, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);


	public const Guid CLSID_SVGElementInstance = .(0x30510575, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);


	public const Guid CLSID_SVGElementInstanceList = .(0x30510576, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);


	public const Guid CLSID_DOMException = .(0x3051072c, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);


	public const Guid CLSID_RangeException = .(0x3051072e, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);


	public const Guid CLSID_SVGException = .(0x30510730, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);


	public const Guid CLSID_EventException = .(0x3051073b, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);


	public const Guid CLSID_SVGScriptElement = .(0x305105e1, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);


	public const Guid CLSID_SVGStyleElement = .(0x305105d1, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);


	public const Guid CLSID_SVGTextContentElement = .(0x305105dd, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);


	public const Guid CLSID_SVGTextPositioningElement = .(0x305105e0, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);


	public const Guid CLSID_DOMDocumentType = .(0x30510739, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);


	public const Guid CLSID_NodeIterator = .(0x30510745, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);


	public const Guid CLSID_TreeWalker = .(0x30510747, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);


	public const Guid CLSID_DOMProcessingInstruction = .(0x30510743, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);


	public const Guid CLSID_HTMLPerformance = .(0x3051074f, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);


	public const Guid CLSID_HTMLPerformanceNavigation = .(0x30510751, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);


	public const Guid CLSID_HTMLPerformanceTiming = .(0x30510753, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);


	public const Guid CLSID_SVGTSpanElement = .(0x305105e2, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);


	public const Guid CLSID_CTemplatePrinter = .(0x3050f6b3, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);


	public const Guid CLSID_CPrintManagerTemplatePrinter = .(0x63619f54, 0x9d71, 0x4c23, 0xa0, 0x8d, 0x50, 0xd7, 0xf1, 0x8d, 0xb2, 0xe9);


	public const Guid CLSID_SVGTextPathElement = .(0x305105eb, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);


	public const Guid CLSID_XMLSerializer = .(0x3051077e, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);


	public const Guid CLSID_DOMParser = .(0x30510782, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);


	public const Guid CLSID_HTMLDOMXmlSerializerFactory = .(0x30510780, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);


	public const Guid CLSID_DOMParserFactory = .(0x30510784, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);


	public const Guid CLSID_HTMLSemanticElement = .(0x305107b0, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);


	public const Guid CLSID_HTMLProgressElement = .(0x3050f2d5, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);


	public const Guid CLSID_DOMMSTransitionEvent = .(0x305107b6, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);


	public const Guid CLSID_DOMMSAnimationEvent = .(0x305107b8, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);


	public const Guid CLSID_WebGeolocation = .(0x305107c6, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);


	public const Guid CLSID_WebGeocoordinates = .(0x305107c8, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);


	public const Guid CLSID_WebGeopositionError = .(0x305107ca, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);


	public const Guid CLSID_WebGeoposition = .(0x305107ce, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);


	public const Guid CLSID_CClientCaps = .(0x7e8bc44e, 0xaeff, 0x11d1, 0x89, 0xc2, 0x00, 0xc0, 0x4f, 0xb6, 0xbf, 0xc4);


	public const Guid CLSID_DOMMSManipulationEvent = .(0x30510817, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);


	public const Guid CLSID_DOMCloseEvent = .(0x30510800, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);


	public const Guid CLSID_ApplicationCache = .(0x30510829, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);


	public const Guid CLSID_HtmlDlgSafeHelper = .(0x3050f819, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);


	public const Guid CLSID_BlockFormats = .(0x3050f831, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);


	public const Guid CLSID_FontNames = .(0x3050f83a, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);


	public const Guid CLSID_HTMLNamespace = .(0x3050f6bc, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);


	public const Guid CLSID_HTMLNamespaceCollection = .(0x3050f6b9, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);


	public const Guid CLSID_ThreadDialogProcParam = .(0x3050f5eb, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);


	public const Guid CLSID_HTMLDialog = .(0x3050f28a, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);


	public const Guid CLSID_HTMLPopup = .(0x3050f667, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);


	public const Guid CLSID_HTMLAppBehavior = .(0x3050f5cb, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);


	public const Guid CLSID_OldHTMLDocument = .(0xd48a6ec9, 0x6a4a, 0x11cf, 0x94, 0xa7, 0x44, 0x45, 0x53, 0x54, 0x00, 0x00);


	public const Guid CLSID_OldHTMLFormElement = .(0x0d04d285, 0x6bec, 0x11cf, 0x8b, 0x97, 0x00, 0xaa, 0x00, 0x47, 0x6d, 0xa6);


	public const Guid CLSID_HTMLInputButtonElement = .(0x3050f2b4, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);


	public const Guid CLSID_HTMLInputTextElement = .(0x3050f2ab, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);


	public const Guid CLSID_HTMLInputFileElement = .(0x3050f2ae, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);


	public const Guid CLSID_HTMLOptionButtonElement = .(0x3050f2be, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);


	public const Guid CLSID_HTMLInputImage = .(0x3050f2c4, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);


	public const Guid CLSID_HomePageSetting = .(0x374cede0, 0x873a, 0x4c4f, 0xbc, 0x86, 0xbc, 0xc8, 0xcf, 0x51, 0x16, 0xa3);


	public const Guid CLSID_InternetExplorerManager = .(0xdf4fcc34, 0x067a, 0x4e0a, 0x83, 0x52, 0x4a, 0x1a, 0x50, 0x95, 0x34, 0x6e);


	public const Guid CLSID_IEWebDriverManager = .(0x90314af2, 0x5250, 0x47b3, 0x89, 0xd8, 0x62, 0x95, 0xfc, 0x23, 0xbc, 0x22);


	public const Guid CLSID_PeerFactory = .(0x3050f4cf, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);


	public const Guid CLSID_IntelliForms = .(0x613ab92e, 0x16bf, 0x11d2, 0xbc, 0xa5, 0x00, 0xc0, 0x4f, 0xd9, 0x29, 0xdb);


	public const Guid CLSID_HomePage = .(0x766bf2ae, 0xd650, 0x11d1, 0x98, 0x11, 0x00, 0xc0, 0x4f, 0xc3, 0x1d, 0x2e);


	public const Guid CLSID_CPersistUserData = .(0x3050f48e, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);


	public const Guid CLSID_CPersistDataPeer = .(0x3050f487, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);


	public const Guid CLSID_CPersistShortcut = .(0x3050f4c6, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);


	public const Guid CLSID_CPersistHistory = .(0x3050f4c8, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);


	public const Guid CLSID_CPersistSnapshot = .(0x3050f4c9, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);


	public const Guid CLSID_CDownloadBehavior = .(0x3050f5be, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);


	public const Guid CLSID_wfolders = .(0xbae31f9a, 0x1b81, 0x11d2, 0xa9, 0x7a, 0x00, 0xc0, 0x4f, 0x8e, 0xcb, 0x02);


	public const Guid CLSID_AnchorClick = .(0x13d5413c, 0x33b9, 0x11d2, 0x95, 0xa7, 0x00, 0xc0, 0x4f, 0x8e, 0xcb, 0x02);


	public const Guid CLSID_CLayoutRect = .(0x3050f664, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);


	public const Guid CLSID_CDeviceRect = .(0x3050f6d4, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);


	public const Guid CLSID_CHeaderFooter = .(0x3050f6cd, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);


	public const Guid CLSID_OpenServiceManager = .(0x098870b6, 0x39ea, 0x480b, 0xb8, 0xb5, 0xdd, 0x01, 0x67, 0xc4, 0xdb, 0x59);


	public const Guid CLSID_OpenServiceActivityManager = .(0xc5efd803, 0x50f8, 0x43cd, 0x9a, 0xb8, 0xaa, 0xfc, 0x13, 0x94, 0xc9, 0xe0);


	public const Guid CLSID_CoDitherToRGB8 = .(0xa860ce50, 0x3910, 0x11d0, 0x86, 0xfc, 0x00, 0xa0, 0xc9, 0x13, 0xf7, 0x50);


	public const Guid CLSID_CoSniffStream = .(0x6a01fda0, 0x30df, 0x11d0, 0xb7, 0x24, 0x00, 0xaa, 0x00, 0x6c, 0x1a, 0x01);


	public const Guid CLSID_CoMapMIMEToCLSID = .(0x30c3b080, 0x30fb, 0x11d0, 0xb7, 0x24, 0x00, 0xaa, 0x00, 0x6c, 0x1a, 0x01);


}
#endregion

#region COM Types
[CRepr]struct IHTMLFiltersCollection : IDispatch
{
	public new const Guid IID = .(0x3050f3ee, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* p) get_length;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IUnknown** p) get__newEnum;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* pvarIndex, VARIANT* pvarResult) item;
	}


	public HRESULT get_length(int32* p) mut => VT.[Friend]get_length(&this, p);

	public HRESULT get__newEnum(IUnknown** p) mut => VT.[Friend]get__newEnum(&this, p);

	public HRESULT item(VARIANT* pvarIndex, VARIANT* pvarResult) mut => VT.[Friend]item(&this, pvarIndex, pvarResult);
}

[CRepr]struct IIE70DispatchEx : IDispatchEx
{
	public new const Guid IID = .(0x3051046b, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatchEx.VTable
	{
	}

}

[CRepr]struct IIE80DispatchEx : IDispatchEx
{
	public new const Guid IID = .(0x3051046c, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatchEx.VTable
	{
	}

}

[CRepr]struct IHTMLEventObj : IDispatch
{
	public new const Guid IID = .(0x3050f32d, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IHTMLElement** p) get_srcElement;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16* p) get_altKey;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16* p) get_ctrlKey;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16* p) get_shiftKey;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_returnValue;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_returnValue;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16 v) put_cancelBubble;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16* p) get_cancelBubble;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IHTMLElement** p) get_fromElement;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IHTMLElement** p) get_toElement;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 v) put_keyCode;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* p) get_keyCode;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* p) get_button;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_type;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_qualifier;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* p) get_reason;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* p) get_x;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* p) get_y;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* p) get_clientX;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* p) get_clientY;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* p) get_offsetX;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* p) get_offsetY;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* p) get_screenX;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* p) get_screenY;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IDispatch** p) get_srcFilter;
	}


	public HRESULT get_srcElement(IHTMLElement** p) mut => VT.[Friend]get_srcElement(&this, p);

	public HRESULT get_altKey(int16* p) mut => VT.[Friend]get_altKey(&this, p);

	public HRESULT get_ctrlKey(int16* p) mut => VT.[Friend]get_ctrlKey(&this, p);

	public HRESULT get_shiftKey(int16* p) mut => VT.[Friend]get_shiftKey(&this, p);

	public HRESULT put_returnValue(VARIANT v) mut => VT.[Friend]put_returnValue(&this, v);

	public HRESULT get_returnValue(VARIANT* p) mut => VT.[Friend]get_returnValue(&this, p);

	public HRESULT put_cancelBubble(int16 v) mut => VT.[Friend]put_cancelBubble(&this, v);

	public HRESULT get_cancelBubble(int16* p) mut => VT.[Friend]get_cancelBubble(&this, p);

	public HRESULT get_fromElement(IHTMLElement** p) mut => VT.[Friend]get_fromElement(&this, p);

	public HRESULT get_toElement(IHTMLElement** p) mut => VT.[Friend]get_toElement(&this, p);

	public HRESULT put_keyCode(int32 v) mut => VT.[Friend]put_keyCode(&this, v);

	public HRESULT get_keyCode(int32* p) mut => VT.[Friend]get_keyCode(&this, p);

	public HRESULT get_button(int32* p) mut => VT.[Friend]get_button(&this, p);

	public HRESULT get_type(BSTR* p) mut => VT.[Friend]get_type(&this, p);

	public HRESULT get_qualifier(BSTR* p) mut => VT.[Friend]get_qualifier(&this, p);

	public HRESULT get_reason(int32* p) mut => VT.[Friend]get_reason(&this, p);

	public HRESULT get_x(int32* p) mut => VT.[Friend]get_x(&this, p);

	public HRESULT get_y(int32* p) mut => VT.[Friend]get_y(&this, p);

	public HRESULT get_clientX(int32* p) mut => VT.[Friend]get_clientX(&this, p);

	public HRESULT get_clientY(int32* p) mut => VT.[Friend]get_clientY(&this, p);

	public HRESULT get_offsetX(int32* p) mut => VT.[Friend]get_offsetX(&this, p);

	public HRESULT get_offsetY(int32* p) mut => VT.[Friend]get_offsetY(&this, p);

	public HRESULT get_screenX(int32* p) mut => VT.[Friend]get_screenX(&this, p);

	public HRESULT get_screenY(int32* p) mut => VT.[Friend]get_screenY(&this, p);

	public HRESULT get_srcFilter(IDispatch** p) mut => VT.[Friend]get_srcFilter(&this, p);
}

[CRepr]struct IElementBehaviorSite : IUnknown
{
	public new const Guid IID = .(0x3050f427, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IUnknown.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IHTMLElement** ppElement) GetElement;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 lEvent) RegisterNotification;
	}


	public HRESULT GetElement(IHTMLElement** ppElement) mut => VT.[Friend]GetElement(&this, ppElement);

	public HRESULT RegisterNotification(int32 lEvent) mut => VT.[Friend]RegisterNotification(&this, lEvent);
}

[CRepr]struct IElementBehavior : IUnknown
{
	public new const Guid IID = .(0x3050f425, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IUnknown.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IElementBehaviorSite* pBehaviorSite) Init;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 lEvent, VARIANT* pVar) Notify;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self) Detach;
	}


	public HRESULT Init(IElementBehaviorSite* pBehaviorSite) mut => VT.[Friend]Init(&this, pBehaviorSite);

	public HRESULT Notify(int32 lEvent, VARIANT* pVar) mut => VT.[Friend]Notify(&this, lEvent, pVar);

	public HRESULT Detach() mut => VT.[Friend]Detach(&this);
}

[CRepr]struct IElementBehaviorFactory : IUnknown
{
	public new const Guid IID = .(0x3050f429, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IUnknown.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR bstrBehavior, BSTR bstrBehaviorUrl, IElementBehaviorSite* pSite, IElementBehavior** ppBehavior) FindBehavior;
	}


	public HRESULT FindBehavior(BSTR bstrBehavior, BSTR bstrBehaviorUrl, IElementBehaviorSite* pSite, IElementBehavior** ppBehavior) mut => VT.[Friend]FindBehavior(&this, bstrBehavior, bstrBehaviorUrl, pSite, ppBehavior);
}

[CRepr]struct IElementBehaviorSiteOM : IUnknown
{
	public new const Guid IID = .(0x3050f489, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IUnknown.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, PWSTR pchEvent, int32 lFlags, int32* plCookie) RegisterEvent;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, PWSTR pchEvent, int32* plCookie) GetEventCookie;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 lCookie, IHTMLEventObj* pEventObject) FireEvent;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IHTMLEventObj** ppEventObject) CreateEventObject;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, PWSTR pchName) RegisterName;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, PWSTR pchUrn) RegisterUrn;
	}


	public HRESULT RegisterEvent(PWSTR pchEvent, int32 lFlags, int32* plCookie) mut => VT.[Friend]RegisterEvent(&this, pchEvent, lFlags, plCookie);

	public HRESULT GetEventCookie(PWSTR pchEvent, int32* plCookie) mut => VT.[Friend]GetEventCookie(&this, pchEvent, plCookie);

	public HRESULT FireEvent(int32 lCookie, IHTMLEventObj* pEventObject) mut => VT.[Friend]FireEvent(&this, lCookie, pEventObject);

	public HRESULT CreateEventObject(IHTMLEventObj** ppEventObject) mut => VT.[Friend]CreateEventObject(&this, ppEventObject);

	public HRESULT RegisterName(PWSTR pchName) mut => VT.[Friend]RegisterName(&this, pchName);

	public HRESULT RegisterUrn(PWSTR pchUrn) mut => VT.[Friend]RegisterUrn(&this, pchUrn);
}

[CRepr]struct IElementBehaviorRender : IUnknown
{
	public new const Guid IID = .(0x3050f4aa, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IUnknown.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, HDC hdc, int32 lLayer, RECT* pRect, IUnknown* pReserved) Draw;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* plRenderInfo) GetRenderInfo;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, POINT* pPoint, IUnknown* pReserved, BOOL* pbHit) HitTestPoint;
	}


	public HRESULT Draw(HDC hdc, int32 lLayer, RECT* pRect, IUnknown* pReserved) mut => VT.[Friend]Draw(&this, hdc, lLayer, pRect, pReserved);

	public HRESULT GetRenderInfo(int32* plRenderInfo) mut => VT.[Friend]GetRenderInfo(&this, plRenderInfo);

	public HRESULT HitTestPoint(POINT* pPoint, IUnknown* pReserved, BOOL* pbHit) mut => VT.[Friend]HitTestPoint(&this, pPoint, pReserved, pbHit);
}

[CRepr]struct IElementBehaviorSiteRender : IUnknown
{
	public new const Guid IID = .(0x3050f4a7, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IUnknown.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, RECT* pRect) Invalidate;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self) InvalidateRenderInfo;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self) InvalidateStyle;
	}


	public HRESULT Invalidate(RECT* pRect) mut => VT.[Friend]Invalidate(&this, pRect);

	public HRESULT InvalidateRenderInfo() mut => VT.[Friend]InvalidateRenderInfo(&this);

	public HRESULT InvalidateStyle() mut => VT.[Friend]InvalidateStyle(&this);
}

[CRepr]struct IDOMEvent : IDispatch
{
	public new const Guid IID = .(0x305104ba, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16* p) get_bubbles;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16* p) get_cancelable;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IEventTarget** p) get_currentTarget;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16* p) get_defaultPrevented;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint16* p) get_eventPhase;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IEventTarget** p) get_target;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint64* p) get_timeStamp;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_type;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR eventType, int16 canBubble, int16 cancelable) initEvent;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self) preventDefault;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self) stopPropagation;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self) stopImmediatePropagation;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16* p) get_isTrusted;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16 v) put_cancelBubble;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16* p) get_cancelBubble;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IHTMLElement** p) get_srcElement;
	}


	public HRESULT get_bubbles(int16* p) mut => VT.[Friend]get_bubbles(&this, p);

	public HRESULT get_cancelable(int16* p) mut => VT.[Friend]get_cancelable(&this, p);

	public HRESULT get_currentTarget(IEventTarget** p) mut => VT.[Friend]get_currentTarget(&this, p);

	public HRESULT get_defaultPrevented(int16* p) mut => VT.[Friend]get_defaultPrevented(&this, p);

	public HRESULT get_eventPhase(uint16* p) mut => VT.[Friend]get_eventPhase(&this, p);

	public HRESULT get_target(IEventTarget** p) mut => VT.[Friend]get_target(&this, p);

	public HRESULT get_timeStamp(uint64* p) mut => VT.[Friend]get_timeStamp(&this, p);

	public HRESULT get_type(BSTR* p) mut => VT.[Friend]get_type(&this, p);

	public HRESULT initEvent(BSTR eventType, int16 canBubble, int16 cancelable) mut => VT.[Friend]initEvent(&this, eventType, canBubble, cancelable);

	public HRESULT preventDefault() mut => VT.[Friend]preventDefault(&this);

	public HRESULT stopPropagation() mut => VT.[Friend]stopPropagation(&this);

	public HRESULT stopImmediatePropagation() mut => VT.[Friend]stopImmediatePropagation(&this);

	public HRESULT get_isTrusted(int16* p) mut => VT.[Friend]get_isTrusted(&this, p);

	public HRESULT put_cancelBubble(int16 v) mut => VT.[Friend]put_cancelBubble(&this, v);

	public HRESULT get_cancelBubble(int16* p) mut => VT.[Friend]get_cancelBubble(&this, p);

	public HRESULT get_srcElement(IHTMLElement** p) mut => VT.[Friend]get_srcElement(&this, p);
}

[CRepr]struct IHTMLDOMConstructor : IDispatch
{
	public new const Guid IID = .(0x3051049b, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IDispatch** p) get_constructor;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR propname, VARIANT* ppDispHandler) LookupGetter;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR propname, VARIANT* ppDispHandler) LookupSetter;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR propname, VARIANT* pdispHandler) DefineGetter;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR propname, VARIANT* pdispHandler) DefineSetter;
	}


	public HRESULT get_constructor(IDispatch** p) mut => VT.[Friend]get_constructor(&this, p);

	public HRESULT LookupGetter(BSTR propname, VARIANT* ppDispHandler) mut => VT.[Friend]LookupGetter(&this, propname, ppDispHandler);

	public HRESULT LookupSetter(BSTR propname, VARIANT* ppDispHandler) mut => VT.[Friend]LookupSetter(&this, propname, ppDispHandler);

	public HRESULT DefineGetter(BSTR propname, VARIANT* pdispHandler) mut => VT.[Friend]DefineGetter(&this, propname, pdispHandler);

	public HRESULT DefineSetter(BSTR propname, VARIANT* pdispHandler) mut => VT.[Friend]DefineSetter(&this, propname, pdispHandler);
}

[CRepr]struct IHTMLStyleSheetRule : IDispatch
{
	public new const Guid IID = .(0x3050f357, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_selectorText;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_selectorText;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IHTMLRuleStyle** p) get_style;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16* p) get_readOnly;
	}


	public HRESULT put_selectorText(BSTR v) mut => VT.[Friend]put_selectorText(&this, v);

	public HRESULT get_selectorText(BSTR* p) mut => VT.[Friend]get_selectorText(&this, p);

	public HRESULT get_style(IHTMLRuleStyle** p) mut => VT.[Friend]get_style(&this, p);

	public HRESULT get_readOnly(int16* p) mut => VT.[Friend]get_readOnly(&this, p);
}

[CRepr]struct IHTMLCSSStyleDeclaration : IDispatch
{
	public new const Guid IID = .(0x30510740, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* p) get_length;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_parentRule;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR bstrPropertyName, BSTR* pbstrPropertyValue) getPropertyValue;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR bstrPropertyName, BSTR* pbstrPropertyPriority) getPropertyPriority;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR bstrPropertyName, BSTR* pbstrPropertyValue) removeProperty;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR bstrPropertyName, VARIANT* pvarPropertyValue, VARIANT* pvarPropertyPriority) setProperty;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 index, BSTR* pbstrPropertyName) item;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_fontFamily;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_fontFamily;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_fontStyle;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_fontStyle;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_fontVariant;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_fontVariant;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_fontWeight;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_fontWeight;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_fontSize;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_fontSize;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_font;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_font;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_color;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_color;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_background;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_background;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_backgroundColor;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_backgroundColor;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_backgroundImage;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_backgroundImage;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_backgroundRepeat;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_backgroundRepeat;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_backgroundAttachment;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_backgroundAttachment;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_backgroundPosition;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_backgroundPosition;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_backgroundPositionX;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_backgroundPositionX;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_backgroundPositionY;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_backgroundPositionY;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_wordSpacing;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_wordSpacing;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_letterSpacing;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_letterSpacing;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_textDecoration;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_textDecoration;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_verticalAlign;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_verticalAlign;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_textTransform;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_textTransform;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_textAlign;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_textAlign;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_textIndent;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_textIndent;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_lineHeight;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_lineHeight;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_marginTop;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_marginTop;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_marginRight;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_marginRight;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_marginBottom;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_marginBottom;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_marginLeft;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_marginLeft;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_margin;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_margin;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_paddingTop;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_paddingTop;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_paddingRight;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_paddingRight;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_paddingBottom;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_paddingBottom;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_paddingLeft;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_paddingLeft;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_padding;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_padding;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_border;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_border;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_borderTop;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_borderTop;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_borderRight;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_borderRight;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_borderBottom;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_borderBottom;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_borderLeft;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_borderLeft;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_borderColor;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_borderColor;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_borderTopColor;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_borderTopColor;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_borderRightColor;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_borderRightColor;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_borderBottomColor;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_borderBottomColor;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_borderLeftColor;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_borderLeftColor;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_borderWidth;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_borderWidth;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_borderTopWidth;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_borderTopWidth;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_borderRightWidth;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_borderRightWidth;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_borderBottomWidth;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_borderBottomWidth;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_borderLeftWidth;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_borderLeftWidth;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_borderStyle;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_borderStyle;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_borderTopStyle;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_borderTopStyle;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_borderRightStyle;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_borderRightStyle;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_borderBottomStyle;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_borderBottomStyle;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_borderLeftStyle;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_borderLeftStyle;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_width;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_width;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_height;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_height;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_styleFloat;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_styleFloat;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_clear;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_clear;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_display;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_display;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_visibility;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_visibility;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_listStyleType;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_listStyleType;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_listStylePosition;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_listStylePosition;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_listStyleImage;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_listStyleImage;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_listStyle;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_listStyle;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_whiteSpace;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_whiteSpace;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_top;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_top;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_left;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_left;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_zIndex;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_zIndex;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_overflow;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_overflow;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_pageBreakBefore;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_pageBreakBefore;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_pageBreakAfter;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_pageBreakAfter;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_cssText;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_cssText;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_cursor;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_cursor;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_clip;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_clip;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_filter;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_filter;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_tableLayout;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_tableLayout;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_borderCollapse;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_borderCollapse;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_direction;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_direction;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_behavior;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_behavior;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_position;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_position;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_unicodeBidi;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_unicodeBidi;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_bottom;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_bottom;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_right;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_right;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_imeMode;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_imeMode;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_rubyAlign;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_rubyAlign;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_rubyPosition;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_rubyPosition;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_rubyOverhang;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_rubyOverhang;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_layoutGridChar;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_layoutGridChar;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_layoutGridLine;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_layoutGridLine;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_layoutGridMode;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_layoutGridMode;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_layoutGridType;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_layoutGridType;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_layoutGrid;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_layoutGrid;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_textAutospace;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_textAutospace;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_wordBreak;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_wordBreak;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_lineBreak;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_lineBreak;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_textJustify;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_textJustify;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_textJustifyTrim;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_textJustifyTrim;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_textKashida;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_textKashida;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_overflowX;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_overflowX;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_overflowY;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_overflowY;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_accelerator;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_accelerator;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_layoutFlow;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_layoutFlow;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_zoom;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_zoom;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_wordWrap;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_wordWrap;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_textUnderlinePosition;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_textUnderlinePosition;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_scrollbarBaseColor;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_scrollbarBaseColor;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_scrollbarFaceColor;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_scrollbarFaceColor;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_scrollbar3dLightColor;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_scrollbar3dLightColor;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_scrollbarShadowColor;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_scrollbarShadowColor;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_scrollbarHighlightColor;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_scrollbarHighlightColor;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_scrollbarDarkShadowColor;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_scrollbarDarkShadowColor;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_scrollbarArrowColor;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_scrollbarArrowColor;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_scrollbarTrackColor;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_scrollbarTrackColor;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_writingMode;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_writingMode;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_textAlignLast;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_textAlignLast;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_textKashidaSpace;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_textKashidaSpace;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_textOverflow;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_textOverflow;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_minHeight;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_minHeight;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_msInterpolationMode;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_msInterpolationMode;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_maxHeight;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_maxHeight;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_minWidth;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_minWidth;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_maxWidth;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_maxWidth;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_content;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_content;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_captionSide;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_captionSide;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_counterIncrement;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_counterIncrement;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_counterReset;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_counterReset;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_outline;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_outline;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_outlineWidth;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_outlineWidth;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_outlineStyle;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_outlineStyle;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_outlineColor;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_outlineColor;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_boxSizing;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_boxSizing;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_borderSpacing;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_borderSpacing;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_orphans;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_orphans;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_widows;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_widows;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_pageBreakInside;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_pageBreakInside;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_emptyCells;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_emptyCells;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_msBlockProgression;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_msBlockProgression;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_quotes;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_quotes;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_alignmentBaseline;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_alignmentBaseline;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_baselineShift;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_baselineShift;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_dominantBaseline;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_dominantBaseline;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_fontSizeAdjust;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_fontSizeAdjust;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_fontStretch;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_fontStretch;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_opacity;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_opacity;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_clipPath;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_clipPath;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_clipRule;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_clipRule;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_fill;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_fill;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_fillOpacity;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_fillOpacity;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_fillRule;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_fillRule;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_kerning;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_kerning;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_marker;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_marker;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_markerEnd;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_markerEnd;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_markerMid;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_markerMid;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_markerStart;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_markerStart;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_mask;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_mask;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_pointerEvents;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_pointerEvents;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_stopColor;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_stopColor;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_stopOpacity;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_stopOpacity;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_stroke;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_stroke;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_strokeDasharray;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_strokeDasharray;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_strokeDashoffset;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_strokeDashoffset;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_strokeLinecap;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_strokeLinecap;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_strokeLinejoin;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_strokeLinejoin;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_strokeMiterlimit;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_strokeMiterlimit;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_strokeOpacity;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_strokeOpacity;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_strokeWidth;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_strokeWidth;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_textAnchor;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_textAnchor;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_glyphOrientationHorizontal;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_glyphOrientationHorizontal;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_glyphOrientationVertical;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_glyphOrientationVertical;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_borderRadius;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_borderRadius;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_borderTopLeftRadius;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_borderTopLeftRadius;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_borderTopRightRadius;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_borderTopRightRadius;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_borderBottomRightRadius;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_borderBottomRightRadius;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_borderBottomLeftRadius;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_borderBottomLeftRadius;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_clipTop;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_clipTop;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_clipRight;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_clipRight;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_clipBottom;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_clipLeft;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_clipLeft;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_cssFloat;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_cssFloat;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_backgroundClip;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_backgroundClip;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_backgroundOrigin;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_backgroundOrigin;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_backgroundSize;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_backgroundSize;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_boxShadow;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_boxShadow;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_msTransform;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_msTransform;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_msTransformOrigin;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_msTransformOrigin;
	}


	public HRESULT get_length(int32* p) mut => VT.[Friend]get_length(&this, p);

	public HRESULT get_parentRule(VARIANT* p) mut => VT.[Friend]get_parentRule(&this, p);

	public HRESULT getPropertyValue(BSTR bstrPropertyName, BSTR* pbstrPropertyValue) mut => VT.[Friend]getPropertyValue(&this, bstrPropertyName, pbstrPropertyValue);

	public HRESULT getPropertyPriority(BSTR bstrPropertyName, BSTR* pbstrPropertyPriority) mut => VT.[Friend]getPropertyPriority(&this, bstrPropertyName, pbstrPropertyPriority);

	public HRESULT removeProperty(BSTR bstrPropertyName, BSTR* pbstrPropertyValue) mut => VT.[Friend]removeProperty(&this, bstrPropertyName, pbstrPropertyValue);

	public HRESULT setProperty(BSTR bstrPropertyName, VARIANT* pvarPropertyValue, VARIANT* pvarPropertyPriority) mut => VT.[Friend]setProperty(&this, bstrPropertyName, pvarPropertyValue, pvarPropertyPriority);

	public HRESULT item(int32 index, BSTR* pbstrPropertyName) mut => VT.[Friend]item(&this, index, pbstrPropertyName);

	public HRESULT put_fontFamily(BSTR v) mut => VT.[Friend]put_fontFamily(&this, v);

	public HRESULT get_fontFamily(BSTR* p) mut => VT.[Friend]get_fontFamily(&this, p);

	public HRESULT put_fontStyle(BSTR v) mut => VT.[Friend]put_fontStyle(&this, v);

	public HRESULT get_fontStyle(BSTR* p) mut => VT.[Friend]get_fontStyle(&this, p);

	public HRESULT put_fontVariant(BSTR v) mut => VT.[Friend]put_fontVariant(&this, v);

	public HRESULT get_fontVariant(BSTR* p) mut => VT.[Friend]get_fontVariant(&this, p);

	public HRESULT put_fontWeight(BSTR v) mut => VT.[Friend]put_fontWeight(&this, v);

	public HRESULT get_fontWeight(BSTR* p) mut => VT.[Friend]get_fontWeight(&this, p);

	public HRESULT put_fontSize(VARIANT v) mut => VT.[Friend]put_fontSize(&this, v);

	public HRESULT get_fontSize(VARIANT* p) mut => VT.[Friend]get_fontSize(&this, p);

	public HRESULT put_font(BSTR v) mut => VT.[Friend]put_font(&this, v);

	public HRESULT get_font(BSTR* p) mut => VT.[Friend]get_font(&this, p);

	public HRESULT put_color(VARIANT v) mut => VT.[Friend]put_color(&this, v);

	public HRESULT get_color(VARIANT* p) mut => VT.[Friend]get_color(&this, p);

	public HRESULT put_background(BSTR v) mut => VT.[Friend]put_background(&this, v);

	public HRESULT get_background(BSTR* p) mut => VT.[Friend]get_background(&this, p);

	public HRESULT put_backgroundColor(VARIANT v) mut => VT.[Friend]put_backgroundColor(&this, v);

	public HRESULT get_backgroundColor(VARIANT* p) mut => VT.[Friend]get_backgroundColor(&this, p);

	public HRESULT put_backgroundImage(BSTR v) mut => VT.[Friend]put_backgroundImage(&this, v);

	public HRESULT get_backgroundImage(BSTR* p) mut => VT.[Friend]get_backgroundImage(&this, p);

	public HRESULT put_backgroundRepeat(BSTR v) mut => VT.[Friend]put_backgroundRepeat(&this, v);

	public HRESULT get_backgroundRepeat(BSTR* p) mut => VT.[Friend]get_backgroundRepeat(&this, p);

	public HRESULT put_backgroundAttachment(BSTR v) mut => VT.[Friend]put_backgroundAttachment(&this, v);

	public HRESULT get_backgroundAttachment(BSTR* p) mut => VT.[Friend]get_backgroundAttachment(&this, p);

	public HRESULT put_backgroundPosition(BSTR v) mut => VT.[Friend]put_backgroundPosition(&this, v);

	public HRESULT get_backgroundPosition(BSTR* p) mut => VT.[Friend]get_backgroundPosition(&this, p);

	public HRESULT put_backgroundPositionX(VARIANT v) mut => VT.[Friend]put_backgroundPositionX(&this, v);

	public HRESULT get_backgroundPositionX(VARIANT* p) mut => VT.[Friend]get_backgroundPositionX(&this, p);

	public HRESULT put_backgroundPositionY(VARIANT v) mut => VT.[Friend]put_backgroundPositionY(&this, v);

	public HRESULT get_backgroundPositionY(VARIANT* p) mut => VT.[Friend]get_backgroundPositionY(&this, p);

	public HRESULT put_wordSpacing(VARIANT v) mut => VT.[Friend]put_wordSpacing(&this, v);

	public HRESULT get_wordSpacing(VARIANT* p) mut => VT.[Friend]get_wordSpacing(&this, p);

	public HRESULT put_letterSpacing(VARIANT v) mut => VT.[Friend]put_letterSpacing(&this, v);

	public HRESULT get_letterSpacing(VARIANT* p) mut => VT.[Friend]get_letterSpacing(&this, p);

	public HRESULT put_textDecoration(BSTR v) mut => VT.[Friend]put_textDecoration(&this, v);

	public HRESULT get_textDecoration(BSTR* p) mut => VT.[Friend]get_textDecoration(&this, p);

	public HRESULT put_verticalAlign(VARIANT v) mut => VT.[Friend]put_verticalAlign(&this, v);

	public HRESULT get_verticalAlign(VARIANT* p) mut => VT.[Friend]get_verticalAlign(&this, p);

	public HRESULT put_textTransform(BSTR v) mut => VT.[Friend]put_textTransform(&this, v);

	public HRESULT get_textTransform(BSTR* p) mut => VT.[Friend]get_textTransform(&this, p);

	public HRESULT put_textAlign(BSTR v) mut => VT.[Friend]put_textAlign(&this, v);

	public HRESULT get_textAlign(BSTR* p) mut => VT.[Friend]get_textAlign(&this, p);

	public HRESULT put_textIndent(VARIANT v) mut => VT.[Friend]put_textIndent(&this, v);

	public HRESULT get_textIndent(VARIANT* p) mut => VT.[Friend]get_textIndent(&this, p);

	public HRESULT put_lineHeight(VARIANT v) mut => VT.[Friend]put_lineHeight(&this, v);

	public HRESULT get_lineHeight(VARIANT* p) mut => VT.[Friend]get_lineHeight(&this, p);

	public HRESULT put_marginTop(VARIANT v) mut => VT.[Friend]put_marginTop(&this, v);

	public HRESULT get_marginTop(VARIANT* p) mut => VT.[Friend]get_marginTop(&this, p);

	public HRESULT put_marginRight(VARIANT v) mut => VT.[Friend]put_marginRight(&this, v);

	public HRESULT get_marginRight(VARIANT* p) mut => VT.[Friend]get_marginRight(&this, p);

	public HRESULT put_marginBottom(VARIANT v) mut => VT.[Friend]put_marginBottom(&this, v);

	public HRESULT get_marginBottom(VARIANT* p) mut => VT.[Friend]get_marginBottom(&this, p);

	public HRESULT put_marginLeft(VARIANT v) mut => VT.[Friend]put_marginLeft(&this, v);

	public HRESULT get_marginLeft(VARIANT* p) mut => VT.[Friend]get_marginLeft(&this, p);

	public HRESULT put_margin(BSTR v) mut => VT.[Friend]put_margin(&this, v);

	public HRESULT get_margin(BSTR* p) mut => VT.[Friend]get_margin(&this, p);

	public HRESULT put_paddingTop(VARIANT v) mut => VT.[Friend]put_paddingTop(&this, v);

	public HRESULT get_paddingTop(VARIANT* p) mut => VT.[Friend]get_paddingTop(&this, p);

	public HRESULT put_paddingRight(VARIANT v) mut => VT.[Friend]put_paddingRight(&this, v);

	public HRESULT get_paddingRight(VARIANT* p) mut => VT.[Friend]get_paddingRight(&this, p);

	public HRESULT put_paddingBottom(VARIANT v) mut => VT.[Friend]put_paddingBottom(&this, v);

	public HRESULT get_paddingBottom(VARIANT* p) mut => VT.[Friend]get_paddingBottom(&this, p);

	public HRESULT put_paddingLeft(VARIANT v) mut => VT.[Friend]put_paddingLeft(&this, v);

	public HRESULT get_paddingLeft(VARIANT* p) mut => VT.[Friend]get_paddingLeft(&this, p);

	public HRESULT put_padding(BSTR v) mut => VT.[Friend]put_padding(&this, v);

	public HRESULT get_padding(BSTR* p) mut => VT.[Friend]get_padding(&this, p);

	public HRESULT put_border(BSTR v) mut => VT.[Friend]put_border(&this, v);

	public HRESULT get_border(BSTR* p) mut => VT.[Friend]get_border(&this, p);

	public HRESULT put_borderTop(BSTR v) mut => VT.[Friend]put_borderTop(&this, v);

	public HRESULT get_borderTop(BSTR* p) mut => VT.[Friend]get_borderTop(&this, p);

	public HRESULT put_borderRight(BSTR v) mut => VT.[Friend]put_borderRight(&this, v);

	public HRESULT get_borderRight(BSTR* p) mut => VT.[Friend]get_borderRight(&this, p);

	public HRESULT put_borderBottom(BSTR v) mut => VT.[Friend]put_borderBottom(&this, v);

	public HRESULT get_borderBottom(BSTR* p) mut => VT.[Friend]get_borderBottom(&this, p);

	public HRESULT put_borderLeft(BSTR v) mut => VT.[Friend]put_borderLeft(&this, v);

	public HRESULT get_borderLeft(BSTR* p) mut => VT.[Friend]get_borderLeft(&this, p);

	public HRESULT put_borderColor(BSTR v) mut => VT.[Friend]put_borderColor(&this, v);

	public HRESULT get_borderColor(BSTR* p) mut => VT.[Friend]get_borderColor(&this, p);

	public HRESULT put_borderTopColor(VARIANT v) mut => VT.[Friend]put_borderTopColor(&this, v);

	public HRESULT get_borderTopColor(VARIANT* p) mut => VT.[Friend]get_borderTopColor(&this, p);

	public HRESULT put_borderRightColor(VARIANT v) mut => VT.[Friend]put_borderRightColor(&this, v);

	public HRESULT get_borderRightColor(VARIANT* p) mut => VT.[Friend]get_borderRightColor(&this, p);

	public HRESULT put_borderBottomColor(VARIANT v) mut => VT.[Friend]put_borderBottomColor(&this, v);

	public HRESULT get_borderBottomColor(VARIANT* p) mut => VT.[Friend]get_borderBottomColor(&this, p);

	public HRESULT put_borderLeftColor(VARIANT v) mut => VT.[Friend]put_borderLeftColor(&this, v);

	public HRESULT get_borderLeftColor(VARIANT* p) mut => VT.[Friend]get_borderLeftColor(&this, p);

	public HRESULT put_borderWidth(BSTR v) mut => VT.[Friend]put_borderWidth(&this, v);

	public HRESULT get_borderWidth(BSTR* p) mut => VT.[Friend]get_borderWidth(&this, p);

	public HRESULT put_borderTopWidth(VARIANT v) mut => VT.[Friend]put_borderTopWidth(&this, v);

	public HRESULT get_borderTopWidth(VARIANT* p) mut => VT.[Friend]get_borderTopWidth(&this, p);

	public HRESULT put_borderRightWidth(VARIANT v) mut => VT.[Friend]put_borderRightWidth(&this, v);

	public HRESULT get_borderRightWidth(VARIANT* p) mut => VT.[Friend]get_borderRightWidth(&this, p);

	public HRESULT put_borderBottomWidth(VARIANT v) mut => VT.[Friend]put_borderBottomWidth(&this, v);

	public HRESULT get_borderBottomWidth(VARIANT* p) mut => VT.[Friend]get_borderBottomWidth(&this, p);

	public HRESULT put_borderLeftWidth(VARIANT v) mut => VT.[Friend]put_borderLeftWidth(&this, v);

	public HRESULT get_borderLeftWidth(VARIANT* p) mut => VT.[Friend]get_borderLeftWidth(&this, p);

	public HRESULT put_borderStyle(BSTR v) mut => VT.[Friend]put_borderStyle(&this, v);

	public HRESULT get_borderStyle(BSTR* p) mut => VT.[Friend]get_borderStyle(&this, p);

	public HRESULT put_borderTopStyle(BSTR v) mut => VT.[Friend]put_borderTopStyle(&this, v);

	public HRESULT get_borderTopStyle(BSTR* p) mut => VT.[Friend]get_borderTopStyle(&this, p);

	public HRESULT put_borderRightStyle(BSTR v) mut => VT.[Friend]put_borderRightStyle(&this, v);

	public HRESULT get_borderRightStyle(BSTR* p) mut => VT.[Friend]get_borderRightStyle(&this, p);

	public HRESULT put_borderBottomStyle(BSTR v) mut => VT.[Friend]put_borderBottomStyle(&this, v);

	public HRESULT get_borderBottomStyle(BSTR* p) mut => VT.[Friend]get_borderBottomStyle(&this, p);

	public HRESULT put_borderLeftStyle(BSTR v) mut => VT.[Friend]put_borderLeftStyle(&this, v);

	public HRESULT get_borderLeftStyle(BSTR* p) mut => VT.[Friend]get_borderLeftStyle(&this, p);

	public HRESULT put_width(VARIANT v) mut => VT.[Friend]put_width(&this, v);

	public HRESULT get_width(VARIANT* p) mut => VT.[Friend]get_width(&this, p);

	public HRESULT put_height(VARIANT v) mut => VT.[Friend]put_height(&this, v);

	public HRESULT get_height(VARIANT* p) mut => VT.[Friend]get_height(&this, p);

	public HRESULT put_styleFloat(BSTR v) mut => VT.[Friend]put_styleFloat(&this, v);

	public HRESULT get_styleFloat(BSTR* p) mut => VT.[Friend]get_styleFloat(&this, p);

	public HRESULT put_clear(BSTR v) mut => VT.[Friend]put_clear(&this, v);

	public HRESULT get_clear(BSTR* p) mut => VT.[Friend]get_clear(&this, p);

	public HRESULT put_display(BSTR v) mut => VT.[Friend]put_display(&this, v);

	public HRESULT get_display(BSTR* p) mut => VT.[Friend]get_display(&this, p);

	public HRESULT put_visibility(BSTR v) mut => VT.[Friend]put_visibility(&this, v);

	public HRESULT get_visibility(BSTR* p) mut => VT.[Friend]get_visibility(&this, p);

	public HRESULT put_listStyleType(BSTR v) mut => VT.[Friend]put_listStyleType(&this, v);

	public HRESULT get_listStyleType(BSTR* p) mut => VT.[Friend]get_listStyleType(&this, p);

	public HRESULT put_listStylePosition(BSTR v) mut => VT.[Friend]put_listStylePosition(&this, v);

	public HRESULT get_listStylePosition(BSTR* p) mut => VT.[Friend]get_listStylePosition(&this, p);

	public HRESULT put_listStyleImage(BSTR v) mut => VT.[Friend]put_listStyleImage(&this, v);

	public HRESULT get_listStyleImage(BSTR* p) mut => VT.[Friend]get_listStyleImage(&this, p);

	public HRESULT put_listStyle(BSTR v) mut => VT.[Friend]put_listStyle(&this, v);

	public HRESULT get_listStyle(BSTR* p) mut => VT.[Friend]get_listStyle(&this, p);

	public HRESULT put_whiteSpace(BSTR v) mut => VT.[Friend]put_whiteSpace(&this, v);

	public HRESULT get_whiteSpace(BSTR* p) mut => VT.[Friend]get_whiteSpace(&this, p);

	public HRESULT put_top(VARIANT v) mut => VT.[Friend]put_top(&this, v);

	public HRESULT get_top(VARIANT* p) mut => VT.[Friend]get_top(&this, p);

	public HRESULT put_left(VARIANT v) mut => VT.[Friend]put_left(&this, v);

	public HRESULT get_left(VARIANT* p) mut => VT.[Friend]get_left(&this, p);

	public HRESULT put_zIndex(VARIANT v) mut => VT.[Friend]put_zIndex(&this, v);

	public HRESULT get_zIndex(VARIANT* p) mut => VT.[Friend]get_zIndex(&this, p);

	public HRESULT put_overflow(BSTR v) mut => VT.[Friend]put_overflow(&this, v);

	public HRESULT get_overflow(BSTR* p) mut => VT.[Friend]get_overflow(&this, p);

	public HRESULT put_pageBreakBefore(BSTR v) mut => VT.[Friend]put_pageBreakBefore(&this, v);

	public HRESULT get_pageBreakBefore(BSTR* p) mut => VT.[Friend]get_pageBreakBefore(&this, p);

	public HRESULT put_pageBreakAfter(BSTR v) mut => VT.[Friend]put_pageBreakAfter(&this, v);

	public HRESULT get_pageBreakAfter(BSTR* p) mut => VT.[Friend]get_pageBreakAfter(&this, p);

	public HRESULT put_cssText(BSTR v) mut => VT.[Friend]put_cssText(&this, v);

	public HRESULT get_cssText(BSTR* p) mut => VT.[Friend]get_cssText(&this, p);

	public HRESULT put_cursor(BSTR v) mut => VT.[Friend]put_cursor(&this, v);

	public HRESULT get_cursor(BSTR* p) mut => VT.[Friend]get_cursor(&this, p);

	public HRESULT put_clip(BSTR v) mut => VT.[Friend]put_clip(&this, v);

	public HRESULT get_clip(BSTR* p) mut => VT.[Friend]get_clip(&this, p);

	public HRESULT put_filter(BSTR v) mut => VT.[Friend]put_filter(&this, v);

	public HRESULT get_filter(BSTR* p) mut => VT.[Friend]get_filter(&this, p);

	public HRESULT put_tableLayout(BSTR v) mut => VT.[Friend]put_tableLayout(&this, v);

	public HRESULT get_tableLayout(BSTR* p) mut => VT.[Friend]get_tableLayout(&this, p);

	public HRESULT put_borderCollapse(BSTR v) mut => VT.[Friend]put_borderCollapse(&this, v);

	public HRESULT get_borderCollapse(BSTR* p) mut => VT.[Friend]get_borderCollapse(&this, p);

	public HRESULT put_direction(BSTR v) mut => VT.[Friend]put_direction(&this, v);

	public HRESULT get_direction(BSTR* p) mut => VT.[Friend]get_direction(&this, p);

	public HRESULT put_behavior(BSTR v) mut => VT.[Friend]put_behavior(&this, v);

	public HRESULT get_behavior(BSTR* p) mut => VT.[Friend]get_behavior(&this, p);

	public HRESULT put_position(BSTR v) mut => VT.[Friend]put_position(&this, v);

	public HRESULT get_position(BSTR* p) mut => VT.[Friend]get_position(&this, p);

	public HRESULT put_unicodeBidi(BSTR v) mut => VT.[Friend]put_unicodeBidi(&this, v);

	public HRESULT get_unicodeBidi(BSTR* p) mut => VT.[Friend]get_unicodeBidi(&this, p);

	public HRESULT put_bottom(VARIANT v) mut => VT.[Friend]put_bottom(&this, v);

	public HRESULT get_bottom(VARIANT* p) mut => VT.[Friend]get_bottom(&this, p);

	public HRESULT put_right(VARIANT v) mut => VT.[Friend]put_right(&this, v);

	public HRESULT get_right(VARIANT* p) mut => VT.[Friend]get_right(&this, p);

	public HRESULT put_imeMode(BSTR v) mut => VT.[Friend]put_imeMode(&this, v);

	public HRESULT get_imeMode(BSTR* p) mut => VT.[Friend]get_imeMode(&this, p);

	public HRESULT put_rubyAlign(BSTR v) mut => VT.[Friend]put_rubyAlign(&this, v);

	public HRESULT get_rubyAlign(BSTR* p) mut => VT.[Friend]get_rubyAlign(&this, p);

	public HRESULT put_rubyPosition(BSTR v) mut => VT.[Friend]put_rubyPosition(&this, v);

	public HRESULT get_rubyPosition(BSTR* p) mut => VT.[Friend]get_rubyPosition(&this, p);

	public HRESULT put_rubyOverhang(BSTR v) mut => VT.[Friend]put_rubyOverhang(&this, v);

	public HRESULT get_rubyOverhang(BSTR* p) mut => VT.[Friend]get_rubyOverhang(&this, p);

	public HRESULT put_layoutGridChar(VARIANT v) mut => VT.[Friend]put_layoutGridChar(&this, v);

	public HRESULT get_layoutGridChar(VARIANT* p) mut => VT.[Friend]get_layoutGridChar(&this, p);

	public HRESULT put_layoutGridLine(VARIANT v) mut => VT.[Friend]put_layoutGridLine(&this, v);

	public HRESULT get_layoutGridLine(VARIANT* p) mut => VT.[Friend]get_layoutGridLine(&this, p);

	public HRESULT put_layoutGridMode(BSTR v) mut => VT.[Friend]put_layoutGridMode(&this, v);

	public HRESULT get_layoutGridMode(BSTR* p) mut => VT.[Friend]get_layoutGridMode(&this, p);

	public HRESULT put_layoutGridType(BSTR v) mut => VT.[Friend]put_layoutGridType(&this, v);

	public HRESULT get_layoutGridType(BSTR* p) mut => VT.[Friend]get_layoutGridType(&this, p);

	public HRESULT put_layoutGrid(BSTR v) mut => VT.[Friend]put_layoutGrid(&this, v);

	public HRESULT get_layoutGrid(BSTR* p) mut => VT.[Friend]get_layoutGrid(&this, p);

	public HRESULT put_textAutospace(BSTR v) mut => VT.[Friend]put_textAutospace(&this, v);

	public HRESULT get_textAutospace(BSTR* p) mut => VT.[Friend]get_textAutospace(&this, p);

	public HRESULT put_wordBreak(BSTR v) mut => VT.[Friend]put_wordBreak(&this, v);

	public HRESULT get_wordBreak(BSTR* p) mut => VT.[Friend]get_wordBreak(&this, p);

	public HRESULT put_lineBreak(BSTR v) mut => VT.[Friend]put_lineBreak(&this, v);

	public HRESULT get_lineBreak(BSTR* p) mut => VT.[Friend]get_lineBreak(&this, p);

	public HRESULT put_textJustify(BSTR v) mut => VT.[Friend]put_textJustify(&this, v);

	public HRESULT get_textJustify(BSTR* p) mut => VT.[Friend]get_textJustify(&this, p);

	public HRESULT put_textJustifyTrim(BSTR v) mut => VT.[Friend]put_textJustifyTrim(&this, v);

	public HRESULT get_textJustifyTrim(BSTR* p) mut => VT.[Friend]get_textJustifyTrim(&this, p);

	public HRESULT put_textKashida(VARIANT v) mut => VT.[Friend]put_textKashida(&this, v);

	public HRESULT get_textKashida(VARIANT* p) mut => VT.[Friend]get_textKashida(&this, p);

	public HRESULT put_overflowX(BSTR v) mut => VT.[Friend]put_overflowX(&this, v);

	public HRESULT get_overflowX(BSTR* p) mut => VT.[Friend]get_overflowX(&this, p);

	public HRESULT put_overflowY(BSTR v) mut => VT.[Friend]put_overflowY(&this, v);

	public HRESULT get_overflowY(BSTR* p) mut => VT.[Friend]get_overflowY(&this, p);

	public HRESULT put_accelerator(BSTR v) mut => VT.[Friend]put_accelerator(&this, v);

	public HRESULT get_accelerator(BSTR* p) mut => VT.[Friend]get_accelerator(&this, p);

	public HRESULT put_layoutFlow(BSTR v) mut => VT.[Friend]put_layoutFlow(&this, v);

	public HRESULT get_layoutFlow(BSTR* p) mut => VT.[Friend]get_layoutFlow(&this, p);

	public HRESULT put_zoom(VARIANT v) mut => VT.[Friend]put_zoom(&this, v);

	public HRESULT get_zoom(VARIANT* p) mut => VT.[Friend]get_zoom(&this, p);

	public HRESULT put_wordWrap(BSTR v) mut => VT.[Friend]put_wordWrap(&this, v);

	public HRESULT get_wordWrap(BSTR* p) mut => VT.[Friend]get_wordWrap(&this, p);

	public HRESULT put_textUnderlinePosition(BSTR v) mut => VT.[Friend]put_textUnderlinePosition(&this, v);

	public HRESULT get_textUnderlinePosition(BSTR* p) mut => VT.[Friend]get_textUnderlinePosition(&this, p);

	public HRESULT put_scrollbarBaseColor(VARIANT v) mut => VT.[Friend]put_scrollbarBaseColor(&this, v);

	public HRESULT get_scrollbarBaseColor(VARIANT* p) mut => VT.[Friend]get_scrollbarBaseColor(&this, p);

	public HRESULT put_scrollbarFaceColor(VARIANT v) mut => VT.[Friend]put_scrollbarFaceColor(&this, v);

	public HRESULT get_scrollbarFaceColor(VARIANT* p) mut => VT.[Friend]get_scrollbarFaceColor(&this, p);

	public HRESULT put_scrollbar3dLightColor(VARIANT v) mut => VT.[Friend]put_scrollbar3dLightColor(&this, v);

	public HRESULT get_scrollbar3dLightColor(VARIANT* p) mut => VT.[Friend]get_scrollbar3dLightColor(&this, p);

	public HRESULT put_scrollbarShadowColor(VARIANT v) mut => VT.[Friend]put_scrollbarShadowColor(&this, v);

	public HRESULT get_scrollbarShadowColor(VARIANT* p) mut => VT.[Friend]get_scrollbarShadowColor(&this, p);

	public HRESULT put_scrollbarHighlightColor(VARIANT v) mut => VT.[Friend]put_scrollbarHighlightColor(&this, v);

	public HRESULT get_scrollbarHighlightColor(VARIANT* p) mut => VT.[Friend]get_scrollbarHighlightColor(&this, p);

	public HRESULT put_scrollbarDarkShadowColor(VARIANT v) mut => VT.[Friend]put_scrollbarDarkShadowColor(&this, v);

	public HRESULT get_scrollbarDarkShadowColor(VARIANT* p) mut => VT.[Friend]get_scrollbarDarkShadowColor(&this, p);

	public HRESULT put_scrollbarArrowColor(VARIANT v) mut => VT.[Friend]put_scrollbarArrowColor(&this, v);

	public HRESULT get_scrollbarArrowColor(VARIANT* p) mut => VT.[Friend]get_scrollbarArrowColor(&this, p);

	public HRESULT put_scrollbarTrackColor(VARIANT v) mut => VT.[Friend]put_scrollbarTrackColor(&this, v);

	public HRESULT get_scrollbarTrackColor(VARIANT* p) mut => VT.[Friend]get_scrollbarTrackColor(&this, p);

	public HRESULT put_writingMode(BSTR v) mut => VT.[Friend]put_writingMode(&this, v);

	public HRESULT get_writingMode(BSTR* p) mut => VT.[Friend]get_writingMode(&this, p);

	public HRESULT put_textAlignLast(BSTR v) mut => VT.[Friend]put_textAlignLast(&this, v);

	public HRESULT get_textAlignLast(BSTR* p) mut => VT.[Friend]get_textAlignLast(&this, p);

	public HRESULT put_textKashidaSpace(VARIANT v) mut => VT.[Friend]put_textKashidaSpace(&this, v);

	public HRESULT get_textKashidaSpace(VARIANT* p) mut => VT.[Friend]get_textKashidaSpace(&this, p);

	public HRESULT put_textOverflow(BSTR v) mut => VT.[Friend]put_textOverflow(&this, v);

	public HRESULT get_textOverflow(BSTR* p) mut => VT.[Friend]get_textOverflow(&this, p);

	public HRESULT put_minHeight(VARIANT v) mut => VT.[Friend]put_minHeight(&this, v);

	public HRESULT get_minHeight(VARIANT* p) mut => VT.[Friend]get_minHeight(&this, p);

	public HRESULT put_msInterpolationMode(BSTR v) mut => VT.[Friend]put_msInterpolationMode(&this, v);

	public HRESULT get_msInterpolationMode(BSTR* p) mut => VT.[Friend]get_msInterpolationMode(&this, p);

	public HRESULT put_maxHeight(VARIANT v) mut => VT.[Friend]put_maxHeight(&this, v);

	public HRESULT get_maxHeight(VARIANT* p) mut => VT.[Friend]get_maxHeight(&this, p);

	public HRESULT put_minWidth(VARIANT v) mut => VT.[Friend]put_minWidth(&this, v);

	public HRESULT get_minWidth(VARIANT* p) mut => VT.[Friend]get_minWidth(&this, p);

	public HRESULT put_maxWidth(VARIANT v) mut => VT.[Friend]put_maxWidth(&this, v);

	public HRESULT get_maxWidth(VARIANT* p) mut => VT.[Friend]get_maxWidth(&this, p);

	public HRESULT put_content(BSTR v) mut => VT.[Friend]put_content(&this, v);

	public HRESULT get_content(BSTR* p) mut => VT.[Friend]get_content(&this, p);

	public HRESULT put_captionSide(BSTR v) mut => VT.[Friend]put_captionSide(&this, v);

	public HRESULT get_captionSide(BSTR* p) mut => VT.[Friend]get_captionSide(&this, p);

	public HRESULT put_counterIncrement(BSTR v) mut => VT.[Friend]put_counterIncrement(&this, v);

	public HRESULT get_counterIncrement(BSTR* p) mut => VT.[Friend]get_counterIncrement(&this, p);

	public HRESULT put_counterReset(BSTR v) mut => VT.[Friend]put_counterReset(&this, v);

	public HRESULT get_counterReset(BSTR* p) mut => VT.[Friend]get_counterReset(&this, p);

	public HRESULT put_outline(BSTR v) mut => VT.[Friend]put_outline(&this, v);

	public HRESULT get_outline(BSTR* p) mut => VT.[Friend]get_outline(&this, p);

	public HRESULT put_outlineWidth(VARIANT v) mut => VT.[Friend]put_outlineWidth(&this, v);

	public HRESULT get_outlineWidth(VARIANT* p) mut => VT.[Friend]get_outlineWidth(&this, p);

	public HRESULT put_outlineStyle(BSTR v) mut => VT.[Friend]put_outlineStyle(&this, v);

	public HRESULT get_outlineStyle(BSTR* p) mut => VT.[Friend]get_outlineStyle(&this, p);

	public HRESULT put_outlineColor(VARIANT v) mut => VT.[Friend]put_outlineColor(&this, v);

	public HRESULT get_outlineColor(VARIANT* p) mut => VT.[Friend]get_outlineColor(&this, p);

	public HRESULT put_boxSizing(BSTR v) mut => VT.[Friend]put_boxSizing(&this, v);

	public HRESULT get_boxSizing(BSTR* p) mut => VT.[Friend]get_boxSizing(&this, p);

	public HRESULT put_borderSpacing(BSTR v) mut => VT.[Friend]put_borderSpacing(&this, v);

	public HRESULT get_borderSpacing(BSTR* p) mut => VT.[Friend]get_borderSpacing(&this, p);

	public HRESULT put_orphans(VARIANT v) mut => VT.[Friend]put_orphans(&this, v);

	public HRESULT get_orphans(VARIANT* p) mut => VT.[Friend]get_orphans(&this, p);

	public HRESULT put_widows(VARIANT v) mut => VT.[Friend]put_widows(&this, v);

	public HRESULT get_widows(VARIANT* p) mut => VT.[Friend]get_widows(&this, p);

	public HRESULT put_pageBreakInside(BSTR v) mut => VT.[Friend]put_pageBreakInside(&this, v);

	public HRESULT get_pageBreakInside(BSTR* p) mut => VT.[Friend]get_pageBreakInside(&this, p);

	public HRESULT put_emptyCells(BSTR v) mut => VT.[Friend]put_emptyCells(&this, v);

	public HRESULT get_emptyCells(BSTR* p) mut => VT.[Friend]get_emptyCells(&this, p);

	public HRESULT put_msBlockProgression(BSTR v) mut => VT.[Friend]put_msBlockProgression(&this, v);

	public HRESULT get_msBlockProgression(BSTR* p) mut => VT.[Friend]get_msBlockProgression(&this, p);

	public HRESULT put_quotes(BSTR v) mut => VT.[Friend]put_quotes(&this, v);

	public HRESULT get_quotes(BSTR* p) mut => VT.[Friend]get_quotes(&this, p);

	public HRESULT put_alignmentBaseline(BSTR v) mut => VT.[Friend]put_alignmentBaseline(&this, v);

	public HRESULT get_alignmentBaseline(BSTR* p) mut => VT.[Friend]get_alignmentBaseline(&this, p);

	public HRESULT put_baselineShift(VARIANT v) mut => VT.[Friend]put_baselineShift(&this, v);

	public HRESULT get_baselineShift(VARIANT* p) mut => VT.[Friend]get_baselineShift(&this, p);

	public HRESULT put_dominantBaseline(BSTR v) mut => VT.[Friend]put_dominantBaseline(&this, v);

	public HRESULT get_dominantBaseline(BSTR* p) mut => VT.[Friend]get_dominantBaseline(&this, p);

	public HRESULT put_fontSizeAdjust(VARIANT v) mut => VT.[Friend]put_fontSizeAdjust(&this, v);

	public HRESULT get_fontSizeAdjust(VARIANT* p) mut => VT.[Friend]get_fontSizeAdjust(&this, p);

	public HRESULT put_fontStretch(BSTR v) mut => VT.[Friend]put_fontStretch(&this, v);

	public HRESULT get_fontStretch(BSTR* p) mut => VT.[Friend]get_fontStretch(&this, p);

	public HRESULT put_opacity(VARIANT v) mut => VT.[Friend]put_opacity(&this, v);

	public HRESULT get_opacity(VARIANT* p) mut => VT.[Friend]get_opacity(&this, p);

	public HRESULT put_clipPath(BSTR v) mut => VT.[Friend]put_clipPath(&this, v);

	public HRESULT get_clipPath(BSTR* p) mut => VT.[Friend]get_clipPath(&this, p);

	public HRESULT put_clipRule(BSTR v) mut => VT.[Friend]put_clipRule(&this, v);

	public HRESULT get_clipRule(BSTR* p) mut => VT.[Friend]get_clipRule(&this, p);

	public HRESULT put_fill(BSTR v) mut => VT.[Friend]put_fill(&this, v);

	public HRESULT get_fill(BSTR* p) mut => VT.[Friend]get_fill(&this, p);

	public HRESULT put_fillOpacity(VARIANT v) mut => VT.[Friend]put_fillOpacity(&this, v);

	public HRESULT get_fillOpacity(VARIANT* p) mut => VT.[Friend]get_fillOpacity(&this, p);

	public HRESULT put_fillRule(BSTR v) mut => VT.[Friend]put_fillRule(&this, v);

	public HRESULT get_fillRule(BSTR* p) mut => VT.[Friend]get_fillRule(&this, p);

	public HRESULT put_kerning(VARIANT v) mut => VT.[Friend]put_kerning(&this, v);

	public HRESULT get_kerning(VARIANT* p) mut => VT.[Friend]get_kerning(&this, p);

	public HRESULT put_marker(BSTR v) mut => VT.[Friend]put_marker(&this, v);

	public HRESULT get_marker(BSTR* p) mut => VT.[Friend]get_marker(&this, p);

	public HRESULT put_markerEnd(BSTR v) mut => VT.[Friend]put_markerEnd(&this, v);

	public HRESULT get_markerEnd(BSTR* p) mut => VT.[Friend]get_markerEnd(&this, p);

	public HRESULT put_markerMid(BSTR v) mut => VT.[Friend]put_markerMid(&this, v);

	public HRESULT get_markerMid(BSTR* p) mut => VT.[Friend]get_markerMid(&this, p);

	public HRESULT put_markerStart(BSTR v) mut => VT.[Friend]put_markerStart(&this, v);

	public HRESULT get_markerStart(BSTR* p) mut => VT.[Friend]get_markerStart(&this, p);

	public HRESULT put_mask(BSTR v) mut => VT.[Friend]put_mask(&this, v);

	public HRESULT get_mask(BSTR* p) mut => VT.[Friend]get_mask(&this, p);

	public HRESULT put_pointerEvents(BSTR v) mut => VT.[Friend]put_pointerEvents(&this, v);

	public HRESULT get_pointerEvents(BSTR* p) mut => VT.[Friend]get_pointerEvents(&this, p);

	public HRESULT put_stopColor(VARIANT v) mut => VT.[Friend]put_stopColor(&this, v);

	public HRESULT get_stopColor(VARIANT* p) mut => VT.[Friend]get_stopColor(&this, p);

	public HRESULT put_stopOpacity(VARIANT v) mut => VT.[Friend]put_stopOpacity(&this, v);

	public HRESULT get_stopOpacity(VARIANT* p) mut => VT.[Friend]get_stopOpacity(&this, p);

	public HRESULT put_stroke(BSTR v) mut => VT.[Friend]put_stroke(&this, v);

	public HRESULT get_stroke(BSTR* p) mut => VT.[Friend]get_stroke(&this, p);

	public HRESULT put_strokeDasharray(BSTR v) mut => VT.[Friend]put_strokeDasharray(&this, v);

	public HRESULT get_strokeDasharray(BSTR* p) mut => VT.[Friend]get_strokeDasharray(&this, p);

	public HRESULT put_strokeDashoffset(VARIANT v) mut => VT.[Friend]put_strokeDashoffset(&this, v);

	public HRESULT get_strokeDashoffset(VARIANT* p) mut => VT.[Friend]get_strokeDashoffset(&this, p);

	public HRESULT put_strokeLinecap(BSTR v) mut => VT.[Friend]put_strokeLinecap(&this, v);

	public HRESULT get_strokeLinecap(BSTR* p) mut => VT.[Friend]get_strokeLinecap(&this, p);

	public HRESULT put_strokeLinejoin(BSTR v) mut => VT.[Friend]put_strokeLinejoin(&this, v);

	public HRESULT get_strokeLinejoin(BSTR* p) mut => VT.[Friend]get_strokeLinejoin(&this, p);

	public HRESULT put_strokeMiterlimit(VARIANT v) mut => VT.[Friend]put_strokeMiterlimit(&this, v);

	public HRESULT get_strokeMiterlimit(VARIANT* p) mut => VT.[Friend]get_strokeMiterlimit(&this, p);

	public HRESULT put_strokeOpacity(VARIANT v) mut => VT.[Friend]put_strokeOpacity(&this, v);

	public HRESULT get_strokeOpacity(VARIANT* p) mut => VT.[Friend]get_strokeOpacity(&this, p);

	public HRESULT put_strokeWidth(VARIANT v) mut => VT.[Friend]put_strokeWidth(&this, v);

	public HRESULT get_strokeWidth(VARIANT* p) mut => VT.[Friend]get_strokeWidth(&this, p);

	public HRESULT put_textAnchor(BSTR v) mut => VT.[Friend]put_textAnchor(&this, v);

	public HRESULT get_textAnchor(BSTR* p) mut => VT.[Friend]get_textAnchor(&this, p);

	public HRESULT put_glyphOrientationHorizontal(VARIANT v) mut => VT.[Friend]put_glyphOrientationHorizontal(&this, v);

	public HRESULT get_glyphOrientationHorizontal(VARIANT* p) mut => VT.[Friend]get_glyphOrientationHorizontal(&this, p);

	public HRESULT put_glyphOrientationVertical(VARIANT v) mut => VT.[Friend]put_glyphOrientationVertical(&this, v);

	public HRESULT get_glyphOrientationVertical(VARIANT* p) mut => VT.[Friend]get_glyphOrientationVertical(&this, p);

	public HRESULT put_borderRadius(BSTR v) mut => VT.[Friend]put_borderRadius(&this, v);

	public HRESULT get_borderRadius(BSTR* p) mut => VT.[Friend]get_borderRadius(&this, p);

	public HRESULT put_borderTopLeftRadius(BSTR v) mut => VT.[Friend]put_borderTopLeftRadius(&this, v);

	public HRESULT get_borderTopLeftRadius(BSTR* p) mut => VT.[Friend]get_borderTopLeftRadius(&this, p);

	public HRESULT put_borderTopRightRadius(BSTR v) mut => VT.[Friend]put_borderTopRightRadius(&this, v);

	public HRESULT get_borderTopRightRadius(BSTR* p) mut => VT.[Friend]get_borderTopRightRadius(&this, p);

	public HRESULT put_borderBottomRightRadius(BSTR v) mut => VT.[Friend]put_borderBottomRightRadius(&this, v);

	public HRESULT get_borderBottomRightRadius(BSTR* p) mut => VT.[Friend]get_borderBottomRightRadius(&this, p);

	public HRESULT put_borderBottomLeftRadius(BSTR v) mut => VT.[Friend]put_borderBottomLeftRadius(&this, v);

	public HRESULT get_borderBottomLeftRadius(BSTR* p) mut => VT.[Friend]get_borderBottomLeftRadius(&this, p);

	public HRESULT put_clipTop(VARIANT v) mut => VT.[Friend]put_clipTop(&this, v);

	public HRESULT get_clipTop(VARIANT* p) mut => VT.[Friend]get_clipTop(&this, p);

	public HRESULT put_clipRight(VARIANT v) mut => VT.[Friend]put_clipRight(&this, v);

	public HRESULT get_clipRight(VARIANT* p) mut => VT.[Friend]get_clipRight(&this, p);

	public HRESULT get_clipBottom(VARIANT* p) mut => VT.[Friend]get_clipBottom(&this, p);

	public HRESULT put_clipLeft(VARIANT v) mut => VT.[Friend]put_clipLeft(&this, v);

	public HRESULT get_clipLeft(VARIANT* p) mut => VT.[Friend]get_clipLeft(&this, p);

	public HRESULT put_cssFloat(BSTR v) mut => VT.[Friend]put_cssFloat(&this, v);

	public HRESULT get_cssFloat(BSTR* p) mut => VT.[Friend]get_cssFloat(&this, p);

	public HRESULT put_backgroundClip(BSTR v) mut => VT.[Friend]put_backgroundClip(&this, v);

	public HRESULT get_backgroundClip(BSTR* p) mut => VT.[Friend]get_backgroundClip(&this, p);

	public HRESULT put_backgroundOrigin(BSTR v) mut => VT.[Friend]put_backgroundOrigin(&this, v);

	public HRESULT get_backgroundOrigin(BSTR* p) mut => VT.[Friend]get_backgroundOrigin(&this, p);

	public HRESULT put_backgroundSize(BSTR v) mut => VT.[Friend]put_backgroundSize(&this, v);

	public HRESULT get_backgroundSize(BSTR* p) mut => VT.[Friend]get_backgroundSize(&this, p);

	public HRESULT put_boxShadow(BSTR v) mut => VT.[Friend]put_boxShadow(&this, v);

	public HRESULT get_boxShadow(BSTR* p) mut => VT.[Friend]get_boxShadow(&this, p);

	public HRESULT put_msTransform(BSTR v) mut => VT.[Friend]put_msTransform(&this, v);

	public HRESULT get_msTransform(BSTR* p) mut => VT.[Friend]get_msTransform(&this, p);

	public HRESULT put_msTransformOrigin(BSTR v) mut => VT.[Friend]put_msTransformOrigin(&this, v);

	public HRESULT get_msTransformOrigin(BSTR* p) mut => VT.[Friend]get_msTransformOrigin(&this, p);
}

[CRepr]struct IHTMLCSSStyleDeclaration2 : IDispatch
{
	public new const Guid IID = .(0x305107d1, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_msScrollChaining;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_msScrollChaining;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_msContentZooming;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_msContentZooming;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_msContentZoomSnapType;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_msContentZoomSnapType;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_msScrollRails;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_msScrollRails;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_msContentZoomChaining;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_msContentZoomChaining;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_msScrollSnapType;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_msScrollSnapType;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_msContentZoomLimit;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_msContentZoomLimit;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_msContentZoomSnap;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_msContentZoomSnap;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_msContentZoomSnapPoints;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_msContentZoomSnapPoints;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_msContentZoomLimitMin;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_msContentZoomLimitMin;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_msContentZoomLimitMax;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_msContentZoomLimitMax;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_msScrollSnapX;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_msScrollSnapX;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_msScrollSnapY;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_msScrollSnapY;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_msScrollSnapPointsX;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_msScrollSnapPointsX;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_msScrollSnapPointsY;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_msScrollSnapPointsY;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_msGridColumn;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_msGridColumn;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_msGridColumnAlign;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_msGridColumnAlign;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_msGridColumns;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_msGridColumns;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_msGridColumnSpan;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_msGridColumnSpan;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_msGridRow;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_msGridRow;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_msGridRowAlign;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_msGridRowAlign;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_msGridRows;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_msGridRows;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_msGridRowSpan;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_msGridRowSpan;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_msWrapThrough;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_msWrapThrough;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_msWrapMargin;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_msWrapMargin;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_msWrapFlow;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_msWrapFlow;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_msAnimationName;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_msAnimationName;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_msAnimationDuration;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_msAnimationDuration;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_msAnimationTimingFunction;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_msAnimationTimingFunction;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_msAnimationDelay;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_msAnimationDelay;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_msAnimationDirection;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_msAnimationDirection;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_msAnimationPlayState;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_msAnimationPlayState;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_msAnimationIterationCount;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_msAnimationIterationCount;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_msAnimation;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_msAnimation;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_msAnimationFillMode;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_msAnimationFillMode;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_colorInterpolationFilters;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_colorInterpolationFilters;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_columnCount;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_columnCount;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_columnWidth;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_columnWidth;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_columnGap;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_columnGap;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_columnFill;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_columnFill;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_columnSpan;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_columnSpan;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_columns;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_columns;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_columnRule;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_columnRule;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_columnRuleColor;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_columnRuleColor;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_columnRuleStyle;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_columnRuleStyle;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_columnRuleWidth;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_columnRuleWidth;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_breakBefore;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_breakBefore;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_breakAfter;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_breakAfter;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_breakInside;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_breakInside;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_floodColor;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_floodColor;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_floodOpacity;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_floodOpacity;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_lightingColor;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_lightingColor;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_msScrollLimitXMin;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_msScrollLimitXMin;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_msScrollLimitYMin;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_msScrollLimitYMin;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_msScrollLimitXMax;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_msScrollLimitXMax;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_msScrollLimitYMax;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_msScrollLimitYMax;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_msScrollLimit;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_msScrollLimit;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_textShadow;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_textShadow;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_msFlowFrom;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_msFlowFrom;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_msFlowInto;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_msFlowInto;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_msHyphens;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_msHyphens;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_msHyphenateLimitZone;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_msHyphenateLimitZone;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_msHyphenateLimitChars;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_msHyphenateLimitChars;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_msHyphenateLimitLines;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_msHyphenateLimitLines;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_msHighContrastAdjust;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_msHighContrastAdjust;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_enableBackground;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_enableBackground;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_msFontFeatureSettings;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_msFontFeatureSettings;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_msUserSelect;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_msUserSelect;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_msOverflowStyle;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_msOverflowStyle;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_msTransformStyle;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_msTransformStyle;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_msBackfaceVisibility;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_msBackfaceVisibility;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_msPerspective;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_msPerspective;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_msPerspectiveOrigin;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_msPerspectiveOrigin;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_msTransitionProperty;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_msTransitionProperty;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_msTransitionDuration;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_msTransitionDuration;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_msTransitionTimingFunction;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_msTransitionTimingFunction;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_msTransitionDelay;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_msTransitionDelay;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_msTransition;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_msTransition;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_msTouchAction;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_msTouchAction;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_msScrollTranslation;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_msScrollTranslation;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_msFlex;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_msFlex;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_msFlexPositive;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_msFlexPositive;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_msFlexNegative;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_msFlexNegative;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_msFlexPreferredSize;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_msFlexPreferredSize;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_msFlexFlow;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_msFlexFlow;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_msFlexDirection;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_msFlexDirection;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_msFlexWrap;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_msFlexWrap;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_msFlexAlign;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_msFlexAlign;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_msFlexItemAlign;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_msFlexItemAlign;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_msFlexPack;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_msFlexPack;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_msFlexLinePack;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_msFlexLinePack;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_msFlexOrder;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_msFlexOrder;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_msTouchSelect;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_msTouchSelect;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_transform;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_transform;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_transformOrigin;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_transformOrigin;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_transformStyle;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_transformStyle;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_backfaceVisibility;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_backfaceVisibility;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_perspective;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_perspective;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_perspectiveOrigin;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_perspectiveOrigin;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_transitionProperty;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_transitionProperty;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_transitionDuration;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_transitionDuration;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_transitionTimingFunction;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_transitionTimingFunction;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_transitionDelay;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_transitionDelay;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_transition;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_transition;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_fontFeatureSettings;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_fontFeatureSettings;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_animationName;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_animationName;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_animationDuration;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_animationDuration;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_animationTimingFunction;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_animationTimingFunction;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_animationDelay;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_animationDelay;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_animationDirection;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_animationDirection;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_animationPlayState;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_animationPlayState;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_animationIterationCount;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_animationIterationCount;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_animation;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_animation;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_animationFillMode;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_animationFillMode;
	}


	public HRESULT put_msScrollChaining(BSTR v) mut => VT.[Friend]put_msScrollChaining(&this, v);

	public HRESULT get_msScrollChaining(BSTR* p) mut => VT.[Friend]get_msScrollChaining(&this, p);

	public HRESULT put_msContentZooming(BSTR v) mut => VT.[Friend]put_msContentZooming(&this, v);

	public HRESULT get_msContentZooming(BSTR* p) mut => VT.[Friend]get_msContentZooming(&this, p);

	public HRESULT put_msContentZoomSnapType(BSTR v) mut => VT.[Friend]put_msContentZoomSnapType(&this, v);

	public HRESULT get_msContentZoomSnapType(BSTR* p) mut => VT.[Friend]get_msContentZoomSnapType(&this, p);

	public HRESULT put_msScrollRails(BSTR v) mut => VT.[Friend]put_msScrollRails(&this, v);

	public HRESULT get_msScrollRails(BSTR* p) mut => VT.[Friend]get_msScrollRails(&this, p);

	public HRESULT put_msContentZoomChaining(BSTR v) mut => VT.[Friend]put_msContentZoomChaining(&this, v);

	public HRESULT get_msContentZoomChaining(BSTR* p) mut => VT.[Friend]get_msContentZoomChaining(&this, p);

	public HRESULT put_msScrollSnapType(BSTR v) mut => VT.[Friend]put_msScrollSnapType(&this, v);

	public HRESULT get_msScrollSnapType(BSTR* p) mut => VT.[Friend]get_msScrollSnapType(&this, p);

	public HRESULT put_msContentZoomLimit(BSTR v) mut => VT.[Friend]put_msContentZoomLimit(&this, v);

	public HRESULT get_msContentZoomLimit(BSTR* p) mut => VT.[Friend]get_msContentZoomLimit(&this, p);

	public HRESULT put_msContentZoomSnap(BSTR v) mut => VT.[Friend]put_msContentZoomSnap(&this, v);

	public HRESULT get_msContentZoomSnap(BSTR* p) mut => VT.[Friend]get_msContentZoomSnap(&this, p);

	public HRESULT put_msContentZoomSnapPoints(BSTR v) mut => VT.[Friend]put_msContentZoomSnapPoints(&this, v);

	public HRESULT get_msContentZoomSnapPoints(BSTR* p) mut => VT.[Friend]get_msContentZoomSnapPoints(&this, p);

	public HRESULT put_msContentZoomLimitMin(VARIANT v) mut => VT.[Friend]put_msContentZoomLimitMin(&this, v);

	public HRESULT get_msContentZoomLimitMin(VARIANT* p) mut => VT.[Friend]get_msContentZoomLimitMin(&this, p);

	public HRESULT put_msContentZoomLimitMax(VARIANT v) mut => VT.[Friend]put_msContentZoomLimitMax(&this, v);

	public HRESULT get_msContentZoomLimitMax(VARIANT* p) mut => VT.[Friend]get_msContentZoomLimitMax(&this, p);

	public HRESULT put_msScrollSnapX(BSTR v) mut => VT.[Friend]put_msScrollSnapX(&this, v);

	public HRESULT get_msScrollSnapX(BSTR* p) mut => VT.[Friend]get_msScrollSnapX(&this, p);

	public HRESULT put_msScrollSnapY(BSTR v) mut => VT.[Friend]put_msScrollSnapY(&this, v);

	public HRESULT get_msScrollSnapY(BSTR* p) mut => VT.[Friend]get_msScrollSnapY(&this, p);

	public HRESULT put_msScrollSnapPointsX(BSTR v) mut => VT.[Friend]put_msScrollSnapPointsX(&this, v);

	public HRESULT get_msScrollSnapPointsX(BSTR* p) mut => VT.[Friend]get_msScrollSnapPointsX(&this, p);

	public HRESULT put_msScrollSnapPointsY(BSTR v) mut => VT.[Friend]put_msScrollSnapPointsY(&this, v);

	public HRESULT get_msScrollSnapPointsY(BSTR* p) mut => VT.[Friend]get_msScrollSnapPointsY(&this, p);

	public HRESULT put_msGridColumn(VARIANT v) mut => VT.[Friend]put_msGridColumn(&this, v);

	public HRESULT get_msGridColumn(VARIANT* p) mut => VT.[Friend]get_msGridColumn(&this, p);

	public HRESULT put_msGridColumnAlign(BSTR v) mut => VT.[Friend]put_msGridColumnAlign(&this, v);

	public HRESULT get_msGridColumnAlign(BSTR* p) mut => VT.[Friend]get_msGridColumnAlign(&this, p);

	public HRESULT put_msGridColumns(BSTR v) mut => VT.[Friend]put_msGridColumns(&this, v);

	public HRESULT get_msGridColumns(BSTR* p) mut => VT.[Friend]get_msGridColumns(&this, p);

	public HRESULT put_msGridColumnSpan(VARIANT v) mut => VT.[Friend]put_msGridColumnSpan(&this, v);

	public HRESULT get_msGridColumnSpan(VARIANT* p) mut => VT.[Friend]get_msGridColumnSpan(&this, p);

	public HRESULT put_msGridRow(VARIANT v) mut => VT.[Friend]put_msGridRow(&this, v);

	public HRESULT get_msGridRow(VARIANT* p) mut => VT.[Friend]get_msGridRow(&this, p);

	public HRESULT put_msGridRowAlign(BSTR v) mut => VT.[Friend]put_msGridRowAlign(&this, v);

	public HRESULT get_msGridRowAlign(BSTR* p) mut => VT.[Friend]get_msGridRowAlign(&this, p);

	public HRESULT put_msGridRows(BSTR v) mut => VT.[Friend]put_msGridRows(&this, v);

	public HRESULT get_msGridRows(BSTR* p) mut => VT.[Friend]get_msGridRows(&this, p);

	public HRESULT put_msGridRowSpan(VARIANT v) mut => VT.[Friend]put_msGridRowSpan(&this, v);

	public HRESULT get_msGridRowSpan(VARIANT* p) mut => VT.[Friend]get_msGridRowSpan(&this, p);

	public HRESULT put_msWrapThrough(BSTR v) mut => VT.[Friend]put_msWrapThrough(&this, v);

	public HRESULT get_msWrapThrough(BSTR* p) mut => VT.[Friend]get_msWrapThrough(&this, p);

	public HRESULT put_msWrapMargin(VARIANT v) mut => VT.[Friend]put_msWrapMargin(&this, v);

	public HRESULT get_msWrapMargin(VARIANT* p) mut => VT.[Friend]get_msWrapMargin(&this, p);

	public HRESULT put_msWrapFlow(BSTR v) mut => VT.[Friend]put_msWrapFlow(&this, v);

	public HRESULT get_msWrapFlow(BSTR* p) mut => VT.[Friend]get_msWrapFlow(&this, p);

	public HRESULT put_msAnimationName(BSTR v) mut => VT.[Friend]put_msAnimationName(&this, v);

	public HRESULT get_msAnimationName(BSTR* p) mut => VT.[Friend]get_msAnimationName(&this, p);

	public HRESULT put_msAnimationDuration(BSTR v) mut => VT.[Friend]put_msAnimationDuration(&this, v);

	public HRESULT get_msAnimationDuration(BSTR* p) mut => VT.[Friend]get_msAnimationDuration(&this, p);

	public HRESULT put_msAnimationTimingFunction(BSTR v) mut => VT.[Friend]put_msAnimationTimingFunction(&this, v);

	public HRESULT get_msAnimationTimingFunction(BSTR* p) mut => VT.[Friend]get_msAnimationTimingFunction(&this, p);

	public HRESULT put_msAnimationDelay(BSTR v) mut => VT.[Friend]put_msAnimationDelay(&this, v);

	public HRESULT get_msAnimationDelay(BSTR* p) mut => VT.[Friend]get_msAnimationDelay(&this, p);

	public HRESULT put_msAnimationDirection(BSTR v) mut => VT.[Friend]put_msAnimationDirection(&this, v);

	public HRESULT get_msAnimationDirection(BSTR* p) mut => VT.[Friend]get_msAnimationDirection(&this, p);

	public HRESULT put_msAnimationPlayState(BSTR v) mut => VT.[Friend]put_msAnimationPlayState(&this, v);

	public HRESULT get_msAnimationPlayState(BSTR* p) mut => VT.[Friend]get_msAnimationPlayState(&this, p);

	public HRESULT put_msAnimationIterationCount(BSTR v) mut => VT.[Friend]put_msAnimationIterationCount(&this, v);

	public HRESULT get_msAnimationIterationCount(BSTR* p) mut => VT.[Friend]get_msAnimationIterationCount(&this, p);

	public HRESULT put_msAnimation(BSTR v) mut => VT.[Friend]put_msAnimation(&this, v);

	public HRESULT get_msAnimation(BSTR* p) mut => VT.[Friend]get_msAnimation(&this, p);

	public HRESULT put_msAnimationFillMode(BSTR v) mut => VT.[Friend]put_msAnimationFillMode(&this, v);

	public HRESULT get_msAnimationFillMode(BSTR* p) mut => VT.[Friend]get_msAnimationFillMode(&this, p);

	public HRESULT put_colorInterpolationFilters(BSTR v) mut => VT.[Friend]put_colorInterpolationFilters(&this, v);

	public HRESULT get_colorInterpolationFilters(BSTR* p) mut => VT.[Friend]get_colorInterpolationFilters(&this, p);

	public HRESULT put_columnCount(VARIANT v) mut => VT.[Friend]put_columnCount(&this, v);

	public HRESULT get_columnCount(VARIANT* p) mut => VT.[Friend]get_columnCount(&this, p);

	public HRESULT put_columnWidth(VARIANT v) mut => VT.[Friend]put_columnWidth(&this, v);

	public HRESULT get_columnWidth(VARIANT* p) mut => VT.[Friend]get_columnWidth(&this, p);

	public HRESULT put_columnGap(VARIANT v) mut => VT.[Friend]put_columnGap(&this, v);

	public HRESULT get_columnGap(VARIANT* p) mut => VT.[Friend]get_columnGap(&this, p);

	public HRESULT put_columnFill(BSTR v) mut => VT.[Friend]put_columnFill(&this, v);

	public HRESULT get_columnFill(BSTR* p) mut => VT.[Friend]get_columnFill(&this, p);

	public HRESULT put_columnSpan(BSTR v) mut => VT.[Friend]put_columnSpan(&this, v);

	public HRESULT get_columnSpan(BSTR* p) mut => VT.[Friend]get_columnSpan(&this, p);

	public HRESULT put_columns(BSTR v) mut => VT.[Friend]put_columns(&this, v);

	public HRESULT get_columns(BSTR* p) mut => VT.[Friend]get_columns(&this, p);

	public HRESULT put_columnRule(BSTR v) mut => VT.[Friend]put_columnRule(&this, v);

	public HRESULT get_columnRule(BSTR* p) mut => VT.[Friend]get_columnRule(&this, p);

	public HRESULT put_columnRuleColor(VARIANT v) mut => VT.[Friend]put_columnRuleColor(&this, v);

	public HRESULT get_columnRuleColor(VARIANT* p) mut => VT.[Friend]get_columnRuleColor(&this, p);

	public HRESULT put_columnRuleStyle(BSTR v) mut => VT.[Friend]put_columnRuleStyle(&this, v);

	public HRESULT get_columnRuleStyle(BSTR* p) mut => VT.[Friend]get_columnRuleStyle(&this, p);

	public HRESULT put_columnRuleWidth(VARIANT v) mut => VT.[Friend]put_columnRuleWidth(&this, v);

	public HRESULT get_columnRuleWidth(VARIANT* p) mut => VT.[Friend]get_columnRuleWidth(&this, p);

	public HRESULT put_breakBefore(BSTR v) mut => VT.[Friend]put_breakBefore(&this, v);

	public HRESULT get_breakBefore(BSTR* p) mut => VT.[Friend]get_breakBefore(&this, p);

	public HRESULT put_breakAfter(BSTR v) mut => VT.[Friend]put_breakAfter(&this, v);

	public HRESULT get_breakAfter(BSTR* p) mut => VT.[Friend]get_breakAfter(&this, p);

	public HRESULT put_breakInside(BSTR v) mut => VT.[Friend]put_breakInside(&this, v);

	public HRESULT get_breakInside(BSTR* p) mut => VT.[Friend]get_breakInside(&this, p);

	public HRESULT put_floodColor(VARIANT v) mut => VT.[Friend]put_floodColor(&this, v);

	public HRESULT get_floodColor(VARIANT* p) mut => VT.[Friend]get_floodColor(&this, p);

	public HRESULT put_floodOpacity(VARIANT v) mut => VT.[Friend]put_floodOpacity(&this, v);

	public HRESULT get_floodOpacity(VARIANT* p) mut => VT.[Friend]get_floodOpacity(&this, p);

	public HRESULT put_lightingColor(VARIANT v) mut => VT.[Friend]put_lightingColor(&this, v);

	public HRESULT get_lightingColor(VARIANT* p) mut => VT.[Friend]get_lightingColor(&this, p);

	public HRESULT put_msScrollLimitXMin(VARIANT v) mut => VT.[Friend]put_msScrollLimitXMin(&this, v);

	public HRESULT get_msScrollLimitXMin(VARIANT* p) mut => VT.[Friend]get_msScrollLimitXMin(&this, p);

	public HRESULT put_msScrollLimitYMin(VARIANT v) mut => VT.[Friend]put_msScrollLimitYMin(&this, v);

	public HRESULT get_msScrollLimitYMin(VARIANT* p) mut => VT.[Friend]get_msScrollLimitYMin(&this, p);

	public HRESULT put_msScrollLimitXMax(VARIANT v) mut => VT.[Friend]put_msScrollLimitXMax(&this, v);

	public HRESULT get_msScrollLimitXMax(VARIANT* p) mut => VT.[Friend]get_msScrollLimitXMax(&this, p);

	public HRESULT put_msScrollLimitYMax(VARIANT v) mut => VT.[Friend]put_msScrollLimitYMax(&this, v);

	public HRESULT get_msScrollLimitYMax(VARIANT* p) mut => VT.[Friend]get_msScrollLimitYMax(&this, p);

	public HRESULT put_msScrollLimit(BSTR v) mut => VT.[Friend]put_msScrollLimit(&this, v);

	public HRESULT get_msScrollLimit(BSTR* p) mut => VT.[Friend]get_msScrollLimit(&this, p);

	public HRESULT put_textShadow(BSTR v) mut => VT.[Friend]put_textShadow(&this, v);

	public HRESULT get_textShadow(BSTR* p) mut => VT.[Friend]get_textShadow(&this, p);

	public HRESULT put_msFlowFrom(BSTR v) mut => VT.[Friend]put_msFlowFrom(&this, v);

	public HRESULT get_msFlowFrom(BSTR* p) mut => VT.[Friend]get_msFlowFrom(&this, p);

	public HRESULT put_msFlowInto(BSTR v) mut => VT.[Friend]put_msFlowInto(&this, v);

	public HRESULT get_msFlowInto(BSTR* p) mut => VT.[Friend]get_msFlowInto(&this, p);

	public HRESULT put_msHyphens(BSTR v) mut => VT.[Friend]put_msHyphens(&this, v);

	public HRESULT get_msHyphens(BSTR* p) mut => VT.[Friend]get_msHyphens(&this, p);

	public HRESULT put_msHyphenateLimitZone(VARIANT v) mut => VT.[Friend]put_msHyphenateLimitZone(&this, v);

	public HRESULT get_msHyphenateLimitZone(VARIANT* p) mut => VT.[Friend]get_msHyphenateLimitZone(&this, p);

	public HRESULT put_msHyphenateLimitChars(BSTR v) mut => VT.[Friend]put_msHyphenateLimitChars(&this, v);

	public HRESULT get_msHyphenateLimitChars(BSTR* p) mut => VT.[Friend]get_msHyphenateLimitChars(&this, p);

	public HRESULT put_msHyphenateLimitLines(VARIANT v) mut => VT.[Friend]put_msHyphenateLimitLines(&this, v);

	public HRESULT get_msHyphenateLimitLines(VARIANT* p) mut => VT.[Friend]get_msHyphenateLimitLines(&this, p);

	public HRESULT put_msHighContrastAdjust(BSTR v) mut => VT.[Friend]put_msHighContrastAdjust(&this, v);

	public HRESULT get_msHighContrastAdjust(BSTR* p) mut => VT.[Friend]get_msHighContrastAdjust(&this, p);

	public HRESULT put_enableBackground(BSTR v) mut => VT.[Friend]put_enableBackground(&this, v);

	public HRESULT get_enableBackground(BSTR* p) mut => VT.[Friend]get_enableBackground(&this, p);

	public HRESULT put_msFontFeatureSettings(BSTR v) mut => VT.[Friend]put_msFontFeatureSettings(&this, v);

	public HRESULT get_msFontFeatureSettings(BSTR* p) mut => VT.[Friend]get_msFontFeatureSettings(&this, p);

	public HRESULT put_msUserSelect(BSTR v) mut => VT.[Friend]put_msUserSelect(&this, v);

	public HRESULT get_msUserSelect(BSTR* p) mut => VT.[Friend]get_msUserSelect(&this, p);

	public HRESULT put_msOverflowStyle(BSTR v) mut => VT.[Friend]put_msOverflowStyle(&this, v);

	public HRESULT get_msOverflowStyle(BSTR* p) mut => VT.[Friend]get_msOverflowStyle(&this, p);

	public HRESULT put_msTransformStyle(BSTR v) mut => VT.[Friend]put_msTransformStyle(&this, v);

	public HRESULT get_msTransformStyle(BSTR* p) mut => VT.[Friend]get_msTransformStyle(&this, p);

	public HRESULT put_msBackfaceVisibility(BSTR v) mut => VT.[Friend]put_msBackfaceVisibility(&this, v);

	public HRESULT get_msBackfaceVisibility(BSTR* p) mut => VT.[Friend]get_msBackfaceVisibility(&this, p);

	public HRESULT put_msPerspective(VARIANT v) mut => VT.[Friend]put_msPerspective(&this, v);

	public HRESULT get_msPerspective(VARIANT* p) mut => VT.[Friend]get_msPerspective(&this, p);

	public HRESULT put_msPerspectiveOrigin(BSTR v) mut => VT.[Friend]put_msPerspectiveOrigin(&this, v);

	public HRESULT get_msPerspectiveOrigin(BSTR* p) mut => VT.[Friend]get_msPerspectiveOrigin(&this, p);

	public HRESULT put_msTransitionProperty(BSTR v) mut => VT.[Friend]put_msTransitionProperty(&this, v);

	public HRESULT get_msTransitionProperty(BSTR* p) mut => VT.[Friend]get_msTransitionProperty(&this, p);

	public HRESULT put_msTransitionDuration(BSTR v) mut => VT.[Friend]put_msTransitionDuration(&this, v);

	public HRESULT get_msTransitionDuration(BSTR* p) mut => VT.[Friend]get_msTransitionDuration(&this, p);

	public HRESULT put_msTransitionTimingFunction(BSTR v) mut => VT.[Friend]put_msTransitionTimingFunction(&this, v);

	public HRESULT get_msTransitionTimingFunction(BSTR* p) mut => VT.[Friend]get_msTransitionTimingFunction(&this, p);

	public HRESULT put_msTransitionDelay(BSTR v) mut => VT.[Friend]put_msTransitionDelay(&this, v);

	public HRESULT get_msTransitionDelay(BSTR* p) mut => VT.[Friend]get_msTransitionDelay(&this, p);

	public HRESULT put_msTransition(BSTR v) mut => VT.[Friend]put_msTransition(&this, v);

	public HRESULT get_msTransition(BSTR* p) mut => VT.[Friend]get_msTransition(&this, p);

	public HRESULT put_msTouchAction(BSTR v) mut => VT.[Friend]put_msTouchAction(&this, v);

	public HRESULT get_msTouchAction(BSTR* p) mut => VT.[Friend]get_msTouchAction(&this, p);

	public HRESULT put_msScrollTranslation(BSTR v) mut => VT.[Friend]put_msScrollTranslation(&this, v);

	public HRESULT get_msScrollTranslation(BSTR* p) mut => VT.[Friend]get_msScrollTranslation(&this, p);

	public HRESULT put_msFlex(BSTR v) mut => VT.[Friend]put_msFlex(&this, v);

	public HRESULT get_msFlex(BSTR* p) mut => VT.[Friend]get_msFlex(&this, p);

	public HRESULT put_msFlexPositive(VARIANT v) mut => VT.[Friend]put_msFlexPositive(&this, v);

	public HRESULT get_msFlexPositive(VARIANT* p) mut => VT.[Friend]get_msFlexPositive(&this, p);

	public HRESULT put_msFlexNegative(VARIANT v) mut => VT.[Friend]put_msFlexNegative(&this, v);

	public HRESULT get_msFlexNegative(VARIANT* p) mut => VT.[Friend]get_msFlexNegative(&this, p);

	public HRESULT put_msFlexPreferredSize(VARIANT v) mut => VT.[Friend]put_msFlexPreferredSize(&this, v);

	public HRESULT get_msFlexPreferredSize(VARIANT* p) mut => VT.[Friend]get_msFlexPreferredSize(&this, p);

	public HRESULT put_msFlexFlow(BSTR v) mut => VT.[Friend]put_msFlexFlow(&this, v);

	public HRESULT get_msFlexFlow(BSTR* p) mut => VT.[Friend]get_msFlexFlow(&this, p);

	public HRESULT put_msFlexDirection(BSTR v) mut => VT.[Friend]put_msFlexDirection(&this, v);

	public HRESULT get_msFlexDirection(BSTR* p) mut => VT.[Friend]get_msFlexDirection(&this, p);

	public HRESULT put_msFlexWrap(BSTR v) mut => VT.[Friend]put_msFlexWrap(&this, v);

	public HRESULT get_msFlexWrap(BSTR* p) mut => VT.[Friend]get_msFlexWrap(&this, p);

	public HRESULT put_msFlexAlign(BSTR v) mut => VT.[Friend]put_msFlexAlign(&this, v);

	public HRESULT get_msFlexAlign(BSTR* p) mut => VT.[Friend]get_msFlexAlign(&this, p);

	public HRESULT put_msFlexItemAlign(BSTR v) mut => VT.[Friend]put_msFlexItemAlign(&this, v);

	public HRESULT get_msFlexItemAlign(BSTR* p) mut => VT.[Friend]get_msFlexItemAlign(&this, p);

	public HRESULT put_msFlexPack(BSTR v) mut => VT.[Friend]put_msFlexPack(&this, v);

	public HRESULT get_msFlexPack(BSTR* p) mut => VT.[Friend]get_msFlexPack(&this, p);

	public HRESULT put_msFlexLinePack(BSTR v) mut => VT.[Friend]put_msFlexLinePack(&this, v);

	public HRESULT get_msFlexLinePack(BSTR* p) mut => VT.[Friend]get_msFlexLinePack(&this, p);

	public HRESULT put_msFlexOrder(VARIANT v) mut => VT.[Friend]put_msFlexOrder(&this, v);

	public HRESULT get_msFlexOrder(VARIANT* p) mut => VT.[Friend]get_msFlexOrder(&this, p);

	public HRESULT put_msTouchSelect(BSTR v) mut => VT.[Friend]put_msTouchSelect(&this, v);

	public HRESULT get_msTouchSelect(BSTR* p) mut => VT.[Friend]get_msTouchSelect(&this, p);

	public HRESULT put_transform(BSTR v) mut => VT.[Friend]put_transform(&this, v);

	public HRESULT get_transform(BSTR* p) mut => VT.[Friend]get_transform(&this, p);

	public HRESULT put_transformOrigin(BSTR v) mut => VT.[Friend]put_transformOrigin(&this, v);

	public HRESULT get_transformOrigin(BSTR* p) mut => VT.[Friend]get_transformOrigin(&this, p);

	public HRESULT put_transformStyle(BSTR v) mut => VT.[Friend]put_transformStyle(&this, v);

	public HRESULT get_transformStyle(BSTR* p) mut => VT.[Friend]get_transformStyle(&this, p);

	public HRESULT put_backfaceVisibility(BSTR v) mut => VT.[Friend]put_backfaceVisibility(&this, v);

	public HRESULT get_backfaceVisibility(BSTR* p) mut => VT.[Friend]get_backfaceVisibility(&this, p);

	public HRESULT put_perspective(VARIANT v) mut => VT.[Friend]put_perspective(&this, v);

	public HRESULT get_perspective(VARIANT* p) mut => VT.[Friend]get_perspective(&this, p);

	public HRESULT put_perspectiveOrigin(BSTR v) mut => VT.[Friend]put_perspectiveOrigin(&this, v);

	public HRESULT get_perspectiveOrigin(BSTR* p) mut => VT.[Friend]get_perspectiveOrigin(&this, p);

	public HRESULT put_transitionProperty(BSTR v) mut => VT.[Friend]put_transitionProperty(&this, v);

	public HRESULT get_transitionProperty(BSTR* p) mut => VT.[Friend]get_transitionProperty(&this, p);

	public HRESULT put_transitionDuration(BSTR v) mut => VT.[Friend]put_transitionDuration(&this, v);

	public HRESULT get_transitionDuration(BSTR* p) mut => VT.[Friend]get_transitionDuration(&this, p);

	public HRESULT put_transitionTimingFunction(BSTR v) mut => VT.[Friend]put_transitionTimingFunction(&this, v);

	public HRESULT get_transitionTimingFunction(BSTR* p) mut => VT.[Friend]get_transitionTimingFunction(&this, p);

	public HRESULT put_transitionDelay(BSTR v) mut => VT.[Friend]put_transitionDelay(&this, v);

	public HRESULT get_transitionDelay(BSTR* p) mut => VT.[Friend]get_transitionDelay(&this, p);

	public HRESULT put_transition(BSTR v) mut => VT.[Friend]put_transition(&this, v);

	public HRESULT get_transition(BSTR* p) mut => VT.[Friend]get_transition(&this, p);

	public HRESULT put_fontFeatureSettings(BSTR v) mut => VT.[Friend]put_fontFeatureSettings(&this, v);

	public HRESULT get_fontFeatureSettings(BSTR* p) mut => VT.[Friend]get_fontFeatureSettings(&this, p);

	public HRESULT put_animationName(BSTR v) mut => VT.[Friend]put_animationName(&this, v);

	public HRESULT get_animationName(BSTR* p) mut => VT.[Friend]get_animationName(&this, p);

	public HRESULT put_animationDuration(BSTR v) mut => VT.[Friend]put_animationDuration(&this, v);

	public HRESULT get_animationDuration(BSTR* p) mut => VT.[Friend]get_animationDuration(&this, p);

	public HRESULT put_animationTimingFunction(BSTR v) mut => VT.[Friend]put_animationTimingFunction(&this, v);

	public HRESULT get_animationTimingFunction(BSTR* p) mut => VT.[Friend]get_animationTimingFunction(&this, p);

	public HRESULT put_animationDelay(BSTR v) mut => VT.[Friend]put_animationDelay(&this, v);

	public HRESULT get_animationDelay(BSTR* p) mut => VT.[Friend]get_animationDelay(&this, p);

	public HRESULT put_animationDirection(BSTR v) mut => VT.[Friend]put_animationDirection(&this, v);

	public HRESULT get_animationDirection(BSTR* p) mut => VT.[Friend]get_animationDirection(&this, p);

	public HRESULT put_animationPlayState(BSTR v) mut => VT.[Friend]put_animationPlayState(&this, v);

	public HRESULT get_animationPlayState(BSTR* p) mut => VT.[Friend]get_animationPlayState(&this, p);

	public HRESULT put_animationIterationCount(BSTR v) mut => VT.[Friend]put_animationIterationCount(&this, v);

	public HRESULT get_animationIterationCount(BSTR* p) mut => VT.[Friend]get_animationIterationCount(&this, p);

	public HRESULT put_animation(BSTR v) mut => VT.[Friend]put_animation(&this, v);

	public HRESULT get_animation(BSTR* p) mut => VT.[Friend]get_animation(&this, p);

	public HRESULT put_animationFillMode(BSTR v) mut => VT.[Friend]put_animationFillMode(&this, v);

	public HRESULT get_animationFillMode(BSTR* p) mut => VT.[Friend]get_animationFillMode(&this, p);
}

[CRepr]struct IHTMLCSSStyleDeclaration3 : IDispatch
{
	public new const Guid IID = .(0x3051085c, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_flex;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_flex;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_flexDirection;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_flexDirection;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_flexWrap;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_flexWrap;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_flexFlow;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_flexFlow;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_flexGrow;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_flexGrow;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_flexShrink;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_flexShrink;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_flexBasis;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_flexBasis;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_justifyContent;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_justifyContent;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_alignItems;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_alignItems;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_alignSelf;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_alignSelf;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_alignContent;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_alignContent;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_borderImage;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_borderImage;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_borderImageSource;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_borderImageSource;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_borderImageSlice;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_borderImageSlice;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_borderImageWidth;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_borderImageWidth;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_borderImageOutset;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_borderImageOutset;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_borderImageRepeat;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_borderImageRepeat;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_msImeAlign;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_msImeAlign;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_msTextCombineHorizontal;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_msTextCombineHorizontal;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_touchAction;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_touchAction;
	}


	public HRESULT put_flex(BSTR v) mut => VT.[Friend]put_flex(&this, v);

	public HRESULT get_flex(BSTR* p) mut => VT.[Friend]get_flex(&this, p);

	public HRESULT put_flexDirection(BSTR v) mut => VT.[Friend]put_flexDirection(&this, v);

	public HRESULT get_flexDirection(BSTR* p) mut => VT.[Friend]get_flexDirection(&this, p);

	public HRESULT put_flexWrap(BSTR v) mut => VT.[Friend]put_flexWrap(&this, v);

	public HRESULT get_flexWrap(BSTR* p) mut => VT.[Friend]get_flexWrap(&this, p);

	public HRESULT put_flexFlow(BSTR v) mut => VT.[Friend]put_flexFlow(&this, v);

	public HRESULT get_flexFlow(BSTR* p) mut => VT.[Friend]get_flexFlow(&this, p);

	public HRESULT put_flexGrow(VARIANT v) mut => VT.[Friend]put_flexGrow(&this, v);

	public HRESULT get_flexGrow(VARIANT* p) mut => VT.[Friend]get_flexGrow(&this, p);

	public HRESULT put_flexShrink(VARIANT v) mut => VT.[Friend]put_flexShrink(&this, v);

	public HRESULT get_flexShrink(VARIANT* p) mut => VT.[Friend]get_flexShrink(&this, p);

	public HRESULT put_flexBasis(VARIANT v) mut => VT.[Friend]put_flexBasis(&this, v);

	public HRESULT get_flexBasis(VARIANT* p) mut => VT.[Friend]get_flexBasis(&this, p);

	public HRESULT put_justifyContent(BSTR v) mut => VT.[Friend]put_justifyContent(&this, v);

	public HRESULT get_justifyContent(BSTR* p) mut => VT.[Friend]get_justifyContent(&this, p);

	public HRESULT put_alignItems(BSTR v) mut => VT.[Friend]put_alignItems(&this, v);

	public HRESULT get_alignItems(BSTR* p) mut => VT.[Friend]get_alignItems(&this, p);

	public HRESULT put_alignSelf(BSTR v) mut => VT.[Friend]put_alignSelf(&this, v);

	public HRESULT get_alignSelf(BSTR* p) mut => VT.[Friend]get_alignSelf(&this, p);

	public HRESULT put_alignContent(BSTR v) mut => VT.[Friend]put_alignContent(&this, v);

	public HRESULT get_alignContent(BSTR* p) mut => VT.[Friend]get_alignContent(&this, p);

	public HRESULT put_borderImage(BSTR v) mut => VT.[Friend]put_borderImage(&this, v);

	public HRESULT get_borderImage(BSTR* p) mut => VT.[Friend]get_borderImage(&this, p);

	public HRESULT put_borderImageSource(BSTR v) mut => VT.[Friend]put_borderImageSource(&this, v);

	public HRESULT get_borderImageSource(BSTR* p) mut => VT.[Friend]get_borderImageSource(&this, p);

	public HRESULT put_borderImageSlice(BSTR v) mut => VT.[Friend]put_borderImageSlice(&this, v);

	public HRESULT get_borderImageSlice(BSTR* p) mut => VT.[Friend]get_borderImageSlice(&this, p);

	public HRESULT put_borderImageWidth(BSTR v) mut => VT.[Friend]put_borderImageWidth(&this, v);

	public HRESULT get_borderImageWidth(BSTR* p) mut => VT.[Friend]get_borderImageWidth(&this, p);

	public HRESULT put_borderImageOutset(BSTR v) mut => VT.[Friend]put_borderImageOutset(&this, v);

	public HRESULT get_borderImageOutset(BSTR* p) mut => VT.[Friend]get_borderImageOutset(&this, p);

	public HRESULT put_borderImageRepeat(BSTR v) mut => VT.[Friend]put_borderImageRepeat(&this, v);

	public HRESULT get_borderImageRepeat(BSTR* p) mut => VT.[Friend]get_borderImageRepeat(&this, p);

	public HRESULT put_msImeAlign(BSTR v) mut => VT.[Friend]put_msImeAlign(&this, v);

	public HRESULT get_msImeAlign(BSTR* p) mut => VT.[Friend]get_msImeAlign(&this, p);

	public HRESULT put_msTextCombineHorizontal(BSTR v) mut => VT.[Friend]put_msTextCombineHorizontal(&this, v);

	public HRESULT get_msTextCombineHorizontal(BSTR* p) mut => VT.[Friend]get_msTextCombineHorizontal(&this, p);

	public HRESULT put_touchAction(BSTR v) mut => VT.[Friend]put_touchAction(&this, v);

	public HRESULT get_touchAction(BSTR* p) mut => VT.[Friend]get_touchAction(&this, p);
}

[CRepr]struct IHTMLCSSStyleDeclaration4 : IDispatch
{
	public new const Guid IID = .(0xd6100f3b, 0x27c8, 0x4132, 0xaf, 0xea, 0xf0, 0xe4, 0xb1, 0xe0, 0x00, 0x60);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_webkitAppearance;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_webkitAppearance;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_webkitUserSelect;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_webkitUserSelect;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_webkitBoxAlign;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_webkitBoxAlign;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_webkitBoxOrdinalGroup;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_webkitBoxOrdinalGroup;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_webkitBoxPack;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_webkitBoxPack;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_webkitBoxFlex;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_webkitBoxFlex;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_webkitBoxOrient;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_webkitBoxOrient;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_webkitBoxDirection;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_webkitBoxDirection;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_webkitTransform;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_webkitTransform;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_webkitBackgroundSize;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_webkitBackgroundSize;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_webkitBackfaceVisibility;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_webkitBackfaceVisibility;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_webkitAnimation;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_webkitAnimation;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_webkitTransition;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_webkitTransition;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_webkitAnimationName;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_webkitAnimationName;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_webkitAnimationDuration;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_webkitAnimationDuration;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_webkitAnimationTimingFunction;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_webkitAnimationTimingFunction;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_webkitAnimationDelay;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_webkitAnimationDelay;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_webkitAnimationIterationCount;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_webkitAnimationIterationCount;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_webkitAnimationDirection;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_webkitAnimationDirection;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_webkitAnimationPlayState;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_webkitAnimationPlayState;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_webkitTransitionProperty;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_webkitTransitionProperty;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_webkitTransitionDuration;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_webkitTransitionDuration;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_webkitTransitionTimingFunction;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_webkitTransitionTimingFunction;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_webkitTransitionDelay;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_webkitTransitionDelay;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_webkitBackgroundAttachment;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_webkitBackgroundAttachment;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_webkitBackgroundColor;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_webkitBackgroundColor;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_webkitBackgroundClip;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_webkitBackgroundClip;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_webkitBackgroundImage;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_webkitBackgroundImage;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_webkitBackgroundRepeat;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_webkitBackgroundRepeat;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_webkitBackgroundOrigin;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_webkitBackgroundOrigin;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_webkitBackgroundPosition;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_webkitBackgroundPosition;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_webkitBackgroundPositionX;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_webkitBackgroundPositionX;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_webkitBackgroundPositionY;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_webkitBackgroundPositionY;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_webkitBackground;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_webkitBackground;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_webkitTransformOrigin;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_webkitTransformOrigin;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_msTextSizeAdjust;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_msTextSizeAdjust;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_webkitTextSizeAdjust;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_webkitTextSizeAdjust;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_webkitBorderImage;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_webkitBorderImage;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_webkitBorderImageSource;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_webkitBorderImageSource;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_webkitBorderImageSlice;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_webkitBorderImageSlice;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_webkitBorderImageWidth;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_webkitBorderImageWidth;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_webkitBorderImageOutset;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_webkitBorderImageOutset;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_webkitBorderImageRepeat;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_webkitBorderImageRepeat;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_webkitBoxSizing;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_webkitBoxSizing;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_webkitAnimationFillMode;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_webkitAnimationFillMode;
	}


	public HRESULT put_webkitAppearance(BSTR v) mut => VT.[Friend]put_webkitAppearance(&this, v);

	public HRESULT get_webkitAppearance(BSTR* p) mut => VT.[Friend]get_webkitAppearance(&this, p);

	public HRESULT put_webkitUserSelect(BSTR v) mut => VT.[Friend]put_webkitUserSelect(&this, v);

	public HRESULT get_webkitUserSelect(BSTR* p) mut => VT.[Friend]get_webkitUserSelect(&this, p);

	public HRESULT put_webkitBoxAlign(BSTR v) mut => VT.[Friend]put_webkitBoxAlign(&this, v);

	public HRESULT get_webkitBoxAlign(BSTR* p) mut => VT.[Friend]get_webkitBoxAlign(&this, p);

	public HRESULT put_webkitBoxOrdinalGroup(VARIANT v) mut => VT.[Friend]put_webkitBoxOrdinalGroup(&this, v);

	public HRESULT get_webkitBoxOrdinalGroup(VARIANT* p) mut => VT.[Friend]get_webkitBoxOrdinalGroup(&this, p);

	public HRESULT put_webkitBoxPack(BSTR v) mut => VT.[Friend]put_webkitBoxPack(&this, v);

	public HRESULT get_webkitBoxPack(BSTR* p) mut => VT.[Friend]get_webkitBoxPack(&this, p);

	public HRESULT put_webkitBoxFlex(VARIANT v) mut => VT.[Friend]put_webkitBoxFlex(&this, v);

	public HRESULT get_webkitBoxFlex(VARIANT* p) mut => VT.[Friend]get_webkitBoxFlex(&this, p);

	public HRESULT put_webkitBoxOrient(BSTR v) mut => VT.[Friend]put_webkitBoxOrient(&this, v);

	public HRESULT get_webkitBoxOrient(BSTR* p) mut => VT.[Friend]get_webkitBoxOrient(&this, p);

	public HRESULT put_webkitBoxDirection(BSTR v) mut => VT.[Friend]put_webkitBoxDirection(&this, v);

	public HRESULT get_webkitBoxDirection(BSTR* p) mut => VT.[Friend]get_webkitBoxDirection(&this, p);

	public HRESULT put_webkitTransform(BSTR v) mut => VT.[Friend]put_webkitTransform(&this, v);

	public HRESULT get_webkitTransform(BSTR* p) mut => VT.[Friend]get_webkitTransform(&this, p);

	public HRESULT put_webkitBackgroundSize(BSTR v) mut => VT.[Friend]put_webkitBackgroundSize(&this, v);

	public HRESULT get_webkitBackgroundSize(BSTR* p) mut => VT.[Friend]get_webkitBackgroundSize(&this, p);

	public HRESULT put_webkitBackfaceVisibility(BSTR v) mut => VT.[Friend]put_webkitBackfaceVisibility(&this, v);

	public HRESULT get_webkitBackfaceVisibility(BSTR* p) mut => VT.[Friend]get_webkitBackfaceVisibility(&this, p);

	public HRESULT put_webkitAnimation(BSTR v) mut => VT.[Friend]put_webkitAnimation(&this, v);

	public HRESULT get_webkitAnimation(BSTR* p) mut => VT.[Friend]get_webkitAnimation(&this, p);

	public HRESULT put_webkitTransition(BSTR v) mut => VT.[Friend]put_webkitTransition(&this, v);

	public HRESULT get_webkitTransition(BSTR* p) mut => VT.[Friend]get_webkitTransition(&this, p);

	public HRESULT put_webkitAnimationName(BSTR v) mut => VT.[Friend]put_webkitAnimationName(&this, v);

	public HRESULT get_webkitAnimationName(BSTR* p) mut => VT.[Friend]get_webkitAnimationName(&this, p);

	public HRESULT put_webkitAnimationDuration(BSTR v) mut => VT.[Friend]put_webkitAnimationDuration(&this, v);

	public HRESULT get_webkitAnimationDuration(BSTR* p) mut => VT.[Friend]get_webkitAnimationDuration(&this, p);

	public HRESULT put_webkitAnimationTimingFunction(BSTR v) mut => VT.[Friend]put_webkitAnimationTimingFunction(&this, v);

	public HRESULT get_webkitAnimationTimingFunction(BSTR* p) mut => VT.[Friend]get_webkitAnimationTimingFunction(&this, p);

	public HRESULT put_webkitAnimationDelay(BSTR v) mut => VT.[Friend]put_webkitAnimationDelay(&this, v);

	public HRESULT get_webkitAnimationDelay(BSTR* p) mut => VT.[Friend]get_webkitAnimationDelay(&this, p);

	public HRESULT put_webkitAnimationIterationCount(BSTR v) mut => VT.[Friend]put_webkitAnimationIterationCount(&this, v);

	public HRESULT get_webkitAnimationIterationCount(BSTR* p) mut => VT.[Friend]get_webkitAnimationIterationCount(&this, p);

	public HRESULT put_webkitAnimationDirection(BSTR v) mut => VT.[Friend]put_webkitAnimationDirection(&this, v);

	public HRESULT get_webkitAnimationDirection(BSTR* p) mut => VT.[Friend]get_webkitAnimationDirection(&this, p);

	public HRESULT put_webkitAnimationPlayState(BSTR v) mut => VT.[Friend]put_webkitAnimationPlayState(&this, v);

	public HRESULT get_webkitAnimationPlayState(BSTR* p) mut => VT.[Friend]get_webkitAnimationPlayState(&this, p);

	public HRESULT put_webkitTransitionProperty(BSTR v) mut => VT.[Friend]put_webkitTransitionProperty(&this, v);

	public HRESULT get_webkitTransitionProperty(BSTR* p) mut => VT.[Friend]get_webkitTransitionProperty(&this, p);

	public HRESULT put_webkitTransitionDuration(BSTR v) mut => VT.[Friend]put_webkitTransitionDuration(&this, v);

	public HRESULT get_webkitTransitionDuration(BSTR* p) mut => VT.[Friend]get_webkitTransitionDuration(&this, p);

	public HRESULT put_webkitTransitionTimingFunction(BSTR v) mut => VT.[Friend]put_webkitTransitionTimingFunction(&this, v);

	public HRESULT get_webkitTransitionTimingFunction(BSTR* p) mut => VT.[Friend]get_webkitTransitionTimingFunction(&this, p);

	public HRESULT put_webkitTransitionDelay(BSTR v) mut => VT.[Friend]put_webkitTransitionDelay(&this, v);

	public HRESULT get_webkitTransitionDelay(BSTR* p) mut => VT.[Friend]get_webkitTransitionDelay(&this, p);

	public HRESULT put_webkitBackgroundAttachment(BSTR v) mut => VT.[Friend]put_webkitBackgroundAttachment(&this, v);

	public HRESULT get_webkitBackgroundAttachment(BSTR* p) mut => VT.[Friend]get_webkitBackgroundAttachment(&this, p);

	public HRESULT put_webkitBackgroundColor(VARIANT v) mut => VT.[Friend]put_webkitBackgroundColor(&this, v);

	public HRESULT get_webkitBackgroundColor(VARIANT* p) mut => VT.[Friend]get_webkitBackgroundColor(&this, p);

	public HRESULT put_webkitBackgroundClip(BSTR v) mut => VT.[Friend]put_webkitBackgroundClip(&this, v);

	public HRESULT get_webkitBackgroundClip(BSTR* p) mut => VT.[Friend]get_webkitBackgroundClip(&this, p);

	public HRESULT put_webkitBackgroundImage(BSTR v) mut => VT.[Friend]put_webkitBackgroundImage(&this, v);

	public HRESULT get_webkitBackgroundImage(BSTR* p) mut => VT.[Friend]get_webkitBackgroundImage(&this, p);

	public HRESULT put_webkitBackgroundRepeat(BSTR v) mut => VT.[Friend]put_webkitBackgroundRepeat(&this, v);

	public HRESULT get_webkitBackgroundRepeat(BSTR* p) mut => VT.[Friend]get_webkitBackgroundRepeat(&this, p);

	public HRESULT put_webkitBackgroundOrigin(BSTR v) mut => VT.[Friend]put_webkitBackgroundOrigin(&this, v);

	public HRESULT get_webkitBackgroundOrigin(BSTR* p) mut => VT.[Friend]get_webkitBackgroundOrigin(&this, p);

	public HRESULT put_webkitBackgroundPosition(BSTR v) mut => VT.[Friend]put_webkitBackgroundPosition(&this, v);

	public HRESULT get_webkitBackgroundPosition(BSTR* p) mut => VT.[Friend]get_webkitBackgroundPosition(&this, p);

	public HRESULT put_webkitBackgroundPositionX(VARIANT v) mut => VT.[Friend]put_webkitBackgroundPositionX(&this, v);

	public HRESULT get_webkitBackgroundPositionX(VARIANT* p) mut => VT.[Friend]get_webkitBackgroundPositionX(&this, p);

	public HRESULT put_webkitBackgroundPositionY(VARIANT v) mut => VT.[Friend]put_webkitBackgroundPositionY(&this, v);

	public HRESULT get_webkitBackgroundPositionY(VARIANT* p) mut => VT.[Friend]get_webkitBackgroundPositionY(&this, p);

	public HRESULT put_webkitBackground(BSTR v) mut => VT.[Friend]put_webkitBackground(&this, v);

	public HRESULT get_webkitBackground(BSTR* p) mut => VT.[Friend]get_webkitBackground(&this, p);

	public HRESULT put_webkitTransformOrigin(BSTR v) mut => VT.[Friend]put_webkitTransformOrigin(&this, v);

	public HRESULT get_webkitTransformOrigin(BSTR* p) mut => VT.[Friend]get_webkitTransformOrigin(&this, p);

	public HRESULT put_msTextSizeAdjust(VARIANT v) mut => VT.[Friend]put_msTextSizeAdjust(&this, v);

	public HRESULT get_msTextSizeAdjust(VARIANT* p) mut => VT.[Friend]get_msTextSizeAdjust(&this, p);

	public HRESULT put_webkitTextSizeAdjust(VARIANT v) mut => VT.[Friend]put_webkitTextSizeAdjust(&this, v);

	public HRESULT get_webkitTextSizeAdjust(VARIANT* p) mut => VT.[Friend]get_webkitTextSizeAdjust(&this, p);

	public HRESULT put_webkitBorderImage(BSTR v) mut => VT.[Friend]put_webkitBorderImage(&this, v);

	public HRESULT get_webkitBorderImage(BSTR* p) mut => VT.[Friend]get_webkitBorderImage(&this, p);

	public HRESULT put_webkitBorderImageSource(BSTR v) mut => VT.[Friend]put_webkitBorderImageSource(&this, v);

	public HRESULT get_webkitBorderImageSource(BSTR* p) mut => VT.[Friend]get_webkitBorderImageSource(&this, p);

	public HRESULT put_webkitBorderImageSlice(BSTR v) mut => VT.[Friend]put_webkitBorderImageSlice(&this, v);

	public HRESULT get_webkitBorderImageSlice(BSTR* p) mut => VT.[Friend]get_webkitBorderImageSlice(&this, p);

	public HRESULT put_webkitBorderImageWidth(BSTR v) mut => VT.[Friend]put_webkitBorderImageWidth(&this, v);

	public HRESULT get_webkitBorderImageWidth(BSTR* p) mut => VT.[Friend]get_webkitBorderImageWidth(&this, p);

	public HRESULT put_webkitBorderImageOutset(BSTR v) mut => VT.[Friend]put_webkitBorderImageOutset(&this, v);

	public HRESULT get_webkitBorderImageOutset(BSTR* p) mut => VT.[Friend]get_webkitBorderImageOutset(&this, p);

	public HRESULT put_webkitBorderImageRepeat(BSTR v) mut => VT.[Friend]put_webkitBorderImageRepeat(&this, v);

	public HRESULT get_webkitBorderImageRepeat(BSTR* p) mut => VT.[Friend]get_webkitBorderImageRepeat(&this, p);

	public HRESULT put_webkitBoxSizing(BSTR v) mut => VT.[Friend]put_webkitBoxSizing(&this, v);

	public HRESULT get_webkitBoxSizing(BSTR* p) mut => VT.[Friend]get_webkitBoxSizing(&this, p);

	public HRESULT put_webkitAnimationFillMode(BSTR v) mut => VT.[Friend]put_webkitAnimationFillMode(&this, v);

	public HRESULT get_webkitAnimationFillMode(BSTR* p) mut => VT.[Friend]get_webkitAnimationFillMode(&this, p);
}

[CRepr]struct IHTMLStyleEnabled : IDispatch
{
	public new const Guid IID = .(0x305104c2, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR name, int16* p) msGetPropertyEnabled;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR name, int16 b) msPutPropertyEnabled;
	}


	public HRESULT msGetPropertyEnabled(BSTR name, int16* p) mut => VT.[Friend]msGetPropertyEnabled(&this, name, p);

	public HRESULT msPutPropertyEnabled(BSTR name, int16 b) mut => VT.[Friend]msPutPropertyEnabled(&this, name, b);
}

[CRepr]struct DispHTMLCSSStyleDeclaration : IDispatch
{
	public new const Guid IID = .(0x3059009a, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
	}

}

[CRepr]struct IHTMLStyle : IDispatch
{
	public new const Guid IID = .(0x3050f25e, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_fontFamily;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_fontFamily;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_fontStyle;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_fontStyle;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_fontVariant;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_fontVariant;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_fontWeight;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_fontWeight;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_fontSize;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_fontSize;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_font;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_font;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_color;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_color;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_background;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_background;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_backgroundColor;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_backgroundColor;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_backgroundImage;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_backgroundImage;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_backgroundRepeat;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_backgroundRepeat;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_backgroundAttachment;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_backgroundAttachment;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_backgroundPosition;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_backgroundPosition;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_backgroundPositionX;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_backgroundPositionX;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_backgroundPositionY;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_backgroundPositionY;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_wordSpacing;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_wordSpacing;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_letterSpacing;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_letterSpacing;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_textDecoration;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_textDecoration;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16 v) put_textDecorationNone;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16* p) get_textDecorationNone;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16 v) put_textDecorationUnderline;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16* p) get_textDecorationUnderline;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16 v) put_textDecorationOverline;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16* p) get_textDecorationOverline;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16 v) put_textDecorationLineThrough;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16* p) get_textDecorationLineThrough;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16 v) put_textDecorationBlink;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16* p) get_textDecorationBlink;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_verticalAlign;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_verticalAlign;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_textTransform;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_textTransform;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_textAlign;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_textAlign;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_textIndent;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_textIndent;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_lineHeight;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_lineHeight;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_marginTop;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_marginTop;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_marginRight;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_marginRight;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_marginBottom;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_marginBottom;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_marginLeft;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_marginLeft;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_margin;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_margin;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_paddingTop;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_paddingTop;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_paddingRight;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_paddingRight;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_paddingBottom;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_paddingBottom;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_paddingLeft;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_paddingLeft;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_padding;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_padding;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_border;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_border;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_borderTop;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_borderTop;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_borderRight;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_borderRight;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_borderBottom;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_borderBottom;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_borderLeft;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_borderLeft;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_borderColor;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_borderColor;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_borderTopColor;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_borderTopColor;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_borderRightColor;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_borderRightColor;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_borderBottomColor;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_borderBottomColor;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_borderLeftColor;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_borderLeftColor;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_borderWidth;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_borderWidth;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_borderTopWidth;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_borderTopWidth;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_borderRightWidth;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_borderRightWidth;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_borderBottomWidth;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_borderBottomWidth;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_borderLeftWidth;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_borderLeftWidth;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_borderStyle;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_borderStyle;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_borderTopStyle;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_borderTopStyle;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_borderRightStyle;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_borderRightStyle;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_borderBottomStyle;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_borderBottomStyle;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_borderLeftStyle;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_borderLeftStyle;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_width;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_width;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_height;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_height;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_styleFloat;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_styleFloat;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_clear;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_clear;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_display;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_display;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_visibility;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_visibility;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_listStyleType;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_listStyleType;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_listStylePosition;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_listStylePosition;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_listStyleImage;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_listStyleImage;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_listStyle;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_listStyle;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_whiteSpace;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_whiteSpace;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_top;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_top;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_left;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_left;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_position;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_zIndex;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_zIndex;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_overflow;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_overflow;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_pageBreakBefore;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_pageBreakBefore;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_pageBreakAfter;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_pageBreakAfter;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_cssText;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_cssText;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 v) put_pixelTop;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* p) get_pixelTop;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 v) put_pixelLeft;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* p) get_pixelLeft;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 v) put_pixelWidth;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* p) get_pixelWidth;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 v) put_pixelHeight;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* p) get_pixelHeight;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, float v) put_posTop;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, float* p) get_posTop;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, float v) put_posLeft;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, float* p) get_posLeft;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, float v) put_posWidth;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, float* p) get_posWidth;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, float v) put_posHeight;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, float* p) get_posHeight;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_cursor;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_cursor;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_clip;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_clip;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_filter;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_filter;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR strAttributeName, VARIANT AttributeValue, int32 lFlags) setAttribute;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR strAttributeName, int32 lFlags, VARIANT* AttributeValue) getAttribute;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR strAttributeName, int32 lFlags, int16* pfSuccess) removeAttribute;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* String) toString;
	}


	public HRESULT put_fontFamily(BSTR v) mut => VT.[Friend]put_fontFamily(&this, v);

	public HRESULT get_fontFamily(BSTR* p) mut => VT.[Friend]get_fontFamily(&this, p);

	public HRESULT put_fontStyle(BSTR v) mut => VT.[Friend]put_fontStyle(&this, v);

	public HRESULT get_fontStyle(BSTR* p) mut => VT.[Friend]get_fontStyle(&this, p);

	public HRESULT put_fontVariant(BSTR v) mut => VT.[Friend]put_fontVariant(&this, v);

	public HRESULT get_fontVariant(BSTR* p) mut => VT.[Friend]get_fontVariant(&this, p);

	public HRESULT put_fontWeight(BSTR v) mut => VT.[Friend]put_fontWeight(&this, v);

	public HRESULT get_fontWeight(BSTR* p) mut => VT.[Friend]get_fontWeight(&this, p);

	public HRESULT put_fontSize(VARIANT v) mut => VT.[Friend]put_fontSize(&this, v);

	public HRESULT get_fontSize(VARIANT* p) mut => VT.[Friend]get_fontSize(&this, p);

	public HRESULT put_font(BSTR v) mut => VT.[Friend]put_font(&this, v);

	public HRESULT get_font(BSTR* p) mut => VT.[Friend]get_font(&this, p);

	public HRESULT put_color(VARIANT v) mut => VT.[Friend]put_color(&this, v);

	public HRESULT get_color(VARIANT* p) mut => VT.[Friend]get_color(&this, p);

	public HRESULT put_background(BSTR v) mut => VT.[Friend]put_background(&this, v);

	public HRESULT get_background(BSTR* p) mut => VT.[Friend]get_background(&this, p);

	public HRESULT put_backgroundColor(VARIANT v) mut => VT.[Friend]put_backgroundColor(&this, v);

	public HRESULT get_backgroundColor(VARIANT* p) mut => VT.[Friend]get_backgroundColor(&this, p);

	public HRESULT put_backgroundImage(BSTR v) mut => VT.[Friend]put_backgroundImage(&this, v);

	public HRESULT get_backgroundImage(BSTR* p) mut => VT.[Friend]get_backgroundImage(&this, p);

	public HRESULT put_backgroundRepeat(BSTR v) mut => VT.[Friend]put_backgroundRepeat(&this, v);

	public HRESULT get_backgroundRepeat(BSTR* p) mut => VT.[Friend]get_backgroundRepeat(&this, p);

	public HRESULT put_backgroundAttachment(BSTR v) mut => VT.[Friend]put_backgroundAttachment(&this, v);

	public HRESULT get_backgroundAttachment(BSTR* p) mut => VT.[Friend]get_backgroundAttachment(&this, p);

	public HRESULT put_backgroundPosition(BSTR v) mut => VT.[Friend]put_backgroundPosition(&this, v);

	public HRESULT get_backgroundPosition(BSTR* p) mut => VT.[Friend]get_backgroundPosition(&this, p);

	public HRESULT put_backgroundPositionX(VARIANT v) mut => VT.[Friend]put_backgroundPositionX(&this, v);

	public HRESULT get_backgroundPositionX(VARIANT* p) mut => VT.[Friend]get_backgroundPositionX(&this, p);

	public HRESULT put_backgroundPositionY(VARIANT v) mut => VT.[Friend]put_backgroundPositionY(&this, v);

	public HRESULT get_backgroundPositionY(VARIANT* p) mut => VT.[Friend]get_backgroundPositionY(&this, p);

	public HRESULT put_wordSpacing(VARIANT v) mut => VT.[Friend]put_wordSpacing(&this, v);

	public HRESULT get_wordSpacing(VARIANT* p) mut => VT.[Friend]get_wordSpacing(&this, p);

	public HRESULT put_letterSpacing(VARIANT v) mut => VT.[Friend]put_letterSpacing(&this, v);

	public HRESULT get_letterSpacing(VARIANT* p) mut => VT.[Friend]get_letterSpacing(&this, p);

	public HRESULT put_textDecoration(BSTR v) mut => VT.[Friend]put_textDecoration(&this, v);

	public HRESULT get_textDecoration(BSTR* p) mut => VT.[Friend]get_textDecoration(&this, p);

	public HRESULT put_textDecorationNone(int16 v) mut => VT.[Friend]put_textDecorationNone(&this, v);

	public HRESULT get_textDecorationNone(int16* p) mut => VT.[Friend]get_textDecorationNone(&this, p);

	public HRESULT put_textDecorationUnderline(int16 v) mut => VT.[Friend]put_textDecorationUnderline(&this, v);

	public HRESULT get_textDecorationUnderline(int16* p) mut => VT.[Friend]get_textDecorationUnderline(&this, p);

	public HRESULT put_textDecorationOverline(int16 v) mut => VT.[Friend]put_textDecorationOverline(&this, v);

	public HRESULT get_textDecorationOverline(int16* p) mut => VT.[Friend]get_textDecorationOverline(&this, p);

	public HRESULT put_textDecorationLineThrough(int16 v) mut => VT.[Friend]put_textDecorationLineThrough(&this, v);

	public HRESULT get_textDecorationLineThrough(int16* p) mut => VT.[Friend]get_textDecorationLineThrough(&this, p);

	public HRESULT put_textDecorationBlink(int16 v) mut => VT.[Friend]put_textDecorationBlink(&this, v);

	public HRESULT get_textDecorationBlink(int16* p) mut => VT.[Friend]get_textDecorationBlink(&this, p);

	public HRESULT put_verticalAlign(VARIANT v) mut => VT.[Friend]put_verticalAlign(&this, v);

	public HRESULT get_verticalAlign(VARIANT* p) mut => VT.[Friend]get_verticalAlign(&this, p);

	public HRESULT put_textTransform(BSTR v) mut => VT.[Friend]put_textTransform(&this, v);

	public HRESULT get_textTransform(BSTR* p) mut => VT.[Friend]get_textTransform(&this, p);

	public HRESULT put_textAlign(BSTR v) mut => VT.[Friend]put_textAlign(&this, v);

	public HRESULT get_textAlign(BSTR* p) mut => VT.[Friend]get_textAlign(&this, p);

	public HRESULT put_textIndent(VARIANT v) mut => VT.[Friend]put_textIndent(&this, v);

	public HRESULT get_textIndent(VARIANT* p) mut => VT.[Friend]get_textIndent(&this, p);

	public HRESULT put_lineHeight(VARIANT v) mut => VT.[Friend]put_lineHeight(&this, v);

	public HRESULT get_lineHeight(VARIANT* p) mut => VT.[Friend]get_lineHeight(&this, p);

	public HRESULT put_marginTop(VARIANT v) mut => VT.[Friend]put_marginTop(&this, v);

	public HRESULT get_marginTop(VARIANT* p) mut => VT.[Friend]get_marginTop(&this, p);

	public HRESULT put_marginRight(VARIANT v) mut => VT.[Friend]put_marginRight(&this, v);

	public HRESULT get_marginRight(VARIANT* p) mut => VT.[Friend]get_marginRight(&this, p);

	public HRESULT put_marginBottom(VARIANT v) mut => VT.[Friend]put_marginBottom(&this, v);

	public HRESULT get_marginBottom(VARIANT* p) mut => VT.[Friend]get_marginBottom(&this, p);

	public HRESULT put_marginLeft(VARIANT v) mut => VT.[Friend]put_marginLeft(&this, v);

	public HRESULT get_marginLeft(VARIANT* p) mut => VT.[Friend]get_marginLeft(&this, p);

	public HRESULT put_margin(BSTR v) mut => VT.[Friend]put_margin(&this, v);

	public HRESULT get_margin(BSTR* p) mut => VT.[Friend]get_margin(&this, p);

	public HRESULT put_paddingTop(VARIANT v) mut => VT.[Friend]put_paddingTop(&this, v);

	public HRESULT get_paddingTop(VARIANT* p) mut => VT.[Friend]get_paddingTop(&this, p);

	public HRESULT put_paddingRight(VARIANT v) mut => VT.[Friend]put_paddingRight(&this, v);

	public HRESULT get_paddingRight(VARIANT* p) mut => VT.[Friend]get_paddingRight(&this, p);

	public HRESULT put_paddingBottom(VARIANT v) mut => VT.[Friend]put_paddingBottom(&this, v);

	public HRESULT get_paddingBottom(VARIANT* p) mut => VT.[Friend]get_paddingBottom(&this, p);

	public HRESULT put_paddingLeft(VARIANT v) mut => VT.[Friend]put_paddingLeft(&this, v);

	public HRESULT get_paddingLeft(VARIANT* p) mut => VT.[Friend]get_paddingLeft(&this, p);

	public HRESULT put_padding(BSTR v) mut => VT.[Friend]put_padding(&this, v);

	public HRESULT get_padding(BSTR* p) mut => VT.[Friend]get_padding(&this, p);

	public HRESULT put_border(BSTR v) mut => VT.[Friend]put_border(&this, v);

	public HRESULT get_border(BSTR* p) mut => VT.[Friend]get_border(&this, p);

	public HRESULT put_borderTop(BSTR v) mut => VT.[Friend]put_borderTop(&this, v);

	public HRESULT get_borderTop(BSTR* p) mut => VT.[Friend]get_borderTop(&this, p);

	public HRESULT put_borderRight(BSTR v) mut => VT.[Friend]put_borderRight(&this, v);

	public HRESULT get_borderRight(BSTR* p) mut => VT.[Friend]get_borderRight(&this, p);

	public HRESULT put_borderBottom(BSTR v) mut => VT.[Friend]put_borderBottom(&this, v);

	public HRESULT get_borderBottom(BSTR* p) mut => VT.[Friend]get_borderBottom(&this, p);

	public HRESULT put_borderLeft(BSTR v) mut => VT.[Friend]put_borderLeft(&this, v);

	public HRESULT get_borderLeft(BSTR* p) mut => VT.[Friend]get_borderLeft(&this, p);

	public HRESULT put_borderColor(BSTR v) mut => VT.[Friend]put_borderColor(&this, v);

	public HRESULT get_borderColor(BSTR* p) mut => VT.[Friend]get_borderColor(&this, p);

	public HRESULT put_borderTopColor(VARIANT v) mut => VT.[Friend]put_borderTopColor(&this, v);

	public HRESULT get_borderTopColor(VARIANT* p) mut => VT.[Friend]get_borderTopColor(&this, p);

	public HRESULT put_borderRightColor(VARIANT v) mut => VT.[Friend]put_borderRightColor(&this, v);

	public HRESULT get_borderRightColor(VARIANT* p) mut => VT.[Friend]get_borderRightColor(&this, p);

	public HRESULT put_borderBottomColor(VARIANT v) mut => VT.[Friend]put_borderBottomColor(&this, v);

	public HRESULT get_borderBottomColor(VARIANT* p) mut => VT.[Friend]get_borderBottomColor(&this, p);

	public HRESULT put_borderLeftColor(VARIANT v) mut => VT.[Friend]put_borderLeftColor(&this, v);

	public HRESULT get_borderLeftColor(VARIANT* p) mut => VT.[Friend]get_borderLeftColor(&this, p);

	public HRESULT put_borderWidth(BSTR v) mut => VT.[Friend]put_borderWidth(&this, v);

	public HRESULT get_borderWidth(BSTR* p) mut => VT.[Friend]get_borderWidth(&this, p);

	public HRESULT put_borderTopWidth(VARIANT v) mut => VT.[Friend]put_borderTopWidth(&this, v);

	public HRESULT get_borderTopWidth(VARIANT* p) mut => VT.[Friend]get_borderTopWidth(&this, p);

	public HRESULT put_borderRightWidth(VARIANT v) mut => VT.[Friend]put_borderRightWidth(&this, v);

	public HRESULT get_borderRightWidth(VARIANT* p) mut => VT.[Friend]get_borderRightWidth(&this, p);

	public HRESULT put_borderBottomWidth(VARIANT v) mut => VT.[Friend]put_borderBottomWidth(&this, v);

	public HRESULT get_borderBottomWidth(VARIANT* p) mut => VT.[Friend]get_borderBottomWidth(&this, p);

	public HRESULT put_borderLeftWidth(VARIANT v) mut => VT.[Friend]put_borderLeftWidth(&this, v);

	public HRESULT get_borderLeftWidth(VARIANT* p) mut => VT.[Friend]get_borderLeftWidth(&this, p);

	public HRESULT put_borderStyle(BSTR v) mut => VT.[Friend]put_borderStyle(&this, v);

	public HRESULT get_borderStyle(BSTR* p) mut => VT.[Friend]get_borderStyle(&this, p);

	public HRESULT put_borderTopStyle(BSTR v) mut => VT.[Friend]put_borderTopStyle(&this, v);

	public HRESULT get_borderTopStyle(BSTR* p) mut => VT.[Friend]get_borderTopStyle(&this, p);

	public HRESULT put_borderRightStyle(BSTR v) mut => VT.[Friend]put_borderRightStyle(&this, v);

	public HRESULT get_borderRightStyle(BSTR* p) mut => VT.[Friend]get_borderRightStyle(&this, p);

	public HRESULT put_borderBottomStyle(BSTR v) mut => VT.[Friend]put_borderBottomStyle(&this, v);

	public HRESULT get_borderBottomStyle(BSTR* p) mut => VT.[Friend]get_borderBottomStyle(&this, p);

	public HRESULT put_borderLeftStyle(BSTR v) mut => VT.[Friend]put_borderLeftStyle(&this, v);

	public HRESULT get_borderLeftStyle(BSTR* p) mut => VT.[Friend]get_borderLeftStyle(&this, p);

	public HRESULT put_width(VARIANT v) mut => VT.[Friend]put_width(&this, v);

	public HRESULT get_width(VARIANT* p) mut => VT.[Friend]get_width(&this, p);

	public HRESULT put_height(VARIANT v) mut => VT.[Friend]put_height(&this, v);

	public HRESULT get_height(VARIANT* p) mut => VT.[Friend]get_height(&this, p);

	public HRESULT put_styleFloat(BSTR v) mut => VT.[Friend]put_styleFloat(&this, v);

	public HRESULT get_styleFloat(BSTR* p) mut => VT.[Friend]get_styleFloat(&this, p);

	public HRESULT put_clear(BSTR v) mut => VT.[Friend]put_clear(&this, v);

	public HRESULT get_clear(BSTR* p) mut => VT.[Friend]get_clear(&this, p);

	public HRESULT put_display(BSTR v) mut => VT.[Friend]put_display(&this, v);

	public HRESULT get_display(BSTR* p) mut => VT.[Friend]get_display(&this, p);

	public HRESULT put_visibility(BSTR v) mut => VT.[Friend]put_visibility(&this, v);

	public HRESULT get_visibility(BSTR* p) mut => VT.[Friend]get_visibility(&this, p);

	public HRESULT put_listStyleType(BSTR v) mut => VT.[Friend]put_listStyleType(&this, v);

	public HRESULT get_listStyleType(BSTR* p) mut => VT.[Friend]get_listStyleType(&this, p);

	public HRESULT put_listStylePosition(BSTR v) mut => VT.[Friend]put_listStylePosition(&this, v);

	public HRESULT get_listStylePosition(BSTR* p) mut => VT.[Friend]get_listStylePosition(&this, p);

	public HRESULT put_listStyleImage(BSTR v) mut => VT.[Friend]put_listStyleImage(&this, v);

	public HRESULT get_listStyleImage(BSTR* p) mut => VT.[Friend]get_listStyleImage(&this, p);

	public HRESULT put_listStyle(BSTR v) mut => VT.[Friend]put_listStyle(&this, v);

	public HRESULT get_listStyle(BSTR* p) mut => VT.[Friend]get_listStyle(&this, p);

	public HRESULT put_whiteSpace(BSTR v) mut => VT.[Friend]put_whiteSpace(&this, v);

	public HRESULT get_whiteSpace(BSTR* p) mut => VT.[Friend]get_whiteSpace(&this, p);

	public HRESULT put_top(VARIANT v) mut => VT.[Friend]put_top(&this, v);

	public HRESULT get_top(VARIANT* p) mut => VT.[Friend]get_top(&this, p);

	public HRESULT put_left(VARIANT v) mut => VT.[Friend]put_left(&this, v);

	public HRESULT get_left(VARIANT* p) mut => VT.[Friend]get_left(&this, p);

	public HRESULT get_position(BSTR* p) mut => VT.[Friend]get_position(&this, p);

	public HRESULT put_zIndex(VARIANT v) mut => VT.[Friend]put_zIndex(&this, v);

	public HRESULT get_zIndex(VARIANT* p) mut => VT.[Friend]get_zIndex(&this, p);

	public HRESULT put_overflow(BSTR v) mut => VT.[Friend]put_overflow(&this, v);

	public HRESULT get_overflow(BSTR* p) mut => VT.[Friend]get_overflow(&this, p);

	public HRESULT put_pageBreakBefore(BSTR v) mut => VT.[Friend]put_pageBreakBefore(&this, v);

	public HRESULT get_pageBreakBefore(BSTR* p) mut => VT.[Friend]get_pageBreakBefore(&this, p);

	public HRESULT put_pageBreakAfter(BSTR v) mut => VT.[Friend]put_pageBreakAfter(&this, v);

	public HRESULT get_pageBreakAfter(BSTR* p) mut => VT.[Friend]get_pageBreakAfter(&this, p);

	public HRESULT put_cssText(BSTR v) mut => VT.[Friend]put_cssText(&this, v);

	public HRESULT get_cssText(BSTR* p) mut => VT.[Friend]get_cssText(&this, p);

	public HRESULT put_pixelTop(int32 v) mut => VT.[Friend]put_pixelTop(&this, v);

	public HRESULT get_pixelTop(int32* p) mut => VT.[Friend]get_pixelTop(&this, p);

	public HRESULT put_pixelLeft(int32 v) mut => VT.[Friend]put_pixelLeft(&this, v);

	public HRESULT get_pixelLeft(int32* p) mut => VT.[Friend]get_pixelLeft(&this, p);

	public HRESULT put_pixelWidth(int32 v) mut => VT.[Friend]put_pixelWidth(&this, v);

	public HRESULT get_pixelWidth(int32* p) mut => VT.[Friend]get_pixelWidth(&this, p);

	public HRESULT put_pixelHeight(int32 v) mut => VT.[Friend]put_pixelHeight(&this, v);

	public HRESULT get_pixelHeight(int32* p) mut => VT.[Friend]get_pixelHeight(&this, p);

	public HRESULT put_posTop(float v) mut => VT.[Friend]put_posTop(&this, v);

	public HRESULT get_posTop(float* p) mut => VT.[Friend]get_posTop(&this, p);

	public HRESULT put_posLeft(float v) mut => VT.[Friend]put_posLeft(&this, v);

	public HRESULT get_posLeft(float* p) mut => VT.[Friend]get_posLeft(&this, p);

	public HRESULT put_posWidth(float v) mut => VT.[Friend]put_posWidth(&this, v);

	public HRESULT get_posWidth(float* p) mut => VT.[Friend]get_posWidth(&this, p);

	public HRESULT put_posHeight(float v) mut => VT.[Friend]put_posHeight(&this, v);

	public HRESULT get_posHeight(float* p) mut => VT.[Friend]get_posHeight(&this, p);

	public HRESULT put_cursor(BSTR v) mut => VT.[Friend]put_cursor(&this, v);

	public HRESULT get_cursor(BSTR* p) mut => VT.[Friend]get_cursor(&this, p);

	public HRESULT put_clip(BSTR v) mut => VT.[Friend]put_clip(&this, v);

	public HRESULT get_clip(BSTR* p) mut => VT.[Friend]get_clip(&this, p);

	public HRESULT put_filter(BSTR v) mut => VT.[Friend]put_filter(&this, v);

	public HRESULT get_filter(BSTR* p) mut => VT.[Friend]get_filter(&this, p);

	public HRESULT setAttribute(BSTR strAttributeName, VARIANT AttributeValue, int32 lFlags) mut => VT.[Friend]setAttribute(&this, strAttributeName, AttributeValue, lFlags);

	public HRESULT getAttribute(BSTR strAttributeName, int32 lFlags, VARIANT* AttributeValue) mut => VT.[Friend]getAttribute(&this, strAttributeName, lFlags, AttributeValue);

	public HRESULT removeAttribute(BSTR strAttributeName, int32 lFlags, int16* pfSuccess) mut => VT.[Friend]removeAttribute(&this, strAttributeName, lFlags, pfSuccess);

	public HRESULT toString(BSTR* String) mut => VT.[Friend]toString(&this, String);
}

[CRepr]struct IHTMLStyle2 : IDispatch
{
	public new const Guid IID = .(0x3050f4a2, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_tableLayout;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_tableLayout;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_borderCollapse;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_borderCollapse;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_direction;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_direction;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_behavior;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_behavior;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR propname, BSTR expression, BSTR language) setExpression;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR propname, VARIANT* expression) getExpression;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR propname, int16* pfSuccess) removeExpression;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_position;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_position;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_unicodeBidi;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_unicodeBidi;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_bottom;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_bottom;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_right;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_right;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 v) put_pixelBottom;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* p) get_pixelBottom;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 v) put_pixelRight;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* p) get_pixelRight;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, float v) put_posBottom;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, float* p) get_posBottom;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, float v) put_posRight;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, float* p) get_posRight;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_imeMode;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_imeMode;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_rubyAlign;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_rubyAlign;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_rubyPosition;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_rubyPosition;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_rubyOverhang;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_rubyOverhang;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_layoutGridChar;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_layoutGridChar;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_layoutGridLine;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_layoutGridLine;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_layoutGridMode;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_layoutGridMode;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_layoutGridType;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_layoutGridType;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_layoutGrid;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_layoutGrid;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_wordBreak;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_wordBreak;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_lineBreak;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_lineBreak;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_textJustify;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_textJustify;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_textJustifyTrim;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_textJustifyTrim;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_textKashida;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_textKashida;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_textAutospace;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_textAutospace;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_overflowX;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_overflowX;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_overflowY;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_overflowY;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_accelerator;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_accelerator;
	}


	public HRESULT put_tableLayout(BSTR v) mut => VT.[Friend]put_tableLayout(&this, v);

	public HRESULT get_tableLayout(BSTR* p) mut => VT.[Friend]get_tableLayout(&this, p);

	public HRESULT put_borderCollapse(BSTR v) mut => VT.[Friend]put_borderCollapse(&this, v);

	public HRESULT get_borderCollapse(BSTR* p) mut => VT.[Friend]get_borderCollapse(&this, p);

	public HRESULT put_direction(BSTR v) mut => VT.[Friend]put_direction(&this, v);

	public HRESULT get_direction(BSTR* p) mut => VT.[Friend]get_direction(&this, p);

	public HRESULT put_behavior(BSTR v) mut => VT.[Friend]put_behavior(&this, v);

	public HRESULT get_behavior(BSTR* p) mut => VT.[Friend]get_behavior(&this, p);

	public HRESULT setExpression(BSTR propname, BSTR expression, BSTR language) mut => VT.[Friend]setExpression(&this, propname, expression, language);

	public HRESULT getExpression(BSTR propname, VARIANT* expression) mut => VT.[Friend]getExpression(&this, propname, expression);

	public HRESULT removeExpression(BSTR propname, int16* pfSuccess) mut => VT.[Friend]removeExpression(&this, propname, pfSuccess);

	public HRESULT put_position(BSTR v) mut => VT.[Friend]put_position(&this, v);

	public HRESULT get_position(BSTR* p) mut => VT.[Friend]get_position(&this, p);

	public HRESULT put_unicodeBidi(BSTR v) mut => VT.[Friend]put_unicodeBidi(&this, v);

	public HRESULT get_unicodeBidi(BSTR* p) mut => VT.[Friend]get_unicodeBidi(&this, p);

	public HRESULT put_bottom(VARIANT v) mut => VT.[Friend]put_bottom(&this, v);

	public HRESULT get_bottom(VARIANT* p) mut => VT.[Friend]get_bottom(&this, p);

	public HRESULT put_right(VARIANT v) mut => VT.[Friend]put_right(&this, v);

	public HRESULT get_right(VARIANT* p) mut => VT.[Friend]get_right(&this, p);

	public HRESULT put_pixelBottom(int32 v) mut => VT.[Friend]put_pixelBottom(&this, v);

	public HRESULT get_pixelBottom(int32* p) mut => VT.[Friend]get_pixelBottom(&this, p);

	public HRESULT put_pixelRight(int32 v) mut => VT.[Friend]put_pixelRight(&this, v);

	public HRESULT get_pixelRight(int32* p) mut => VT.[Friend]get_pixelRight(&this, p);

	public HRESULT put_posBottom(float v) mut => VT.[Friend]put_posBottom(&this, v);

	public HRESULT get_posBottom(float* p) mut => VT.[Friend]get_posBottom(&this, p);

	public HRESULT put_posRight(float v) mut => VT.[Friend]put_posRight(&this, v);

	public HRESULT get_posRight(float* p) mut => VT.[Friend]get_posRight(&this, p);

	public HRESULT put_imeMode(BSTR v) mut => VT.[Friend]put_imeMode(&this, v);

	public HRESULT get_imeMode(BSTR* p) mut => VT.[Friend]get_imeMode(&this, p);

	public HRESULT put_rubyAlign(BSTR v) mut => VT.[Friend]put_rubyAlign(&this, v);

	public HRESULT get_rubyAlign(BSTR* p) mut => VT.[Friend]get_rubyAlign(&this, p);

	public HRESULT put_rubyPosition(BSTR v) mut => VT.[Friend]put_rubyPosition(&this, v);

	public HRESULT get_rubyPosition(BSTR* p) mut => VT.[Friend]get_rubyPosition(&this, p);

	public HRESULT put_rubyOverhang(BSTR v) mut => VT.[Friend]put_rubyOverhang(&this, v);

	public HRESULT get_rubyOverhang(BSTR* p) mut => VT.[Friend]get_rubyOverhang(&this, p);

	public HRESULT put_layoutGridChar(VARIANT v) mut => VT.[Friend]put_layoutGridChar(&this, v);

	public HRESULT get_layoutGridChar(VARIANT* p) mut => VT.[Friend]get_layoutGridChar(&this, p);

	public HRESULT put_layoutGridLine(VARIANT v) mut => VT.[Friend]put_layoutGridLine(&this, v);

	public HRESULT get_layoutGridLine(VARIANT* p) mut => VT.[Friend]get_layoutGridLine(&this, p);

	public HRESULT put_layoutGridMode(BSTR v) mut => VT.[Friend]put_layoutGridMode(&this, v);

	public HRESULT get_layoutGridMode(BSTR* p) mut => VT.[Friend]get_layoutGridMode(&this, p);

	public HRESULT put_layoutGridType(BSTR v) mut => VT.[Friend]put_layoutGridType(&this, v);

	public HRESULT get_layoutGridType(BSTR* p) mut => VT.[Friend]get_layoutGridType(&this, p);

	public HRESULT put_layoutGrid(BSTR v) mut => VT.[Friend]put_layoutGrid(&this, v);

	public HRESULT get_layoutGrid(BSTR* p) mut => VT.[Friend]get_layoutGrid(&this, p);

	public HRESULT put_wordBreak(BSTR v) mut => VT.[Friend]put_wordBreak(&this, v);

	public HRESULT get_wordBreak(BSTR* p) mut => VT.[Friend]get_wordBreak(&this, p);

	public HRESULT put_lineBreak(BSTR v) mut => VT.[Friend]put_lineBreak(&this, v);

	public HRESULT get_lineBreak(BSTR* p) mut => VT.[Friend]get_lineBreak(&this, p);

	public HRESULT put_textJustify(BSTR v) mut => VT.[Friend]put_textJustify(&this, v);

	public HRESULT get_textJustify(BSTR* p) mut => VT.[Friend]get_textJustify(&this, p);

	public HRESULT put_textJustifyTrim(BSTR v) mut => VT.[Friend]put_textJustifyTrim(&this, v);

	public HRESULT get_textJustifyTrim(BSTR* p) mut => VT.[Friend]get_textJustifyTrim(&this, p);

	public HRESULT put_textKashida(VARIANT v) mut => VT.[Friend]put_textKashida(&this, v);

	public HRESULT get_textKashida(VARIANT* p) mut => VT.[Friend]get_textKashida(&this, p);

	public HRESULT put_textAutospace(BSTR v) mut => VT.[Friend]put_textAutospace(&this, v);

	public HRESULT get_textAutospace(BSTR* p) mut => VT.[Friend]get_textAutospace(&this, p);

	public HRESULT put_overflowX(BSTR v) mut => VT.[Friend]put_overflowX(&this, v);

	public HRESULT get_overflowX(BSTR* p) mut => VT.[Friend]get_overflowX(&this, p);

	public HRESULT put_overflowY(BSTR v) mut => VT.[Friend]put_overflowY(&this, v);

	public HRESULT get_overflowY(BSTR* p) mut => VT.[Friend]get_overflowY(&this, p);

	public HRESULT put_accelerator(BSTR v) mut => VT.[Friend]put_accelerator(&this, v);

	public HRESULT get_accelerator(BSTR* p) mut => VT.[Friend]get_accelerator(&this, p);
}

[CRepr]struct IHTMLStyle3 : IDispatch
{
	public new const Guid IID = .(0x3050f656, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_layoutFlow;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_layoutFlow;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_zoom;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_zoom;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_wordWrap;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_wordWrap;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_textUnderlinePosition;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_textUnderlinePosition;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_scrollbarBaseColor;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_scrollbarBaseColor;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_scrollbarFaceColor;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_scrollbarFaceColor;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_scrollbar3dLightColor;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_scrollbar3dLightColor;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_scrollbarShadowColor;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_scrollbarShadowColor;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_scrollbarHighlightColor;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_scrollbarHighlightColor;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_scrollbarDarkShadowColor;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_scrollbarDarkShadowColor;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_scrollbarArrowColor;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_scrollbarArrowColor;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_scrollbarTrackColor;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_scrollbarTrackColor;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_writingMode;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_writingMode;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_textAlignLast;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_textAlignLast;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_textKashidaSpace;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_textKashidaSpace;
	}


	public HRESULT put_layoutFlow(BSTR v) mut => VT.[Friend]put_layoutFlow(&this, v);

	public HRESULT get_layoutFlow(BSTR* p) mut => VT.[Friend]get_layoutFlow(&this, p);

	public HRESULT put_zoom(VARIANT v) mut => VT.[Friend]put_zoom(&this, v);

	public HRESULT get_zoom(VARIANT* p) mut => VT.[Friend]get_zoom(&this, p);

	public HRESULT put_wordWrap(BSTR v) mut => VT.[Friend]put_wordWrap(&this, v);

	public HRESULT get_wordWrap(BSTR* p) mut => VT.[Friend]get_wordWrap(&this, p);

	public HRESULT put_textUnderlinePosition(BSTR v) mut => VT.[Friend]put_textUnderlinePosition(&this, v);

	public HRESULT get_textUnderlinePosition(BSTR* p) mut => VT.[Friend]get_textUnderlinePosition(&this, p);

	public HRESULT put_scrollbarBaseColor(VARIANT v) mut => VT.[Friend]put_scrollbarBaseColor(&this, v);

	public HRESULT get_scrollbarBaseColor(VARIANT* p) mut => VT.[Friend]get_scrollbarBaseColor(&this, p);

	public HRESULT put_scrollbarFaceColor(VARIANT v) mut => VT.[Friend]put_scrollbarFaceColor(&this, v);

	public HRESULT get_scrollbarFaceColor(VARIANT* p) mut => VT.[Friend]get_scrollbarFaceColor(&this, p);

	public HRESULT put_scrollbar3dLightColor(VARIANT v) mut => VT.[Friend]put_scrollbar3dLightColor(&this, v);

	public HRESULT get_scrollbar3dLightColor(VARIANT* p) mut => VT.[Friend]get_scrollbar3dLightColor(&this, p);

	public HRESULT put_scrollbarShadowColor(VARIANT v) mut => VT.[Friend]put_scrollbarShadowColor(&this, v);

	public HRESULT get_scrollbarShadowColor(VARIANT* p) mut => VT.[Friend]get_scrollbarShadowColor(&this, p);

	public HRESULT put_scrollbarHighlightColor(VARIANT v) mut => VT.[Friend]put_scrollbarHighlightColor(&this, v);

	public HRESULT get_scrollbarHighlightColor(VARIANT* p) mut => VT.[Friend]get_scrollbarHighlightColor(&this, p);

	public HRESULT put_scrollbarDarkShadowColor(VARIANT v) mut => VT.[Friend]put_scrollbarDarkShadowColor(&this, v);

	public HRESULT get_scrollbarDarkShadowColor(VARIANT* p) mut => VT.[Friend]get_scrollbarDarkShadowColor(&this, p);

	public HRESULT put_scrollbarArrowColor(VARIANT v) mut => VT.[Friend]put_scrollbarArrowColor(&this, v);

	public HRESULT get_scrollbarArrowColor(VARIANT* p) mut => VT.[Friend]get_scrollbarArrowColor(&this, p);

	public HRESULT put_scrollbarTrackColor(VARIANT v) mut => VT.[Friend]put_scrollbarTrackColor(&this, v);

	public HRESULT get_scrollbarTrackColor(VARIANT* p) mut => VT.[Friend]get_scrollbarTrackColor(&this, p);

	public HRESULT put_writingMode(BSTR v) mut => VT.[Friend]put_writingMode(&this, v);

	public HRESULT get_writingMode(BSTR* p) mut => VT.[Friend]get_writingMode(&this, p);

	public HRESULT put_textAlignLast(BSTR v) mut => VT.[Friend]put_textAlignLast(&this, v);

	public HRESULT get_textAlignLast(BSTR* p) mut => VT.[Friend]get_textAlignLast(&this, p);

	public HRESULT put_textKashidaSpace(VARIANT v) mut => VT.[Friend]put_textKashidaSpace(&this, v);

	public HRESULT get_textKashidaSpace(VARIANT* p) mut => VT.[Friend]get_textKashidaSpace(&this, p);
}

[CRepr]struct IHTMLStyle4 : IDispatch
{
	public new const Guid IID = .(0x3050f816, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_textOverflow;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_textOverflow;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_minHeight;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_minHeight;
	}


	public HRESULT put_textOverflow(BSTR v) mut => VT.[Friend]put_textOverflow(&this, v);

	public HRESULT get_textOverflow(BSTR* p) mut => VT.[Friend]get_textOverflow(&this, p);

	public HRESULT put_minHeight(VARIANT v) mut => VT.[Friend]put_minHeight(&this, v);

	public HRESULT get_minHeight(VARIANT* p) mut => VT.[Friend]get_minHeight(&this, p);
}

[CRepr]struct IHTMLStyle5 : IDispatch
{
	public new const Guid IID = .(0x3050f33a, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_msInterpolationMode;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_msInterpolationMode;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_maxHeight;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_maxHeight;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_minWidth;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_minWidth;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_maxWidth;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_maxWidth;
	}


	public HRESULT put_msInterpolationMode(BSTR v) mut => VT.[Friend]put_msInterpolationMode(&this, v);

	public HRESULT get_msInterpolationMode(BSTR* p) mut => VT.[Friend]get_msInterpolationMode(&this, p);

	public HRESULT put_maxHeight(VARIANT v) mut => VT.[Friend]put_maxHeight(&this, v);

	public HRESULT get_maxHeight(VARIANT* p) mut => VT.[Friend]get_maxHeight(&this, p);

	public HRESULT put_minWidth(VARIANT v) mut => VT.[Friend]put_minWidth(&this, v);

	public HRESULT get_minWidth(VARIANT* p) mut => VT.[Friend]get_minWidth(&this, p);

	public HRESULT put_maxWidth(VARIANT v) mut => VT.[Friend]put_maxWidth(&this, v);

	public HRESULT get_maxWidth(VARIANT* p) mut => VT.[Friend]get_maxWidth(&this, p);
}

[CRepr]struct IHTMLStyle6 : IDispatch
{
	public new const Guid IID = .(0x30510480, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_content;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_content;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_captionSide;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_captionSide;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_counterIncrement;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_counterIncrement;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_counterReset;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_counterReset;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_outline;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_outline;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_outlineWidth;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_outlineWidth;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_outlineStyle;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_outlineStyle;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_outlineColor;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_outlineColor;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_boxSizing;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_boxSizing;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_borderSpacing;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_borderSpacing;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_orphans;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_orphans;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_widows;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_widows;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_pageBreakInside;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_pageBreakInside;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_emptyCells;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_emptyCells;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_msBlockProgression;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_msBlockProgression;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_quotes;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_quotes;
	}


	public HRESULT put_content(BSTR v) mut => VT.[Friend]put_content(&this, v);

	public HRESULT get_content(BSTR* p) mut => VT.[Friend]get_content(&this, p);

	public HRESULT put_captionSide(BSTR v) mut => VT.[Friend]put_captionSide(&this, v);

	public HRESULT get_captionSide(BSTR* p) mut => VT.[Friend]get_captionSide(&this, p);

	public HRESULT put_counterIncrement(BSTR v) mut => VT.[Friend]put_counterIncrement(&this, v);

	public HRESULT get_counterIncrement(BSTR* p) mut => VT.[Friend]get_counterIncrement(&this, p);

	public HRESULT put_counterReset(BSTR v) mut => VT.[Friend]put_counterReset(&this, v);

	public HRESULT get_counterReset(BSTR* p) mut => VT.[Friend]get_counterReset(&this, p);

	public HRESULT put_outline(BSTR v) mut => VT.[Friend]put_outline(&this, v);

	public HRESULT get_outline(BSTR* p) mut => VT.[Friend]get_outline(&this, p);

	public HRESULT put_outlineWidth(VARIANT v) mut => VT.[Friend]put_outlineWidth(&this, v);

	public HRESULT get_outlineWidth(VARIANT* p) mut => VT.[Friend]get_outlineWidth(&this, p);

	public HRESULT put_outlineStyle(BSTR v) mut => VT.[Friend]put_outlineStyle(&this, v);

	public HRESULT get_outlineStyle(BSTR* p) mut => VT.[Friend]get_outlineStyle(&this, p);

	public HRESULT put_outlineColor(VARIANT v) mut => VT.[Friend]put_outlineColor(&this, v);

	public HRESULT get_outlineColor(VARIANT* p) mut => VT.[Friend]get_outlineColor(&this, p);

	public HRESULT put_boxSizing(BSTR v) mut => VT.[Friend]put_boxSizing(&this, v);

	public HRESULT get_boxSizing(BSTR* p) mut => VT.[Friend]get_boxSizing(&this, p);

	public HRESULT put_borderSpacing(BSTR v) mut => VT.[Friend]put_borderSpacing(&this, v);

	public HRESULT get_borderSpacing(BSTR* p) mut => VT.[Friend]get_borderSpacing(&this, p);

	public HRESULT put_orphans(VARIANT v) mut => VT.[Friend]put_orphans(&this, v);

	public HRESULT get_orphans(VARIANT* p) mut => VT.[Friend]get_orphans(&this, p);

	public HRESULT put_widows(VARIANT v) mut => VT.[Friend]put_widows(&this, v);

	public HRESULT get_widows(VARIANT* p) mut => VT.[Friend]get_widows(&this, p);

	public HRESULT put_pageBreakInside(BSTR v) mut => VT.[Friend]put_pageBreakInside(&this, v);

	public HRESULT get_pageBreakInside(BSTR* p) mut => VT.[Friend]get_pageBreakInside(&this, p);

	public HRESULT put_emptyCells(BSTR v) mut => VT.[Friend]put_emptyCells(&this, v);

	public HRESULT get_emptyCells(BSTR* p) mut => VT.[Friend]get_emptyCells(&this, p);

	public HRESULT put_msBlockProgression(BSTR v) mut => VT.[Friend]put_msBlockProgression(&this, v);

	public HRESULT get_msBlockProgression(BSTR* p) mut => VT.[Friend]get_msBlockProgression(&this, p);

	public HRESULT put_quotes(BSTR v) mut => VT.[Friend]put_quotes(&this, v);

	public HRESULT get_quotes(BSTR* p) mut => VT.[Friend]get_quotes(&this, p);
}

[CRepr]struct IHTMLRuleStyle : IDispatch
{
	public new const Guid IID = .(0x3050f3cf, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_fontFamily;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_fontFamily;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_fontStyle;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_fontStyle;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_fontVariant;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_fontVariant;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_fontWeight;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_fontWeight;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_fontSize;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_fontSize;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_font;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_font;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_color;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_color;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_background;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_background;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_backgroundColor;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_backgroundColor;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_backgroundImage;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_backgroundImage;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_backgroundRepeat;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_backgroundRepeat;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_backgroundAttachment;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_backgroundAttachment;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_backgroundPosition;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_backgroundPosition;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_backgroundPositionX;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_backgroundPositionX;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_backgroundPositionY;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_backgroundPositionY;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_wordSpacing;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_wordSpacing;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_letterSpacing;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_letterSpacing;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_textDecoration;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_textDecoration;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16 v) put_textDecorationNone;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16* p) get_textDecorationNone;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16 v) put_textDecorationUnderline;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16* p) get_textDecorationUnderline;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16 v) put_textDecorationOverline;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16* p) get_textDecorationOverline;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16 v) put_textDecorationLineThrough;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16* p) get_textDecorationLineThrough;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16 v) put_textDecorationBlink;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16* p) get_textDecorationBlink;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_verticalAlign;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_verticalAlign;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_textTransform;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_textTransform;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_textAlign;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_textAlign;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_textIndent;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_textIndent;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_lineHeight;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_lineHeight;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_marginTop;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_marginTop;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_marginRight;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_marginRight;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_marginBottom;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_marginBottom;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_marginLeft;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_marginLeft;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_margin;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_margin;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_paddingTop;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_paddingTop;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_paddingRight;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_paddingRight;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_paddingBottom;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_paddingBottom;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_paddingLeft;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_paddingLeft;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_padding;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_padding;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_border;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_border;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_borderTop;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_borderTop;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_borderRight;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_borderRight;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_borderBottom;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_borderBottom;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_borderLeft;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_borderLeft;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_borderColor;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_borderColor;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_borderTopColor;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_borderTopColor;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_borderRightColor;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_borderRightColor;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_borderBottomColor;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_borderBottomColor;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_borderLeftColor;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_borderLeftColor;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_borderWidth;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_borderWidth;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_borderTopWidth;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_borderTopWidth;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_borderRightWidth;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_borderRightWidth;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_borderBottomWidth;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_borderBottomWidth;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_borderLeftWidth;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_borderLeftWidth;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_borderStyle;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_borderStyle;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_borderTopStyle;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_borderTopStyle;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_borderRightStyle;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_borderRightStyle;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_borderBottomStyle;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_borderBottomStyle;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_borderLeftStyle;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_borderLeftStyle;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_width;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_width;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_height;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_height;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_styleFloat;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_styleFloat;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_clear;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_clear;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_display;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_display;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_visibility;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_visibility;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_listStyleType;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_listStyleType;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_listStylePosition;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_listStylePosition;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_listStyleImage;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_listStyleImage;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_listStyle;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_listStyle;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_whiteSpace;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_whiteSpace;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_top;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_top;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_left;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_left;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_position;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_zIndex;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_zIndex;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_overflow;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_overflow;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_pageBreakBefore;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_pageBreakBefore;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_pageBreakAfter;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_pageBreakAfter;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_cssText;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_cssText;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_cursor;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_cursor;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_clip;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_clip;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_filter;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_filter;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR strAttributeName, VARIANT AttributeValue, int32 lFlags) setAttribute;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR strAttributeName, int32 lFlags, VARIANT* AttributeValue) getAttribute;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR strAttributeName, int32 lFlags, int16* pfSuccess) removeAttribute;
	}


	public HRESULT put_fontFamily(BSTR v) mut => VT.[Friend]put_fontFamily(&this, v);

	public HRESULT get_fontFamily(BSTR* p) mut => VT.[Friend]get_fontFamily(&this, p);

	public HRESULT put_fontStyle(BSTR v) mut => VT.[Friend]put_fontStyle(&this, v);

	public HRESULT get_fontStyle(BSTR* p) mut => VT.[Friend]get_fontStyle(&this, p);

	public HRESULT put_fontVariant(BSTR v) mut => VT.[Friend]put_fontVariant(&this, v);

	public HRESULT get_fontVariant(BSTR* p) mut => VT.[Friend]get_fontVariant(&this, p);

	public HRESULT put_fontWeight(BSTR v) mut => VT.[Friend]put_fontWeight(&this, v);

	public HRESULT get_fontWeight(BSTR* p) mut => VT.[Friend]get_fontWeight(&this, p);

	public HRESULT put_fontSize(VARIANT v) mut => VT.[Friend]put_fontSize(&this, v);

	public HRESULT get_fontSize(VARIANT* p) mut => VT.[Friend]get_fontSize(&this, p);

	public HRESULT put_font(BSTR v) mut => VT.[Friend]put_font(&this, v);

	public HRESULT get_font(BSTR* p) mut => VT.[Friend]get_font(&this, p);

	public HRESULT put_color(VARIANT v) mut => VT.[Friend]put_color(&this, v);

	public HRESULT get_color(VARIANT* p) mut => VT.[Friend]get_color(&this, p);

	public HRESULT put_background(BSTR v) mut => VT.[Friend]put_background(&this, v);

	public HRESULT get_background(BSTR* p) mut => VT.[Friend]get_background(&this, p);

	public HRESULT put_backgroundColor(VARIANT v) mut => VT.[Friend]put_backgroundColor(&this, v);

	public HRESULT get_backgroundColor(VARIANT* p) mut => VT.[Friend]get_backgroundColor(&this, p);

	public HRESULT put_backgroundImage(BSTR v) mut => VT.[Friend]put_backgroundImage(&this, v);

	public HRESULT get_backgroundImage(BSTR* p) mut => VT.[Friend]get_backgroundImage(&this, p);

	public HRESULT put_backgroundRepeat(BSTR v) mut => VT.[Friend]put_backgroundRepeat(&this, v);

	public HRESULT get_backgroundRepeat(BSTR* p) mut => VT.[Friend]get_backgroundRepeat(&this, p);

	public HRESULT put_backgroundAttachment(BSTR v) mut => VT.[Friend]put_backgroundAttachment(&this, v);

	public HRESULT get_backgroundAttachment(BSTR* p) mut => VT.[Friend]get_backgroundAttachment(&this, p);

	public HRESULT put_backgroundPosition(BSTR v) mut => VT.[Friend]put_backgroundPosition(&this, v);

	public HRESULT get_backgroundPosition(BSTR* p) mut => VT.[Friend]get_backgroundPosition(&this, p);

	public HRESULT put_backgroundPositionX(VARIANT v) mut => VT.[Friend]put_backgroundPositionX(&this, v);

	public HRESULT get_backgroundPositionX(VARIANT* p) mut => VT.[Friend]get_backgroundPositionX(&this, p);

	public HRESULT put_backgroundPositionY(VARIANT v) mut => VT.[Friend]put_backgroundPositionY(&this, v);

	public HRESULT get_backgroundPositionY(VARIANT* p) mut => VT.[Friend]get_backgroundPositionY(&this, p);

	public HRESULT put_wordSpacing(VARIANT v) mut => VT.[Friend]put_wordSpacing(&this, v);

	public HRESULT get_wordSpacing(VARIANT* p) mut => VT.[Friend]get_wordSpacing(&this, p);

	public HRESULT put_letterSpacing(VARIANT v) mut => VT.[Friend]put_letterSpacing(&this, v);

	public HRESULT get_letterSpacing(VARIANT* p) mut => VT.[Friend]get_letterSpacing(&this, p);

	public HRESULT put_textDecoration(BSTR v) mut => VT.[Friend]put_textDecoration(&this, v);

	public HRESULT get_textDecoration(BSTR* p) mut => VT.[Friend]get_textDecoration(&this, p);

	public HRESULT put_textDecorationNone(int16 v) mut => VT.[Friend]put_textDecorationNone(&this, v);

	public HRESULT get_textDecorationNone(int16* p) mut => VT.[Friend]get_textDecorationNone(&this, p);

	public HRESULT put_textDecorationUnderline(int16 v) mut => VT.[Friend]put_textDecorationUnderline(&this, v);

	public HRESULT get_textDecorationUnderline(int16* p) mut => VT.[Friend]get_textDecorationUnderline(&this, p);

	public HRESULT put_textDecorationOverline(int16 v) mut => VT.[Friend]put_textDecorationOverline(&this, v);

	public HRESULT get_textDecorationOverline(int16* p) mut => VT.[Friend]get_textDecorationOverline(&this, p);

	public HRESULT put_textDecorationLineThrough(int16 v) mut => VT.[Friend]put_textDecorationLineThrough(&this, v);

	public HRESULT get_textDecorationLineThrough(int16* p) mut => VT.[Friend]get_textDecorationLineThrough(&this, p);

	public HRESULT put_textDecorationBlink(int16 v) mut => VT.[Friend]put_textDecorationBlink(&this, v);

	public HRESULT get_textDecorationBlink(int16* p) mut => VT.[Friend]get_textDecorationBlink(&this, p);

	public HRESULT put_verticalAlign(VARIANT v) mut => VT.[Friend]put_verticalAlign(&this, v);

	public HRESULT get_verticalAlign(VARIANT* p) mut => VT.[Friend]get_verticalAlign(&this, p);

	public HRESULT put_textTransform(BSTR v) mut => VT.[Friend]put_textTransform(&this, v);

	public HRESULT get_textTransform(BSTR* p) mut => VT.[Friend]get_textTransform(&this, p);

	public HRESULT put_textAlign(BSTR v) mut => VT.[Friend]put_textAlign(&this, v);

	public HRESULT get_textAlign(BSTR* p) mut => VT.[Friend]get_textAlign(&this, p);

	public HRESULT put_textIndent(VARIANT v) mut => VT.[Friend]put_textIndent(&this, v);

	public HRESULT get_textIndent(VARIANT* p) mut => VT.[Friend]get_textIndent(&this, p);

	public HRESULT put_lineHeight(VARIANT v) mut => VT.[Friend]put_lineHeight(&this, v);

	public HRESULT get_lineHeight(VARIANT* p) mut => VT.[Friend]get_lineHeight(&this, p);

	public HRESULT put_marginTop(VARIANT v) mut => VT.[Friend]put_marginTop(&this, v);

	public HRESULT get_marginTop(VARIANT* p) mut => VT.[Friend]get_marginTop(&this, p);

	public HRESULT put_marginRight(VARIANT v) mut => VT.[Friend]put_marginRight(&this, v);

	public HRESULT get_marginRight(VARIANT* p) mut => VT.[Friend]get_marginRight(&this, p);

	public HRESULT put_marginBottom(VARIANT v) mut => VT.[Friend]put_marginBottom(&this, v);

	public HRESULT get_marginBottom(VARIANT* p) mut => VT.[Friend]get_marginBottom(&this, p);

	public HRESULT put_marginLeft(VARIANT v) mut => VT.[Friend]put_marginLeft(&this, v);

	public HRESULT get_marginLeft(VARIANT* p) mut => VT.[Friend]get_marginLeft(&this, p);

	public HRESULT put_margin(BSTR v) mut => VT.[Friend]put_margin(&this, v);

	public HRESULT get_margin(BSTR* p) mut => VT.[Friend]get_margin(&this, p);

	public HRESULT put_paddingTop(VARIANT v) mut => VT.[Friend]put_paddingTop(&this, v);

	public HRESULT get_paddingTop(VARIANT* p) mut => VT.[Friend]get_paddingTop(&this, p);

	public HRESULT put_paddingRight(VARIANT v) mut => VT.[Friend]put_paddingRight(&this, v);

	public HRESULT get_paddingRight(VARIANT* p) mut => VT.[Friend]get_paddingRight(&this, p);

	public HRESULT put_paddingBottom(VARIANT v) mut => VT.[Friend]put_paddingBottom(&this, v);

	public HRESULT get_paddingBottom(VARIANT* p) mut => VT.[Friend]get_paddingBottom(&this, p);

	public HRESULT put_paddingLeft(VARIANT v) mut => VT.[Friend]put_paddingLeft(&this, v);

	public HRESULT get_paddingLeft(VARIANT* p) mut => VT.[Friend]get_paddingLeft(&this, p);

	public HRESULT put_padding(BSTR v) mut => VT.[Friend]put_padding(&this, v);

	public HRESULT get_padding(BSTR* p) mut => VT.[Friend]get_padding(&this, p);

	public HRESULT put_border(BSTR v) mut => VT.[Friend]put_border(&this, v);

	public HRESULT get_border(BSTR* p) mut => VT.[Friend]get_border(&this, p);

	public HRESULT put_borderTop(BSTR v) mut => VT.[Friend]put_borderTop(&this, v);

	public HRESULT get_borderTop(BSTR* p) mut => VT.[Friend]get_borderTop(&this, p);

	public HRESULT put_borderRight(BSTR v) mut => VT.[Friend]put_borderRight(&this, v);

	public HRESULT get_borderRight(BSTR* p) mut => VT.[Friend]get_borderRight(&this, p);

	public HRESULT put_borderBottom(BSTR v) mut => VT.[Friend]put_borderBottom(&this, v);

	public HRESULT get_borderBottom(BSTR* p) mut => VT.[Friend]get_borderBottom(&this, p);

	public HRESULT put_borderLeft(BSTR v) mut => VT.[Friend]put_borderLeft(&this, v);

	public HRESULT get_borderLeft(BSTR* p) mut => VT.[Friend]get_borderLeft(&this, p);

	public HRESULT put_borderColor(BSTR v) mut => VT.[Friend]put_borderColor(&this, v);

	public HRESULT get_borderColor(BSTR* p) mut => VT.[Friend]get_borderColor(&this, p);

	public HRESULT put_borderTopColor(VARIANT v) mut => VT.[Friend]put_borderTopColor(&this, v);

	public HRESULT get_borderTopColor(VARIANT* p) mut => VT.[Friend]get_borderTopColor(&this, p);

	public HRESULT put_borderRightColor(VARIANT v) mut => VT.[Friend]put_borderRightColor(&this, v);

	public HRESULT get_borderRightColor(VARIANT* p) mut => VT.[Friend]get_borderRightColor(&this, p);

	public HRESULT put_borderBottomColor(VARIANT v) mut => VT.[Friend]put_borderBottomColor(&this, v);

	public HRESULT get_borderBottomColor(VARIANT* p) mut => VT.[Friend]get_borderBottomColor(&this, p);

	public HRESULT put_borderLeftColor(VARIANT v) mut => VT.[Friend]put_borderLeftColor(&this, v);

	public HRESULT get_borderLeftColor(VARIANT* p) mut => VT.[Friend]get_borderLeftColor(&this, p);

	public HRESULT put_borderWidth(BSTR v) mut => VT.[Friend]put_borderWidth(&this, v);

	public HRESULT get_borderWidth(BSTR* p) mut => VT.[Friend]get_borderWidth(&this, p);

	public HRESULT put_borderTopWidth(VARIANT v) mut => VT.[Friend]put_borderTopWidth(&this, v);

	public HRESULT get_borderTopWidth(VARIANT* p) mut => VT.[Friend]get_borderTopWidth(&this, p);

	public HRESULT put_borderRightWidth(VARIANT v) mut => VT.[Friend]put_borderRightWidth(&this, v);

	public HRESULT get_borderRightWidth(VARIANT* p) mut => VT.[Friend]get_borderRightWidth(&this, p);

	public HRESULT put_borderBottomWidth(VARIANT v) mut => VT.[Friend]put_borderBottomWidth(&this, v);

	public HRESULT get_borderBottomWidth(VARIANT* p) mut => VT.[Friend]get_borderBottomWidth(&this, p);

	public HRESULT put_borderLeftWidth(VARIANT v) mut => VT.[Friend]put_borderLeftWidth(&this, v);

	public HRESULT get_borderLeftWidth(VARIANT* p) mut => VT.[Friend]get_borderLeftWidth(&this, p);

	public HRESULT put_borderStyle(BSTR v) mut => VT.[Friend]put_borderStyle(&this, v);

	public HRESULT get_borderStyle(BSTR* p) mut => VT.[Friend]get_borderStyle(&this, p);

	public HRESULT put_borderTopStyle(BSTR v) mut => VT.[Friend]put_borderTopStyle(&this, v);

	public HRESULT get_borderTopStyle(BSTR* p) mut => VT.[Friend]get_borderTopStyle(&this, p);

	public HRESULT put_borderRightStyle(BSTR v) mut => VT.[Friend]put_borderRightStyle(&this, v);

	public HRESULT get_borderRightStyle(BSTR* p) mut => VT.[Friend]get_borderRightStyle(&this, p);

	public HRESULT put_borderBottomStyle(BSTR v) mut => VT.[Friend]put_borderBottomStyle(&this, v);

	public HRESULT get_borderBottomStyle(BSTR* p) mut => VT.[Friend]get_borderBottomStyle(&this, p);

	public HRESULT put_borderLeftStyle(BSTR v) mut => VT.[Friend]put_borderLeftStyle(&this, v);

	public HRESULT get_borderLeftStyle(BSTR* p) mut => VT.[Friend]get_borderLeftStyle(&this, p);

	public HRESULT put_width(VARIANT v) mut => VT.[Friend]put_width(&this, v);

	public HRESULT get_width(VARIANT* p) mut => VT.[Friend]get_width(&this, p);

	public HRESULT put_height(VARIANT v) mut => VT.[Friend]put_height(&this, v);

	public HRESULT get_height(VARIANT* p) mut => VT.[Friend]get_height(&this, p);

	public HRESULT put_styleFloat(BSTR v) mut => VT.[Friend]put_styleFloat(&this, v);

	public HRESULT get_styleFloat(BSTR* p) mut => VT.[Friend]get_styleFloat(&this, p);

	public HRESULT put_clear(BSTR v) mut => VT.[Friend]put_clear(&this, v);

	public HRESULT get_clear(BSTR* p) mut => VT.[Friend]get_clear(&this, p);

	public HRESULT put_display(BSTR v) mut => VT.[Friend]put_display(&this, v);

	public HRESULT get_display(BSTR* p) mut => VT.[Friend]get_display(&this, p);

	public HRESULT put_visibility(BSTR v) mut => VT.[Friend]put_visibility(&this, v);

	public HRESULT get_visibility(BSTR* p) mut => VT.[Friend]get_visibility(&this, p);

	public HRESULT put_listStyleType(BSTR v) mut => VT.[Friend]put_listStyleType(&this, v);

	public HRESULT get_listStyleType(BSTR* p) mut => VT.[Friend]get_listStyleType(&this, p);

	public HRESULT put_listStylePosition(BSTR v) mut => VT.[Friend]put_listStylePosition(&this, v);

	public HRESULT get_listStylePosition(BSTR* p) mut => VT.[Friend]get_listStylePosition(&this, p);

	public HRESULT put_listStyleImage(BSTR v) mut => VT.[Friend]put_listStyleImage(&this, v);

	public HRESULT get_listStyleImage(BSTR* p) mut => VT.[Friend]get_listStyleImage(&this, p);

	public HRESULT put_listStyle(BSTR v) mut => VT.[Friend]put_listStyle(&this, v);

	public HRESULT get_listStyle(BSTR* p) mut => VT.[Friend]get_listStyle(&this, p);

	public HRESULT put_whiteSpace(BSTR v) mut => VT.[Friend]put_whiteSpace(&this, v);

	public HRESULT get_whiteSpace(BSTR* p) mut => VT.[Friend]get_whiteSpace(&this, p);

	public HRESULT put_top(VARIANT v) mut => VT.[Friend]put_top(&this, v);

	public HRESULT get_top(VARIANT* p) mut => VT.[Friend]get_top(&this, p);

	public HRESULT put_left(VARIANT v) mut => VT.[Friend]put_left(&this, v);

	public HRESULT get_left(VARIANT* p) mut => VT.[Friend]get_left(&this, p);

	public HRESULT get_position(BSTR* p) mut => VT.[Friend]get_position(&this, p);

	public HRESULT put_zIndex(VARIANT v) mut => VT.[Friend]put_zIndex(&this, v);

	public HRESULT get_zIndex(VARIANT* p) mut => VT.[Friend]get_zIndex(&this, p);

	public HRESULT put_overflow(BSTR v) mut => VT.[Friend]put_overflow(&this, v);

	public HRESULT get_overflow(BSTR* p) mut => VT.[Friend]get_overflow(&this, p);

	public HRESULT put_pageBreakBefore(BSTR v) mut => VT.[Friend]put_pageBreakBefore(&this, v);

	public HRESULT get_pageBreakBefore(BSTR* p) mut => VT.[Friend]get_pageBreakBefore(&this, p);

	public HRESULT put_pageBreakAfter(BSTR v) mut => VT.[Friend]put_pageBreakAfter(&this, v);

	public HRESULT get_pageBreakAfter(BSTR* p) mut => VT.[Friend]get_pageBreakAfter(&this, p);

	public HRESULT put_cssText(BSTR v) mut => VT.[Friend]put_cssText(&this, v);

	public HRESULT get_cssText(BSTR* p) mut => VT.[Friend]get_cssText(&this, p);

	public HRESULT put_cursor(BSTR v) mut => VT.[Friend]put_cursor(&this, v);

	public HRESULT get_cursor(BSTR* p) mut => VT.[Friend]get_cursor(&this, p);

	public HRESULT put_clip(BSTR v) mut => VT.[Friend]put_clip(&this, v);

	public HRESULT get_clip(BSTR* p) mut => VT.[Friend]get_clip(&this, p);

	public HRESULT put_filter(BSTR v) mut => VT.[Friend]put_filter(&this, v);

	public HRESULT get_filter(BSTR* p) mut => VT.[Friend]get_filter(&this, p);

	public HRESULT setAttribute(BSTR strAttributeName, VARIANT AttributeValue, int32 lFlags) mut => VT.[Friend]setAttribute(&this, strAttributeName, AttributeValue, lFlags);

	public HRESULT getAttribute(BSTR strAttributeName, int32 lFlags, VARIANT* AttributeValue) mut => VT.[Friend]getAttribute(&this, strAttributeName, lFlags, AttributeValue);

	public HRESULT removeAttribute(BSTR strAttributeName, int32 lFlags, int16* pfSuccess) mut => VT.[Friend]removeAttribute(&this, strAttributeName, lFlags, pfSuccess);
}

[CRepr]struct IHTMLRuleStyle2 : IDispatch
{
	public new const Guid IID = .(0x3050f4ac, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_tableLayout;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_tableLayout;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_borderCollapse;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_borderCollapse;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_direction;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_direction;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_behavior;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_behavior;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_position;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_position;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_unicodeBidi;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_unicodeBidi;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_bottom;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_bottom;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_right;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_right;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 v) put_pixelBottom;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* p) get_pixelBottom;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 v) put_pixelRight;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* p) get_pixelRight;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, float v) put_posBottom;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, float* p) get_posBottom;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, float v) put_posRight;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, float* p) get_posRight;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_imeMode;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_imeMode;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_rubyAlign;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_rubyAlign;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_rubyPosition;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_rubyPosition;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_rubyOverhang;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_rubyOverhang;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_layoutGridChar;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_layoutGridChar;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_layoutGridLine;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_layoutGridLine;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_layoutGridMode;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_layoutGridMode;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_layoutGridType;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_layoutGridType;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_layoutGrid;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_layoutGrid;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_textAutospace;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_textAutospace;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_wordBreak;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_wordBreak;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_lineBreak;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_lineBreak;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_textJustify;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_textJustify;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_textJustifyTrim;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_textJustifyTrim;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_textKashida;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_textKashida;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_overflowX;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_overflowX;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_overflowY;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_overflowY;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_accelerator;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_accelerator;
	}


	public HRESULT put_tableLayout(BSTR v) mut => VT.[Friend]put_tableLayout(&this, v);

	public HRESULT get_tableLayout(BSTR* p) mut => VT.[Friend]get_tableLayout(&this, p);

	public HRESULT put_borderCollapse(BSTR v) mut => VT.[Friend]put_borderCollapse(&this, v);

	public HRESULT get_borderCollapse(BSTR* p) mut => VT.[Friend]get_borderCollapse(&this, p);

	public HRESULT put_direction(BSTR v) mut => VT.[Friend]put_direction(&this, v);

	public HRESULT get_direction(BSTR* p) mut => VT.[Friend]get_direction(&this, p);

	public HRESULT put_behavior(BSTR v) mut => VT.[Friend]put_behavior(&this, v);

	public HRESULT get_behavior(BSTR* p) mut => VT.[Friend]get_behavior(&this, p);

	public HRESULT put_position(BSTR v) mut => VT.[Friend]put_position(&this, v);

	public HRESULT get_position(BSTR* p) mut => VT.[Friend]get_position(&this, p);

	public HRESULT put_unicodeBidi(BSTR v) mut => VT.[Friend]put_unicodeBidi(&this, v);

	public HRESULT get_unicodeBidi(BSTR* p) mut => VT.[Friend]get_unicodeBidi(&this, p);

	public HRESULT put_bottom(VARIANT v) mut => VT.[Friend]put_bottom(&this, v);

	public HRESULT get_bottom(VARIANT* p) mut => VT.[Friend]get_bottom(&this, p);

	public HRESULT put_right(VARIANT v) mut => VT.[Friend]put_right(&this, v);

	public HRESULT get_right(VARIANT* p) mut => VT.[Friend]get_right(&this, p);

	public HRESULT put_pixelBottom(int32 v) mut => VT.[Friend]put_pixelBottom(&this, v);

	public HRESULT get_pixelBottom(int32* p) mut => VT.[Friend]get_pixelBottom(&this, p);

	public HRESULT put_pixelRight(int32 v) mut => VT.[Friend]put_pixelRight(&this, v);

	public HRESULT get_pixelRight(int32* p) mut => VT.[Friend]get_pixelRight(&this, p);

	public HRESULT put_posBottom(float v) mut => VT.[Friend]put_posBottom(&this, v);

	public HRESULT get_posBottom(float* p) mut => VT.[Friend]get_posBottom(&this, p);

	public HRESULT put_posRight(float v) mut => VT.[Friend]put_posRight(&this, v);

	public HRESULT get_posRight(float* p) mut => VT.[Friend]get_posRight(&this, p);

	public HRESULT put_imeMode(BSTR v) mut => VT.[Friend]put_imeMode(&this, v);

	public HRESULT get_imeMode(BSTR* p) mut => VT.[Friend]get_imeMode(&this, p);

	public HRESULT put_rubyAlign(BSTR v) mut => VT.[Friend]put_rubyAlign(&this, v);

	public HRESULT get_rubyAlign(BSTR* p) mut => VT.[Friend]get_rubyAlign(&this, p);

	public HRESULT put_rubyPosition(BSTR v) mut => VT.[Friend]put_rubyPosition(&this, v);

	public HRESULT get_rubyPosition(BSTR* p) mut => VT.[Friend]get_rubyPosition(&this, p);

	public HRESULT put_rubyOverhang(BSTR v) mut => VT.[Friend]put_rubyOverhang(&this, v);

	public HRESULT get_rubyOverhang(BSTR* p) mut => VT.[Friend]get_rubyOverhang(&this, p);

	public HRESULT put_layoutGridChar(VARIANT v) mut => VT.[Friend]put_layoutGridChar(&this, v);

	public HRESULT get_layoutGridChar(VARIANT* p) mut => VT.[Friend]get_layoutGridChar(&this, p);

	public HRESULT put_layoutGridLine(VARIANT v) mut => VT.[Friend]put_layoutGridLine(&this, v);

	public HRESULT get_layoutGridLine(VARIANT* p) mut => VT.[Friend]get_layoutGridLine(&this, p);

	public HRESULT put_layoutGridMode(BSTR v) mut => VT.[Friend]put_layoutGridMode(&this, v);

	public HRESULT get_layoutGridMode(BSTR* p) mut => VT.[Friend]get_layoutGridMode(&this, p);

	public HRESULT put_layoutGridType(BSTR v) mut => VT.[Friend]put_layoutGridType(&this, v);

	public HRESULT get_layoutGridType(BSTR* p) mut => VT.[Friend]get_layoutGridType(&this, p);

	public HRESULT put_layoutGrid(BSTR v) mut => VT.[Friend]put_layoutGrid(&this, v);

	public HRESULT get_layoutGrid(BSTR* p) mut => VT.[Friend]get_layoutGrid(&this, p);

	public HRESULT put_textAutospace(BSTR v) mut => VT.[Friend]put_textAutospace(&this, v);

	public HRESULT get_textAutospace(BSTR* p) mut => VT.[Friend]get_textAutospace(&this, p);

	public HRESULT put_wordBreak(BSTR v) mut => VT.[Friend]put_wordBreak(&this, v);

	public HRESULT get_wordBreak(BSTR* p) mut => VT.[Friend]get_wordBreak(&this, p);

	public HRESULT put_lineBreak(BSTR v) mut => VT.[Friend]put_lineBreak(&this, v);

	public HRESULT get_lineBreak(BSTR* p) mut => VT.[Friend]get_lineBreak(&this, p);

	public HRESULT put_textJustify(BSTR v) mut => VT.[Friend]put_textJustify(&this, v);

	public HRESULT get_textJustify(BSTR* p) mut => VT.[Friend]get_textJustify(&this, p);

	public HRESULT put_textJustifyTrim(BSTR v) mut => VT.[Friend]put_textJustifyTrim(&this, v);

	public HRESULT get_textJustifyTrim(BSTR* p) mut => VT.[Friend]get_textJustifyTrim(&this, p);

	public HRESULT put_textKashida(VARIANT v) mut => VT.[Friend]put_textKashida(&this, v);

	public HRESULT get_textKashida(VARIANT* p) mut => VT.[Friend]get_textKashida(&this, p);

	public HRESULT put_overflowX(BSTR v) mut => VT.[Friend]put_overflowX(&this, v);

	public HRESULT get_overflowX(BSTR* p) mut => VT.[Friend]get_overflowX(&this, p);

	public HRESULT put_overflowY(BSTR v) mut => VT.[Friend]put_overflowY(&this, v);

	public HRESULT get_overflowY(BSTR* p) mut => VT.[Friend]get_overflowY(&this, p);

	public HRESULT put_accelerator(BSTR v) mut => VT.[Friend]put_accelerator(&this, v);

	public HRESULT get_accelerator(BSTR* p) mut => VT.[Friend]get_accelerator(&this, p);
}

[CRepr]struct IHTMLRuleStyle3 : IDispatch
{
	public new const Guid IID = .(0x3050f657, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_layoutFlow;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_layoutFlow;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_zoom;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_zoom;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_wordWrap;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_wordWrap;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_textUnderlinePosition;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_textUnderlinePosition;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_scrollbarBaseColor;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_scrollbarBaseColor;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_scrollbarFaceColor;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_scrollbarFaceColor;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_scrollbar3dLightColor;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_scrollbar3dLightColor;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_scrollbarShadowColor;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_scrollbarShadowColor;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_scrollbarHighlightColor;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_scrollbarHighlightColor;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_scrollbarDarkShadowColor;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_scrollbarDarkShadowColor;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_scrollbarArrowColor;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_scrollbarArrowColor;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_scrollbarTrackColor;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_scrollbarTrackColor;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_writingMode;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_writingMode;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_textAlignLast;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_textAlignLast;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_textKashidaSpace;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_textKashidaSpace;
	}


	public HRESULT put_layoutFlow(BSTR v) mut => VT.[Friend]put_layoutFlow(&this, v);

	public HRESULT get_layoutFlow(BSTR* p) mut => VT.[Friend]get_layoutFlow(&this, p);

	public HRESULT put_zoom(VARIANT v) mut => VT.[Friend]put_zoom(&this, v);

	public HRESULT get_zoom(VARIANT* p) mut => VT.[Friend]get_zoom(&this, p);

	public HRESULT put_wordWrap(BSTR v) mut => VT.[Friend]put_wordWrap(&this, v);

	public HRESULT get_wordWrap(BSTR* p) mut => VT.[Friend]get_wordWrap(&this, p);

	public HRESULT put_textUnderlinePosition(BSTR v) mut => VT.[Friend]put_textUnderlinePosition(&this, v);

	public HRESULT get_textUnderlinePosition(BSTR* p) mut => VT.[Friend]get_textUnderlinePosition(&this, p);

	public HRESULT put_scrollbarBaseColor(VARIANT v) mut => VT.[Friend]put_scrollbarBaseColor(&this, v);

	public HRESULT get_scrollbarBaseColor(VARIANT* p) mut => VT.[Friend]get_scrollbarBaseColor(&this, p);

	public HRESULT put_scrollbarFaceColor(VARIANT v) mut => VT.[Friend]put_scrollbarFaceColor(&this, v);

	public HRESULT get_scrollbarFaceColor(VARIANT* p) mut => VT.[Friend]get_scrollbarFaceColor(&this, p);

	public HRESULT put_scrollbar3dLightColor(VARIANT v) mut => VT.[Friend]put_scrollbar3dLightColor(&this, v);

	public HRESULT get_scrollbar3dLightColor(VARIANT* p) mut => VT.[Friend]get_scrollbar3dLightColor(&this, p);

	public HRESULT put_scrollbarShadowColor(VARIANT v) mut => VT.[Friend]put_scrollbarShadowColor(&this, v);

	public HRESULT get_scrollbarShadowColor(VARIANT* p) mut => VT.[Friend]get_scrollbarShadowColor(&this, p);

	public HRESULT put_scrollbarHighlightColor(VARIANT v) mut => VT.[Friend]put_scrollbarHighlightColor(&this, v);

	public HRESULT get_scrollbarHighlightColor(VARIANT* p) mut => VT.[Friend]get_scrollbarHighlightColor(&this, p);

	public HRESULT put_scrollbarDarkShadowColor(VARIANT v) mut => VT.[Friend]put_scrollbarDarkShadowColor(&this, v);

	public HRESULT get_scrollbarDarkShadowColor(VARIANT* p) mut => VT.[Friend]get_scrollbarDarkShadowColor(&this, p);

	public HRESULT put_scrollbarArrowColor(VARIANT v) mut => VT.[Friend]put_scrollbarArrowColor(&this, v);

	public HRESULT get_scrollbarArrowColor(VARIANT* p) mut => VT.[Friend]get_scrollbarArrowColor(&this, p);

	public HRESULT put_scrollbarTrackColor(VARIANT v) mut => VT.[Friend]put_scrollbarTrackColor(&this, v);

	public HRESULT get_scrollbarTrackColor(VARIANT* p) mut => VT.[Friend]get_scrollbarTrackColor(&this, p);

	public HRESULT put_writingMode(BSTR v) mut => VT.[Friend]put_writingMode(&this, v);

	public HRESULT get_writingMode(BSTR* p) mut => VT.[Friend]get_writingMode(&this, p);

	public HRESULT put_textAlignLast(BSTR v) mut => VT.[Friend]put_textAlignLast(&this, v);

	public HRESULT get_textAlignLast(BSTR* p) mut => VT.[Friend]get_textAlignLast(&this, p);

	public HRESULT put_textKashidaSpace(VARIANT v) mut => VT.[Friend]put_textKashidaSpace(&this, v);

	public HRESULT get_textKashidaSpace(VARIANT* p) mut => VT.[Friend]get_textKashidaSpace(&this, p);
}

[CRepr]struct IHTMLRuleStyle4 : IDispatch
{
	public new const Guid IID = .(0x3050f817, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_textOverflow;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_textOverflow;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_minHeight;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_minHeight;
	}


	public HRESULT put_textOverflow(BSTR v) mut => VT.[Friend]put_textOverflow(&this, v);

	public HRESULT get_textOverflow(BSTR* p) mut => VT.[Friend]get_textOverflow(&this, p);

	public HRESULT put_minHeight(VARIANT v) mut => VT.[Friend]put_minHeight(&this, v);

	public HRESULT get_minHeight(VARIANT* p) mut => VT.[Friend]get_minHeight(&this, p);
}

[CRepr]struct IHTMLRuleStyle5 : IDispatch
{
	public new const Guid IID = .(0x3050f335, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_msInterpolationMode;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_msInterpolationMode;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_maxHeight;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_maxHeight;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_minWidth;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_minWidth;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_maxWidth;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_maxWidth;
	}


	public HRESULT put_msInterpolationMode(BSTR v) mut => VT.[Friend]put_msInterpolationMode(&this, v);

	public HRESULT get_msInterpolationMode(BSTR* p) mut => VT.[Friend]get_msInterpolationMode(&this, p);

	public HRESULT put_maxHeight(VARIANT v) mut => VT.[Friend]put_maxHeight(&this, v);

	public HRESULT get_maxHeight(VARIANT* p) mut => VT.[Friend]get_maxHeight(&this, p);

	public HRESULT put_minWidth(VARIANT v) mut => VT.[Friend]put_minWidth(&this, v);

	public HRESULT get_minWidth(VARIANT* p) mut => VT.[Friend]get_minWidth(&this, p);

	public HRESULT put_maxWidth(VARIANT v) mut => VT.[Friend]put_maxWidth(&this, v);

	public HRESULT get_maxWidth(VARIANT* p) mut => VT.[Friend]get_maxWidth(&this, p);
}

[CRepr]struct IHTMLRuleStyle6 : IDispatch
{
	public new const Guid IID = .(0x30510471, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_content;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_content;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_captionSide;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_captionSide;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_counterIncrement;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_counterIncrement;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_counterReset;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_counterReset;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_outline;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_outline;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_outlineWidth;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_outlineWidth;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_outlineStyle;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_outlineStyle;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_outlineColor;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_outlineColor;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_boxSizing;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_boxSizing;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_borderSpacing;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_borderSpacing;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_orphans;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_orphans;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_widows;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_widows;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_pageBreakInside;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_pageBreakInside;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_emptyCells;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_emptyCells;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_msBlockProgression;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_msBlockProgression;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_quotes;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_quotes;
	}


	public HRESULT put_content(BSTR v) mut => VT.[Friend]put_content(&this, v);

	public HRESULT get_content(BSTR* p) mut => VT.[Friend]get_content(&this, p);

	public HRESULT put_captionSide(BSTR v) mut => VT.[Friend]put_captionSide(&this, v);

	public HRESULT get_captionSide(BSTR* p) mut => VT.[Friend]get_captionSide(&this, p);

	public HRESULT put_counterIncrement(BSTR v) mut => VT.[Friend]put_counterIncrement(&this, v);

	public HRESULT get_counterIncrement(BSTR* p) mut => VT.[Friend]get_counterIncrement(&this, p);

	public HRESULT put_counterReset(BSTR v) mut => VT.[Friend]put_counterReset(&this, v);

	public HRESULT get_counterReset(BSTR* p) mut => VT.[Friend]get_counterReset(&this, p);

	public HRESULT put_outline(BSTR v) mut => VT.[Friend]put_outline(&this, v);

	public HRESULT get_outline(BSTR* p) mut => VT.[Friend]get_outline(&this, p);

	public HRESULT put_outlineWidth(VARIANT v) mut => VT.[Friend]put_outlineWidth(&this, v);

	public HRESULT get_outlineWidth(VARIANT* p) mut => VT.[Friend]get_outlineWidth(&this, p);

	public HRESULT put_outlineStyle(BSTR v) mut => VT.[Friend]put_outlineStyle(&this, v);

	public HRESULT get_outlineStyle(BSTR* p) mut => VT.[Friend]get_outlineStyle(&this, p);

	public HRESULT put_outlineColor(VARIANT v) mut => VT.[Friend]put_outlineColor(&this, v);

	public HRESULT get_outlineColor(VARIANT* p) mut => VT.[Friend]get_outlineColor(&this, p);

	public HRESULT put_boxSizing(BSTR v) mut => VT.[Friend]put_boxSizing(&this, v);

	public HRESULT get_boxSizing(BSTR* p) mut => VT.[Friend]get_boxSizing(&this, p);

	public HRESULT put_borderSpacing(BSTR v) mut => VT.[Friend]put_borderSpacing(&this, v);

	public HRESULT get_borderSpacing(BSTR* p) mut => VT.[Friend]get_borderSpacing(&this, p);

	public HRESULT put_orphans(VARIANT v) mut => VT.[Friend]put_orphans(&this, v);

	public HRESULT get_orphans(VARIANT* p) mut => VT.[Friend]get_orphans(&this, p);

	public HRESULT put_widows(VARIANT v) mut => VT.[Friend]put_widows(&this, v);

	public HRESULT get_widows(VARIANT* p) mut => VT.[Friend]get_widows(&this, p);

	public HRESULT put_pageBreakInside(BSTR v) mut => VT.[Friend]put_pageBreakInside(&this, v);

	public HRESULT get_pageBreakInside(BSTR* p) mut => VT.[Friend]get_pageBreakInside(&this, p);

	public HRESULT put_emptyCells(BSTR v) mut => VT.[Friend]put_emptyCells(&this, v);

	public HRESULT get_emptyCells(BSTR* p) mut => VT.[Friend]get_emptyCells(&this, p);

	public HRESULT put_msBlockProgression(BSTR v) mut => VT.[Friend]put_msBlockProgression(&this, v);

	public HRESULT get_msBlockProgression(BSTR* p) mut => VT.[Friend]get_msBlockProgression(&this, p);

	public HRESULT put_quotes(BSTR v) mut => VT.[Friend]put_quotes(&this, v);

	public HRESULT get_quotes(BSTR* p) mut => VT.[Friend]get_quotes(&this, p);
}

[CRepr]struct DispHTMLStyle : IDispatch
{
	public new const Guid IID = .(0x3050f55a, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
	}

}

[CRepr]struct DispHTMLRuleStyle : IDispatch
{
	public new const Guid IID = .(0x3050f55c, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
	}

}

[CRepr]struct IHTMLStyleSheetRulesCollection : IDispatch
{
	public new const Guid IID = .(0x3050f2e5, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* p) get_length;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 index, IHTMLStyleSheetRule** ppHTMLStyleSheetRule) item;
	}


	public HRESULT get_length(int32* p) mut => VT.[Friend]get_length(&this, p);

	public HRESULT item(int32 index, IHTMLStyleSheetRule** ppHTMLStyleSheetRule) mut => VT.[Friend]item(&this, index, ppHTMLStyleSheetRule);
}

[CRepr]struct IHTMLStyleSheet : IDispatch
{
	public new const Guid IID = .(0x3050f2e3, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_title;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_title;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IHTMLStyleSheet** p) get_parentStyleSheet;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IHTMLElement** p) get_owningElement;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16 v) put_disabled;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16* p) get_disabled;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16* p) get_readOnly;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IHTMLStyleSheetsCollection** p) get_imports;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_href;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_href;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_type;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_id;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR bstrURL, int32 lIndex, int32* plIndex) addImport;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR bstrSelector, BSTR bstrStyle, int32 lIndex, int32* plNewIndex) addRule;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 lIndex) removeImport;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 lIndex) removeRule;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_media;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_media;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_cssText;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_cssText;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IHTMLStyleSheetRulesCollection** p) get_rules;
	}


	public HRESULT put_title(BSTR v) mut => VT.[Friend]put_title(&this, v);

	public HRESULT get_title(BSTR* p) mut => VT.[Friend]get_title(&this, p);

	public HRESULT get_parentStyleSheet(IHTMLStyleSheet** p) mut => VT.[Friend]get_parentStyleSheet(&this, p);

	public HRESULT get_owningElement(IHTMLElement** p) mut => VT.[Friend]get_owningElement(&this, p);

	public HRESULT put_disabled(int16 v) mut => VT.[Friend]put_disabled(&this, v);

	public HRESULT get_disabled(int16* p) mut => VT.[Friend]get_disabled(&this, p);

	public HRESULT get_readOnly(int16* p) mut => VT.[Friend]get_readOnly(&this, p);

	public HRESULT get_imports(IHTMLStyleSheetsCollection** p) mut => VT.[Friend]get_imports(&this, p);

	public HRESULT put_href(BSTR v) mut => VT.[Friend]put_href(&this, v);

	public HRESULT get_href(BSTR* p) mut => VT.[Friend]get_href(&this, p);

	public HRESULT get_type(BSTR* p) mut => VT.[Friend]get_type(&this, p);

	public HRESULT get_id(BSTR* p) mut => VT.[Friend]get_id(&this, p);

	public HRESULT addImport(BSTR bstrURL, int32 lIndex, int32* plIndex) mut => VT.[Friend]addImport(&this, bstrURL, lIndex, plIndex);

	public HRESULT addRule(BSTR bstrSelector, BSTR bstrStyle, int32 lIndex, int32* plNewIndex) mut => VT.[Friend]addRule(&this, bstrSelector, bstrStyle, lIndex, plNewIndex);

	public HRESULT removeImport(int32 lIndex) mut => VT.[Friend]removeImport(&this, lIndex);

	public HRESULT removeRule(int32 lIndex) mut => VT.[Friend]removeRule(&this, lIndex);

	public HRESULT put_media(BSTR v) mut => VT.[Friend]put_media(&this, v);

	public HRESULT get_media(BSTR* p) mut => VT.[Friend]get_media(&this, p);

	public HRESULT put_cssText(BSTR v) mut => VT.[Friend]put_cssText(&this, v);

	public HRESULT get_cssText(BSTR* p) mut => VT.[Friend]get_cssText(&this, p);

	public HRESULT get_rules(IHTMLStyleSheetRulesCollection** p) mut => VT.[Friend]get_rules(&this, p);
}

[CRepr]struct IHTMLCSSRule : IDispatch
{
	public new const Guid IID = .(0x305106e9, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint16* p) get_type;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_cssText;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_cssText;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IHTMLCSSRule** p) get_parentRule;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IHTMLStyleSheet** p) get_parentStyleSheet;
	}


	public HRESULT get_type(uint16* p) mut => VT.[Friend]get_type(&this, p);

	public HRESULT put_cssText(BSTR v) mut => VT.[Friend]put_cssText(&this, v);

	public HRESULT get_cssText(BSTR* p) mut => VT.[Friend]get_cssText(&this, p);

	public HRESULT get_parentRule(IHTMLCSSRule** p) mut => VT.[Friend]get_parentRule(&this, p);

	public HRESULT get_parentStyleSheet(IHTMLStyleSheet** p) mut => VT.[Friend]get_parentStyleSheet(&this, p);
}

[CRepr]struct IHTMLCSSImportRule : IDispatch
{
	public new const Guid IID = .(0x305106ea, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_href;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_media;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_media;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IHTMLStyleSheet** p) get_styleSheet;
	}


	public HRESULT get_href(BSTR* p) mut => VT.[Friend]get_href(&this, p);

	public HRESULT put_media(VARIANT v) mut => VT.[Friend]put_media(&this, v);

	public HRESULT get_media(VARIANT* p) mut => VT.[Friend]get_media(&this, p);

	public HRESULT get_styleSheet(IHTMLStyleSheet** p) mut => VT.[Friend]get_styleSheet(&this, p);
}

[CRepr]struct IHTMLCSSMediaRule : IDispatch
{
	public new const Guid IID = .(0x305106eb, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_media;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_media;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IHTMLStyleSheetRulesCollection** p) get_cssRules;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR bstrRule, int32 lIndex, int32* plNewIndex) insertRule;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 lIndex) deleteRule;
	}


	public HRESULT put_media(VARIANT v) mut => VT.[Friend]put_media(&this, v);

	public HRESULT get_media(VARIANT* p) mut => VT.[Friend]get_media(&this, p);

	public HRESULT get_cssRules(IHTMLStyleSheetRulesCollection** p) mut => VT.[Friend]get_cssRules(&this, p);

	public HRESULT insertRule(BSTR bstrRule, int32 lIndex, int32* plNewIndex) mut => VT.[Friend]insertRule(&this, bstrRule, lIndex, plNewIndex);

	public HRESULT deleteRule(int32 lIndex) mut => VT.[Friend]deleteRule(&this, lIndex);
}

[CRepr]struct IHTMLCSSMediaList : IDispatch
{
	public new const Guid IID = .(0x30510731, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_mediaText;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_mediaText;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* p) get_length;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 index, BSTR* pbstrMedium) item;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR bstrMedium) appendMedium;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR bstrMedium) deleteMedium;
	}


	public HRESULT put_mediaText(BSTR v) mut => VT.[Friend]put_mediaText(&this, v);

	public HRESULT get_mediaText(BSTR* p) mut => VT.[Friend]get_mediaText(&this, p);

	public HRESULT get_length(int32* p) mut => VT.[Friend]get_length(&this, p);

	public HRESULT item(int32 index, BSTR* pbstrMedium) mut => VT.[Friend]item(&this, index, pbstrMedium);

	public HRESULT appendMedium(BSTR bstrMedium) mut => VT.[Friend]appendMedium(&this, bstrMedium);

	public HRESULT deleteMedium(BSTR bstrMedium) mut => VT.[Friend]deleteMedium(&this, bstrMedium);
}

[CRepr]struct IHTMLCSSNamespaceRule : IDispatch
{
	public new const Guid IID = .(0x305106ee, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_namespaceURI;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_prefix;
	}


	public HRESULT get_namespaceURI(BSTR* p) mut => VT.[Friend]get_namespaceURI(&this, p);

	public HRESULT get_prefix(BSTR* p) mut => VT.[Friend]get_prefix(&this, p);
}

[CRepr]struct IHTMLMSCSSKeyframeRule : IDispatch
{
	public new const Guid IID = .(0x3051080c, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_keyText;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_keyText;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IHTMLRuleStyle** p) get_style;
	}


	public HRESULT put_keyText(BSTR v) mut => VT.[Friend]put_keyText(&this, v);

	public HRESULT get_keyText(BSTR* p) mut => VT.[Friend]get_keyText(&this, p);

	public HRESULT get_style(IHTMLRuleStyle** p) mut => VT.[Friend]get_style(&this, p);
}

[CRepr]struct IHTMLMSCSSKeyframesRule : IDispatch
{
	public new const Guid IID = .(0x3051080d, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_name;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_name;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IHTMLStyleSheetRulesCollection** p) get_cssRules;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR bstrRule) appendRule;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR bstrKey) deleteRule;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR bstrKey, IHTMLMSCSSKeyframeRule** ppMSKeyframeRule) findRule;
	}


	public HRESULT put_name(BSTR v) mut => VT.[Friend]put_name(&this, v);

	public HRESULT get_name(BSTR* p) mut => VT.[Friend]get_name(&this, p);

	public HRESULT get_cssRules(IHTMLStyleSheetRulesCollection** p) mut => VT.[Friend]get_cssRules(&this, p);

	public HRESULT appendRule(BSTR bstrRule) mut => VT.[Friend]appendRule(&this, bstrRule);

	public HRESULT deleteRule(BSTR bstrKey) mut => VT.[Friend]deleteRule(&this, bstrKey);

	public HRESULT findRule(BSTR bstrKey, IHTMLMSCSSKeyframeRule** ppMSKeyframeRule) mut => VT.[Friend]findRule(&this, bstrKey, ppMSKeyframeRule);
}

[CRepr]struct DispHTMLCSSRule : IDispatch
{
	public new const Guid IID = .(0x3059007d, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
	}

}

[CRepr]struct DispHTMLCSSImportRule : IDispatch
{
	public new const Guid IID = .(0x3059007e, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
	}

}

[CRepr]struct DispHTMLCSSMediaRule : IDispatch
{
	public new const Guid IID = .(0x3059007f, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
	}

}

[CRepr]struct DispHTMLCSSMediaList : IDispatch
{
	public new const Guid IID = .(0x30590097, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
	}

}

[CRepr]struct DispHTMLCSSNamespaceRule : IDispatch
{
	public new const Guid IID = .(0x30590080, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
	}

}

[CRepr]struct DispHTMLMSCSSKeyframeRule : IDispatch
{
	public new const Guid IID = .(0x305900de, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
	}

}

[CRepr]struct DispHTMLMSCSSKeyframesRule : IDispatch
{
	public new const Guid IID = .(0x305900df, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
	}

}

[CRepr]struct IHTMLRenderStyle : IDispatch
{
	public new const Guid IID = .(0x3050f6ae, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_textLineThroughStyle;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_textLineThroughStyle;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_textUnderlineStyle;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_textUnderlineStyle;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_textEffect;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_textEffect;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_textColor;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_textColor;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_textBackgroundColor;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_textBackgroundColor;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_textDecorationColor;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_textDecorationColor;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 v) put_renderingPriority;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* p) get_renderingPriority;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_defaultTextSelection;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_defaultTextSelection;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_textDecoration;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_textDecoration;
	}


	public HRESULT put_textLineThroughStyle(BSTR v) mut => VT.[Friend]put_textLineThroughStyle(&this, v);

	public HRESULT get_textLineThroughStyle(BSTR* p) mut => VT.[Friend]get_textLineThroughStyle(&this, p);

	public HRESULT put_textUnderlineStyle(BSTR v) mut => VT.[Friend]put_textUnderlineStyle(&this, v);

	public HRESULT get_textUnderlineStyle(BSTR* p) mut => VT.[Friend]get_textUnderlineStyle(&this, p);

	public HRESULT put_textEffect(BSTR v) mut => VT.[Friend]put_textEffect(&this, v);

	public HRESULT get_textEffect(BSTR* p) mut => VT.[Friend]get_textEffect(&this, p);

	public HRESULT put_textColor(VARIANT v) mut => VT.[Friend]put_textColor(&this, v);

	public HRESULT get_textColor(VARIANT* p) mut => VT.[Friend]get_textColor(&this, p);

	public HRESULT put_textBackgroundColor(VARIANT v) mut => VT.[Friend]put_textBackgroundColor(&this, v);

	public HRESULT get_textBackgroundColor(VARIANT* p) mut => VT.[Friend]get_textBackgroundColor(&this, p);

	public HRESULT put_textDecorationColor(VARIANT v) mut => VT.[Friend]put_textDecorationColor(&this, v);

	public HRESULT get_textDecorationColor(VARIANT* p) mut => VT.[Friend]get_textDecorationColor(&this, p);

	public HRESULT put_renderingPriority(int32 v) mut => VT.[Friend]put_renderingPriority(&this, v);

	public HRESULT get_renderingPriority(int32* p) mut => VT.[Friend]get_renderingPriority(&this, p);

	public HRESULT put_defaultTextSelection(BSTR v) mut => VT.[Friend]put_defaultTextSelection(&this, v);

	public HRESULT get_defaultTextSelection(BSTR* p) mut => VT.[Friend]get_defaultTextSelection(&this, p);

	public HRESULT put_textDecoration(BSTR v) mut => VT.[Friend]put_textDecoration(&this, v);

	public HRESULT get_textDecoration(BSTR* p) mut => VT.[Friend]get_textDecoration(&this, p);
}

[CRepr]struct DispHTMLRenderStyle : IDispatch
{
	public new const Guid IID = .(0x3050f58b, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
	}

}

[CRepr]struct IHTMLCurrentStyle : IDispatch
{
	public new const Guid IID = .(0x3050f3db, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_position;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_styleFloat;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_color;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_backgroundColor;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_fontFamily;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_fontStyle;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_fontVariant;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_fontWeight;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_fontSize;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_backgroundImage;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_backgroundPositionX;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_backgroundPositionY;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_backgroundRepeat;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_borderLeftColor;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_borderTopColor;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_borderRightColor;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_borderBottomColor;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_borderTopStyle;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_borderRightStyle;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_borderBottomStyle;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_borderLeftStyle;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_borderTopWidth;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_borderRightWidth;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_borderBottomWidth;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_borderLeftWidth;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_left;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_top;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_width;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_height;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_paddingLeft;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_paddingTop;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_paddingRight;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_paddingBottom;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_textAlign;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_textDecoration;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_display;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_visibility;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_zIndex;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_letterSpacing;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_lineHeight;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_textIndent;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_verticalAlign;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_backgroundAttachment;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_marginTop;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_marginRight;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_marginBottom;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_marginLeft;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_clear;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_listStyleType;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_listStylePosition;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_listStyleImage;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_clipTop;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_clipRight;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_clipBottom;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_clipLeft;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_overflow;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_pageBreakBefore;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_pageBreakAfter;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_cursor;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_tableLayout;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_borderCollapse;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_direction;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_behavior;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR strAttributeName, int32 lFlags, VARIANT* AttributeValue) getAttribute;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_unicodeBidi;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_right;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_bottom;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_imeMode;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_rubyAlign;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_rubyPosition;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_rubyOverhang;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_textAutospace;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_lineBreak;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_wordBreak;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_textJustify;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_textJustifyTrim;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_textKashida;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_blockDirection;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_layoutGridChar;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_layoutGridLine;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_layoutGridMode;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_layoutGridType;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_borderStyle;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_borderColor;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_borderWidth;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_padding;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_margin;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_accelerator;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_overflowX;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_overflowY;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_textTransform;
	}


	public HRESULT get_position(BSTR* p) mut => VT.[Friend]get_position(&this, p);

	public HRESULT get_styleFloat(BSTR* p) mut => VT.[Friend]get_styleFloat(&this, p);

	public HRESULT get_color(VARIANT* p) mut => VT.[Friend]get_color(&this, p);

	public HRESULT get_backgroundColor(VARIANT* p) mut => VT.[Friend]get_backgroundColor(&this, p);

	public HRESULT get_fontFamily(BSTR* p) mut => VT.[Friend]get_fontFamily(&this, p);

	public HRESULT get_fontStyle(BSTR* p) mut => VT.[Friend]get_fontStyle(&this, p);

	public HRESULT get_fontVariant(BSTR* p) mut => VT.[Friend]get_fontVariant(&this, p);

	public HRESULT get_fontWeight(VARIANT* p) mut => VT.[Friend]get_fontWeight(&this, p);

	public HRESULT get_fontSize(VARIANT* p) mut => VT.[Friend]get_fontSize(&this, p);

	public HRESULT get_backgroundImage(BSTR* p) mut => VT.[Friend]get_backgroundImage(&this, p);

	public HRESULT get_backgroundPositionX(VARIANT* p) mut => VT.[Friend]get_backgroundPositionX(&this, p);

	public HRESULT get_backgroundPositionY(VARIANT* p) mut => VT.[Friend]get_backgroundPositionY(&this, p);

	public HRESULT get_backgroundRepeat(BSTR* p) mut => VT.[Friend]get_backgroundRepeat(&this, p);

	public HRESULT get_borderLeftColor(VARIANT* p) mut => VT.[Friend]get_borderLeftColor(&this, p);

	public HRESULT get_borderTopColor(VARIANT* p) mut => VT.[Friend]get_borderTopColor(&this, p);

	public HRESULT get_borderRightColor(VARIANT* p) mut => VT.[Friend]get_borderRightColor(&this, p);

	public HRESULT get_borderBottomColor(VARIANT* p) mut => VT.[Friend]get_borderBottomColor(&this, p);

	public HRESULT get_borderTopStyle(BSTR* p) mut => VT.[Friend]get_borderTopStyle(&this, p);

	public HRESULT get_borderRightStyle(BSTR* p) mut => VT.[Friend]get_borderRightStyle(&this, p);

	public HRESULT get_borderBottomStyle(BSTR* p) mut => VT.[Friend]get_borderBottomStyle(&this, p);

	public HRESULT get_borderLeftStyle(BSTR* p) mut => VT.[Friend]get_borderLeftStyle(&this, p);

	public HRESULT get_borderTopWidth(VARIANT* p) mut => VT.[Friend]get_borderTopWidth(&this, p);

	public HRESULT get_borderRightWidth(VARIANT* p) mut => VT.[Friend]get_borderRightWidth(&this, p);

	public HRESULT get_borderBottomWidth(VARIANT* p) mut => VT.[Friend]get_borderBottomWidth(&this, p);

	public HRESULT get_borderLeftWidth(VARIANT* p) mut => VT.[Friend]get_borderLeftWidth(&this, p);

	public HRESULT get_left(VARIANT* p) mut => VT.[Friend]get_left(&this, p);

	public HRESULT get_top(VARIANT* p) mut => VT.[Friend]get_top(&this, p);

	public HRESULT get_width(VARIANT* p) mut => VT.[Friend]get_width(&this, p);

	public HRESULT get_height(VARIANT* p) mut => VT.[Friend]get_height(&this, p);

	public HRESULT get_paddingLeft(VARIANT* p) mut => VT.[Friend]get_paddingLeft(&this, p);

	public HRESULT get_paddingTop(VARIANT* p) mut => VT.[Friend]get_paddingTop(&this, p);

	public HRESULT get_paddingRight(VARIANT* p) mut => VT.[Friend]get_paddingRight(&this, p);

	public HRESULT get_paddingBottom(VARIANT* p) mut => VT.[Friend]get_paddingBottom(&this, p);

	public HRESULT get_textAlign(BSTR* p) mut => VT.[Friend]get_textAlign(&this, p);

	public HRESULT get_textDecoration(BSTR* p) mut => VT.[Friend]get_textDecoration(&this, p);

	public HRESULT get_display(BSTR* p) mut => VT.[Friend]get_display(&this, p);

	public HRESULT get_visibility(BSTR* p) mut => VT.[Friend]get_visibility(&this, p);

	public HRESULT get_zIndex(VARIANT* p) mut => VT.[Friend]get_zIndex(&this, p);

	public HRESULT get_letterSpacing(VARIANT* p) mut => VT.[Friend]get_letterSpacing(&this, p);

	public HRESULT get_lineHeight(VARIANT* p) mut => VT.[Friend]get_lineHeight(&this, p);

	public HRESULT get_textIndent(VARIANT* p) mut => VT.[Friend]get_textIndent(&this, p);

	public HRESULT get_verticalAlign(VARIANT* p) mut => VT.[Friend]get_verticalAlign(&this, p);

	public HRESULT get_backgroundAttachment(BSTR* p) mut => VT.[Friend]get_backgroundAttachment(&this, p);

	public HRESULT get_marginTop(VARIANT* p) mut => VT.[Friend]get_marginTop(&this, p);

	public HRESULT get_marginRight(VARIANT* p) mut => VT.[Friend]get_marginRight(&this, p);

	public HRESULT get_marginBottom(VARIANT* p) mut => VT.[Friend]get_marginBottom(&this, p);

	public HRESULT get_marginLeft(VARIANT* p) mut => VT.[Friend]get_marginLeft(&this, p);

	public HRESULT get_clear(BSTR* p) mut => VT.[Friend]get_clear(&this, p);

	public HRESULT get_listStyleType(BSTR* p) mut => VT.[Friend]get_listStyleType(&this, p);

	public HRESULT get_listStylePosition(BSTR* p) mut => VT.[Friend]get_listStylePosition(&this, p);

	public HRESULT get_listStyleImage(BSTR* p) mut => VT.[Friend]get_listStyleImage(&this, p);

	public HRESULT get_clipTop(VARIANT* p) mut => VT.[Friend]get_clipTop(&this, p);

	public HRESULT get_clipRight(VARIANT* p) mut => VT.[Friend]get_clipRight(&this, p);

	public HRESULT get_clipBottom(VARIANT* p) mut => VT.[Friend]get_clipBottom(&this, p);

	public HRESULT get_clipLeft(VARIANT* p) mut => VT.[Friend]get_clipLeft(&this, p);

	public HRESULT get_overflow(BSTR* p) mut => VT.[Friend]get_overflow(&this, p);

	public HRESULT get_pageBreakBefore(BSTR* p) mut => VT.[Friend]get_pageBreakBefore(&this, p);

	public HRESULT get_pageBreakAfter(BSTR* p) mut => VT.[Friend]get_pageBreakAfter(&this, p);

	public HRESULT get_cursor(BSTR* p) mut => VT.[Friend]get_cursor(&this, p);

	public HRESULT get_tableLayout(BSTR* p) mut => VT.[Friend]get_tableLayout(&this, p);

	public HRESULT get_borderCollapse(BSTR* p) mut => VT.[Friend]get_borderCollapse(&this, p);

	public HRESULT get_direction(BSTR* p) mut => VT.[Friend]get_direction(&this, p);

	public HRESULT get_behavior(BSTR* p) mut => VT.[Friend]get_behavior(&this, p);

	public HRESULT getAttribute(BSTR strAttributeName, int32 lFlags, VARIANT* AttributeValue) mut => VT.[Friend]getAttribute(&this, strAttributeName, lFlags, AttributeValue);

	public HRESULT get_unicodeBidi(BSTR* p) mut => VT.[Friend]get_unicodeBidi(&this, p);

	public HRESULT get_right(VARIANT* p) mut => VT.[Friend]get_right(&this, p);

	public HRESULT get_bottom(VARIANT* p) mut => VT.[Friend]get_bottom(&this, p);

	public HRESULT get_imeMode(BSTR* p) mut => VT.[Friend]get_imeMode(&this, p);

	public HRESULT get_rubyAlign(BSTR* p) mut => VT.[Friend]get_rubyAlign(&this, p);

	public HRESULT get_rubyPosition(BSTR* p) mut => VT.[Friend]get_rubyPosition(&this, p);

	public HRESULT get_rubyOverhang(BSTR* p) mut => VT.[Friend]get_rubyOverhang(&this, p);

	public HRESULT get_textAutospace(BSTR* p) mut => VT.[Friend]get_textAutospace(&this, p);

	public HRESULT get_lineBreak(BSTR* p) mut => VT.[Friend]get_lineBreak(&this, p);

	public HRESULT get_wordBreak(BSTR* p) mut => VT.[Friend]get_wordBreak(&this, p);

	public HRESULT get_textJustify(BSTR* p) mut => VT.[Friend]get_textJustify(&this, p);

	public HRESULT get_textJustifyTrim(BSTR* p) mut => VT.[Friend]get_textJustifyTrim(&this, p);

	public HRESULT get_textKashida(VARIANT* p) mut => VT.[Friend]get_textKashida(&this, p);

	public HRESULT get_blockDirection(BSTR* p) mut => VT.[Friend]get_blockDirection(&this, p);

	public HRESULT get_layoutGridChar(VARIANT* p) mut => VT.[Friend]get_layoutGridChar(&this, p);

	public HRESULT get_layoutGridLine(VARIANT* p) mut => VT.[Friend]get_layoutGridLine(&this, p);

	public HRESULT get_layoutGridMode(BSTR* p) mut => VT.[Friend]get_layoutGridMode(&this, p);

	public HRESULT get_layoutGridType(BSTR* p) mut => VT.[Friend]get_layoutGridType(&this, p);

	public HRESULT get_borderStyle(BSTR* p) mut => VT.[Friend]get_borderStyle(&this, p);

	public HRESULT get_borderColor(BSTR* p) mut => VT.[Friend]get_borderColor(&this, p);

	public HRESULT get_borderWidth(BSTR* p) mut => VT.[Friend]get_borderWidth(&this, p);

	public HRESULT get_padding(BSTR* p) mut => VT.[Friend]get_padding(&this, p);

	public HRESULT get_margin(BSTR* p) mut => VT.[Friend]get_margin(&this, p);

	public HRESULT get_accelerator(BSTR* p) mut => VT.[Friend]get_accelerator(&this, p);

	public HRESULT get_overflowX(BSTR* p) mut => VT.[Friend]get_overflowX(&this, p);

	public HRESULT get_overflowY(BSTR* p) mut => VT.[Friend]get_overflowY(&this, p);

	public HRESULT get_textTransform(BSTR* p) mut => VT.[Friend]get_textTransform(&this, p);
}

[CRepr]struct IHTMLCurrentStyle2 : IDispatch
{
	public new const Guid IID = .(0x3050f658, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_layoutFlow;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_wordWrap;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_textUnderlinePosition;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16* p) get_hasLayout;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_scrollbarBaseColor;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_scrollbarFaceColor;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_scrollbar3dLightColor;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_scrollbarShadowColor;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_scrollbarHighlightColor;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_scrollbarDarkShadowColor;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_scrollbarArrowColor;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_scrollbarTrackColor;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_writingMode;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_zoom;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_filter;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_textAlignLast;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_textKashidaSpace;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16* p) get_isBlock;
	}


	public HRESULT get_layoutFlow(BSTR* p) mut => VT.[Friend]get_layoutFlow(&this, p);

	public HRESULT get_wordWrap(BSTR* p) mut => VT.[Friend]get_wordWrap(&this, p);

	public HRESULT get_textUnderlinePosition(BSTR* p) mut => VT.[Friend]get_textUnderlinePosition(&this, p);

	public HRESULT get_hasLayout(int16* p) mut => VT.[Friend]get_hasLayout(&this, p);

	public HRESULT get_scrollbarBaseColor(VARIANT* p) mut => VT.[Friend]get_scrollbarBaseColor(&this, p);

	public HRESULT get_scrollbarFaceColor(VARIANT* p) mut => VT.[Friend]get_scrollbarFaceColor(&this, p);

	public HRESULT get_scrollbar3dLightColor(VARIANT* p) mut => VT.[Friend]get_scrollbar3dLightColor(&this, p);

	public HRESULT get_scrollbarShadowColor(VARIANT* p) mut => VT.[Friend]get_scrollbarShadowColor(&this, p);

	public HRESULT get_scrollbarHighlightColor(VARIANT* p) mut => VT.[Friend]get_scrollbarHighlightColor(&this, p);

	public HRESULT get_scrollbarDarkShadowColor(VARIANT* p) mut => VT.[Friend]get_scrollbarDarkShadowColor(&this, p);

	public HRESULT get_scrollbarArrowColor(VARIANT* p) mut => VT.[Friend]get_scrollbarArrowColor(&this, p);

	public HRESULT get_scrollbarTrackColor(VARIANT* p) mut => VT.[Friend]get_scrollbarTrackColor(&this, p);

	public HRESULT get_writingMode(BSTR* p) mut => VT.[Friend]get_writingMode(&this, p);

	public HRESULT get_zoom(VARIANT* p) mut => VT.[Friend]get_zoom(&this, p);

	public HRESULT get_filter(BSTR* p) mut => VT.[Friend]get_filter(&this, p);

	public HRESULT get_textAlignLast(BSTR* p) mut => VT.[Friend]get_textAlignLast(&this, p);

	public HRESULT get_textKashidaSpace(VARIANT* p) mut => VT.[Friend]get_textKashidaSpace(&this, p);

	public HRESULT get_isBlock(int16* p) mut => VT.[Friend]get_isBlock(&this, p);
}

[CRepr]struct IHTMLCurrentStyle3 : IDispatch
{
	public new const Guid IID = .(0x3050f818, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_textOverflow;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_minHeight;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_wordSpacing;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_whiteSpace;
	}


	public HRESULT get_textOverflow(BSTR* p) mut => VT.[Friend]get_textOverflow(&this, p);

	public HRESULT get_minHeight(VARIANT* p) mut => VT.[Friend]get_minHeight(&this, p);

	public HRESULT get_wordSpacing(VARIANT* p) mut => VT.[Friend]get_wordSpacing(&this, p);

	public HRESULT get_whiteSpace(BSTR* p) mut => VT.[Friend]get_whiteSpace(&this, p);
}

[CRepr]struct IHTMLCurrentStyle4 : IDispatch
{
	public new const Guid IID = .(0x3050f33b, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_msInterpolationMode;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_maxHeight;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_minWidth;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_maxWidth;
	}


	public HRESULT get_msInterpolationMode(BSTR* p) mut => VT.[Friend]get_msInterpolationMode(&this, p);

	public HRESULT get_maxHeight(VARIANT* p) mut => VT.[Friend]get_maxHeight(&this, p);

	public HRESULT get_minWidth(VARIANT* p) mut => VT.[Friend]get_minWidth(&this, p);

	public HRESULT get_maxWidth(VARIANT* p) mut => VT.[Friend]get_maxWidth(&this, p);
}

[CRepr]struct IHTMLCurrentStyle5 : IDispatch
{
	public new const Guid IID = .(0x30510481, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_captionSide;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_outline;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_outlineWidth;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_outlineStyle;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_outlineColor;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_boxSizing;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_borderSpacing;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_orphans;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_widows;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_pageBreakInside;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_emptyCells;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_msBlockProgression;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_quotes;
	}


	public HRESULT get_captionSide(BSTR* p) mut => VT.[Friend]get_captionSide(&this, p);

	public HRESULT get_outline(BSTR* p) mut => VT.[Friend]get_outline(&this, p);

	public HRESULT get_outlineWidth(VARIANT* p) mut => VT.[Friend]get_outlineWidth(&this, p);

	public HRESULT get_outlineStyle(BSTR* p) mut => VT.[Friend]get_outlineStyle(&this, p);

	public HRESULT get_outlineColor(VARIANT* p) mut => VT.[Friend]get_outlineColor(&this, p);

	public HRESULT get_boxSizing(BSTR* p) mut => VT.[Friend]get_boxSizing(&this, p);

	public HRESULT get_borderSpacing(BSTR* p) mut => VT.[Friend]get_borderSpacing(&this, p);

	public HRESULT get_orphans(VARIANT* p) mut => VT.[Friend]get_orphans(&this, p);

	public HRESULT get_widows(VARIANT* p) mut => VT.[Friend]get_widows(&this, p);

	public HRESULT get_pageBreakInside(BSTR* p) mut => VT.[Friend]get_pageBreakInside(&this, p);

	public HRESULT get_emptyCells(BSTR* p) mut => VT.[Friend]get_emptyCells(&this, p);

	public HRESULT get_msBlockProgression(BSTR* p) mut => VT.[Friend]get_msBlockProgression(&this, p);

	public HRESULT get_quotes(BSTR* p) mut => VT.[Friend]get_quotes(&this, p);
}

[CRepr]struct DispHTMLCurrentStyle : IDispatch
{
	public new const Guid IID = .(0x3050f557, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
	}

}

[CRepr]struct IHTMLElement : IDispatch
{
	public new const Guid IID = .(0x3050f1ff, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR strAttributeName, VARIANT AttributeValue, int32 lFlags) setAttribute;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR strAttributeName, int32 lFlags, VARIANT* AttributeValue) getAttribute;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR strAttributeName, int32 lFlags, int16* pfSuccess) removeAttribute;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_className;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_className;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_id;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_id;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_tagName;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IHTMLElement** p) get_parentElement;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IHTMLStyle** p) get_style;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_onhelp;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_onhelp;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_onclick;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_onclick;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_ondblclick;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_ondblclick;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_onkeydown;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_onkeydown;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_onkeyup;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_onkeyup;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_onkeypress;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_onkeypress;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_onmouseout;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_onmouseout;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_onmouseover;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_onmouseover;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_onmousemove;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_onmousemove;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_onmousedown;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_onmousedown;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_onmouseup;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_onmouseup;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IDispatch** p) get_document;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_title;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_title;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_language;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_language;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_onselectstart;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_onselectstart;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT varargStart) scrollIntoView;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IHTMLElement* pChild, int16* pfResult) contains;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* p) get_sourceIndex;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_recordNumber;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_lang;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_lang;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* p) get_offsetLeft;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* p) get_offsetTop;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* p) get_offsetWidth;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* p) get_offsetHeight;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IHTMLElement** p) get_offsetParent;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_innerHTML;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_innerHTML;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_innerText;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_innerText;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_outerHTML;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_outerHTML;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_outerText;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_outerText;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR @where, BSTR html) insertAdjacentHTML;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR @where, BSTR text) insertAdjacentText;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IHTMLElement** p) get_parentTextEdit;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16* p) get_isTextEdit;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self) click;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IHTMLFiltersCollection** p) get_filters;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_ondragstart;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_ondragstart;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* String) toString;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_onbeforeupdate;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_onbeforeupdate;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_onafterupdate;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_onafterupdate;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_onerrorupdate;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_onerrorupdate;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_onrowexit;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_onrowexit;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_onrowenter;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_onrowenter;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_ondatasetchanged;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_ondatasetchanged;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_ondataavailable;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_ondataavailable;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_ondatasetcomplete;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_ondatasetcomplete;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_onfilterchange;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_onfilterchange;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IDispatch** p) get_children;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IDispatch** p) get_all;
	}


	public HRESULT setAttribute(BSTR strAttributeName, VARIANT AttributeValue, int32 lFlags) mut => VT.[Friend]setAttribute(&this, strAttributeName, AttributeValue, lFlags);

	public HRESULT getAttribute(BSTR strAttributeName, int32 lFlags, VARIANT* AttributeValue) mut => VT.[Friend]getAttribute(&this, strAttributeName, lFlags, AttributeValue);

	public HRESULT removeAttribute(BSTR strAttributeName, int32 lFlags, int16* pfSuccess) mut => VT.[Friend]removeAttribute(&this, strAttributeName, lFlags, pfSuccess);

	public HRESULT put_className(BSTR v) mut => VT.[Friend]put_className(&this, v);

	public HRESULT get_className(BSTR* p) mut => VT.[Friend]get_className(&this, p);

	public HRESULT put_id(BSTR v) mut => VT.[Friend]put_id(&this, v);

	public HRESULT get_id(BSTR* p) mut => VT.[Friend]get_id(&this, p);

	public HRESULT get_tagName(BSTR* p) mut => VT.[Friend]get_tagName(&this, p);

	public HRESULT get_parentElement(IHTMLElement** p) mut => VT.[Friend]get_parentElement(&this, p);

	public HRESULT get_style(IHTMLStyle** p) mut => VT.[Friend]get_style(&this, p);

	public HRESULT put_onhelp(VARIANT v) mut => VT.[Friend]put_onhelp(&this, v);

	public HRESULT get_onhelp(VARIANT* p) mut => VT.[Friend]get_onhelp(&this, p);

	public HRESULT put_onclick(VARIANT v) mut => VT.[Friend]put_onclick(&this, v);

	public HRESULT get_onclick(VARIANT* p) mut => VT.[Friend]get_onclick(&this, p);

	public HRESULT put_ondblclick(VARIANT v) mut => VT.[Friend]put_ondblclick(&this, v);

	public HRESULT get_ondblclick(VARIANT* p) mut => VT.[Friend]get_ondblclick(&this, p);

	public HRESULT put_onkeydown(VARIANT v) mut => VT.[Friend]put_onkeydown(&this, v);

	public HRESULT get_onkeydown(VARIANT* p) mut => VT.[Friend]get_onkeydown(&this, p);

	public HRESULT put_onkeyup(VARIANT v) mut => VT.[Friend]put_onkeyup(&this, v);

	public HRESULT get_onkeyup(VARIANT* p) mut => VT.[Friend]get_onkeyup(&this, p);

	public HRESULT put_onkeypress(VARIANT v) mut => VT.[Friend]put_onkeypress(&this, v);

	public HRESULT get_onkeypress(VARIANT* p) mut => VT.[Friend]get_onkeypress(&this, p);

	public HRESULT put_onmouseout(VARIANT v) mut => VT.[Friend]put_onmouseout(&this, v);

	public HRESULT get_onmouseout(VARIANT* p) mut => VT.[Friend]get_onmouseout(&this, p);

	public HRESULT put_onmouseover(VARIANT v) mut => VT.[Friend]put_onmouseover(&this, v);

	public HRESULT get_onmouseover(VARIANT* p) mut => VT.[Friend]get_onmouseover(&this, p);

	public HRESULT put_onmousemove(VARIANT v) mut => VT.[Friend]put_onmousemove(&this, v);

	public HRESULT get_onmousemove(VARIANT* p) mut => VT.[Friend]get_onmousemove(&this, p);

	public HRESULT put_onmousedown(VARIANT v) mut => VT.[Friend]put_onmousedown(&this, v);

	public HRESULT get_onmousedown(VARIANT* p) mut => VT.[Friend]get_onmousedown(&this, p);

	public HRESULT put_onmouseup(VARIANT v) mut => VT.[Friend]put_onmouseup(&this, v);

	public HRESULT get_onmouseup(VARIANT* p) mut => VT.[Friend]get_onmouseup(&this, p);

	public HRESULT get_document(IDispatch** p) mut => VT.[Friend]get_document(&this, p);

	public HRESULT put_title(BSTR v) mut => VT.[Friend]put_title(&this, v);

	public HRESULT get_title(BSTR* p) mut => VT.[Friend]get_title(&this, p);

	public HRESULT put_language(BSTR v) mut => VT.[Friend]put_language(&this, v);

	public HRESULT get_language(BSTR* p) mut => VT.[Friend]get_language(&this, p);

	public HRESULT put_onselectstart(VARIANT v) mut => VT.[Friend]put_onselectstart(&this, v);

	public HRESULT get_onselectstart(VARIANT* p) mut => VT.[Friend]get_onselectstart(&this, p);

	public HRESULT scrollIntoView(VARIANT varargStart) mut => VT.[Friend]scrollIntoView(&this, varargStart);

	public HRESULT contains(IHTMLElement* pChild, int16* pfResult) mut => VT.[Friend]contains(&this, pChild, pfResult);

	public HRESULT get_sourceIndex(int32* p) mut => VT.[Friend]get_sourceIndex(&this, p);

	public HRESULT get_recordNumber(VARIANT* p) mut => VT.[Friend]get_recordNumber(&this, p);

	public HRESULT put_lang(BSTR v) mut => VT.[Friend]put_lang(&this, v);

	public HRESULT get_lang(BSTR* p) mut => VT.[Friend]get_lang(&this, p);

	public HRESULT get_offsetLeft(int32* p) mut => VT.[Friend]get_offsetLeft(&this, p);

	public HRESULT get_offsetTop(int32* p) mut => VT.[Friend]get_offsetTop(&this, p);

	public HRESULT get_offsetWidth(int32* p) mut => VT.[Friend]get_offsetWidth(&this, p);

	public HRESULT get_offsetHeight(int32* p) mut => VT.[Friend]get_offsetHeight(&this, p);

	public HRESULT get_offsetParent(IHTMLElement** p) mut => VT.[Friend]get_offsetParent(&this, p);

	public HRESULT put_innerHTML(BSTR v) mut => VT.[Friend]put_innerHTML(&this, v);

	public HRESULT get_innerHTML(BSTR* p) mut => VT.[Friend]get_innerHTML(&this, p);

	public HRESULT put_innerText(BSTR v) mut => VT.[Friend]put_innerText(&this, v);

	public HRESULT get_innerText(BSTR* p) mut => VT.[Friend]get_innerText(&this, p);

	public HRESULT put_outerHTML(BSTR v) mut => VT.[Friend]put_outerHTML(&this, v);

	public HRESULT get_outerHTML(BSTR* p) mut => VT.[Friend]get_outerHTML(&this, p);

	public HRESULT put_outerText(BSTR v) mut => VT.[Friend]put_outerText(&this, v);

	public HRESULT get_outerText(BSTR* p) mut => VT.[Friend]get_outerText(&this, p);

	public HRESULT insertAdjacentHTML(BSTR @where, BSTR html) mut => VT.[Friend]insertAdjacentHTML(&this, @where, html);

	public HRESULT insertAdjacentText(BSTR @where, BSTR text) mut => VT.[Friend]insertAdjacentText(&this, @where, text);

	public HRESULT get_parentTextEdit(IHTMLElement** p) mut => VT.[Friend]get_parentTextEdit(&this, p);

	public HRESULT get_isTextEdit(int16* p) mut => VT.[Friend]get_isTextEdit(&this, p);

	public HRESULT click() mut => VT.[Friend]click(&this);

	public HRESULT get_filters(IHTMLFiltersCollection** p) mut => VT.[Friend]get_filters(&this, p);

	public HRESULT put_ondragstart(VARIANT v) mut => VT.[Friend]put_ondragstart(&this, v);

	public HRESULT get_ondragstart(VARIANT* p) mut => VT.[Friend]get_ondragstart(&this, p);

	public HRESULT toString(BSTR* String) mut => VT.[Friend]toString(&this, String);

	public HRESULT put_onbeforeupdate(VARIANT v) mut => VT.[Friend]put_onbeforeupdate(&this, v);

	public HRESULT get_onbeforeupdate(VARIANT* p) mut => VT.[Friend]get_onbeforeupdate(&this, p);

	public HRESULT put_onafterupdate(VARIANT v) mut => VT.[Friend]put_onafterupdate(&this, v);

	public HRESULT get_onafterupdate(VARIANT* p) mut => VT.[Friend]get_onafterupdate(&this, p);

	public HRESULT put_onerrorupdate(VARIANT v) mut => VT.[Friend]put_onerrorupdate(&this, v);

	public HRESULT get_onerrorupdate(VARIANT* p) mut => VT.[Friend]get_onerrorupdate(&this, p);

	public HRESULT put_onrowexit(VARIANT v) mut => VT.[Friend]put_onrowexit(&this, v);

	public HRESULT get_onrowexit(VARIANT* p) mut => VT.[Friend]get_onrowexit(&this, p);

	public HRESULT put_onrowenter(VARIANT v) mut => VT.[Friend]put_onrowenter(&this, v);

	public HRESULT get_onrowenter(VARIANT* p) mut => VT.[Friend]get_onrowenter(&this, p);

	public HRESULT put_ondatasetchanged(VARIANT v) mut => VT.[Friend]put_ondatasetchanged(&this, v);

	public HRESULT get_ondatasetchanged(VARIANT* p) mut => VT.[Friend]get_ondatasetchanged(&this, p);

	public HRESULT put_ondataavailable(VARIANT v) mut => VT.[Friend]put_ondataavailable(&this, v);

	public HRESULT get_ondataavailable(VARIANT* p) mut => VT.[Friend]get_ondataavailable(&this, p);

	public HRESULT put_ondatasetcomplete(VARIANT v) mut => VT.[Friend]put_ondatasetcomplete(&this, v);

	public HRESULT get_ondatasetcomplete(VARIANT* p) mut => VT.[Friend]get_ondatasetcomplete(&this, p);

	public HRESULT put_onfilterchange(VARIANT v) mut => VT.[Friend]put_onfilterchange(&this, v);

	public HRESULT get_onfilterchange(VARIANT* p) mut => VT.[Friend]get_onfilterchange(&this, p);

	public HRESULT get_children(IDispatch** p) mut => VT.[Friend]get_children(&this, p);

	public HRESULT get_all(IDispatch** p) mut => VT.[Friend]get_all(&this, p);
}

[CRepr]struct IHTMLRect : IDispatch
{
	public new const Guid IID = .(0x3050f4a3, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 v) put_left;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* p) get_left;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 v) put_top;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* p) get_top;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 v) put_right;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* p) get_right;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 v) put_bottom;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* p) get_bottom;
	}


	public HRESULT put_left(int32 v) mut => VT.[Friend]put_left(&this, v);

	public HRESULT get_left(int32* p) mut => VT.[Friend]get_left(&this, p);

	public HRESULT put_top(int32 v) mut => VT.[Friend]put_top(&this, v);

	public HRESULT get_top(int32* p) mut => VT.[Friend]get_top(&this, p);

	public HRESULT put_right(int32 v) mut => VT.[Friend]put_right(&this, v);

	public HRESULT get_right(int32* p) mut => VT.[Friend]get_right(&this, p);

	public HRESULT put_bottom(int32 v) mut => VT.[Friend]put_bottom(&this, v);

	public HRESULT get_bottom(int32* p) mut => VT.[Friend]get_bottom(&this, p);
}

[CRepr]struct IHTMLRect2 : IDispatch
{
	public new const Guid IID = .(0x3051076c, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, float* p) get_width;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, float* p) get_height;
	}


	public HRESULT get_width(float* p) mut => VT.[Friend]get_width(&this, p);

	public HRESULT get_height(float* p) mut => VT.[Friend]get_height(&this, p);
}

[CRepr]struct IHTMLRectCollection : IDispatch
{
	public new const Guid IID = .(0x3050f4a4, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* p) get_length;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IUnknown** p) get__newEnum;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* pvarIndex, VARIANT* pvarResult) item;
	}


	public HRESULT get_length(int32* p) mut => VT.[Friend]get_length(&this, p);

	public HRESULT get__newEnum(IUnknown** p) mut => VT.[Friend]get__newEnum(&this, p);

	public HRESULT item(VARIANT* pvarIndex, VARIANT* pvarResult) mut => VT.[Friend]item(&this, pvarIndex, pvarResult);
}

[CRepr]struct IHTMLElementCollection : IDispatch
{
	public new const Guid IID = .(0x3050f21f, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* String) toString;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 v) put_length;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* p) get_length;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IUnknown** p) get__newEnum;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT name, VARIANT index, IDispatch** pdisp) item;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT tagName, IDispatch** pdisp) tags;
	}


	public HRESULT toString(BSTR* String) mut => VT.[Friend]toString(&this, String);

	public HRESULT put_length(int32 v) mut => VT.[Friend]put_length(&this, v);

	public HRESULT get_length(int32* p) mut => VT.[Friend]get_length(&this, p);

	public HRESULT get__newEnum(IUnknown** p) mut => VT.[Friend]get__newEnum(&this, p);

	public HRESULT item(VARIANT name, VARIANT index, IDispatch** pdisp) mut => VT.[Friend]item(&this, name, index, pdisp);

	public HRESULT tags(VARIANT tagName, IDispatch** pdisp) mut => VT.[Friend]tags(&this, tagName, pdisp);
}

[CRepr]struct IHTMLElement2 : IDispatch
{
	public new const Guid IID = .(0x3050f434, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_scopeName;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16 containerCapture) setCapture;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self) releaseCapture;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_onlosecapture;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_onlosecapture;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 x, int32 y, BSTR* component) componentFromPoint;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT component) doScroll;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_onscroll;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_onscroll;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_ondrag;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_ondrag;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_ondragend;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_ondragend;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_ondragenter;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_ondragenter;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_ondragover;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_ondragover;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_ondragleave;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_ondragleave;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_ondrop;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_ondrop;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_onbeforecut;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_onbeforecut;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_oncut;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_oncut;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_onbeforecopy;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_onbeforecopy;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_oncopy;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_oncopy;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_onbeforepaste;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_onbeforepaste;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_onpaste;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_onpaste;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IHTMLCurrentStyle** p) get_currentStyle;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_onpropertychange;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_onpropertychange;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IHTMLRectCollection** pRectCol) getClientRects;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IHTMLRect** pRect) getBoundingClientRect;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR propname, BSTR expression, BSTR language) setExpression;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR propname, VARIANT* expression) getExpression;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR propname, int16* pfSuccess) removeExpression;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16 v) put_tabIndex;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16* p) get_tabIndex;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self) focus;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_accessKey;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_accessKey;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_onblur;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_onblur;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_onfocus;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_onfocus;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_onresize;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_onresize;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self) blur;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IUnknown* pUnk) addFilter;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IUnknown* pUnk) removeFilter;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* p) get_clientHeight;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* p) get_clientWidth;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* p) get_clientTop;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* p) get_clientLeft;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR event, IDispatch* pDisp, int16* pfResult) attachEvent;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR event, IDispatch* pDisp) detachEvent;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_readyState;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_onreadystatechange;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_onreadystatechange;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_onrowsdelete;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_onrowsdelete;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_onrowsinserted;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_onrowsinserted;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_oncellchange;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_oncellchange;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_dir;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_dir;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IDispatch** range) createControlRange;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* p) get_scrollHeight;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* p) get_scrollWidth;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 v) put_scrollTop;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* p) get_scrollTop;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 v) put_scrollLeft;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* p) get_scrollLeft;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self) clearAttributes;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IHTMLElement* mergeThis) mergeAttributes;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_oncontextmenu;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_oncontextmenu;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR @where, IHTMLElement* insertedElement, IHTMLElement** inserted) insertAdjacentElement;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IHTMLElement* apply, BSTR @where, IHTMLElement** applied) applyElement;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR @where, BSTR* text) getAdjacentText;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR @where, BSTR newText, BSTR* oldText) replaceAdjacentText;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16* p) get_canHaveChildren;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR bstrUrl, VARIANT* pvarFactory, int32* pCookie) addBehavior;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 cookie, int16* pfResult) removeBehavior;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IHTMLStyle** p) get_runtimeStyle;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IDispatch** p) get_behaviorUrns;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_tagUrn;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_tagUrn;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_onbeforeeditfocus;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_onbeforeeditfocus;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* p) get_readyStateValue;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v, IHTMLElementCollection** pelColl) getElementsByTagName;
	}


	public HRESULT get_scopeName(BSTR* p) mut => VT.[Friend]get_scopeName(&this, p);

	public HRESULT setCapture(int16 containerCapture) mut => VT.[Friend]setCapture(&this, containerCapture);

	public HRESULT releaseCapture() mut => VT.[Friend]releaseCapture(&this);

	public HRESULT put_onlosecapture(VARIANT v) mut => VT.[Friend]put_onlosecapture(&this, v);

	public HRESULT get_onlosecapture(VARIANT* p) mut => VT.[Friend]get_onlosecapture(&this, p);

	public HRESULT componentFromPoint(int32 x, int32 y, BSTR* component) mut => VT.[Friend]componentFromPoint(&this, x, y, component);

	public HRESULT doScroll(VARIANT component) mut => VT.[Friend]doScroll(&this, component);

	public HRESULT put_onscroll(VARIANT v) mut => VT.[Friend]put_onscroll(&this, v);

	public HRESULT get_onscroll(VARIANT* p) mut => VT.[Friend]get_onscroll(&this, p);

	public HRESULT put_ondrag(VARIANT v) mut => VT.[Friend]put_ondrag(&this, v);

	public HRESULT get_ondrag(VARIANT* p) mut => VT.[Friend]get_ondrag(&this, p);

	public HRESULT put_ondragend(VARIANT v) mut => VT.[Friend]put_ondragend(&this, v);

	public HRESULT get_ondragend(VARIANT* p) mut => VT.[Friend]get_ondragend(&this, p);

	public HRESULT put_ondragenter(VARIANT v) mut => VT.[Friend]put_ondragenter(&this, v);

	public HRESULT get_ondragenter(VARIANT* p) mut => VT.[Friend]get_ondragenter(&this, p);

	public HRESULT put_ondragover(VARIANT v) mut => VT.[Friend]put_ondragover(&this, v);

	public HRESULT get_ondragover(VARIANT* p) mut => VT.[Friend]get_ondragover(&this, p);

	public HRESULT put_ondragleave(VARIANT v) mut => VT.[Friend]put_ondragleave(&this, v);

	public HRESULT get_ondragleave(VARIANT* p) mut => VT.[Friend]get_ondragleave(&this, p);

	public HRESULT put_ondrop(VARIANT v) mut => VT.[Friend]put_ondrop(&this, v);

	public HRESULT get_ondrop(VARIANT* p) mut => VT.[Friend]get_ondrop(&this, p);

	public HRESULT put_onbeforecut(VARIANT v) mut => VT.[Friend]put_onbeforecut(&this, v);

	public HRESULT get_onbeforecut(VARIANT* p) mut => VT.[Friend]get_onbeforecut(&this, p);

	public HRESULT put_oncut(VARIANT v) mut => VT.[Friend]put_oncut(&this, v);

	public HRESULT get_oncut(VARIANT* p) mut => VT.[Friend]get_oncut(&this, p);

	public HRESULT put_onbeforecopy(VARIANT v) mut => VT.[Friend]put_onbeforecopy(&this, v);

	public HRESULT get_onbeforecopy(VARIANT* p) mut => VT.[Friend]get_onbeforecopy(&this, p);

	public HRESULT put_oncopy(VARIANT v) mut => VT.[Friend]put_oncopy(&this, v);

	public HRESULT get_oncopy(VARIANT* p) mut => VT.[Friend]get_oncopy(&this, p);

	public HRESULT put_onbeforepaste(VARIANT v) mut => VT.[Friend]put_onbeforepaste(&this, v);

	public HRESULT get_onbeforepaste(VARIANT* p) mut => VT.[Friend]get_onbeforepaste(&this, p);

	public HRESULT put_onpaste(VARIANT v) mut => VT.[Friend]put_onpaste(&this, v);

	public HRESULT get_onpaste(VARIANT* p) mut => VT.[Friend]get_onpaste(&this, p);

	public HRESULT get_currentStyle(IHTMLCurrentStyle** p) mut => VT.[Friend]get_currentStyle(&this, p);

	public HRESULT put_onpropertychange(VARIANT v) mut => VT.[Friend]put_onpropertychange(&this, v);

	public HRESULT get_onpropertychange(VARIANT* p) mut => VT.[Friend]get_onpropertychange(&this, p);

	public HRESULT getClientRects(IHTMLRectCollection** pRectCol) mut => VT.[Friend]getClientRects(&this, pRectCol);

	public HRESULT getBoundingClientRect(IHTMLRect** pRect) mut => VT.[Friend]getBoundingClientRect(&this, pRect);

	public HRESULT setExpression(BSTR propname, BSTR expression, BSTR language) mut => VT.[Friend]setExpression(&this, propname, expression, language);

	public HRESULT getExpression(BSTR propname, VARIANT* expression) mut => VT.[Friend]getExpression(&this, propname, expression);

	public HRESULT removeExpression(BSTR propname, int16* pfSuccess) mut => VT.[Friend]removeExpression(&this, propname, pfSuccess);

	public HRESULT put_tabIndex(int16 v) mut => VT.[Friend]put_tabIndex(&this, v);

	public HRESULT get_tabIndex(int16* p) mut => VT.[Friend]get_tabIndex(&this, p);

	public HRESULT focus() mut => VT.[Friend]focus(&this);

	public HRESULT put_accessKey(BSTR v) mut => VT.[Friend]put_accessKey(&this, v);

	public HRESULT get_accessKey(BSTR* p) mut => VT.[Friend]get_accessKey(&this, p);

	public HRESULT put_onblur(VARIANT v) mut => VT.[Friend]put_onblur(&this, v);

	public HRESULT get_onblur(VARIANT* p) mut => VT.[Friend]get_onblur(&this, p);

	public HRESULT put_onfocus(VARIANT v) mut => VT.[Friend]put_onfocus(&this, v);

	public HRESULT get_onfocus(VARIANT* p) mut => VT.[Friend]get_onfocus(&this, p);

	public HRESULT put_onresize(VARIANT v) mut => VT.[Friend]put_onresize(&this, v);

	public HRESULT get_onresize(VARIANT* p) mut => VT.[Friend]get_onresize(&this, p);

	public HRESULT blur() mut => VT.[Friend]blur(&this);

	public HRESULT addFilter(IUnknown* pUnk) mut => VT.[Friend]addFilter(&this, pUnk);

	public HRESULT removeFilter(IUnknown* pUnk) mut => VT.[Friend]removeFilter(&this, pUnk);

	public HRESULT get_clientHeight(int32* p) mut => VT.[Friend]get_clientHeight(&this, p);

	public HRESULT get_clientWidth(int32* p) mut => VT.[Friend]get_clientWidth(&this, p);

	public HRESULT get_clientTop(int32* p) mut => VT.[Friend]get_clientTop(&this, p);

	public HRESULT get_clientLeft(int32* p) mut => VT.[Friend]get_clientLeft(&this, p);

	public HRESULT attachEvent(BSTR event, IDispatch* pDisp, int16* pfResult) mut => VT.[Friend]attachEvent(&this, event, pDisp, pfResult);

	public HRESULT detachEvent(BSTR event, IDispatch* pDisp) mut => VT.[Friend]detachEvent(&this, event, pDisp);

	public HRESULT get_readyState(VARIANT* p) mut => VT.[Friend]get_readyState(&this, p);

	public HRESULT put_onreadystatechange(VARIANT v) mut => VT.[Friend]put_onreadystatechange(&this, v);

	public HRESULT get_onreadystatechange(VARIANT* p) mut => VT.[Friend]get_onreadystatechange(&this, p);

	public HRESULT put_onrowsdelete(VARIANT v) mut => VT.[Friend]put_onrowsdelete(&this, v);

	public HRESULT get_onrowsdelete(VARIANT* p) mut => VT.[Friend]get_onrowsdelete(&this, p);

	public HRESULT put_onrowsinserted(VARIANT v) mut => VT.[Friend]put_onrowsinserted(&this, v);

	public HRESULT get_onrowsinserted(VARIANT* p) mut => VT.[Friend]get_onrowsinserted(&this, p);

	public HRESULT put_oncellchange(VARIANT v) mut => VT.[Friend]put_oncellchange(&this, v);

	public HRESULT get_oncellchange(VARIANT* p) mut => VT.[Friend]get_oncellchange(&this, p);

	public HRESULT put_dir(BSTR v) mut => VT.[Friend]put_dir(&this, v);

	public HRESULT get_dir(BSTR* p) mut => VT.[Friend]get_dir(&this, p);

	public HRESULT createControlRange(IDispatch** range) mut => VT.[Friend]createControlRange(&this, range);

	public HRESULT get_scrollHeight(int32* p) mut => VT.[Friend]get_scrollHeight(&this, p);

	public HRESULT get_scrollWidth(int32* p) mut => VT.[Friend]get_scrollWidth(&this, p);

	public HRESULT put_scrollTop(int32 v) mut => VT.[Friend]put_scrollTop(&this, v);

	public HRESULT get_scrollTop(int32* p) mut => VT.[Friend]get_scrollTop(&this, p);

	public HRESULT put_scrollLeft(int32 v) mut => VT.[Friend]put_scrollLeft(&this, v);

	public HRESULT get_scrollLeft(int32* p) mut => VT.[Friend]get_scrollLeft(&this, p);

	public HRESULT clearAttributes() mut => VT.[Friend]clearAttributes(&this);

	public HRESULT mergeAttributes(IHTMLElement* mergeThis) mut => VT.[Friend]mergeAttributes(&this, mergeThis);

	public HRESULT put_oncontextmenu(VARIANT v) mut => VT.[Friend]put_oncontextmenu(&this, v);

	public HRESULT get_oncontextmenu(VARIANT* p) mut => VT.[Friend]get_oncontextmenu(&this, p);

	public HRESULT insertAdjacentElement(BSTR @where, IHTMLElement* insertedElement, IHTMLElement** inserted) mut => VT.[Friend]insertAdjacentElement(&this, @where, insertedElement, inserted);

	public HRESULT applyElement(IHTMLElement* apply, BSTR @where, IHTMLElement** applied) mut => VT.[Friend]applyElement(&this, apply, @where, applied);

	public HRESULT getAdjacentText(BSTR @where, BSTR* text) mut => VT.[Friend]getAdjacentText(&this, @where, text);

	public HRESULT replaceAdjacentText(BSTR @where, BSTR newText, BSTR* oldText) mut => VT.[Friend]replaceAdjacentText(&this, @where, newText, oldText);

	public HRESULT get_canHaveChildren(int16* p) mut => VT.[Friend]get_canHaveChildren(&this, p);

	public HRESULT addBehavior(BSTR bstrUrl, VARIANT* pvarFactory, int32* pCookie) mut => VT.[Friend]addBehavior(&this, bstrUrl, pvarFactory, pCookie);

	public HRESULT removeBehavior(int32 cookie, int16* pfResult) mut => VT.[Friend]removeBehavior(&this, cookie, pfResult);

	public HRESULT get_runtimeStyle(IHTMLStyle** p) mut => VT.[Friend]get_runtimeStyle(&this, p);

	public HRESULT get_behaviorUrns(IDispatch** p) mut => VT.[Friend]get_behaviorUrns(&this, p);

	public HRESULT put_tagUrn(BSTR v) mut => VT.[Friend]put_tagUrn(&this, v);

	public HRESULT get_tagUrn(BSTR* p) mut => VT.[Friend]get_tagUrn(&this, p);

	public HRESULT put_onbeforeeditfocus(VARIANT v) mut => VT.[Friend]put_onbeforeeditfocus(&this, v);

	public HRESULT get_onbeforeeditfocus(VARIANT* p) mut => VT.[Friend]get_onbeforeeditfocus(&this, p);

	public HRESULT get_readyStateValue(int32* p) mut => VT.[Friend]get_readyStateValue(&this, p);

	public HRESULT getElementsByTagName(BSTR v, IHTMLElementCollection** pelColl) mut => VT.[Friend]getElementsByTagName(&this, v, pelColl);
}

[CRepr]struct IHTMLAttributeCollection3 : IDispatch
{
	public new const Guid IID = .(0x30510469, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR bstrName, IHTMLDOMAttribute** ppNodeOut) getNamedItem;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IHTMLDOMAttribute* pNodeIn, IHTMLDOMAttribute** ppNodeOut) setNamedItem;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR bstrName, IHTMLDOMAttribute** ppNodeOut) removeNamedItem;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 index, IHTMLDOMAttribute** ppNodeOut) item;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* p) get_length;
	}


	public HRESULT getNamedItem(BSTR bstrName, IHTMLDOMAttribute** ppNodeOut) mut => VT.[Friend]getNamedItem(&this, bstrName, ppNodeOut);

	public HRESULT setNamedItem(IHTMLDOMAttribute* pNodeIn, IHTMLDOMAttribute** ppNodeOut) mut => VT.[Friend]setNamedItem(&this, pNodeIn, ppNodeOut);

	public HRESULT removeNamedItem(BSTR bstrName, IHTMLDOMAttribute** ppNodeOut) mut => VT.[Friend]removeNamedItem(&this, bstrName, ppNodeOut);

	public HRESULT item(int32 index, IHTMLDOMAttribute** ppNodeOut) mut => VT.[Friend]item(&this, index, ppNodeOut);

	public HRESULT get_length(int32* p) mut => VT.[Friend]get_length(&this, p);
}

[CRepr]struct IDOMDocumentType : IDispatch
{
	public new const Guid IID = .(0x30510738, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_name;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IDispatch** p) get_entities;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IDispatch** p) get_notations;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_publicId;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_systemId;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_internalSubset;
	}


	public HRESULT get_name(BSTR* p) mut => VT.[Friend]get_name(&this, p);

	public HRESULT get_entities(IDispatch** p) mut => VT.[Friend]get_entities(&this, p);

	public HRESULT get_notations(IDispatch** p) mut => VT.[Friend]get_notations(&this, p);

	public HRESULT get_publicId(VARIANT* p) mut => VT.[Friend]get_publicId(&this, p);

	public HRESULT get_systemId(VARIANT* p) mut => VT.[Friend]get_systemId(&this, p);

	public HRESULT get_internalSubset(VARIANT* p) mut => VT.[Friend]get_internalSubset(&this, p);
}

[CRepr]struct IHTMLDocument7 : IDispatch
{
	public new const Guid IID = .(0x305104b8, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IHTMLWindow2** p) get_defaultView;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR text, IHTMLDOMNode** newCDATASectionNode) createCDATASection;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IHTMLSelection** ppIHTMLSelection) getSelection;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* pvarNS, BSTR bstrLocalName, IHTMLElementCollection** pelColl) getElementsByTagNameNS;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* pvarNS, BSTR bstrTag, IHTMLElement** newElem) createElementNS;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* pvarNS, BSTR bstrAttrName, IHTMLDOMAttribute** ppAttribute) createAttributeNS;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_onmsthumbnailclick;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_onmsthumbnailclick;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_characterSet;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR bstrTag, IHTMLElement** newElem) createElement;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR bstrAttrName, IHTMLDOMAttribute** ppAttribute) createAttribute;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v, IHTMLElementCollection** pel) getElementsByClassName;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR bstrTarget, BSTR bstrData, IDOMProcessingInstruction** newProcessingInstruction) createProcessingInstruction;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IHTMLDOMNode* pNodeSource, IHTMLDOMNode3** ppNodeDest) adoptNode;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_onmssitemodejumplistitemremoved;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_onmssitemodejumplistitemremoved;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IHTMLElementCollection** p) get_all;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_inputEncoding;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_xmlEncoding;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16 v) put_xmlStandalone;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16* p) get_xmlStandalone;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_xmlVersion;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_xmlVersion;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16* pfHasAttributes) hasAttributes;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_onabort;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_onabort;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_onblur;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_onblur;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_oncanplay;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_oncanplay;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_oncanplaythrough;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_oncanplaythrough;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_onchange;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_onchange;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_ondrag;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_ondrag;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_ondragend;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_ondragend;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_ondragenter;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_ondragenter;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_ondragleave;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_ondragleave;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_ondragover;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_ondragover;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_ondrop;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_ondrop;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_ondurationchange;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_ondurationchange;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_onemptied;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_onemptied;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_onended;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_onended;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_onerror;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_onerror;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_onfocus;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_onfocus;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_oninput;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_oninput;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_onload;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_onload;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_onloadeddata;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_onloadeddata;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_onloadedmetadata;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_onloadedmetadata;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_onloadstart;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_onloadstart;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_onpause;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_onpause;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_onplay;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_onplay;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_onplaying;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_onplaying;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_onprogress;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_onprogress;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_onratechange;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_onratechange;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_onreset;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_onreset;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_onscroll;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_onscroll;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_onseeked;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_onseeked;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_onseeking;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_onseeking;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_onselect;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_onselect;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_onstalled;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_onstalled;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_onsubmit;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_onsubmit;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_onsuspend;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_onsuspend;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_ontimeupdate;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_ontimeupdate;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_onvolumechange;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_onvolumechange;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_onwaiting;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_onwaiting;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self) normalize;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IHTMLDOMNode* pNodeSource, int16 fDeep, IHTMLDOMNode3** ppNodeDest) importNode;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IHTMLWindow2** p) get_parentWindow;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IHTMLElement* v) putref_body;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IHTMLElement** p) get_body;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IHTMLElement** p) get_head;
	}


	public HRESULT get_defaultView(IHTMLWindow2** p) mut => VT.[Friend]get_defaultView(&this, p);

	public HRESULT createCDATASection(BSTR text, IHTMLDOMNode** newCDATASectionNode) mut => VT.[Friend]createCDATASection(&this, text, newCDATASectionNode);

	public HRESULT getSelection(IHTMLSelection** ppIHTMLSelection) mut => VT.[Friend]getSelection(&this, ppIHTMLSelection);

	public HRESULT getElementsByTagNameNS(VARIANT* pvarNS, BSTR bstrLocalName, IHTMLElementCollection** pelColl) mut => VT.[Friend]getElementsByTagNameNS(&this, pvarNS, bstrLocalName, pelColl);

	public HRESULT createElementNS(VARIANT* pvarNS, BSTR bstrTag, IHTMLElement** newElem) mut => VT.[Friend]createElementNS(&this, pvarNS, bstrTag, newElem);

	public HRESULT createAttributeNS(VARIANT* pvarNS, BSTR bstrAttrName, IHTMLDOMAttribute** ppAttribute) mut => VT.[Friend]createAttributeNS(&this, pvarNS, bstrAttrName, ppAttribute);

	public HRESULT put_onmsthumbnailclick(VARIANT v) mut => VT.[Friend]put_onmsthumbnailclick(&this, v);

	public HRESULT get_onmsthumbnailclick(VARIANT* p) mut => VT.[Friend]get_onmsthumbnailclick(&this, p);

	public HRESULT get_characterSet(BSTR* p) mut => VT.[Friend]get_characterSet(&this, p);

	public HRESULT createElement(BSTR bstrTag, IHTMLElement** newElem) mut => VT.[Friend]createElement(&this, bstrTag, newElem);

	public HRESULT createAttribute(BSTR bstrAttrName, IHTMLDOMAttribute** ppAttribute) mut => VT.[Friend]createAttribute(&this, bstrAttrName, ppAttribute);

	public HRESULT getElementsByClassName(BSTR v, IHTMLElementCollection** pel) mut => VT.[Friend]getElementsByClassName(&this, v, pel);

	public HRESULT createProcessingInstruction(BSTR bstrTarget, BSTR bstrData, IDOMProcessingInstruction** newProcessingInstruction) mut => VT.[Friend]createProcessingInstruction(&this, bstrTarget, bstrData, newProcessingInstruction);

	public HRESULT adoptNode(IHTMLDOMNode* pNodeSource, IHTMLDOMNode3** ppNodeDest) mut => VT.[Friend]adoptNode(&this, pNodeSource, ppNodeDest);

	public HRESULT put_onmssitemodejumplistitemremoved(VARIANT v) mut => VT.[Friend]put_onmssitemodejumplistitemremoved(&this, v);

	public HRESULT get_onmssitemodejumplistitemremoved(VARIANT* p) mut => VT.[Friend]get_onmssitemodejumplistitemremoved(&this, p);

	public HRESULT get_all(IHTMLElementCollection** p) mut => VT.[Friend]get_all(&this, p);

	public HRESULT get_inputEncoding(BSTR* p) mut => VT.[Friend]get_inputEncoding(&this, p);

	public HRESULT get_xmlEncoding(BSTR* p) mut => VT.[Friend]get_xmlEncoding(&this, p);

	public HRESULT put_xmlStandalone(int16 v) mut => VT.[Friend]put_xmlStandalone(&this, v);

	public HRESULT get_xmlStandalone(int16* p) mut => VT.[Friend]get_xmlStandalone(&this, p);

	public HRESULT put_xmlVersion(BSTR v) mut => VT.[Friend]put_xmlVersion(&this, v);

	public HRESULT get_xmlVersion(BSTR* p) mut => VT.[Friend]get_xmlVersion(&this, p);

	public HRESULT hasAttributes(int16* pfHasAttributes) mut => VT.[Friend]hasAttributes(&this, pfHasAttributes);

	public HRESULT put_onabort(VARIANT v) mut => VT.[Friend]put_onabort(&this, v);

	public HRESULT get_onabort(VARIANT* p) mut => VT.[Friend]get_onabort(&this, p);

	public HRESULT put_onblur(VARIANT v) mut => VT.[Friend]put_onblur(&this, v);

	public HRESULT get_onblur(VARIANT* p) mut => VT.[Friend]get_onblur(&this, p);

	public HRESULT put_oncanplay(VARIANT v) mut => VT.[Friend]put_oncanplay(&this, v);

	public HRESULT get_oncanplay(VARIANT* p) mut => VT.[Friend]get_oncanplay(&this, p);

	public HRESULT put_oncanplaythrough(VARIANT v) mut => VT.[Friend]put_oncanplaythrough(&this, v);

	public HRESULT get_oncanplaythrough(VARIANT* p) mut => VT.[Friend]get_oncanplaythrough(&this, p);

	public HRESULT put_onchange(VARIANT v) mut => VT.[Friend]put_onchange(&this, v);

	public HRESULT get_onchange(VARIANT* p) mut => VT.[Friend]get_onchange(&this, p);

	public HRESULT put_ondrag(VARIANT v) mut => VT.[Friend]put_ondrag(&this, v);

	public HRESULT get_ondrag(VARIANT* p) mut => VT.[Friend]get_ondrag(&this, p);

	public HRESULT put_ondragend(VARIANT v) mut => VT.[Friend]put_ondragend(&this, v);

	public HRESULT get_ondragend(VARIANT* p) mut => VT.[Friend]get_ondragend(&this, p);

	public HRESULT put_ondragenter(VARIANT v) mut => VT.[Friend]put_ondragenter(&this, v);

	public HRESULT get_ondragenter(VARIANT* p) mut => VT.[Friend]get_ondragenter(&this, p);

	public HRESULT put_ondragleave(VARIANT v) mut => VT.[Friend]put_ondragleave(&this, v);

	public HRESULT get_ondragleave(VARIANT* p) mut => VT.[Friend]get_ondragleave(&this, p);

	public HRESULT put_ondragover(VARIANT v) mut => VT.[Friend]put_ondragover(&this, v);

	public HRESULT get_ondragover(VARIANT* p) mut => VT.[Friend]get_ondragover(&this, p);

	public HRESULT put_ondrop(VARIANT v) mut => VT.[Friend]put_ondrop(&this, v);

	public HRESULT get_ondrop(VARIANT* p) mut => VT.[Friend]get_ondrop(&this, p);

	public HRESULT put_ondurationchange(VARIANT v) mut => VT.[Friend]put_ondurationchange(&this, v);

	public HRESULT get_ondurationchange(VARIANT* p) mut => VT.[Friend]get_ondurationchange(&this, p);

	public HRESULT put_onemptied(VARIANT v) mut => VT.[Friend]put_onemptied(&this, v);

	public HRESULT get_onemptied(VARIANT* p) mut => VT.[Friend]get_onemptied(&this, p);

	public HRESULT put_onended(VARIANT v) mut => VT.[Friend]put_onended(&this, v);

	public HRESULT get_onended(VARIANT* p) mut => VT.[Friend]get_onended(&this, p);

	public HRESULT put_onerror(VARIANT v) mut => VT.[Friend]put_onerror(&this, v);

	public HRESULT get_onerror(VARIANT* p) mut => VT.[Friend]get_onerror(&this, p);

	public HRESULT put_onfocus(VARIANT v) mut => VT.[Friend]put_onfocus(&this, v);

	public HRESULT get_onfocus(VARIANT* p) mut => VT.[Friend]get_onfocus(&this, p);

	public HRESULT put_oninput(VARIANT v) mut => VT.[Friend]put_oninput(&this, v);

	public HRESULT get_oninput(VARIANT* p) mut => VT.[Friend]get_oninput(&this, p);

	public HRESULT put_onload(VARIANT v) mut => VT.[Friend]put_onload(&this, v);

	public HRESULT get_onload(VARIANT* p) mut => VT.[Friend]get_onload(&this, p);

	public HRESULT put_onloadeddata(VARIANT v) mut => VT.[Friend]put_onloadeddata(&this, v);

	public HRESULT get_onloadeddata(VARIANT* p) mut => VT.[Friend]get_onloadeddata(&this, p);

	public HRESULT put_onloadedmetadata(VARIANT v) mut => VT.[Friend]put_onloadedmetadata(&this, v);

	public HRESULT get_onloadedmetadata(VARIANT* p) mut => VT.[Friend]get_onloadedmetadata(&this, p);

	public HRESULT put_onloadstart(VARIANT v) mut => VT.[Friend]put_onloadstart(&this, v);

	public HRESULT get_onloadstart(VARIANT* p) mut => VT.[Friend]get_onloadstart(&this, p);

	public HRESULT put_onpause(VARIANT v) mut => VT.[Friend]put_onpause(&this, v);

	public HRESULT get_onpause(VARIANT* p) mut => VT.[Friend]get_onpause(&this, p);

	public HRESULT put_onplay(VARIANT v) mut => VT.[Friend]put_onplay(&this, v);

	public HRESULT get_onplay(VARIANT* p) mut => VT.[Friend]get_onplay(&this, p);

	public HRESULT put_onplaying(VARIANT v) mut => VT.[Friend]put_onplaying(&this, v);

	public HRESULT get_onplaying(VARIANT* p) mut => VT.[Friend]get_onplaying(&this, p);

	public HRESULT put_onprogress(VARIANT v) mut => VT.[Friend]put_onprogress(&this, v);

	public HRESULT get_onprogress(VARIANT* p) mut => VT.[Friend]get_onprogress(&this, p);

	public HRESULT put_onratechange(VARIANT v) mut => VT.[Friend]put_onratechange(&this, v);

	public HRESULT get_onratechange(VARIANT* p) mut => VT.[Friend]get_onratechange(&this, p);

	public HRESULT put_onreset(VARIANT v) mut => VT.[Friend]put_onreset(&this, v);

	public HRESULT get_onreset(VARIANT* p) mut => VT.[Friend]get_onreset(&this, p);

	public HRESULT put_onscroll(VARIANT v) mut => VT.[Friend]put_onscroll(&this, v);

	public HRESULT get_onscroll(VARIANT* p) mut => VT.[Friend]get_onscroll(&this, p);

	public HRESULT put_onseeked(VARIANT v) mut => VT.[Friend]put_onseeked(&this, v);

	public HRESULT get_onseeked(VARIANT* p) mut => VT.[Friend]get_onseeked(&this, p);

	public HRESULT put_onseeking(VARIANT v) mut => VT.[Friend]put_onseeking(&this, v);

	public HRESULT get_onseeking(VARIANT* p) mut => VT.[Friend]get_onseeking(&this, p);

	public HRESULT put_onselect(VARIANT v) mut => VT.[Friend]put_onselect(&this, v);

	public HRESULT get_onselect(VARIANT* p) mut => VT.[Friend]get_onselect(&this, p);

	public HRESULT put_onstalled(VARIANT v) mut => VT.[Friend]put_onstalled(&this, v);

	public HRESULT get_onstalled(VARIANT* p) mut => VT.[Friend]get_onstalled(&this, p);

	public HRESULT put_onsubmit(VARIANT v) mut => VT.[Friend]put_onsubmit(&this, v);

	public HRESULT get_onsubmit(VARIANT* p) mut => VT.[Friend]get_onsubmit(&this, p);

	public HRESULT put_onsuspend(VARIANT v) mut => VT.[Friend]put_onsuspend(&this, v);

	public HRESULT get_onsuspend(VARIANT* p) mut => VT.[Friend]get_onsuspend(&this, p);

	public HRESULT put_ontimeupdate(VARIANT v) mut => VT.[Friend]put_ontimeupdate(&this, v);

	public HRESULT get_ontimeupdate(VARIANT* p) mut => VT.[Friend]get_ontimeupdate(&this, p);

	public HRESULT put_onvolumechange(VARIANT v) mut => VT.[Friend]put_onvolumechange(&this, v);

	public HRESULT get_onvolumechange(VARIANT* p) mut => VT.[Friend]get_onvolumechange(&this, p);

	public HRESULT put_onwaiting(VARIANT v) mut => VT.[Friend]put_onwaiting(&this, v);

	public HRESULT get_onwaiting(VARIANT* p) mut => VT.[Friend]get_onwaiting(&this, p);

	public HRESULT normalize() mut => VT.[Friend]normalize(&this);

	public HRESULT importNode(IHTMLDOMNode* pNodeSource, int16 fDeep, IHTMLDOMNode3** ppNodeDest) mut => VT.[Friend]importNode(&this, pNodeSource, fDeep, ppNodeDest);

	public HRESULT get_parentWindow(IHTMLWindow2** p) mut => VT.[Friend]get_parentWindow(&this, p);

	public HRESULT putref_body(IHTMLElement* v) mut => VT.[Friend]putref_body(&this, v);

	public HRESULT get_body(IHTMLElement** p) mut => VT.[Friend]get_body(&this, p);

	public HRESULT get_head(IHTMLElement** p) mut => VT.[Friend]get_head(&this, p);
}

[CRepr]struct IHTMLDOMNode : IDispatch
{
	public new const Guid IID = .(0x3050f5da, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* p) get_nodeType;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IHTMLDOMNode** p) get_parentNode;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16* fChildren) hasChildNodes;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IDispatch** p) get_childNodes;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IDispatch** p) get_attributes;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IHTMLDOMNode* newChild, VARIANT refChild, IHTMLDOMNode** node) insertBefore;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IHTMLDOMNode* oldChild, IHTMLDOMNode** node) removeChild;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IHTMLDOMNode* newChild, IHTMLDOMNode* oldChild, IHTMLDOMNode** node) replaceChild;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16 fDeep, IHTMLDOMNode** clonedNode) cloneNode;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16 fDeep, IHTMLDOMNode** removed) removeNode;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IHTMLDOMNode* otherNode, IHTMLDOMNode** swappedNode) swapNode;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IHTMLDOMNode* replacement, IHTMLDOMNode** replaced) replaceNode;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IHTMLDOMNode* newChild, IHTMLDOMNode** node) appendChild;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_nodeName;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_nodeValue;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_nodeValue;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IHTMLDOMNode** p) get_firstChild;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IHTMLDOMNode** p) get_lastChild;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IHTMLDOMNode** p) get_previousSibling;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IHTMLDOMNode** p) get_nextSibling;
	}


	public HRESULT get_nodeType(int32* p) mut => VT.[Friend]get_nodeType(&this, p);

	public HRESULT get_parentNode(IHTMLDOMNode** p) mut => VT.[Friend]get_parentNode(&this, p);

	public HRESULT hasChildNodes(int16* fChildren) mut => VT.[Friend]hasChildNodes(&this, fChildren);

	public HRESULT get_childNodes(IDispatch** p) mut => VT.[Friend]get_childNodes(&this, p);

	public HRESULT get_attributes(IDispatch** p) mut => VT.[Friend]get_attributes(&this, p);

	public HRESULT insertBefore(IHTMLDOMNode* newChild, VARIANT refChild, IHTMLDOMNode** node) mut => VT.[Friend]insertBefore(&this, newChild, refChild, node);

	public HRESULT removeChild(IHTMLDOMNode* oldChild, IHTMLDOMNode** node) mut => VT.[Friend]removeChild(&this, oldChild, node);

	public HRESULT replaceChild(IHTMLDOMNode* newChild, IHTMLDOMNode* oldChild, IHTMLDOMNode** node) mut => VT.[Friend]replaceChild(&this, newChild, oldChild, node);

	public HRESULT cloneNode(int16 fDeep, IHTMLDOMNode** clonedNode) mut => VT.[Friend]cloneNode(&this, fDeep, clonedNode);

	public HRESULT removeNode(int16 fDeep, IHTMLDOMNode** removed) mut => VT.[Friend]removeNode(&this, fDeep, removed);

	public HRESULT swapNode(IHTMLDOMNode* otherNode, IHTMLDOMNode** swappedNode) mut => VT.[Friend]swapNode(&this, otherNode, swappedNode);

	public HRESULT replaceNode(IHTMLDOMNode* replacement, IHTMLDOMNode** replaced) mut => VT.[Friend]replaceNode(&this, replacement, replaced);

	public HRESULT appendChild(IHTMLDOMNode* newChild, IHTMLDOMNode** node) mut => VT.[Friend]appendChild(&this, newChild, node);

	public HRESULT get_nodeName(BSTR* p) mut => VT.[Friend]get_nodeName(&this, p);

	public HRESULT put_nodeValue(VARIANT v) mut => VT.[Friend]put_nodeValue(&this, v);

	public HRESULT get_nodeValue(VARIANT* p) mut => VT.[Friend]get_nodeValue(&this, p);

	public HRESULT get_firstChild(IHTMLDOMNode** p) mut => VT.[Friend]get_firstChild(&this, p);

	public HRESULT get_lastChild(IHTMLDOMNode** p) mut => VT.[Friend]get_lastChild(&this, p);

	public HRESULT get_previousSibling(IHTMLDOMNode** p) mut => VT.[Friend]get_previousSibling(&this, p);

	public HRESULT get_nextSibling(IHTMLDOMNode** p) mut => VT.[Friend]get_nextSibling(&this, p);
}

[CRepr]struct IHTMLDOMNode2 : IDispatch
{
	public new const Guid IID = .(0x3050f80b, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IDispatch** p) get_ownerDocument;
	}


	public HRESULT get_ownerDocument(IDispatch** p) mut => VT.[Friend]get_ownerDocument(&this, p);
}

[CRepr]struct IHTMLDOMNode3 : IDispatch
{
	public new const Guid IID = .(0x305106e0, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_prefix;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_prefix;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_localName;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_namespaceURI;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_textContent;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_textContent;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IHTMLDOMNode3* otherNode, int16* isEqual) isEqualNode;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* pvarPrefix, VARIANT* pvarNamespaceURI) lookupNamespaceURI;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* pvarNamespaceURI, VARIANT* pvarPrefix) lookupPrefix;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* pvarNamespace, int16* pfDefaultNamespace) isDefaultNamespace;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IHTMLDOMNode* newChild, IHTMLDOMNode** node) appendChild;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IHTMLDOMNode* newChild, VARIANT refChild, IHTMLDOMNode** node) insertBefore;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IHTMLDOMNode* oldChild, IHTMLDOMNode** node) removeChild;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IHTMLDOMNode* newChild, IHTMLDOMNode* oldChild, IHTMLDOMNode** node) replaceChild;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IHTMLDOMNode3* otherNode, int16* isSame) isSameNode;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IHTMLDOMNode* otherNode, uint16* flags) compareDocumentPosition;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR feature, VARIANT version, int16* pfisSupported) isSupported;
	}


	public HRESULT put_prefix(VARIANT v) mut => VT.[Friend]put_prefix(&this, v);

	public HRESULT get_prefix(VARIANT* p) mut => VT.[Friend]get_prefix(&this, p);

	public HRESULT get_localName(VARIANT* p) mut => VT.[Friend]get_localName(&this, p);

	public HRESULT get_namespaceURI(VARIANT* p) mut => VT.[Friend]get_namespaceURI(&this, p);

	public HRESULT put_textContent(VARIANT v) mut => VT.[Friend]put_textContent(&this, v);

	public HRESULT get_textContent(VARIANT* p) mut => VT.[Friend]get_textContent(&this, p);

	public HRESULT isEqualNode(IHTMLDOMNode3* otherNode, int16* isEqual) mut => VT.[Friend]isEqualNode(&this, otherNode, isEqual);

	public HRESULT lookupNamespaceURI(VARIANT* pvarPrefix, VARIANT* pvarNamespaceURI) mut => VT.[Friend]lookupNamespaceURI(&this, pvarPrefix, pvarNamespaceURI);

	public HRESULT lookupPrefix(VARIANT* pvarNamespaceURI, VARIANT* pvarPrefix) mut => VT.[Friend]lookupPrefix(&this, pvarNamespaceURI, pvarPrefix);

	public HRESULT isDefaultNamespace(VARIANT* pvarNamespace, int16* pfDefaultNamespace) mut => VT.[Friend]isDefaultNamespace(&this, pvarNamespace, pfDefaultNamespace);

	public HRESULT appendChild(IHTMLDOMNode* newChild, IHTMLDOMNode** node) mut => VT.[Friend]appendChild(&this, newChild, node);

	public HRESULT insertBefore(IHTMLDOMNode* newChild, VARIANT refChild, IHTMLDOMNode** node) mut => VT.[Friend]insertBefore(&this, newChild, refChild, node);

	public HRESULT removeChild(IHTMLDOMNode* oldChild, IHTMLDOMNode** node) mut => VT.[Friend]removeChild(&this, oldChild, node);

	public HRESULT replaceChild(IHTMLDOMNode* newChild, IHTMLDOMNode* oldChild, IHTMLDOMNode** node) mut => VT.[Friend]replaceChild(&this, newChild, oldChild, node);

	public HRESULT isSameNode(IHTMLDOMNode3* otherNode, int16* isSame) mut => VT.[Friend]isSameNode(&this, otherNode, isSame);

	public HRESULT compareDocumentPosition(IHTMLDOMNode* otherNode, uint16* flags) mut => VT.[Friend]compareDocumentPosition(&this, otherNode, flags);

	public HRESULT isSupported(BSTR feature, VARIANT version, int16* pfisSupported) mut => VT.[Friend]isSupported(&this, feature, version, pfisSupported);
}

[CRepr]struct IHTMLDOMAttribute : IDispatch
{
	public new const Guid IID = .(0x3050f4b0, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_nodeName;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_nodeValue;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_nodeValue;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16* p) get_specified;
	}


	public HRESULT get_nodeName(BSTR* p) mut => VT.[Friend]get_nodeName(&this, p);

	public HRESULT put_nodeValue(VARIANT v) mut => VT.[Friend]put_nodeValue(&this, v);

	public HRESULT get_nodeValue(VARIANT* p) mut => VT.[Friend]get_nodeValue(&this, p);

	public HRESULT get_specified(int16* p) mut => VT.[Friend]get_specified(&this, p);
}

[CRepr]struct IHTMLDOMAttribute2 : IDispatch
{
	public new const Guid IID = .(0x3050f810, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_name;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_value;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_value;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16* p) get_expando;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* p) get_nodeType;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IHTMLDOMNode** p) get_parentNode;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IDispatch** p) get_childNodes;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IHTMLDOMNode** p) get_firstChild;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IHTMLDOMNode** p) get_lastChild;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IHTMLDOMNode** p) get_previousSibling;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IHTMLDOMNode** p) get_nextSibling;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IDispatch** p) get_attributes;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IDispatch** p) get_ownerDocument;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IHTMLDOMNode* newChild, VARIANT refChild, IHTMLDOMNode** node) insertBefore;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IHTMLDOMNode* newChild, IHTMLDOMNode* oldChild, IHTMLDOMNode** node) replaceChild;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IHTMLDOMNode* oldChild, IHTMLDOMNode** node) removeChild;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IHTMLDOMNode* newChild, IHTMLDOMNode** node) appendChild;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16* fChildren) hasChildNodes;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16 fDeep, IHTMLDOMAttribute** clonedNode) cloneNode;
	}


	public HRESULT get_name(BSTR* p) mut => VT.[Friend]get_name(&this, p);

	public HRESULT put_value(BSTR v) mut => VT.[Friend]put_value(&this, v);

	public HRESULT get_value(BSTR* p) mut => VT.[Friend]get_value(&this, p);

	public HRESULT get_expando(int16* p) mut => VT.[Friend]get_expando(&this, p);

	public HRESULT get_nodeType(int32* p) mut => VT.[Friend]get_nodeType(&this, p);

	public HRESULT get_parentNode(IHTMLDOMNode** p) mut => VT.[Friend]get_parentNode(&this, p);

	public HRESULT get_childNodes(IDispatch** p) mut => VT.[Friend]get_childNodes(&this, p);

	public HRESULT get_firstChild(IHTMLDOMNode** p) mut => VT.[Friend]get_firstChild(&this, p);

	public HRESULT get_lastChild(IHTMLDOMNode** p) mut => VT.[Friend]get_lastChild(&this, p);

	public HRESULT get_previousSibling(IHTMLDOMNode** p) mut => VT.[Friend]get_previousSibling(&this, p);

	public HRESULT get_nextSibling(IHTMLDOMNode** p) mut => VT.[Friend]get_nextSibling(&this, p);

	public HRESULT get_attributes(IDispatch** p) mut => VT.[Friend]get_attributes(&this, p);

	public HRESULT get_ownerDocument(IDispatch** p) mut => VT.[Friend]get_ownerDocument(&this, p);

	public HRESULT insertBefore(IHTMLDOMNode* newChild, VARIANT refChild, IHTMLDOMNode** node) mut => VT.[Friend]insertBefore(&this, newChild, refChild, node);

	public HRESULT replaceChild(IHTMLDOMNode* newChild, IHTMLDOMNode* oldChild, IHTMLDOMNode** node) mut => VT.[Friend]replaceChild(&this, newChild, oldChild, node);

	public HRESULT removeChild(IHTMLDOMNode* oldChild, IHTMLDOMNode** node) mut => VT.[Friend]removeChild(&this, oldChild, node);

	public HRESULT appendChild(IHTMLDOMNode* newChild, IHTMLDOMNode** node) mut => VT.[Friend]appendChild(&this, newChild, node);

	public HRESULT hasChildNodes(int16* fChildren) mut => VT.[Friend]hasChildNodes(&this, fChildren);

	public HRESULT cloneNode(int16 fDeep, IHTMLDOMAttribute** clonedNode) mut => VT.[Friend]cloneNode(&this, fDeep, clonedNode);
}

[CRepr]struct IHTMLDOMAttribute3 : IDispatch
{
	public new const Guid IID = .(0x30510468, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_nodeValue;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_nodeValue;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_value;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_value;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16* p) get_specified;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IHTMLElement2** p) get_ownerElement;
	}


	public HRESULT put_nodeValue(VARIANT v) mut => VT.[Friend]put_nodeValue(&this, v);

	public HRESULT get_nodeValue(VARIANT* p) mut => VT.[Friend]get_nodeValue(&this, p);

	public HRESULT put_value(BSTR v) mut => VT.[Friend]put_value(&this, v);

	public HRESULT get_value(BSTR* p) mut => VT.[Friend]get_value(&this, p);

	public HRESULT get_specified(int16* p) mut => VT.[Friend]get_specified(&this, p);

	public HRESULT get_ownerElement(IHTMLElement2** p) mut => VT.[Friend]get_ownerElement(&this, p);
}

[CRepr]struct IHTMLDOMAttribute4 : IDispatch
{
	public new const Guid IID = .(0x305106f9, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_nodeValue;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_nodeValue;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_nodeName;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_name;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_value;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_value;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IHTMLDOMNode** p) get_firstChild;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IHTMLDOMNode** p) get_lastChild;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IDispatch** p) get_childNodes;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16* pfHasAttributes) hasAttributes;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16* fChildren) hasChildNodes;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self) normalize;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16* p) get_specified;
	}


	public HRESULT put_nodeValue(VARIANT v) mut => VT.[Friend]put_nodeValue(&this, v);

	public HRESULT get_nodeValue(VARIANT* p) mut => VT.[Friend]get_nodeValue(&this, p);

	public HRESULT get_nodeName(BSTR* p) mut => VT.[Friend]get_nodeName(&this, p);

	public HRESULT get_name(BSTR* p) mut => VT.[Friend]get_name(&this, p);

	public HRESULT put_value(BSTR v) mut => VT.[Friend]put_value(&this, v);

	public HRESULT get_value(BSTR* p) mut => VT.[Friend]get_value(&this, p);

	public HRESULT get_firstChild(IHTMLDOMNode** p) mut => VT.[Friend]get_firstChild(&this, p);

	public HRESULT get_lastChild(IHTMLDOMNode** p) mut => VT.[Friend]get_lastChild(&this, p);

	public HRESULT get_childNodes(IDispatch** p) mut => VT.[Friend]get_childNodes(&this, p);

	public HRESULT hasAttributes(int16* pfHasAttributes) mut => VT.[Friend]hasAttributes(&this, pfHasAttributes);

	public HRESULT hasChildNodes(int16* fChildren) mut => VT.[Friend]hasChildNodes(&this, fChildren);

	public HRESULT normalize() mut => VT.[Friend]normalize(&this);

	public HRESULT get_specified(int16* p) mut => VT.[Friend]get_specified(&this, p);
}

[CRepr]struct IHTMLDOMTextNode : IDispatch
{
	public new const Guid IID = .(0x3050f4b1, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_data;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_data;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* String) toString;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* p) get_length;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 offset, IHTMLDOMNode** pRetNode) splitText;
	}


	public HRESULT put_data(BSTR v) mut => VT.[Friend]put_data(&this, v);

	public HRESULT get_data(BSTR* p) mut => VT.[Friend]get_data(&this, p);

	public HRESULT toString(BSTR* String) mut => VT.[Friend]toString(&this, String);

	public HRESULT get_length(int32* p) mut => VT.[Friend]get_length(&this, p);

	public HRESULT splitText(int32 offset, IHTMLDOMNode** pRetNode) mut => VT.[Friend]splitText(&this, offset, pRetNode);
}

[CRepr]struct IHTMLDOMTextNode2 : IDispatch
{
	public new const Guid IID = .(0x3050f809, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 offset, int32 Count, BSTR* pbstrsubString) substringData;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR bstrstring) appendData;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 offset, BSTR bstrstring) insertData;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 offset, int32 Count) deleteData;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 offset, int32 Count, BSTR bstrstring) replaceData;
	}


	public HRESULT substringData(int32 offset, int32 Count, BSTR* pbstrsubString) mut => VT.[Friend]substringData(&this, offset, Count, pbstrsubString);

	public HRESULT appendData(BSTR bstrstring) mut => VT.[Friend]appendData(&this, bstrstring);

	public HRESULT insertData(int32 offset, BSTR bstrstring) mut => VT.[Friend]insertData(&this, offset, bstrstring);

	public HRESULT deleteData(int32 offset, int32 Count) mut => VT.[Friend]deleteData(&this, offset, Count);

	public HRESULT replaceData(int32 offset, int32 Count, BSTR bstrstring) mut => VT.[Friend]replaceData(&this, offset, Count, bstrstring);
}

[CRepr]struct IHTMLDOMTextNode3 : IDispatch
{
	public new const Guid IID = .(0x3051073e, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 offset, int32 Count, BSTR* pbstrsubString) substringData;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 offset, BSTR bstrstring) insertData;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 offset, int32 Count) deleteData;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 offset, int32 Count, BSTR bstrstring) replaceData;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 offset, IHTMLDOMNode** pRetNode) splitText;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_wholeText;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR bstrText, IHTMLDOMNode** ppRetNode) replaceWholeText;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16* pfHasAttributes) hasAttributes;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self) normalize;
	}


	public HRESULT substringData(int32 offset, int32 Count, BSTR* pbstrsubString) mut => VT.[Friend]substringData(&this, offset, Count, pbstrsubString);

	public HRESULT insertData(int32 offset, BSTR bstrstring) mut => VT.[Friend]insertData(&this, offset, bstrstring);

	public HRESULT deleteData(int32 offset, int32 Count) mut => VT.[Friend]deleteData(&this, offset, Count);

	public HRESULT replaceData(int32 offset, int32 Count, BSTR bstrstring) mut => VT.[Friend]replaceData(&this, offset, Count, bstrstring);

	public HRESULT splitText(int32 offset, IHTMLDOMNode** pRetNode) mut => VT.[Friend]splitText(&this, offset, pRetNode);

	public HRESULT get_wholeText(BSTR* p) mut => VT.[Friend]get_wholeText(&this, p);

	public HRESULT replaceWholeText(BSTR bstrText, IHTMLDOMNode** ppRetNode) mut => VT.[Friend]replaceWholeText(&this, bstrText, ppRetNode);

	public HRESULT hasAttributes(int16* pfHasAttributes) mut => VT.[Friend]hasAttributes(&this, pfHasAttributes);

	public HRESULT normalize() mut => VT.[Friend]normalize(&this);
}

[CRepr]struct IHTMLDOMImplementation : IDispatch
{
	public new const Guid IID = .(0x3050f80d, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR bstrfeature, VARIANT version, int16* pfHasFeature) hasFeature;
	}


	public HRESULT hasFeature(BSTR bstrfeature, VARIANT version, int16* pfHasFeature) mut => VT.[Friend]hasFeature(&this, bstrfeature, version, pfHasFeature);
}

[CRepr]struct IHTMLDOMImplementation2 : IDispatch
{
	public new const Guid IID = .(0x3051073c, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR bstrQualifiedName, VARIANT* pvarPublicId, VARIANT* pvarSystemId, IDOMDocumentType** newDocumentType) createDocumentType;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* pvarNS, VARIANT* pvarTagName, IDOMDocumentType* pDocumentType, IHTMLDocument7** ppnewDocument) createDocument;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR bstrTitle, IHTMLDocument7** ppnewDocument) createHTMLDocument;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR bstrfeature, VARIANT version, int16* pfHasFeature) hasFeature;
	}


	public HRESULT createDocumentType(BSTR bstrQualifiedName, VARIANT* pvarPublicId, VARIANT* pvarSystemId, IDOMDocumentType** newDocumentType) mut => VT.[Friend]createDocumentType(&this, bstrQualifiedName, pvarPublicId, pvarSystemId, newDocumentType);

	public HRESULT createDocument(VARIANT* pvarNS, VARIANT* pvarTagName, IDOMDocumentType* pDocumentType, IHTMLDocument7** ppnewDocument) mut => VT.[Friend]createDocument(&this, pvarNS, pvarTagName, pDocumentType, ppnewDocument);

	public HRESULT createHTMLDocument(BSTR bstrTitle, IHTMLDocument7** ppnewDocument) mut => VT.[Friend]createHTMLDocument(&this, bstrTitle, ppnewDocument);

	public HRESULT hasFeature(BSTR bstrfeature, VARIANT version, int16* pfHasFeature) mut => VT.[Friend]hasFeature(&this, bstrfeature, version, pfHasFeature);
}

[CRepr]struct DispHTMLDOMAttribute : IDispatch
{
	public new const Guid IID = .(0x3050f564, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
	}

}

[CRepr]struct DispHTMLDOMTextNode : IDispatch
{
	public new const Guid IID = .(0x3050f565, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
	}

}

[CRepr]struct DispHTMLDOMImplementation : IDispatch
{
	public new const Guid IID = .(0x3050f58f, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
	}

}

[CRepr]struct IHTMLAttributeCollection : IDispatch
{
	public new const Guid IID = .(0x3050f4c3, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* p) get_length;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IUnknown** p) get__newEnum;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* name, IDispatch** pdisp) item;
	}


	public HRESULT get_length(int32* p) mut => VT.[Friend]get_length(&this, p);

	public HRESULT get__newEnum(IUnknown** p) mut => VT.[Friend]get__newEnum(&this, p);

	public HRESULT item(VARIANT* name, IDispatch** pdisp) mut => VT.[Friend]item(&this, name, pdisp);
}

[CRepr]struct IHTMLAttributeCollection2 : IDispatch
{
	public new const Guid IID = .(0x3050f80a, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR bstrName, IHTMLDOMAttribute** newretNode) getNamedItem;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IHTMLDOMAttribute* ppNode, IHTMLDOMAttribute** newretNode) setNamedItem;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR bstrName, IHTMLDOMAttribute** newretNode) removeNamedItem;
	}


	public HRESULT getNamedItem(BSTR bstrName, IHTMLDOMAttribute** newretNode) mut => VT.[Friend]getNamedItem(&this, bstrName, newretNode);

	public HRESULT setNamedItem(IHTMLDOMAttribute* ppNode, IHTMLDOMAttribute** newretNode) mut => VT.[Friend]setNamedItem(&this, ppNode, newretNode);

	public HRESULT removeNamedItem(BSTR bstrName, IHTMLDOMAttribute** newretNode) mut => VT.[Friend]removeNamedItem(&this, bstrName, newretNode);
}

[CRepr]struct IHTMLAttributeCollection4 : IDispatch
{
	public new const Guid IID = .(0x305106fa, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* pvarNS, BSTR bstrName, IHTMLDOMAttribute2** ppNodeOut) getNamedItemNS;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IHTMLDOMAttribute2* pNodeIn, IHTMLDOMAttribute2** ppNodeOut) setNamedItemNS;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* pvarNS, BSTR bstrName, IHTMLDOMAttribute2** ppNodeOut) removeNamedItemNS;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR bstrName, IHTMLDOMAttribute2** ppNodeOut) getNamedItem;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IHTMLDOMAttribute2* pNodeIn, IHTMLDOMAttribute2** ppNodeOut) setNamedItem;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR bstrName, IHTMLDOMAttribute2** ppNodeOut) removeNamedItem;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 index, IHTMLDOMAttribute2** ppNodeOut) item;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* p) get_length;
	}


	public HRESULT getNamedItemNS(VARIANT* pvarNS, BSTR bstrName, IHTMLDOMAttribute2** ppNodeOut) mut => VT.[Friend]getNamedItemNS(&this, pvarNS, bstrName, ppNodeOut);

	public HRESULT setNamedItemNS(IHTMLDOMAttribute2* pNodeIn, IHTMLDOMAttribute2** ppNodeOut) mut => VT.[Friend]setNamedItemNS(&this, pNodeIn, ppNodeOut);

	public HRESULT removeNamedItemNS(VARIANT* pvarNS, BSTR bstrName, IHTMLDOMAttribute2** ppNodeOut) mut => VT.[Friend]removeNamedItemNS(&this, pvarNS, bstrName, ppNodeOut);

	public HRESULT getNamedItem(BSTR bstrName, IHTMLDOMAttribute2** ppNodeOut) mut => VT.[Friend]getNamedItem(&this, bstrName, ppNodeOut);

	public HRESULT setNamedItem(IHTMLDOMAttribute2* pNodeIn, IHTMLDOMAttribute2** ppNodeOut) mut => VT.[Friend]setNamedItem(&this, pNodeIn, ppNodeOut);

	public HRESULT removeNamedItem(BSTR bstrName, IHTMLDOMAttribute2** ppNodeOut) mut => VT.[Friend]removeNamedItem(&this, bstrName, ppNodeOut);

	public HRESULT item(int32 index, IHTMLDOMAttribute2** ppNodeOut) mut => VT.[Friend]item(&this, index, ppNodeOut);

	public HRESULT get_length(int32* p) mut => VT.[Friend]get_length(&this, p);
}

[CRepr]struct IHTMLDOMChildrenCollection : IDispatch
{
	public new const Guid IID = .(0x3050f5ab, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* p) get_length;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IUnknown** p) get__newEnum;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 index, IDispatch** ppItem) item;
	}


	public HRESULT get_length(int32* p) mut => VT.[Friend]get_length(&this, p);

	public HRESULT get__newEnum(IUnknown** p) mut => VT.[Friend]get__newEnum(&this, p);

	public HRESULT item(int32 index, IDispatch** ppItem) mut => VT.[Friend]item(&this, index, ppItem);
}

[CRepr]struct IHTMLDOMChildrenCollection2 : IDispatch
{
	public new const Guid IID = .(0x30510791, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 index, IDispatch** ppItem) item;
	}


	public HRESULT item(int32 index, IDispatch** ppItem) mut => VT.[Friend]item(&this, index, ppItem);
}

[CRepr]struct DispHTMLAttributeCollection : IDispatch
{
	public new const Guid IID = .(0x3050f56c, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
	}

}

[CRepr]struct DispStaticNodeList : IDispatch
{
	public new const Guid IID = .(0x3050f59b, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
	}

}

[CRepr]struct DispDOMChildrenCollection : IDispatch
{
	public new const Guid IID = .(0x3050f577, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
	}

}

[CRepr]struct HTMLElementEvents4 : IDispatch
{
	public new const Guid IID = .(0x3051075e, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
	}

}

[CRepr]struct HTMLElementEvents3 : IDispatch
{
	public new const Guid IID = .(0x3050f59f, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
	}

}

[CRepr]struct HTMLElementEvents2 : IDispatch
{
	public new const Guid IID = .(0x3050f60f, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
	}

}

[CRepr]struct HTMLElementEvents : IDispatch
{
	public new const Guid IID = .(0x3050f33c, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
	}

}

[CRepr]struct IRulesAppliedCollection : IDispatch
{
	public new const Guid IID = .(0x305104be, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 index, IRulesApplied** ppRulesApplied) item;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* p) get_length;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IHTMLElement** p) get_element;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR name, IRulesApplied** ppRulesApplied) propertyInheritedFrom;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* p) get_propertyCount;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 index, BSTR* pbstrProperty) property;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR name, int32 index, IRulesApplied** ppRulesApplied) propertyInheritedTrace;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR name, int32* pLength) propertyInheritedTraceLength;
	}


	public HRESULT item(int32 index, IRulesApplied** ppRulesApplied) mut => VT.[Friend]item(&this, index, ppRulesApplied);

	public HRESULT get_length(int32* p) mut => VT.[Friend]get_length(&this, p);

	public HRESULT get_element(IHTMLElement** p) mut => VT.[Friend]get_element(&this, p);

	public HRESULT propertyInheritedFrom(BSTR name, IRulesApplied** ppRulesApplied) mut => VT.[Friend]propertyInheritedFrom(&this, name, ppRulesApplied);

	public HRESULT get_propertyCount(int32* p) mut => VT.[Friend]get_propertyCount(&this, p);

	public HRESULT property(int32 index, BSTR* pbstrProperty) mut => VT.[Friend]property(&this, index, pbstrProperty);

	public HRESULT propertyInheritedTrace(BSTR name, int32 index, IRulesApplied** ppRulesApplied) mut => VT.[Friend]propertyInheritedTrace(&this, name, index, ppRulesApplied);

	public HRESULT propertyInheritedTraceLength(BSTR name, int32* pLength) mut => VT.[Friend]propertyInheritedTraceLength(&this, name, pLength);
}

[CRepr]struct IHTMLElement3 : IDispatch
{
	public new const Guid IID = .(0x3050f673, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IHTMLElement* mergeThis, VARIANT* pvarFlags) mergeAttributes;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16* p) get_isMultiLine;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16* p) get_canHaveHTML;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_onlayoutcomplete;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_onlayoutcomplete;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_onpage;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_onpage;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16 v) put_inflateBlock;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16* p) get_inflateBlock;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_onbeforedeactivate;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_onbeforedeactivate;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self) setActive;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_contentEditable;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_contentEditable;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16* p) get_isContentEditable;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16 v) put_hideFocus;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16* p) get_hideFocus;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16 v) put_disabled;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16* p) get_disabled;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16* p) get_isDisabled;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_onmove;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_onmove;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_oncontrolselect;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_oncontrolselect;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR bstrEventName, VARIANT* pvarEventObject, int16* pfCancelled) fireEvent;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_onresizestart;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_onresizestart;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_onresizeend;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_onresizeend;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_onmovestart;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_onmovestart;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_onmoveend;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_onmoveend;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_onmouseenter;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_onmouseenter;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_onmouseleave;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_onmouseleave;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_onactivate;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_onactivate;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_ondeactivate;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_ondeactivate;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16* pfRet) dragDrop;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* p) get_glyphMode;
	}


	public HRESULT mergeAttributes(IHTMLElement* mergeThis, VARIANT* pvarFlags) mut => VT.[Friend]mergeAttributes(&this, mergeThis, pvarFlags);

	public HRESULT get_isMultiLine(int16* p) mut => VT.[Friend]get_isMultiLine(&this, p);

	public HRESULT get_canHaveHTML(int16* p) mut => VT.[Friend]get_canHaveHTML(&this, p);

	public HRESULT put_onlayoutcomplete(VARIANT v) mut => VT.[Friend]put_onlayoutcomplete(&this, v);

	public HRESULT get_onlayoutcomplete(VARIANT* p) mut => VT.[Friend]get_onlayoutcomplete(&this, p);

	public HRESULT put_onpage(VARIANT v) mut => VT.[Friend]put_onpage(&this, v);

	public HRESULT get_onpage(VARIANT* p) mut => VT.[Friend]get_onpage(&this, p);

	public HRESULT put_inflateBlock(int16 v) mut => VT.[Friend]put_inflateBlock(&this, v);

	public HRESULT get_inflateBlock(int16* p) mut => VT.[Friend]get_inflateBlock(&this, p);

	public HRESULT put_onbeforedeactivate(VARIANT v) mut => VT.[Friend]put_onbeforedeactivate(&this, v);

	public HRESULT get_onbeforedeactivate(VARIANT* p) mut => VT.[Friend]get_onbeforedeactivate(&this, p);

	public HRESULT setActive() mut => VT.[Friend]setActive(&this);

	public HRESULT put_contentEditable(BSTR v) mut => VT.[Friend]put_contentEditable(&this, v);

	public HRESULT get_contentEditable(BSTR* p) mut => VT.[Friend]get_contentEditable(&this, p);

	public HRESULT get_isContentEditable(int16* p) mut => VT.[Friend]get_isContentEditable(&this, p);

	public HRESULT put_hideFocus(int16 v) mut => VT.[Friend]put_hideFocus(&this, v);

	public HRESULT get_hideFocus(int16* p) mut => VT.[Friend]get_hideFocus(&this, p);

	public HRESULT put_disabled(int16 v) mut => VT.[Friend]put_disabled(&this, v);

	public HRESULT get_disabled(int16* p) mut => VT.[Friend]get_disabled(&this, p);

	public HRESULT get_isDisabled(int16* p) mut => VT.[Friend]get_isDisabled(&this, p);

	public HRESULT put_onmove(VARIANT v) mut => VT.[Friend]put_onmove(&this, v);

	public HRESULT get_onmove(VARIANT* p) mut => VT.[Friend]get_onmove(&this, p);

	public HRESULT put_oncontrolselect(VARIANT v) mut => VT.[Friend]put_oncontrolselect(&this, v);

	public HRESULT get_oncontrolselect(VARIANT* p) mut => VT.[Friend]get_oncontrolselect(&this, p);

	public HRESULT fireEvent(BSTR bstrEventName, VARIANT* pvarEventObject, int16* pfCancelled) mut => VT.[Friend]fireEvent(&this, bstrEventName, pvarEventObject, pfCancelled);

	public HRESULT put_onresizestart(VARIANT v) mut => VT.[Friend]put_onresizestart(&this, v);

	public HRESULT get_onresizestart(VARIANT* p) mut => VT.[Friend]get_onresizestart(&this, p);

	public HRESULT put_onresizeend(VARIANT v) mut => VT.[Friend]put_onresizeend(&this, v);

	public HRESULT get_onresizeend(VARIANT* p) mut => VT.[Friend]get_onresizeend(&this, p);

	public HRESULT put_onmovestart(VARIANT v) mut => VT.[Friend]put_onmovestart(&this, v);

	public HRESULT get_onmovestart(VARIANT* p) mut => VT.[Friend]get_onmovestart(&this, p);

	public HRESULT put_onmoveend(VARIANT v) mut => VT.[Friend]put_onmoveend(&this, v);

	public HRESULT get_onmoveend(VARIANT* p) mut => VT.[Friend]get_onmoveend(&this, p);

	public HRESULT put_onmouseenter(VARIANT v) mut => VT.[Friend]put_onmouseenter(&this, v);

	public HRESULT get_onmouseenter(VARIANT* p) mut => VT.[Friend]get_onmouseenter(&this, p);

	public HRESULT put_onmouseleave(VARIANT v) mut => VT.[Friend]put_onmouseleave(&this, v);

	public HRESULT get_onmouseleave(VARIANT* p) mut => VT.[Friend]get_onmouseleave(&this, p);

	public HRESULT put_onactivate(VARIANT v) mut => VT.[Friend]put_onactivate(&this, v);

	public HRESULT get_onactivate(VARIANT* p) mut => VT.[Friend]get_onactivate(&this, p);

	public HRESULT put_ondeactivate(VARIANT v) mut => VT.[Friend]put_ondeactivate(&this, v);

	public HRESULT get_ondeactivate(VARIANT* p) mut => VT.[Friend]get_ondeactivate(&this, p);

	public HRESULT dragDrop(int16* pfRet) mut => VT.[Friend]dragDrop(&this, pfRet);

	public HRESULT get_glyphMode(int32* p) mut => VT.[Friend]get_glyphMode(&this, p);
}

[CRepr]struct IHTMLElement4 : IDispatch
{
	public new const Guid IID = .(0x3050f80f, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_onmousewheel;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_onmousewheel;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self) normalize;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR bstrname, IHTMLDOMAttribute** ppAttribute) getAttributeNode;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IHTMLDOMAttribute* pattr, IHTMLDOMAttribute** ppretAttribute) setAttributeNode;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IHTMLDOMAttribute* pattr, IHTMLDOMAttribute** ppretAttribute) removeAttributeNode;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_onbeforeactivate;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_onbeforeactivate;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_onfocusin;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_onfocusin;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_onfocusout;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_onfocusout;
	}


	public HRESULT put_onmousewheel(VARIANT v) mut => VT.[Friend]put_onmousewheel(&this, v);

	public HRESULT get_onmousewheel(VARIANT* p) mut => VT.[Friend]get_onmousewheel(&this, p);

	public HRESULT normalize() mut => VT.[Friend]normalize(&this);

	public HRESULT getAttributeNode(BSTR bstrname, IHTMLDOMAttribute** ppAttribute) mut => VT.[Friend]getAttributeNode(&this, bstrname, ppAttribute);

	public HRESULT setAttributeNode(IHTMLDOMAttribute* pattr, IHTMLDOMAttribute** ppretAttribute) mut => VT.[Friend]setAttributeNode(&this, pattr, ppretAttribute);

	public HRESULT removeAttributeNode(IHTMLDOMAttribute* pattr, IHTMLDOMAttribute** ppretAttribute) mut => VT.[Friend]removeAttributeNode(&this, pattr, ppretAttribute);

	public HRESULT put_onbeforeactivate(VARIANT v) mut => VT.[Friend]put_onbeforeactivate(&this, v);

	public HRESULT get_onbeforeactivate(VARIANT* p) mut => VT.[Friend]get_onbeforeactivate(&this, p);

	public HRESULT put_onfocusin(VARIANT v) mut => VT.[Friend]put_onfocusin(&this, v);

	public HRESULT get_onfocusin(VARIANT* p) mut => VT.[Friend]get_onfocusin(&this, p);

	public HRESULT put_onfocusout(VARIANT v) mut => VT.[Friend]put_onfocusout(&this, v);

	public HRESULT get_onfocusout(VARIANT* p) mut => VT.[Friend]get_onfocusout(&this, p);
}

[CRepr]struct IElementSelector : IDispatch
{
	public new const Guid IID = .(0x30510463, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v, IHTMLElement** pel) querySelector;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v, IHTMLDOMChildrenCollection** pel) querySelectorAll;
	}


	public HRESULT querySelector(BSTR v, IHTMLElement** pel) mut => VT.[Friend]querySelector(&this, v, pel);

	public HRESULT querySelectorAll(BSTR v, IHTMLDOMChildrenCollection** pel) mut => VT.[Friend]querySelectorAll(&this, v, pel);
}

[CRepr]struct IHTMLElementRender : IUnknown
{
	public new const Guid IID = .(0x3050f669, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IUnknown.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, HDC hDC) DrawToDC;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR bstrPrinterName, HDC hDC) SetDocumentPrinter;
	}


	public HRESULT DrawToDC(HDC hDC) mut => VT.[Friend]DrawToDC(&this, hDC);

	public HRESULT SetDocumentPrinter(BSTR bstrPrinterName, HDC hDC) mut => VT.[Friend]SetDocumentPrinter(&this, bstrPrinterName, hDC);
}

[CRepr]struct IHTMLUniqueName : IDispatch
{
	public new const Guid IID = .(0x3050f4d0, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* p) get_uniqueNumber;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_uniqueID;
	}


	public HRESULT get_uniqueNumber(int32* p) mut => VT.[Friend]get_uniqueNumber(&this, p);

	public HRESULT get_uniqueID(BSTR* p) mut => VT.[Friend]get_uniqueID(&this, p);
}

[CRepr]struct IHTMLElement5 : IDispatch
{
	public new const Guid IID = .(0x3051045d, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR bstrname, IHTMLDOMAttribute2** ppretAttribute) getAttributeNode;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IHTMLDOMAttribute2* pattr, IHTMLDOMAttribute2** ppretAttribute) setAttributeNode;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IHTMLDOMAttribute2* pattr, IHTMLDOMAttribute2** ppretAttribute) removeAttributeNode;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR name, int16* pfHasAttribute) hasAttribute;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_role;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_role;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_ariaBusy;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_ariaBusy;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_ariaChecked;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_ariaChecked;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_ariaDisabled;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_ariaDisabled;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_ariaExpanded;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_ariaExpanded;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_ariaHaspopup;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_ariaHaspopup;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_ariaHidden;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_ariaHidden;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_ariaInvalid;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_ariaInvalid;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_ariaMultiselectable;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_ariaMultiselectable;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_ariaPressed;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_ariaPressed;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_ariaReadonly;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_ariaReadonly;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_ariaRequired;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_ariaRequired;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_ariaSecret;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_ariaSecret;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_ariaSelected;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_ariaSelected;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR strAttributeName, VARIANT* AttributeValue) getAttribute;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR strAttributeName, VARIANT AttributeValue) setAttribute;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR strAttributeName, int16* pfSuccess) removeAttribute;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IHTMLAttributeCollection3** p) get_attributes;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_ariaValuenow;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_ariaValuenow;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16 v) put_ariaPosinset;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16* p) get_ariaPosinset;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16 v) put_ariaSetsize;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16* p) get_ariaSetsize;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16 v) put_ariaLevel;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16* p) get_ariaLevel;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_ariaValuemin;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_ariaValuemin;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_ariaValuemax;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_ariaValuemax;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_ariaControls;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_ariaControls;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_ariaDescribedby;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_ariaDescribedby;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_ariaFlowto;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_ariaFlowto;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_ariaLabelledby;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_ariaLabelledby;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_ariaActivedescendant;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_ariaActivedescendant;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_ariaOwns;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_ariaOwns;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16* pfHasAttributes) hasAttributes;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_ariaLive;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_ariaLive;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_ariaRelevant;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_ariaRelevant;
	}


	public HRESULT getAttributeNode(BSTR bstrname, IHTMLDOMAttribute2** ppretAttribute) mut => VT.[Friend]getAttributeNode(&this, bstrname, ppretAttribute);

	public HRESULT setAttributeNode(IHTMLDOMAttribute2* pattr, IHTMLDOMAttribute2** ppretAttribute) mut => VT.[Friend]setAttributeNode(&this, pattr, ppretAttribute);

	public HRESULT removeAttributeNode(IHTMLDOMAttribute2* pattr, IHTMLDOMAttribute2** ppretAttribute) mut => VT.[Friend]removeAttributeNode(&this, pattr, ppretAttribute);

	public HRESULT hasAttribute(BSTR name, int16* pfHasAttribute) mut => VT.[Friend]hasAttribute(&this, name, pfHasAttribute);

	public HRESULT put_role(BSTR v) mut => VT.[Friend]put_role(&this, v);

	public HRESULT get_role(BSTR* p) mut => VT.[Friend]get_role(&this, p);

	public HRESULT put_ariaBusy(BSTR v) mut => VT.[Friend]put_ariaBusy(&this, v);

	public HRESULT get_ariaBusy(BSTR* p) mut => VT.[Friend]get_ariaBusy(&this, p);

	public HRESULT put_ariaChecked(BSTR v) mut => VT.[Friend]put_ariaChecked(&this, v);

	public HRESULT get_ariaChecked(BSTR* p) mut => VT.[Friend]get_ariaChecked(&this, p);

	public HRESULT put_ariaDisabled(BSTR v) mut => VT.[Friend]put_ariaDisabled(&this, v);

	public HRESULT get_ariaDisabled(BSTR* p) mut => VT.[Friend]get_ariaDisabled(&this, p);

	public HRESULT put_ariaExpanded(BSTR v) mut => VT.[Friend]put_ariaExpanded(&this, v);

	public HRESULT get_ariaExpanded(BSTR* p) mut => VT.[Friend]get_ariaExpanded(&this, p);

	public HRESULT put_ariaHaspopup(BSTR v) mut => VT.[Friend]put_ariaHaspopup(&this, v);

	public HRESULT get_ariaHaspopup(BSTR* p) mut => VT.[Friend]get_ariaHaspopup(&this, p);

	public HRESULT put_ariaHidden(BSTR v) mut => VT.[Friend]put_ariaHidden(&this, v);

	public HRESULT get_ariaHidden(BSTR* p) mut => VT.[Friend]get_ariaHidden(&this, p);

	public HRESULT put_ariaInvalid(BSTR v) mut => VT.[Friend]put_ariaInvalid(&this, v);

	public HRESULT get_ariaInvalid(BSTR* p) mut => VT.[Friend]get_ariaInvalid(&this, p);

	public HRESULT put_ariaMultiselectable(BSTR v) mut => VT.[Friend]put_ariaMultiselectable(&this, v);

	public HRESULT get_ariaMultiselectable(BSTR* p) mut => VT.[Friend]get_ariaMultiselectable(&this, p);

	public HRESULT put_ariaPressed(BSTR v) mut => VT.[Friend]put_ariaPressed(&this, v);

	public HRESULT get_ariaPressed(BSTR* p) mut => VT.[Friend]get_ariaPressed(&this, p);

	public HRESULT put_ariaReadonly(BSTR v) mut => VT.[Friend]put_ariaReadonly(&this, v);

	public HRESULT get_ariaReadonly(BSTR* p) mut => VT.[Friend]get_ariaReadonly(&this, p);

	public HRESULT put_ariaRequired(BSTR v) mut => VT.[Friend]put_ariaRequired(&this, v);

	public HRESULT get_ariaRequired(BSTR* p) mut => VT.[Friend]get_ariaRequired(&this, p);

	public HRESULT put_ariaSecret(BSTR v) mut => VT.[Friend]put_ariaSecret(&this, v);

	public HRESULT get_ariaSecret(BSTR* p) mut => VT.[Friend]get_ariaSecret(&this, p);

	public HRESULT put_ariaSelected(BSTR v) mut => VT.[Friend]put_ariaSelected(&this, v);

	public HRESULT get_ariaSelected(BSTR* p) mut => VT.[Friend]get_ariaSelected(&this, p);

	public HRESULT getAttribute(BSTR strAttributeName, VARIANT* AttributeValue) mut => VT.[Friend]getAttribute(&this, strAttributeName, AttributeValue);

	public HRESULT setAttribute(BSTR strAttributeName, VARIANT AttributeValue) mut => VT.[Friend]setAttribute(&this, strAttributeName, AttributeValue);

	public HRESULT removeAttribute(BSTR strAttributeName, int16* pfSuccess) mut => VT.[Friend]removeAttribute(&this, strAttributeName, pfSuccess);

	public HRESULT get_attributes(IHTMLAttributeCollection3** p) mut => VT.[Friend]get_attributes(&this, p);

	public HRESULT put_ariaValuenow(BSTR v) mut => VT.[Friend]put_ariaValuenow(&this, v);

	public HRESULT get_ariaValuenow(BSTR* p) mut => VT.[Friend]get_ariaValuenow(&this, p);

	public HRESULT put_ariaPosinset(int16 v) mut => VT.[Friend]put_ariaPosinset(&this, v);

	public HRESULT get_ariaPosinset(int16* p) mut => VT.[Friend]get_ariaPosinset(&this, p);

	public HRESULT put_ariaSetsize(int16 v) mut => VT.[Friend]put_ariaSetsize(&this, v);

	public HRESULT get_ariaSetsize(int16* p) mut => VT.[Friend]get_ariaSetsize(&this, p);

	public HRESULT put_ariaLevel(int16 v) mut => VT.[Friend]put_ariaLevel(&this, v);

	public HRESULT get_ariaLevel(int16* p) mut => VT.[Friend]get_ariaLevel(&this, p);

	public HRESULT put_ariaValuemin(BSTR v) mut => VT.[Friend]put_ariaValuemin(&this, v);

	public HRESULT get_ariaValuemin(BSTR* p) mut => VT.[Friend]get_ariaValuemin(&this, p);

	public HRESULT put_ariaValuemax(BSTR v) mut => VT.[Friend]put_ariaValuemax(&this, v);

	public HRESULT get_ariaValuemax(BSTR* p) mut => VT.[Friend]get_ariaValuemax(&this, p);

	public HRESULT put_ariaControls(BSTR v) mut => VT.[Friend]put_ariaControls(&this, v);

	public HRESULT get_ariaControls(BSTR* p) mut => VT.[Friend]get_ariaControls(&this, p);

	public HRESULT put_ariaDescribedby(BSTR v) mut => VT.[Friend]put_ariaDescribedby(&this, v);

	public HRESULT get_ariaDescribedby(BSTR* p) mut => VT.[Friend]get_ariaDescribedby(&this, p);

	public HRESULT put_ariaFlowto(BSTR v) mut => VT.[Friend]put_ariaFlowto(&this, v);

	public HRESULT get_ariaFlowto(BSTR* p) mut => VT.[Friend]get_ariaFlowto(&this, p);

	public HRESULT put_ariaLabelledby(BSTR v) mut => VT.[Friend]put_ariaLabelledby(&this, v);

	public HRESULT get_ariaLabelledby(BSTR* p) mut => VT.[Friend]get_ariaLabelledby(&this, p);

	public HRESULT put_ariaActivedescendant(BSTR v) mut => VT.[Friend]put_ariaActivedescendant(&this, v);

	public HRESULT get_ariaActivedescendant(BSTR* p) mut => VT.[Friend]get_ariaActivedescendant(&this, p);

	public HRESULT put_ariaOwns(BSTR v) mut => VT.[Friend]put_ariaOwns(&this, v);

	public HRESULT get_ariaOwns(BSTR* p) mut => VT.[Friend]get_ariaOwns(&this, p);

	public HRESULT hasAttributes(int16* pfHasAttributes) mut => VT.[Friend]hasAttributes(&this, pfHasAttributes);

	public HRESULT put_ariaLive(BSTR v) mut => VT.[Friend]put_ariaLive(&this, v);

	public HRESULT get_ariaLive(BSTR* p) mut => VT.[Friend]get_ariaLive(&this, p);

	public HRESULT put_ariaRelevant(BSTR v) mut => VT.[Friend]put_ariaRelevant(&this, v);

	public HRESULT get_ariaRelevant(BSTR* p) mut => VT.[Friend]get_ariaRelevant(&this, p);
}

[CRepr]struct IHTMLElement6 : IDispatch
{
	public new const Guid IID = .(0x305106f8, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* pvarNS, BSTR strAttributeName, VARIANT* AttributeValue) getAttributeNS;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* pvarNS, BSTR strAttributeName, VARIANT* pvarAttributeValue) setAttributeNS;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* pvarNS, BSTR strAttributeName) removeAttributeNS;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* pvarNS, BSTR bstrname, IHTMLDOMAttribute2** ppretAttribute) getAttributeNodeNS;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IHTMLDOMAttribute2* pattr, IHTMLDOMAttribute2** ppretAttribute) setAttributeNodeNS;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* pvarNS, BSTR name, int16* pfHasAttribute) hasAttributeNS;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR strAttributeName, VARIANT* AttributeValue) getAttribute;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR strAttributeName, VARIANT* pvarAttributeValue) setAttribute;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR strAttributeName) removeAttribute;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR strAttributeName, IHTMLDOMAttribute2** ppretAttribute) getAttributeNode;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IHTMLDOMAttribute2* pattr, IHTMLDOMAttribute2** ppretAttribute) setAttributeNode;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IHTMLDOMAttribute2* pattr, IHTMLDOMAttribute2** ppretAttribute) removeAttributeNode;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR name, int16* pfHasAttribute) hasAttribute;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* varNS, BSTR bstrLocalName, IHTMLElementCollection** pelColl) getElementsByTagNameNS;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_tagName;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_nodeName;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v, IHTMLElementCollection** pel) getElementsByClassName;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v, int16* pfMatches) msMatchesSelector;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_onabort;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_onabort;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_oncanplay;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_oncanplay;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_oncanplaythrough;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_oncanplaythrough;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_onchange;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_onchange;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_ondurationchange;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_ondurationchange;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_onemptied;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_onemptied;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_onended;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_onended;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_onerror;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_onerror;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_oninput;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_oninput;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_onload;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_onload;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_onloadeddata;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_onloadeddata;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_onloadedmetadata;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_onloadedmetadata;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_onloadstart;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_onloadstart;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_onpause;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_onpause;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_onplay;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_onplay;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_onplaying;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_onplaying;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_onprogress;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_onprogress;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_onratechange;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_onratechange;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_onreset;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_onreset;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_onseeked;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_onseeked;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_onseeking;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_onseeking;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_onselect;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_onselect;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_onstalled;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_onstalled;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_onsubmit;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_onsubmit;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_onsuspend;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_onsuspend;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_ontimeupdate;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_ontimeupdate;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_onvolumechange;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_onvolumechange;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_onwaiting;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_onwaiting;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16* pfHasAttributes) hasAttributes;
	}


	public HRESULT getAttributeNS(VARIANT* pvarNS, BSTR strAttributeName, VARIANT* AttributeValue) mut => VT.[Friend]getAttributeNS(&this, pvarNS, strAttributeName, AttributeValue);

	public HRESULT setAttributeNS(VARIANT* pvarNS, BSTR strAttributeName, VARIANT* pvarAttributeValue) mut => VT.[Friend]setAttributeNS(&this, pvarNS, strAttributeName, pvarAttributeValue);

	public HRESULT removeAttributeNS(VARIANT* pvarNS, BSTR strAttributeName) mut => VT.[Friend]removeAttributeNS(&this, pvarNS, strAttributeName);

	public HRESULT getAttributeNodeNS(VARIANT* pvarNS, BSTR bstrname, IHTMLDOMAttribute2** ppretAttribute) mut => VT.[Friend]getAttributeNodeNS(&this, pvarNS, bstrname, ppretAttribute);

	public HRESULT setAttributeNodeNS(IHTMLDOMAttribute2* pattr, IHTMLDOMAttribute2** ppretAttribute) mut => VT.[Friend]setAttributeNodeNS(&this, pattr, ppretAttribute);

	public HRESULT hasAttributeNS(VARIANT* pvarNS, BSTR name, int16* pfHasAttribute) mut => VT.[Friend]hasAttributeNS(&this, pvarNS, name, pfHasAttribute);

	public HRESULT getAttribute(BSTR strAttributeName, VARIANT* AttributeValue) mut => VT.[Friend]getAttribute(&this, strAttributeName, AttributeValue);

	public HRESULT setAttribute(BSTR strAttributeName, VARIANT* pvarAttributeValue) mut => VT.[Friend]setAttribute(&this, strAttributeName, pvarAttributeValue);

	public HRESULT removeAttribute(BSTR strAttributeName) mut => VT.[Friend]removeAttribute(&this, strAttributeName);

	public HRESULT getAttributeNode(BSTR strAttributeName, IHTMLDOMAttribute2** ppretAttribute) mut => VT.[Friend]getAttributeNode(&this, strAttributeName, ppretAttribute);

	public HRESULT setAttributeNode(IHTMLDOMAttribute2* pattr, IHTMLDOMAttribute2** ppretAttribute) mut => VT.[Friend]setAttributeNode(&this, pattr, ppretAttribute);

	public HRESULT removeAttributeNode(IHTMLDOMAttribute2* pattr, IHTMLDOMAttribute2** ppretAttribute) mut => VT.[Friend]removeAttributeNode(&this, pattr, ppretAttribute);

	public HRESULT hasAttribute(BSTR name, int16* pfHasAttribute) mut => VT.[Friend]hasAttribute(&this, name, pfHasAttribute);

	public HRESULT getElementsByTagNameNS(VARIANT* varNS, BSTR bstrLocalName, IHTMLElementCollection** pelColl) mut => VT.[Friend]getElementsByTagNameNS(&this, varNS, bstrLocalName, pelColl);

	public HRESULT get_tagName(BSTR* p) mut => VT.[Friend]get_tagName(&this, p);

	public HRESULT get_nodeName(BSTR* p) mut => VT.[Friend]get_nodeName(&this, p);

	public HRESULT getElementsByClassName(BSTR v, IHTMLElementCollection** pel) mut => VT.[Friend]getElementsByClassName(&this, v, pel);

	public HRESULT msMatchesSelector(BSTR v, int16* pfMatches) mut => VT.[Friend]msMatchesSelector(&this, v, pfMatches);

	public HRESULT put_onabort(VARIANT v) mut => VT.[Friend]put_onabort(&this, v);

	public HRESULT get_onabort(VARIANT* p) mut => VT.[Friend]get_onabort(&this, p);

	public HRESULT put_oncanplay(VARIANT v) mut => VT.[Friend]put_oncanplay(&this, v);

	public HRESULT get_oncanplay(VARIANT* p) mut => VT.[Friend]get_oncanplay(&this, p);

	public HRESULT put_oncanplaythrough(VARIANT v) mut => VT.[Friend]put_oncanplaythrough(&this, v);

	public HRESULT get_oncanplaythrough(VARIANT* p) mut => VT.[Friend]get_oncanplaythrough(&this, p);

	public HRESULT put_onchange(VARIANT v) mut => VT.[Friend]put_onchange(&this, v);

	public HRESULT get_onchange(VARIANT* p) mut => VT.[Friend]get_onchange(&this, p);

	public HRESULT put_ondurationchange(VARIANT v) mut => VT.[Friend]put_ondurationchange(&this, v);

	public HRESULT get_ondurationchange(VARIANT* p) mut => VT.[Friend]get_ondurationchange(&this, p);

	public HRESULT put_onemptied(VARIANT v) mut => VT.[Friend]put_onemptied(&this, v);

	public HRESULT get_onemptied(VARIANT* p) mut => VT.[Friend]get_onemptied(&this, p);

	public HRESULT put_onended(VARIANT v) mut => VT.[Friend]put_onended(&this, v);

	public HRESULT get_onended(VARIANT* p) mut => VT.[Friend]get_onended(&this, p);

	public HRESULT put_onerror(VARIANT v) mut => VT.[Friend]put_onerror(&this, v);

	public HRESULT get_onerror(VARIANT* p) mut => VT.[Friend]get_onerror(&this, p);

	public HRESULT put_oninput(VARIANT v) mut => VT.[Friend]put_oninput(&this, v);

	public HRESULT get_oninput(VARIANT* p) mut => VT.[Friend]get_oninput(&this, p);

	public HRESULT put_onload(VARIANT v) mut => VT.[Friend]put_onload(&this, v);

	public HRESULT get_onload(VARIANT* p) mut => VT.[Friend]get_onload(&this, p);

	public HRESULT put_onloadeddata(VARIANT v) mut => VT.[Friend]put_onloadeddata(&this, v);

	public HRESULT get_onloadeddata(VARIANT* p) mut => VT.[Friend]get_onloadeddata(&this, p);

	public HRESULT put_onloadedmetadata(VARIANT v) mut => VT.[Friend]put_onloadedmetadata(&this, v);

	public HRESULT get_onloadedmetadata(VARIANT* p) mut => VT.[Friend]get_onloadedmetadata(&this, p);

	public HRESULT put_onloadstart(VARIANT v) mut => VT.[Friend]put_onloadstart(&this, v);

	public HRESULT get_onloadstart(VARIANT* p) mut => VT.[Friend]get_onloadstart(&this, p);

	public HRESULT put_onpause(VARIANT v) mut => VT.[Friend]put_onpause(&this, v);

	public HRESULT get_onpause(VARIANT* p) mut => VT.[Friend]get_onpause(&this, p);

	public HRESULT put_onplay(VARIANT v) mut => VT.[Friend]put_onplay(&this, v);

	public HRESULT get_onplay(VARIANT* p) mut => VT.[Friend]get_onplay(&this, p);

	public HRESULT put_onplaying(VARIANT v) mut => VT.[Friend]put_onplaying(&this, v);

	public HRESULT get_onplaying(VARIANT* p) mut => VT.[Friend]get_onplaying(&this, p);

	public HRESULT put_onprogress(VARIANT v) mut => VT.[Friend]put_onprogress(&this, v);

	public HRESULT get_onprogress(VARIANT* p) mut => VT.[Friend]get_onprogress(&this, p);

	public HRESULT put_onratechange(VARIANT v) mut => VT.[Friend]put_onratechange(&this, v);

	public HRESULT get_onratechange(VARIANT* p) mut => VT.[Friend]get_onratechange(&this, p);

	public HRESULT put_onreset(VARIANT v) mut => VT.[Friend]put_onreset(&this, v);

	public HRESULT get_onreset(VARIANT* p) mut => VT.[Friend]get_onreset(&this, p);

	public HRESULT put_onseeked(VARIANT v) mut => VT.[Friend]put_onseeked(&this, v);

	public HRESULT get_onseeked(VARIANT* p) mut => VT.[Friend]get_onseeked(&this, p);

	public HRESULT put_onseeking(VARIANT v) mut => VT.[Friend]put_onseeking(&this, v);

	public HRESULT get_onseeking(VARIANT* p) mut => VT.[Friend]get_onseeking(&this, p);

	public HRESULT put_onselect(VARIANT v) mut => VT.[Friend]put_onselect(&this, v);

	public HRESULT get_onselect(VARIANT* p) mut => VT.[Friend]get_onselect(&this, p);

	public HRESULT put_onstalled(VARIANT v) mut => VT.[Friend]put_onstalled(&this, v);

	public HRESULT get_onstalled(VARIANT* p) mut => VT.[Friend]get_onstalled(&this, p);

	public HRESULT put_onsubmit(VARIANT v) mut => VT.[Friend]put_onsubmit(&this, v);

	public HRESULT get_onsubmit(VARIANT* p) mut => VT.[Friend]get_onsubmit(&this, p);

	public HRESULT put_onsuspend(VARIANT v) mut => VT.[Friend]put_onsuspend(&this, v);

	public HRESULT get_onsuspend(VARIANT* p) mut => VT.[Friend]get_onsuspend(&this, p);

	public HRESULT put_ontimeupdate(VARIANT v) mut => VT.[Friend]put_ontimeupdate(&this, v);

	public HRESULT get_ontimeupdate(VARIANT* p) mut => VT.[Friend]get_ontimeupdate(&this, p);

	public HRESULT put_onvolumechange(VARIANT v) mut => VT.[Friend]put_onvolumechange(&this, v);

	public HRESULT get_onvolumechange(VARIANT* p) mut => VT.[Friend]get_onvolumechange(&this, p);

	public HRESULT put_onwaiting(VARIANT v) mut => VT.[Friend]put_onwaiting(&this, v);

	public HRESULT get_onwaiting(VARIANT* p) mut => VT.[Friend]get_onwaiting(&this, p);

	public HRESULT hasAttributes(int16* pfHasAttributes) mut => VT.[Friend]hasAttributes(&this, pfHasAttributes);
}

[CRepr]struct IHTMLElement7 : IDispatch
{
	public new const Guid IID = .(0x305107aa, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_onmspointerdown;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_onmspointerdown;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_onmspointermove;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_onmspointermove;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_onmspointerup;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_onmspointerup;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_onmspointerover;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_onmspointerover;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_onmspointerout;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_onmspointerout;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_onmspointercancel;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_onmspointercancel;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_onmspointerhover;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_onmspointerhover;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_onmslostpointercapture;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_onmslostpointercapture;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_onmsgotpointercapture;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_onmsgotpointercapture;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_onmsgesturestart;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_onmsgesturestart;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_onmsgesturechange;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_onmsgesturechange;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_onmsgestureend;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_onmsgestureend;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_onmsgesturehold;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_onmsgesturehold;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_onmsgesturetap;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_onmsgesturetap;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_onmsgesturedoubletap;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_onmsgesturedoubletap;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_onmsinertiastart;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_onmsinertiastart;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 pointerId) msSetPointerCapture;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 pointerId) msReleasePointerCapture;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_onmstransitionstart;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_onmstransitionstart;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_onmstransitionend;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_onmstransitionend;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_onmsanimationstart;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_onmsanimationstart;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_onmsanimationend;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_onmsanimationend;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_onmsanimationiteration;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_onmsanimationiteration;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_oninvalid;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_oninvalid;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_xmsAcceleratorKey;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_xmsAcceleratorKey;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_spellcheck;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_spellcheck;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_onmsmanipulationstatechanged;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_onmsmanipulationstatechanged;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_oncuechange;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_oncuechange;
	}


	public HRESULT put_onmspointerdown(VARIANT v) mut => VT.[Friend]put_onmspointerdown(&this, v);

	public HRESULT get_onmspointerdown(VARIANT* p) mut => VT.[Friend]get_onmspointerdown(&this, p);

	public HRESULT put_onmspointermove(VARIANT v) mut => VT.[Friend]put_onmspointermove(&this, v);

	public HRESULT get_onmspointermove(VARIANT* p) mut => VT.[Friend]get_onmspointermove(&this, p);

	public HRESULT put_onmspointerup(VARIANT v) mut => VT.[Friend]put_onmspointerup(&this, v);

	public HRESULT get_onmspointerup(VARIANT* p) mut => VT.[Friend]get_onmspointerup(&this, p);

	public HRESULT put_onmspointerover(VARIANT v) mut => VT.[Friend]put_onmspointerover(&this, v);

	public HRESULT get_onmspointerover(VARIANT* p) mut => VT.[Friend]get_onmspointerover(&this, p);

	public HRESULT put_onmspointerout(VARIANT v) mut => VT.[Friend]put_onmspointerout(&this, v);

	public HRESULT get_onmspointerout(VARIANT* p) mut => VT.[Friend]get_onmspointerout(&this, p);

	public HRESULT put_onmspointercancel(VARIANT v) mut => VT.[Friend]put_onmspointercancel(&this, v);

	public HRESULT get_onmspointercancel(VARIANT* p) mut => VT.[Friend]get_onmspointercancel(&this, p);

	public HRESULT put_onmspointerhover(VARIANT v) mut => VT.[Friend]put_onmspointerhover(&this, v);

	public HRESULT get_onmspointerhover(VARIANT* p) mut => VT.[Friend]get_onmspointerhover(&this, p);

	public HRESULT put_onmslostpointercapture(VARIANT v) mut => VT.[Friend]put_onmslostpointercapture(&this, v);

	public HRESULT get_onmslostpointercapture(VARIANT* p) mut => VT.[Friend]get_onmslostpointercapture(&this, p);

	public HRESULT put_onmsgotpointercapture(VARIANT v) mut => VT.[Friend]put_onmsgotpointercapture(&this, v);

	public HRESULT get_onmsgotpointercapture(VARIANT* p) mut => VT.[Friend]get_onmsgotpointercapture(&this, p);

	public HRESULT put_onmsgesturestart(VARIANT v) mut => VT.[Friend]put_onmsgesturestart(&this, v);

	public HRESULT get_onmsgesturestart(VARIANT* p) mut => VT.[Friend]get_onmsgesturestart(&this, p);

	public HRESULT put_onmsgesturechange(VARIANT v) mut => VT.[Friend]put_onmsgesturechange(&this, v);

	public HRESULT get_onmsgesturechange(VARIANT* p) mut => VT.[Friend]get_onmsgesturechange(&this, p);

	public HRESULT put_onmsgestureend(VARIANT v) mut => VT.[Friend]put_onmsgestureend(&this, v);

	public HRESULT get_onmsgestureend(VARIANT* p) mut => VT.[Friend]get_onmsgestureend(&this, p);

	public HRESULT put_onmsgesturehold(VARIANT v) mut => VT.[Friend]put_onmsgesturehold(&this, v);

	public HRESULT get_onmsgesturehold(VARIANT* p) mut => VT.[Friend]get_onmsgesturehold(&this, p);

	public HRESULT put_onmsgesturetap(VARIANT v) mut => VT.[Friend]put_onmsgesturetap(&this, v);

	public HRESULT get_onmsgesturetap(VARIANT* p) mut => VT.[Friend]get_onmsgesturetap(&this, p);

	public HRESULT put_onmsgesturedoubletap(VARIANT v) mut => VT.[Friend]put_onmsgesturedoubletap(&this, v);

	public HRESULT get_onmsgesturedoubletap(VARIANT* p) mut => VT.[Friend]get_onmsgesturedoubletap(&this, p);

	public HRESULT put_onmsinertiastart(VARIANT v) mut => VT.[Friend]put_onmsinertiastart(&this, v);

	public HRESULT get_onmsinertiastart(VARIANT* p) mut => VT.[Friend]get_onmsinertiastart(&this, p);

	public HRESULT msSetPointerCapture(int32 pointerId) mut => VT.[Friend]msSetPointerCapture(&this, pointerId);

	public HRESULT msReleasePointerCapture(int32 pointerId) mut => VT.[Friend]msReleasePointerCapture(&this, pointerId);

	public HRESULT put_onmstransitionstart(VARIANT v) mut => VT.[Friend]put_onmstransitionstart(&this, v);

	public HRESULT get_onmstransitionstart(VARIANT* p) mut => VT.[Friend]get_onmstransitionstart(&this, p);

	public HRESULT put_onmstransitionend(VARIANT v) mut => VT.[Friend]put_onmstransitionend(&this, v);

	public HRESULT get_onmstransitionend(VARIANT* p) mut => VT.[Friend]get_onmstransitionend(&this, p);

	public HRESULT put_onmsanimationstart(VARIANT v) mut => VT.[Friend]put_onmsanimationstart(&this, v);

	public HRESULT get_onmsanimationstart(VARIANT* p) mut => VT.[Friend]get_onmsanimationstart(&this, p);

	public HRESULT put_onmsanimationend(VARIANT v) mut => VT.[Friend]put_onmsanimationend(&this, v);

	public HRESULT get_onmsanimationend(VARIANT* p) mut => VT.[Friend]get_onmsanimationend(&this, p);

	public HRESULT put_onmsanimationiteration(VARIANT v) mut => VT.[Friend]put_onmsanimationiteration(&this, v);

	public HRESULT get_onmsanimationiteration(VARIANT* p) mut => VT.[Friend]get_onmsanimationiteration(&this, p);

	public HRESULT put_oninvalid(VARIANT v) mut => VT.[Friend]put_oninvalid(&this, v);

	public HRESULT get_oninvalid(VARIANT* p) mut => VT.[Friend]get_oninvalid(&this, p);

	public HRESULT put_xmsAcceleratorKey(BSTR v) mut => VT.[Friend]put_xmsAcceleratorKey(&this, v);

	public HRESULT get_xmsAcceleratorKey(BSTR* p) mut => VT.[Friend]get_xmsAcceleratorKey(&this, p);

	public HRESULT put_spellcheck(VARIANT v) mut => VT.[Friend]put_spellcheck(&this, v);

	public HRESULT get_spellcheck(VARIANT* p) mut => VT.[Friend]get_spellcheck(&this, p);

	public HRESULT put_onmsmanipulationstatechanged(VARIANT v) mut => VT.[Friend]put_onmsmanipulationstatechanged(&this, v);

	public HRESULT get_onmsmanipulationstatechanged(VARIANT* p) mut => VT.[Friend]get_onmsmanipulationstatechanged(&this, p);

	public HRESULT put_oncuechange(VARIANT v) mut => VT.[Friend]put_oncuechange(&this, v);

	public HRESULT get_oncuechange(VARIANT* p) mut => VT.[Friend]get_oncuechange(&this, p);
}

[CRepr]struct IHTMLElementAppliedStyles : IDispatch
{
	public new const Guid IID = .(0x305104bd, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IRulesAppliedCollection** ppRulesAppliedCollection) msGetRulesApplied;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT varContext, IRulesAppliedCollection** ppRulesAppliedCollection) msGetRulesAppliedWithAncestor;
	}


	public HRESULT msGetRulesApplied(IRulesAppliedCollection** ppRulesAppliedCollection) mut => VT.[Friend]msGetRulesApplied(&this, ppRulesAppliedCollection);

	public HRESULT msGetRulesAppliedWithAncestor(VARIANT varContext, IRulesAppliedCollection** ppRulesAppliedCollection) mut => VT.[Friend]msGetRulesAppliedWithAncestor(&this, varContext, ppRulesAppliedCollection);
}

[CRepr]struct IElementTraversal : IDispatch
{
	public new const Guid IID = .(0x30510736, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IHTMLElement** p) get_firstElementChild;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IHTMLElement** p) get_lastElementChild;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IHTMLElement** p) get_previousElementSibling;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IHTMLElement** p) get_nextElementSibling;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* p) get_childElementCount;
	}


	public HRESULT get_firstElementChild(IHTMLElement** p) mut => VT.[Friend]get_firstElementChild(&this, p);

	public HRESULT get_lastElementChild(IHTMLElement** p) mut => VT.[Friend]get_lastElementChild(&this, p);

	public HRESULT get_previousElementSibling(IHTMLElement** p) mut => VT.[Friend]get_previousElementSibling(&this, p);

	public HRESULT get_nextElementSibling(IHTMLElement** p) mut => VT.[Friend]get_nextElementSibling(&this, p);

	public HRESULT get_childElementCount(int32* p) mut => VT.[Friend]get_childElementCount(&this, p);
}

[CRepr]struct IHTMLDatabinding : IDispatch
{
	public new const Guid IID = .(0x3050f3f2, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_dataFld;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_dataFld;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_dataSrc;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_dataSrc;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_dataFormatAs;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_dataFormatAs;
	}


	public HRESULT put_dataFld(BSTR v) mut => VT.[Friend]put_dataFld(&this, v);

	public HRESULT get_dataFld(BSTR* p) mut => VT.[Friend]get_dataFld(&this, p);

	public HRESULT put_dataSrc(BSTR v) mut => VT.[Friend]put_dataSrc(&this, v);

	public HRESULT get_dataSrc(BSTR* p) mut => VT.[Friend]get_dataSrc(&this, p);

	public HRESULT put_dataFormatAs(BSTR v) mut => VT.[Friend]put_dataFormatAs(&this, v);

	public HRESULT get_dataFormatAs(BSTR* p) mut => VT.[Friend]get_dataFormatAs(&this, p);
}

[CRepr]struct IHTMLDocument : IDispatch
{
	public new const Guid IID = .(0x626fc520, 0xa41e, 0x11cf, 0xa7, 0x31, 0x00, 0xa0, 0xc9, 0x08, 0x26, 0x37);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IDispatch** p) get_Script;
	}


	public HRESULT get_Script(IDispatch** p) mut => VT.[Friend]get_Script(&this, p);
}

[CRepr]struct IHTMLElementDefaults : IDispatch
{
	public new const Guid IID = .(0x3050f6c9, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IHTMLStyle** p) get_style;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16 v) put_tabStop;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16* p) get_tabStop;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16 v) put_viewInheritStyle;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16* p) get_viewInheritStyle;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16 v) put_viewMasterTab;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16* p) get_viewMasterTab;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 v) put_scrollSegmentX;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* p) get_scrollSegmentX;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 v) put_scrollSegmentY;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* p) get_scrollSegmentY;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16 v) put_isMultiLine;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16* p) get_isMultiLine;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_contentEditable;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_contentEditable;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16 v) put_canHaveHTML;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16* p) get_canHaveHTML;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IHTMLDocument* v) putref_viewLink;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IHTMLDocument** p) get_viewLink;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16 v) put_frozen;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16* p) get_frozen;
	}


	public HRESULT get_style(IHTMLStyle** p) mut => VT.[Friend]get_style(&this, p);

	public HRESULT put_tabStop(int16 v) mut => VT.[Friend]put_tabStop(&this, v);

	public HRESULT get_tabStop(int16* p) mut => VT.[Friend]get_tabStop(&this, p);

	public HRESULT put_viewInheritStyle(int16 v) mut => VT.[Friend]put_viewInheritStyle(&this, v);

	public HRESULT get_viewInheritStyle(int16* p) mut => VT.[Friend]get_viewInheritStyle(&this, p);

	public HRESULT put_viewMasterTab(int16 v) mut => VT.[Friend]put_viewMasterTab(&this, v);

	public HRESULT get_viewMasterTab(int16* p) mut => VT.[Friend]get_viewMasterTab(&this, p);

	public HRESULT put_scrollSegmentX(int32 v) mut => VT.[Friend]put_scrollSegmentX(&this, v);

	public HRESULT get_scrollSegmentX(int32* p) mut => VT.[Friend]get_scrollSegmentX(&this, p);

	public HRESULT put_scrollSegmentY(int32 v) mut => VT.[Friend]put_scrollSegmentY(&this, v);

	public HRESULT get_scrollSegmentY(int32* p) mut => VT.[Friend]get_scrollSegmentY(&this, p);

	public HRESULT put_isMultiLine(int16 v) mut => VT.[Friend]put_isMultiLine(&this, v);

	public HRESULT get_isMultiLine(int16* p) mut => VT.[Friend]get_isMultiLine(&this, p);

	public HRESULT put_contentEditable(BSTR v) mut => VT.[Friend]put_contentEditable(&this, v);

	public HRESULT get_contentEditable(BSTR* p) mut => VT.[Friend]get_contentEditable(&this, p);

	public HRESULT put_canHaveHTML(int16 v) mut => VT.[Friend]put_canHaveHTML(&this, v);

	public HRESULT get_canHaveHTML(int16* p) mut => VT.[Friend]get_canHaveHTML(&this, p);

	public HRESULT putref_viewLink(IHTMLDocument* v) mut => VT.[Friend]putref_viewLink(&this, v);

	public HRESULT get_viewLink(IHTMLDocument** p) mut => VT.[Friend]get_viewLink(&this, p);

	public HRESULT put_frozen(int16 v) mut => VT.[Friend]put_frozen(&this, v);

	public HRESULT get_frozen(int16* p) mut => VT.[Friend]get_frozen(&this, p);
}

[CRepr]struct DispHTMLDefaults : IDispatch
{
	public new const Guid IID = .(0x3050f58c, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
	}

}

[CRepr]struct IHTCDefaultDispatch : IDispatch
{
	public new const Guid IID = .(0x3050f4fd, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IHTMLElement** p) get_element;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IHTMLEventObj** eventObj) createEventObject;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IDispatch** p) get_defaults;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IDispatch** p) get_document;
	}


	public HRESULT get_element(IHTMLElement** p) mut => VT.[Friend]get_element(&this, p);

	public HRESULT createEventObject(IHTMLEventObj** eventObj) mut => VT.[Friend]createEventObject(&this, eventObj);

	public HRESULT get_defaults(IDispatch** p) mut => VT.[Friend]get_defaults(&this, p);

	public HRESULT get_document(IDispatch** p) mut => VT.[Friend]get_document(&this, p);
}

[CRepr]struct IHTCPropertyBehavior : IDispatch
{
	public new const Guid IID = .(0x3050f5df, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self) fireChange;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_value;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_value;
	}


	public HRESULT fireChange() mut => VT.[Friend]fireChange(&this);

	public HRESULT put_value(VARIANT v) mut => VT.[Friend]put_value(&this, v);

	public HRESULT get_value(VARIANT* p) mut => VT.[Friend]get_value(&this, p);
}

[CRepr]struct IHTCMethodBehavior : IDispatch
{
	public new const Guid IID = .(0x3050f631, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
	}

}

[CRepr]struct IHTCEventBehavior : IDispatch
{
	public new const Guid IID = .(0x3050f4ff, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IHTMLEventObj* pvar) fire;
	}


	public HRESULT fire(IHTMLEventObj* pvar) mut => VT.[Friend]fire(&this, pvar);
}

[CRepr]struct IHTCAttachBehavior : IDispatch
{
	public new const Guid IID = .(0x3050f5f4, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IDispatch* evt) fireEvent;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self) detachEvent;
	}


	public HRESULT fireEvent(IDispatch* evt) mut => VT.[Friend]fireEvent(&this, evt);

	public HRESULT detachEvent() mut => VT.[Friend]detachEvent(&this);
}

[CRepr]struct IHTCAttachBehavior2 : IDispatch
{
	public new const Guid IID = .(0x3050f7eb, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT evt) fireEvent;
	}


	public HRESULT fireEvent(VARIANT evt) mut => VT.[Friend]fireEvent(&this, evt);
}

[CRepr]struct IHTCDescBehavior : IDispatch
{
	public new const Guid IID = .(0x3050f5dc, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_urn;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_name;
	}


	public HRESULT get_urn(BSTR* p) mut => VT.[Friend]get_urn(&this, p);

	public HRESULT get_name(BSTR* p) mut => VT.[Friend]get_name(&this, p);
}

[CRepr]struct DispHTCDefaultDispatch : IDispatch
{
	public new const Guid IID = .(0x3050f573, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
	}

}

[CRepr]struct DispHTCPropertyBehavior : IDispatch
{
	public new const Guid IID = .(0x3050f57f, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
	}

}

[CRepr]struct DispHTCMethodBehavior : IDispatch
{
	public new const Guid IID = .(0x3050f587, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
	}

}

[CRepr]struct DispHTCEventBehavior : IDispatch
{
	public new const Guid IID = .(0x3050f574, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
	}

}

[CRepr]struct DispHTCAttachBehavior : IDispatch
{
	public new const Guid IID = .(0x3050f583, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
	}

}

[CRepr]struct DispHTCDescBehavior : IDispatch
{
	public new const Guid IID = .(0x3050f57e, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
	}

}

[CRepr]struct IHTMLUrnCollection : IDispatch
{
	public new const Guid IID = .(0x3050f5e2, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* p) get_length;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 index, BSTR* ppUrn) item;
	}


	public HRESULT get_length(int32* p) mut => VT.[Friend]get_length(&this, p);

	public HRESULT item(int32 index, BSTR* ppUrn) mut => VT.[Friend]item(&this, index, ppUrn);
}

[CRepr]struct DispHTMLUrnCollection : IDispatch
{
	public new const Guid IID = .(0x3050f551, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
	}

}

[CRepr]struct IHTMLGenericElement : IDispatch
{
	public new const Guid IID = .(0x3050f4b7, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IDispatch** p) get_recordset;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR dataMember, VARIANT* hierarchy, IDispatch** ppRecordset) namedRecordset;
	}


	public HRESULT get_recordset(IDispatch** p) mut => VT.[Friend]get_recordset(&this, p);

	public HRESULT namedRecordset(BSTR dataMember, VARIANT* hierarchy, IDispatch** ppRecordset) mut => VT.[Friend]namedRecordset(&this, dataMember, hierarchy, ppRecordset);
}

[CRepr]struct DispHTMLGenericElement : IDispatch
{
	public new const Guid IID = .(0x3050f563, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
	}

}

[CRepr]struct IHTMLStyleSheetRuleApplied : IDispatch
{
	public new const Guid IID = .(0x305104c1, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* p) get_msSpecificity;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 index, int32* p) msGetSpecificity;
	}


	public HRESULT get_msSpecificity(int32* p) mut => VT.[Friend]get_msSpecificity(&this, p);

	public HRESULT msGetSpecificity(int32 index, int32* p) mut => VT.[Friend]msGetSpecificity(&this, index, p);
}

[CRepr]struct IHTMLStyleSheetRule2 : IDispatch
{
	public new const Guid IID = .(0x305106fd, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_selectorText;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_selectorText;
	}


	public HRESULT put_selectorText(BSTR v) mut => VT.[Friend]put_selectorText(&this, v);

	public HRESULT get_selectorText(BSTR* p) mut => VT.[Friend]get_selectorText(&this, p);
}

[CRepr]struct IHTMLStyleSheetRulesCollection2 : IDispatch
{
	public new const Guid IID = .(0x305106e8, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* p) get_length;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 index, IHTMLCSSRule** ppHTMLCSSRule) item;
	}


	public HRESULT get_length(int32* p) mut => VT.[Friend]get_length(&this, p);

	public HRESULT item(int32 index, IHTMLCSSRule** ppHTMLCSSRule) mut => VT.[Friend]item(&this, index, ppHTMLCSSRule);
}

[CRepr]struct DispHTMLStyleSheetRule : IDispatch
{
	public new const Guid IID = .(0x3050f50e, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
	}

}

[CRepr]struct DispHTMLStyleSheetRulesCollection : IDispatch
{
	public new const Guid IID = .(0x3050f52f, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
	}

}

[CRepr]struct IHTMLStyleSheetPage : IDispatch
{
	public new const Guid IID = .(0x3050f7ee, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_selector;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_pseudoClass;
	}


	public HRESULT get_selector(BSTR* p) mut => VT.[Friend]get_selector(&this, p);

	public HRESULT get_pseudoClass(BSTR* p) mut => VT.[Friend]get_pseudoClass(&this, p);
}

[CRepr]struct IHTMLStyleSheetPage2 : IDispatch
{
	public new const Guid IID = .(0x305106ed, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_selectorText;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_selectorText;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IHTMLRuleStyle** p) get_style;
	}


	public HRESULT put_selectorText(BSTR v) mut => VT.[Friend]put_selectorText(&this, v);

	public HRESULT get_selectorText(BSTR* p) mut => VT.[Friend]get_selectorText(&this, p);

	public HRESULT get_style(IHTMLRuleStyle** p) mut => VT.[Friend]get_style(&this, p);
}

[CRepr]struct IHTMLStyleSheetPagesCollection : IDispatch
{
	public new const Guid IID = .(0x3050f7f0, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* p) get_length;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 index, IHTMLStyleSheetPage** ppHTMLStyleSheetPage) item;
	}


	public HRESULT get_length(int32* p) mut => VT.[Friend]get_length(&this, p);

	public HRESULT item(int32 index, IHTMLStyleSheetPage** ppHTMLStyleSheetPage) mut => VT.[Friend]item(&this, index, ppHTMLStyleSheetPage);
}

[CRepr]struct DispHTMLStyleSheetPage : IDispatch
{
	public new const Guid IID = .(0x3050f540, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
	}

}

[CRepr]struct DispHTMLStyleSheetPagesCollection : IDispatch
{
	public new const Guid IID = .(0x3050f543, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
	}

}

[CRepr]struct IHTMLStyleSheetsCollection : IDispatch
{
	public new const Guid IID = .(0x3050f37e, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* p) get_length;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IUnknown** p) get__newEnum;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* pvarIndex, VARIANT* pvarResult) item;
	}


	public HRESULT get_length(int32* p) mut => VT.[Friend]get_length(&this, p);

	public HRESULT get__newEnum(IUnknown** p) mut => VT.[Friend]get__newEnum(&this, p);

	public HRESULT item(VARIANT* pvarIndex, VARIANT* pvarResult) mut => VT.[Friend]item(&this, pvarIndex, pvarResult);
}

[CRepr]struct IHTMLStyleSheet2 : IDispatch
{
	public new const Guid IID = .(0x3050f3d1, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IHTMLStyleSheetPagesCollection** p) get_pages;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR bstrSelector, BSTR bstrStyle, int32 lIndex, int32* plNewIndex) addPageRule;
	}


	public HRESULT get_pages(IHTMLStyleSheetPagesCollection** p) mut => VT.[Friend]get_pages(&this, p);

	public HRESULT addPageRule(BSTR bstrSelector, BSTR bstrStyle, int32 lIndex, int32* plNewIndex) mut => VT.[Friend]addPageRule(&this, bstrSelector, bstrStyle, lIndex, plNewIndex);
}

[CRepr]struct IHTMLStyleSheet3 : IDispatch
{
	public new const Guid IID = .(0x30510496, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_href;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_href;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16* p) get_isAlternate;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16* p) get_isPrefAlternate;
	}


	public HRESULT put_href(BSTR v) mut => VT.[Friend]put_href(&this, v);

	public HRESULT get_href(BSTR* p) mut => VT.[Friend]get_href(&this, p);

	public HRESULT get_isAlternate(int16* p) mut => VT.[Friend]get_isAlternate(&this, p);

	public HRESULT get_isPrefAlternate(int16* p) mut => VT.[Friend]get_isPrefAlternate(&this, p);
}

[CRepr]struct IHTMLStyleSheet4 : IDispatch
{
	public new const Guid IID = .(0x305106f4, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_type;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_href;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_title;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IHTMLElement** p) get_ownerNode;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IHTMLCSSRule** p) get_ownerRule;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IHTMLStyleSheetRulesCollection** p) get_cssRules;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_media;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR bstrRule, int32 lIndex, int32* plNewIndex) insertRule;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 lIndex) deleteRule;
	}


	public HRESULT get_type(BSTR* p) mut => VT.[Friend]get_type(&this, p);

	public HRESULT get_href(VARIANT* p) mut => VT.[Friend]get_href(&this, p);

	public HRESULT get_title(BSTR* p) mut => VT.[Friend]get_title(&this, p);

	public HRESULT get_ownerNode(IHTMLElement** p) mut => VT.[Friend]get_ownerNode(&this, p);

	public HRESULT get_ownerRule(IHTMLCSSRule** p) mut => VT.[Friend]get_ownerRule(&this, p);

	public HRESULT get_cssRules(IHTMLStyleSheetRulesCollection** p) mut => VT.[Friend]get_cssRules(&this, p);

	public HRESULT get_media(VARIANT* p) mut => VT.[Friend]get_media(&this, p);

	public HRESULT insertRule(BSTR bstrRule, int32 lIndex, int32* plNewIndex) mut => VT.[Friend]insertRule(&this, bstrRule, lIndex, plNewIndex);

	public HRESULT deleteRule(int32 lIndex) mut => VT.[Friend]deleteRule(&this, lIndex);
}

[CRepr]struct DispHTMLStyleSheet : IDispatch
{
	public new const Guid IID = .(0x3050f58d, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
	}

}

[CRepr]struct IHTMLStyleSheetsCollection2 : IDispatch
{
	public new const Guid IID = .(0x305106e7, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 index, VARIANT* pvarResult) item;
	}


	public HRESULT item(int32 index, VARIANT* pvarResult) mut => VT.[Friend]item(&this, index, pvarResult);
}

[CRepr]struct DispHTMLStyleSheetsCollection : IDispatch
{
	public new const Guid IID = .(0x3050f547, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
	}

}

[CRepr]struct HTMLLinkElementEvents2 : IDispatch
{
	public new const Guid IID = .(0x3050f61d, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
	}

}

[CRepr]struct HTMLLinkElementEvents : IDispatch
{
	public new const Guid IID = .(0x3050f3cc, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
	}

}

[CRepr]struct IHTMLLinkElement : IDispatch
{
	public new const Guid IID = .(0x3050f205, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_href;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_href;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_rel;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_rel;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_rev;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_rev;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_type;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_type;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_readyState;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_onreadystatechange;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_onreadystatechange;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_onload;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_onload;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_onerror;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_onerror;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IHTMLStyleSheet** p) get_styleSheet;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16 v) put_disabled;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16* p) get_disabled;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_media;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_media;
	}


	public HRESULT put_href(BSTR v) mut => VT.[Friend]put_href(&this, v);

	public HRESULT get_href(BSTR* p) mut => VT.[Friend]get_href(&this, p);

	public HRESULT put_rel(BSTR v) mut => VT.[Friend]put_rel(&this, v);

	public HRESULT get_rel(BSTR* p) mut => VT.[Friend]get_rel(&this, p);

	public HRESULT put_rev(BSTR v) mut => VT.[Friend]put_rev(&this, v);

	public HRESULT get_rev(BSTR* p) mut => VT.[Friend]get_rev(&this, p);

	public HRESULT put_type(BSTR v) mut => VT.[Friend]put_type(&this, v);

	public HRESULT get_type(BSTR* p) mut => VT.[Friend]get_type(&this, p);

	public HRESULT get_readyState(BSTR* p) mut => VT.[Friend]get_readyState(&this, p);

	public HRESULT put_onreadystatechange(VARIANT v) mut => VT.[Friend]put_onreadystatechange(&this, v);

	public HRESULT get_onreadystatechange(VARIANT* p) mut => VT.[Friend]get_onreadystatechange(&this, p);

	public HRESULT put_onload(VARIANT v) mut => VT.[Friend]put_onload(&this, v);

	public HRESULT get_onload(VARIANT* p) mut => VT.[Friend]get_onload(&this, p);

	public HRESULT put_onerror(VARIANT v) mut => VT.[Friend]put_onerror(&this, v);

	public HRESULT get_onerror(VARIANT* p) mut => VT.[Friend]get_onerror(&this, p);

	public HRESULT get_styleSheet(IHTMLStyleSheet** p) mut => VT.[Friend]get_styleSheet(&this, p);

	public HRESULT put_disabled(int16 v) mut => VT.[Friend]put_disabled(&this, v);

	public HRESULT get_disabled(int16* p) mut => VT.[Friend]get_disabled(&this, p);

	public HRESULT put_media(BSTR v) mut => VT.[Friend]put_media(&this, v);

	public HRESULT get_media(BSTR* p) mut => VT.[Friend]get_media(&this, p);
}

[CRepr]struct IHTMLLinkElement2 : IDispatch
{
	public new const Guid IID = .(0x3050f4e5, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_target;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_target;
	}


	public HRESULT put_target(BSTR v) mut => VT.[Friend]put_target(&this, v);

	public HRESULT get_target(BSTR* p) mut => VT.[Friend]get_target(&this, p);
}

[CRepr]struct IHTMLLinkElement3 : IDispatch
{
	public new const Guid IID = .(0x3050f81e, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_charset;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_charset;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_hreflang;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_hreflang;
	}


	public HRESULT put_charset(BSTR v) mut => VT.[Friend]put_charset(&this, v);

	public HRESULT get_charset(BSTR* p) mut => VT.[Friend]get_charset(&this, p);

	public HRESULT put_hreflang(BSTR v) mut => VT.[Friend]put_hreflang(&this, v);

	public HRESULT get_hreflang(BSTR* p) mut => VT.[Friend]get_hreflang(&this, p);
}

[CRepr]struct IHTMLLinkElement4 : IDispatch
{
	public new const Guid IID = .(0x3051043a, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_href;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_href;
	}


	public HRESULT put_href(BSTR v) mut => VT.[Friend]put_href(&this, v);

	public HRESULT get_href(BSTR* p) mut => VT.[Friend]get_href(&this, p);
}

[CRepr]struct IHTMLLinkElement5 : IDispatch
{
	public new const Guid IID = .(0x30510726, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IHTMLStyleSheet** p) get_sheet;
	}


	public HRESULT get_sheet(IHTMLStyleSheet** p) mut => VT.[Friend]get_sheet(&this, p);
}

[CRepr]struct DispHTMLLinkElement : IDispatch
{
	public new const Guid IID = .(0x3050f524, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
	}

}

[CRepr]struct IHTMLTxtRange : IDispatch
{
	public new const Guid IID = .(0x3050f220, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_htmlText;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_text;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_text;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IHTMLElement** parent) parentElement;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IHTMLTxtRange** Duplicate) duplicate;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IHTMLTxtRange* Range, int16* InRange) inRange;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IHTMLTxtRange* Range, int16* IsEqual) isEqual;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16 fStart) scrollIntoView;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16 Start) collapse;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR Unit, int16* Success) expand;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR Unit, int32 Count, int32* ActualCount) move;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR Unit, int32 Count, int32* ActualCount) moveStart;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR Unit, int32 Count, int32* ActualCount) moveEnd;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self) select;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR html) pasteHTML;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IHTMLElement* element) moveToElementText;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR how, IHTMLTxtRange* SourceRange) setEndPoint;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR how, IHTMLTxtRange* SourceRange, int32* ret) compareEndPoints;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR String, int32 count, int32 Flags, int16* Success) findText;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 x, int32 y) moveToPoint;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* Boolmark) getBookmark;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR Bookmark, int16* Success) moveToBookmark;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR cmdID, int16* pfRet) queryCommandSupported;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR cmdID, int16* pfRet) queryCommandEnabled;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR cmdID, int16* pfRet) queryCommandState;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR cmdID, int16* pfRet) queryCommandIndeterm;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR cmdID, BSTR* pcmdText) queryCommandText;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR cmdID, VARIANT* pcmdValue) queryCommandValue;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR cmdID, int16 showUI, VARIANT value, int16* pfRet) execCommand;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR cmdID, int16* pfRet) execCommandShowHelp;
	}


	public HRESULT get_htmlText(BSTR* p) mut => VT.[Friend]get_htmlText(&this, p);

	public HRESULT put_text(BSTR v) mut => VT.[Friend]put_text(&this, v);

	public HRESULT get_text(BSTR* p) mut => VT.[Friend]get_text(&this, p);

	public HRESULT parentElement(IHTMLElement** parent) mut => VT.[Friend]parentElement(&this, parent);

	public HRESULT duplicate(IHTMLTxtRange** Duplicate) mut => VT.[Friend]duplicate(&this, Duplicate);

	public HRESULT inRange(IHTMLTxtRange* Range, int16* InRange) mut => VT.[Friend]inRange(&this, Range, InRange);

	public HRESULT isEqual(IHTMLTxtRange* Range, int16* IsEqual) mut => VT.[Friend]isEqual(&this, Range, IsEqual);

	public HRESULT scrollIntoView(int16 fStart) mut => VT.[Friend]scrollIntoView(&this, fStart);

	public HRESULT collapse(int16 Start) mut => VT.[Friend]collapse(&this, Start);

	public HRESULT expand(BSTR Unit, int16* Success) mut => VT.[Friend]expand(&this, Unit, Success);

	public HRESULT move(BSTR Unit, int32 Count, int32* ActualCount) mut => VT.[Friend]move(&this, Unit, Count, ActualCount);

	public HRESULT moveStart(BSTR Unit, int32 Count, int32* ActualCount) mut => VT.[Friend]moveStart(&this, Unit, Count, ActualCount);

	public HRESULT moveEnd(BSTR Unit, int32 Count, int32* ActualCount) mut => VT.[Friend]moveEnd(&this, Unit, Count, ActualCount);

	public HRESULT select() mut => VT.[Friend]select(&this);

	public HRESULT pasteHTML(BSTR html) mut => VT.[Friend]pasteHTML(&this, html);

	public HRESULT moveToElementText(IHTMLElement* element) mut => VT.[Friend]moveToElementText(&this, element);

	public HRESULT setEndPoint(BSTR how, IHTMLTxtRange* SourceRange) mut => VT.[Friend]setEndPoint(&this, how, SourceRange);

	public HRESULT compareEndPoints(BSTR how, IHTMLTxtRange* SourceRange, int32* ret) mut => VT.[Friend]compareEndPoints(&this, how, SourceRange, ret);

	public HRESULT findText(BSTR String, int32 count, int32 Flags, int16* Success) mut => VT.[Friend]findText(&this, String, count, Flags, Success);

	public HRESULT moveToPoint(int32 x, int32 y) mut => VT.[Friend]moveToPoint(&this, x, y);

	public HRESULT getBookmark(BSTR* Boolmark) mut => VT.[Friend]getBookmark(&this, Boolmark);

	public HRESULT moveToBookmark(BSTR Bookmark, int16* Success) mut => VT.[Friend]moveToBookmark(&this, Bookmark, Success);

	public HRESULT queryCommandSupported(BSTR cmdID, int16* pfRet) mut => VT.[Friend]queryCommandSupported(&this, cmdID, pfRet);

	public HRESULT queryCommandEnabled(BSTR cmdID, int16* pfRet) mut => VT.[Friend]queryCommandEnabled(&this, cmdID, pfRet);

	public HRESULT queryCommandState(BSTR cmdID, int16* pfRet) mut => VT.[Friend]queryCommandState(&this, cmdID, pfRet);

	public HRESULT queryCommandIndeterm(BSTR cmdID, int16* pfRet) mut => VT.[Friend]queryCommandIndeterm(&this, cmdID, pfRet);

	public HRESULT queryCommandText(BSTR cmdID, BSTR* pcmdText) mut => VT.[Friend]queryCommandText(&this, cmdID, pcmdText);

	public HRESULT queryCommandValue(BSTR cmdID, VARIANT* pcmdValue) mut => VT.[Friend]queryCommandValue(&this, cmdID, pcmdValue);

	public HRESULT execCommand(BSTR cmdID, int16 showUI, VARIANT value, int16* pfRet) mut => VT.[Friend]execCommand(&this, cmdID, showUI, value, pfRet);

	public HRESULT execCommandShowHelp(BSTR cmdID, int16* pfRet) mut => VT.[Friend]execCommandShowHelp(&this, cmdID, pfRet);
}

[CRepr]struct IHTMLTextRangeMetrics : IDispatch
{
	public new const Guid IID = .(0x3050f40b, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* p) get_offsetTop;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* p) get_offsetLeft;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* p) get_boundingTop;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* p) get_boundingLeft;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* p) get_boundingWidth;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* p) get_boundingHeight;
	}


	public HRESULT get_offsetTop(int32* p) mut => VT.[Friend]get_offsetTop(&this, p);

	public HRESULT get_offsetLeft(int32* p) mut => VT.[Friend]get_offsetLeft(&this, p);

	public HRESULT get_boundingTop(int32* p) mut => VT.[Friend]get_boundingTop(&this, p);

	public HRESULT get_boundingLeft(int32* p) mut => VT.[Friend]get_boundingLeft(&this, p);

	public HRESULT get_boundingWidth(int32* p) mut => VT.[Friend]get_boundingWidth(&this, p);

	public HRESULT get_boundingHeight(int32* p) mut => VT.[Friend]get_boundingHeight(&this, p);
}

[CRepr]struct IHTMLTextRangeMetrics2 : IDispatch
{
	public new const Guid IID = .(0x3050f4a6, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IHTMLRectCollection** pRectCol) getClientRects;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IHTMLRect** pRect) getBoundingClientRect;
	}


	public HRESULT getClientRects(IHTMLRectCollection** pRectCol) mut => VT.[Friend]getClientRects(&this, pRectCol);

	public HRESULT getBoundingClientRect(IHTMLRect** pRect) mut => VT.[Friend]getBoundingClientRect(&this, pRect);
}

[CRepr]struct IHTMLTxtRangeCollection : IDispatch
{
	public new const Guid IID = .(0x3050f7ed, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* p) get_length;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IUnknown** p) get__newEnum;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* pvarIndex, VARIANT* pvarResult) item;
	}


	public HRESULT get_length(int32* p) mut => VT.[Friend]get_length(&this, p);

	public HRESULT get__newEnum(IUnknown** p) mut => VT.[Friend]get__newEnum(&this, p);

	public HRESULT item(VARIANT* pvarIndex, VARIANT* pvarResult) mut => VT.[Friend]item(&this, pvarIndex, pvarResult);
}

[CRepr]struct IHTMLDOMRange : IDispatch
{
	public new const Guid IID = .(0x305104ae, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IHTMLDOMNode** p) get_startContainer;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* p) get_startOffset;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IHTMLDOMNode** p) get_endContainer;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* p) get_endOffset;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16* p) get_collapsed;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IHTMLDOMNode** p) get_commonAncestorContainer;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IDispatch* refNode, int32 offset) setStart;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IDispatch* refNode, int32 offset) setEnd;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IDispatch* refNode) setStartBefore;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IDispatch* refNode) setStartAfter;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IDispatch* refNode) setEndBefore;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IDispatch* refNode) setEndAfter;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16 toStart) collapse;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IDispatch* refNode) selectNode;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IDispatch* refNode) selectNodeContents;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16 how, IDispatch* sourceRange, int32* compareResult) compareBoundaryPoints;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self) deleteContents;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IDispatch** ppDocumentFragment) extractContents;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IDispatch** ppDocumentFragment) cloneContents;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IDispatch* newNode) insertNode;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IDispatch* newParent) surroundContents;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IHTMLDOMRange** ppClonedRange) cloneRange;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* pRangeString) toString;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self) detach;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IHTMLRectCollection** ppRectCol) getClientRects;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IHTMLRect** ppRect) getBoundingClientRect;
	}


	public HRESULT get_startContainer(IHTMLDOMNode** p) mut => VT.[Friend]get_startContainer(&this, p);

	public HRESULT get_startOffset(int32* p) mut => VT.[Friend]get_startOffset(&this, p);

	public HRESULT get_endContainer(IHTMLDOMNode** p) mut => VT.[Friend]get_endContainer(&this, p);

	public HRESULT get_endOffset(int32* p) mut => VT.[Friend]get_endOffset(&this, p);

	public HRESULT get_collapsed(int16* p) mut => VT.[Friend]get_collapsed(&this, p);

	public HRESULT get_commonAncestorContainer(IHTMLDOMNode** p) mut => VT.[Friend]get_commonAncestorContainer(&this, p);

	public HRESULT setStart(IDispatch* refNode, int32 offset) mut => VT.[Friend]setStart(&this, refNode, offset);

	public HRESULT setEnd(IDispatch* refNode, int32 offset) mut => VT.[Friend]setEnd(&this, refNode, offset);

	public HRESULT setStartBefore(IDispatch* refNode) mut => VT.[Friend]setStartBefore(&this, refNode);

	public HRESULT setStartAfter(IDispatch* refNode) mut => VT.[Friend]setStartAfter(&this, refNode);

	public HRESULT setEndBefore(IDispatch* refNode) mut => VT.[Friend]setEndBefore(&this, refNode);

	public HRESULT setEndAfter(IDispatch* refNode) mut => VT.[Friend]setEndAfter(&this, refNode);

	public HRESULT collapse(int16 toStart) mut => VT.[Friend]collapse(&this, toStart);

	public HRESULT selectNode(IDispatch* refNode) mut => VT.[Friend]selectNode(&this, refNode);

	public HRESULT selectNodeContents(IDispatch* refNode) mut => VT.[Friend]selectNodeContents(&this, refNode);

	public HRESULT compareBoundaryPoints(int16 how, IDispatch* sourceRange, int32* compareResult) mut => VT.[Friend]compareBoundaryPoints(&this, how, sourceRange, compareResult);

	public HRESULT deleteContents() mut => VT.[Friend]deleteContents(&this);

	public HRESULT extractContents(IDispatch** ppDocumentFragment) mut => VT.[Friend]extractContents(&this, ppDocumentFragment);

	public HRESULT cloneContents(IDispatch** ppDocumentFragment) mut => VT.[Friend]cloneContents(&this, ppDocumentFragment);

	public HRESULT insertNode(IDispatch* newNode) mut => VT.[Friend]insertNode(&this, newNode);

	public HRESULT surroundContents(IDispatch* newParent) mut => VT.[Friend]surroundContents(&this, newParent);

	public HRESULT cloneRange(IHTMLDOMRange** ppClonedRange) mut => VT.[Friend]cloneRange(&this, ppClonedRange);

	public HRESULT toString(BSTR* pRangeString) mut => VT.[Friend]toString(&this, pRangeString);

	public HRESULT detach() mut => VT.[Friend]detach(&this);

	public HRESULT getClientRects(IHTMLRectCollection** ppRectCol) mut => VT.[Friend]getClientRects(&this, ppRectCol);

	public HRESULT getBoundingClientRect(IHTMLRect** ppRect) mut => VT.[Friend]getBoundingClientRect(&this, ppRect);
}

[CRepr]struct DispHTMLDOMRange : IDispatch
{
	public new const Guid IID = .(0x3050f5a3, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
	}

}

[CRepr]struct HTMLFormElementEvents2 : IDispatch
{
	public new const Guid IID = .(0x3050f614, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
	}

}

[CRepr]struct HTMLFormElementEvents : IDispatch
{
	public new const Guid IID = .(0x3050f364, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
	}

}

[CRepr]struct IHTMLFormElement : IDispatch
{
	public new const Guid IID = .(0x3050f1f7, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_action;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_action;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_dir;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_dir;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_encoding;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_encoding;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_method;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_method;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IDispatch** p) get_elements;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_target;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_target;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_name;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_name;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_onsubmit;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_onsubmit;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_onreset;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_onreset;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self) submit;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self) reset;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 v) put_length;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* p) get_length;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IUnknown** p) get__newEnum;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT name, VARIANT index, IDispatch** pdisp) item;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT tagName, IDispatch** pdisp) tags;
	}


	public HRESULT put_action(BSTR v) mut => VT.[Friend]put_action(&this, v);

	public HRESULT get_action(BSTR* p) mut => VT.[Friend]get_action(&this, p);

	public HRESULT put_dir(BSTR v) mut => VT.[Friend]put_dir(&this, v);

	public HRESULT get_dir(BSTR* p) mut => VT.[Friend]get_dir(&this, p);

	public HRESULT put_encoding(BSTR v) mut => VT.[Friend]put_encoding(&this, v);

	public HRESULT get_encoding(BSTR* p) mut => VT.[Friend]get_encoding(&this, p);

	public HRESULT put_method(BSTR v) mut => VT.[Friend]put_method(&this, v);

	public HRESULT get_method(BSTR* p) mut => VT.[Friend]get_method(&this, p);

	public HRESULT get_elements(IDispatch** p) mut => VT.[Friend]get_elements(&this, p);

	public HRESULT put_target(BSTR v) mut => VT.[Friend]put_target(&this, v);

	public HRESULT get_target(BSTR* p) mut => VT.[Friend]get_target(&this, p);

	public HRESULT put_name(BSTR v) mut => VT.[Friend]put_name(&this, v);

	public HRESULT get_name(BSTR* p) mut => VT.[Friend]get_name(&this, p);

	public HRESULT put_onsubmit(VARIANT v) mut => VT.[Friend]put_onsubmit(&this, v);

	public HRESULT get_onsubmit(VARIANT* p) mut => VT.[Friend]get_onsubmit(&this, p);

	public HRESULT put_onreset(VARIANT v) mut => VT.[Friend]put_onreset(&this, v);

	public HRESULT get_onreset(VARIANT* p) mut => VT.[Friend]get_onreset(&this, p);

	public HRESULT submit() mut => VT.[Friend]submit(&this);

	public HRESULT reset() mut => VT.[Friend]reset(&this);

	public HRESULT put_length(int32 v) mut => VT.[Friend]put_length(&this, v);

	public HRESULT get_length(int32* p) mut => VT.[Friend]get_length(&this, p);

	public HRESULT get__newEnum(IUnknown** p) mut => VT.[Friend]get__newEnum(&this, p);

	public HRESULT item(VARIANT name, VARIANT index, IDispatch** pdisp) mut => VT.[Friend]item(&this, name, index, pdisp);

	public HRESULT tags(VARIANT tagName, IDispatch** pdisp) mut => VT.[Friend]tags(&this, tagName, pdisp);
}

[CRepr]struct IHTMLFormElement2 : IDispatch
{
	public new const Guid IID = .(0x3050f4f6, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_acceptCharset;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_acceptCharset;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT urn, IDispatch** pdisp) urns;
	}


	public HRESULT put_acceptCharset(BSTR v) mut => VT.[Friend]put_acceptCharset(&this, v);

	public HRESULT get_acceptCharset(BSTR* p) mut => VT.[Friend]get_acceptCharset(&this, p);

	public HRESULT urns(VARIANT urn, IDispatch** pdisp) mut => VT.[Friend]urns(&this, urn, pdisp);
}

[CRepr]struct IHTMLFormElement3 : IDispatch
{
	public new const Guid IID = .(0x3050f836, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR name, IDispatch** pdisp) namedItem;
	}


	public HRESULT namedItem(BSTR name, IDispatch** pdisp) mut => VT.[Friend]namedItem(&this, name, pdisp);
}

[CRepr]struct IHTMLSubmitData : IDispatch
{
	public new const Guid IID = .(0x3050f645, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR name, BSTR value) appendNameValuePair;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR name, BSTR filename) appendNameFilePair;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self) appendItemSeparator;
	}


	public HRESULT appendNameValuePair(BSTR name, BSTR value) mut => VT.[Friend]appendNameValuePair(&this, name, value);

	public HRESULT appendNameFilePair(BSTR name, BSTR filename) mut => VT.[Friend]appendNameFilePair(&this, name, filename);

	public HRESULT appendItemSeparator() mut => VT.[Friend]appendItemSeparator(&this);
}

[CRepr]struct IHTMLFormElement4 : IDispatch
{
	public new const Guid IID = .(0x3051042c, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_action;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_action;
	}


	public HRESULT put_action(BSTR v) mut => VT.[Friend]put_action(&this, v);

	public HRESULT get_action(BSTR* p) mut => VT.[Friend]get_action(&this, p);
}

[CRepr]struct DispHTMLFormElement : IDispatch
{
	public new const Guid IID = .(0x3050f510, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
	}

}

[CRepr]struct HTMLControlElementEvents2 : IDispatch
{
	public new const Guid IID = .(0x3050f612, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
	}

}

[CRepr]struct HTMLControlElementEvents : IDispatch
{
	public new const Guid IID = .(0x3050f4ea, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
	}

}

[CRepr]struct IHTMLControlElement : IDispatch
{
	public new const Guid IID = .(0x3050f4e9, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16 v) put_tabIndex;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16* p) get_tabIndex;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self) focus;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_accessKey;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_accessKey;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_onblur;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_onblur;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_onfocus;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_onfocus;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_onresize;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_onresize;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self) blur;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IUnknown* pUnk) addFilter;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IUnknown* pUnk) removeFilter;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* p) get_clientHeight;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* p) get_clientWidth;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* p) get_clientTop;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* p) get_clientLeft;
	}


	public HRESULT put_tabIndex(int16 v) mut => VT.[Friend]put_tabIndex(&this, v);

	public HRESULT get_tabIndex(int16* p) mut => VT.[Friend]get_tabIndex(&this, p);

	public HRESULT focus() mut => VT.[Friend]focus(&this);

	public HRESULT put_accessKey(BSTR v) mut => VT.[Friend]put_accessKey(&this, v);

	public HRESULT get_accessKey(BSTR* p) mut => VT.[Friend]get_accessKey(&this, p);

	public HRESULT put_onblur(VARIANT v) mut => VT.[Friend]put_onblur(&this, v);

	public HRESULT get_onblur(VARIANT* p) mut => VT.[Friend]get_onblur(&this, p);

	public HRESULT put_onfocus(VARIANT v) mut => VT.[Friend]put_onfocus(&this, v);

	public HRESULT get_onfocus(VARIANT* p) mut => VT.[Friend]get_onfocus(&this, p);

	public HRESULT put_onresize(VARIANT v) mut => VT.[Friend]put_onresize(&this, v);

	public HRESULT get_onresize(VARIANT* p) mut => VT.[Friend]get_onresize(&this, p);

	public HRESULT blur() mut => VT.[Friend]blur(&this);

	public HRESULT addFilter(IUnknown* pUnk) mut => VT.[Friend]addFilter(&this, pUnk);

	public HRESULT removeFilter(IUnknown* pUnk) mut => VT.[Friend]removeFilter(&this, pUnk);

	public HRESULT get_clientHeight(int32* p) mut => VT.[Friend]get_clientHeight(&this, p);

	public HRESULT get_clientWidth(int32* p) mut => VT.[Friend]get_clientWidth(&this, p);

	public HRESULT get_clientTop(int32* p) mut => VT.[Friend]get_clientTop(&this, p);

	public HRESULT get_clientLeft(int32* p) mut => VT.[Friend]get_clientLeft(&this, p);
}

[CRepr]struct IHTMLTextElement : IDispatch
{
	public new const Guid IID = .(0x3050f218, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
	}

}

[CRepr]struct DispHTMLTextElement : IDispatch
{
	public new const Guid IID = .(0x3050f537, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
	}

}

[CRepr]struct HTMLTextContainerEvents2 : IDispatch
{
	public new const Guid IID = .(0x3050f624, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
	}

}

[CRepr]struct HTMLTextContainerEvents : IDispatch
{
	public new const Guid IID = .(0x1ff6aa72, 0x5842, 0x11cf, 0xa7, 0x07, 0x00, 0xaa, 0x00, 0xc0, 0x09, 0x8d);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
	}

}

[CRepr]struct IHTMLTextContainer : IDispatch
{
	public new const Guid IID = .(0x3050f230, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IDispatch** range) createControlRange;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* p) get_scrollHeight;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* p) get_scrollWidth;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 v) put_scrollTop;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* p) get_scrollTop;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 v) put_scrollLeft;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* p) get_scrollLeft;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_onscroll;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_onscroll;
	}


	public HRESULT createControlRange(IDispatch** range) mut => VT.[Friend]createControlRange(&this, range);

	public HRESULT get_scrollHeight(int32* p) mut => VT.[Friend]get_scrollHeight(&this, p);

	public HRESULT get_scrollWidth(int32* p) mut => VT.[Friend]get_scrollWidth(&this, p);

	public HRESULT put_scrollTop(int32 v) mut => VT.[Friend]put_scrollTop(&this, v);

	public HRESULT get_scrollTop(int32* p) mut => VT.[Friend]get_scrollTop(&this, p);

	public HRESULT put_scrollLeft(int32 v) mut => VT.[Friend]put_scrollLeft(&this, v);

	public HRESULT get_scrollLeft(int32* p) mut => VT.[Friend]get_scrollLeft(&this, p);

	public HRESULT put_onscroll(VARIANT v) mut => VT.[Friend]put_onscroll(&this, v);

	public HRESULT get_onscroll(VARIANT* p) mut => VT.[Friend]get_onscroll(&this, p);
}

[CRepr]struct IHTMLControlRange : IDispatch
{
	public new const Guid IID = .(0x3050f29c, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self) select;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IHTMLControlElement* item) add;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 index) remove;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 index, IHTMLElement** pdisp) item;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT varargStart) scrollIntoView;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR cmdID, int16* pfRet) queryCommandSupported;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR cmdID, int16* pfRet) queryCommandEnabled;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR cmdID, int16* pfRet) queryCommandState;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR cmdID, int16* pfRet) queryCommandIndeterm;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR cmdID, BSTR* pcmdText) queryCommandText;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR cmdID, VARIANT* pcmdValue) queryCommandValue;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR cmdID, int16 showUI, VARIANT value, int16* pfRet) execCommand;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR cmdID, int16* pfRet) execCommandShowHelp;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IHTMLElement** parent) commonParentElement;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* p) get_length;
	}


	public HRESULT select() mut => VT.[Friend]select(&this);

	public HRESULT add(IHTMLControlElement* item) mut => VT.[Friend]add(&this, item);

	public HRESULT remove(int32 index) mut => VT.[Friend]remove(&this, index);

	public HRESULT item(int32 index, IHTMLElement** pdisp) mut => VT.[Friend]item(&this, index, pdisp);

	public HRESULT scrollIntoView(VARIANT varargStart) mut => VT.[Friend]scrollIntoView(&this, varargStart);

	public HRESULT queryCommandSupported(BSTR cmdID, int16* pfRet) mut => VT.[Friend]queryCommandSupported(&this, cmdID, pfRet);

	public HRESULT queryCommandEnabled(BSTR cmdID, int16* pfRet) mut => VT.[Friend]queryCommandEnabled(&this, cmdID, pfRet);

	public HRESULT queryCommandState(BSTR cmdID, int16* pfRet) mut => VT.[Friend]queryCommandState(&this, cmdID, pfRet);

	public HRESULT queryCommandIndeterm(BSTR cmdID, int16* pfRet) mut => VT.[Friend]queryCommandIndeterm(&this, cmdID, pfRet);

	public HRESULT queryCommandText(BSTR cmdID, BSTR* pcmdText) mut => VT.[Friend]queryCommandText(&this, cmdID, pcmdText);

	public HRESULT queryCommandValue(BSTR cmdID, VARIANT* pcmdValue) mut => VT.[Friend]queryCommandValue(&this, cmdID, pcmdValue);

	public HRESULT execCommand(BSTR cmdID, int16 showUI, VARIANT value, int16* pfRet) mut => VT.[Friend]execCommand(&this, cmdID, showUI, value, pfRet);

	public HRESULT execCommandShowHelp(BSTR cmdID, int16* pfRet) mut => VT.[Friend]execCommandShowHelp(&this, cmdID, pfRet);

	public HRESULT commonParentElement(IHTMLElement** parent) mut => VT.[Friend]commonParentElement(&this, parent);

	public HRESULT get_length(int32* p) mut => VT.[Friend]get_length(&this, p);
}

[CRepr]struct IHTMLControlRange2 : IDispatch
{
	public new const Guid IID = .(0x3050f65e, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IHTMLElement* item) addElement;
	}


	public HRESULT addElement(IHTMLElement* item) mut => VT.[Friend]addElement(&this, item);
}

[CRepr]struct HTMLImgEvents2 : IDispatch
{
	public new const Guid IID = .(0x3050f616, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
	}

}

[CRepr]struct HTMLImgEvents : IDispatch
{
	public new const Guid IID = .(0x3050f25b, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
	}

}

[CRepr]struct IHTMLImgElement : IDispatch
{
	public new const Guid IID = .(0x3050f240, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16 v) put_isMap;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16* p) get_isMap;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_useMap;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_useMap;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_mimeType;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_fileSize;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_fileCreatedDate;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_fileModifiedDate;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_fileUpdatedDate;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_protocol;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_href;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_nameProp;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_border;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_border;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 v) put_vspace;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* p) get_vspace;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 v) put_hspace;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* p) get_hspace;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_alt;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_alt;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_src;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_src;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_lowsrc;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_lowsrc;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_vrml;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_vrml;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_dynsrc;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_dynsrc;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_readyState;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16* p) get_complete;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_loop;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_loop;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_align;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_align;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_onload;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_onload;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_onerror;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_onerror;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_onabort;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_onabort;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_name;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_name;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 v) put_width;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* p) get_width;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 v) put_height;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* p) get_height;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_start;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_start;
	}


	public HRESULT put_isMap(int16 v) mut => VT.[Friend]put_isMap(&this, v);

	public HRESULT get_isMap(int16* p) mut => VT.[Friend]get_isMap(&this, p);

	public HRESULT put_useMap(BSTR v) mut => VT.[Friend]put_useMap(&this, v);

	public HRESULT get_useMap(BSTR* p) mut => VT.[Friend]get_useMap(&this, p);

	public HRESULT get_mimeType(BSTR* p) mut => VT.[Friend]get_mimeType(&this, p);

	public HRESULT get_fileSize(BSTR* p) mut => VT.[Friend]get_fileSize(&this, p);

	public HRESULT get_fileCreatedDate(BSTR* p) mut => VT.[Friend]get_fileCreatedDate(&this, p);

	public HRESULT get_fileModifiedDate(BSTR* p) mut => VT.[Friend]get_fileModifiedDate(&this, p);

	public HRESULT get_fileUpdatedDate(BSTR* p) mut => VT.[Friend]get_fileUpdatedDate(&this, p);

	public HRESULT get_protocol(BSTR* p) mut => VT.[Friend]get_protocol(&this, p);

	public HRESULT get_href(BSTR* p) mut => VT.[Friend]get_href(&this, p);

	public HRESULT get_nameProp(BSTR* p) mut => VT.[Friend]get_nameProp(&this, p);

	public HRESULT put_border(VARIANT v) mut => VT.[Friend]put_border(&this, v);

	public HRESULT get_border(VARIANT* p) mut => VT.[Friend]get_border(&this, p);

	public HRESULT put_vspace(int32 v) mut => VT.[Friend]put_vspace(&this, v);

	public HRESULT get_vspace(int32* p) mut => VT.[Friend]get_vspace(&this, p);

	public HRESULT put_hspace(int32 v) mut => VT.[Friend]put_hspace(&this, v);

	public HRESULT get_hspace(int32* p) mut => VT.[Friend]get_hspace(&this, p);

	public HRESULT put_alt(BSTR v) mut => VT.[Friend]put_alt(&this, v);

	public HRESULT get_alt(BSTR* p) mut => VT.[Friend]get_alt(&this, p);

	public HRESULT put_src(BSTR v) mut => VT.[Friend]put_src(&this, v);

	public HRESULT get_src(BSTR* p) mut => VT.[Friend]get_src(&this, p);

	public HRESULT put_lowsrc(BSTR v) mut => VT.[Friend]put_lowsrc(&this, v);

	public HRESULT get_lowsrc(BSTR* p) mut => VT.[Friend]get_lowsrc(&this, p);

	public HRESULT put_vrml(BSTR v) mut => VT.[Friend]put_vrml(&this, v);

	public HRESULT get_vrml(BSTR* p) mut => VT.[Friend]get_vrml(&this, p);

	public HRESULT put_dynsrc(BSTR v) mut => VT.[Friend]put_dynsrc(&this, v);

	public HRESULT get_dynsrc(BSTR* p) mut => VT.[Friend]get_dynsrc(&this, p);

	public HRESULT get_readyState(BSTR* p) mut => VT.[Friend]get_readyState(&this, p);

	public HRESULT get_complete(int16* p) mut => VT.[Friend]get_complete(&this, p);

	public HRESULT put_loop(VARIANT v) mut => VT.[Friend]put_loop(&this, v);

	public HRESULT get_loop(VARIANT* p) mut => VT.[Friend]get_loop(&this, p);

	public HRESULT put_align(BSTR v) mut => VT.[Friend]put_align(&this, v);

	public HRESULT get_align(BSTR* p) mut => VT.[Friend]get_align(&this, p);

	public HRESULT put_onload(VARIANT v) mut => VT.[Friend]put_onload(&this, v);

	public HRESULT get_onload(VARIANT* p) mut => VT.[Friend]get_onload(&this, p);

	public HRESULT put_onerror(VARIANT v) mut => VT.[Friend]put_onerror(&this, v);

	public HRESULT get_onerror(VARIANT* p) mut => VT.[Friend]get_onerror(&this, p);

	public HRESULT put_onabort(VARIANT v) mut => VT.[Friend]put_onabort(&this, v);

	public HRESULT get_onabort(VARIANT* p) mut => VT.[Friend]get_onabort(&this, p);

	public HRESULT put_name(BSTR v) mut => VT.[Friend]put_name(&this, v);

	public HRESULT get_name(BSTR* p) mut => VT.[Friend]get_name(&this, p);

	public HRESULT put_width(int32 v) mut => VT.[Friend]put_width(&this, v);

	public HRESULT get_width(int32* p) mut => VT.[Friend]get_width(&this, p);

	public HRESULT put_height(int32 v) mut => VT.[Friend]put_height(&this, v);

	public HRESULT get_height(int32* p) mut => VT.[Friend]get_height(&this, p);

	public HRESULT put_start(BSTR v) mut => VT.[Friend]put_start(&this, v);

	public HRESULT get_start(BSTR* p) mut => VT.[Friend]get_start(&this, p);
}

[CRepr]struct IHTMLImgElement2 : IDispatch
{
	public new const Guid IID = .(0x3050f826, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_longDesc;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_longDesc;
	}


	public HRESULT put_longDesc(BSTR v) mut => VT.[Friend]put_longDesc(&this, v);

	public HRESULT get_longDesc(BSTR* p) mut => VT.[Friend]get_longDesc(&this, p);
}

[CRepr]struct IHTMLImgElement3 : IDispatch
{
	public new const Guid IID = .(0x30510434, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_longDesc;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_longDesc;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_vrml;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_vrml;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_lowsrc;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_lowsrc;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_dynsrc;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_dynsrc;
	}


	public HRESULT put_longDesc(BSTR v) mut => VT.[Friend]put_longDesc(&this, v);

	public HRESULT get_longDesc(BSTR* p) mut => VT.[Friend]get_longDesc(&this, p);

	public HRESULT put_vrml(BSTR v) mut => VT.[Friend]put_vrml(&this, v);

	public HRESULT get_vrml(BSTR* p) mut => VT.[Friend]get_vrml(&this, p);

	public HRESULT put_lowsrc(BSTR v) mut => VT.[Friend]put_lowsrc(&this, v);

	public HRESULT get_lowsrc(BSTR* p) mut => VT.[Friend]get_lowsrc(&this, p);

	public HRESULT put_dynsrc(BSTR v) mut => VT.[Friend]put_dynsrc(&this, v);

	public HRESULT get_dynsrc(BSTR* p) mut => VT.[Friend]get_dynsrc(&this, p);
}

[CRepr]struct IHTMLImgElement4 : IDispatch
{
	public new const Guid IID = .(0x305107f6, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* p) get_naturalWidth;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* p) get_naturalHeight;
	}


	public HRESULT get_naturalWidth(int32* p) mut => VT.[Friend]get_naturalWidth(&this, p);

	public HRESULT get_naturalHeight(int32* p) mut => VT.[Friend]get_naturalHeight(&this, p);
}

[CRepr]struct IHTMLMSImgElement : IDispatch
{
	public new const Guid IID = .(0x30510793, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16 v) put_msPlayToDisabled;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16* p) get_msPlayToDisabled;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16 v) put_msPlayToPrimary;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16* p) get_msPlayToPrimary;
	}


	public HRESULT put_msPlayToDisabled(int16 v) mut => VT.[Friend]put_msPlayToDisabled(&this, v);

	public HRESULT get_msPlayToDisabled(int16* p) mut => VT.[Friend]get_msPlayToDisabled(&this, p);

	public HRESULT put_msPlayToPrimary(int16 v) mut => VT.[Friend]put_msPlayToPrimary(&this, v);

	public HRESULT get_msPlayToPrimary(int16* p) mut => VT.[Friend]get_msPlayToPrimary(&this, p);
}

[CRepr]struct IHTMLImageElementFactory : IDispatch
{
	public new const Guid IID = .(0x3050f38e, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT width, VARIANT height, IHTMLImgElement** __MIDL__IHTMLImageElementFactory0000) create;
	}


	public HRESULT create(VARIANT width, VARIANT height, IHTMLImgElement** __MIDL__IHTMLImageElementFactory0000) mut => VT.[Friend]create(&this, width, height, __MIDL__IHTMLImageElementFactory0000);
}

[CRepr]struct DispHTMLImg : IDispatch
{
	public new const Guid IID = .(0x3050f51c, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
	}

}

[CRepr]struct IHTMLBodyElement : IDispatch
{
	public new const Guid IID = .(0x3050f1d8, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_background;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_background;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_bgProperties;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_bgProperties;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_leftMargin;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_leftMargin;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_topMargin;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_topMargin;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_rightMargin;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_rightMargin;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_bottomMargin;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_bottomMargin;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16 v) put_noWrap;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16* p) get_noWrap;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_bgColor;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_bgColor;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_text;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_text;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_link;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_link;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_vLink;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_vLink;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_aLink;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_aLink;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_onload;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_onload;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_onunload;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_onunload;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_scroll;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_scroll;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_onselect;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_onselect;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_onbeforeunload;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_onbeforeunload;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IHTMLTxtRange** range) createTextRange;
	}


	public HRESULT put_background(BSTR v) mut => VT.[Friend]put_background(&this, v);

	public HRESULT get_background(BSTR* p) mut => VT.[Friend]get_background(&this, p);

	public HRESULT put_bgProperties(BSTR v) mut => VT.[Friend]put_bgProperties(&this, v);

	public HRESULT get_bgProperties(BSTR* p) mut => VT.[Friend]get_bgProperties(&this, p);

	public HRESULT put_leftMargin(VARIANT v) mut => VT.[Friend]put_leftMargin(&this, v);

	public HRESULT get_leftMargin(VARIANT* p) mut => VT.[Friend]get_leftMargin(&this, p);

	public HRESULT put_topMargin(VARIANT v) mut => VT.[Friend]put_topMargin(&this, v);

	public HRESULT get_topMargin(VARIANT* p) mut => VT.[Friend]get_topMargin(&this, p);

	public HRESULT put_rightMargin(VARIANT v) mut => VT.[Friend]put_rightMargin(&this, v);

	public HRESULT get_rightMargin(VARIANT* p) mut => VT.[Friend]get_rightMargin(&this, p);

	public HRESULT put_bottomMargin(VARIANT v) mut => VT.[Friend]put_bottomMargin(&this, v);

	public HRESULT get_bottomMargin(VARIANT* p) mut => VT.[Friend]get_bottomMargin(&this, p);

	public HRESULT put_noWrap(int16 v) mut => VT.[Friend]put_noWrap(&this, v);

	public HRESULT get_noWrap(int16* p) mut => VT.[Friend]get_noWrap(&this, p);

	public HRESULT put_bgColor(VARIANT v) mut => VT.[Friend]put_bgColor(&this, v);

	public HRESULT get_bgColor(VARIANT* p) mut => VT.[Friend]get_bgColor(&this, p);

	public HRESULT put_text(VARIANT v) mut => VT.[Friend]put_text(&this, v);

	public HRESULT get_text(VARIANT* p) mut => VT.[Friend]get_text(&this, p);

	public HRESULT put_link(VARIANT v) mut => VT.[Friend]put_link(&this, v);

	public HRESULT get_link(VARIANT* p) mut => VT.[Friend]get_link(&this, p);

	public HRESULT put_vLink(VARIANT v) mut => VT.[Friend]put_vLink(&this, v);

	public HRESULT get_vLink(VARIANT* p) mut => VT.[Friend]get_vLink(&this, p);

	public HRESULT put_aLink(VARIANT v) mut => VT.[Friend]put_aLink(&this, v);

	public HRESULT get_aLink(VARIANT* p) mut => VT.[Friend]get_aLink(&this, p);

	public HRESULT put_onload(VARIANT v) mut => VT.[Friend]put_onload(&this, v);

	public HRESULT get_onload(VARIANT* p) mut => VT.[Friend]get_onload(&this, p);

	public HRESULT put_onunload(VARIANT v) mut => VT.[Friend]put_onunload(&this, v);

	public HRESULT get_onunload(VARIANT* p) mut => VT.[Friend]get_onunload(&this, p);

	public HRESULT put_scroll(BSTR v) mut => VT.[Friend]put_scroll(&this, v);

	public HRESULT get_scroll(BSTR* p) mut => VT.[Friend]get_scroll(&this, p);

	public HRESULT put_onselect(VARIANT v) mut => VT.[Friend]put_onselect(&this, v);

	public HRESULT get_onselect(VARIANT* p) mut => VT.[Friend]get_onselect(&this, p);

	public HRESULT put_onbeforeunload(VARIANT v) mut => VT.[Friend]put_onbeforeunload(&this, v);

	public HRESULT get_onbeforeunload(VARIANT* p) mut => VT.[Friend]get_onbeforeunload(&this, p);

	public HRESULT createTextRange(IHTMLTxtRange** range) mut => VT.[Friend]createTextRange(&this, range);
}

[CRepr]struct IHTMLBodyElement2 : IDispatch
{
	public new const Guid IID = .(0x3050f5c5, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_onbeforeprint;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_onbeforeprint;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_onafterprint;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_onafterprint;
	}


	public HRESULT put_onbeforeprint(VARIANT v) mut => VT.[Friend]put_onbeforeprint(&this, v);

	public HRESULT get_onbeforeprint(VARIANT* p) mut => VT.[Friend]get_onbeforeprint(&this, p);

	public HRESULT put_onafterprint(VARIANT v) mut => VT.[Friend]put_onafterprint(&this, v);

	public HRESULT get_onafterprint(VARIANT* p) mut => VT.[Friend]get_onafterprint(&this, p);
}

[CRepr]struct IHTMLBodyElement3 : IDispatch
{
	public new const Guid IID = .(0x30510422, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_background;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_background;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_ononline;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_ononline;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_onoffline;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_onoffline;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_onhashchange;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_onhashchange;
	}


	public HRESULT put_background(BSTR v) mut => VT.[Friend]put_background(&this, v);

	public HRESULT get_background(BSTR* p) mut => VT.[Friend]get_background(&this, p);

	public HRESULT put_ononline(VARIANT v) mut => VT.[Friend]put_ononline(&this, v);

	public HRESULT get_ononline(VARIANT* p) mut => VT.[Friend]get_ononline(&this, p);

	public HRESULT put_onoffline(VARIANT v) mut => VT.[Friend]put_onoffline(&this, v);

	public HRESULT get_onoffline(VARIANT* p) mut => VT.[Friend]get_onoffline(&this, p);

	public HRESULT put_onhashchange(VARIANT v) mut => VT.[Friend]put_onhashchange(&this, v);

	public HRESULT get_onhashchange(VARIANT* p) mut => VT.[Friend]get_onhashchange(&this, p);
}

[CRepr]struct IHTMLBodyElement4 : IDispatch
{
	public new const Guid IID = .(0x30510795, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_onmessage;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_onmessage;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_onstorage;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_onstorage;
	}


	public HRESULT put_onmessage(VARIANT v) mut => VT.[Friend]put_onmessage(&this, v);

	public HRESULT get_onmessage(VARIANT* p) mut => VT.[Friend]get_onmessage(&this, p);

	public HRESULT put_onstorage(VARIANT v) mut => VT.[Friend]put_onstorage(&this, v);

	public HRESULT get_onstorage(VARIANT* p) mut => VT.[Friend]get_onstorage(&this, p);
}

[CRepr]struct IHTMLBodyElement5 : IDispatch
{
	public new const Guid IID = .(0x30510822, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_onpopstate;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_onpopstate;
	}


	public HRESULT put_onpopstate(VARIANT v) mut => VT.[Friend]put_onpopstate(&this, v);

	public HRESULT get_onpopstate(VARIANT* p) mut => VT.[Friend]get_onpopstate(&this, p);
}

[CRepr]struct DispHTMLBody : IDispatch
{
	public new const Guid IID = .(0x3050f507, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
	}

}

[CRepr]struct IHTMLFontElement : IDispatch
{
	public new const Guid IID = .(0x3050f1d9, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_color;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_color;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_face;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_face;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_size;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_size;
	}


	public HRESULT put_color(VARIANT v) mut => VT.[Friend]put_color(&this, v);

	public HRESULT get_color(VARIANT* p) mut => VT.[Friend]get_color(&this, p);

	public HRESULT put_face(BSTR v) mut => VT.[Friend]put_face(&this, v);

	public HRESULT get_face(BSTR* p) mut => VT.[Friend]get_face(&this, p);

	public HRESULT put_size(VARIANT v) mut => VT.[Friend]put_size(&this, v);

	public HRESULT get_size(VARIANT* p) mut => VT.[Friend]get_size(&this, p);
}

[CRepr]struct DispHTMLFontElement : IDispatch
{
	public new const Guid IID = .(0x3050f512, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
	}

}

[CRepr]struct HTMLAnchorEvents2 : IDispatch
{
	public new const Guid IID = .(0x3050f610, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
	}

}

[CRepr]struct HTMLAnchorEvents : IDispatch
{
	public new const Guid IID = .(0x3050f29d, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
	}

}

[CRepr]struct IHTMLAnchorElement : IDispatch
{
	public new const Guid IID = .(0x3050f1da, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_href;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_href;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_target;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_target;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_rel;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_rel;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_rev;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_rev;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_urn;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_urn;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_Methods;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_Methods;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_name;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_name;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_host;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_host;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_hostname;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_hostname;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_pathname;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_pathname;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_port;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_port;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_protocol;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_protocol;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_search;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_search;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_hash;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_hash;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_onblur;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_onblur;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_onfocus;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_onfocus;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_accessKey;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_accessKey;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_protocolLong;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_mimeType;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_nameProp;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16 v) put_tabIndex;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16* p) get_tabIndex;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self) focus;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self) blur;
	}


	public HRESULT put_href(BSTR v) mut => VT.[Friend]put_href(&this, v);

	public HRESULT get_href(BSTR* p) mut => VT.[Friend]get_href(&this, p);

	public HRESULT put_target(BSTR v) mut => VT.[Friend]put_target(&this, v);

	public HRESULT get_target(BSTR* p) mut => VT.[Friend]get_target(&this, p);

	public HRESULT put_rel(BSTR v) mut => VT.[Friend]put_rel(&this, v);

	public HRESULT get_rel(BSTR* p) mut => VT.[Friend]get_rel(&this, p);

	public HRESULT put_rev(BSTR v) mut => VT.[Friend]put_rev(&this, v);

	public HRESULT get_rev(BSTR* p) mut => VT.[Friend]get_rev(&this, p);

	public HRESULT put_urn(BSTR v) mut => VT.[Friend]put_urn(&this, v);

	public HRESULT get_urn(BSTR* p) mut => VT.[Friend]get_urn(&this, p);

	public HRESULT put_Methods(BSTR v) mut => VT.[Friend]put_Methods(&this, v);

	public HRESULT get_Methods(BSTR* p) mut => VT.[Friend]get_Methods(&this, p);

	public HRESULT put_name(BSTR v) mut => VT.[Friend]put_name(&this, v);

	public HRESULT get_name(BSTR* p) mut => VT.[Friend]get_name(&this, p);

	public HRESULT put_host(BSTR v) mut => VT.[Friend]put_host(&this, v);

	public HRESULT get_host(BSTR* p) mut => VT.[Friend]get_host(&this, p);

	public HRESULT put_hostname(BSTR v) mut => VT.[Friend]put_hostname(&this, v);

	public HRESULT get_hostname(BSTR* p) mut => VT.[Friend]get_hostname(&this, p);

	public HRESULT put_pathname(BSTR v) mut => VT.[Friend]put_pathname(&this, v);

	public HRESULT get_pathname(BSTR* p) mut => VT.[Friend]get_pathname(&this, p);

	public HRESULT put_port(BSTR v) mut => VT.[Friend]put_port(&this, v);

	public HRESULT get_port(BSTR* p) mut => VT.[Friend]get_port(&this, p);

	public HRESULT put_protocol(BSTR v) mut => VT.[Friend]put_protocol(&this, v);

	public HRESULT get_protocol(BSTR* p) mut => VT.[Friend]get_protocol(&this, p);

	public HRESULT put_search(BSTR v) mut => VT.[Friend]put_search(&this, v);

	public HRESULT get_search(BSTR* p) mut => VT.[Friend]get_search(&this, p);

	public HRESULT put_hash(BSTR v) mut => VT.[Friend]put_hash(&this, v);

	public HRESULT get_hash(BSTR* p) mut => VT.[Friend]get_hash(&this, p);

	public HRESULT put_onblur(VARIANT v) mut => VT.[Friend]put_onblur(&this, v);

	public HRESULT get_onblur(VARIANT* p) mut => VT.[Friend]get_onblur(&this, p);

	public HRESULT put_onfocus(VARIANT v) mut => VT.[Friend]put_onfocus(&this, v);

	public HRESULT get_onfocus(VARIANT* p) mut => VT.[Friend]get_onfocus(&this, p);

	public HRESULT put_accessKey(BSTR v) mut => VT.[Friend]put_accessKey(&this, v);

	public HRESULT get_accessKey(BSTR* p) mut => VT.[Friend]get_accessKey(&this, p);

	public HRESULT get_protocolLong(BSTR* p) mut => VT.[Friend]get_protocolLong(&this, p);

	public HRESULT get_mimeType(BSTR* p) mut => VT.[Friend]get_mimeType(&this, p);

	public HRESULT get_nameProp(BSTR* p) mut => VT.[Friend]get_nameProp(&this, p);

	public HRESULT put_tabIndex(int16 v) mut => VT.[Friend]put_tabIndex(&this, v);

	public HRESULT get_tabIndex(int16* p) mut => VT.[Friend]get_tabIndex(&this, p);

	public HRESULT focus() mut => VT.[Friend]focus(&this);

	public HRESULT blur() mut => VT.[Friend]blur(&this);
}

[CRepr]struct IHTMLAnchorElement2 : IDispatch
{
	public new const Guid IID = .(0x3050f825, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_charset;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_charset;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_coords;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_coords;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_hreflang;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_hreflang;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_shape;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_shape;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_type;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_type;
	}


	public HRESULT put_charset(BSTR v) mut => VT.[Friend]put_charset(&this, v);

	public HRESULT get_charset(BSTR* p) mut => VT.[Friend]get_charset(&this, p);

	public HRESULT put_coords(BSTR v) mut => VT.[Friend]put_coords(&this, v);

	public HRESULT get_coords(BSTR* p) mut => VT.[Friend]get_coords(&this, p);

	public HRESULT put_hreflang(BSTR v) mut => VT.[Friend]put_hreflang(&this, v);

	public HRESULT get_hreflang(BSTR* p) mut => VT.[Friend]get_hreflang(&this, p);

	public HRESULT put_shape(BSTR v) mut => VT.[Friend]put_shape(&this, v);

	public HRESULT get_shape(BSTR* p) mut => VT.[Friend]get_shape(&this, p);

	public HRESULT put_type(BSTR v) mut => VT.[Friend]put_type(&this, v);

	public HRESULT get_type(BSTR* p) mut => VT.[Friend]get_type(&this, p);
}

[CRepr]struct IHTMLAnchorElement3 : IDispatch
{
	public new const Guid IID = .(0x3051041d, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_shape;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_shape;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_coords;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_coords;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_href;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_href;
	}


	public HRESULT put_shape(BSTR v) mut => VT.[Friend]put_shape(&this, v);

	public HRESULT get_shape(BSTR* p) mut => VT.[Friend]get_shape(&this, p);

	public HRESULT put_coords(BSTR v) mut => VT.[Friend]put_coords(&this, v);

	public HRESULT get_coords(BSTR* p) mut => VT.[Friend]get_coords(&this, p);

	public HRESULT put_href(BSTR v) mut => VT.[Friend]put_href(&this, v);

	public HRESULT get_href(BSTR* p) mut => VT.[Friend]get_href(&this, p);
}

[CRepr]struct DispHTMLAnchorElement : IDispatch
{
	public new const Guid IID = .(0x3050f502, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
	}

}

[CRepr]struct HTMLLabelEvents2 : IDispatch
{
	public new const Guid IID = .(0x3050f61c, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
	}

}

[CRepr]struct HTMLLabelEvents : IDispatch
{
	public new const Guid IID = .(0x3050f329, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
	}

}

[CRepr]struct IHTMLLabelElement : IDispatch
{
	public new const Guid IID = .(0x3050f32a, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_htmlFor;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_htmlFor;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_accessKey;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_accessKey;
	}


	public HRESULT put_htmlFor(BSTR v) mut => VT.[Friend]put_htmlFor(&this, v);

	public HRESULT get_htmlFor(BSTR* p) mut => VT.[Friend]get_htmlFor(&this, p);

	public HRESULT put_accessKey(BSTR v) mut => VT.[Friend]put_accessKey(&this, v);

	public HRESULT get_accessKey(BSTR* p) mut => VT.[Friend]get_accessKey(&this, p);
}

[CRepr]struct IHTMLLabelElement2 : IDispatch
{
	public new const Guid IID = .(0x3050f832, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IHTMLFormElement** p) get_form;
	}


	public HRESULT get_form(IHTMLFormElement** p) mut => VT.[Friend]get_form(&this, p);
}

[CRepr]struct DispHTMLLabelElement : IDispatch
{
	public new const Guid IID = .(0x3050f522, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
	}

}

[CRepr]struct IHTMLListElement : IDispatch
{
	public new const Guid IID = .(0x3050f20e, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
	}

}

[CRepr]struct IHTMLListElement2 : IDispatch
{
	public new const Guid IID = .(0x3050f822, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16 v) put_compact;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16* p) get_compact;
	}


	public HRESULT put_compact(int16 v) mut => VT.[Friend]put_compact(&this, v);

	public HRESULT get_compact(int16* p) mut => VT.[Friend]get_compact(&this, p);
}

[CRepr]struct DispHTMLListElement : IDispatch
{
	public new const Guid IID = .(0x3050f525, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
	}

}

[CRepr]struct IHTMLUListElement : IDispatch
{
	public new const Guid IID = .(0x3050f1dd, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16 v) put_compact;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16* p) get_compact;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_type;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_type;
	}


	public HRESULT put_compact(int16 v) mut => VT.[Friend]put_compact(&this, v);

	public HRESULT get_compact(int16* p) mut => VT.[Friend]get_compact(&this, p);

	public HRESULT put_type(BSTR v) mut => VT.[Friend]put_type(&this, v);

	public HRESULT get_type(BSTR* p) mut => VT.[Friend]get_type(&this, p);
}

[CRepr]struct DispHTMLUListElement : IDispatch
{
	public new const Guid IID = .(0x3050f538, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
	}

}

[CRepr]struct IHTMLOListElement : IDispatch
{
	public new const Guid IID = .(0x3050f1de, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16 v) put_compact;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16* p) get_compact;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 v) put_start;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* p) get_start;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_type;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_type;
	}


	public HRESULT put_compact(int16 v) mut => VT.[Friend]put_compact(&this, v);

	public HRESULT get_compact(int16* p) mut => VT.[Friend]get_compact(&this, p);

	public HRESULT put_start(int32 v) mut => VT.[Friend]put_start(&this, v);

	public HRESULT get_start(int32* p) mut => VT.[Friend]get_start(&this, p);

	public HRESULT put_type(BSTR v) mut => VT.[Friend]put_type(&this, v);

	public HRESULT get_type(BSTR* p) mut => VT.[Friend]get_type(&this, p);
}

[CRepr]struct DispHTMLOListElement : IDispatch
{
	public new const Guid IID = .(0x3050f52a, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
	}

}

[CRepr]struct IHTMLLIElement : IDispatch
{
	public new const Guid IID = .(0x3050f1e0, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_type;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_type;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 v) put_value;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* p) get_value;
	}


	public HRESULT put_type(BSTR v) mut => VT.[Friend]put_type(&this, v);

	public HRESULT get_type(BSTR* p) mut => VT.[Friend]get_type(&this, p);

	public HRESULT put_value(int32 v) mut => VT.[Friend]put_value(&this, v);

	public HRESULT get_value(int32* p) mut => VT.[Friend]get_value(&this, p);
}

[CRepr]struct DispHTMLLIElement : IDispatch
{
	public new const Guid IID = .(0x3050f523, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
	}

}

[CRepr]struct IHTMLBlockElement : IDispatch
{
	public new const Guid IID = .(0x3050f208, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_clear;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_clear;
	}


	public HRESULT put_clear(BSTR v) mut => VT.[Friend]put_clear(&this, v);

	public HRESULT get_clear(BSTR* p) mut => VT.[Friend]get_clear(&this, p);
}

[CRepr]struct IHTMLBlockElement2 : IDispatch
{
	public new const Guid IID = .(0x3050f823, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_cite;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_cite;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_width;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_width;
	}


	public HRESULT put_cite(BSTR v) mut => VT.[Friend]put_cite(&this, v);

	public HRESULT get_cite(BSTR* p) mut => VT.[Friend]get_cite(&this, p);

	public HRESULT put_width(BSTR v) mut => VT.[Friend]put_width(&this, v);

	public HRESULT get_width(BSTR* p) mut => VT.[Friend]get_width(&this, p);
}

[CRepr]struct IHTMLBlockElement3 : IDispatch
{
	public new const Guid IID = .(0x30510494, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_cite;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_cite;
	}


	public HRESULT put_cite(BSTR v) mut => VT.[Friend]put_cite(&this, v);

	public HRESULT get_cite(BSTR* p) mut => VT.[Friend]get_cite(&this, p);
}

[CRepr]struct DispHTMLBlockElement : IDispatch
{
	public new const Guid IID = .(0x3050f506, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
	}

}

[CRepr]struct IHTMLDivElement : IDispatch
{
	public new const Guid IID = .(0x3050f200, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_align;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_align;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16 v) put_noWrap;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16* p) get_noWrap;
	}


	public HRESULT put_align(BSTR v) mut => VT.[Friend]put_align(&this, v);

	public HRESULT get_align(BSTR* p) mut => VT.[Friend]get_align(&this, p);

	public HRESULT put_noWrap(int16 v) mut => VT.[Friend]put_noWrap(&this, v);

	public HRESULT get_noWrap(int16* p) mut => VT.[Friend]get_noWrap(&this, p);
}

[CRepr]struct DispHTMLDivElement : IDispatch
{
	public new const Guid IID = .(0x3050f50c, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
	}

}

[CRepr]struct IHTMLDDElement : IDispatch
{
	public new const Guid IID = .(0x3050f1f2, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16 v) put_noWrap;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16* p) get_noWrap;
	}


	public HRESULT put_noWrap(int16 v) mut => VT.[Friend]put_noWrap(&this, v);

	public HRESULT get_noWrap(int16* p) mut => VT.[Friend]get_noWrap(&this, p);
}

[CRepr]struct DispHTMLDDElement : IDispatch
{
	public new const Guid IID = .(0x3050f50b, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
	}

}

[CRepr]struct IHTMLDTElement : IDispatch
{
	public new const Guid IID = .(0x3050f1f3, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16 v) put_noWrap;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16* p) get_noWrap;
	}


	public HRESULT put_noWrap(int16 v) mut => VT.[Friend]put_noWrap(&this, v);

	public HRESULT get_noWrap(int16* p) mut => VT.[Friend]get_noWrap(&this, p);
}

[CRepr]struct DispHTMLDTElement : IDispatch
{
	public new const Guid IID = .(0x3050f50d, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
	}

}

[CRepr]struct IHTMLBRElement : IDispatch
{
	public new const Guid IID = .(0x3050f1f0, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_clear;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_clear;
	}


	public HRESULT put_clear(BSTR v) mut => VT.[Friend]put_clear(&this, v);

	public HRESULT get_clear(BSTR* p) mut => VT.[Friend]get_clear(&this, p);
}

[CRepr]struct DispHTMLBRElement : IDispatch
{
	public new const Guid IID = .(0x3050f53a, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
	}

}

[CRepr]struct IHTMLDListElement : IDispatch
{
	public new const Guid IID = .(0x3050f1f1, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16 v) put_compact;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16* p) get_compact;
	}


	public HRESULT put_compact(int16 v) mut => VT.[Friend]put_compact(&this, v);

	public HRESULT get_compact(int16* p) mut => VT.[Friend]get_compact(&this, p);
}

[CRepr]struct DispHTMLDListElement : IDispatch
{
	public new const Guid IID = .(0x3050f53b, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
	}

}

[CRepr]struct IHTMLHRElement : IDispatch
{
	public new const Guid IID = .(0x3050f1f4, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_align;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_align;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_color;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_color;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16 v) put_noShade;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16* p) get_noShade;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_width;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_width;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_size;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_size;
	}


	public HRESULT put_align(BSTR v) mut => VT.[Friend]put_align(&this, v);

	public HRESULT get_align(BSTR* p) mut => VT.[Friend]get_align(&this, p);

	public HRESULT put_color(VARIANT v) mut => VT.[Friend]put_color(&this, v);

	public HRESULT get_color(VARIANT* p) mut => VT.[Friend]get_color(&this, p);

	public HRESULT put_noShade(int16 v) mut => VT.[Friend]put_noShade(&this, v);

	public HRESULT get_noShade(int16* p) mut => VT.[Friend]get_noShade(&this, p);

	public HRESULT put_width(VARIANT v) mut => VT.[Friend]put_width(&this, v);

	public HRESULT get_width(VARIANT* p) mut => VT.[Friend]get_width(&this, p);

	public HRESULT put_size(VARIANT v) mut => VT.[Friend]put_size(&this, v);

	public HRESULT get_size(VARIANT* p) mut => VT.[Friend]get_size(&this, p);
}

[CRepr]struct DispHTMLHRElement : IDispatch
{
	public new const Guid IID = .(0x3050f53d, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
	}

}

[CRepr]struct IHTMLParaElement : IDispatch
{
	public new const Guid IID = .(0x3050f1f5, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_align;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_align;
	}


	public HRESULT put_align(BSTR v) mut => VT.[Friend]put_align(&this, v);

	public HRESULT get_align(BSTR* p) mut => VT.[Friend]get_align(&this, p);
}

[CRepr]struct DispHTMLParaElement : IDispatch
{
	public new const Guid IID = .(0x3050f52c, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
	}

}

[CRepr]struct IHTMLElementCollection2 : IDispatch
{
	public new const Guid IID = .(0x3050f5ee, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT urn, IDispatch** pdisp) urns;
	}


	public HRESULT urns(VARIANT urn, IDispatch** pdisp) mut => VT.[Friend]urns(&this, urn, pdisp);
}

[CRepr]struct IHTMLElementCollection3 : IDispatch
{
	public new const Guid IID = .(0x3050f835, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR name, IDispatch** pdisp) namedItem;
	}


	public HRESULT namedItem(BSTR name, IDispatch** pdisp) mut => VT.[Friend]namedItem(&this, name, pdisp);
}

[CRepr]struct IHTMLElementCollection4 : IDispatch
{
	public new const Guid IID = .(0x30510425, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* p) get_length;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 index, IHTMLElement2** pNode) item;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR name, IHTMLElement2** pNode) namedItem;
	}


	public HRESULT get_length(int32* p) mut => VT.[Friend]get_length(&this, p);

	public HRESULT item(int32 index, IHTMLElement2** pNode) mut => VT.[Friend]item(&this, index, pNode);

	public HRESULT namedItem(BSTR name, IHTMLElement2** pNode) mut => VT.[Friend]namedItem(&this, name, pNode);
}

[CRepr]struct DispHTMLElementCollection : IDispatch
{
	public new const Guid IID = .(0x3050f56b, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
	}

}

[CRepr]struct IHTMLHeaderElement : IDispatch
{
	public new const Guid IID = .(0x3050f1f6, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_align;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_align;
	}


	public HRESULT put_align(BSTR v) mut => VT.[Friend]put_align(&this, v);

	public HRESULT get_align(BSTR* p) mut => VT.[Friend]get_align(&this, p);
}

[CRepr]struct DispHTMLHeaderElement : IDispatch
{
	public new const Guid IID = .(0x3050f515, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
	}

}

[CRepr]struct HTMLSelectElementEvents2 : IDispatch
{
	public new const Guid IID = .(0x3050f622, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
	}

}

[CRepr]struct HTMLSelectElementEvents : IDispatch
{
	public new const Guid IID = .(0x3050f302, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
	}

}

[CRepr]struct IHTMLOptionElement : IDispatch
{
	public new const Guid IID = .(0x3050f211, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16 v) put_selected;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16* p) get_selected;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_value;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_value;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16 v) put_defaultSelected;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16* p) get_defaultSelected;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 v) put_index;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* p) get_index;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_text;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_text;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IHTMLFormElement** p) get_form;
	}


	public HRESULT put_selected(int16 v) mut => VT.[Friend]put_selected(&this, v);

	public HRESULT get_selected(int16* p) mut => VT.[Friend]get_selected(&this, p);

	public HRESULT put_value(BSTR v) mut => VT.[Friend]put_value(&this, v);

	public HRESULT get_value(BSTR* p) mut => VT.[Friend]get_value(&this, p);

	public HRESULT put_defaultSelected(int16 v) mut => VT.[Friend]put_defaultSelected(&this, v);

	public HRESULT get_defaultSelected(int16* p) mut => VT.[Friend]get_defaultSelected(&this, p);

	public HRESULT put_index(int32 v) mut => VT.[Friend]put_index(&this, v);

	public HRESULT get_index(int32* p) mut => VT.[Friend]get_index(&this, p);

	public HRESULT put_text(BSTR v) mut => VT.[Friend]put_text(&this, v);

	public HRESULT get_text(BSTR* p) mut => VT.[Friend]get_text(&this, p);

	public HRESULT get_form(IHTMLFormElement** p) mut => VT.[Friend]get_form(&this, p);
}

[CRepr]struct IHTMLSelectElementEx : IUnknown
{
	public new const Guid IID = .(0x3050f2d1, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IUnknown.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BOOL fShow) ShowDropdown;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32 lFlags) SetSelectExFlags;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32* pFlags) GetSelectExFlags;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BOOL* pfOpen) GetDropdownOpen;
	}


	public HRESULT ShowDropdown(BOOL fShow) mut => VT.[Friend]ShowDropdown(&this, fShow);

	public HRESULT SetSelectExFlags(uint32 lFlags) mut => VT.[Friend]SetSelectExFlags(&this, lFlags);

	public HRESULT GetSelectExFlags(uint32* pFlags) mut => VT.[Friend]GetSelectExFlags(&this, pFlags);

	public HRESULT GetDropdownOpen(BOOL* pfOpen) mut => VT.[Friend]GetDropdownOpen(&this, pfOpen);
}

[CRepr]struct IHTMLSelectElement : IDispatch
{
	public new const Guid IID = .(0x3050f244, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 v) put_size;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* p) get_size;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16 v) put_multiple;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16* p) get_multiple;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_name;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_name;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IDispatch** p) get_options;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_onchange;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_onchange;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 v) put_selectedIndex;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* p) get_selectedIndex;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_type;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_value;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_value;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16 v) put_disabled;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16* p) get_disabled;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IHTMLFormElement** p) get_form;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IHTMLElement* element, VARIANT before) add;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 index) remove;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 v) put_length;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* p) get_length;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IUnknown** p) get__newEnum;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT name, VARIANT index, IDispatch** pdisp) item;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT tagName, IDispatch** pdisp) tags;
	}


	public HRESULT put_size(int32 v) mut => VT.[Friend]put_size(&this, v);

	public HRESULT get_size(int32* p) mut => VT.[Friend]get_size(&this, p);

	public HRESULT put_multiple(int16 v) mut => VT.[Friend]put_multiple(&this, v);

	public HRESULT get_multiple(int16* p) mut => VT.[Friend]get_multiple(&this, p);

	public HRESULT put_name(BSTR v) mut => VT.[Friend]put_name(&this, v);

	public HRESULT get_name(BSTR* p) mut => VT.[Friend]get_name(&this, p);

	public HRESULT get_options(IDispatch** p) mut => VT.[Friend]get_options(&this, p);

	public HRESULT put_onchange(VARIANT v) mut => VT.[Friend]put_onchange(&this, v);

	public HRESULT get_onchange(VARIANT* p) mut => VT.[Friend]get_onchange(&this, p);

	public HRESULT put_selectedIndex(int32 v) mut => VT.[Friend]put_selectedIndex(&this, v);

	public HRESULT get_selectedIndex(int32* p) mut => VT.[Friend]get_selectedIndex(&this, p);

	public HRESULT get_type(BSTR* p) mut => VT.[Friend]get_type(&this, p);

	public HRESULT put_value(BSTR v) mut => VT.[Friend]put_value(&this, v);

	public HRESULT get_value(BSTR* p) mut => VT.[Friend]get_value(&this, p);

	public HRESULT put_disabled(int16 v) mut => VT.[Friend]put_disabled(&this, v);

	public HRESULT get_disabled(int16* p) mut => VT.[Friend]get_disabled(&this, p);

	public HRESULT get_form(IHTMLFormElement** p) mut => VT.[Friend]get_form(&this, p);

	public HRESULT add(IHTMLElement* element, VARIANT before) mut => VT.[Friend]add(&this, element, before);

	public HRESULT remove(int32 index) mut => VT.[Friend]remove(&this, index);

	public HRESULT put_length(int32 v) mut => VT.[Friend]put_length(&this, v);

	public HRESULT get_length(int32* p) mut => VT.[Friend]get_length(&this, p);

	public HRESULT get__newEnum(IUnknown** p) mut => VT.[Friend]get__newEnum(&this, p);

	public HRESULT item(VARIANT name, VARIANT index, IDispatch** pdisp) mut => VT.[Friend]item(&this, name, index, pdisp);

	public HRESULT tags(VARIANT tagName, IDispatch** pdisp) mut => VT.[Friend]tags(&this, tagName, pdisp);
}

[CRepr]struct IHTMLSelectElement2 : IDispatch
{
	public new const Guid IID = .(0x3050f5ed, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT urn, IDispatch** pdisp) urns;
	}


	public HRESULT urns(VARIANT urn, IDispatch** pdisp) mut => VT.[Friend]urns(&this, urn, pdisp);
}

[CRepr]struct IHTMLSelectElement4 : IDispatch
{
	public new const Guid IID = .(0x3050f838, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR name, IDispatch** pdisp) namedItem;
	}


	public HRESULT namedItem(BSTR name, IDispatch** pdisp) mut => VT.[Friend]namedItem(&this, name, pdisp);
}

[CRepr]struct IHTMLSelectElement5 : IDispatch
{
	public new const Guid IID = .(0x3051049d, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IHTMLOptionElement* pElem, VARIANT* pvarBefore) add;
	}


	public HRESULT add(IHTMLOptionElement* pElem, VARIANT* pvarBefore) mut => VT.[Friend]add(&this, pElem, pvarBefore);
}

[CRepr]struct IHTMLSelectElement6 : IDispatch
{
	public new const Guid IID = .(0x30510760, 0x98b6, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IHTMLOptionElement* pElem, VARIANT* pvarBefore) add;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_value;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_value;
	}


	public HRESULT add(IHTMLOptionElement* pElem, VARIANT* pvarBefore) mut => VT.[Friend]add(&this, pElem, pvarBefore);

	public HRESULT put_value(BSTR v) mut => VT.[Friend]put_value(&this, v);

	public HRESULT get_value(BSTR* p) mut => VT.[Friend]get_value(&this, p);
}

[CRepr]struct DispHTMLSelectElement : IDispatch
{
	public new const Guid IID = .(0x3050f531, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
	}

}

[CRepr]struct DispHTMLWndSelectElement : IDispatch
{
	public new const Guid IID = .(0x3050f597, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
	}

}

[CRepr]struct IHTMLSelectionObject : IDispatch
{
	public new const Guid IID = .(0x3050f25a, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IDispatch** range) createRange;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self) empty;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self) clear;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_type;
	}


	public HRESULT createRange(IDispatch** range) mut => VT.[Friend]createRange(&this, range);

	public HRESULT empty() mut => VT.[Friend]empty(&this);

	public HRESULT clear() mut => VT.[Friend]clear(&this);

	public HRESULT get_type(BSTR* p) mut => VT.[Friend]get_type(&this, p);
}

[CRepr]struct IHTMLSelectionObject2 : IDispatch
{
	public new const Guid IID = .(0x3050f7ec, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IDispatch** rangeCollection) createRangeCollection;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_typeDetail;
	}


	public HRESULT createRangeCollection(IDispatch** rangeCollection) mut => VT.[Friend]createRangeCollection(&this, rangeCollection);

	public HRESULT get_typeDetail(BSTR* p) mut => VT.[Friend]get_typeDetail(&this, p);
}

[CRepr]struct IHTMLSelection : IDispatch
{
	public new const Guid IID = .(0x305104b6, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IHTMLDOMNode** p) get_anchorNode;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* p) get_anchorOffset;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IHTMLDOMNode** p) get_focusNode;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* p) get_focusOffset;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16* p) get_isCollapsed;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IDispatch* parentNode, int32 offfset) collapse;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self) collapseToStart;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self) collapseToEnd;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IDispatch* parentNode) selectAllChildren;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self) deleteFromDocument;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* p) get_rangeCount;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 index, IHTMLDOMRange** ppRange) getRangeAt;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IDispatch* range) addRange;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IDispatch* range) removeRange;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self) removeAllRanges;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* pSelectionString) toString;
	}


	public HRESULT get_anchorNode(IHTMLDOMNode** p) mut => VT.[Friend]get_anchorNode(&this, p);

	public HRESULT get_anchorOffset(int32* p) mut => VT.[Friend]get_anchorOffset(&this, p);

	public HRESULT get_focusNode(IHTMLDOMNode** p) mut => VT.[Friend]get_focusNode(&this, p);

	public HRESULT get_focusOffset(int32* p) mut => VT.[Friend]get_focusOffset(&this, p);

	public HRESULT get_isCollapsed(int16* p) mut => VT.[Friend]get_isCollapsed(&this, p);

	public HRESULT collapse(IDispatch* parentNode, int32 offfset) mut => VT.[Friend]collapse(&this, parentNode, offfset);

	public HRESULT collapseToStart() mut => VT.[Friend]collapseToStart(&this);

	public HRESULT collapseToEnd() mut => VT.[Friend]collapseToEnd(&this);

	public HRESULT selectAllChildren(IDispatch* parentNode) mut => VT.[Friend]selectAllChildren(&this, parentNode);

	public HRESULT deleteFromDocument() mut => VT.[Friend]deleteFromDocument(&this);

	public HRESULT get_rangeCount(int32* p) mut => VT.[Friend]get_rangeCount(&this, p);

	public HRESULT getRangeAt(int32 index, IHTMLDOMRange** ppRange) mut => VT.[Friend]getRangeAt(&this, index, ppRange);

	public HRESULT addRange(IDispatch* range) mut => VT.[Friend]addRange(&this, range);

	public HRESULT removeRange(IDispatch* range) mut => VT.[Friend]removeRange(&this, range);

	public HRESULT removeAllRanges() mut => VT.[Friend]removeAllRanges(&this);

	public HRESULT toString(BSTR* pSelectionString) mut => VT.[Friend]toString(&this, pSelectionString);
}

[CRepr]struct IHTMLOptionElement3 : IDispatch
{
	public new const Guid IID = .(0x3050f820, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_label;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_label;
	}


	public HRESULT put_label(BSTR v) mut => VT.[Friend]put_label(&this, v);

	public HRESULT get_label(BSTR* p) mut => VT.[Friend]get_label(&this, p);
}

[CRepr]struct IHTMLOptionElement4 : IDispatch
{
	public new const Guid IID = .(0x305107b4, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_value;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_value;
	}


	public HRESULT put_value(BSTR v) mut => VT.[Friend]put_value(&this, v);

	public HRESULT get_value(BSTR* p) mut => VT.[Friend]get_value(&this, p);
}

[CRepr]struct IHTMLOptionElementFactory : IDispatch
{
	public new const Guid IID = .(0x3050f38c, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT text, VARIANT value, VARIANT defaultselected, VARIANT selected, IHTMLOptionElement** __MIDL__IHTMLOptionElementFactory0000) create;
	}


	public HRESULT create(VARIANT text, VARIANT value, VARIANT defaultselected, VARIANT selected, IHTMLOptionElement** __MIDL__IHTMLOptionElementFactory0000) mut => VT.[Friend]create(&this, text, value, defaultselected, selected, __MIDL__IHTMLOptionElementFactory0000);
}

[CRepr]struct DispHTMLOptionElement : IDispatch
{
	public new const Guid IID = .(0x3050f52b, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
	}

}

[CRepr]struct DispHTMLWndOptionElement : IDispatch
{
	public new const Guid IID = .(0x3050f598, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
	}

}

[CRepr]struct HTMLButtonElementEvents2 : IDispatch
{
	public new const Guid IID = .(0x3050f617, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
	}

}

[CRepr]struct HTMLButtonElementEvents : IDispatch
{
	public new const Guid IID = .(0x3050f2b3, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
	}

}

[CRepr]struct HTMLInputTextElementEvents2 : IDispatch
{
	public new const Guid IID = .(0x3050f618, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
	}

}

[CRepr]struct HTMLOptionButtonElementEvents2 : IDispatch
{
	public new const Guid IID = .(0x3050f619, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
	}

}

[CRepr]struct HTMLInputFileElementEvents2 : IDispatch
{
	public new const Guid IID = .(0x3050f61a, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
	}

}

[CRepr]struct HTMLInputImageEvents2 : IDispatch
{
	public new const Guid IID = .(0x3050f61b, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
	}

}

[CRepr]struct HTMLInputTextElementEvents : IDispatch
{
	public new const Guid IID = .(0x3050f2a7, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
	}

}

[CRepr]struct HTMLOptionButtonElementEvents : IDispatch
{
	public new const Guid IID = .(0x3050f2bd, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
	}

}

[CRepr]struct HTMLInputFileElementEvents : IDispatch
{
	public new const Guid IID = .(0x3050f2af, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
	}

}

[CRepr]struct HTMLInputImageEvents : IDispatch
{
	public new const Guid IID = .(0x3050f2c3, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
	}

}

[CRepr]struct IHTMLInputElement : IDispatch
{
	public new const Guid IID = .(0x3050f5d2, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_type;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_type;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_value;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_value;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_name;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_name;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16 v) put_status;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16* p) get_status;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16 v) put_disabled;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16* p) get_disabled;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IHTMLFormElement** p) get_form;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 v) put_size;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* p) get_size;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 v) put_maxLength;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* p) get_maxLength;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self) select;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_onchange;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_onchange;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_onselect;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_onselect;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_defaultValue;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_defaultValue;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16 v) put_readOnly;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16* p) get_readOnly;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IHTMLTxtRange** range) createTextRange;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16 v) put_indeterminate;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16* p) get_indeterminate;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16 v) put_defaultChecked;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16* p) get_defaultChecked;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16 v) put_checked;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16* p) get_checked;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_border;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_border;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 v) put_vspace;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* p) get_vspace;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 v) put_hspace;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* p) get_hspace;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_alt;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_alt;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_src;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_src;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_lowsrc;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_lowsrc;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_vrml;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_vrml;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_dynsrc;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_dynsrc;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_readyState;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16* p) get_complete;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_loop;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_loop;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_align;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_align;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_onload;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_onload;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_onerror;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_onerror;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_onabort;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_onabort;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 v) put_width;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* p) get_width;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 v) put_height;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* p) get_height;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_start;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_start;
	}


	public HRESULT put_type(BSTR v) mut => VT.[Friend]put_type(&this, v);

	public HRESULT get_type(BSTR* p) mut => VT.[Friend]get_type(&this, p);

	public HRESULT put_value(BSTR v) mut => VT.[Friend]put_value(&this, v);

	public HRESULT get_value(BSTR* p) mut => VT.[Friend]get_value(&this, p);

	public HRESULT put_name(BSTR v) mut => VT.[Friend]put_name(&this, v);

	public HRESULT get_name(BSTR* p) mut => VT.[Friend]get_name(&this, p);

	public HRESULT put_status(int16 v) mut => VT.[Friend]put_status(&this, v);

	public HRESULT get_status(int16* p) mut => VT.[Friend]get_status(&this, p);

	public HRESULT put_disabled(int16 v) mut => VT.[Friend]put_disabled(&this, v);

	public HRESULT get_disabled(int16* p) mut => VT.[Friend]get_disabled(&this, p);

	public HRESULT get_form(IHTMLFormElement** p) mut => VT.[Friend]get_form(&this, p);

	public HRESULT put_size(int32 v) mut => VT.[Friend]put_size(&this, v);

	public HRESULT get_size(int32* p) mut => VT.[Friend]get_size(&this, p);

	public HRESULT put_maxLength(int32 v) mut => VT.[Friend]put_maxLength(&this, v);

	public HRESULT get_maxLength(int32* p) mut => VT.[Friend]get_maxLength(&this, p);

	public HRESULT select() mut => VT.[Friend]select(&this);

	public HRESULT put_onchange(VARIANT v) mut => VT.[Friend]put_onchange(&this, v);

	public HRESULT get_onchange(VARIANT* p) mut => VT.[Friend]get_onchange(&this, p);

	public HRESULT put_onselect(VARIANT v) mut => VT.[Friend]put_onselect(&this, v);

	public HRESULT get_onselect(VARIANT* p) mut => VT.[Friend]get_onselect(&this, p);

	public HRESULT put_defaultValue(BSTR v) mut => VT.[Friend]put_defaultValue(&this, v);

	public HRESULT get_defaultValue(BSTR* p) mut => VT.[Friend]get_defaultValue(&this, p);

	public HRESULT put_readOnly(int16 v) mut => VT.[Friend]put_readOnly(&this, v);

	public HRESULT get_readOnly(int16* p) mut => VT.[Friend]get_readOnly(&this, p);

	public HRESULT createTextRange(IHTMLTxtRange** range) mut => VT.[Friend]createTextRange(&this, range);

	public HRESULT put_indeterminate(int16 v) mut => VT.[Friend]put_indeterminate(&this, v);

	public HRESULT get_indeterminate(int16* p) mut => VT.[Friend]get_indeterminate(&this, p);

	public HRESULT put_defaultChecked(int16 v) mut => VT.[Friend]put_defaultChecked(&this, v);

	public HRESULT get_defaultChecked(int16* p) mut => VT.[Friend]get_defaultChecked(&this, p);

	public HRESULT put_checked(int16 v) mut => VT.[Friend]put_checked(&this, v);

	public HRESULT get_checked(int16* p) mut => VT.[Friend]get_checked(&this, p);

	public HRESULT put_border(VARIANT v) mut => VT.[Friend]put_border(&this, v);

	public HRESULT get_border(VARIANT* p) mut => VT.[Friend]get_border(&this, p);

	public HRESULT put_vspace(int32 v) mut => VT.[Friend]put_vspace(&this, v);

	public HRESULT get_vspace(int32* p) mut => VT.[Friend]get_vspace(&this, p);

	public HRESULT put_hspace(int32 v) mut => VT.[Friend]put_hspace(&this, v);

	public HRESULT get_hspace(int32* p) mut => VT.[Friend]get_hspace(&this, p);

	public HRESULT put_alt(BSTR v) mut => VT.[Friend]put_alt(&this, v);

	public HRESULT get_alt(BSTR* p) mut => VT.[Friend]get_alt(&this, p);

	public HRESULT put_src(BSTR v) mut => VT.[Friend]put_src(&this, v);

	public HRESULT get_src(BSTR* p) mut => VT.[Friend]get_src(&this, p);

	public HRESULT put_lowsrc(BSTR v) mut => VT.[Friend]put_lowsrc(&this, v);

	public HRESULT get_lowsrc(BSTR* p) mut => VT.[Friend]get_lowsrc(&this, p);

	public HRESULT put_vrml(BSTR v) mut => VT.[Friend]put_vrml(&this, v);

	public HRESULT get_vrml(BSTR* p) mut => VT.[Friend]get_vrml(&this, p);

	public HRESULT put_dynsrc(BSTR v) mut => VT.[Friend]put_dynsrc(&this, v);

	public HRESULT get_dynsrc(BSTR* p) mut => VT.[Friend]get_dynsrc(&this, p);

	public HRESULT get_readyState(BSTR* p) mut => VT.[Friend]get_readyState(&this, p);

	public HRESULT get_complete(int16* p) mut => VT.[Friend]get_complete(&this, p);

	public HRESULT put_loop(VARIANT v) mut => VT.[Friend]put_loop(&this, v);

	public HRESULT get_loop(VARIANT* p) mut => VT.[Friend]get_loop(&this, p);

	public HRESULT put_align(BSTR v) mut => VT.[Friend]put_align(&this, v);

	public HRESULT get_align(BSTR* p) mut => VT.[Friend]get_align(&this, p);

	public HRESULT put_onload(VARIANT v) mut => VT.[Friend]put_onload(&this, v);

	public HRESULT get_onload(VARIANT* p) mut => VT.[Friend]get_onload(&this, p);

	public HRESULT put_onerror(VARIANT v) mut => VT.[Friend]put_onerror(&this, v);

	public HRESULT get_onerror(VARIANT* p) mut => VT.[Friend]get_onerror(&this, p);

	public HRESULT put_onabort(VARIANT v) mut => VT.[Friend]put_onabort(&this, v);

	public HRESULT get_onabort(VARIANT* p) mut => VT.[Friend]get_onabort(&this, p);

	public HRESULT put_width(int32 v) mut => VT.[Friend]put_width(&this, v);

	public HRESULT get_width(int32* p) mut => VT.[Friend]get_width(&this, p);

	public HRESULT put_height(int32 v) mut => VT.[Friend]put_height(&this, v);

	public HRESULT get_height(int32* p) mut => VT.[Friend]get_height(&this, p);

	public HRESULT put_start(BSTR v) mut => VT.[Friend]put_start(&this, v);

	public HRESULT get_start(BSTR* p) mut => VT.[Friend]get_start(&this, p);
}

[CRepr]struct IHTMLInputElement2 : IDispatch
{
	public new const Guid IID = .(0x3050f821, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_accept;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_accept;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_useMap;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_useMap;
	}


	public HRESULT put_accept(BSTR v) mut => VT.[Friend]put_accept(&this, v);

	public HRESULT get_accept(BSTR* p) mut => VT.[Friend]get_accept(&this, p);

	public HRESULT put_useMap(BSTR v) mut => VT.[Friend]put_useMap(&this, v);

	public HRESULT get_useMap(BSTR* p) mut => VT.[Friend]get_useMap(&this, p);
}

[CRepr]struct IHTMLInputElement3 : IDispatch
{
	public new const Guid IID = .(0x30510435, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_src;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_src;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_lowsrc;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_lowsrc;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_vrml;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_vrml;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_dynsrc;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_dynsrc;
	}


	public HRESULT put_src(BSTR v) mut => VT.[Friend]put_src(&this, v);

	public HRESULT get_src(BSTR* p) mut => VT.[Friend]get_src(&this, p);

	public HRESULT put_lowsrc(BSTR v) mut => VT.[Friend]put_lowsrc(&this, v);

	public HRESULT get_lowsrc(BSTR* p) mut => VT.[Friend]get_lowsrc(&this, p);

	public HRESULT put_vrml(BSTR v) mut => VT.[Friend]put_vrml(&this, v);

	public HRESULT get_vrml(BSTR* p) mut => VT.[Friend]get_vrml(&this, p);

	public HRESULT put_dynsrc(BSTR v) mut => VT.[Friend]put_dynsrc(&this, v);

	public HRESULT get_dynsrc(BSTR* p) mut => VT.[Friend]get_dynsrc(&this, p);
}

[CRepr]struct IHTMLInputButtonElement : IDispatch
{
	public new const Guid IID = .(0x3050f2b2, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_type;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_value;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_value;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_name;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_name;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_status;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_status;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16 v) put_disabled;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16* p) get_disabled;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IHTMLFormElement** p) get_form;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IHTMLTxtRange** range) createTextRange;
	}


	public HRESULT get_type(BSTR* p) mut => VT.[Friend]get_type(&this, p);

	public HRESULT put_value(BSTR v) mut => VT.[Friend]put_value(&this, v);

	public HRESULT get_value(BSTR* p) mut => VT.[Friend]get_value(&this, p);

	public HRESULT put_name(BSTR v) mut => VT.[Friend]put_name(&this, v);

	public HRESULT get_name(BSTR* p) mut => VT.[Friend]get_name(&this, p);

	public HRESULT put_status(VARIANT v) mut => VT.[Friend]put_status(&this, v);

	public HRESULT get_status(VARIANT* p) mut => VT.[Friend]get_status(&this, p);

	public HRESULT put_disabled(int16 v) mut => VT.[Friend]put_disabled(&this, v);

	public HRESULT get_disabled(int16* p) mut => VT.[Friend]get_disabled(&this, p);

	public HRESULT get_form(IHTMLFormElement** p) mut => VT.[Friend]get_form(&this, p);

	public HRESULT createTextRange(IHTMLTxtRange** range) mut => VT.[Friend]createTextRange(&this, range);
}

[CRepr]struct IHTMLInputHiddenElement : IDispatch
{
	public new const Guid IID = .(0x3050f2a4, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_type;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_value;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_value;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_name;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_name;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_status;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_status;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16 v) put_disabled;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16* p) get_disabled;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IHTMLFormElement** p) get_form;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IHTMLTxtRange** range) createTextRange;
	}


	public HRESULT get_type(BSTR* p) mut => VT.[Friend]get_type(&this, p);

	public HRESULT put_value(BSTR v) mut => VT.[Friend]put_value(&this, v);

	public HRESULT get_value(BSTR* p) mut => VT.[Friend]get_value(&this, p);

	public HRESULT put_name(BSTR v) mut => VT.[Friend]put_name(&this, v);

	public HRESULT get_name(BSTR* p) mut => VT.[Friend]get_name(&this, p);

	public HRESULT put_status(VARIANT v) mut => VT.[Friend]put_status(&this, v);

	public HRESULT get_status(VARIANT* p) mut => VT.[Friend]get_status(&this, p);

	public HRESULT put_disabled(int16 v) mut => VT.[Friend]put_disabled(&this, v);

	public HRESULT get_disabled(int16* p) mut => VT.[Friend]get_disabled(&this, p);

	public HRESULT get_form(IHTMLFormElement** p) mut => VT.[Friend]get_form(&this, p);

	public HRESULT createTextRange(IHTMLTxtRange** range) mut => VT.[Friend]createTextRange(&this, range);
}

[CRepr]struct IHTMLInputTextElement : IDispatch
{
	public new const Guid IID = .(0x3050f2a6, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_type;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_value;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_value;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_name;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_name;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_status;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_status;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16 v) put_disabled;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16* p) get_disabled;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IHTMLFormElement** p) get_form;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_defaultValue;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_defaultValue;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 v) put_size;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* p) get_size;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 v) put_maxLength;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* p) get_maxLength;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self) select;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_onchange;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_onchange;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_onselect;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_onselect;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16 v) put_readOnly;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16* p) get_readOnly;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IHTMLTxtRange** range) createTextRange;
	}


	public HRESULT get_type(BSTR* p) mut => VT.[Friend]get_type(&this, p);

	public HRESULT put_value(BSTR v) mut => VT.[Friend]put_value(&this, v);

	public HRESULT get_value(BSTR* p) mut => VT.[Friend]get_value(&this, p);

	public HRESULT put_name(BSTR v) mut => VT.[Friend]put_name(&this, v);

	public HRESULT get_name(BSTR* p) mut => VT.[Friend]get_name(&this, p);

	public HRESULT put_status(VARIANT v) mut => VT.[Friend]put_status(&this, v);

	public HRESULT get_status(VARIANT* p) mut => VT.[Friend]get_status(&this, p);

	public HRESULT put_disabled(int16 v) mut => VT.[Friend]put_disabled(&this, v);

	public HRESULT get_disabled(int16* p) mut => VT.[Friend]get_disabled(&this, p);

	public HRESULT get_form(IHTMLFormElement** p) mut => VT.[Friend]get_form(&this, p);

	public HRESULT put_defaultValue(BSTR v) mut => VT.[Friend]put_defaultValue(&this, v);

	public HRESULT get_defaultValue(BSTR* p) mut => VT.[Friend]get_defaultValue(&this, p);

	public HRESULT put_size(int32 v) mut => VT.[Friend]put_size(&this, v);

	public HRESULT get_size(int32* p) mut => VT.[Friend]get_size(&this, p);

	public HRESULT put_maxLength(int32 v) mut => VT.[Friend]put_maxLength(&this, v);

	public HRESULT get_maxLength(int32* p) mut => VT.[Friend]get_maxLength(&this, p);

	public HRESULT select() mut => VT.[Friend]select(&this);

	public HRESULT put_onchange(VARIANT v) mut => VT.[Friend]put_onchange(&this, v);

	public HRESULT get_onchange(VARIANT* p) mut => VT.[Friend]get_onchange(&this, p);

	public HRESULT put_onselect(VARIANT v) mut => VT.[Friend]put_onselect(&this, v);

	public HRESULT get_onselect(VARIANT* p) mut => VT.[Friend]get_onselect(&this, p);

	public HRESULT put_readOnly(int16 v) mut => VT.[Friend]put_readOnly(&this, v);

	public HRESULT get_readOnly(int16* p) mut => VT.[Friend]get_readOnly(&this, p);

	public HRESULT createTextRange(IHTMLTxtRange** range) mut => VT.[Friend]createTextRange(&this, range);
}

[CRepr]struct IHTMLInputTextElement2 : IDispatch
{
	public new const Guid IID = .(0x3050f2d2, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 v) put_selectionStart;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* p) get_selectionStart;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 v) put_selectionEnd;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* p) get_selectionEnd;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 start, int32 end) setSelectionRange;
	}


	public HRESULT put_selectionStart(int32 v) mut => VT.[Friend]put_selectionStart(&this, v);

	public HRESULT get_selectionStart(int32* p) mut => VT.[Friend]get_selectionStart(&this, p);

	public HRESULT put_selectionEnd(int32 v) mut => VT.[Friend]put_selectionEnd(&this, v);

	public HRESULT get_selectionEnd(int32* p) mut => VT.[Friend]get_selectionEnd(&this, p);

	public HRESULT setSelectionRange(int32 start, int32 end) mut => VT.[Friend]setSelectionRange(&this, start, end);
}

[CRepr]struct IHTMLInputFileElement : IDispatch
{
	public new const Guid IID = .(0x3050f2ad, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_type;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_name;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_name;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_status;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_status;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16 v) put_disabled;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16* p) get_disabled;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IHTMLFormElement** p) get_form;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 v) put_size;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* p) get_size;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 v) put_maxLength;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* p) get_maxLength;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self) select;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_onchange;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_onchange;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_onselect;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_onselect;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_value;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_value;
	}


	public HRESULT get_type(BSTR* p) mut => VT.[Friend]get_type(&this, p);

	public HRESULT put_name(BSTR v) mut => VT.[Friend]put_name(&this, v);

	public HRESULT get_name(BSTR* p) mut => VT.[Friend]get_name(&this, p);

	public HRESULT put_status(VARIANT v) mut => VT.[Friend]put_status(&this, v);

	public HRESULT get_status(VARIANT* p) mut => VT.[Friend]get_status(&this, p);

	public HRESULT put_disabled(int16 v) mut => VT.[Friend]put_disabled(&this, v);

	public HRESULT get_disabled(int16* p) mut => VT.[Friend]get_disabled(&this, p);

	public HRESULT get_form(IHTMLFormElement** p) mut => VT.[Friend]get_form(&this, p);

	public HRESULT put_size(int32 v) mut => VT.[Friend]put_size(&this, v);

	public HRESULT get_size(int32* p) mut => VT.[Friend]get_size(&this, p);

	public HRESULT put_maxLength(int32 v) mut => VT.[Friend]put_maxLength(&this, v);

	public HRESULT get_maxLength(int32* p) mut => VT.[Friend]get_maxLength(&this, p);

	public HRESULT select() mut => VT.[Friend]select(&this);

	public HRESULT put_onchange(VARIANT v) mut => VT.[Friend]put_onchange(&this, v);

	public HRESULT get_onchange(VARIANT* p) mut => VT.[Friend]get_onchange(&this, p);

	public HRESULT put_onselect(VARIANT v) mut => VT.[Friend]put_onselect(&this, v);

	public HRESULT get_onselect(VARIANT* p) mut => VT.[Friend]get_onselect(&this, p);

	public HRESULT put_value(BSTR v) mut => VT.[Friend]put_value(&this, v);

	public HRESULT get_value(BSTR* p) mut => VT.[Friend]get_value(&this, p);
}

[CRepr]struct IHTMLOptionButtonElement : IDispatch
{
	public new const Guid IID = .(0x3050f2bc, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_value;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_value;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_type;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_name;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_name;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16 v) put_checked;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16* p) get_checked;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16 v) put_defaultChecked;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16* p) get_defaultChecked;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_onchange;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_onchange;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16 v) put_disabled;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16* p) get_disabled;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16 v) put_status;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16* p) get_status;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16 v) put_indeterminate;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16* p) get_indeterminate;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IHTMLFormElement** p) get_form;
	}


	public HRESULT put_value(BSTR v) mut => VT.[Friend]put_value(&this, v);

	public HRESULT get_value(BSTR* p) mut => VT.[Friend]get_value(&this, p);

	public HRESULT get_type(BSTR* p) mut => VT.[Friend]get_type(&this, p);

	public HRESULT put_name(BSTR v) mut => VT.[Friend]put_name(&this, v);

	public HRESULT get_name(BSTR* p) mut => VT.[Friend]get_name(&this, p);

	public HRESULT put_checked(int16 v) mut => VT.[Friend]put_checked(&this, v);

	public HRESULT get_checked(int16* p) mut => VT.[Friend]get_checked(&this, p);

	public HRESULT put_defaultChecked(int16 v) mut => VT.[Friend]put_defaultChecked(&this, v);

	public HRESULT get_defaultChecked(int16* p) mut => VT.[Friend]get_defaultChecked(&this, p);

	public HRESULT put_onchange(VARIANT v) mut => VT.[Friend]put_onchange(&this, v);

	public HRESULT get_onchange(VARIANT* p) mut => VT.[Friend]get_onchange(&this, p);

	public HRESULT put_disabled(int16 v) mut => VT.[Friend]put_disabled(&this, v);

	public HRESULT get_disabled(int16* p) mut => VT.[Friend]get_disabled(&this, p);

	public HRESULT put_status(int16 v) mut => VT.[Friend]put_status(&this, v);

	public HRESULT get_status(int16* p) mut => VT.[Friend]get_status(&this, p);

	public HRESULT put_indeterminate(int16 v) mut => VT.[Friend]put_indeterminate(&this, v);

	public HRESULT get_indeterminate(int16* p) mut => VT.[Friend]get_indeterminate(&this, p);

	public HRESULT get_form(IHTMLFormElement** p) mut => VT.[Friend]get_form(&this, p);
}

[CRepr]struct IHTMLInputImage : IDispatch
{
	public new const Guid IID = .(0x3050f2c2, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_type;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16 v) put_disabled;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16* p) get_disabled;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_border;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_border;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 v) put_vspace;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* p) get_vspace;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 v) put_hspace;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* p) get_hspace;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_alt;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_alt;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_src;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_src;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_lowsrc;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_lowsrc;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_vrml;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_vrml;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_dynsrc;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_dynsrc;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_readyState;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16* p) get_complete;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_loop;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_loop;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_align;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_align;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_onload;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_onload;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_onerror;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_onerror;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_onabort;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_onabort;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_name;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_name;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 v) put_width;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* p) get_width;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 v) put_height;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* p) get_height;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_start;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_start;
	}


	public HRESULT get_type(BSTR* p) mut => VT.[Friend]get_type(&this, p);

	public HRESULT put_disabled(int16 v) mut => VT.[Friend]put_disabled(&this, v);

	public HRESULT get_disabled(int16* p) mut => VT.[Friend]get_disabled(&this, p);

	public HRESULT put_border(VARIANT v) mut => VT.[Friend]put_border(&this, v);

	public HRESULT get_border(VARIANT* p) mut => VT.[Friend]get_border(&this, p);

	public HRESULT put_vspace(int32 v) mut => VT.[Friend]put_vspace(&this, v);

	public HRESULT get_vspace(int32* p) mut => VT.[Friend]get_vspace(&this, p);

	public HRESULT put_hspace(int32 v) mut => VT.[Friend]put_hspace(&this, v);

	public HRESULT get_hspace(int32* p) mut => VT.[Friend]get_hspace(&this, p);

	public HRESULT put_alt(BSTR v) mut => VT.[Friend]put_alt(&this, v);

	public HRESULT get_alt(BSTR* p) mut => VT.[Friend]get_alt(&this, p);

	public HRESULT put_src(BSTR v) mut => VT.[Friend]put_src(&this, v);

	public HRESULT get_src(BSTR* p) mut => VT.[Friend]get_src(&this, p);

	public HRESULT put_lowsrc(BSTR v) mut => VT.[Friend]put_lowsrc(&this, v);

	public HRESULT get_lowsrc(BSTR* p) mut => VT.[Friend]get_lowsrc(&this, p);

	public HRESULT put_vrml(BSTR v) mut => VT.[Friend]put_vrml(&this, v);

	public HRESULT get_vrml(BSTR* p) mut => VT.[Friend]get_vrml(&this, p);

	public HRESULT put_dynsrc(BSTR v) mut => VT.[Friend]put_dynsrc(&this, v);

	public HRESULT get_dynsrc(BSTR* p) mut => VT.[Friend]get_dynsrc(&this, p);

	public HRESULT get_readyState(BSTR* p) mut => VT.[Friend]get_readyState(&this, p);

	public HRESULT get_complete(int16* p) mut => VT.[Friend]get_complete(&this, p);

	public HRESULT put_loop(VARIANT v) mut => VT.[Friend]put_loop(&this, v);

	public HRESULT get_loop(VARIANT* p) mut => VT.[Friend]get_loop(&this, p);

	public HRESULT put_align(BSTR v) mut => VT.[Friend]put_align(&this, v);

	public HRESULT get_align(BSTR* p) mut => VT.[Friend]get_align(&this, p);

	public HRESULT put_onload(VARIANT v) mut => VT.[Friend]put_onload(&this, v);

	public HRESULT get_onload(VARIANT* p) mut => VT.[Friend]get_onload(&this, p);

	public HRESULT put_onerror(VARIANT v) mut => VT.[Friend]put_onerror(&this, v);

	public HRESULT get_onerror(VARIANT* p) mut => VT.[Friend]get_onerror(&this, p);

	public HRESULT put_onabort(VARIANT v) mut => VT.[Friend]put_onabort(&this, v);

	public HRESULT get_onabort(VARIANT* p) mut => VT.[Friend]get_onabort(&this, p);

	public HRESULT put_name(BSTR v) mut => VT.[Friend]put_name(&this, v);

	public HRESULT get_name(BSTR* p) mut => VT.[Friend]get_name(&this, p);

	public HRESULT put_width(int32 v) mut => VT.[Friend]put_width(&this, v);

	public HRESULT get_width(int32* p) mut => VT.[Friend]get_width(&this, p);

	public HRESULT put_height(int32 v) mut => VT.[Friend]put_height(&this, v);

	public HRESULT get_height(int32* p) mut => VT.[Friend]get_height(&this, p);

	public HRESULT put_start(BSTR v) mut => VT.[Friend]put_start(&this, v);

	public HRESULT get_start(BSTR* p) mut => VT.[Friend]get_start(&this, p);
}

[CRepr]struct IHTMLInputRangeElement : IDispatch
{
	public new const Guid IID = .(0x3050f2d4, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16 v) put_disabled;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16* p) get_disabled;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_type;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_alt;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_alt;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_name;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_name;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_value;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_value;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_min;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_min;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_max;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_max;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_step;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_step;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, double v) put_valueAsNumber;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, double* p) get_valueAsNumber;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 n) stepUp;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 n) stepDown;
	}


	public HRESULT put_disabled(int16 v) mut => VT.[Friend]put_disabled(&this, v);

	public HRESULT get_disabled(int16* p) mut => VT.[Friend]get_disabled(&this, p);

	public HRESULT get_type(BSTR* p) mut => VT.[Friend]get_type(&this, p);

	public HRESULT put_alt(BSTR v) mut => VT.[Friend]put_alt(&this, v);

	public HRESULT get_alt(BSTR* p) mut => VT.[Friend]get_alt(&this, p);

	public HRESULT put_name(BSTR v) mut => VT.[Friend]put_name(&this, v);

	public HRESULT get_name(BSTR* p) mut => VT.[Friend]get_name(&this, p);

	public HRESULT put_value(BSTR v) mut => VT.[Friend]put_value(&this, v);

	public HRESULT get_value(BSTR* p) mut => VT.[Friend]get_value(&this, p);

	public HRESULT put_min(BSTR v) mut => VT.[Friend]put_min(&this, v);

	public HRESULT get_min(BSTR* p) mut => VT.[Friend]get_min(&this, p);

	public HRESULT put_max(BSTR v) mut => VT.[Friend]put_max(&this, v);

	public HRESULT get_max(BSTR* p) mut => VT.[Friend]get_max(&this, p);

	public HRESULT put_step(BSTR v) mut => VT.[Friend]put_step(&this, v);

	public HRESULT get_step(BSTR* p) mut => VT.[Friend]get_step(&this, p);

	public HRESULT put_valueAsNumber(double v) mut => VT.[Friend]put_valueAsNumber(&this, v);

	public HRESULT get_valueAsNumber(double* p) mut => VT.[Friend]get_valueAsNumber(&this, p);

	public HRESULT stepUp(int32 n) mut => VT.[Friend]stepUp(&this, n);

	public HRESULT stepDown(int32 n) mut => VT.[Friend]stepDown(&this, n);
}

[CRepr]struct DispHTMLInputElement : IDispatch
{
	public new const Guid IID = .(0x3050f57d, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
	}

}

[CRepr]struct IHTMLTextAreaElement : IDispatch
{
	public new const Guid IID = .(0x3050f2aa, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_type;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_value;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_value;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_name;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_name;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_status;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_status;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16 v) put_disabled;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16* p) get_disabled;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IHTMLFormElement** p) get_form;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_defaultValue;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_defaultValue;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self) select;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_onchange;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_onchange;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_onselect;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_onselect;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16 v) put_readOnly;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16* p) get_readOnly;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 v) put_rows;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* p) get_rows;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 v) put_cols;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* p) get_cols;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_wrap;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_wrap;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IHTMLTxtRange** range) createTextRange;
	}


	public HRESULT get_type(BSTR* p) mut => VT.[Friend]get_type(&this, p);

	public HRESULT put_value(BSTR v) mut => VT.[Friend]put_value(&this, v);

	public HRESULT get_value(BSTR* p) mut => VT.[Friend]get_value(&this, p);

	public HRESULT put_name(BSTR v) mut => VT.[Friend]put_name(&this, v);

	public HRESULT get_name(BSTR* p) mut => VT.[Friend]get_name(&this, p);

	public HRESULT put_status(VARIANT v) mut => VT.[Friend]put_status(&this, v);

	public HRESULT get_status(VARIANT* p) mut => VT.[Friend]get_status(&this, p);

	public HRESULT put_disabled(int16 v) mut => VT.[Friend]put_disabled(&this, v);

	public HRESULT get_disabled(int16* p) mut => VT.[Friend]get_disabled(&this, p);

	public HRESULT get_form(IHTMLFormElement** p) mut => VT.[Friend]get_form(&this, p);

	public HRESULT put_defaultValue(BSTR v) mut => VT.[Friend]put_defaultValue(&this, v);

	public HRESULT get_defaultValue(BSTR* p) mut => VT.[Friend]get_defaultValue(&this, p);

	public HRESULT select() mut => VT.[Friend]select(&this);

	public HRESULT put_onchange(VARIANT v) mut => VT.[Friend]put_onchange(&this, v);

	public HRESULT get_onchange(VARIANT* p) mut => VT.[Friend]get_onchange(&this, p);

	public HRESULT put_onselect(VARIANT v) mut => VT.[Friend]put_onselect(&this, v);

	public HRESULT get_onselect(VARIANT* p) mut => VT.[Friend]get_onselect(&this, p);

	public HRESULT put_readOnly(int16 v) mut => VT.[Friend]put_readOnly(&this, v);

	public HRESULT get_readOnly(int16* p) mut => VT.[Friend]get_readOnly(&this, p);

	public HRESULT put_rows(int32 v) mut => VT.[Friend]put_rows(&this, v);

	public HRESULT get_rows(int32* p) mut => VT.[Friend]get_rows(&this, p);

	public HRESULT put_cols(int32 v) mut => VT.[Friend]put_cols(&this, v);

	public HRESULT get_cols(int32* p) mut => VT.[Friend]get_cols(&this, p);

	public HRESULT put_wrap(BSTR v) mut => VT.[Friend]put_wrap(&this, v);

	public HRESULT get_wrap(BSTR* p) mut => VT.[Friend]get_wrap(&this, p);

	public HRESULT createTextRange(IHTMLTxtRange** range) mut => VT.[Friend]createTextRange(&this, range);
}

[CRepr]struct IHTMLTextAreaElement2 : IDispatch
{
	public new const Guid IID = .(0x3050f2d3, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 v) put_selectionStart;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* p) get_selectionStart;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 v) put_selectionEnd;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* p) get_selectionEnd;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 start, int32 end) setSelectionRange;
	}


	public HRESULT put_selectionStart(int32 v) mut => VT.[Friend]put_selectionStart(&this, v);

	public HRESULT get_selectionStart(int32* p) mut => VT.[Friend]get_selectionStart(&this, p);

	public HRESULT put_selectionEnd(int32 v) mut => VT.[Friend]put_selectionEnd(&this, v);

	public HRESULT get_selectionEnd(int32* p) mut => VT.[Friend]get_selectionEnd(&this, p);

	public HRESULT setSelectionRange(int32 start, int32 end) mut => VT.[Friend]setSelectionRange(&this, start, end);
}

[CRepr]struct DispHTMLTextAreaElement : IDispatch
{
	public new const Guid IID = .(0x3050f521, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
	}

}

[CRepr]struct DispHTMLRichtextElement : IDispatch
{
	public new const Guid IID = .(0x3050f54d, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
	}

}

[CRepr]struct IHTMLButtonElement : IDispatch
{
	public new const Guid IID = .(0x3050f2bb, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_type;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_value;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_value;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_name;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_name;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_status;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_status;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16 v) put_disabled;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16* p) get_disabled;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IHTMLFormElement** p) get_form;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IHTMLTxtRange** range) createTextRange;
	}


	public HRESULT get_type(BSTR* p) mut => VT.[Friend]get_type(&this, p);

	public HRESULT put_value(BSTR v) mut => VT.[Friend]put_value(&this, v);

	public HRESULT get_value(BSTR* p) mut => VT.[Friend]get_value(&this, p);

	public HRESULT put_name(BSTR v) mut => VT.[Friend]put_name(&this, v);

	public HRESULT get_name(BSTR* p) mut => VT.[Friend]get_name(&this, p);

	public HRESULT put_status(VARIANT v) mut => VT.[Friend]put_status(&this, v);

	public HRESULT get_status(VARIANT* p) mut => VT.[Friend]get_status(&this, p);

	public HRESULT put_disabled(int16 v) mut => VT.[Friend]put_disabled(&this, v);

	public HRESULT get_disabled(int16* p) mut => VT.[Friend]get_disabled(&this, p);

	public HRESULT get_form(IHTMLFormElement** p) mut => VT.[Friend]get_form(&this, p);

	public HRESULT createTextRange(IHTMLTxtRange** range) mut => VT.[Friend]createTextRange(&this, range);
}

[CRepr]struct IHTMLButtonElement2 : IDispatch
{
	public new const Guid IID = .(0x305106f3, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_type;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_type;
	}


	public HRESULT put_type(BSTR v) mut => VT.[Friend]put_type(&this, v);

	public HRESULT get_type(BSTR* p) mut => VT.[Friend]get_type(&this, p);
}

[CRepr]struct DispHTMLButtonElement : IDispatch
{
	public new const Guid IID = .(0x3050f51f, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
	}

}

[CRepr]struct HTMLMarqueeElementEvents2 : IDispatch
{
	public new const Guid IID = .(0x3050f61f, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
	}

}

[CRepr]struct HTMLMarqueeElementEvents : IDispatch
{
	public new const Guid IID = .(0x3050f2b8, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
	}

}

[CRepr]struct IHTMLMarqueeElement : IDispatch
{
	public new const Guid IID = .(0x3050f2b5, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_bgColor;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_bgColor;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 v) put_scrollDelay;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* p) get_scrollDelay;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_direction;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_direction;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_behavior;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_behavior;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 v) put_scrollAmount;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* p) get_scrollAmount;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 v) put_loop;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* p) get_loop;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 v) put_vspace;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* p) get_vspace;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 v) put_hspace;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* p) get_hspace;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_onfinish;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_onfinish;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_onstart;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_onstart;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_onbounce;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_onbounce;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_width;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_width;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_height;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_height;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16 v) put_trueSpeed;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16* p) get_trueSpeed;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self) start;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self) stop;
	}


	public HRESULT put_bgColor(VARIANT v) mut => VT.[Friend]put_bgColor(&this, v);

	public HRESULT get_bgColor(VARIANT* p) mut => VT.[Friend]get_bgColor(&this, p);

	public HRESULT put_scrollDelay(int32 v) mut => VT.[Friend]put_scrollDelay(&this, v);

	public HRESULT get_scrollDelay(int32* p) mut => VT.[Friend]get_scrollDelay(&this, p);

	public HRESULT put_direction(BSTR v) mut => VT.[Friend]put_direction(&this, v);

	public HRESULT get_direction(BSTR* p) mut => VT.[Friend]get_direction(&this, p);

	public HRESULT put_behavior(BSTR v) mut => VT.[Friend]put_behavior(&this, v);

	public HRESULT get_behavior(BSTR* p) mut => VT.[Friend]get_behavior(&this, p);

	public HRESULT put_scrollAmount(int32 v) mut => VT.[Friend]put_scrollAmount(&this, v);

	public HRESULT get_scrollAmount(int32* p) mut => VT.[Friend]get_scrollAmount(&this, p);

	public HRESULT put_loop(int32 v) mut => VT.[Friend]put_loop(&this, v);

	public HRESULT get_loop(int32* p) mut => VT.[Friend]get_loop(&this, p);

	public HRESULT put_vspace(int32 v) mut => VT.[Friend]put_vspace(&this, v);

	public HRESULT get_vspace(int32* p) mut => VT.[Friend]get_vspace(&this, p);

	public HRESULT put_hspace(int32 v) mut => VT.[Friend]put_hspace(&this, v);

	public HRESULT get_hspace(int32* p) mut => VT.[Friend]get_hspace(&this, p);

	public HRESULT put_onfinish(VARIANT v) mut => VT.[Friend]put_onfinish(&this, v);

	public HRESULT get_onfinish(VARIANT* p) mut => VT.[Friend]get_onfinish(&this, p);

	public HRESULT put_onstart(VARIANT v) mut => VT.[Friend]put_onstart(&this, v);

	public HRESULT get_onstart(VARIANT* p) mut => VT.[Friend]get_onstart(&this, p);

	public HRESULT put_onbounce(VARIANT v) mut => VT.[Friend]put_onbounce(&this, v);

	public HRESULT get_onbounce(VARIANT* p) mut => VT.[Friend]get_onbounce(&this, p);

	public HRESULT put_width(VARIANT v) mut => VT.[Friend]put_width(&this, v);

	public HRESULT get_width(VARIANT* p) mut => VT.[Friend]get_width(&this, p);

	public HRESULT put_height(VARIANT v) mut => VT.[Friend]put_height(&this, v);

	public HRESULT get_height(VARIANT* p) mut => VT.[Friend]get_height(&this, p);

	public HRESULT put_trueSpeed(int16 v) mut => VT.[Friend]put_trueSpeed(&this, v);

	public HRESULT get_trueSpeed(int16* p) mut => VT.[Friend]get_trueSpeed(&this, p);

	public HRESULT start() mut => VT.[Friend]start(&this);

	public HRESULT stop() mut => VT.[Friend]stop(&this);
}

[CRepr]struct DispHTMLMarqueeElement : IDispatch
{
	public new const Guid IID = .(0x3050f527, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
	}

}

[CRepr]struct IHTMLHtmlElement : IDispatch
{
	public new const Guid IID = .(0x3050f81c, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_version;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_version;
	}


	public HRESULT put_version(BSTR v) mut => VT.[Friend]put_version(&this, v);

	public HRESULT get_version(BSTR* p) mut => VT.[Friend]get_version(&this, p);
}

[CRepr]struct IHTMLHeadElement : IDispatch
{
	public new const Guid IID = .(0x3050f81d, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_profile;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_profile;
	}


	public HRESULT put_profile(BSTR v) mut => VT.[Friend]put_profile(&this, v);

	public HRESULT get_profile(BSTR* p) mut => VT.[Friend]get_profile(&this, p);
}

[CRepr]struct IHTMLHeadElement2 : IDispatch
{
	public new const Guid IID = .(0x3051042f, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_profile;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_profile;
	}


	public HRESULT put_profile(BSTR v) mut => VT.[Friend]put_profile(&this, v);

	public HRESULT get_profile(BSTR* p) mut => VT.[Friend]get_profile(&this, p);
}

[CRepr]struct IHTMLTitleElement : IDispatch
{
	public new const Guid IID = .(0x3050f322, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_text;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_text;
	}


	public HRESULT put_text(BSTR v) mut => VT.[Friend]put_text(&this, v);

	public HRESULT get_text(BSTR* p) mut => VT.[Friend]get_text(&this, p);
}

[CRepr]struct IHTMLMetaElement : IDispatch
{
	public new const Guid IID = .(0x3050f203, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_httpEquiv;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_httpEquiv;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_content;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_content;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_name;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_name;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_url;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_url;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_charset;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_charset;
	}


	public HRESULT put_httpEquiv(BSTR v) mut => VT.[Friend]put_httpEquiv(&this, v);

	public HRESULT get_httpEquiv(BSTR* p) mut => VT.[Friend]get_httpEquiv(&this, p);

	public HRESULT put_content(BSTR v) mut => VT.[Friend]put_content(&this, v);

	public HRESULT get_content(BSTR* p) mut => VT.[Friend]get_content(&this, p);

	public HRESULT put_name(BSTR v) mut => VT.[Friend]put_name(&this, v);

	public HRESULT get_name(BSTR* p) mut => VT.[Friend]get_name(&this, p);

	public HRESULT put_url(BSTR v) mut => VT.[Friend]put_url(&this, v);

	public HRESULT get_url(BSTR* p) mut => VT.[Friend]get_url(&this, p);

	public HRESULT put_charset(BSTR v) mut => VT.[Friend]put_charset(&this, v);

	public HRESULT get_charset(BSTR* p) mut => VT.[Friend]get_charset(&this, p);
}

[CRepr]struct IHTMLMetaElement2 : IDispatch
{
	public new const Guid IID = .(0x3050f81f, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_scheme;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_scheme;
	}


	public HRESULT put_scheme(BSTR v) mut => VT.[Friend]put_scheme(&this, v);

	public HRESULT get_scheme(BSTR* p) mut => VT.[Friend]get_scheme(&this, p);
}

[CRepr]struct IHTMLMetaElement3 : IDispatch
{
	public new const Guid IID = .(0x30510495, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_url;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_url;
	}


	public HRESULT put_url(BSTR v) mut => VT.[Friend]put_url(&this, v);

	public HRESULT get_url(BSTR* p) mut => VT.[Friend]get_url(&this, p);
}

[CRepr]struct IHTMLBaseElement : IDispatch
{
	public new const Guid IID = .(0x3050f204, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_href;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_href;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_target;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_target;
	}


	public HRESULT put_href(BSTR v) mut => VT.[Friend]put_href(&this, v);

	public HRESULT get_href(BSTR* p) mut => VT.[Friend]get_href(&this, p);

	public HRESULT put_target(BSTR v) mut => VT.[Friend]put_target(&this, v);

	public HRESULT get_target(BSTR* p) mut => VT.[Friend]get_target(&this, p);
}

[CRepr]struct IHTMLBaseElement2 : IDispatch
{
	public new const Guid IID = .(0x30510420, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_href;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_href;
	}


	public HRESULT put_href(BSTR v) mut => VT.[Friend]put_href(&this, v);

	public HRESULT get_href(BSTR* p) mut => VT.[Friend]get_href(&this, p);
}

[CRepr]struct DispHTMLHtmlElement : IDispatch
{
	public new const Guid IID = .(0x3050f560, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
	}

}

[CRepr]struct DispHTMLHeadElement : IDispatch
{
	public new const Guid IID = .(0x3050f561, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
	}

}

[CRepr]struct DispHTMLTitleElement : IDispatch
{
	public new const Guid IID = .(0x3050f516, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
	}

}

[CRepr]struct DispHTMLMetaElement : IDispatch
{
	public new const Guid IID = .(0x3050f517, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
	}

}

[CRepr]struct DispHTMLBaseElement : IDispatch
{
	public new const Guid IID = .(0x3050f518, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
	}

}

[CRepr]struct IHTMLIsIndexElement : IDispatch
{
	public new const Guid IID = .(0x3050f206, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_prompt;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_prompt;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_action;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_action;
	}


	public HRESULT put_prompt(BSTR v) mut => VT.[Friend]put_prompt(&this, v);

	public HRESULT get_prompt(BSTR* p) mut => VT.[Friend]get_prompt(&this, p);

	public HRESULT put_action(BSTR v) mut => VT.[Friend]put_action(&this, v);

	public HRESULT get_action(BSTR* p) mut => VT.[Friend]get_action(&this, p);
}

[CRepr]struct IHTMLIsIndexElement2 : IDispatch
{
	public new const Guid IID = .(0x3050f82f, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IHTMLFormElement** p) get_form;
	}


	public HRESULT get_form(IHTMLFormElement** p) mut => VT.[Friend]get_form(&this, p);
}

[CRepr]struct IHTMLNextIdElement : IDispatch
{
	public new const Guid IID = .(0x3050f207, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_n;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_n;
	}


	public HRESULT put_n(BSTR v) mut => VT.[Friend]put_n(&this, v);

	public HRESULT get_n(BSTR* p) mut => VT.[Friend]get_n(&this, p);
}

[CRepr]struct DispHTMLIsIndexElement : IDispatch
{
	public new const Guid IID = .(0x3050f519, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
	}

}

[CRepr]struct DispHTMLNextIdElement : IDispatch
{
	public new const Guid IID = .(0x3050f51a, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
	}

}

[CRepr]struct IHTMLBaseFontElement : IDispatch
{
	public new const Guid IID = .(0x3050f202, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_color;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_color;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_face;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_face;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 v) put_size;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* p) get_size;
	}


	public HRESULT put_color(VARIANT v) mut => VT.[Friend]put_color(&this, v);

	public HRESULT get_color(VARIANT* p) mut => VT.[Friend]get_color(&this, p);

	public HRESULT put_face(BSTR v) mut => VT.[Friend]put_face(&this, v);

	public HRESULT get_face(BSTR* p) mut => VT.[Friend]get_face(&this, p);

	public HRESULT put_size(int32 v) mut => VT.[Friend]put_size(&this, v);

	public HRESULT get_size(int32* p) mut => VT.[Friend]get_size(&this, p);
}

[CRepr]struct DispHTMLBaseFontElement : IDispatch
{
	public new const Guid IID = .(0x3050f504, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
	}

}

[CRepr]struct IHTMLUnknownElement : IDispatch
{
	public new const Guid IID = .(0x3050f209, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
	}

}

[CRepr]struct DispHTMLUnknownElement : IDispatch
{
	public new const Guid IID = .(0x3050f539, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
	}

}

[CRepr]struct IWebGeolocation : IDispatch
{
	public new const Guid IID = .(0x305107c5, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IDispatch* successCallback, IDispatch* errorCallback, IDispatch* options) getCurrentPosition;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IDispatch* successCallback, IDispatch* errorCallback, IDispatch* options, int32* watchId) watchPosition;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 watchId) clearWatch;
	}


	public HRESULT getCurrentPosition(IDispatch* successCallback, IDispatch* errorCallback, IDispatch* options) mut => VT.[Friend]getCurrentPosition(&this, successCallback, errorCallback, options);

	public HRESULT watchPosition(IDispatch* successCallback, IDispatch* errorCallback, IDispatch* options, int32* watchId) mut => VT.[Friend]watchPosition(&this, successCallback, errorCallback, options, watchId);

	public HRESULT clearWatch(int32 watchId) mut => VT.[Friend]clearWatch(&this, watchId);
}

[CRepr]struct IHTMLMimeTypesCollection : IDispatch
{
	public new const Guid IID = .(0x3050f3fc, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* p) get_length;
	}


	public HRESULT get_length(int32* p) mut => VT.[Friend]get_length(&this, p);
}

[CRepr]struct IHTMLPluginsCollection : IDispatch
{
	public new const Guid IID = .(0x3050f3fd, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* p) get_length;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16 reload) refresh;
	}


	public HRESULT get_length(int32* p) mut => VT.[Friend]get_length(&this, p);

	public HRESULT refresh(int16 reload) mut => VT.[Friend]refresh(&this, reload);
}

[CRepr]struct IOmHistory : IDispatch
{
	public new const Guid IID = .(0xfeceaaa2, 0x8405, 0x11cf, 0x8b, 0xa1, 0x00, 0xaa, 0x00, 0x47, 0x6d, 0xa6);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16* p) get_length;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* pvargdistance) back;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* pvargdistance) forward;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* pvargdistance) go;
	}


	public HRESULT get_length(int16* p) mut => VT.[Friend]get_length(&this, p);

	public HRESULT back(VARIANT* pvargdistance) mut => VT.[Friend]back(&this, pvargdistance);

	public HRESULT forward(VARIANT* pvargdistance) mut => VT.[Friend]forward(&this, pvargdistance);

	public HRESULT go(VARIANT* pvargdistance) mut => VT.[Friend]go(&this, pvargdistance);
}

[CRepr]struct IHTMLOpsProfile : IDispatch
{
	public new const Guid IID = .(0x3050f401, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR name, VARIANT reserved, int16* success) addRequest;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self) clearRequest;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT usage, VARIANT fname, VARIANT domain, VARIANT path, VARIANT expire, VARIANT reserved) doRequest;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR name, BSTR* value) getAttribute;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR name, BSTR value, VARIANT prefs, int16* success) setAttribute;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16* success) commitChanges;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR name, VARIANT reserved, int16* success) addReadRequest;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT usage, VARIANT fname, VARIANT domain, VARIANT path, VARIANT expire, VARIANT reserved) doReadRequest;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16* success) doWriteRequest;
	}


	public HRESULT addRequest(BSTR name, VARIANT reserved, int16* success) mut => VT.[Friend]addRequest(&this, name, reserved, success);

	public HRESULT clearRequest() mut => VT.[Friend]clearRequest(&this);

	public HRESULT doRequest(VARIANT usage, VARIANT fname, VARIANT domain, VARIANT path, VARIANT expire, VARIANT reserved) mut => VT.[Friend]doRequest(&this, usage, fname, domain, path, expire, reserved);

	public HRESULT getAttribute(BSTR name, BSTR* value) mut => VT.[Friend]getAttribute(&this, name, value);

	public HRESULT setAttribute(BSTR name, BSTR value, VARIANT prefs, int16* success) mut => VT.[Friend]setAttribute(&this, name, value, prefs, success);

	public HRESULT commitChanges(int16* success) mut => VT.[Friend]commitChanges(&this, success);

	public HRESULT addReadRequest(BSTR name, VARIANT reserved, int16* success) mut => VT.[Friend]addReadRequest(&this, name, reserved, success);

	public HRESULT doReadRequest(VARIANT usage, VARIANT fname, VARIANT domain, VARIANT path, VARIANT expire, VARIANT reserved) mut => VT.[Friend]doReadRequest(&this, usage, fname, domain, path, expire, reserved);

	public HRESULT doWriteRequest(int16* success) mut => VT.[Friend]doWriteRequest(&this, success);
}

[CRepr]struct IOmNavigator : IDispatch
{
	public new const Guid IID = .(0xfeceaaa5, 0x8405, 0x11cf, 0x8b, 0xa1, 0x00, 0xaa, 0x00, 0x47, 0x6d, 0xa6);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_appCodeName;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_appName;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_appVersion;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_userAgent;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16* enabled) javaEnabled;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16* enabled) taintEnabled;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IHTMLMimeTypesCollection** p) get_mimeTypes;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IHTMLPluginsCollection** p) get_plugins;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16* p) get_cookieEnabled;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IHTMLOpsProfile** p) get_opsProfile;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* string) toString;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_cpuClass;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_systemLanguage;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_browserLanguage;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_userLanguage;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_platform;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_appMinorVersion;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* p) get_connectionSpeed;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16* p) get_onLine;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IHTMLOpsProfile** p) get_userProfile;
	}


	public HRESULT get_appCodeName(BSTR* p) mut => VT.[Friend]get_appCodeName(&this, p);

	public HRESULT get_appName(BSTR* p) mut => VT.[Friend]get_appName(&this, p);

	public HRESULT get_appVersion(BSTR* p) mut => VT.[Friend]get_appVersion(&this, p);

	public HRESULT get_userAgent(BSTR* p) mut => VT.[Friend]get_userAgent(&this, p);

	public HRESULT javaEnabled(int16* enabled) mut => VT.[Friend]javaEnabled(&this, enabled);

	public HRESULT taintEnabled(int16* enabled) mut => VT.[Friend]taintEnabled(&this, enabled);

	public HRESULT get_mimeTypes(IHTMLMimeTypesCollection** p) mut => VT.[Friend]get_mimeTypes(&this, p);

	public HRESULT get_plugins(IHTMLPluginsCollection** p) mut => VT.[Friend]get_plugins(&this, p);

	public HRESULT get_cookieEnabled(int16* p) mut => VT.[Friend]get_cookieEnabled(&this, p);

	public HRESULT get_opsProfile(IHTMLOpsProfile** p) mut => VT.[Friend]get_opsProfile(&this, p);

	public HRESULT toString(BSTR* string) mut => VT.[Friend]toString(&this, string);

	public HRESULT get_cpuClass(BSTR* p) mut => VT.[Friend]get_cpuClass(&this, p);

	public HRESULT get_systemLanguage(BSTR* p) mut => VT.[Friend]get_systemLanguage(&this, p);

	public HRESULT get_browserLanguage(BSTR* p) mut => VT.[Friend]get_browserLanguage(&this, p);

	public HRESULT get_userLanguage(BSTR* p) mut => VT.[Friend]get_userLanguage(&this, p);

	public HRESULT get_platform(BSTR* p) mut => VT.[Friend]get_platform(&this, p);

	public HRESULT get_appMinorVersion(BSTR* p) mut => VT.[Friend]get_appMinorVersion(&this, p);

	public HRESULT get_connectionSpeed(int32* p) mut => VT.[Friend]get_connectionSpeed(&this, p);

	public HRESULT get_onLine(int16* p) mut => VT.[Friend]get_onLine(&this, p);

	public HRESULT get_userProfile(IHTMLOpsProfile** p) mut => VT.[Friend]get_userProfile(&this, p);
}

[CRepr]struct INavigatorGeolocation : IDispatch
{
	public new const Guid IID = .(0x305107cf, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IWebGeolocation** p) get_geolocation;
	}


	public HRESULT get_geolocation(IWebGeolocation** p) mut => VT.[Friend]get_geolocation(&this, p);
}

[CRepr]struct INavigatorDoNotTrack : IDispatch
{
	public new const Guid IID = .(0x30510804, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_msDoNotTrack;
	}


	public HRESULT get_msDoNotTrack(BSTR* p) mut => VT.[Friend]get_msDoNotTrack(&this, p);
}

[CRepr]struct IHTMLLocation : IDispatch
{
	public new const Guid IID = .(0x163bb1e0, 0x6e00, 0x11cf, 0x83, 0x7a, 0x48, 0xdc, 0x04, 0xc1, 0x00, 0x00);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_href;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_href;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_protocol;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_protocol;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_host;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_host;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_hostname;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_hostname;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_port;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_port;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_pathname;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_pathname;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_search;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_search;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_hash;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_hash;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16 flag) reload;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR bstr) replace;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR bstr) assign;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* string) toString;
	}


	public HRESULT put_href(BSTR v) mut => VT.[Friend]put_href(&this, v);

	public HRESULT get_href(BSTR* p) mut => VT.[Friend]get_href(&this, p);

	public HRESULT put_protocol(BSTR v) mut => VT.[Friend]put_protocol(&this, v);

	public HRESULT get_protocol(BSTR* p) mut => VT.[Friend]get_protocol(&this, p);

	public HRESULT put_host(BSTR v) mut => VT.[Friend]put_host(&this, v);

	public HRESULT get_host(BSTR* p) mut => VT.[Friend]get_host(&this, p);

	public HRESULT put_hostname(BSTR v) mut => VT.[Friend]put_hostname(&this, v);

	public HRESULT get_hostname(BSTR* p) mut => VT.[Friend]get_hostname(&this, p);

	public HRESULT put_port(BSTR v) mut => VT.[Friend]put_port(&this, v);

	public HRESULT get_port(BSTR* p) mut => VT.[Friend]get_port(&this, p);

	public HRESULT put_pathname(BSTR v) mut => VT.[Friend]put_pathname(&this, v);

	public HRESULT get_pathname(BSTR* p) mut => VT.[Friend]get_pathname(&this, p);

	public HRESULT put_search(BSTR v) mut => VT.[Friend]put_search(&this, v);

	public HRESULT get_search(BSTR* p) mut => VT.[Friend]get_search(&this, p);

	public HRESULT put_hash(BSTR v) mut => VT.[Friend]put_hash(&this, v);

	public HRESULT get_hash(BSTR* p) mut => VT.[Friend]get_hash(&this, p);

	public HRESULT reload(int16 flag) mut => VT.[Friend]reload(&this, flag);

	public HRESULT replace(BSTR bstr) mut => VT.[Friend]replace(&this, bstr);

	public HRESULT assign(BSTR bstr) mut => VT.[Friend]assign(&this, bstr);

	public HRESULT toString(BSTR* string) mut => VT.[Friend]toString(&this, string);
}

[CRepr]struct DispHTMLHistory : IDispatch
{
	public new const Guid IID = .(0x3050f549, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
	}

}

[CRepr]struct DispHTMLNavigator : IDispatch
{
	public new const Guid IID = .(0x3050f54c, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
	}

}

[CRepr]struct DispHTMLLocation : IDispatch
{
	public new const Guid IID = .(0x3050f54e, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
	}

}

[CRepr]struct DispCPlugins : IDispatch
{
	public new const Guid IID = .(0x3050f54a, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
	}

}

[CRepr]struct IHTMLBookmarkCollection : IDispatch
{
	public new const Guid IID = .(0x3050f4ce, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* p) get_length;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IUnknown** p) get__newEnum;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 index, VARIANT* pVarBookmark) item;
	}


	public HRESULT get_length(int32* p) mut => VT.[Friend]get_length(&this, p);

	public HRESULT get__newEnum(IUnknown** p) mut => VT.[Friend]get__newEnum(&this, p);

	public HRESULT item(int32 index, VARIANT* pVarBookmark) mut => VT.[Friend]item(&this, index, pVarBookmark);
}

[CRepr]struct IHTMLDataTransfer : IDispatch
{
	public new const Guid IID = .(0x3050f4b3, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR format, VARIANT* data, int16* pret) setData;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR format, VARIANT* pvarRet) getData;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR format, int16* pret) clearData;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_dropEffect;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_dropEffect;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_effectAllowed;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_effectAllowed;
	}


	public HRESULT setData(BSTR format, VARIANT* data, int16* pret) mut => VT.[Friend]setData(&this, format, data, pret);

	public HRESULT getData(BSTR format, VARIANT* pvarRet) mut => VT.[Friend]getData(&this, format, pvarRet);

	public HRESULT clearData(BSTR format, int16* pret) mut => VT.[Friend]clearData(&this, format, pret);

	public HRESULT put_dropEffect(BSTR v) mut => VT.[Friend]put_dropEffect(&this, v);

	public HRESULT get_dropEffect(BSTR* p) mut => VT.[Friend]get_dropEffect(&this, p);

	public HRESULT put_effectAllowed(BSTR v) mut => VT.[Friend]put_effectAllowed(&this, v);

	public HRESULT get_effectAllowed(BSTR* p) mut => VT.[Friend]get_effectAllowed(&this, p);
}

[CRepr]struct IHTMLEventObj2 : IDispatch
{
	public new const Guid IID = .(0x3050f48b, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR strAttributeName, VARIANT AttributeValue, int32 lFlags) setAttribute;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR strAttributeName, int32 lFlags, VARIANT* AttributeValue) getAttribute;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR strAttributeName, int32 lFlags, int16* pfSuccess) removeAttribute;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_propertyName;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_propertyName;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IHTMLBookmarkCollection* v) putref_bookmarks;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IHTMLBookmarkCollection** p) get_bookmarks;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IDispatch* v) putref_recordset;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IDispatch** p) get_recordset;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_dataFld;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_dataFld;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IHTMLElementCollection* v) putref_boundElements;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IHTMLElementCollection** p) get_boundElements;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16 v) put_repeat;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16* p) get_repeat;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_srcUrn;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_srcUrn;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IHTMLElement* v) putref_srcElement;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IHTMLElement** p) get_srcElement;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16 v) put_altKey;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16* p) get_altKey;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16 v) put_ctrlKey;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16* p) get_ctrlKey;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16 v) put_shiftKey;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16* p) get_shiftKey;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IHTMLElement* v) putref_fromElement;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IHTMLElement** p) get_fromElement;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IHTMLElement* v) putref_toElement;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IHTMLElement** p) get_toElement;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 v) put_button;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* p) get_button;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_type;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_type;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_qualifier;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_qualifier;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 v) put_reason;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* p) get_reason;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 v) put_x;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* p) get_x;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 v) put_y;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* p) get_y;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 v) put_clientX;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* p) get_clientX;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 v) put_clientY;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* p) get_clientY;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 v) put_offsetX;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* p) get_offsetX;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 v) put_offsetY;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* p) get_offsetY;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 v) put_screenX;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* p) get_screenX;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 v) put_screenY;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* p) get_screenY;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IDispatch* v) putref_srcFilter;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IDispatch** p) get_srcFilter;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IHTMLDataTransfer** p) get_dataTransfer;
	}


	public HRESULT setAttribute(BSTR strAttributeName, VARIANT AttributeValue, int32 lFlags) mut => VT.[Friend]setAttribute(&this, strAttributeName, AttributeValue, lFlags);

	public HRESULT getAttribute(BSTR strAttributeName, int32 lFlags, VARIANT* AttributeValue) mut => VT.[Friend]getAttribute(&this, strAttributeName, lFlags, AttributeValue);

	public HRESULT removeAttribute(BSTR strAttributeName, int32 lFlags, int16* pfSuccess) mut => VT.[Friend]removeAttribute(&this, strAttributeName, lFlags, pfSuccess);

	public HRESULT put_propertyName(BSTR v) mut => VT.[Friend]put_propertyName(&this, v);

	public HRESULT get_propertyName(BSTR* p) mut => VT.[Friend]get_propertyName(&this, p);

	public HRESULT putref_bookmarks(IHTMLBookmarkCollection* v) mut => VT.[Friend]putref_bookmarks(&this, v);

	public HRESULT get_bookmarks(IHTMLBookmarkCollection** p) mut => VT.[Friend]get_bookmarks(&this, p);

	public HRESULT putref_recordset(IDispatch* v) mut => VT.[Friend]putref_recordset(&this, v);

	public HRESULT get_recordset(IDispatch** p) mut => VT.[Friend]get_recordset(&this, p);

	public HRESULT put_dataFld(BSTR v) mut => VT.[Friend]put_dataFld(&this, v);

	public HRESULT get_dataFld(BSTR* p) mut => VT.[Friend]get_dataFld(&this, p);

	public HRESULT putref_boundElements(IHTMLElementCollection* v) mut => VT.[Friend]putref_boundElements(&this, v);

	public HRESULT get_boundElements(IHTMLElementCollection** p) mut => VT.[Friend]get_boundElements(&this, p);

	public HRESULT put_repeat(int16 v) mut => VT.[Friend]put_repeat(&this, v);

	public HRESULT get_repeat(int16* p) mut => VT.[Friend]get_repeat(&this, p);

	public HRESULT put_srcUrn(BSTR v) mut => VT.[Friend]put_srcUrn(&this, v);

	public HRESULT get_srcUrn(BSTR* p) mut => VT.[Friend]get_srcUrn(&this, p);

	public HRESULT putref_srcElement(IHTMLElement* v) mut => VT.[Friend]putref_srcElement(&this, v);

	public HRESULT get_srcElement(IHTMLElement** p) mut => VT.[Friend]get_srcElement(&this, p);

	public HRESULT put_altKey(int16 v) mut => VT.[Friend]put_altKey(&this, v);

	public HRESULT get_altKey(int16* p) mut => VT.[Friend]get_altKey(&this, p);

	public HRESULT put_ctrlKey(int16 v) mut => VT.[Friend]put_ctrlKey(&this, v);

	public HRESULT get_ctrlKey(int16* p) mut => VT.[Friend]get_ctrlKey(&this, p);

	public HRESULT put_shiftKey(int16 v) mut => VT.[Friend]put_shiftKey(&this, v);

	public HRESULT get_shiftKey(int16* p) mut => VT.[Friend]get_shiftKey(&this, p);

	public HRESULT putref_fromElement(IHTMLElement* v) mut => VT.[Friend]putref_fromElement(&this, v);

	public HRESULT get_fromElement(IHTMLElement** p) mut => VT.[Friend]get_fromElement(&this, p);

	public HRESULT putref_toElement(IHTMLElement* v) mut => VT.[Friend]putref_toElement(&this, v);

	public HRESULT get_toElement(IHTMLElement** p) mut => VT.[Friend]get_toElement(&this, p);

	public HRESULT put_button(int32 v) mut => VT.[Friend]put_button(&this, v);

	public HRESULT get_button(int32* p) mut => VT.[Friend]get_button(&this, p);

	public HRESULT put_type(BSTR v) mut => VT.[Friend]put_type(&this, v);

	public HRESULT get_type(BSTR* p) mut => VT.[Friend]get_type(&this, p);

	public HRESULT put_qualifier(BSTR v) mut => VT.[Friend]put_qualifier(&this, v);

	public HRESULT get_qualifier(BSTR* p) mut => VT.[Friend]get_qualifier(&this, p);

	public HRESULT put_reason(int32 v) mut => VT.[Friend]put_reason(&this, v);

	public HRESULT get_reason(int32* p) mut => VT.[Friend]get_reason(&this, p);

	public HRESULT put_x(int32 v) mut => VT.[Friend]put_x(&this, v);

	public HRESULT get_x(int32* p) mut => VT.[Friend]get_x(&this, p);

	public HRESULT put_y(int32 v) mut => VT.[Friend]put_y(&this, v);

	public HRESULT get_y(int32* p) mut => VT.[Friend]get_y(&this, p);

	public HRESULT put_clientX(int32 v) mut => VT.[Friend]put_clientX(&this, v);

	public HRESULT get_clientX(int32* p) mut => VT.[Friend]get_clientX(&this, p);

	public HRESULT put_clientY(int32 v) mut => VT.[Friend]put_clientY(&this, v);

	public HRESULT get_clientY(int32* p) mut => VT.[Friend]get_clientY(&this, p);

	public HRESULT put_offsetX(int32 v) mut => VT.[Friend]put_offsetX(&this, v);

	public HRESULT get_offsetX(int32* p) mut => VT.[Friend]get_offsetX(&this, p);

	public HRESULT put_offsetY(int32 v) mut => VT.[Friend]put_offsetY(&this, v);

	public HRESULT get_offsetY(int32* p) mut => VT.[Friend]get_offsetY(&this, p);

	public HRESULT put_screenX(int32 v) mut => VT.[Friend]put_screenX(&this, v);

	public HRESULT get_screenX(int32* p) mut => VT.[Friend]get_screenX(&this, p);

	public HRESULT put_screenY(int32 v) mut => VT.[Friend]put_screenY(&this, v);

	public HRESULT get_screenY(int32* p) mut => VT.[Friend]get_screenY(&this, p);

	public HRESULT putref_srcFilter(IDispatch* v) mut => VT.[Friend]putref_srcFilter(&this, v);

	public HRESULT get_srcFilter(IDispatch** p) mut => VT.[Friend]get_srcFilter(&this, p);

	public HRESULT get_dataTransfer(IHTMLDataTransfer** p) mut => VT.[Friend]get_dataTransfer(&this, p);
}

[CRepr]struct IHTMLEventObj3 : IDispatch
{
	public new const Guid IID = .(0x3050f680, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16* p) get_contentOverflow;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16 v) put_shiftLeft;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16* p) get_shiftLeft;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16 v) put_altLeft;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16* p) get_altLeft;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16 v) put_ctrlLeft;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16* p) get_ctrlLeft;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int* p) get_imeCompositionChange;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int* p) get_imeNotifyCommand;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int* p) get_imeNotifyData;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int* p) get_imeRequest;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int* p) get_imeRequestData;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int* p) get_keyboardLayout;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* p) get_behaviorCookie;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* p) get_behaviorPart;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_nextPage;
	}


	public HRESULT get_contentOverflow(int16* p) mut => VT.[Friend]get_contentOverflow(&this, p);

	public HRESULT put_shiftLeft(int16 v) mut => VT.[Friend]put_shiftLeft(&this, v);

	public HRESULT get_shiftLeft(int16* p) mut => VT.[Friend]get_shiftLeft(&this, p);

	public HRESULT put_altLeft(int16 v) mut => VT.[Friend]put_altLeft(&this, v);

	public HRESULT get_altLeft(int16* p) mut => VT.[Friend]get_altLeft(&this, p);

	public HRESULT put_ctrlLeft(int16 v) mut => VT.[Friend]put_ctrlLeft(&this, v);

	public HRESULT get_ctrlLeft(int16* p) mut => VT.[Friend]get_ctrlLeft(&this, p);

	public HRESULT get_imeCompositionChange(int* p) mut => VT.[Friend]get_imeCompositionChange(&this, p);

	public HRESULT get_imeNotifyCommand(int* p) mut => VT.[Friend]get_imeNotifyCommand(&this, p);

	public HRESULT get_imeNotifyData(int* p) mut => VT.[Friend]get_imeNotifyData(&this, p);

	public HRESULT get_imeRequest(int* p) mut => VT.[Friend]get_imeRequest(&this, p);

	public HRESULT get_imeRequestData(int* p) mut => VT.[Friend]get_imeRequestData(&this, p);

	public HRESULT get_keyboardLayout(int* p) mut => VT.[Friend]get_keyboardLayout(&this, p);

	public HRESULT get_behaviorCookie(int32* p) mut => VT.[Friend]get_behaviorCookie(&this, p);

	public HRESULT get_behaviorPart(int32* p) mut => VT.[Friend]get_behaviorPart(&this, p);

	public HRESULT get_nextPage(BSTR* p) mut => VT.[Friend]get_nextPage(&this, p);
}

[CRepr]struct IHTMLEventObj4 : IDispatch
{
	public new const Guid IID = .(0x3050f814, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* p) get_wheelDelta;
	}


	public HRESULT get_wheelDelta(int32* p) mut => VT.[Friend]get_wheelDelta(&this, p);
}

[CRepr]struct IHTMLEventObj5 : IDispatch
{
	public new const Guid IID = .(0x30510478, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_url;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_url;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_data;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_data;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IDispatch** p) get_source;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_origin;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_origin;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16 v) put_issession;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16* p) get_issession;
	}


	public HRESULT put_url(BSTR v) mut => VT.[Friend]put_url(&this, v);

	public HRESULT get_url(BSTR* p) mut => VT.[Friend]get_url(&this, p);

	public HRESULT put_data(BSTR v) mut => VT.[Friend]put_data(&this, v);

	public HRESULT get_data(BSTR* p) mut => VT.[Friend]get_data(&this, p);

	public HRESULT get_source(IDispatch** p) mut => VT.[Friend]get_source(&this, p);

	public HRESULT put_origin(BSTR v) mut => VT.[Friend]put_origin(&this, v);

	public HRESULT get_origin(BSTR* p) mut => VT.[Friend]get_origin(&this, p);

	public HRESULT put_issession(int16 v) mut => VT.[Friend]put_issession(&this, v);

	public HRESULT get_issession(int16* p) mut => VT.[Friend]get_issession(&this, p);
}

[CRepr]struct IHTMLEventObj6 : IDispatch
{
	public new const Guid IID = .(0x30510734, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_actionURL;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* p) get_buttonID;
	}


	public HRESULT get_actionURL(BSTR* p) mut => VT.[Friend]get_actionURL(&this, p);

	public HRESULT get_buttonID(int32* p) mut => VT.[Friend]get_buttonID(&this, p);
}

[CRepr]struct DispCEventObj : IDispatch
{
	public new const Guid IID = .(0x3050f558, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
	}

}

[CRepr]struct IHTMLStyleMedia : IDispatch
{
	public new const Guid IID = .(0x3051074b, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_type;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR mediaQuery, int16* matches) matchMedium;
	}


	public HRESULT get_type(BSTR* p) mut => VT.[Friend]get_type(&this, p);

	public HRESULT matchMedium(BSTR mediaQuery, int16* matches) mut => VT.[Friend]matchMedium(&this, mediaQuery, matches);
}

[CRepr]struct DispHTMLStyleMedia : IDispatch
{
	public new const Guid IID = .(0x3059009e, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
	}

}

[CRepr]struct IHTMLFramesCollection2 : IDispatch
{
	public new const Guid IID = .(0x332c4426, 0x26cb, 0x11d0, 0xb4, 0x83, 0x00, 0xc0, 0x4f, 0xd9, 0x01, 0x19);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* pvarIndex, VARIANT* pvarResult) item;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* p) get_length;
	}


	public HRESULT item(VARIANT* pvarIndex, VARIANT* pvarResult) mut => VT.[Friend]item(&this, pvarIndex, pvarResult);

	public HRESULT get_length(int32* p) mut => VT.[Friend]get_length(&this, p);
}

[CRepr]struct HTMLWindowEvents3 : IDispatch
{
	public new const Guid IID = .(0x3050f5a1, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
	}

}

[CRepr]struct HTMLWindowEvents2 : IDispatch
{
	public new const Guid IID = .(0x3050f625, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
	}

}

[CRepr]struct HTMLWindowEvents : IDispatch
{
	public new const Guid IID = .(0x96a0a4e0, 0xd062, 0x11cf, 0x94, 0xb6, 0x00, 0xaa, 0x00, 0x60, 0x27, 0x5c);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
	}

}

[CRepr]struct IHTMLDocument2 : IHTMLDocument
{
	public new const Guid IID = .(0x332c4425, 0x26cb, 0x11d0, 0xb4, 0x83, 0x00, 0xc0, 0x4f, 0xd9, 0x01, 0x19);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IHTMLDocument.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IHTMLElementCollection** p) get_all;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IHTMLElement** p) get_body;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IHTMLElement** p) get_activeElement;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IHTMLElementCollection** p) get_images;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IHTMLElementCollection** p) get_applets;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IHTMLElementCollection** p) get_links;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IHTMLElementCollection** p) get_forms;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IHTMLElementCollection** p) get_anchors;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_title;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_title;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IHTMLElementCollection** p) get_scripts;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_designMode;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_designMode;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IHTMLSelectionObject** p) get_selection;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_readyState;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IHTMLFramesCollection2** p) get_frames;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IHTMLElementCollection** p) get_embeds;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IHTMLElementCollection** p) get_plugins;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_alinkColor;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_alinkColor;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_bgColor;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_bgColor;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_fgColor;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_fgColor;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_linkColor;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_linkColor;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_vlinkColor;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_vlinkColor;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_referrer;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IHTMLLocation** p) get_location;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_lastModified;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_URL;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_URL;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_domain;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_domain;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_cookie;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_cookie;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16 v) put_expando;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16* p) get_expando;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_charset;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_charset;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_defaultCharset;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_defaultCharset;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_mimeType;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_fileSize;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_fileCreatedDate;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_fileModifiedDate;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_fileUpdatedDate;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_security;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_protocol;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_nameProp;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, SAFEARRAY* psarray) write;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, SAFEARRAY* psarray) writeln;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR url, VARIANT name, VARIANT features, VARIANT replace, IDispatch** pomWindowResult) open;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self) close;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self) clear;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR cmdID, int16* pfRet) queryCommandSupported;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR cmdID, int16* pfRet) queryCommandEnabled;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR cmdID, int16* pfRet) queryCommandState;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR cmdID, int16* pfRet) queryCommandIndeterm;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR cmdID, BSTR* pcmdText) queryCommandText;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR cmdID, VARIANT* pcmdValue) queryCommandValue;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR cmdID, int16 showUI, VARIANT value, int16* pfRet) execCommand;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR cmdID, int16* pfRet) execCommandShowHelp;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR eTag, IHTMLElement** newElem) createElement;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_onhelp;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_onhelp;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_onclick;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_onclick;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_ondblclick;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_ondblclick;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_onkeyup;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_onkeyup;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_onkeydown;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_onkeydown;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_onkeypress;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_onkeypress;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_onmouseup;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_onmouseup;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_onmousedown;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_onmousedown;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_onmousemove;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_onmousemove;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_onmouseout;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_onmouseout;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_onmouseover;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_onmouseover;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_onreadystatechange;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_onreadystatechange;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_onafterupdate;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_onafterupdate;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_onrowexit;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_onrowexit;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_onrowenter;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_onrowenter;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_ondragstart;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_ondragstart;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_onselectstart;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_onselectstart;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 x, int32 y, IHTMLElement** elementHit) elementFromPoint;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IHTMLWindow2** p) get_parentWindow;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IHTMLStyleSheetsCollection** p) get_styleSheets;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_onbeforeupdate;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_onbeforeupdate;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_onerrorupdate;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_onerrorupdate;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* String) toString;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR bstrHref, int32 lIndex, IHTMLStyleSheet** ppnewStyleSheet) createStyleSheet;
	}


	public HRESULT get_all(IHTMLElementCollection** p) mut => VT.[Friend]get_all(&this, p);

	public HRESULT get_body(IHTMLElement** p) mut => VT.[Friend]get_body(&this, p);

	public HRESULT get_activeElement(IHTMLElement** p) mut => VT.[Friend]get_activeElement(&this, p);

	public HRESULT get_images(IHTMLElementCollection** p) mut => VT.[Friend]get_images(&this, p);

	public HRESULT get_applets(IHTMLElementCollection** p) mut => VT.[Friend]get_applets(&this, p);

	public HRESULT get_links(IHTMLElementCollection** p) mut => VT.[Friend]get_links(&this, p);

	public HRESULT get_forms(IHTMLElementCollection** p) mut => VT.[Friend]get_forms(&this, p);

	public HRESULT get_anchors(IHTMLElementCollection** p) mut => VT.[Friend]get_anchors(&this, p);

	public HRESULT put_title(BSTR v) mut => VT.[Friend]put_title(&this, v);

	public HRESULT get_title(BSTR* p) mut => VT.[Friend]get_title(&this, p);

	public HRESULT get_scripts(IHTMLElementCollection** p) mut => VT.[Friend]get_scripts(&this, p);

	public HRESULT put_designMode(BSTR v) mut => VT.[Friend]put_designMode(&this, v);

	public HRESULT get_designMode(BSTR* p) mut => VT.[Friend]get_designMode(&this, p);

	public HRESULT get_selection(IHTMLSelectionObject** p) mut => VT.[Friend]get_selection(&this, p);

	public HRESULT get_readyState(BSTR* p) mut => VT.[Friend]get_readyState(&this, p);

	public HRESULT get_frames(IHTMLFramesCollection2** p) mut => VT.[Friend]get_frames(&this, p);

	public HRESULT get_embeds(IHTMLElementCollection** p) mut => VT.[Friend]get_embeds(&this, p);

	public HRESULT get_plugins(IHTMLElementCollection** p) mut => VT.[Friend]get_plugins(&this, p);

	public HRESULT put_alinkColor(VARIANT v) mut => VT.[Friend]put_alinkColor(&this, v);

	public HRESULT get_alinkColor(VARIANT* p) mut => VT.[Friend]get_alinkColor(&this, p);

	public HRESULT put_bgColor(VARIANT v) mut => VT.[Friend]put_bgColor(&this, v);

	public HRESULT get_bgColor(VARIANT* p) mut => VT.[Friend]get_bgColor(&this, p);

	public HRESULT put_fgColor(VARIANT v) mut => VT.[Friend]put_fgColor(&this, v);

	public HRESULT get_fgColor(VARIANT* p) mut => VT.[Friend]get_fgColor(&this, p);

	public HRESULT put_linkColor(VARIANT v) mut => VT.[Friend]put_linkColor(&this, v);

	public HRESULT get_linkColor(VARIANT* p) mut => VT.[Friend]get_linkColor(&this, p);

	public HRESULT put_vlinkColor(VARIANT v) mut => VT.[Friend]put_vlinkColor(&this, v);

	public HRESULT get_vlinkColor(VARIANT* p) mut => VT.[Friend]get_vlinkColor(&this, p);

	public HRESULT get_referrer(BSTR* p) mut => VT.[Friend]get_referrer(&this, p);

	public HRESULT get_location(IHTMLLocation** p) mut => VT.[Friend]get_location(&this, p);

	public HRESULT get_lastModified(BSTR* p) mut => VT.[Friend]get_lastModified(&this, p);

	public HRESULT put_URL(BSTR v) mut => VT.[Friend]put_URL(&this, v);

	public HRESULT get_URL(BSTR* p) mut => VT.[Friend]get_URL(&this, p);

	public HRESULT put_domain(BSTR v) mut => VT.[Friend]put_domain(&this, v);

	public HRESULT get_domain(BSTR* p) mut => VT.[Friend]get_domain(&this, p);

	public HRESULT put_cookie(BSTR v) mut => VT.[Friend]put_cookie(&this, v);

	public HRESULT get_cookie(BSTR* p) mut => VT.[Friend]get_cookie(&this, p);

	public HRESULT put_expando(int16 v) mut => VT.[Friend]put_expando(&this, v);

	public HRESULT get_expando(int16* p) mut => VT.[Friend]get_expando(&this, p);

	public HRESULT put_charset(BSTR v) mut => VT.[Friend]put_charset(&this, v);

	public HRESULT get_charset(BSTR* p) mut => VT.[Friend]get_charset(&this, p);

	public HRESULT put_defaultCharset(BSTR v) mut => VT.[Friend]put_defaultCharset(&this, v);

	public HRESULT get_defaultCharset(BSTR* p) mut => VT.[Friend]get_defaultCharset(&this, p);

	public HRESULT get_mimeType(BSTR* p) mut => VT.[Friend]get_mimeType(&this, p);

	public HRESULT get_fileSize(BSTR* p) mut => VT.[Friend]get_fileSize(&this, p);

	public HRESULT get_fileCreatedDate(BSTR* p) mut => VT.[Friend]get_fileCreatedDate(&this, p);

	public HRESULT get_fileModifiedDate(BSTR* p) mut => VT.[Friend]get_fileModifiedDate(&this, p);

	public HRESULT get_fileUpdatedDate(BSTR* p) mut => VT.[Friend]get_fileUpdatedDate(&this, p);

	public HRESULT get_security(BSTR* p) mut => VT.[Friend]get_security(&this, p);

	public HRESULT get_protocol(BSTR* p) mut => VT.[Friend]get_protocol(&this, p);

	public HRESULT get_nameProp(BSTR* p) mut => VT.[Friend]get_nameProp(&this, p);

	public HRESULT write(SAFEARRAY* psarray) mut => VT.[Friend]write(&this, psarray);

	public HRESULT writeln(SAFEARRAY* psarray) mut => VT.[Friend]writeln(&this, psarray);

	public HRESULT open(BSTR url, VARIANT name, VARIANT features, VARIANT replace, IDispatch** pomWindowResult) mut => VT.[Friend]open(&this, url, name, features, replace, pomWindowResult);

	public HRESULT close() mut => VT.[Friend]close(&this);

	public HRESULT clear() mut => VT.[Friend]clear(&this);

	public HRESULT queryCommandSupported(BSTR cmdID, int16* pfRet) mut => VT.[Friend]queryCommandSupported(&this, cmdID, pfRet);

	public HRESULT queryCommandEnabled(BSTR cmdID, int16* pfRet) mut => VT.[Friend]queryCommandEnabled(&this, cmdID, pfRet);

	public HRESULT queryCommandState(BSTR cmdID, int16* pfRet) mut => VT.[Friend]queryCommandState(&this, cmdID, pfRet);

	public HRESULT queryCommandIndeterm(BSTR cmdID, int16* pfRet) mut => VT.[Friend]queryCommandIndeterm(&this, cmdID, pfRet);

	public HRESULT queryCommandText(BSTR cmdID, BSTR* pcmdText) mut => VT.[Friend]queryCommandText(&this, cmdID, pcmdText);

	public HRESULT queryCommandValue(BSTR cmdID, VARIANT* pcmdValue) mut => VT.[Friend]queryCommandValue(&this, cmdID, pcmdValue);

	public HRESULT execCommand(BSTR cmdID, int16 showUI, VARIANT value, int16* pfRet) mut => VT.[Friend]execCommand(&this, cmdID, showUI, value, pfRet);

	public HRESULT execCommandShowHelp(BSTR cmdID, int16* pfRet) mut => VT.[Friend]execCommandShowHelp(&this, cmdID, pfRet);

	public HRESULT createElement(BSTR eTag, IHTMLElement** newElem) mut => VT.[Friend]createElement(&this, eTag, newElem);

	public HRESULT put_onhelp(VARIANT v) mut => VT.[Friend]put_onhelp(&this, v);

	public HRESULT get_onhelp(VARIANT* p) mut => VT.[Friend]get_onhelp(&this, p);

	public HRESULT put_onclick(VARIANT v) mut => VT.[Friend]put_onclick(&this, v);

	public HRESULT get_onclick(VARIANT* p) mut => VT.[Friend]get_onclick(&this, p);

	public HRESULT put_ondblclick(VARIANT v) mut => VT.[Friend]put_ondblclick(&this, v);

	public HRESULT get_ondblclick(VARIANT* p) mut => VT.[Friend]get_ondblclick(&this, p);

	public HRESULT put_onkeyup(VARIANT v) mut => VT.[Friend]put_onkeyup(&this, v);

	public HRESULT get_onkeyup(VARIANT* p) mut => VT.[Friend]get_onkeyup(&this, p);

	public HRESULT put_onkeydown(VARIANT v) mut => VT.[Friend]put_onkeydown(&this, v);

	public HRESULT get_onkeydown(VARIANT* p) mut => VT.[Friend]get_onkeydown(&this, p);

	public HRESULT put_onkeypress(VARIANT v) mut => VT.[Friend]put_onkeypress(&this, v);

	public HRESULT get_onkeypress(VARIANT* p) mut => VT.[Friend]get_onkeypress(&this, p);

	public HRESULT put_onmouseup(VARIANT v) mut => VT.[Friend]put_onmouseup(&this, v);

	public HRESULT get_onmouseup(VARIANT* p) mut => VT.[Friend]get_onmouseup(&this, p);

	public HRESULT put_onmousedown(VARIANT v) mut => VT.[Friend]put_onmousedown(&this, v);

	public HRESULT get_onmousedown(VARIANT* p) mut => VT.[Friend]get_onmousedown(&this, p);

	public HRESULT put_onmousemove(VARIANT v) mut => VT.[Friend]put_onmousemove(&this, v);

	public HRESULT get_onmousemove(VARIANT* p) mut => VT.[Friend]get_onmousemove(&this, p);

	public HRESULT put_onmouseout(VARIANT v) mut => VT.[Friend]put_onmouseout(&this, v);

	public HRESULT get_onmouseout(VARIANT* p) mut => VT.[Friend]get_onmouseout(&this, p);

	public HRESULT put_onmouseover(VARIANT v) mut => VT.[Friend]put_onmouseover(&this, v);

	public HRESULT get_onmouseover(VARIANT* p) mut => VT.[Friend]get_onmouseover(&this, p);

	public HRESULT put_onreadystatechange(VARIANT v) mut => VT.[Friend]put_onreadystatechange(&this, v);

	public HRESULT get_onreadystatechange(VARIANT* p) mut => VT.[Friend]get_onreadystatechange(&this, p);

	public HRESULT put_onafterupdate(VARIANT v) mut => VT.[Friend]put_onafterupdate(&this, v);

	public HRESULT get_onafterupdate(VARIANT* p) mut => VT.[Friend]get_onafterupdate(&this, p);

	public HRESULT put_onrowexit(VARIANT v) mut => VT.[Friend]put_onrowexit(&this, v);

	public HRESULT get_onrowexit(VARIANT* p) mut => VT.[Friend]get_onrowexit(&this, p);

	public HRESULT put_onrowenter(VARIANT v) mut => VT.[Friend]put_onrowenter(&this, v);

	public HRESULT get_onrowenter(VARIANT* p) mut => VT.[Friend]get_onrowenter(&this, p);

	public HRESULT put_ondragstart(VARIANT v) mut => VT.[Friend]put_ondragstart(&this, v);

	public HRESULT get_ondragstart(VARIANT* p) mut => VT.[Friend]get_ondragstart(&this, p);

	public HRESULT put_onselectstart(VARIANT v) mut => VT.[Friend]put_onselectstart(&this, v);

	public HRESULT get_onselectstart(VARIANT* p) mut => VT.[Friend]get_onselectstart(&this, p);

	public HRESULT elementFromPoint(int32 x, int32 y, IHTMLElement** elementHit) mut => VT.[Friend]elementFromPoint(&this, x, y, elementHit);

	public HRESULT get_parentWindow(IHTMLWindow2** p) mut => VT.[Friend]get_parentWindow(&this, p);

	public HRESULT get_styleSheets(IHTMLStyleSheetsCollection** p) mut => VT.[Friend]get_styleSheets(&this, p);

	public HRESULT put_onbeforeupdate(VARIANT v) mut => VT.[Friend]put_onbeforeupdate(&this, v);

	public HRESULT get_onbeforeupdate(VARIANT* p) mut => VT.[Friend]get_onbeforeupdate(&this, p);

	public HRESULT put_onerrorupdate(VARIANT v) mut => VT.[Friend]put_onerrorupdate(&this, v);

	public HRESULT get_onerrorupdate(VARIANT* p) mut => VT.[Friend]get_onerrorupdate(&this, p);

	public HRESULT toString(BSTR* String) mut => VT.[Friend]toString(&this, String);

	public HRESULT createStyleSheet(BSTR bstrHref, int32 lIndex, IHTMLStyleSheet** ppnewStyleSheet) mut => VT.[Friend]createStyleSheet(&this, bstrHref, lIndex, ppnewStyleSheet);
}

[CRepr]struct IHTMLWindow2 : IHTMLFramesCollection2
{
	public new const Guid IID = .(0x332c4427, 0x26cb, 0x11d0, 0xb4, 0x83, 0x00, 0xc0, 0x4f, 0xd9, 0x01, 0x19);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IHTMLFramesCollection2.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IHTMLFramesCollection2** p) get_frames;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_defaultStatus;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_defaultStatus;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_status;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_status;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR expression, int32 msec, VARIANT* language, int32* timerID) setTimeout;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 timerID) clearTimeout;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR message) alert;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR message, int16* confirmed) confirm;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR message, BSTR defstr, VARIANT* textdata) prompt;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IHTMLImageElementFactory** p) get_Image;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IHTMLLocation** p) get_location;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IOmHistory** p) get_history;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self) close;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_opener;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_opener;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IOmNavigator** p) get_navigator;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_name;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_name;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IHTMLWindow2** p) get_parent;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR url, BSTR name, BSTR features, int16 replace, IHTMLWindow2** pomWindowResult) open;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IHTMLWindow2** p) get_self;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IHTMLWindow2** p) get_top;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IHTMLWindow2** p) get_window;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR url) navigate;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_onfocus;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_onfocus;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_onblur;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_onblur;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_onload;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_onload;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_onbeforeunload;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_onbeforeunload;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_onunload;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_onunload;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_onhelp;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_onhelp;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_onerror;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_onerror;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_onresize;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_onresize;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_onscroll;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_onscroll;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IHTMLDocument2** p) get_document;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IHTMLEventObj** p) get_event;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IUnknown** p) get__newEnum;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR dialog, VARIANT* varArgIn, VARIANT* varOptions, VARIANT* varArgOut) showModalDialog;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR helpURL, VARIANT helpArg, BSTR features) showHelp;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IHTMLScreen** p) get_screen;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IHTMLOptionElementFactory** p) get_Option;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self) focus;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16* p) get_closed;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self) blur;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 x, int32 y) scroll;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IOmNavigator** p) get_clientInformation;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR expression, int32 msec, VARIANT* language, int32* timerID) setInterval;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 timerID) clearInterval;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_offscreenBuffering;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_offscreenBuffering;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR code, BSTR language, VARIANT* pvarRet) execScript;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* String) toString;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 x, int32 y) scrollBy;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 x, int32 y) scrollTo;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 x, int32 y) moveTo;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 x, int32 y) moveBy;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 x, int32 y) resizeTo;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 x, int32 y) resizeBy;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IDispatch** p) get_external;
	}


	public HRESULT get_frames(IHTMLFramesCollection2** p) mut => VT.[Friend]get_frames(&this, p);

	public HRESULT put_defaultStatus(BSTR v) mut => VT.[Friend]put_defaultStatus(&this, v);

	public HRESULT get_defaultStatus(BSTR* p) mut => VT.[Friend]get_defaultStatus(&this, p);

	public HRESULT put_status(BSTR v) mut => VT.[Friend]put_status(&this, v);

	public HRESULT get_status(BSTR* p) mut => VT.[Friend]get_status(&this, p);

	public HRESULT setTimeout(BSTR expression, int32 msec, VARIANT* language, int32* timerID) mut => VT.[Friend]setTimeout(&this, expression, msec, language, timerID);

	public HRESULT clearTimeout(int32 timerID) mut => VT.[Friend]clearTimeout(&this, timerID);

	public HRESULT alert(BSTR message) mut => VT.[Friend]alert(&this, message);

	public HRESULT confirm(BSTR message, int16* confirmed) mut => VT.[Friend]confirm(&this, message, confirmed);

	public HRESULT prompt(BSTR message, BSTR defstr, VARIANT* textdata) mut => VT.[Friend]prompt(&this, message, defstr, textdata);

	public HRESULT get_Image(IHTMLImageElementFactory** p) mut => VT.[Friend]get_Image(&this, p);

	public HRESULT get_location(IHTMLLocation** p) mut => VT.[Friend]get_location(&this, p);

	public HRESULT get_history(IOmHistory** p) mut => VT.[Friend]get_history(&this, p);

	public HRESULT close() mut => VT.[Friend]close(&this);

	public HRESULT put_opener(VARIANT v) mut => VT.[Friend]put_opener(&this, v);

	public HRESULT get_opener(VARIANT* p) mut => VT.[Friend]get_opener(&this, p);

	public HRESULT get_navigator(IOmNavigator** p) mut => VT.[Friend]get_navigator(&this, p);

	public HRESULT put_name(BSTR v) mut => VT.[Friend]put_name(&this, v);

	public HRESULT get_name(BSTR* p) mut => VT.[Friend]get_name(&this, p);

	public HRESULT get_parent(IHTMLWindow2** p) mut => VT.[Friend]get_parent(&this, p);

	public HRESULT open(BSTR url, BSTR name, BSTR features, int16 replace, IHTMLWindow2** pomWindowResult) mut => VT.[Friend]open(&this, url, name, features, replace, pomWindowResult);

	public HRESULT get_self(IHTMLWindow2** p) mut => VT.[Friend]get_self(&this, p);

	public HRESULT get_top(IHTMLWindow2** p) mut => VT.[Friend]get_top(&this, p);

	public HRESULT get_window(IHTMLWindow2** p) mut => VT.[Friend]get_window(&this, p);

	public HRESULT navigate(BSTR url) mut => VT.[Friend]navigate(&this, url);

	public HRESULT put_onfocus(VARIANT v) mut => VT.[Friend]put_onfocus(&this, v);

	public HRESULT get_onfocus(VARIANT* p) mut => VT.[Friend]get_onfocus(&this, p);

	public HRESULT put_onblur(VARIANT v) mut => VT.[Friend]put_onblur(&this, v);

	public HRESULT get_onblur(VARIANT* p) mut => VT.[Friend]get_onblur(&this, p);

	public HRESULT put_onload(VARIANT v) mut => VT.[Friend]put_onload(&this, v);

	public HRESULT get_onload(VARIANT* p) mut => VT.[Friend]get_onload(&this, p);

	public HRESULT put_onbeforeunload(VARIANT v) mut => VT.[Friend]put_onbeforeunload(&this, v);

	public HRESULT get_onbeforeunload(VARIANT* p) mut => VT.[Friend]get_onbeforeunload(&this, p);

	public HRESULT put_onunload(VARIANT v) mut => VT.[Friend]put_onunload(&this, v);

	public HRESULT get_onunload(VARIANT* p) mut => VT.[Friend]get_onunload(&this, p);

	public HRESULT put_onhelp(VARIANT v) mut => VT.[Friend]put_onhelp(&this, v);

	public HRESULT get_onhelp(VARIANT* p) mut => VT.[Friend]get_onhelp(&this, p);

	public HRESULT put_onerror(VARIANT v) mut => VT.[Friend]put_onerror(&this, v);

	public HRESULT get_onerror(VARIANT* p) mut => VT.[Friend]get_onerror(&this, p);

	public HRESULT put_onresize(VARIANT v) mut => VT.[Friend]put_onresize(&this, v);

	public HRESULT get_onresize(VARIANT* p) mut => VT.[Friend]get_onresize(&this, p);

	public HRESULT put_onscroll(VARIANT v) mut => VT.[Friend]put_onscroll(&this, v);

	public HRESULT get_onscroll(VARIANT* p) mut => VT.[Friend]get_onscroll(&this, p);

	public HRESULT get_document(IHTMLDocument2** p) mut => VT.[Friend]get_document(&this, p);

	public HRESULT get_event(IHTMLEventObj** p) mut => VT.[Friend]get_event(&this, p);

	public HRESULT get__newEnum(IUnknown** p) mut => VT.[Friend]get__newEnum(&this, p);

	public HRESULT showModalDialog(BSTR dialog, VARIANT* varArgIn, VARIANT* varOptions, VARIANT* varArgOut) mut => VT.[Friend]showModalDialog(&this, dialog, varArgIn, varOptions, varArgOut);

	public HRESULT showHelp(BSTR helpURL, VARIANT helpArg, BSTR features) mut => VT.[Friend]showHelp(&this, helpURL, helpArg, features);

	public HRESULT get_screen(IHTMLScreen** p) mut => VT.[Friend]get_screen(&this, p);

	public HRESULT get_Option(IHTMLOptionElementFactory** p) mut => VT.[Friend]get_Option(&this, p);

	public HRESULT focus() mut => VT.[Friend]focus(&this);

	public HRESULT get_closed(int16* p) mut => VT.[Friend]get_closed(&this, p);

	public HRESULT blur() mut => VT.[Friend]blur(&this);

	public HRESULT scroll(int32 x, int32 y) mut => VT.[Friend]scroll(&this, x, y);

	public HRESULT get_clientInformation(IOmNavigator** p) mut => VT.[Friend]get_clientInformation(&this, p);

	public HRESULT setInterval(BSTR expression, int32 msec, VARIANT* language, int32* timerID) mut => VT.[Friend]setInterval(&this, expression, msec, language, timerID);

	public HRESULT clearInterval(int32 timerID) mut => VT.[Friend]clearInterval(&this, timerID);

	public HRESULT put_offscreenBuffering(VARIANT v) mut => VT.[Friend]put_offscreenBuffering(&this, v);

	public HRESULT get_offscreenBuffering(VARIANT* p) mut => VT.[Friend]get_offscreenBuffering(&this, p);

	public HRESULT execScript(BSTR code, BSTR language, VARIANT* pvarRet) mut => VT.[Friend]execScript(&this, code, language, pvarRet);

	public HRESULT toString(BSTR* String) mut => VT.[Friend]toString(&this, String);

	public HRESULT scrollBy(int32 x, int32 y) mut => VT.[Friend]scrollBy(&this, x, y);

	public HRESULT scrollTo(int32 x, int32 y) mut => VT.[Friend]scrollTo(&this, x, y);

	public HRESULT moveTo(int32 x, int32 y) mut => VT.[Friend]moveTo(&this, x, y);

	public HRESULT moveBy(int32 x, int32 y) mut => VT.[Friend]moveBy(&this, x, y);

	public HRESULT resizeTo(int32 x, int32 y) mut => VT.[Friend]resizeTo(&this, x, y);

	public HRESULT resizeBy(int32 x, int32 y) mut => VT.[Friend]resizeBy(&this, x, y);

	public HRESULT get_external(IDispatch** p) mut => VT.[Friend]get_external(&this, p);
}

[CRepr]struct IHTMLWindow3 : IDispatch
{
	public new const Guid IID = .(0x3050f4ae, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* p) get_screenLeft;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* p) get_screenTop;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR event, IDispatch* pDisp, int16* pfResult) attachEvent;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR event, IDispatch* pDisp) detachEvent;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* expression, int32 msec, VARIANT* language, int32* timerID) setTimeout;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* expression, int32 msec, VARIANT* language, int32* timerID) setInterval;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self) print;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_onbeforeprint;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_onbeforeprint;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_onafterprint;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_onafterprint;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IHTMLDataTransfer** p) get_clipboardData;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR url, VARIANT* varArgIn, VARIANT* options, IHTMLWindow2** pDialog) showModelessDialog;
	}


	public HRESULT get_screenLeft(int32* p) mut => VT.[Friend]get_screenLeft(&this, p);

	public HRESULT get_screenTop(int32* p) mut => VT.[Friend]get_screenTop(&this, p);

	public HRESULT attachEvent(BSTR event, IDispatch* pDisp, int16* pfResult) mut => VT.[Friend]attachEvent(&this, event, pDisp, pfResult);

	public HRESULT detachEvent(BSTR event, IDispatch* pDisp) mut => VT.[Friend]detachEvent(&this, event, pDisp);

	public HRESULT setTimeout(VARIANT* expression, int32 msec, VARIANT* language, int32* timerID) mut => VT.[Friend]setTimeout(&this, expression, msec, language, timerID);

	public HRESULT setInterval(VARIANT* expression, int32 msec, VARIANT* language, int32* timerID) mut => VT.[Friend]setInterval(&this, expression, msec, language, timerID);

	public HRESULT print() mut => VT.[Friend]print(&this);

	public HRESULT put_onbeforeprint(VARIANT v) mut => VT.[Friend]put_onbeforeprint(&this, v);

	public HRESULT get_onbeforeprint(VARIANT* p) mut => VT.[Friend]get_onbeforeprint(&this, p);

	public HRESULT put_onafterprint(VARIANT v) mut => VT.[Friend]put_onafterprint(&this, v);

	public HRESULT get_onafterprint(VARIANT* p) mut => VT.[Friend]get_onafterprint(&this, p);

	public HRESULT get_clipboardData(IHTMLDataTransfer** p) mut => VT.[Friend]get_clipboardData(&this, p);

	public HRESULT showModelessDialog(BSTR url, VARIANT* varArgIn, VARIANT* options, IHTMLWindow2** pDialog) mut => VT.[Friend]showModelessDialog(&this, url, varArgIn, options, pDialog);
}

[CRepr]struct IHTMLFrameBase : IDispatch
{
	public new const Guid IID = .(0x3050f311, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_src;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_src;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_name;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_name;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_border;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_border;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_frameBorder;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_frameBorder;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_frameSpacing;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_frameSpacing;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_marginWidth;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_marginWidth;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_marginHeight;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_marginHeight;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16 v) put_noResize;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16* p) get_noResize;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_scrolling;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_scrolling;
	}


	public HRESULT put_src(BSTR v) mut => VT.[Friend]put_src(&this, v);

	public HRESULT get_src(BSTR* p) mut => VT.[Friend]get_src(&this, p);

	public HRESULT put_name(BSTR v) mut => VT.[Friend]put_name(&this, v);

	public HRESULT get_name(BSTR* p) mut => VT.[Friend]get_name(&this, p);

	public HRESULT put_border(VARIANT v) mut => VT.[Friend]put_border(&this, v);

	public HRESULT get_border(VARIANT* p) mut => VT.[Friend]get_border(&this, p);

	public HRESULT put_frameBorder(BSTR v) mut => VT.[Friend]put_frameBorder(&this, v);

	public HRESULT get_frameBorder(BSTR* p) mut => VT.[Friend]get_frameBorder(&this, p);

	public HRESULT put_frameSpacing(VARIANT v) mut => VT.[Friend]put_frameSpacing(&this, v);

	public HRESULT get_frameSpacing(VARIANT* p) mut => VT.[Friend]get_frameSpacing(&this, p);

	public HRESULT put_marginWidth(VARIANT v) mut => VT.[Friend]put_marginWidth(&this, v);

	public HRESULT get_marginWidth(VARIANT* p) mut => VT.[Friend]get_marginWidth(&this, p);

	public HRESULT put_marginHeight(VARIANT v) mut => VT.[Friend]put_marginHeight(&this, v);

	public HRESULT get_marginHeight(VARIANT* p) mut => VT.[Friend]get_marginHeight(&this, p);

	public HRESULT put_noResize(int16 v) mut => VT.[Friend]put_noResize(&this, v);

	public HRESULT get_noResize(int16* p) mut => VT.[Friend]get_noResize(&this, p);

	public HRESULT put_scrolling(BSTR v) mut => VT.[Friend]put_scrolling(&this, v);

	public HRESULT get_scrolling(BSTR* p) mut => VT.[Friend]get_scrolling(&this, p);
}

[CRepr]struct IHTMLStorage : IDispatch
{
	public new const Guid IID = .(0x30510474, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* p) get_length;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* p) get_remainingSpace;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 lIndex, BSTR* __MIDL__IHTMLStorage0000) key;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR bstrKey, VARIANT* __MIDL__IHTMLStorage0001) getItem;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR bstrKey, BSTR bstrValue) setItem;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR bstrKey) removeItem;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self) clear;
	}


	public HRESULT get_length(int32* p) mut => VT.[Friend]get_length(&this, p);

	public HRESULT get_remainingSpace(int32* p) mut => VT.[Friend]get_remainingSpace(&this, p);

	public HRESULT key(int32 lIndex, BSTR* __MIDL__IHTMLStorage0000) mut => VT.[Friend]key(&this, lIndex, __MIDL__IHTMLStorage0000);

	public HRESULT getItem(BSTR bstrKey, VARIANT* __MIDL__IHTMLStorage0001) mut => VT.[Friend]getItem(&this, bstrKey, __MIDL__IHTMLStorage0001);

	public HRESULT setItem(BSTR bstrKey, BSTR bstrValue) mut => VT.[Friend]setItem(&this, bstrKey, bstrValue);

	public HRESULT removeItem(BSTR bstrKey) mut => VT.[Friend]removeItem(&this, bstrKey);

	public HRESULT clear() mut => VT.[Friend]clear(&this);
}

[CRepr]struct IHTMLPerformance : IDispatch
{
	public new const Guid IID = .(0x3051074e, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IHTMLPerformanceNavigation** p) get_navigation;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IHTMLPerformanceTiming** p) get_timing;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* string) toString;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* pVar) toJSON;
	}


	public HRESULT get_navigation(IHTMLPerformanceNavigation** p) mut => VT.[Friend]get_navigation(&this, p);

	public HRESULT get_timing(IHTMLPerformanceTiming** p) mut => VT.[Friend]get_timing(&this, p);

	public HRESULT toString(BSTR* string) mut => VT.[Friend]toString(&this, string);

	public HRESULT toJSON(VARIANT* pVar) mut => VT.[Friend]toJSON(&this, pVar);
}

[CRepr]struct IHTMLApplicationCache : IDispatch
{
	public new const Guid IID = .(0x30510828, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* p) get_status;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_onchecking;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_onchecking;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_onerror;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_onerror;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_onnoupdate;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_onnoupdate;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_ondownloading;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_ondownloading;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_onprogress;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_onprogress;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_onupdateready;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_onupdateready;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_oncached;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_oncached;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_onobsolete;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_onobsolete;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self) update;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self) swapCache;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self) abort;
	}


	public HRESULT get_status(int32* p) mut => VT.[Friend]get_status(&this, p);

	public HRESULT put_onchecking(VARIANT v) mut => VT.[Friend]put_onchecking(&this, v);

	public HRESULT get_onchecking(VARIANT* p) mut => VT.[Friend]get_onchecking(&this, p);

	public HRESULT put_onerror(VARIANT v) mut => VT.[Friend]put_onerror(&this, v);

	public HRESULT get_onerror(VARIANT* p) mut => VT.[Friend]get_onerror(&this, p);

	public HRESULT put_onnoupdate(VARIANT v) mut => VT.[Friend]put_onnoupdate(&this, v);

	public HRESULT get_onnoupdate(VARIANT* p) mut => VT.[Friend]get_onnoupdate(&this, p);

	public HRESULT put_ondownloading(VARIANT v) mut => VT.[Friend]put_ondownloading(&this, v);

	public HRESULT get_ondownloading(VARIANT* p) mut => VT.[Friend]get_ondownloading(&this, p);

	public HRESULT put_onprogress(VARIANT v) mut => VT.[Friend]put_onprogress(&this, v);

	public HRESULT get_onprogress(VARIANT* p) mut => VT.[Friend]get_onprogress(&this, p);

	public HRESULT put_onupdateready(VARIANT v) mut => VT.[Friend]put_onupdateready(&this, v);

	public HRESULT get_onupdateready(VARIANT* p) mut => VT.[Friend]get_onupdateready(&this, p);

	public HRESULT put_oncached(VARIANT v) mut => VT.[Friend]put_oncached(&this, v);

	public HRESULT get_oncached(VARIANT* p) mut => VT.[Friend]get_oncached(&this, p);

	public HRESULT put_onobsolete(VARIANT v) mut => VT.[Friend]put_onobsolete(&this, v);

	public HRESULT get_onobsolete(VARIANT* p) mut => VT.[Friend]get_onobsolete(&this, p);

	public HRESULT update() mut => VT.[Friend]update(&this);

	public HRESULT swapCache() mut => VT.[Friend]swapCache(&this);

	public HRESULT abort() mut => VT.[Friend]abort(&this);
}

[CRepr]struct IHTMLScreen : IDispatch
{
	public new const Guid IID = .(0x3050f35c, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* p) get_colorDepth;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 v) put_bufferDepth;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* p) get_bufferDepth;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* p) get_width;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* p) get_height;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 v) put_updateInterval;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* p) get_updateInterval;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* p) get_availHeight;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* p) get_availWidth;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16* p) get_fontSmoothingEnabled;
	}


	public HRESULT get_colorDepth(int32* p) mut => VT.[Friend]get_colorDepth(&this, p);

	public HRESULT put_bufferDepth(int32 v) mut => VT.[Friend]put_bufferDepth(&this, v);

	public HRESULT get_bufferDepth(int32* p) mut => VT.[Friend]get_bufferDepth(&this, p);

	public HRESULT get_width(int32* p) mut => VT.[Friend]get_width(&this, p);

	public HRESULT get_height(int32* p) mut => VT.[Friend]get_height(&this, p);

	public HRESULT put_updateInterval(int32 v) mut => VT.[Friend]put_updateInterval(&this, v);

	public HRESULT get_updateInterval(int32* p) mut => VT.[Friend]get_updateInterval(&this, p);

	public HRESULT get_availHeight(int32* p) mut => VT.[Friend]get_availHeight(&this, p);

	public HRESULT get_availWidth(int32* p) mut => VT.[Friend]get_availWidth(&this, p);

	public HRESULT get_fontSmoothingEnabled(int16* p) mut => VT.[Friend]get_fontSmoothingEnabled(&this, p);
}

[CRepr]struct IHTMLScreen2 : IDispatch
{
	public new const Guid IID = .(0x3050f84a, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* p) get_logicalXDPI;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* p) get_logicalYDPI;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* p) get_deviceXDPI;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* p) get_deviceYDPI;
	}


	public HRESULT get_logicalXDPI(int32* p) mut => VT.[Friend]get_logicalXDPI(&this, p);

	public HRESULT get_logicalYDPI(int32* p) mut => VT.[Friend]get_logicalYDPI(&this, p);

	public HRESULT get_deviceXDPI(int32* p) mut => VT.[Friend]get_deviceXDPI(&this, p);

	public HRESULT get_deviceYDPI(int32* p) mut => VT.[Friend]get_deviceYDPI(&this, p);
}

[CRepr]struct IHTMLScreen3 : IDispatch
{
	public new const Guid IID = .(0x305104a1, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* p) get_systemXDPI;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* p) get_systemYDPI;
	}


	public HRESULT get_systemXDPI(int32* p) mut => VT.[Friend]get_systemXDPI(&this, p);

	public HRESULT get_systemYDPI(int32* p) mut => VT.[Friend]get_systemYDPI(&this, p);
}

[CRepr]struct IHTMLScreen4 : IDispatch
{
	public new const Guid IID = .(0x3051076b, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* p) get_pixelDepth;
	}


	public HRESULT get_pixelDepth(int32* p) mut => VT.[Friend]get_pixelDepth(&this, p);
}

[CRepr]struct IHTMLWindow4 : IDispatch
{
	public new const Guid IID = .(0x3050f6cf, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* varArgIn, IDispatch** ppPopup) createPopup;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IHTMLFrameBase** p) get_frameElement;
	}


	public HRESULT createPopup(VARIANT* varArgIn, IDispatch** ppPopup) mut => VT.[Friend]createPopup(&this, varArgIn, ppPopup);

	public HRESULT get_frameElement(IHTMLFrameBase** p) mut => VT.[Friend]get_frameElement(&this, p);
}

[CRepr]struct IHTMLWindow5 : IDispatch
{
	public new const Guid IID = .(0x3051040e, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_XMLHttpRequest;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_XMLHttpRequest;
	}


	public HRESULT put_XMLHttpRequest(VARIANT v) mut => VT.[Friend]put_XMLHttpRequest(&this, v);

	public HRESULT get_XMLHttpRequest(VARIANT* p) mut => VT.[Friend]get_XMLHttpRequest(&this, p);
}

[CRepr]struct IHTMLWindow6 : IDispatch
{
	public new const Guid IID = .(0x30510453, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_XDomainRequest;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_XDomainRequest;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IHTMLStorage** p) get_sessionStorage;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IHTMLStorage** p) get_localStorage;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_onhashchange;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_onhashchange;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* p) get_maxConnectionsPerServer;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR msg, VARIANT targetOrigin) postMessage;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR bstrHTML, BSTR* pbstrStaticHTML) toStaticHTML;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_onmessage;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_onmessage;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR bstrProfilerMarkName) msWriteProfilerMark;
	}


	public HRESULT put_XDomainRequest(VARIANT v) mut => VT.[Friend]put_XDomainRequest(&this, v);

	public HRESULT get_XDomainRequest(VARIANT* p) mut => VT.[Friend]get_XDomainRequest(&this, p);

	public HRESULT get_sessionStorage(IHTMLStorage** p) mut => VT.[Friend]get_sessionStorage(&this, p);

	public HRESULT get_localStorage(IHTMLStorage** p) mut => VT.[Friend]get_localStorage(&this, p);

	public HRESULT put_onhashchange(VARIANT v) mut => VT.[Friend]put_onhashchange(&this, v);

	public HRESULT get_onhashchange(VARIANT* p) mut => VT.[Friend]get_onhashchange(&this, p);

	public HRESULT get_maxConnectionsPerServer(int32* p) mut => VT.[Friend]get_maxConnectionsPerServer(&this, p);

	public HRESULT postMessage(BSTR msg, VARIANT targetOrigin) mut => VT.[Friend]postMessage(&this, msg, targetOrigin);

	public HRESULT toStaticHTML(BSTR bstrHTML, BSTR* pbstrStaticHTML) mut => VT.[Friend]toStaticHTML(&this, bstrHTML, pbstrStaticHTML);

	public HRESULT put_onmessage(VARIANT v) mut => VT.[Friend]put_onmessage(&this, v);

	public HRESULT get_onmessage(VARIANT* p) mut => VT.[Friend]get_onmessage(&this, p);

	public HRESULT msWriteProfilerMark(BSTR bstrProfilerMarkName) mut => VT.[Friend]msWriteProfilerMark(&this, bstrProfilerMarkName);
}

[CRepr]struct IHTMLWindow7 : IDispatch
{
	public new const Guid IID = .(0x305104b7, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IHTMLSelection** ppIHTMLSelection) getSelection;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IHTMLDOMNode* varArgIn, BSTR bstrPseudoElt, IHTMLCSSStyleDeclaration** ppComputedStyle) getComputedStyle;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IHTMLStyleMedia** p) get_styleMedia;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_performance;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_performance;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* p) get_innerWidth;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* p) get_innerHeight;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* p) get_pageXOffset;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* p) get_pageYOffset;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* p) get_screenX;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* p) get_screenY;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* p) get_outerWidth;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* p) get_outerHeight;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_onabort;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_onabort;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_oncanplay;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_oncanplay;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_oncanplaythrough;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_oncanplaythrough;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_onchange;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_onchange;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_onclick;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_onclick;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_oncontextmenu;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_oncontextmenu;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_ondblclick;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_ondblclick;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_ondrag;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_ondrag;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_ondragend;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_ondragend;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_ondragenter;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_ondragenter;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_ondragleave;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_ondragleave;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_ondragover;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_ondragover;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_ondragstart;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_ondragstart;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_ondrop;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_ondrop;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_ondurationchange;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_ondurationchange;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_onfocusin;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_onfocusin;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_onfocusout;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_onfocusout;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_oninput;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_oninput;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_onemptied;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_onemptied;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_onended;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_onended;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_onkeydown;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_onkeydown;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_onkeypress;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_onkeypress;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_onkeyup;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_onkeyup;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_onloadeddata;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_onloadeddata;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_onloadedmetadata;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_onloadedmetadata;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_onloadstart;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_onloadstart;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_onmousedown;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_onmousedown;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_onmouseenter;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_onmouseenter;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_onmouseleave;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_onmouseleave;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_onmousemove;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_onmousemove;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_onmouseout;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_onmouseout;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_onmouseover;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_onmouseover;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_onmouseup;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_onmouseup;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_onmousewheel;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_onmousewheel;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_onoffline;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_onoffline;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_ononline;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_ononline;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_onprogress;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_onprogress;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_onratechange;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_onratechange;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_onreadystatechange;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_onreadystatechange;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_onreset;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_onreset;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_onseeked;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_onseeked;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_onseeking;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_onseeking;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_onselect;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_onselect;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_onstalled;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_onstalled;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_onstorage;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_onstorage;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_onsubmit;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_onsubmit;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_onsuspend;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_onsuspend;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_ontimeupdate;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_ontimeupdate;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_onpause;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_onpause;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_onplay;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_onplay;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_onplaying;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_onplaying;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_onvolumechange;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_onvolumechange;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_onwaiting;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_onwaiting;
	}


	public HRESULT getSelection(IHTMLSelection** ppIHTMLSelection) mut => VT.[Friend]getSelection(&this, ppIHTMLSelection);

	public HRESULT getComputedStyle(IHTMLDOMNode* varArgIn, BSTR bstrPseudoElt, IHTMLCSSStyleDeclaration** ppComputedStyle) mut => VT.[Friend]getComputedStyle(&this, varArgIn, bstrPseudoElt, ppComputedStyle);

	public HRESULT get_styleMedia(IHTMLStyleMedia** p) mut => VT.[Friend]get_styleMedia(&this, p);

	public HRESULT put_performance(VARIANT v) mut => VT.[Friend]put_performance(&this, v);

	public HRESULT get_performance(VARIANT* p) mut => VT.[Friend]get_performance(&this, p);

	public HRESULT get_innerWidth(int32* p) mut => VT.[Friend]get_innerWidth(&this, p);

	public HRESULT get_innerHeight(int32* p) mut => VT.[Friend]get_innerHeight(&this, p);

	public HRESULT get_pageXOffset(int32* p) mut => VT.[Friend]get_pageXOffset(&this, p);

	public HRESULT get_pageYOffset(int32* p) mut => VT.[Friend]get_pageYOffset(&this, p);

	public HRESULT get_screenX(int32* p) mut => VT.[Friend]get_screenX(&this, p);

	public HRESULT get_screenY(int32* p) mut => VT.[Friend]get_screenY(&this, p);

	public HRESULT get_outerWidth(int32* p) mut => VT.[Friend]get_outerWidth(&this, p);

	public HRESULT get_outerHeight(int32* p) mut => VT.[Friend]get_outerHeight(&this, p);

	public HRESULT put_onabort(VARIANT v) mut => VT.[Friend]put_onabort(&this, v);

	public HRESULT get_onabort(VARIANT* p) mut => VT.[Friend]get_onabort(&this, p);

	public HRESULT put_oncanplay(VARIANT v) mut => VT.[Friend]put_oncanplay(&this, v);

	public HRESULT get_oncanplay(VARIANT* p) mut => VT.[Friend]get_oncanplay(&this, p);

	public HRESULT put_oncanplaythrough(VARIANT v) mut => VT.[Friend]put_oncanplaythrough(&this, v);

	public HRESULT get_oncanplaythrough(VARIANT* p) mut => VT.[Friend]get_oncanplaythrough(&this, p);

	public HRESULT put_onchange(VARIANT v) mut => VT.[Friend]put_onchange(&this, v);

	public HRESULT get_onchange(VARIANT* p) mut => VT.[Friend]get_onchange(&this, p);

	public HRESULT put_onclick(VARIANT v) mut => VT.[Friend]put_onclick(&this, v);

	public HRESULT get_onclick(VARIANT* p) mut => VT.[Friend]get_onclick(&this, p);

	public HRESULT put_oncontextmenu(VARIANT v) mut => VT.[Friend]put_oncontextmenu(&this, v);

	public HRESULT get_oncontextmenu(VARIANT* p) mut => VT.[Friend]get_oncontextmenu(&this, p);

	public HRESULT put_ondblclick(VARIANT v) mut => VT.[Friend]put_ondblclick(&this, v);

	public HRESULT get_ondblclick(VARIANT* p) mut => VT.[Friend]get_ondblclick(&this, p);

	public HRESULT put_ondrag(VARIANT v) mut => VT.[Friend]put_ondrag(&this, v);

	public HRESULT get_ondrag(VARIANT* p) mut => VT.[Friend]get_ondrag(&this, p);

	public HRESULT put_ondragend(VARIANT v) mut => VT.[Friend]put_ondragend(&this, v);

	public HRESULT get_ondragend(VARIANT* p) mut => VT.[Friend]get_ondragend(&this, p);

	public HRESULT put_ondragenter(VARIANT v) mut => VT.[Friend]put_ondragenter(&this, v);

	public HRESULT get_ondragenter(VARIANT* p) mut => VT.[Friend]get_ondragenter(&this, p);

	public HRESULT put_ondragleave(VARIANT v) mut => VT.[Friend]put_ondragleave(&this, v);

	public HRESULT get_ondragleave(VARIANT* p) mut => VT.[Friend]get_ondragleave(&this, p);

	public HRESULT put_ondragover(VARIANT v) mut => VT.[Friend]put_ondragover(&this, v);

	public HRESULT get_ondragover(VARIANT* p) mut => VT.[Friend]get_ondragover(&this, p);

	public HRESULT put_ondragstart(VARIANT v) mut => VT.[Friend]put_ondragstart(&this, v);

	public HRESULT get_ondragstart(VARIANT* p) mut => VT.[Friend]get_ondragstart(&this, p);

	public HRESULT put_ondrop(VARIANT v) mut => VT.[Friend]put_ondrop(&this, v);

	public HRESULT get_ondrop(VARIANT* p) mut => VT.[Friend]get_ondrop(&this, p);

	public HRESULT put_ondurationchange(VARIANT v) mut => VT.[Friend]put_ondurationchange(&this, v);

	public HRESULT get_ondurationchange(VARIANT* p) mut => VT.[Friend]get_ondurationchange(&this, p);

	public HRESULT put_onfocusin(VARIANT v) mut => VT.[Friend]put_onfocusin(&this, v);

	public HRESULT get_onfocusin(VARIANT* p) mut => VT.[Friend]get_onfocusin(&this, p);

	public HRESULT put_onfocusout(VARIANT v) mut => VT.[Friend]put_onfocusout(&this, v);

	public HRESULT get_onfocusout(VARIANT* p) mut => VT.[Friend]get_onfocusout(&this, p);

	public HRESULT put_oninput(VARIANT v) mut => VT.[Friend]put_oninput(&this, v);

	public HRESULT get_oninput(VARIANT* p) mut => VT.[Friend]get_oninput(&this, p);

	public HRESULT put_onemptied(VARIANT v) mut => VT.[Friend]put_onemptied(&this, v);

	public HRESULT get_onemptied(VARIANT* p) mut => VT.[Friend]get_onemptied(&this, p);

	public HRESULT put_onended(VARIANT v) mut => VT.[Friend]put_onended(&this, v);

	public HRESULT get_onended(VARIANT* p) mut => VT.[Friend]get_onended(&this, p);

	public HRESULT put_onkeydown(VARIANT v) mut => VT.[Friend]put_onkeydown(&this, v);

	public HRESULT get_onkeydown(VARIANT* p) mut => VT.[Friend]get_onkeydown(&this, p);

	public HRESULT put_onkeypress(VARIANT v) mut => VT.[Friend]put_onkeypress(&this, v);

	public HRESULT get_onkeypress(VARIANT* p) mut => VT.[Friend]get_onkeypress(&this, p);

	public HRESULT put_onkeyup(VARIANT v) mut => VT.[Friend]put_onkeyup(&this, v);

	public HRESULT get_onkeyup(VARIANT* p) mut => VT.[Friend]get_onkeyup(&this, p);

	public HRESULT put_onloadeddata(VARIANT v) mut => VT.[Friend]put_onloadeddata(&this, v);

	public HRESULT get_onloadeddata(VARIANT* p) mut => VT.[Friend]get_onloadeddata(&this, p);

	public HRESULT put_onloadedmetadata(VARIANT v) mut => VT.[Friend]put_onloadedmetadata(&this, v);

	public HRESULT get_onloadedmetadata(VARIANT* p) mut => VT.[Friend]get_onloadedmetadata(&this, p);

	public HRESULT put_onloadstart(VARIANT v) mut => VT.[Friend]put_onloadstart(&this, v);

	public HRESULT get_onloadstart(VARIANT* p) mut => VT.[Friend]get_onloadstart(&this, p);

	public HRESULT put_onmousedown(VARIANT v) mut => VT.[Friend]put_onmousedown(&this, v);

	public HRESULT get_onmousedown(VARIANT* p) mut => VT.[Friend]get_onmousedown(&this, p);

	public HRESULT put_onmouseenter(VARIANT v) mut => VT.[Friend]put_onmouseenter(&this, v);

	public HRESULT get_onmouseenter(VARIANT* p) mut => VT.[Friend]get_onmouseenter(&this, p);

	public HRESULT put_onmouseleave(VARIANT v) mut => VT.[Friend]put_onmouseleave(&this, v);

	public HRESULT get_onmouseleave(VARIANT* p) mut => VT.[Friend]get_onmouseleave(&this, p);

	public HRESULT put_onmousemove(VARIANT v) mut => VT.[Friend]put_onmousemove(&this, v);

	public HRESULT get_onmousemove(VARIANT* p) mut => VT.[Friend]get_onmousemove(&this, p);

	public HRESULT put_onmouseout(VARIANT v) mut => VT.[Friend]put_onmouseout(&this, v);

	public HRESULT get_onmouseout(VARIANT* p) mut => VT.[Friend]get_onmouseout(&this, p);

	public HRESULT put_onmouseover(VARIANT v) mut => VT.[Friend]put_onmouseover(&this, v);

	public HRESULT get_onmouseover(VARIANT* p) mut => VT.[Friend]get_onmouseover(&this, p);

	public HRESULT put_onmouseup(VARIANT v) mut => VT.[Friend]put_onmouseup(&this, v);

	public HRESULT get_onmouseup(VARIANT* p) mut => VT.[Friend]get_onmouseup(&this, p);

	public HRESULT put_onmousewheel(VARIANT v) mut => VT.[Friend]put_onmousewheel(&this, v);

	public HRESULT get_onmousewheel(VARIANT* p) mut => VT.[Friend]get_onmousewheel(&this, p);

	public HRESULT put_onoffline(VARIANT v) mut => VT.[Friend]put_onoffline(&this, v);

	public HRESULT get_onoffline(VARIANT* p) mut => VT.[Friend]get_onoffline(&this, p);

	public HRESULT put_ononline(VARIANT v) mut => VT.[Friend]put_ononline(&this, v);

	public HRESULT get_ononline(VARIANT* p) mut => VT.[Friend]get_ononline(&this, p);

	public HRESULT put_onprogress(VARIANT v) mut => VT.[Friend]put_onprogress(&this, v);

	public HRESULT get_onprogress(VARIANT* p) mut => VT.[Friend]get_onprogress(&this, p);

	public HRESULT put_onratechange(VARIANT v) mut => VT.[Friend]put_onratechange(&this, v);

	public HRESULT get_onratechange(VARIANT* p) mut => VT.[Friend]get_onratechange(&this, p);

	public HRESULT put_onreadystatechange(VARIANT v) mut => VT.[Friend]put_onreadystatechange(&this, v);

	public HRESULT get_onreadystatechange(VARIANT* p) mut => VT.[Friend]get_onreadystatechange(&this, p);

	public HRESULT put_onreset(VARIANT v) mut => VT.[Friend]put_onreset(&this, v);

	public HRESULT get_onreset(VARIANT* p) mut => VT.[Friend]get_onreset(&this, p);

	public HRESULT put_onseeked(VARIANT v) mut => VT.[Friend]put_onseeked(&this, v);

	public HRESULT get_onseeked(VARIANT* p) mut => VT.[Friend]get_onseeked(&this, p);

	public HRESULT put_onseeking(VARIANT v) mut => VT.[Friend]put_onseeking(&this, v);

	public HRESULT get_onseeking(VARIANT* p) mut => VT.[Friend]get_onseeking(&this, p);

	public HRESULT put_onselect(VARIANT v) mut => VT.[Friend]put_onselect(&this, v);

	public HRESULT get_onselect(VARIANT* p) mut => VT.[Friend]get_onselect(&this, p);

	public HRESULT put_onstalled(VARIANT v) mut => VT.[Friend]put_onstalled(&this, v);

	public HRESULT get_onstalled(VARIANT* p) mut => VT.[Friend]get_onstalled(&this, p);

	public HRESULT put_onstorage(VARIANT v) mut => VT.[Friend]put_onstorage(&this, v);

	public HRESULT get_onstorage(VARIANT* p) mut => VT.[Friend]get_onstorage(&this, p);

	public HRESULT put_onsubmit(VARIANT v) mut => VT.[Friend]put_onsubmit(&this, v);

	public HRESULT get_onsubmit(VARIANT* p) mut => VT.[Friend]get_onsubmit(&this, p);

	public HRESULT put_onsuspend(VARIANT v) mut => VT.[Friend]put_onsuspend(&this, v);

	public HRESULT get_onsuspend(VARIANT* p) mut => VT.[Friend]get_onsuspend(&this, p);

	public HRESULT put_ontimeupdate(VARIANT v) mut => VT.[Friend]put_ontimeupdate(&this, v);

	public HRESULT get_ontimeupdate(VARIANT* p) mut => VT.[Friend]get_ontimeupdate(&this, p);

	public HRESULT put_onpause(VARIANT v) mut => VT.[Friend]put_onpause(&this, v);

	public HRESULT get_onpause(VARIANT* p) mut => VT.[Friend]get_onpause(&this, p);

	public HRESULT put_onplay(VARIANT v) mut => VT.[Friend]put_onplay(&this, v);

	public HRESULT get_onplay(VARIANT* p) mut => VT.[Friend]get_onplay(&this, p);

	public HRESULT put_onplaying(VARIANT v) mut => VT.[Friend]put_onplaying(&this, v);

	public HRESULT get_onplaying(VARIANT* p) mut => VT.[Friend]get_onplaying(&this, p);

	public HRESULT put_onvolumechange(VARIANT v) mut => VT.[Friend]put_onvolumechange(&this, v);

	public HRESULT get_onvolumechange(VARIANT* p) mut => VT.[Friend]get_onvolumechange(&this, p);

	public HRESULT put_onwaiting(VARIANT v) mut => VT.[Friend]put_onwaiting(&this, v);

	public HRESULT get_onwaiting(VARIANT* p) mut => VT.[Friend]get_onwaiting(&this, p);
}

[CRepr]struct IHTMLWindow8 : IDispatch
{
	public new const Guid IID = .(0x305107ab, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_onmspointerdown;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_onmspointerdown;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_onmspointermove;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_onmspointermove;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_onmspointerup;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_onmspointerup;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_onmspointerover;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_onmspointerover;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_onmspointerout;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_onmspointerout;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_onmspointercancel;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_onmspointercancel;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_onmspointerhover;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_onmspointerhover;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_onmsgesturestart;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_onmsgesturestart;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_onmsgesturechange;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_onmsgesturechange;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_onmsgestureend;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_onmsgestureend;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_onmsgesturehold;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_onmsgesturehold;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_onmsgesturetap;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_onmsgesturetap;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_onmsgesturedoubletap;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_onmsgesturedoubletap;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_onmsinertiastart;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_onmsinertiastart;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IHTMLApplicationCache** p) get_applicationCache;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_onpopstate;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_onpopstate;
	}


	public HRESULT put_onmspointerdown(VARIANT v) mut => VT.[Friend]put_onmspointerdown(&this, v);

	public HRESULT get_onmspointerdown(VARIANT* p) mut => VT.[Friend]get_onmspointerdown(&this, p);

	public HRESULT put_onmspointermove(VARIANT v) mut => VT.[Friend]put_onmspointermove(&this, v);

	public HRESULT get_onmspointermove(VARIANT* p) mut => VT.[Friend]get_onmspointermove(&this, p);

	public HRESULT put_onmspointerup(VARIANT v) mut => VT.[Friend]put_onmspointerup(&this, v);

	public HRESULT get_onmspointerup(VARIANT* p) mut => VT.[Friend]get_onmspointerup(&this, p);

	public HRESULT put_onmspointerover(VARIANT v) mut => VT.[Friend]put_onmspointerover(&this, v);

	public HRESULT get_onmspointerover(VARIANT* p) mut => VT.[Friend]get_onmspointerover(&this, p);

	public HRESULT put_onmspointerout(VARIANT v) mut => VT.[Friend]put_onmspointerout(&this, v);

	public HRESULT get_onmspointerout(VARIANT* p) mut => VT.[Friend]get_onmspointerout(&this, p);

	public HRESULT put_onmspointercancel(VARIANT v) mut => VT.[Friend]put_onmspointercancel(&this, v);

	public HRESULT get_onmspointercancel(VARIANT* p) mut => VT.[Friend]get_onmspointercancel(&this, p);

	public HRESULT put_onmspointerhover(VARIANT v) mut => VT.[Friend]put_onmspointerhover(&this, v);

	public HRESULT get_onmspointerhover(VARIANT* p) mut => VT.[Friend]get_onmspointerhover(&this, p);

	public HRESULT put_onmsgesturestart(VARIANT v) mut => VT.[Friend]put_onmsgesturestart(&this, v);

	public HRESULT get_onmsgesturestart(VARIANT* p) mut => VT.[Friend]get_onmsgesturestart(&this, p);

	public HRESULT put_onmsgesturechange(VARIANT v) mut => VT.[Friend]put_onmsgesturechange(&this, v);

	public HRESULT get_onmsgesturechange(VARIANT* p) mut => VT.[Friend]get_onmsgesturechange(&this, p);

	public HRESULT put_onmsgestureend(VARIANT v) mut => VT.[Friend]put_onmsgestureend(&this, v);

	public HRESULT get_onmsgestureend(VARIANT* p) mut => VT.[Friend]get_onmsgestureend(&this, p);

	public HRESULT put_onmsgesturehold(VARIANT v) mut => VT.[Friend]put_onmsgesturehold(&this, v);

	public HRESULT get_onmsgesturehold(VARIANT* p) mut => VT.[Friend]get_onmsgesturehold(&this, p);

	public HRESULT put_onmsgesturetap(VARIANT v) mut => VT.[Friend]put_onmsgesturetap(&this, v);

	public HRESULT get_onmsgesturetap(VARIANT* p) mut => VT.[Friend]get_onmsgesturetap(&this, p);

	public HRESULT put_onmsgesturedoubletap(VARIANT v) mut => VT.[Friend]put_onmsgesturedoubletap(&this, v);

	public HRESULT get_onmsgesturedoubletap(VARIANT* p) mut => VT.[Friend]get_onmsgesturedoubletap(&this, p);

	public HRESULT put_onmsinertiastart(VARIANT v) mut => VT.[Friend]put_onmsinertiastart(&this, v);

	public HRESULT get_onmsinertiastart(VARIANT* p) mut => VT.[Friend]get_onmsinertiastart(&this, p);

	public HRESULT get_applicationCache(IHTMLApplicationCache** p) mut => VT.[Friend]get_applicationCache(&this, p);

	public HRESULT put_onpopstate(VARIANT v) mut => VT.[Friend]put_onpopstate(&this, v);

	public HRESULT get_onpopstate(VARIANT* p) mut => VT.[Friend]get_onpopstate(&this, p);
}

[CRepr]struct DispHTMLScreen : IDispatch
{
	public new const Guid IID = .(0x3050f591, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
	}

}

[CRepr]struct DispHTMLWindow2 : IDispatch
{
	public new const Guid IID = .(0x3050f55d, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
	}

}

[CRepr]struct DispHTMLWindowProxy : IDispatch
{
	public new const Guid IID = .(0x3050f55e, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
	}

}

[CRepr]struct IHTMLDocumentCompatibleInfo : IDispatch
{
	public new const Guid IID = .(0x3051041a, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_userAgent;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_version;
	}


	public HRESULT get_userAgent(BSTR* p) mut => VT.[Friend]get_userAgent(&this, p);

	public HRESULT get_version(BSTR* p) mut => VT.[Friend]get_version(&this, p);
}

[CRepr]struct IHTMLDocumentCompatibleInfoCollection : IDispatch
{
	public new const Guid IID = .(0x30510418, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* p) get_length;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 index, IHTMLDocumentCompatibleInfo** compatibleInfo) item;
	}


	public HRESULT get_length(int32* p) mut => VT.[Friend]get_length(&this, p);

	public HRESULT item(int32 index, IHTMLDocumentCompatibleInfo** compatibleInfo) mut => VT.[Friend]item(&this, index, compatibleInfo);
}

[CRepr]struct DispHTMLDocumentCompatibleInfo : IDispatch
{
	public new const Guid IID = .(0x3050f53e, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
	}

}

[CRepr]struct DispHTMLDocumentCompatibleInfoCollection : IDispatch
{
	public new const Guid IID = .(0x3050f53f, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
	}

}

[CRepr]struct HTMLDocumentEvents4 : IDispatch
{
	public new const Guid IID = .(0x30510737, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
	}

}

[CRepr]struct HTMLDocumentEvents3 : IDispatch
{
	public new const Guid IID = .(0x3050f5a0, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
	}

}

[CRepr]struct HTMLDocumentEvents2 : IDispatch
{
	public new const Guid IID = .(0x3050f613, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
	}

}

[CRepr]struct HTMLDocumentEvents : IDispatch
{
	public new const Guid IID = .(0x3050f260, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
	}

}

[CRepr]struct ISVGSVGElement : IDispatch
{
	public new const Guid IID = .(0x305104e7, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, ISVGAnimatedLength* v) putref_x;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, ISVGAnimatedLength** p) get_x;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, ISVGAnimatedLength* v) putref_y;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, ISVGAnimatedLength** p) get_y;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, ISVGAnimatedLength* v) putref_width;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, ISVGAnimatedLength** p) get_width;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, ISVGAnimatedLength* v) putref_height;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, ISVGAnimatedLength** p) get_height;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_contentScriptType;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_contentScriptType;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_contentStyleType;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_contentStyleType;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, ISVGRect* v) putref_viewport;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, ISVGRect** p) get_viewport;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, float v) put_pixelUnitToMillimeterX;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, float* p) get_pixelUnitToMillimeterX;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, float v) put_pixelUnitToMillimeterY;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, float* p) get_pixelUnitToMillimeterY;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, float v) put_screenPixelToMillimeterX;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, float* p) get_screenPixelToMillimeterX;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, float v) put_screenPixelToMillimeterY;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, float* p) get_screenPixelToMillimeterY;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16 v) put_useCurrentView;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16* p) get_useCurrentView;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, ISVGViewSpec* v) putref_currentView;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, ISVGViewSpec** p) get_currentView;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, float v) put_currentScale;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, float* p) get_currentScale;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, ISVGPoint* v) putref_currentTranslate;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, ISVGPoint** p) get_currentTranslate;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32 maxWaitMilliseconds, uint32* pResult) suspendRedraw;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32 suspendHandeID) unsuspendRedraw;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self) unsuspendRedrawAll;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self) forceRedraw;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self) pauseAnimations;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self) unpauseAnimations;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16* pResult) animationsPaused;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, float* pResult) getCurrentTime;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, float seconds) setCurrentTime;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, ISVGRect* rect, ISVGElement* referenceElement, VARIANT* pResult) getIntersectionList;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, ISVGRect* rect, ISVGElement* referenceElement, VARIANT* pResult) getEnclosureList;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, ISVGElement* element, ISVGRect* rect, int16* pResult) checkIntersection;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, ISVGElement* element, ISVGRect* rect, int16* pResult) checkEnclosure;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self) deselectAll;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, ISVGNumber** pResult) createSVGNumber;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, ISVGLength** pResult) createSVGLength;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, ISVGAngle** pResult) createSVGAngle;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, ISVGPoint** pResult) createSVGPoint;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, ISVGMatrix** pResult) createSVGMatrix;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, ISVGRect** pResult) createSVGRect;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, ISVGTransform** pResult) createSVGTransform;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, ISVGMatrix* matrix, ISVGTransform** pResult) createSVGTransformFromMatrix;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR elementId, IHTMLElement** pResult) getElementById;
	}


	public HRESULT putref_x(ISVGAnimatedLength* v) mut => VT.[Friend]putref_x(&this, v);

	public HRESULT get_x(ISVGAnimatedLength** p) mut => VT.[Friend]get_x(&this, p);

	public HRESULT putref_y(ISVGAnimatedLength* v) mut => VT.[Friend]putref_y(&this, v);

	public HRESULT get_y(ISVGAnimatedLength** p) mut => VT.[Friend]get_y(&this, p);

	public HRESULT putref_width(ISVGAnimatedLength* v) mut => VT.[Friend]putref_width(&this, v);

	public HRESULT get_width(ISVGAnimatedLength** p) mut => VT.[Friend]get_width(&this, p);

	public HRESULT putref_height(ISVGAnimatedLength* v) mut => VT.[Friend]putref_height(&this, v);

	public HRESULT get_height(ISVGAnimatedLength** p) mut => VT.[Friend]get_height(&this, p);

	public HRESULT put_contentScriptType(BSTR v) mut => VT.[Friend]put_contentScriptType(&this, v);

	public HRESULT get_contentScriptType(BSTR* p) mut => VT.[Friend]get_contentScriptType(&this, p);

	public HRESULT put_contentStyleType(BSTR v) mut => VT.[Friend]put_contentStyleType(&this, v);

	public HRESULT get_contentStyleType(BSTR* p) mut => VT.[Friend]get_contentStyleType(&this, p);

	public HRESULT putref_viewport(ISVGRect* v) mut => VT.[Friend]putref_viewport(&this, v);

	public HRESULT get_viewport(ISVGRect** p) mut => VT.[Friend]get_viewport(&this, p);

	public HRESULT put_pixelUnitToMillimeterX(float v) mut => VT.[Friend]put_pixelUnitToMillimeterX(&this, v);

	public HRESULT get_pixelUnitToMillimeterX(float* p) mut => VT.[Friend]get_pixelUnitToMillimeterX(&this, p);

	public HRESULT put_pixelUnitToMillimeterY(float v) mut => VT.[Friend]put_pixelUnitToMillimeterY(&this, v);

	public HRESULT get_pixelUnitToMillimeterY(float* p) mut => VT.[Friend]get_pixelUnitToMillimeterY(&this, p);

	public HRESULT put_screenPixelToMillimeterX(float v) mut => VT.[Friend]put_screenPixelToMillimeterX(&this, v);

	public HRESULT get_screenPixelToMillimeterX(float* p) mut => VT.[Friend]get_screenPixelToMillimeterX(&this, p);

	public HRESULT put_screenPixelToMillimeterY(float v) mut => VT.[Friend]put_screenPixelToMillimeterY(&this, v);

	public HRESULT get_screenPixelToMillimeterY(float* p) mut => VT.[Friend]get_screenPixelToMillimeterY(&this, p);

	public HRESULT put_useCurrentView(int16 v) mut => VT.[Friend]put_useCurrentView(&this, v);

	public HRESULT get_useCurrentView(int16* p) mut => VT.[Friend]get_useCurrentView(&this, p);

	public HRESULT putref_currentView(ISVGViewSpec* v) mut => VT.[Friend]putref_currentView(&this, v);

	public HRESULT get_currentView(ISVGViewSpec** p) mut => VT.[Friend]get_currentView(&this, p);

	public HRESULT put_currentScale(float v) mut => VT.[Friend]put_currentScale(&this, v);

	public HRESULT get_currentScale(float* p) mut => VT.[Friend]get_currentScale(&this, p);

	public HRESULT putref_currentTranslate(ISVGPoint* v) mut => VT.[Friend]putref_currentTranslate(&this, v);

	public HRESULT get_currentTranslate(ISVGPoint** p) mut => VT.[Friend]get_currentTranslate(&this, p);

	public HRESULT suspendRedraw(uint32 maxWaitMilliseconds, uint32* pResult) mut => VT.[Friend]suspendRedraw(&this, maxWaitMilliseconds, pResult);

	public HRESULT unsuspendRedraw(uint32 suspendHandeID) mut => VT.[Friend]unsuspendRedraw(&this, suspendHandeID);

	public HRESULT unsuspendRedrawAll() mut => VT.[Friend]unsuspendRedrawAll(&this);

	public HRESULT forceRedraw() mut => VT.[Friend]forceRedraw(&this);

	public HRESULT pauseAnimations() mut => VT.[Friend]pauseAnimations(&this);

	public HRESULT unpauseAnimations() mut => VT.[Friend]unpauseAnimations(&this);

	public HRESULT animationsPaused(int16* pResult) mut => VT.[Friend]animationsPaused(&this, pResult);

	public HRESULT getCurrentTime(float* pResult) mut => VT.[Friend]getCurrentTime(&this, pResult);

	public HRESULT setCurrentTime(float seconds) mut => VT.[Friend]setCurrentTime(&this, seconds);

	public HRESULT getIntersectionList(ISVGRect* rect, ISVGElement* referenceElement, VARIANT* pResult) mut => VT.[Friend]getIntersectionList(&this, rect, referenceElement, pResult);

	public HRESULT getEnclosureList(ISVGRect* rect, ISVGElement* referenceElement, VARIANT* pResult) mut => VT.[Friend]getEnclosureList(&this, rect, referenceElement, pResult);

	public HRESULT checkIntersection(ISVGElement* element, ISVGRect* rect, int16* pResult) mut => VT.[Friend]checkIntersection(&this, element, rect, pResult);

	public HRESULT checkEnclosure(ISVGElement* element, ISVGRect* rect, int16* pResult) mut => VT.[Friend]checkEnclosure(&this, element, rect, pResult);

	public HRESULT deselectAll() mut => VT.[Friend]deselectAll(&this);

	public HRESULT createSVGNumber(ISVGNumber** pResult) mut => VT.[Friend]createSVGNumber(&this, pResult);

	public HRESULT createSVGLength(ISVGLength** pResult) mut => VT.[Friend]createSVGLength(&this, pResult);

	public HRESULT createSVGAngle(ISVGAngle** pResult) mut => VT.[Friend]createSVGAngle(&this, pResult);

	public HRESULT createSVGPoint(ISVGPoint** pResult) mut => VT.[Friend]createSVGPoint(&this, pResult);

	public HRESULT createSVGMatrix(ISVGMatrix** pResult) mut => VT.[Friend]createSVGMatrix(&this, pResult);

	public HRESULT createSVGRect(ISVGRect** pResult) mut => VT.[Friend]createSVGRect(&this, pResult);

	public HRESULT createSVGTransform(ISVGTransform** pResult) mut => VT.[Friend]createSVGTransform(&this, pResult);

	public HRESULT createSVGTransformFromMatrix(ISVGMatrix* matrix, ISVGTransform** pResult) mut => VT.[Friend]createSVGTransformFromMatrix(&this, matrix, pResult);

	public HRESULT getElementById(BSTR elementId, IHTMLElement** pResult) mut => VT.[Friend]getElementById(&this, elementId, pResult);
}

[CRepr]struct IDOMNodeIterator : IDispatch
{
	public new const Guid IID = .(0x30510746, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IDispatch** p) get_root;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32* p) get_whatToShow;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IDispatch** p) get_filter;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16* p) get_expandEntityReferences;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IDispatch** ppRetNode) nextNode;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IDispatch** ppRetNode) previousNode;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self) detach;
	}


	public HRESULT get_root(IDispatch** p) mut => VT.[Friend]get_root(&this, p);

	public HRESULT get_whatToShow(uint32* p) mut => VT.[Friend]get_whatToShow(&this, p);

	public HRESULT get_filter(IDispatch** p) mut => VT.[Friend]get_filter(&this, p);

	public HRESULT get_expandEntityReferences(int16* p) mut => VT.[Friend]get_expandEntityReferences(&this, p);

	public HRESULT nextNode(IDispatch** ppRetNode) mut => VT.[Friend]nextNode(&this, ppRetNode);

	public HRESULT previousNode(IDispatch** ppRetNode) mut => VT.[Friend]previousNode(&this, ppRetNode);

	public HRESULT detach() mut => VT.[Friend]detach(&this);
}

[CRepr]struct IDOMTreeWalker : IDispatch
{
	public new const Guid IID = .(0x30510748, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IDispatch** p) get_root;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32* p) get_whatToShow;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IDispatch** p) get_filter;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16* p) get_expandEntityReferences;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IDispatch* v) putref_currentNode;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IDispatch** p) get_currentNode;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IDispatch** ppRetNode) parentNode;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IDispatch** ppRetNode) firstChild;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IDispatch** ppRetNode) lastChild;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IDispatch** ppRetNode) previousSibling;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IDispatch** ppRetNode) nextSibling;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IDispatch** ppRetNode) previousNode;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IDispatch** ppRetNode) nextNode;
	}


	public HRESULT get_root(IDispatch** p) mut => VT.[Friend]get_root(&this, p);

	public HRESULT get_whatToShow(uint32* p) mut => VT.[Friend]get_whatToShow(&this, p);

	public HRESULT get_filter(IDispatch** p) mut => VT.[Friend]get_filter(&this, p);

	public HRESULT get_expandEntityReferences(int16* p) mut => VT.[Friend]get_expandEntityReferences(&this, p);

	public HRESULT putref_currentNode(IDispatch* v) mut => VT.[Friend]putref_currentNode(&this, v);

	public HRESULT get_currentNode(IDispatch** p) mut => VT.[Friend]get_currentNode(&this, p);

	public HRESULT parentNode(IDispatch** ppRetNode) mut => VT.[Friend]parentNode(&this, ppRetNode);

	public HRESULT firstChild(IDispatch** ppRetNode) mut => VT.[Friend]firstChild(&this, ppRetNode);

	public HRESULT lastChild(IDispatch** ppRetNode) mut => VT.[Friend]lastChild(&this, ppRetNode);

	public HRESULT previousSibling(IDispatch** ppRetNode) mut => VT.[Friend]previousSibling(&this, ppRetNode);

	public HRESULT nextSibling(IDispatch** ppRetNode) mut => VT.[Friend]nextSibling(&this, ppRetNode);

	public HRESULT previousNode(IDispatch** ppRetNode) mut => VT.[Friend]previousNode(&this, ppRetNode);

	public HRESULT nextNode(IDispatch** ppRetNode) mut => VT.[Friend]nextNode(&this, ppRetNode);
}

[CRepr]struct IDOMProcessingInstruction : IDispatch
{
	public new const Guid IID = .(0x30510742, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_target;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_data;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_data;
	}


	public HRESULT get_target(BSTR* p) mut => VT.[Friend]get_target(&this, p);

	public HRESULT put_data(BSTR v) mut => VT.[Friend]put_data(&this, v);

	public HRESULT get_data(BSTR* p) mut => VT.[Friend]get_data(&this, p);
}

[CRepr]struct IHTMLDocument3 : IDispatch
{
	public new const Guid IID = .(0x3050f485, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self) releaseCapture;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16 fForce) recalc;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR text, IHTMLDOMNode** newTextNode) createTextNode;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IHTMLElement** p) get_documentElement;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_uniqueID;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR event, IDispatch* pDisp, int16* pfResult) attachEvent;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR event, IDispatch* pDisp) detachEvent;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_onrowsdelete;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_onrowsdelete;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_onrowsinserted;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_onrowsinserted;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_oncellchange;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_oncellchange;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_ondatasetchanged;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_ondatasetchanged;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_ondataavailable;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_ondataavailable;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_ondatasetcomplete;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_ondatasetcomplete;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_onpropertychange;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_onpropertychange;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_dir;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_dir;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_oncontextmenu;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_oncontextmenu;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_onstop;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_onstop;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IHTMLDocument2** pNewDoc) createDocumentFragment;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IHTMLDocument2** p) get_parentDocument;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16 v) put_enableDownload;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16* p) get_enableDownload;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_baseUrl;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_baseUrl;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IDispatch** p) get_childNodes;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16 v) put_inheritStyleSheets;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16* p) get_inheritStyleSheets;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_onbeforeeditfocus;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_onbeforeeditfocus;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v, IHTMLElementCollection** pelColl) getElementsByName;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v, IHTMLElement** pel) getElementById;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v, IHTMLElementCollection** pelColl) getElementsByTagName;
	}


	public HRESULT releaseCapture() mut => VT.[Friend]releaseCapture(&this);

	public HRESULT recalc(int16 fForce) mut => VT.[Friend]recalc(&this, fForce);

	public HRESULT createTextNode(BSTR text, IHTMLDOMNode** newTextNode) mut => VT.[Friend]createTextNode(&this, text, newTextNode);

	public HRESULT get_documentElement(IHTMLElement** p) mut => VT.[Friend]get_documentElement(&this, p);

	public HRESULT get_uniqueID(BSTR* p) mut => VT.[Friend]get_uniqueID(&this, p);

	public HRESULT attachEvent(BSTR event, IDispatch* pDisp, int16* pfResult) mut => VT.[Friend]attachEvent(&this, event, pDisp, pfResult);

	public HRESULT detachEvent(BSTR event, IDispatch* pDisp) mut => VT.[Friend]detachEvent(&this, event, pDisp);

	public HRESULT put_onrowsdelete(VARIANT v) mut => VT.[Friend]put_onrowsdelete(&this, v);

	public HRESULT get_onrowsdelete(VARIANT* p) mut => VT.[Friend]get_onrowsdelete(&this, p);

	public HRESULT put_onrowsinserted(VARIANT v) mut => VT.[Friend]put_onrowsinserted(&this, v);

	public HRESULT get_onrowsinserted(VARIANT* p) mut => VT.[Friend]get_onrowsinserted(&this, p);

	public HRESULT put_oncellchange(VARIANT v) mut => VT.[Friend]put_oncellchange(&this, v);

	public HRESULT get_oncellchange(VARIANT* p) mut => VT.[Friend]get_oncellchange(&this, p);

	public HRESULT put_ondatasetchanged(VARIANT v) mut => VT.[Friend]put_ondatasetchanged(&this, v);

	public HRESULT get_ondatasetchanged(VARIANT* p) mut => VT.[Friend]get_ondatasetchanged(&this, p);

	public HRESULT put_ondataavailable(VARIANT v) mut => VT.[Friend]put_ondataavailable(&this, v);

	public HRESULT get_ondataavailable(VARIANT* p) mut => VT.[Friend]get_ondataavailable(&this, p);

	public HRESULT put_ondatasetcomplete(VARIANT v) mut => VT.[Friend]put_ondatasetcomplete(&this, v);

	public HRESULT get_ondatasetcomplete(VARIANT* p) mut => VT.[Friend]get_ondatasetcomplete(&this, p);

	public HRESULT put_onpropertychange(VARIANT v) mut => VT.[Friend]put_onpropertychange(&this, v);

	public HRESULT get_onpropertychange(VARIANT* p) mut => VT.[Friend]get_onpropertychange(&this, p);

	public HRESULT put_dir(BSTR v) mut => VT.[Friend]put_dir(&this, v);

	public HRESULT get_dir(BSTR* p) mut => VT.[Friend]get_dir(&this, p);

	public HRESULT put_oncontextmenu(VARIANT v) mut => VT.[Friend]put_oncontextmenu(&this, v);

	public HRESULT get_oncontextmenu(VARIANT* p) mut => VT.[Friend]get_oncontextmenu(&this, p);

	public HRESULT put_onstop(VARIANT v) mut => VT.[Friend]put_onstop(&this, v);

	public HRESULT get_onstop(VARIANT* p) mut => VT.[Friend]get_onstop(&this, p);

	public HRESULT createDocumentFragment(IHTMLDocument2** pNewDoc) mut => VT.[Friend]createDocumentFragment(&this, pNewDoc);

	public HRESULT get_parentDocument(IHTMLDocument2** p) mut => VT.[Friend]get_parentDocument(&this, p);

	public HRESULT put_enableDownload(int16 v) mut => VT.[Friend]put_enableDownload(&this, v);

	public HRESULT get_enableDownload(int16* p) mut => VT.[Friend]get_enableDownload(&this, p);

	public HRESULT put_baseUrl(BSTR v) mut => VT.[Friend]put_baseUrl(&this, v);

	public HRESULT get_baseUrl(BSTR* p) mut => VT.[Friend]get_baseUrl(&this, p);

	public HRESULT get_childNodes(IDispatch** p) mut => VT.[Friend]get_childNodes(&this, p);

	public HRESULT put_inheritStyleSheets(int16 v) mut => VT.[Friend]put_inheritStyleSheets(&this, v);

	public HRESULT get_inheritStyleSheets(int16* p) mut => VT.[Friend]get_inheritStyleSheets(&this, p);

	public HRESULT put_onbeforeeditfocus(VARIANT v) mut => VT.[Friend]put_onbeforeeditfocus(&this, v);

	public HRESULT get_onbeforeeditfocus(VARIANT* p) mut => VT.[Friend]get_onbeforeeditfocus(&this, p);

	public HRESULT getElementsByName(BSTR v, IHTMLElementCollection** pelColl) mut => VT.[Friend]getElementsByName(&this, v, pelColl);

	public HRESULT getElementById(BSTR v, IHTMLElement** pel) mut => VT.[Friend]getElementById(&this, v, pel);

	public HRESULT getElementsByTagName(BSTR v, IHTMLElementCollection** pelColl) mut => VT.[Friend]getElementsByTagName(&this, v, pelColl);
}

[CRepr]struct IHTMLDocument4 : IDispatch
{
	public new const Guid IID = .(0x3050f69a, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self) focus;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16* pfFocus) hasFocus;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_onselectionchange;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_onselectionchange;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IDispatch** p) get_namespaces;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR bstrUrl, BSTR bstrOptions, IHTMLDocument2** newDoc) createDocumentFromUrl;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_media;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_media;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* pvarEventObject, IHTMLEventObj** ppEventObj) createEventObject;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR bstrEventName, VARIANT* pvarEventObject, int16* pfCancelled) fireEvent;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v, IHTMLRenderStyle** ppIHTMLRenderStyle) createRenderStyle;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_oncontrolselect;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_oncontrolselect;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_URLUnencoded;
	}


	public HRESULT focus() mut => VT.[Friend]focus(&this);

	public HRESULT hasFocus(int16* pfFocus) mut => VT.[Friend]hasFocus(&this, pfFocus);

	public HRESULT put_onselectionchange(VARIANT v) mut => VT.[Friend]put_onselectionchange(&this, v);

	public HRESULT get_onselectionchange(VARIANT* p) mut => VT.[Friend]get_onselectionchange(&this, p);

	public HRESULT get_namespaces(IDispatch** p) mut => VT.[Friend]get_namespaces(&this, p);

	public HRESULT createDocumentFromUrl(BSTR bstrUrl, BSTR bstrOptions, IHTMLDocument2** newDoc) mut => VT.[Friend]createDocumentFromUrl(&this, bstrUrl, bstrOptions, newDoc);

	public HRESULT put_media(BSTR v) mut => VT.[Friend]put_media(&this, v);

	public HRESULT get_media(BSTR* p) mut => VT.[Friend]get_media(&this, p);

	public HRESULT createEventObject(VARIANT* pvarEventObject, IHTMLEventObj** ppEventObj) mut => VT.[Friend]createEventObject(&this, pvarEventObject, ppEventObj);

	public HRESULT fireEvent(BSTR bstrEventName, VARIANT* pvarEventObject, int16* pfCancelled) mut => VT.[Friend]fireEvent(&this, bstrEventName, pvarEventObject, pfCancelled);

	public HRESULT createRenderStyle(BSTR v, IHTMLRenderStyle** ppIHTMLRenderStyle) mut => VT.[Friend]createRenderStyle(&this, v, ppIHTMLRenderStyle);

	public HRESULT put_oncontrolselect(VARIANT v) mut => VT.[Friend]put_oncontrolselect(&this, v);

	public HRESULT get_oncontrolselect(VARIANT* p) mut => VT.[Friend]get_oncontrolselect(&this, p);

	public HRESULT get_URLUnencoded(BSTR* p) mut => VT.[Friend]get_URLUnencoded(&this, p);
}

[CRepr]struct IHTMLDocument5 : IDispatch
{
	public new const Guid IID = .(0x3050f80c, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_onmousewheel;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_onmousewheel;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IHTMLDOMNode** p) get_doctype;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IHTMLDOMImplementation** p) get_implementation;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR bstrattrName, IHTMLDOMAttribute** ppattribute) createAttribute;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR bstrdata, IHTMLDOMNode** ppRetNode) createComment;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_onfocusin;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_onfocusin;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_onfocusout;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_onfocusout;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_onactivate;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_onactivate;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_ondeactivate;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_ondeactivate;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_onbeforeactivate;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_onbeforeactivate;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_onbeforedeactivate;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_onbeforedeactivate;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_compatMode;
	}


	public HRESULT put_onmousewheel(VARIANT v) mut => VT.[Friend]put_onmousewheel(&this, v);

	public HRESULT get_onmousewheel(VARIANT* p) mut => VT.[Friend]get_onmousewheel(&this, p);

	public HRESULT get_doctype(IHTMLDOMNode** p) mut => VT.[Friend]get_doctype(&this, p);

	public HRESULT get_implementation(IHTMLDOMImplementation** p) mut => VT.[Friend]get_implementation(&this, p);

	public HRESULT createAttribute(BSTR bstrattrName, IHTMLDOMAttribute** ppattribute) mut => VT.[Friend]createAttribute(&this, bstrattrName, ppattribute);

	public HRESULT createComment(BSTR bstrdata, IHTMLDOMNode** ppRetNode) mut => VT.[Friend]createComment(&this, bstrdata, ppRetNode);

	public HRESULT put_onfocusin(VARIANT v) mut => VT.[Friend]put_onfocusin(&this, v);

	public HRESULT get_onfocusin(VARIANT* p) mut => VT.[Friend]get_onfocusin(&this, p);

	public HRESULT put_onfocusout(VARIANT v) mut => VT.[Friend]put_onfocusout(&this, v);

	public HRESULT get_onfocusout(VARIANT* p) mut => VT.[Friend]get_onfocusout(&this, p);

	public HRESULT put_onactivate(VARIANT v) mut => VT.[Friend]put_onactivate(&this, v);

	public HRESULT get_onactivate(VARIANT* p) mut => VT.[Friend]get_onactivate(&this, p);

	public HRESULT put_ondeactivate(VARIANT v) mut => VT.[Friend]put_ondeactivate(&this, v);

	public HRESULT get_ondeactivate(VARIANT* p) mut => VT.[Friend]get_ondeactivate(&this, p);

	public HRESULT put_onbeforeactivate(VARIANT v) mut => VT.[Friend]put_onbeforeactivate(&this, v);

	public HRESULT get_onbeforeactivate(VARIANT* p) mut => VT.[Friend]get_onbeforeactivate(&this, p);

	public HRESULT put_onbeforedeactivate(VARIANT v) mut => VT.[Friend]put_onbeforedeactivate(&this, v);

	public HRESULT get_onbeforedeactivate(VARIANT* p) mut => VT.[Friend]get_onbeforedeactivate(&this, p);

	public HRESULT get_compatMode(BSTR* p) mut => VT.[Friend]get_compatMode(&this, p);
}

[CRepr]struct IHTMLDocument6 : IDispatch
{
	public new const Guid IID = .(0x30510417, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IHTMLDocumentCompatibleInfoCollection** p) get_compatible;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_documentMode;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_onstorage;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_onstorage;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_onstoragecommit;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_onstoragecommit;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR bstrId, IHTMLElement2** ppRetElement) getElementById;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self) updateSettings;
	}


	public HRESULT get_compatible(IHTMLDocumentCompatibleInfoCollection** p) mut => VT.[Friend]get_compatible(&this, p);

	public HRESULT get_documentMode(VARIANT* p) mut => VT.[Friend]get_documentMode(&this, p);

	public HRESULT put_onstorage(VARIANT v) mut => VT.[Friend]put_onstorage(&this, v);

	public HRESULT get_onstorage(VARIANT* p) mut => VT.[Friend]get_onstorage(&this, p);

	public HRESULT put_onstoragecommit(VARIANT v) mut => VT.[Friend]put_onstoragecommit(&this, v);

	public HRESULT get_onstoragecommit(VARIANT* p) mut => VT.[Friend]get_onstoragecommit(&this, p);

	public HRESULT getElementById(BSTR bstrId, IHTMLElement2** ppRetElement) mut => VT.[Friend]getElementById(&this, bstrId, ppRetElement);

	public HRESULT updateSettings() mut => VT.[Friend]updateSettings(&this);
}

[CRepr]struct IHTMLDocument8 : IDispatch
{
	public new const Guid IID = .(0x305107d0, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_onmscontentzoom;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_onmscontentzoom;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_onmspointerdown;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_onmspointerdown;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_onmspointermove;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_onmspointermove;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_onmspointerup;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_onmspointerup;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_onmspointerover;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_onmspointerover;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_onmspointerout;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_onmspointerout;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_onmspointercancel;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_onmspointercancel;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_onmspointerhover;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_onmspointerhover;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_onmsgesturestart;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_onmsgesturestart;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_onmsgesturechange;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_onmsgesturechange;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_onmsgestureend;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_onmsgestureend;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_onmsgesturehold;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_onmsgesturehold;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_onmsgesturetap;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_onmsgesturetap;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_onmsgesturedoubletap;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_onmsgesturedoubletap;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_onmsinertiastart;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_onmsinertiastart;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, float x, float y, IHTMLDOMChildrenCollection** elementsHit) elementsFromPoint;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, float left, float top, float width, float height, IHTMLDOMChildrenCollection** elementsHit) elementsFromRect;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_onmsmanipulationstatechanged;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_onmsmanipulationstatechanged;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16 v) put_msCapsLockWarningOff;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16* p) get_msCapsLockWarningOff;
	}


	public HRESULT put_onmscontentzoom(VARIANT v) mut => VT.[Friend]put_onmscontentzoom(&this, v);

	public HRESULT get_onmscontentzoom(VARIANT* p) mut => VT.[Friend]get_onmscontentzoom(&this, p);

	public HRESULT put_onmspointerdown(VARIANT v) mut => VT.[Friend]put_onmspointerdown(&this, v);

	public HRESULT get_onmspointerdown(VARIANT* p) mut => VT.[Friend]get_onmspointerdown(&this, p);

	public HRESULT put_onmspointermove(VARIANT v) mut => VT.[Friend]put_onmspointermove(&this, v);

	public HRESULT get_onmspointermove(VARIANT* p) mut => VT.[Friend]get_onmspointermove(&this, p);

	public HRESULT put_onmspointerup(VARIANT v) mut => VT.[Friend]put_onmspointerup(&this, v);

	public HRESULT get_onmspointerup(VARIANT* p) mut => VT.[Friend]get_onmspointerup(&this, p);

	public HRESULT put_onmspointerover(VARIANT v) mut => VT.[Friend]put_onmspointerover(&this, v);

	public HRESULT get_onmspointerover(VARIANT* p) mut => VT.[Friend]get_onmspointerover(&this, p);

	public HRESULT put_onmspointerout(VARIANT v) mut => VT.[Friend]put_onmspointerout(&this, v);

	public HRESULT get_onmspointerout(VARIANT* p) mut => VT.[Friend]get_onmspointerout(&this, p);

	public HRESULT put_onmspointercancel(VARIANT v) mut => VT.[Friend]put_onmspointercancel(&this, v);

	public HRESULT get_onmspointercancel(VARIANT* p) mut => VT.[Friend]get_onmspointercancel(&this, p);

	public HRESULT put_onmspointerhover(VARIANT v) mut => VT.[Friend]put_onmspointerhover(&this, v);

	public HRESULT get_onmspointerhover(VARIANT* p) mut => VT.[Friend]get_onmspointerhover(&this, p);

	public HRESULT put_onmsgesturestart(VARIANT v) mut => VT.[Friend]put_onmsgesturestart(&this, v);

	public HRESULT get_onmsgesturestart(VARIANT* p) mut => VT.[Friend]get_onmsgesturestart(&this, p);

	public HRESULT put_onmsgesturechange(VARIANT v) mut => VT.[Friend]put_onmsgesturechange(&this, v);

	public HRESULT get_onmsgesturechange(VARIANT* p) mut => VT.[Friend]get_onmsgesturechange(&this, p);

	public HRESULT put_onmsgestureend(VARIANT v) mut => VT.[Friend]put_onmsgestureend(&this, v);

	public HRESULT get_onmsgestureend(VARIANT* p) mut => VT.[Friend]get_onmsgestureend(&this, p);

	public HRESULT put_onmsgesturehold(VARIANT v) mut => VT.[Friend]put_onmsgesturehold(&this, v);

	public HRESULT get_onmsgesturehold(VARIANT* p) mut => VT.[Friend]get_onmsgesturehold(&this, p);

	public HRESULT put_onmsgesturetap(VARIANT v) mut => VT.[Friend]put_onmsgesturetap(&this, v);

	public HRESULT get_onmsgesturetap(VARIANT* p) mut => VT.[Friend]get_onmsgesturetap(&this, p);

	public HRESULT put_onmsgesturedoubletap(VARIANT v) mut => VT.[Friend]put_onmsgesturedoubletap(&this, v);

	public HRESULT get_onmsgesturedoubletap(VARIANT* p) mut => VT.[Friend]get_onmsgesturedoubletap(&this, p);

	public HRESULT put_onmsinertiastart(VARIANT v) mut => VT.[Friend]put_onmsinertiastart(&this, v);

	public HRESULT get_onmsinertiastart(VARIANT* p) mut => VT.[Friend]get_onmsinertiastart(&this, p);

	public HRESULT elementsFromPoint(float x, float y, IHTMLDOMChildrenCollection** elementsHit) mut => VT.[Friend]elementsFromPoint(&this, x, y, elementsHit);

	public HRESULT elementsFromRect(float left, float top, float width, float height, IHTMLDOMChildrenCollection** elementsHit) mut => VT.[Friend]elementsFromRect(&this, left, top, width, height, elementsHit);

	public HRESULT put_onmsmanipulationstatechanged(VARIANT v) mut => VT.[Friend]put_onmsmanipulationstatechanged(&this, v);

	public HRESULT get_onmsmanipulationstatechanged(VARIANT* p) mut => VT.[Friend]get_onmsmanipulationstatechanged(&this, p);

	public HRESULT put_msCapsLockWarningOff(int16 v) mut => VT.[Friend]put_msCapsLockWarningOff(&this, v);

	public HRESULT get_msCapsLockWarningOff(int16* p) mut => VT.[Friend]get_msCapsLockWarningOff(&this, p);
}

[CRepr]struct IDocumentEvent : IDispatch
{
	public new const Guid IID = .(0x305104bc, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR eventType, IDOMEvent** ppEvent) createEvent;
	}


	public HRESULT createEvent(BSTR eventType, IDOMEvent** ppEvent) mut => VT.[Friend]createEvent(&this, eventType, ppEvent);
}

[CRepr]struct IDocumentRange : IDispatch
{
	public new const Guid IID = .(0x305104af, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IHTMLDOMRange** ppIHTMLDOMRange) createRange;
	}


	public HRESULT createRange(IHTMLDOMRange** ppIHTMLDOMRange) mut => VT.[Friend]createRange(&this, ppIHTMLDOMRange);
}

[CRepr]struct IDocumentSelector : IDispatch
{
	public new const Guid IID = .(0x30510462, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v, IHTMLElement** pel) querySelector;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v, IHTMLDOMChildrenCollection** pel) querySelectorAll;
	}


	public HRESULT querySelector(BSTR v, IHTMLElement** pel) mut => VT.[Friend]querySelector(&this, v, pel);

	public HRESULT querySelectorAll(BSTR v, IHTMLDOMChildrenCollection** pel) mut => VT.[Friend]querySelectorAll(&this, v, pel);
}

[CRepr]struct IDocumentTraversal : IDispatch
{
	public new const Guid IID = .(0x30510744, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IDispatch* pRootNode, int32 ulWhatToShow, VARIANT* pFilter, int16 fEntityReferenceExpansion, IDOMNodeIterator** ppNodeIterator) createNodeIterator;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IDispatch* pRootNode, int32 ulWhatToShow, VARIANT* pFilter, int16 fEntityReferenceExpansion, IDOMTreeWalker** ppTreeWalker) createTreeWalker;
	}


	public HRESULT createNodeIterator(IDispatch* pRootNode, int32 ulWhatToShow, VARIANT* pFilter, int16 fEntityReferenceExpansion, IDOMNodeIterator** ppNodeIterator) mut => VT.[Friend]createNodeIterator(&this, pRootNode, ulWhatToShow, pFilter, fEntityReferenceExpansion, ppNodeIterator);

	public HRESULT createTreeWalker(IDispatch* pRootNode, int32 ulWhatToShow, VARIANT* pFilter, int16 fEntityReferenceExpansion, IDOMTreeWalker** ppTreeWalker) mut => VT.[Friend]createTreeWalker(&this, pRootNode, ulWhatToShow, pFilter, fEntityReferenceExpansion, ppTreeWalker);
}

[CRepr]struct DispHTMLDocument : IDispatch
{
	public new const Guid IID = .(0x3050f55f, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
	}

}

[CRepr]struct DWebBridgeEvents : IDispatch
{
	public new const Guid IID = .(0xa6d897ff, 0x0a95, 0x11d1, 0xb0, 0xba, 0x00, 0x60, 0x08, 0x16, 0x6e, 0x11);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
	}

}

[CRepr]struct IWebBridge : IDispatch
{
	public new const Guid IID = .(0xae24fdad, 0x03c6, 0x11d1, 0x8b, 0x76, 0x00, 0x80, 0xc7, 0x44, 0xf3, 0x89);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_URL;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_URL;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16 v) put_Scrollbar;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16* p) get_Scrollbar;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16 v) put_embed;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16* p) get_embed;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IDispatch** p) get_event;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* p) get_readyState;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self) AboutBox;
	}


	public HRESULT put_URL(BSTR v) mut => VT.[Friend]put_URL(&this, v);

	public HRESULT get_URL(BSTR* p) mut => VT.[Friend]get_URL(&this, p);

	public HRESULT put_Scrollbar(int16 v) mut => VT.[Friend]put_Scrollbar(&this, v);

	public HRESULT get_Scrollbar(int16* p) mut => VT.[Friend]get_Scrollbar(&this, p);

	public HRESULT put_embed(int16 v) mut => VT.[Friend]put_embed(&this, v);

	public HRESULT get_embed(int16* p) mut => VT.[Friend]get_embed(&this, p);

	public HRESULT get_event(IDispatch** p) mut => VT.[Friend]get_event(&this, p);

	public HRESULT get_readyState(int32* p) mut => VT.[Friend]get_readyState(&this, p);

	public HRESULT AboutBox() mut => VT.[Friend]AboutBox(&this);
}

[CRepr]struct IWBScriptControl : IDispatch
{
	public new const Guid IID = .(0xa5170870, 0x0cf8, 0x11d1, 0x8b, 0x91, 0x00, 0x80, 0xc7, 0x44, 0xf3, 0x89);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR name, VARIANT eventData) raiseEvent;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self) bubbleEvent;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT menuItemPairs) setContextMenu;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16 v) put_selectableContent;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16* p) get_selectableContent;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16* p) get_frozen;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16 v) put_scrollbar;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16* p) get_scrollbar;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_version;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16* p) get_visibility;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_onvisibilitychange;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_onvisibilitychange;
	}


	public HRESULT raiseEvent(BSTR name, VARIANT eventData) mut => VT.[Friend]raiseEvent(&this, name, eventData);

	public HRESULT bubbleEvent() mut => VT.[Friend]bubbleEvent(&this);

	public HRESULT setContextMenu(VARIANT menuItemPairs) mut => VT.[Friend]setContextMenu(&this, menuItemPairs);

	public HRESULT put_selectableContent(int16 v) mut => VT.[Friend]put_selectableContent(&this, v);

	public HRESULT get_selectableContent(int16* p) mut => VT.[Friend]get_selectableContent(&this, p);

	public HRESULT get_frozen(int16* p) mut => VT.[Friend]get_frozen(&this, p);

	public HRESULT put_scrollbar(int16 v) mut => VT.[Friend]put_scrollbar(&this, v);

	public HRESULT get_scrollbar(int16* p) mut => VT.[Friend]get_scrollbar(&this, p);

	public HRESULT get_version(BSTR* p) mut => VT.[Friend]get_version(&this, p);

	public HRESULT get_visibility(int16* p) mut => VT.[Friend]get_visibility(&this, p);

	public HRESULT put_onvisibilitychange(VARIANT v) mut => VT.[Friend]put_onvisibilitychange(&this, v);

	public HRESULT get_onvisibilitychange(VARIANT* p) mut => VT.[Friend]get_onvisibilitychange(&this, p);
}

[CRepr]struct IHTMLEmbedElement : IDispatch
{
	public new const Guid IID = .(0x3050f25f, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_hidden;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_hidden;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_palette;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_pluginspage;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_src;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_src;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_units;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_units;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_name;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_name;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_width;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_width;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_height;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_height;
	}


	public HRESULT put_hidden(BSTR v) mut => VT.[Friend]put_hidden(&this, v);

	public HRESULT get_hidden(BSTR* p) mut => VT.[Friend]get_hidden(&this, p);

	public HRESULT get_palette(BSTR* p) mut => VT.[Friend]get_palette(&this, p);

	public HRESULT get_pluginspage(BSTR* p) mut => VT.[Friend]get_pluginspage(&this, p);

	public HRESULT put_src(BSTR v) mut => VT.[Friend]put_src(&this, v);

	public HRESULT get_src(BSTR* p) mut => VT.[Friend]get_src(&this, p);

	public HRESULT put_units(BSTR v) mut => VT.[Friend]put_units(&this, v);

	public HRESULT get_units(BSTR* p) mut => VT.[Friend]get_units(&this, p);

	public HRESULT put_name(BSTR v) mut => VT.[Friend]put_name(&this, v);

	public HRESULT get_name(BSTR* p) mut => VT.[Friend]get_name(&this, p);

	public HRESULT put_width(VARIANT v) mut => VT.[Friend]put_width(&this, v);

	public HRESULT get_width(VARIANT* p) mut => VT.[Friend]get_width(&this, p);

	public HRESULT put_height(VARIANT v) mut => VT.[Friend]put_height(&this, v);

	public HRESULT get_height(VARIANT* p) mut => VT.[Friend]get_height(&this, p);
}

[CRepr]struct IHTMLEmbedElement2 : IDispatch
{
	public new const Guid IID = .(0x30510493, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_src;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_src;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_pluginspage;
	}


	public HRESULT put_src(BSTR v) mut => VT.[Friend]put_src(&this, v);

	public HRESULT get_src(BSTR* p) mut => VT.[Friend]get_src(&this, p);

	public HRESULT get_pluginspage(BSTR* p) mut => VT.[Friend]get_pluginspage(&this, p);
}

[CRepr]struct DispHTMLEmbed : IDispatch
{
	public new const Guid IID = .(0x3050f52e, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
	}

}

[CRepr]struct HTMLMapEvents2 : IDispatch
{
	public new const Guid IID = .(0x3050f61e, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
	}

}

[CRepr]struct HTMLMapEvents : IDispatch
{
	public new const Guid IID = .(0x3050f3ba, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
	}

}

[CRepr]struct IHTMLAreasCollection : IDispatch
{
	public new const Guid IID = .(0x3050f383, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 v) put_length;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* p) get_length;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IUnknown** p) get__newEnum;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT name, VARIANT index, IDispatch** pdisp) item;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT tagName, IDispatch** pdisp) tags;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IHTMLElement* element, VARIANT before) add;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 index) remove;
	}


	public HRESULT put_length(int32 v) mut => VT.[Friend]put_length(&this, v);

	public HRESULT get_length(int32* p) mut => VT.[Friend]get_length(&this, p);

	public HRESULT get__newEnum(IUnknown** p) mut => VT.[Friend]get__newEnum(&this, p);

	public HRESULT item(VARIANT name, VARIANT index, IDispatch** pdisp) mut => VT.[Friend]item(&this, name, index, pdisp);

	public HRESULT tags(VARIANT tagName, IDispatch** pdisp) mut => VT.[Friend]tags(&this, tagName, pdisp);

	public HRESULT add(IHTMLElement* element, VARIANT before) mut => VT.[Friend]add(&this, element, before);

	public HRESULT remove(int32 index) mut => VT.[Friend]remove(&this, index);
}

[CRepr]struct IHTMLAreasCollection2 : IDispatch
{
	public new const Guid IID = .(0x3050f5ec, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT urn, IDispatch** pdisp) urns;
	}


	public HRESULT urns(VARIANT urn, IDispatch** pdisp) mut => VT.[Friend]urns(&this, urn, pdisp);
}

[CRepr]struct IHTMLAreasCollection3 : IDispatch
{
	public new const Guid IID = .(0x3050f837, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR name, IDispatch** pdisp) namedItem;
	}


	public HRESULT namedItem(BSTR name, IDispatch** pdisp) mut => VT.[Friend]namedItem(&this, name, pdisp);
}

[CRepr]struct IHTMLAreasCollection4 : IDispatch
{
	public new const Guid IID = .(0x30510492, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* p) get_length;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 index, IHTMLElement2** pNode) item;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR name, IHTMLElement2** pNode) namedItem;
	}


	public HRESULT get_length(int32* p) mut => VT.[Friend]get_length(&this, p);

	public HRESULT item(int32 index, IHTMLElement2** pNode) mut => VT.[Friend]item(&this, index, pNode);

	public HRESULT namedItem(BSTR name, IHTMLElement2** pNode) mut => VT.[Friend]namedItem(&this, name, pNode);
}

[CRepr]struct IHTMLMapElement : IDispatch
{
	public new const Guid IID = .(0x3050f266, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IHTMLAreasCollection** p) get_areas;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_name;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_name;
	}


	public HRESULT get_areas(IHTMLAreasCollection** p) mut => VT.[Friend]get_areas(&this, p);

	public HRESULT put_name(BSTR v) mut => VT.[Friend]put_name(&this, v);

	public HRESULT get_name(BSTR* p) mut => VT.[Friend]get_name(&this, p);
}

[CRepr]struct DispHTMLAreasCollection : IDispatch
{
	public new const Guid IID = .(0x3050f56a, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
	}

}

[CRepr]struct DispHTMLMapElement : IDispatch
{
	public new const Guid IID = .(0x3050f526, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
	}

}

[CRepr]struct HTMLAreaEvents2 : IDispatch
{
	public new const Guid IID = .(0x3050f611, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
	}

}

[CRepr]struct HTMLAreaEvents : IDispatch
{
	public new const Guid IID = .(0x3050f366, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
	}

}

[CRepr]struct IHTMLAreaElement : IDispatch
{
	public new const Guid IID = .(0x3050f265, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_shape;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_shape;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_coords;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_coords;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_href;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_href;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_target;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_target;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_alt;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_alt;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16 v) put_noHref;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16* p) get_noHref;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_host;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_host;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_hostname;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_hostname;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_pathname;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_pathname;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_port;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_port;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_protocol;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_protocol;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_search;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_search;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_hash;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_hash;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_onblur;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_onblur;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_onfocus;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_onfocus;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16 v) put_tabIndex;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16* p) get_tabIndex;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self) focus;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self) blur;
	}


	public HRESULT put_shape(BSTR v) mut => VT.[Friend]put_shape(&this, v);

	public HRESULT get_shape(BSTR* p) mut => VT.[Friend]get_shape(&this, p);

	public HRESULT put_coords(BSTR v) mut => VT.[Friend]put_coords(&this, v);

	public HRESULT get_coords(BSTR* p) mut => VT.[Friend]get_coords(&this, p);

	public HRESULT put_href(BSTR v) mut => VT.[Friend]put_href(&this, v);

	public HRESULT get_href(BSTR* p) mut => VT.[Friend]get_href(&this, p);

	public HRESULT put_target(BSTR v) mut => VT.[Friend]put_target(&this, v);

	public HRESULT get_target(BSTR* p) mut => VT.[Friend]get_target(&this, p);

	public HRESULT put_alt(BSTR v) mut => VT.[Friend]put_alt(&this, v);

	public HRESULT get_alt(BSTR* p) mut => VT.[Friend]get_alt(&this, p);

	public HRESULT put_noHref(int16 v) mut => VT.[Friend]put_noHref(&this, v);

	public HRESULT get_noHref(int16* p) mut => VT.[Friend]get_noHref(&this, p);

	public HRESULT put_host(BSTR v) mut => VT.[Friend]put_host(&this, v);

	public HRESULT get_host(BSTR* p) mut => VT.[Friend]get_host(&this, p);

	public HRESULT put_hostname(BSTR v) mut => VT.[Friend]put_hostname(&this, v);

	public HRESULT get_hostname(BSTR* p) mut => VT.[Friend]get_hostname(&this, p);

	public HRESULT put_pathname(BSTR v) mut => VT.[Friend]put_pathname(&this, v);

	public HRESULT get_pathname(BSTR* p) mut => VT.[Friend]get_pathname(&this, p);

	public HRESULT put_port(BSTR v) mut => VT.[Friend]put_port(&this, v);

	public HRESULT get_port(BSTR* p) mut => VT.[Friend]get_port(&this, p);

	public HRESULT put_protocol(BSTR v) mut => VT.[Friend]put_protocol(&this, v);

	public HRESULT get_protocol(BSTR* p) mut => VT.[Friend]get_protocol(&this, p);

	public HRESULT put_search(BSTR v) mut => VT.[Friend]put_search(&this, v);

	public HRESULT get_search(BSTR* p) mut => VT.[Friend]get_search(&this, p);

	public HRESULT put_hash(BSTR v) mut => VT.[Friend]put_hash(&this, v);

	public HRESULT get_hash(BSTR* p) mut => VT.[Friend]get_hash(&this, p);

	public HRESULT put_onblur(VARIANT v) mut => VT.[Friend]put_onblur(&this, v);

	public HRESULT get_onblur(VARIANT* p) mut => VT.[Friend]get_onblur(&this, p);

	public HRESULT put_onfocus(VARIANT v) mut => VT.[Friend]put_onfocus(&this, v);

	public HRESULT get_onfocus(VARIANT* p) mut => VT.[Friend]get_onfocus(&this, p);

	public HRESULT put_tabIndex(int16 v) mut => VT.[Friend]put_tabIndex(&this, v);

	public HRESULT get_tabIndex(int16* p) mut => VT.[Friend]get_tabIndex(&this, p);

	public HRESULT focus() mut => VT.[Friend]focus(&this);

	public HRESULT blur() mut => VT.[Friend]blur(&this);
}

[CRepr]struct IHTMLAreaElement2 : IDispatch
{
	public new const Guid IID = .(0x3051041f, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_shape;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_shape;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_coords;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_coords;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_href;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_href;
	}


	public HRESULT put_shape(BSTR v) mut => VT.[Friend]put_shape(&this, v);

	public HRESULT get_shape(BSTR* p) mut => VT.[Friend]get_shape(&this, p);

	public HRESULT put_coords(BSTR v) mut => VT.[Friend]put_coords(&this, v);

	public HRESULT get_coords(BSTR* p) mut => VT.[Friend]get_coords(&this, p);

	public HRESULT put_href(BSTR v) mut => VT.[Friend]put_href(&this, v);

	public HRESULT get_href(BSTR* p) mut => VT.[Friend]get_href(&this, p);
}

[CRepr]struct DispHTMLAreaElement : IDispatch
{
	public new const Guid IID = .(0x3050f503, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
	}

}

[CRepr]struct IHTMLTableCaption : IDispatch
{
	public new const Guid IID = .(0x3050f2eb, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_align;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_align;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_vAlign;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_vAlign;
	}


	public HRESULT put_align(BSTR v) mut => VT.[Friend]put_align(&this, v);

	public HRESULT get_align(BSTR* p) mut => VT.[Friend]get_align(&this, p);

	public HRESULT put_vAlign(BSTR v) mut => VT.[Friend]put_vAlign(&this, v);

	public HRESULT get_vAlign(BSTR* p) mut => VT.[Friend]get_vAlign(&this, p);
}

[CRepr]struct DispHTMLTableCaption : IDispatch
{
	public new const Guid IID = .(0x3050f508, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
	}

}

[CRepr]struct IHTMLCommentElement : IDispatch
{
	public new const Guid IID = .(0x3050f20c, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_text;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_text;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 v) put_atomic;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* p) get_atomic;
	}


	public HRESULT put_text(BSTR v) mut => VT.[Friend]put_text(&this, v);

	public HRESULT get_text(BSTR* p) mut => VT.[Friend]get_text(&this, p);

	public HRESULT put_atomic(int32 v) mut => VT.[Friend]put_atomic(&this, v);

	public HRESULT get_atomic(int32* p) mut => VT.[Friend]get_atomic(&this, p);
}

[CRepr]struct IHTMLCommentElement2 : IDispatch
{
	public new const Guid IID = .(0x3050f813, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_data;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_data;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* p) get_length;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 offset, int32 Count, BSTR* pbstrsubString) substringData;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR bstrstring) appendData;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 offset, BSTR bstrstring) insertData;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 offset, int32 Count) deleteData;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 offset, int32 Count, BSTR bstrstring) replaceData;
	}


	public HRESULT put_data(BSTR v) mut => VT.[Friend]put_data(&this, v);

	public HRESULT get_data(BSTR* p) mut => VT.[Friend]get_data(&this, p);

	public HRESULT get_length(int32* p) mut => VT.[Friend]get_length(&this, p);

	public HRESULT substringData(int32 offset, int32 Count, BSTR* pbstrsubString) mut => VT.[Friend]substringData(&this, offset, Count, pbstrsubString);

	public HRESULT appendData(BSTR bstrstring) mut => VT.[Friend]appendData(&this, bstrstring);

	public HRESULT insertData(int32 offset, BSTR bstrstring) mut => VT.[Friend]insertData(&this, offset, bstrstring);

	public HRESULT deleteData(int32 offset, int32 Count) mut => VT.[Friend]deleteData(&this, offset, Count);

	public HRESULT replaceData(int32 offset, int32 Count, BSTR bstrstring) mut => VT.[Friend]replaceData(&this, offset, Count, bstrstring);
}

[CRepr]struct IHTMLCommentElement3 : IDispatch
{
	public new const Guid IID = .(0x3051073f, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 offset, int32 Count, BSTR* pbstrsubString) substringData;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 offset, BSTR bstrstring) insertData;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 offset, int32 Count) deleteData;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 offset, int32 Count, BSTR bstrstring) replaceData;
	}


	public HRESULT substringData(int32 offset, int32 Count, BSTR* pbstrsubString) mut => VT.[Friend]substringData(&this, offset, Count, pbstrsubString);

	public HRESULT insertData(int32 offset, BSTR bstrstring) mut => VT.[Friend]insertData(&this, offset, bstrstring);

	public HRESULT deleteData(int32 offset, int32 Count) mut => VT.[Friend]deleteData(&this, offset, Count);

	public HRESULT replaceData(int32 offset, int32 Count, BSTR bstrstring) mut => VT.[Friend]replaceData(&this, offset, Count, bstrstring);
}

[CRepr]struct DispHTMLCommentElement : IDispatch
{
	public new const Guid IID = .(0x3050f50a, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
	}

}

[CRepr]struct IHTMLPhraseElement : IDispatch
{
	public new const Guid IID = .(0x3050f20a, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
	}

}

[CRepr]struct IHTMLPhraseElement2 : IDispatch
{
	public new const Guid IID = .(0x3050f824, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_cite;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_cite;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_dateTime;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_dateTime;
	}


	public HRESULT put_cite(BSTR v) mut => VT.[Friend]put_cite(&this, v);

	public HRESULT get_cite(BSTR* p) mut => VT.[Friend]get_cite(&this, p);

	public HRESULT put_dateTime(BSTR v) mut => VT.[Friend]put_dateTime(&this, v);

	public HRESULT get_dateTime(BSTR* p) mut => VT.[Friend]get_dateTime(&this, p);
}

[CRepr]struct IHTMLPhraseElement3 : IDispatch
{
	public new const Guid IID = .(0x3051043d, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_cite;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_cite;
	}


	public HRESULT put_cite(BSTR v) mut => VT.[Friend]put_cite(&this, v);

	public HRESULT get_cite(BSTR* p) mut => VT.[Friend]get_cite(&this, p);
}

[CRepr]struct IHTMLSpanElement : IDispatch
{
	public new const Guid IID = .(0x3050f3f3, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
	}

}

[CRepr]struct DispHTMLPhraseElement : IDispatch
{
	public new const Guid IID = .(0x3050f52d, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
	}

}

[CRepr]struct DispHTMLSpanElement : IDispatch
{
	public new const Guid IID = .(0x3050f548, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
	}

}

[CRepr]struct HTMLTableEvents2 : IDispatch
{
	public new const Guid IID = .(0x3050f623, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
	}

}

[CRepr]struct HTMLTableEvents : IDispatch
{
	public new const Guid IID = .(0x3050f407, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
	}

}

[CRepr]struct IHTMLTableSection : IDispatch
{
	public new const Guid IID = .(0x3050f23b, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_align;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_align;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_vAlign;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_vAlign;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_bgColor;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_bgColor;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IHTMLElementCollection** p) get_rows;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 index, IDispatch** row) insertRow;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 index) deleteRow;
	}


	public HRESULT put_align(BSTR v) mut => VT.[Friend]put_align(&this, v);

	public HRESULT get_align(BSTR* p) mut => VT.[Friend]get_align(&this, p);

	public HRESULT put_vAlign(BSTR v) mut => VT.[Friend]put_vAlign(&this, v);

	public HRESULT get_vAlign(BSTR* p) mut => VT.[Friend]get_vAlign(&this, p);

	public HRESULT put_bgColor(VARIANT v) mut => VT.[Friend]put_bgColor(&this, v);

	public HRESULT get_bgColor(VARIANT* p) mut => VT.[Friend]get_bgColor(&this, p);

	public HRESULT get_rows(IHTMLElementCollection** p) mut => VT.[Friend]get_rows(&this, p);

	public HRESULT insertRow(int32 index, IDispatch** row) mut => VT.[Friend]insertRow(&this, index, row);

	public HRESULT deleteRow(int32 index) mut => VT.[Friend]deleteRow(&this, index);
}

[CRepr]struct IHTMLTable : IDispatch
{
	public new const Guid IID = .(0x3050f21e, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 v) put_cols;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* p) get_cols;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_border;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_border;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_frame;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_frame;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_rules;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_rules;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_cellSpacing;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_cellSpacing;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_cellPadding;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_cellPadding;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_background;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_background;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_bgColor;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_bgColor;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_borderColor;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_borderColor;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_borderColorLight;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_borderColorLight;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_borderColorDark;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_borderColorDark;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_align;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_align;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self) refresh;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IHTMLElementCollection** p) get_rows;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_width;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_width;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_height;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_height;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 v) put_dataPageSize;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* p) get_dataPageSize;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self) nextPage;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self) previousPage;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IHTMLTableSection** p) get_tHead;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IHTMLTableSection** p) get_tFoot;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IHTMLElementCollection** p) get_tBodies;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IHTMLTableCaption** p) get_caption;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IDispatch** head) createTHead;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self) deleteTHead;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IDispatch** foot) createTFoot;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self) deleteTFoot;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IHTMLTableCaption** caption) createCaption;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self) deleteCaption;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 index, IDispatch** row) insertRow;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 index) deleteRow;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_readyState;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_onreadystatechange;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_onreadystatechange;
	}


	public HRESULT put_cols(int32 v) mut => VT.[Friend]put_cols(&this, v);

	public HRESULT get_cols(int32* p) mut => VT.[Friend]get_cols(&this, p);

	public HRESULT put_border(VARIANT v) mut => VT.[Friend]put_border(&this, v);

	public HRESULT get_border(VARIANT* p) mut => VT.[Friend]get_border(&this, p);

	public HRESULT put_frame(BSTR v) mut => VT.[Friend]put_frame(&this, v);

	public HRESULT get_frame(BSTR* p) mut => VT.[Friend]get_frame(&this, p);

	public HRESULT put_rules(BSTR v) mut => VT.[Friend]put_rules(&this, v);

	public HRESULT get_rules(BSTR* p) mut => VT.[Friend]get_rules(&this, p);

	public HRESULT put_cellSpacing(VARIANT v) mut => VT.[Friend]put_cellSpacing(&this, v);

	public HRESULT get_cellSpacing(VARIANT* p) mut => VT.[Friend]get_cellSpacing(&this, p);

	public HRESULT put_cellPadding(VARIANT v) mut => VT.[Friend]put_cellPadding(&this, v);

	public HRESULT get_cellPadding(VARIANT* p) mut => VT.[Friend]get_cellPadding(&this, p);

	public HRESULT put_background(BSTR v) mut => VT.[Friend]put_background(&this, v);

	public HRESULT get_background(BSTR* p) mut => VT.[Friend]get_background(&this, p);

	public HRESULT put_bgColor(VARIANT v) mut => VT.[Friend]put_bgColor(&this, v);

	public HRESULT get_bgColor(VARIANT* p) mut => VT.[Friend]get_bgColor(&this, p);

	public HRESULT put_borderColor(VARIANT v) mut => VT.[Friend]put_borderColor(&this, v);

	public HRESULT get_borderColor(VARIANT* p) mut => VT.[Friend]get_borderColor(&this, p);

	public HRESULT put_borderColorLight(VARIANT v) mut => VT.[Friend]put_borderColorLight(&this, v);

	public HRESULT get_borderColorLight(VARIANT* p) mut => VT.[Friend]get_borderColorLight(&this, p);

	public HRESULT put_borderColorDark(VARIANT v) mut => VT.[Friend]put_borderColorDark(&this, v);

	public HRESULT get_borderColorDark(VARIANT* p) mut => VT.[Friend]get_borderColorDark(&this, p);

	public HRESULT put_align(BSTR v) mut => VT.[Friend]put_align(&this, v);

	public HRESULT get_align(BSTR* p) mut => VT.[Friend]get_align(&this, p);

	public HRESULT refresh() mut => VT.[Friend]refresh(&this);

	public HRESULT get_rows(IHTMLElementCollection** p) mut => VT.[Friend]get_rows(&this, p);

	public HRESULT put_width(VARIANT v) mut => VT.[Friend]put_width(&this, v);

	public HRESULT get_width(VARIANT* p) mut => VT.[Friend]get_width(&this, p);

	public HRESULT put_height(VARIANT v) mut => VT.[Friend]put_height(&this, v);

	public HRESULT get_height(VARIANT* p) mut => VT.[Friend]get_height(&this, p);

	public HRESULT put_dataPageSize(int32 v) mut => VT.[Friend]put_dataPageSize(&this, v);

	public HRESULT get_dataPageSize(int32* p) mut => VT.[Friend]get_dataPageSize(&this, p);

	public HRESULT nextPage() mut => VT.[Friend]nextPage(&this);

	public HRESULT previousPage() mut => VT.[Friend]previousPage(&this);

	public HRESULT get_tHead(IHTMLTableSection** p) mut => VT.[Friend]get_tHead(&this, p);

	public HRESULT get_tFoot(IHTMLTableSection** p) mut => VT.[Friend]get_tFoot(&this, p);

	public HRESULT get_tBodies(IHTMLElementCollection** p) mut => VT.[Friend]get_tBodies(&this, p);

	public HRESULT get_caption(IHTMLTableCaption** p) mut => VT.[Friend]get_caption(&this, p);

	public HRESULT createTHead(IDispatch** head) mut => VT.[Friend]createTHead(&this, head);

	public HRESULT deleteTHead() mut => VT.[Friend]deleteTHead(&this);

	public HRESULT createTFoot(IDispatch** foot) mut => VT.[Friend]createTFoot(&this, foot);

	public HRESULT deleteTFoot() mut => VT.[Friend]deleteTFoot(&this);

	public HRESULT createCaption(IHTMLTableCaption** caption) mut => VT.[Friend]createCaption(&this, caption);

	public HRESULT deleteCaption() mut => VT.[Friend]deleteCaption(&this);

	public HRESULT insertRow(int32 index, IDispatch** row) mut => VT.[Friend]insertRow(&this, index, row);

	public HRESULT deleteRow(int32 index) mut => VT.[Friend]deleteRow(&this, index);

	public HRESULT get_readyState(BSTR* p) mut => VT.[Friend]get_readyState(&this, p);

	public HRESULT put_onreadystatechange(VARIANT v) mut => VT.[Friend]put_onreadystatechange(&this, v);

	public HRESULT get_onreadystatechange(VARIANT* p) mut => VT.[Friend]get_onreadystatechange(&this, p);
}

[CRepr]struct IHTMLTable2 : IDispatch
{
	public new const Guid IID = .(0x3050f4ad, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self) firstPage;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self) lastPage;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IHTMLElementCollection** p) get_cells;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 indexFrom, int32 indexTo, IDispatch** row) moveRow;
	}


	public HRESULT firstPage() mut => VT.[Friend]firstPage(&this);

	public HRESULT lastPage() mut => VT.[Friend]lastPage(&this);

	public HRESULT get_cells(IHTMLElementCollection** p) mut => VT.[Friend]get_cells(&this, p);

	public HRESULT moveRow(int32 indexFrom, int32 indexTo, IDispatch** row) mut => VT.[Friend]moveRow(&this, indexFrom, indexTo, row);
}

[CRepr]struct IHTMLTable3 : IDispatch
{
	public new const Guid IID = .(0x3050f829, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_summary;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_summary;
	}


	public HRESULT put_summary(BSTR v) mut => VT.[Friend]put_summary(&this, v);

	public HRESULT get_summary(BSTR* p) mut => VT.[Friend]get_summary(&this, p);
}

[CRepr]struct IHTMLTable4 : IDispatch
{
	public new const Guid IID = .(0x305106c2, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IHTMLTableSection* v) putref_tHead;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IHTMLTableSection** p) get_tHead;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IHTMLTableSection* v) putref_tFoot;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IHTMLTableSection** p) get_tFoot;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IHTMLTableCaption* v) putref_caption;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IHTMLTableCaption** p) get_caption;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 index, IDispatch** row) insertRow;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 index) deleteRow;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IHTMLTableSection** tbody) createTBody;
	}


	public HRESULT putref_tHead(IHTMLTableSection* v) mut => VT.[Friend]putref_tHead(&this, v);

	public HRESULT get_tHead(IHTMLTableSection** p) mut => VT.[Friend]get_tHead(&this, p);

	public HRESULT putref_tFoot(IHTMLTableSection* v) mut => VT.[Friend]putref_tFoot(&this, v);

	public HRESULT get_tFoot(IHTMLTableSection** p) mut => VT.[Friend]get_tFoot(&this, p);

	public HRESULT putref_caption(IHTMLTableCaption* v) mut => VT.[Friend]putref_caption(&this, v);

	public HRESULT get_caption(IHTMLTableCaption** p) mut => VT.[Friend]get_caption(&this, p);

	public HRESULT insertRow(int32 index, IDispatch** row) mut => VT.[Friend]insertRow(&this, index, row);

	public HRESULT deleteRow(int32 index) mut => VT.[Friend]deleteRow(&this, index);

	public HRESULT createTBody(IHTMLTableSection** tbody) mut => VT.[Friend]createTBody(&this, tbody);
}

[CRepr]struct IHTMLTableCol : IDispatch
{
	public new const Guid IID = .(0x3050f23a, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 v) put_span;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* p) get_span;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_width;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_width;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_align;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_align;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_vAlign;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_vAlign;
	}


	public HRESULT put_span(int32 v) mut => VT.[Friend]put_span(&this, v);

	public HRESULT get_span(int32* p) mut => VT.[Friend]get_span(&this, p);

	public HRESULT put_width(VARIANT v) mut => VT.[Friend]put_width(&this, v);

	public HRESULT get_width(VARIANT* p) mut => VT.[Friend]get_width(&this, p);

	public HRESULT put_align(BSTR v) mut => VT.[Friend]put_align(&this, v);

	public HRESULT get_align(BSTR* p) mut => VT.[Friend]get_align(&this, p);

	public HRESULT put_vAlign(BSTR v) mut => VT.[Friend]put_vAlign(&this, v);

	public HRESULT get_vAlign(BSTR* p) mut => VT.[Friend]get_vAlign(&this, p);
}

[CRepr]struct IHTMLTableCol2 : IDispatch
{
	public new const Guid IID = .(0x3050f82a, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_ch;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_ch;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_chOff;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_chOff;
	}


	public HRESULT put_ch(BSTR v) mut => VT.[Friend]put_ch(&this, v);

	public HRESULT get_ch(BSTR* p) mut => VT.[Friend]get_ch(&this, p);

	public HRESULT put_chOff(BSTR v) mut => VT.[Friend]put_chOff(&this, v);

	public HRESULT get_chOff(BSTR* p) mut => VT.[Friend]get_chOff(&this, p);
}

[CRepr]struct IHTMLTableCol3 : IDispatch
{
	public new const Guid IID = .(0x305106c4, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_ch;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_ch;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_chOff;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_chOff;
	}


	public HRESULT put_ch(BSTR v) mut => VT.[Friend]put_ch(&this, v);

	public HRESULT get_ch(BSTR* p) mut => VT.[Friend]get_ch(&this, p);

	public HRESULT put_chOff(BSTR v) mut => VT.[Friend]put_chOff(&this, v);

	public HRESULT get_chOff(BSTR* p) mut => VT.[Friend]get_chOff(&this, p);
}

[CRepr]struct IHTMLTableSection2 : IDispatch
{
	public new const Guid IID = .(0x3050f5c7, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 indexFrom, int32 indexTo, IDispatch** row) moveRow;
	}


	public HRESULT moveRow(int32 indexFrom, int32 indexTo, IDispatch** row) mut => VT.[Friend]moveRow(&this, indexFrom, indexTo, row);
}

[CRepr]struct IHTMLTableSection3 : IDispatch
{
	public new const Guid IID = .(0x3050f82b, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_ch;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_ch;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_chOff;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_chOff;
	}


	public HRESULT put_ch(BSTR v) mut => VT.[Friend]put_ch(&this, v);

	public HRESULT get_ch(BSTR* p) mut => VT.[Friend]get_ch(&this, p);

	public HRESULT put_chOff(BSTR v) mut => VT.[Friend]put_chOff(&this, v);

	public HRESULT get_chOff(BSTR* p) mut => VT.[Friend]get_chOff(&this, p);
}

[CRepr]struct IHTMLTableSection4 : IDispatch
{
	public new const Guid IID = .(0x305106c5, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_ch;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_ch;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_chOff;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_chOff;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 index, IDispatch** row) insertRow;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 index) deleteRow;
	}


	public HRESULT put_ch(BSTR v) mut => VT.[Friend]put_ch(&this, v);

	public HRESULT get_ch(BSTR* p) mut => VT.[Friend]get_ch(&this, p);

	public HRESULT put_chOff(BSTR v) mut => VT.[Friend]put_chOff(&this, v);

	public HRESULT get_chOff(BSTR* p) mut => VT.[Friend]get_chOff(&this, p);

	public HRESULT insertRow(int32 index, IDispatch** row) mut => VT.[Friend]insertRow(&this, index, row);

	public HRESULT deleteRow(int32 index) mut => VT.[Friend]deleteRow(&this, index);
}

[CRepr]struct IHTMLTableRow : IDispatch
{
	public new const Guid IID = .(0x3050f23c, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_align;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_align;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_vAlign;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_vAlign;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_bgColor;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_bgColor;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_borderColor;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_borderColor;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_borderColorLight;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_borderColorLight;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_borderColorDark;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_borderColorDark;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* p) get_rowIndex;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* p) get_sectionRowIndex;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IHTMLElementCollection** p) get_cells;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 index, IDispatch** row) insertCell;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 index) deleteCell;
	}


	public HRESULT put_align(BSTR v) mut => VT.[Friend]put_align(&this, v);

	public HRESULT get_align(BSTR* p) mut => VT.[Friend]get_align(&this, p);

	public HRESULT put_vAlign(BSTR v) mut => VT.[Friend]put_vAlign(&this, v);

	public HRESULT get_vAlign(BSTR* p) mut => VT.[Friend]get_vAlign(&this, p);

	public HRESULT put_bgColor(VARIANT v) mut => VT.[Friend]put_bgColor(&this, v);

	public HRESULT get_bgColor(VARIANT* p) mut => VT.[Friend]get_bgColor(&this, p);

	public HRESULT put_borderColor(VARIANT v) mut => VT.[Friend]put_borderColor(&this, v);

	public HRESULT get_borderColor(VARIANT* p) mut => VT.[Friend]get_borderColor(&this, p);

	public HRESULT put_borderColorLight(VARIANT v) mut => VT.[Friend]put_borderColorLight(&this, v);

	public HRESULT get_borderColorLight(VARIANT* p) mut => VT.[Friend]get_borderColorLight(&this, p);

	public HRESULT put_borderColorDark(VARIANT v) mut => VT.[Friend]put_borderColorDark(&this, v);

	public HRESULT get_borderColorDark(VARIANT* p) mut => VT.[Friend]get_borderColorDark(&this, p);

	public HRESULT get_rowIndex(int32* p) mut => VT.[Friend]get_rowIndex(&this, p);

	public HRESULT get_sectionRowIndex(int32* p) mut => VT.[Friend]get_sectionRowIndex(&this, p);

	public HRESULT get_cells(IHTMLElementCollection** p) mut => VT.[Friend]get_cells(&this, p);

	public HRESULT insertCell(int32 index, IDispatch** row) mut => VT.[Friend]insertCell(&this, index, row);

	public HRESULT deleteCell(int32 index) mut => VT.[Friend]deleteCell(&this, index);
}

[CRepr]struct IHTMLTableRow2 : IDispatch
{
	public new const Guid IID = .(0x3050f4a1, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_height;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_height;
	}


	public HRESULT put_height(VARIANT v) mut => VT.[Friend]put_height(&this, v);

	public HRESULT get_height(VARIANT* p) mut => VT.[Friend]get_height(&this, p);
}

[CRepr]struct IHTMLTableRow3 : IDispatch
{
	public new const Guid IID = .(0x3050f82c, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_ch;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_ch;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_chOff;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_chOff;
	}


	public HRESULT put_ch(BSTR v) mut => VT.[Friend]put_ch(&this, v);

	public HRESULT get_ch(BSTR* p) mut => VT.[Friend]get_ch(&this, p);

	public HRESULT put_chOff(BSTR v) mut => VT.[Friend]put_chOff(&this, v);

	public HRESULT get_chOff(BSTR* p) mut => VT.[Friend]get_chOff(&this, p);
}

[CRepr]struct IHTMLTableRow4 : IDispatch
{
	public new const Guid IID = .(0x305106c6, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_ch;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_ch;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_chOff;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_chOff;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 index, IDispatch** row) insertCell;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 index) deleteCell;
	}


	public HRESULT put_ch(BSTR v) mut => VT.[Friend]put_ch(&this, v);

	public HRESULT get_ch(BSTR* p) mut => VT.[Friend]get_ch(&this, p);

	public HRESULT put_chOff(BSTR v) mut => VT.[Friend]put_chOff(&this, v);

	public HRESULT get_chOff(BSTR* p) mut => VT.[Friend]get_chOff(&this, p);

	public HRESULT insertCell(int32 index, IDispatch** row) mut => VT.[Friend]insertCell(&this, index, row);

	public HRESULT deleteCell(int32 index) mut => VT.[Friend]deleteCell(&this, index);
}

[CRepr]struct IHTMLTableRowMetrics : IDispatch
{
	public new const Guid IID = .(0x3050f413, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* p) get_clientHeight;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* p) get_clientWidth;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* p) get_clientTop;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* p) get_clientLeft;
	}


	public HRESULT get_clientHeight(int32* p) mut => VT.[Friend]get_clientHeight(&this, p);

	public HRESULT get_clientWidth(int32* p) mut => VT.[Friend]get_clientWidth(&this, p);

	public HRESULT get_clientTop(int32* p) mut => VT.[Friend]get_clientTop(&this, p);

	public HRESULT get_clientLeft(int32* p) mut => VT.[Friend]get_clientLeft(&this, p);
}

[CRepr]struct IHTMLTableCell : IDispatch
{
	public new const Guid IID = .(0x3050f23d, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 v) put_rowSpan;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* p) get_rowSpan;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 v) put_colSpan;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* p) get_colSpan;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_align;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_align;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_vAlign;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_vAlign;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_bgColor;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_bgColor;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16 v) put_noWrap;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16* p) get_noWrap;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_background;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_background;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_borderColor;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_borderColor;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_borderColorLight;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_borderColorLight;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_borderColorDark;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_borderColorDark;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_width;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_width;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_height;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_height;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* p) get_cellIndex;
	}


	public HRESULT put_rowSpan(int32 v) mut => VT.[Friend]put_rowSpan(&this, v);

	public HRESULT get_rowSpan(int32* p) mut => VT.[Friend]get_rowSpan(&this, p);

	public HRESULT put_colSpan(int32 v) mut => VT.[Friend]put_colSpan(&this, v);

	public HRESULT get_colSpan(int32* p) mut => VT.[Friend]get_colSpan(&this, p);

	public HRESULT put_align(BSTR v) mut => VT.[Friend]put_align(&this, v);

	public HRESULT get_align(BSTR* p) mut => VT.[Friend]get_align(&this, p);

	public HRESULT put_vAlign(BSTR v) mut => VT.[Friend]put_vAlign(&this, v);

	public HRESULT get_vAlign(BSTR* p) mut => VT.[Friend]get_vAlign(&this, p);

	public HRESULT put_bgColor(VARIANT v) mut => VT.[Friend]put_bgColor(&this, v);

	public HRESULT get_bgColor(VARIANT* p) mut => VT.[Friend]get_bgColor(&this, p);

	public HRESULT put_noWrap(int16 v) mut => VT.[Friend]put_noWrap(&this, v);

	public HRESULT get_noWrap(int16* p) mut => VT.[Friend]get_noWrap(&this, p);

	public HRESULT put_background(BSTR v) mut => VT.[Friend]put_background(&this, v);

	public HRESULT get_background(BSTR* p) mut => VT.[Friend]get_background(&this, p);

	public HRESULT put_borderColor(VARIANT v) mut => VT.[Friend]put_borderColor(&this, v);

	public HRESULT get_borderColor(VARIANT* p) mut => VT.[Friend]get_borderColor(&this, p);

	public HRESULT put_borderColorLight(VARIANT v) mut => VT.[Friend]put_borderColorLight(&this, v);

	public HRESULT get_borderColorLight(VARIANT* p) mut => VT.[Friend]get_borderColorLight(&this, p);

	public HRESULT put_borderColorDark(VARIANT v) mut => VT.[Friend]put_borderColorDark(&this, v);

	public HRESULT get_borderColorDark(VARIANT* p) mut => VT.[Friend]get_borderColorDark(&this, p);

	public HRESULT put_width(VARIANT v) mut => VT.[Friend]put_width(&this, v);

	public HRESULT get_width(VARIANT* p) mut => VT.[Friend]get_width(&this, p);

	public HRESULT put_height(VARIANT v) mut => VT.[Friend]put_height(&this, v);

	public HRESULT get_height(VARIANT* p) mut => VT.[Friend]get_height(&this, p);

	public HRESULT get_cellIndex(int32* p) mut => VT.[Friend]get_cellIndex(&this, p);
}

[CRepr]struct IHTMLTableCell2 : IDispatch
{
	public new const Guid IID = .(0x3050f82d, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_abbr;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_abbr;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_axis;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_axis;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_ch;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_ch;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_chOff;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_chOff;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_headers;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_headers;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_scope;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_scope;
	}


	public HRESULT put_abbr(BSTR v) mut => VT.[Friend]put_abbr(&this, v);

	public HRESULT get_abbr(BSTR* p) mut => VT.[Friend]get_abbr(&this, p);

	public HRESULT put_axis(BSTR v) mut => VT.[Friend]put_axis(&this, v);

	public HRESULT get_axis(BSTR* p) mut => VT.[Friend]get_axis(&this, p);

	public HRESULT put_ch(BSTR v) mut => VT.[Friend]put_ch(&this, v);

	public HRESULT get_ch(BSTR* p) mut => VT.[Friend]get_ch(&this, p);

	public HRESULT put_chOff(BSTR v) mut => VT.[Friend]put_chOff(&this, v);

	public HRESULT get_chOff(BSTR* p) mut => VT.[Friend]get_chOff(&this, p);

	public HRESULT put_headers(BSTR v) mut => VT.[Friend]put_headers(&this, v);

	public HRESULT get_headers(BSTR* p) mut => VT.[Friend]get_headers(&this, p);

	public HRESULT put_scope(BSTR v) mut => VT.[Friend]put_scope(&this, v);

	public HRESULT get_scope(BSTR* p) mut => VT.[Friend]get_scope(&this, p);
}

[CRepr]struct IHTMLTableCell3 : IDispatch
{
	public new const Guid IID = .(0x305106c7, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_ch;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_ch;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_chOff;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_chOff;
	}


	public HRESULT put_ch(BSTR v) mut => VT.[Friend]put_ch(&this, v);

	public HRESULT get_ch(BSTR* p) mut => VT.[Friend]get_ch(&this, p);

	public HRESULT put_chOff(BSTR v) mut => VT.[Friend]put_chOff(&this, v);

	public HRESULT get_chOff(BSTR* p) mut => VT.[Friend]get_chOff(&this, p);
}

[CRepr]struct DispHTMLTable : IDispatch
{
	public new const Guid IID = .(0x3050f532, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
	}

}

[CRepr]struct DispHTMLTableCol : IDispatch
{
	public new const Guid IID = .(0x3050f533, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
	}

}

[CRepr]struct DispHTMLTableSection : IDispatch
{
	public new const Guid IID = .(0x3050f534, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
	}

}

[CRepr]struct DispHTMLTableRow : IDispatch
{
	public new const Guid IID = .(0x3050f535, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
	}

}

[CRepr]struct DispHTMLTableCell : IDispatch
{
	public new const Guid IID = .(0x3050f536, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
	}

}

[CRepr]struct HTMLScriptEvents2 : IDispatch
{
	public new const Guid IID = .(0x3050f621, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
	}

}

[CRepr]struct HTMLScriptEvents : IDispatch
{
	public new const Guid IID = .(0x3050f3e2, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
	}

}

[CRepr]struct IHTMLScriptElement : IDispatch
{
	public new const Guid IID = .(0x3050f28b, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_src;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_src;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_htmlFor;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_htmlFor;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_event;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_event;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_text;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_text;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16 v) put_defer;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16* p) get_defer;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_readyState;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_onerror;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_onerror;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_type;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_type;
	}


	public HRESULT put_src(BSTR v) mut => VT.[Friend]put_src(&this, v);

	public HRESULT get_src(BSTR* p) mut => VT.[Friend]get_src(&this, p);

	public HRESULT put_htmlFor(BSTR v) mut => VT.[Friend]put_htmlFor(&this, v);

	public HRESULT get_htmlFor(BSTR* p) mut => VT.[Friend]get_htmlFor(&this, p);

	public HRESULT put_event(BSTR v) mut => VT.[Friend]put_event(&this, v);

	public HRESULT get_event(BSTR* p) mut => VT.[Friend]get_event(&this, p);

	public HRESULT put_text(BSTR v) mut => VT.[Friend]put_text(&this, v);

	public HRESULT get_text(BSTR* p) mut => VT.[Friend]get_text(&this, p);

	public HRESULT put_defer(int16 v) mut => VT.[Friend]put_defer(&this, v);

	public HRESULT get_defer(int16* p) mut => VT.[Friend]get_defer(&this, p);

	public HRESULT get_readyState(BSTR* p) mut => VT.[Friend]get_readyState(&this, p);

	public HRESULT put_onerror(VARIANT v) mut => VT.[Friend]put_onerror(&this, v);

	public HRESULT get_onerror(VARIANT* p) mut => VT.[Friend]get_onerror(&this, p);

	public HRESULT put_type(BSTR v) mut => VT.[Friend]put_type(&this, v);

	public HRESULT get_type(BSTR* p) mut => VT.[Friend]get_type(&this, p);
}

[CRepr]struct IHTMLScriptElement2 : IDispatch
{
	public new const Guid IID = .(0x3050f828, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_charset;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_charset;
	}


	public HRESULT put_charset(BSTR v) mut => VT.[Friend]put_charset(&this, v);

	public HRESULT get_charset(BSTR* p) mut => VT.[Friend]get_charset(&this, p);
}

[CRepr]struct IHTMLScriptElement3 : IDispatch
{
	public new const Guid IID = .(0x30510447, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_src;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_src;
	}


	public HRESULT put_src(BSTR v) mut => VT.[Friend]put_src(&this, v);

	public HRESULT get_src(BSTR* p) mut => VT.[Friend]get_src(&this, p);
}

[CRepr]struct IHTMLScriptElement4 : IDispatch
{
	public new const Guid IID = .(0x30510801, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_usedCharset;
	}


	public HRESULT get_usedCharset(BSTR* p) mut => VT.[Friend]get_usedCharset(&this, p);
}

[CRepr]struct DispHTMLScriptElement : IDispatch
{
	public new const Guid IID = .(0x3050f530, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
	}

}

[CRepr]struct IHTMLNoShowElement : IDispatch
{
	public new const Guid IID = .(0x3050f38a, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
	}

}

[CRepr]struct DispHTMLNoShowElement : IDispatch
{
	public new const Guid IID = .(0x3050f528, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
	}

}

[CRepr]struct HTMLObjectElementEvents2 : IDispatch
{
	public new const Guid IID = .(0x3050f620, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
	}

}

[CRepr]struct HTMLObjectElementEvents : IDispatch
{
	public new const Guid IID = .(0x3050f3c4, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
	}

}

[CRepr]struct IHTMLObjectElement : IDispatch
{
	public new const Guid IID = .(0x3050f24f, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IDispatch** p) get_object;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_classid;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_data;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IDispatch* v) putref_recordset;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IDispatch** p) get_recordset;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_align;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_align;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_name;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_name;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_codeBase;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_codeBase;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_codeType;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_codeType;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_code;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_code;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_BaseHref;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_type;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_type;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IHTMLFormElement** p) get_form;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_width;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_width;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_height;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_height;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* p) get_readyState;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_onreadystatechange;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_onreadystatechange;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_onerror;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_onerror;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_altHtml;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_altHtml;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 v) put_vspace;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* p) get_vspace;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 v) put_hspace;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* p) get_hspace;
	}


	public HRESULT get_object(IDispatch** p) mut => VT.[Friend]get_object(&this, p);

	public HRESULT get_classid(BSTR* p) mut => VT.[Friend]get_classid(&this, p);

	public HRESULT get_data(BSTR* p) mut => VT.[Friend]get_data(&this, p);

	public HRESULT putref_recordset(IDispatch* v) mut => VT.[Friend]putref_recordset(&this, v);

	public HRESULT get_recordset(IDispatch** p) mut => VT.[Friend]get_recordset(&this, p);

	public HRESULT put_align(BSTR v) mut => VT.[Friend]put_align(&this, v);

	public HRESULT get_align(BSTR* p) mut => VT.[Friend]get_align(&this, p);

	public HRESULT put_name(BSTR v) mut => VT.[Friend]put_name(&this, v);

	public HRESULT get_name(BSTR* p) mut => VT.[Friend]get_name(&this, p);

	public HRESULT put_codeBase(BSTR v) mut => VT.[Friend]put_codeBase(&this, v);

	public HRESULT get_codeBase(BSTR* p) mut => VT.[Friend]get_codeBase(&this, p);

	public HRESULT put_codeType(BSTR v) mut => VT.[Friend]put_codeType(&this, v);

	public HRESULT get_codeType(BSTR* p) mut => VT.[Friend]get_codeType(&this, p);

	public HRESULT put_code(BSTR v) mut => VT.[Friend]put_code(&this, v);

	public HRESULT get_code(BSTR* p) mut => VT.[Friend]get_code(&this, p);

	public HRESULT get_BaseHref(BSTR* p) mut => VT.[Friend]get_BaseHref(&this, p);

	public HRESULT put_type(BSTR v) mut => VT.[Friend]put_type(&this, v);

	public HRESULT get_type(BSTR* p) mut => VT.[Friend]get_type(&this, p);

	public HRESULT get_form(IHTMLFormElement** p) mut => VT.[Friend]get_form(&this, p);

	public HRESULT put_width(VARIANT v) mut => VT.[Friend]put_width(&this, v);

	public HRESULT get_width(VARIANT* p) mut => VT.[Friend]get_width(&this, p);

	public HRESULT put_height(VARIANT v) mut => VT.[Friend]put_height(&this, v);

	public HRESULT get_height(VARIANT* p) mut => VT.[Friend]get_height(&this, p);

	public HRESULT get_readyState(int32* p) mut => VT.[Friend]get_readyState(&this, p);

	public HRESULT put_onreadystatechange(VARIANT v) mut => VT.[Friend]put_onreadystatechange(&this, v);

	public HRESULT get_onreadystatechange(VARIANT* p) mut => VT.[Friend]get_onreadystatechange(&this, p);

	public HRESULT put_onerror(VARIANT v) mut => VT.[Friend]put_onerror(&this, v);

	public HRESULT get_onerror(VARIANT* p) mut => VT.[Friend]get_onerror(&this, p);

	public HRESULT put_altHtml(BSTR v) mut => VT.[Friend]put_altHtml(&this, v);

	public HRESULT get_altHtml(BSTR* p) mut => VT.[Friend]get_altHtml(&this, p);

	public HRESULT put_vspace(int32 v) mut => VT.[Friend]put_vspace(&this, v);

	public HRESULT get_vspace(int32* p) mut => VT.[Friend]get_vspace(&this, p);

	public HRESULT put_hspace(int32 v) mut => VT.[Friend]put_hspace(&this, v);

	public HRESULT get_hspace(int32* p) mut => VT.[Friend]get_hspace(&this, p);
}

[CRepr]struct IHTMLObjectElement2 : IDispatch
{
	public new const Guid IID = .(0x3050f4cd, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR dataMember, VARIANT* hierarchy, IDispatch** ppRecordset) namedRecordset;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_classid;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_classid;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_data;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_data;
	}


	public HRESULT namedRecordset(BSTR dataMember, VARIANT* hierarchy, IDispatch** ppRecordset) mut => VT.[Friend]namedRecordset(&this, dataMember, hierarchy, ppRecordset);

	public HRESULT put_classid(BSTR v) mut => VT.[Friend]put_classid(&this, v);

	public HRESULT get_classid(BSTR* p) mut => VT.[Friend]get_classid(&this, p);

	public HRESULT put_data(BSTR v) mut => VT.[Friend]put_data(&this, v);

	public HRESULT get_data(BSTR* p) mut => VT.[Friend]get_data(&this, p);
}

[CRepr]struct IHTMLObjectElement3 : IDispatch
{
	public new const Guid IID = .(0x3050f827, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_archive;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_archive;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_alt;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_alt;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16 v) put_declare;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16* p) get_declare;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_standby;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_standby;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_border;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_border;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_useMap;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_useMap;
	}


	public HRESULT put_archive(BSTR v) mut => VT.[Friend]put_archive(&this, v);

	public HRESULT get_archive(BSTR* p) mut => VT.[Friend]get_archive(&this, p);

	public HRESULT put_alt(BSTR v) mut => VT.[Friend]put_alt(&this, v);

	public HRESULT get_alt(BSTR* p) mut => VT.[Friend]get_alt(&this, p);

	public HRESULT put_declare(int16 v) mut => VT.[Friend]put_declare(&this, v);

	public HRESULT get_declare(int16* p) mut => VT.[Friend]get_declare(&this, p);

	public HRESULT put_standby(BSTR v) mut => VT.[Friend]put_standby(&this, v);

	public HRESULT get_standby(BSTR* p) mut => VT.[Friend]get_standby(&this, p);

	public HRESULT put_border(VARIANT v) mut => VT.[Friend]put_border(&this, v);

	public HRESULT get_border(VARIANT* p) mut => VT.[Friend]get_border(&this, p);

	public HRESULT put_useMap(BSTR v) mut => VT.[Friend]put_useMap(&this, v);

	public HRESULT get_useMap(BSTR* p) mut => VT.[Friend]get_useMap(&this, p);
}

[CRepr]struct IHTMLObjectElement4 : IDispatch
{
	public new const Guid IID = .(0x3051043e, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IDispatch** p) get_contentDocument;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_codeBase;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_codeBase;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_data;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_data;
	}


	public HRESULT get_contentDocument(IDispatch** p) mut => VT.[Friend]get_contentDocument(&this, p);

	public HRESULT put_codeBase(BSTR v) mut => VT.[Friend]put_codeBase(&this, v);

	public HRESULT get_codeBase(BSTR* p) mut => VT.[Friend]get_codeBase(&this, p);

	public HRESULT put_data(BSTR v) mut => VT.[Friend]put_data(&this, v);

	public HRESULT get_data(BSTR* p) mut => VT.[Friend]get_data(&this, p);
}

[CRepr]struct IHTMLObjectElement5 : IDispatch
{
	public new const Guid IID = .(0x305104b5, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_object;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_object;
	}


	public HRESULT put_object(BSTR v) mut => VT.[Friend]put_object(&this, v);

	public HRESULT get_object(BSTR* p) mut => VT.[Friend]get_object(&this, p);
}

[CRepr]struct IHTMLParamElement : IDispatch
{
	public new const Guid IID = .(0x3050f83d, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_name;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_name;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_value;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_value;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_type;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_type;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_valueType;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_valueType;
	}


	public HRESULT put_name(BSTR v) mut => VT.[Friend]put_name(&this, v);

	public HRESULT get_name(BSTR* p) mut => VT.[Friend]get_name(&this, p);

	public HRESULT put_value(BSTR v) mut => VT.[Friend]put_value(&this, v);

	public HRESULT get_value(BSTR* p) mut => VT.[Friend]get_value(&this, p);

	public HRESULT put_type(BSTR v) mut => VT.[Friend]put_type(&this, v);

	public HRESULT get_type(BSTR* p) mut => VT.[Friend]get_type(&this, p);

	public HRESULT put_valueType(BSTR v) mut => VT.[Friend]put_valueType(&this, v);

	public HRESULT get_valueType(BSTR* p) mut => VT.[Friend]get_valueType(&this, p);
}

[CRepr]struct IHTMLParamElement2 : IDispatch
{
	public new const Guid IID = .(0x30510444, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_name;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_name;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_type;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_type;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_value;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_value;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_valueType;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_valueType;
	}


	public HRESULT put_name(BSTR v) mut => VT.[Friend]put_name(&this, v);

	public HRESULT get_name(BSTR* p) mut => VT.[Friend]get_name(&this, p);

	public HRESULT put_type(BSTR v) mut => VT.[Friend]put_type(&this, v);

	public HRESULT get_type(BSTR* p) mut => VT.[Friend]get_type(&this, p);

	public HRESULT put_value(BSTR v) mut => VT.[Friend]put_value(&this, v);

	public HRESULT get_value(BSTR* p) mut => VT.[Friend]get_value(&this, p);

	public HRESULT put_valueType(BSTR v) mut => VT.[Friend]put_valueType(&this, v);

	public HRESULT get_valueType(BSTR* p) mut => VT.[Friend]get_valueType(&this, p);
}

[CRepr]struct DispHTMLObjectElement : IDispatch
{
	public new const Guid IID = .(0x3050f529, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
	}

}

[CRepr]struct DispHTMLParamElement : IDispatch
{
	public new const Guid IID = .(0x3050f590, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
	}

}

[CRepr]struct HTMLFrameSiteEvents2 : IDispatch
{
	public new const Guid IID = .(0x3050f7ff, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
	}

}

[CRepr]struct HTMLFrameSiteEvents : IDispatch
{
	public new const Guid IID = .(0x3050f800, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
	}

}

[CRepr]struct IHTMLFrameBase2 : IDispatch
{
	public new const Guid IID = .(0x3050f6db, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IHTMLWindow2** p) get_contentWindow;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_onload;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_onload;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_onreadystatechange;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_onreadystatechange;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_readyState;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16 v) put_allowTransparency;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16* p) get_allowTransparency;
	}


	public HRESULT get_contentWindow(IHTMLWindow2** p) mut => VT.[Friend]get_contentWindow(&this, p);

	public HRESULT put_onload(VARIANT v) mut => VT.[Friend]put_onload(&this, v);

	public HRESULT get_onload(VARIANT* p) mut => VT.[Friend]get_onload(&this, p);

	public HRESULT put_onreadystatechange(VARIANT v) mut => VT.[Friend]put_onreadystatechange(&this, v);

	public HRESULT get_onreadystatechange(VARIANT* p) mut => VT.[Friend]get_onreadystatechange(&this, p);

	public HRESULT get_readyState(BSTR* p) mut => VT.[Friend]get_readyState(&this, p);

	public HRESULT put_allowTransparency(int16 v) mut => VT.[Friend]put_allowTransparency(&this, v);

	public HRESULT get_allowTransparency(int16* p) mut => VT.[Friend]get_allowTransparency(&this, p);
}

[CRepr]struct IHTMLFrameBase3 : IDispatch
{
	public new const Guid IID = .(0x3050f82e, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_longDesc;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_longDesc;
	}


	public HRESULT put_longDesc(BSTR v) mut => VT.[Friend]put_longDesc(&this, v);

	public HRESULT get_longDesc(BSTR* p) mut => VT.[Friend]get_longDesc(&this, p);
}

[CRepr]struct DispHTMLFrameBase : IDispatch
{
	public new const Guid IID = .(0x3050f541, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
	}

}

[CRepr]struct IHTMLFrameElement : IDispatch
{
	public new const Guid IID = .(0x3050f313, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_borderColor;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_borderColor;
	}


	public HRESULT put_borderColor(VARIANT v) mut => VT.[Friend]put_borderColor(&this, v);

	public HRESULT get_borderColor(VARIANT* p) mut => VT.[Friend]get_borderColor(&this, p);
}

[CRepr]struct IHTMLFrameElement2 : IDispatch
{
	public new const Guid IID = .(0x3050f7f5, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_height;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_height;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_width;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_width;
	}


	public HRESULT put_height(VARIANT v) mut => VT.[Friend]put_height(&this, v);

	public HRESULT get_height(VARIANT* p) mut => VT.[Friend]get_height(&this, p);

	public HRESULT put_width(VARIANT v) mut => VT.[Friend]put_width(&this, v);

	public HRESULT get_width(VARIANT* p) mut => VT.[Friend]get_width(&this, p);
}

[CRepr]struct IHTMLFrameElement3 : IDispatch
{
	public new const Guid IID = .(0x3051042d, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IDispatch** p) get_contentDocument;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_src;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_src;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_longDesc;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_longDesc;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_frameBorder;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_frameBorder;
	}


	public HRESULT get_contentDocument(IDispatch** p) mut => VT.[Friend]get_contentDocument(&this, p);

	public HRESULT put_src(BSTR v) mut => VT.[Friend]put_src(&this, v);

	public HRESULT get_src(BSTR* p) mut => VT.[Friend]get_src(&this, p);

	public HRESULT put_longDesc(BSTR v) mut => VT.[Friend]put_longDesc(&this, v);

	public HRESULT get_longDesc(BSTR* p) mut => VT.[Friend]get_longDesc(&this, p);

	public HRESULT put_frameBorder(BSTR v) mut => VT.[Friend]put_frameBorder(&this, v);

	public HRESULT get_frameBorder(BSTR* p) mut => VT.[Friend]get_frameBorder(&this, p);
}

[CRepr]struct DispHTMLFrameElement : IDispatch
{
	public new const Guid IID = .(0x3050f513, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
	}

}

[CRepr]struct IHTMLIFrameElement : IDispatch
{
	public new const Guid IID = .(0x3050f315, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 v) put_vspace;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* p) get_vspace;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 v) put_hspace;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* p) get_hspace;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_align;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_align;
	}


	public HRESULT put_vspace(int32 v) mut => VT.[Friend]put_vspace(&this, v);

	public HRESULT get_vspace(int32* p) mut => VT.[Friend]get_vspace(&this, p);

	public HRESULT put_hspace(int32 v) mut => VT.[Friend]put_hspace(&this, v);

	public HRESULT get_hspace(int32* p) mut => VT.[Friend]get_hspace(&this, p);

	public HRESULT put_align(BSTR v) mut => VT.[Friend]put_align(&this, v);

	public HRESULT get_align(BSTR* p) mut => VT.[Friend]get_align(&this, p);
}

[CRepr]struct IHTMLIFrameElement2 : IDispatch
{
	public new const Guid IID = .(0x3050f4e6, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_height;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_height;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_width;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_width;
	}


	public HRESULT put_height(VARIANT v) mut => VT.[Friend]put_height(&this, v);

	public HRESULT get_height(VARIANT* p) mut => VT.[Friend]get_height(&this, p);

	public HRESULT put_width(VARIANT v) mut => VT.[Friend]put_width(&this, v);

	public HRESULT get_width(VARIANT* p) mut => VT.[Friend]get_width(&this, p);
}

[CRepr]struct IHTMLIFrameElement3 : IDispatch
{
	public new const Guid IID = .(0x30510433, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IDispatch** p) get_contentDocument;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_src;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_src;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_longDesc;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_longDesc;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_frameBorder;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_frameBorder;
	}


	public HRESULT get_contentDocument(IDispatch** p) mut => VT.[Friend]get_contentDocument(&this, p);

	public HRESULT put_src(BSTR v) mut => VT.[Friend]put_src(&this, v);

	public HRESULT get_src(BSTR* p) mut => VT.[Friend]get_src(&this, p);

	public HRESULT put_longDesc(BSTR v) mut => VT.[Friend]put_longDesc(&this, v);

	public HRESULT get_longDesc(BSTR* p) mut => VT.[Friend]get_longDesc(&this, p);

	public HRESULT put_frameBorder(BSTR v) mut => VT.[Friend]put_frameBorder(&this, v);

	public HRESULT get_frameBorder(BSTR* p) mut => VT.[Friend]get_frameBorder(&this, p);
}

[CRepr]struct DispHTMLIFrame : IDispatch
{
	public new const Guid IID = .(0x3050f51b, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
	}

}

[CRepr]struct IHTMLDivPosition : IDispatch
{
	public new const Guid IID = .(0x3050f212, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_align;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_align;
	}


	public HRESULT put_align(BSTR v) mut => VT.[Friend]put_align(&this, v);

	public HRESULT get_align(BSTR* p) mut => VT.[Friend]get_align(&this, p);
}

[CRepr]struct IHTMLFieldSetElement : IDispatch
{
	public new const Guid IID = .(0x3050f3e7, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_align;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_align;
	}


	public HRESULT put_align(BSTR v) mut => VT.[Friend]put_align(&this, v);

	public HRESULT get_align(BSTR* p) mut => VT.[Friend]get_align(&this, p);
}

[CRepr]struct IHTMLFieldSetElement2 : IDispatch
{
	public new const Guid IID = .(0x3050f833, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IHTMLFormElement** p) get_form;
	}


	public HRESULT get_form(IHTMLFormElement** p) mut => VT.[Friend]get_form(&this, p);
}

[CRepr]struct IHTMLLegendElement : IDispatch
{
	public new const Guid IID = .(0x3050f3ea, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_align;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_align;
	}


	public HRESULT put_align(BSTR v) mut => VT.[Friend]put_align(&this, v);

	public HRESULT get_align(BSTR* p) mut => VT.[Friend]get_align(&this, p);
}

[CRepr]struct IHTMLLegendElement2 : IDispatch
{
	public new const Guid IID = .(0x3050f834, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IHTMLFormElement** p) get_form;
	}


	public HRESULT get_form(IHTMLFormElement** p) mut => VT.[Friend]get_form(&this, p);
}

[CRepr]struct DispHTMLDivPosition : IDispatch
{
	public new const Guid IID = .(0x3050f50f, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
	}

}

[CRepr]struct DispHTMLFieldSetElement : IDispatch
{
	public new const Guid IID = .(0x3050f545, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
	}

}

[CRepr]struct DispHTMLLegendElement : IDispatch
{
	public new const Guid IID = .(0x3050f546, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
	}

}

[CRepr]struct IHTMLSpanFlow : IDispatch
{
	public new const Guid IID = .(0x3050f3e5, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_align;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_align;
	}


	public HRESULT put_align(BSTR v) mut => VT.[Friend]put_align(&this, v);

	public HRESULT get_align(BSTR* p) mut => VT.[Friend]get_align(&this, p);
}

[CRepr]struct DispHTMLSpanFlow : IDispatch
{
	public new const Guid IID = .(0x3050f544, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
	}

}

[CRepr]struct IHTMLFrameSetElement : IDispatch
{
	public new const Guid IID = .(0x3050f319, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_rows;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_rows;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_cols;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_cols;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_border;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_border;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_borderColor;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_borderColor;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_frameBorder;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_frameBorder;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_frameSpacing;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_frameSpacing;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_name;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_name;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_onload;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_onload;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_onunload;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_onunload;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_onbeforeunload;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_onbeforeunload;
	}


	public HRESULT put_rows(BSTR v) mut => VT.[Friend]put_rows(&this, v);

	public HRESULT get_rows(BSTR* p) mut => VT.[Friend]get_rows(&this, p);

	public HRESULT put_cols(BSTR v) mut => VT.[Friend]put_cols(&this, v);

	public HRESULT get_cols(BSTR* p) mut => VT.[Friend]get_cols(&this, p);

	public HRESULT put_border(VARIANT v) mut => VT.[Friend]put_border(&this, v);

	public HRESULT get_border(VARIANT* p) mut => VT.[Friend]get_border(&this, p);

	public HRESULT put_borderColor(VARIANT v) mut => VT.[Friend]put_borderColor(&this, v);

	public HRESULT get_borderColor(VARIANT* p) mut => VT.[Friend]get_borderColor(&this, p);

	public HRESULT put_frameBorder(BSTR v) mut => VT.[Friend]put_frameBorder(&this, v);

	public HRESULT get_frameBorder(BSTR* p) mut => VT.[Friend]get_frameBorder(&this, p);

	public HRESULT put_frameSpacing(VARIANT v) mut => VT.[Friend]put_frameSpacing(&this, v);

	public HRESULT get_frameSpacing(VARIANT* p) mut => VT.[Friend]get_frameSpacing(&this, p);

	public HRESULT put_name(BSTR v) mut => VT.[Friend]put_name(&this, v);

	public HRESULT get_name(BSTR* p) mut => VT.[Friend]get_name(&this, p);

	public HRESULT put_onload(VARIANT v) mut => VT.[Friend]put_onload(&this, v);

	public HRESULT get_onload(VARIANT* p) mut => VT.[Friend]get_onload(&this, p);

	public HRESULT put_onunload(VARIANT v) mut => VT.[Friend]put_onunload(&this, v);

	public HRESULT get_onunload(VARIANT* p) mut => VT.[Friend]get_onunload(&this, p);

	public HRESULT put_onbeforeunload(VARIANT v) mut => VT.[Friend]put_onbeforeunload(&this, v);

	public HRESULT get_onbeforeunload(VARIANT* p) mut => VT.[Friend]get_onbeforeunload(&this, p);
}

[CRepr]struct IHTMLFrameSetElement2 : IDispatch
{
	public new const Guid IID = .(0x3050f5c6, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_onbeforeprint;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_onbeforeprint;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_onafterprint;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_onafterprint;
	}


	public HRESULT put_onbeforeprint(VARIANT v) mut => VT.[Friend]put_onbeforeprint(&this, v);

	public HRESULT get_onbeforeprint(VARIANT* p) mut => VT.[Friend]get_onbeforeprint(&this, p);

	public HRESULT put_onafterprint(VARIANT v) mut => VT.[Friend]put_onafterprint(&this, v);

	public HRESULT get_onafterprint(VARIANT* p) mut => VT.[Friend]get_onafterprint(&this, p);
}

[CRepr]struct IHTMLFrameSetElement3 : IDispatch
{
	public new const Guid IID = .(0x30510796, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_onhashchange;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_onhashchange;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_onmessage;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_onmessage;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_onoffline;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_onoffline;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_ononline;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_ononline;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_onstorage;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_onstorage;
	}


	public HRESULT put_onhashchange(VARIANT v) mut => VT.[Friend]put_onhashchange(&this, v);

	public HRESULT get_onhashchange(VARIANT* p) mut => VT.[Friend]get_onhashchange(&this, p);

	public HRESULT put_onmessage(VARIANT v) mut => VT.[Friend]put_onmessage(&this, v);

	public HRESULT get_onmessage(VARIANT* p) mut => VT.[Friend]get_onmessage(&this, p);

	public HRESULT put_onoffline(VARIANT v) mut => VT.[Friend]put_onoffline(&this, v);

	public HRESULT get_onoffline(VARIANT* p) mut => VT.[Friend]get_onoffline(&this, p);

	public HRESULT put_ononline(VARIANT v) mut => VT.[Friend]put_ononline(&this, v);

	public HRESULT get_ononline(VARIANT* p) mut => VT.[Friend]get_ononline(&this, p);

	public HRESULT put_onstorage(VARIANT v) mut => VT.[Friend]put_onstorage(&this, v);

	public HRESULT get_onstorage(VARIANT* p) mut => VT.[Friend]get_onstorage(&this, p);
}

[CRepr]struct DispHTMLFrameSetSite : IDispatch
{
	public new const Guid IID = .(0x3050f514, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
	}

}

[CRepr]struct IHTMLBGsound : IDispatch
{
	public new const Guid IID = .(0x3050f369, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_src;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_src;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_loop;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_loop;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_volume;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_volume;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_balance;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_balance;
	}


	public HRESULT put_src(BSTR v) mut => VT.[Friend]put_src(&this, v);

	public HRESULT get_src(BSTR* p) mut => VT.[Friend]get_src(&this, p);

	public HRESULT put_loop(VARIANT v) mut => VT.[Friend]put_loop(&this, v);

	public HRESULT get_loop(VARIANT* p) mut => VT.[Friend]get_loop(&this, p);

	public HRESULT put_volume(VARIANT v) mut => VT.[Friend]put_volume(&this, v);

	public HRESULT get_volume(VARIANT* p) mut => VT.[Friend]get_volume(&this, p);

	public HRESULT put_balance(VARIANT v) mut => VT.[Friend]put_balance(&this, v);

	public HRESULT get_balance(VARIANT* p) mut => VT.[Friend]get_balance(&this, p);
}

[CRepr]struct DispHTMLBGsound : IDispatch
{
	public new const Guid IID = .(0x3050f53c, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
	}

}

[CRepr]struct IHTMLFontNamesCollection : IDispatch
{
	public new const Guid IID = .(0x3050f376, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* p) get_length;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IUnknown** p) get__newEnum;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 index, BSTR* pBstr) item;
	}


	public HRESULT get_length(int32* p) mut => VT.[Friend]get_length(&this, p);

	public HRESULT get__newEnum(IUnknown** p) mut => VT.[Friend]get__newEnum(&this, p);

	public HRESULT item(int32 index, BSTR* pBstr) mut => VT.[Friend]item(&this, index, pBstr);
}

[CRepr]struct IHTMLFontSizesCollection : IDispatch
{
	public new const Guid IID = .(0x3050f377, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* p) get_length;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IUnknown** p) get__newEnum;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_forFont;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 index, int32* plSize) item;
	}


	public HRESULT get_length(int32* p) mut => VT.[Friend]get_length(&this, p);

	public HRESULT get__newEnum(IUnknown** p) mut => VT.[Friend]get__newEnum(&this, p);

	public HRESULT get_forFont(BSTR* p) mut => VT.[Friend]get_forFont(&this, p);

	public HRESULT item(int32 index, int32* plSize) mut => VT.[Friend]item(&this, index, plSize);
}

[CRepr]struct IHTMLOptionsHolder : IDispatch
{
	public new const Guid IID = .(0x3050f378, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IHTMLDocument2** p) get_document;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IHTMLFontNamesCollection** p) get_fonts;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_execArg;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_execArg;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 v) put_errorLine;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* p) get_errorLine;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 v) put_errorCharacter;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* p) get_errorCharacter;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 v) put_errorCode;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* p) get_errorCode;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_errorMessage;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_errorMessage;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16 v) put_errorDebug;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16* p) get_errorDebug;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IHTMLWindow2** p) get_unsecuredWindowOfDocument;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_findText;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_findText;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16 v) put_anythingAfterFrameset;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16* p) get_anythingAfterFrameset;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR fontName, IHTMLFontSizesCollection** pSizesCollection) sizes;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT initFile, VARIANT initDir, VARIANT filter, VARIANT title, BSTR* pathName) openfiledlg;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT initFile, VARIANT initDir, VARIANT filter, VARIANT title, BSTR* pathName) savefiledlg;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT initColor, int32* rgbColor) choosecolordlg;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self) showSecurityInfo;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IHTMLObjectElement* object, int16* fApartment) isApartmentModel;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR fontName, int32* charset) getCharset;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_secureConnectionInfo;
	}


	public HRESULT get_document(IHTMLDocument2** p) mut => VT.[Friend]get_document(&this, p);

	public HRESULT get_fonts(IHTMLFontNamesCollection** p) mut => VT.[Friend]get_fonts(&this, p);

	public HRESULT put_execArg(VARIANT v) mut => VT.[Friend]put_execArg(&this, v);

	public HRESULT get_execArg(VARIANT* p) mut => VT.[Friend]get_execArg(&this, p);

	public HRESULT put_errorLine(int32 v) mut => VT.[Friend]put_errorLine(&this, v);

	public HRESULT get_errorLine(int32* p) mut => VT.[Friend]get_errorLine(&this, p);

	public HRESULT put_errorCharacter(int32 v) mut => VT.[Friend]put_errorCharacter(&this, v);

	public HRESULT get_errorCharacter(int32* p) mut => VT.[Friend]get_errorCharacter(&this, p);

	public HRESULT put_errorCode(int32 v) mut => VT.[Friend]put_errorCode(&this, v);

	public HRESULT get_errorCode(int32* p) mut => VT.[Friend]get_errorCode(&this, p);

	public HRESULT put_errorMessage(BSTR v) mut => VT.[Friend]put_errorMessage(&this, v);

	public HRESULT get_errorMessage(BSTR* p) mut => VT.[Friend]get_errorMessage(&this, p);

	public HRESULT put_errorDebug(int16 v) mut => VT.[Friend]put_errorDebug(&this, v);

	public HRESULT get_errorDebug(int16* p) mut => VT.[Friend]get_errorDebug(&this, p);

	public HRESULT get_unsecuredWindowOfDocument(IHTMLWindow2** p) mut => VT.[Friend]get_unsecuredWindowOfDocument(&this, p);

	public HRESULT put_findText(BSTR v) mut => VT.[Friend]put_findText(&this, v);

	public HRESULT get_findText(BSTR* p) mut => VT.[Friend]get_findText(&this, p);

	public HRESULT put_anythingAfterFrameset(int16 v) mut => VT.[Friend]put_anythingAfterFrameset(&this, v);

	public HRESULT get_anythingAfterFrameset(int16* p) mut => VT.[Friend]get_anythingAfterFrameset(&this, p);

	public HRESULT sizes(BSTR fontName, IHTMLFontSizesCollection** pSizesCollection) mut => VT.[Friend]sizes(&this, fontName, pSizesCollection);

	public HRESULT openfiledlg(VARIANT initFile, VARIANT initDir, VARIANT filter, VARIANT title, BSTR* pathName) mut => VT.[Friend]openfiledlg(&this, initFile, initDir, filter, title, pathName);

	public HRESULT savefiledlg(VARIANT initFile, VARIANT initDir, VARIANT filter, VARIANT title, BSTR* pathName) mut => VT.[Friend]savefiledlg(&this, initFile, initDir, filter, title, pathName);

	public HRESULT choosecolordlg(VARIANT initColor, int32* rgbColor) mut => VT.[Friend]choosecolordlg(&this, initColor, rgbColor);

	public HRESULT showSecurityInfo() mut => VT.[Friend]showSecurityInfo(&this);

	public HRESULT isApartmentModel(IHTMLObjectElement* object, int16* fApartment) mut => VT.[Friend]isApartmentModel(&this, object, fApartment);

	public HRESULT getCharset(BSTR fontName, int32* charset) mut => VT.[Friend]getCharset(&this, fontName, charset);

	public HRESULT get_secureConnectionInfo(BSTR* p) mut => VT.[Friend]get_secureConnectionInfo(&this, p);
}

[CRepr]struct HTMLStyleElementEvents2 : IDispatch
{
	public new const Guid IID = .(0x3050f615, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
	}

}

[CRepr]struct HTMLStyleElementEvents : IDispatch
{
	public new const Guid IID = .(0x3050f3cb, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
	}

}

[CRepr]struct IHTMLStyleElement : IDispatch
{
	public new const Guid IID = .(0x3050f375, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_type;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_type;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_readyState;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_onreadystatechange;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_onreadystatechange;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_onload;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_onload;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_onerror;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_onerror;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IHTMLStyleSheet** p) get_styleSheet;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16 v) put_disabled;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16* p) get_disabled;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_media;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_media;
	}


	public HRESULT put_type(BSTR v) mut => VT.[Friend]put_type(&this, v);

	public HRESULT get_type(BSTR* p) mut => VT.[Friend]get_type(&this, p);

	public HRESULT get_readyState(BSTR* p) mut => VT.[Friend]get_readyState(&this, p);

	public HRESULT put_onreadystatechange(VARIANT v) mut => VT.[Friend]put_onreadystatechange(&this, v);

	public HRESULT get_onreadystatechange(VARIANT* p) mut => VT.[Friend]get_onreadystatechange(&this, p);

	public HRESULT put_onload(VARIANT v) mut => VT.[Friend]put_onload(&this, v);

	public HRESULT get_onload(VARIANT* p) mut => VT.[Friend]get_onload(&this, p);

	public HRESULT put_onerror(VARIANT v) mut => VT.[Friend]put_onerror(&this, v);

	public HRESULT get_onerror(VARIANT* p) mut => VT.[Friend]get_onerror(&this, p);

	public HRESULT get_styleSheet(IHTMLStyleSheet** p) mut => VT.[Friend]get_styleSheet(&this, p);

	public HRESULT put_disabled(int16 v) mut => VT.[Friend]put_disabled(&this, v);

	public HRESULT get_disabled(int16* p) mut => VT.[Friend]get_disabled(&this, p);

	public HRESULT put_media(BSTR v) mut => VT.[Friend]put_media(&this, v);

	public HRESULT get_media(BSTR* p) mut => VT.[Friend]get_media(&this, p);
}

[CRepr]struct IHTMLStyleElement2 : IDispatch
{
	public new const Guid IID = .(0x3051072a, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IHTMLStyleSheet** p) get_sheet;
	}


	public HRESULT get_sheet(IHTMLStyleSheet** p) mut => VT.[Friend]get_sheet(&this, p);
}

[CRepr]struct DispHTMLStyleElement : IDispatch
{
	public new const Guid IID = .(0x3050f511, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
	}

}

[CRepr]struct IHTMLStyleFontFace : IDispatch
{
	public new const Guid IID = .(0x3050f3d5, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_fontsrc;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_fontsrc;
	}


	public HRESULT put_fontsrc(BSTR v) mut => VT.[Friend]put_fontsrc(&this, v);

	public HRESULT get_fontsrc(BSTR* p) mut => VT.[Friend]get_fontsrc(&this, p);
}

[CRepr]struct IHTMLStyleFontFace2 : IDispatch
{
	public new const Guid IID = .(0x305106ec, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IHTMLRuleStyle** p) get_style;
	}


	public HRESULT get_style(IHTMLRuleStyle** p) mut => VT.[Friend]get_style(&this, p);
}

[CRepr]struct DispHTMLStyleFontFace : IDispatch
{
	public new const Guid IID = .(0x30590081, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
	}

}

[CRepr]struct IHTMLXDomainRequest : IDispatch
{
	public new const Guid IID = .(0x30510454, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_responseText;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 v) put_timeout;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* p) get_timeout;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_contentType;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_onprogress;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_onprogress;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_onerror;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_onerror;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_ontimeout;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_ontimeout;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_onload;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_onload;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self) abort;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR bstrMethod, BSTR bstrUrl) open;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT varBody) send;
	}


	public HRESULT get_responseText(BSTR* p) mut => VT.[Friend]get_responseText(&this, p);

	public HRESULT put_timeout(int32 v) mut => VT.[Friend]put_timeout(&this, v);

	public HRESULT get_timeout(int32* p) mut => VT.[Friend]get_timeout(&this, p);

	public HRESULT get_contentType(BSTR* p) mut => VT.[Friend]get_contentType(&this, p);

	public HRESULT put_onprogress(VARIANT v) mut => VT.[Friend]put_onprogress(&this, v);

	public HRESULT get_onprogress(VARIANT* p) mut => VT.[Friend]get_onprogress(&this, p);

	public HRESULT put_onerror(VARIANT v) mut => VT.[Friend]put_onerror(&this, v);

	public HRESULT get_onerror(VARIANT* p) mut => VT.[Friend]get_onerror(&this, p);

	public HRESULT put_ontimeout(VARIANT v) mut => VT.[Friend]put_ontimeout(&this, v);

	public HRESULT get_ontimeout(VARIANT* p) mut => VT.[Friend]get_ontimeout(&this, p);

	public HRESULT put_onload(VARIANT v) mut => VT.[Friend]put_onload(&this, v);

	public HRESULT get_onload(VARIANT* p) mut => VT.[Friend]get_onload(&this, p);

	public HRESULT abort() mut => VT.[Friend]abort(&this);

	public HRESULT open(BSTR bstrMethod, BSTR bstrUrl) mut => VT.[Friend]open(&this, bstrMethod, bstrUrl);

	public HRESULT send(VARIANT varBody) mut => VT.[Friend]send(&this, varBody);
}

[CRepr]struct IHTMLXDomainRequestFactory : IDispatch
{
	public new const Guid IID = .(0x30510456, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IHTMLXDomainRequest** __MIDL__IHTMLXDomainRequestFactory0000) create;
	}


	public HRESULT create(IHTMLXDomainRequest** __MIDL__IHTMLXDomainRequestFactory0000) mut => VT.[Friend]create(&this, __MIDL__IHTMLXDomainRequestFactory0000);
}

[CRepr]struct DispXDomainRequest : IDispatch
{
	public new const Guid IID = .(0x3050f599, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
	}

}

[CRepr]struct IHTMLStorage2 : IDispatch
{
	public new const Guid IID = .(0x30510799, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR bstrKey, BSTR bstrValue) setItem;
	}


	public HRESULT setItem(BSTR bstrKey, BSTR bstrValue) mut => VT.[Friend]setItem(&this, bstrKey, bstrValue);
}

[CRepr]struct DispHTMLStorage : IDispatch
{
	public new const Guid IID = .(0x3050f59d, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
	}

}

[CRepr]struct IEventTarget : IDispatch
{
	public new const Guid IID = .(0x305104b9, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR type, IDispatch* listener, int16 useCapture) addEventListener;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR type, IDispatch* listener, int16 useCapture) removeEventListener;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IDOMEvent* evt, int16* pfResult) dispatchEvent;
	}


	public HRESULT addEventListener(BSTR type, IDispatch* listener, int16 useCapture) mut => VT.[Friend]addEventListener(&this, type, listener, useCapture);

	public HRESULT removeEventListener(BSTR type, IDispatch* listener, int16 useCapture) mut => VT.[Friend]removeEventListener(&this, type, listener, useCapture);

	public HRESULT dispatchEvent(IDOMEvent* evt, int16* pfResult) mut => VT.[Friend]dispatchEvent(&this, evt, pfResult);
}

[CRepr]struct DispDOMEvent : IDispatch
{
	public new const Guid IID = .(0x3050f5a2, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
	}

}

[CRepr]struct IDOMUIEvent : IDispatch
{
	public new const Guid IID = .(0x305106ca, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IHTMLWindow2** p) get_view;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* p) get_detail;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR eventType, int16 canBubble, int16 cancelable, IHTMLWindow2* view, int32 detail) initUIEvent;
	}


	public HRESULT get_view(IHTMLWindow2** p) mut => VT.[Friend]get_view(&this, p);

	public HRESULT get_detail(int32* p) mut => VT.[Friend]get_detail(&this, p);

	public HRESULT initUIEvent(BSTR eventType, int16 canBubble, int16 cancelable, IHTMLWindow2* view, int32 detail) mut => VT.[Friend]initUIEvent(&this, eventType, canBubble, cancelable, view, detail);
}

[CRepr]struct DispDOMUIEvent : IDispatch
{
	public new const Guid IID = .(0x30590072, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
	}

}

[CRepr]struct IDOMMouseEvent : IDispatch
{
	public new const Guid IID = .(0x305106ce, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* p) get_screenX;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* p) get_screenY;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* p) get_clientX;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* p) get_clientY;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16* p) get_ctrlKey;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16* p) get_shiftKey;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16* p) get_altKey;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16* p) get_metaKey;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint16* p) get_button;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IEventTarget** p) get_relatedTarget;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR eventType, int16 canBubble, int16 cancelable, IHTMLWindow2* viewArg, int32 detailArg, int32 screenXArg, int32 screenYArg, int32 clientXArg, int32 clientYArg, int16 ctrlKeyArg, int16 altKeyArg, int16 shiftKeyArg, int16 metaKeyArg, uint16 buttonArg, IEventTarget* relatedTargetArg) initMouseEvent;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR keyArg, int16* activated) getModifierState;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint16* p) get_buttons;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IHTMLElement** p) get_fromElement;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IHTMLElement** p) get_toElement;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* p) get_x;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* p) get_y;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* p) get_offsetX;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* p) get_offsetY;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* p) get_pageX;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* p) get_pageY;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* p) get_layerX;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* p) get_layerY;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint16* p) get_which;
	}


	public HRESULT get_screenX(int32* p) mut => VT.[Friend]get_screenX(&this, p);

	public HRESULT get_screenY(int32* p) mut => VT.[Friend]get_screenY(&this, p);

	public HRESULT get_clientX(int32* p) mut => VT.[Friend]get_clientX(&this, p);

	public HRESULT get_clientY(int32* p) mut => VT.[Friend]get_clientY(&this, p);

	public HRESULT get_ctrlKey(int16* p) mut => VT.[Friend]get_ctrlKey(&this, p);

	public HRESULT get_shiftKey(int16* p) mut => VT.[Friend]get_shiftKey(&this, p);

	public HRESULT get_altKey(int16* p) mut => VT.[Friend]get_altKey(&this, p);

	public HRESULT get_metaKey(int16* p) mut => VT.[Friend]get_metaKey(&this, p);

	public HRESULT get_button(uint16* p) mut => VT.[Friend]get_button(&this, p);

	public HRESULT get_relatedTarget(IEventTarget** p) mut => VT.[Friend]get_relatedTarget(&this, p);

	public HRESULT initMouseEvent(BSTR eventType, int16 canBubble, int16 cancelable, IHTMLWindow2* viewArg, int32 detailArg, int32 screenXArg, int32 screenYArg, int32 clientXArg, int32 clientYArg, int16 ctrlKeyArg, int16 altKeyArg, int16 shiftKeyArg, int16 metaKeyArg, uint16 buttonArg, IEventTarget* relatedTargetArg) mut => VT.[Friend]initMouseEvent(&this, eventType, canBubble, cancelable, viewArg, detailArg, screenXArg, screenYArg, clientXArg, clientYArg, ctrlKeyArg, altKeyArg, shiftKeyArg, metaKeyArg, buttonArg, relatedTargetArg);

	public HRESULT getModifierState(BSTR keyArg, int16* activated) mut => VT.[Friend]getModifierState(&this, keyArg, activated);

	public HRESULT get_buttons(uint16* p) mut => VT.[Friend]get_buttons(&this, p);

	public HRESULT get_fromElement(IHTMLElement** p) mut => VT.[Friend]get_fromElement(&this, p);

	public HRESULT get_toElement(IHTMLElement** p) mut => VT.[Friend]get_toElement(&this, p);

	public HRESULT get_x(int32* p) mut => VT.[Friend]get_x(&this, p);

	public HRESULT get_y(int32* p) mut => VT.[Friend]get_y(&this, p);

	public HRESULT get_offsetX(int32* p) mut => VT.[Friend]get_offsetX(&this, p);

	public HRESULT get_offsetY(int32* p) mut => VT.[Friend]get_offsetY(&this, p);

	public HRESULT get_pageX(int32* p) mut => VT.[Friend]get_pageX(&this, p);

	public HRESULT get_pageY(int32* p) mut => VT.[Friend]get_pageY(&this, p);

	public HRESULT get_layerX(int32* p) mut => VT.[Friend]get_layerX(&this, p);

	public HRESULT get_layerY(int32* p) mut => VT.[Friend]get_layerY(&this, p);

	public HRESULT get_which(uint16* p) mut => VT.[Friend]get_which(&this, p);
}

[CRepr]struct DispDOMMouseEvent : IDispatch
{
	public new const Guid IID = .(0x30590073, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
	}

}

[CRepr]struct IDOMDragEvent : IDispatch
{
	public new const Guid IID = .(0x30510761, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IHTMLDataTransfer** p) get_dataTransfer;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR eventType, int16 canBubble, int16 cancelable, IHTMLWindow2* viewArg, int32 detailArg, int32 screenXArg, int32 screenYArg, int32 clientXArg, int32 clientYArg, int16 ctrlKeyArg, int16 altKeyArg, int16 shiftKeyArg, int16 metaKeyArg, uint16 buttonArg, IEventTarget* relatedTargetArg, IHTMLDataTransfer* dataTransferArg) initDragEvent;
	}


	public HRESULT get_dataTransfer(IHTMLDataTransfer** p) mut => VT.[Friend]get_dataTransfer(&this, p);

	public HRESULT initDragEvent(BSTR eventType, int16 canBubble, int16 cancelable, IHTMLWindow2* viewArg, int32 detailArg, int32 screenXArg, int32 screenYArg, int32 clientXArg, int32 clientYArg, int16 ctrlKeyArg, int16 altKeyArg, int16 shiftKeyArg, int16 metaKeyArg, uint16 buttonArg, IEventTarget* relatedTargetArg, IHTMLDataTransfer* dataTransferArg) mut => VT.[Friend]initDragEvent(&this, eventType, canBubble, cancelable, viewArg, detailArg, screenXArg, screenYArg, clientXArg, clientYArg, ctrlKeyArg, altKeyArg, shiftKeyArg, metaKeyArg, buttonArg, relatedTargetArg, dataTransferArg);
}

[CRepr]struct DispDOMDragEvent : IDispatch
{
	public new const Guid IID = .(0x305900a7, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
	}

}

[CRepr]struct IDOMMouseWheelEvent : IDispatch
{
	public new const Guid IID = .(0x305106d0, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* p) get_wheelDelta;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR eventType, int16 canBubble, int16 cancelable, IHTMLWindow2* viewArg, int32 detailArg, int32 screenXArg, int32 screenYArg, int32 clientXArg, int32 clientYArg, uint16 buttonArg, IEventTarget* relatedTargetArg, BSTR modifiersListArg, int32 wheelDeltaArg) initMouseWheelEvent;
	}


	public HRESULT get_wheelDelta(int32* p) mut => VT.[Friend]get_wheelDelta(&this, p);

	public HRESULT initMouseWheelEvent(BSTR eventType, int16 canBubble, int16 cancelable, IHTMLWindow2* viewArg, int32 detailArg, int32 screenXArg, int32 screenYArg, int32 clientXArg, int32 clientYArg, uint16 buttonArg, IEventTarget* relatedTargetArg, BSTR modifiersListArg, int32 wheelDeltaArg) mut => VT.[Friend]initMouseWheelEvent(&this, eventType, canBubble, cancelable, viewArg, detailArg, screenXArg, screenYArg, clientXArg, clientYArg, buttonArg, relatedTargetArg, modifiersListArg, wheelDeltaArg);
}

[CRepr]struct DispDOMMouseWheelEvent : IDispatch
{
	public new const Guid IID = .(0x30590074, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
	}

}

[CRepr]struct IDOMWheelEvent : IDispatch
{
	public new const Guid IID = .(0x305106d2, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* p) get_deltaX;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* p) get_deltaY;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* p) get_deltaZ;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32* p) get_deltaMode;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR eventType, int16 canBubble, int16 cancelable, IHTMLWindow2* viewArg, int32 detailArg, int32 screenXArg, int32 screenYArg, int32 clientXArg, int32 clientYArg, uint16 buttonArg, IEventTarget* relatedTargetArg, BSTR modifiersListArg, int32 deltaX, int32 deltaY, int32 deltaZ, uint32 deltaMode) initWheelEvent;
	}


	public HRESULT get_deltaX(int32* p) mut => VT.[Friend]get_deltaX(&this, p);

	public HRESULT get_deltaY(int32* p) mut => VT.[Friend]get_deltaY(&this, p);

	public HRESULT get_deltaZ(int32* p) mut => VT.[Friend]get_deltaZ(&this, p);

	public HRESULT get_deltaMode(uint32* p) mut => VT.[Friend]get_deltaMode(&this, p);

	public HRESULT initWheelEvent(BSTR eventType, int16 canBubble, int16 cancelable, IHTMLWindow2* viewArg, int32 detailArg, int32 screenXArg, int32 screenYArg, int32 clientXArg, int32 clientYArg, uint16 buttonArg, IEventTarget* relatedTargetArg, BSTR modifiersListArg, int32 deltaX, int32 deltaY, int32 deltaZ, uint32 deltaMode) mut => VT.[Friend]initWheelEvent(&this, eventType, canBubble, cancelable, viewArg, detailArg, screenXArg, screenYArg, clientXArg, clientYArg, buttonArg, relatedTargetArg, modifiersListArg, deltaX, deltaY, deltaZ, deltaMode);
}

[CRepr]struct DispDOMWheelEvent : IDispatch
{
	public new const Guid IID = .(0x30590075, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
	}

}

[CRepr]struct IDOMTextEvent : IDispatch
{
	public new const Guid IID = .(0x305106d4, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_data;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32* p) get_inputMethod;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR eventType, int16 canBubble, int16 cancelable, IHTMLWindow2* viewArg, BSTR dataArg, uint32 inputMethod, BSTR locale) initTextEvent;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_locale;
	}


	public HRESULT get_data(BSTR* p) mut => VT.[Friend]get_data(&this, p);

	public HRESULT get_inputMethod(uint32* p) mut => VT.[Friend]get_inputMethod(&this, p);

	public HRESULT initTextEvent(BSTR eventType, int16 canBubble, int16 cancelable, IHTMLWindow2* viewArg, BSTR dataArg, uint32 inputMethod, BSTR locale) mut => VT.[Friend]initTextEvent(&this, eventType, canBubble, cancelable, viewArg, dataArg, inputMethod, locale);

	public HRESULT get_locale(BSTR* p) mut => VT.[Friend]get_locale(&this, p);
}

[CRepr]struct DispDOMTextEvent : IDispatch
{
	public new const Guid IID = .(0x30590076, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
	}

}

[CRepr]struct IDOMKeyboardEvent : IDispatch
{
	public new const Guid IID = .(0x305106d6, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_key;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32* p) get_location;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16* p) get_ctrlKey;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16* p) get_shiftKey;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16* p) get_altKey;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16* p) get_metaKey;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16* p) get_repeat;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR keyArg, int16* state) getModifierState;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR eventType, int16 canBubble, int16 cancelable, IHTMLWindow2* viewArg, BSTR keyArg, uint32 locationArg, BSTR modifiersListArg, int16 @repeat, BSTR locale) initKeyboardEvent;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* p) get_keyCode;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* p) get_charCode;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* p) get_which;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_ie9_char;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_locale;
	}


	public HRESULT get_key(BSTR* p) mut => VT.[Friend]get_key(&this, p);

	public HRESULT get_location(uint32* p) mut => VT.[Friend]get_location(&this, p);

	public HRESULT get_ctrlKey(int16* p) mut => VT.[Friend]get_ctrlKey(&this, p);

	public HRESULT get_shiftKey(int16* p) mut => VT.[Friend]get_shiftKey(&this, p);

	public HRESULT get_altKey(int16* p) mut => VT.[Friend]get_altKey(&this, p);

	public HRESULT get_metaKey(int16* p) mut => VT.[Friend]get_metaKey(&this, p);

	public HRESULT get_repeat(int16* p) mut => VT.[Friend]get_repeat(&this, p);

	public HRESULT getModifierState(BSTR keyArg, int16* state) mut => VT.[Friend]getModifierState(&this, keyArg, state);

	public HRESULT initKeyboardEvent(BSTR eventType, int16 canBubble, int16 cancelable, IHTMLWindow2* viewArg, BSTR keyArg, uint32 locationArg, BSTR modifiersListArg, int16 @repeat, BSTR locale) mut => VT.[Friend]initKeyboardEvent(&this, eventType, canBubble, cancelable, viewArg, keyArg, locationArg, modifiersListArg, @repeat, locale);

	public HRESULT get_keyCode(int32* p) mut => VT.[Friend]get_keyCode(&this, p);

	public HRESULT get_charCode(int32* p) mut => VT.[Friend]get_charCode(&this, p);

	public HRESULT get_which(int32* p) mut => VT.[Friend]get_which(&this, p);

	public HRESULT get_ie9_char(VARIANT* p) mut => VT.[Friend]get_ie9_char(&this, p);

	public HRESULT get_locale(BSTR* p) mut => VT.[Friend]get_locale(&this, p);
}

[CRepr]struct DispDOMKeyboardEvent : IDispatch
{
	public new const Guid IID = .(0x30590077, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
	}

}

[CRepr]struct IDOMCompositionEvent : IDispatch
{
	public new const Guid IID = .(0x305106d8, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_data;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR eventType, int16 canBubble, int16 cancelable, IHTMLWindow2* viewArg, BSTR data, BSTR locale) initCompositionEvent;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_locale;
	}


	public HRESULT get_data(BSTR* p) mut => VT.[Friend]get_data(&this, p);

	public HRESULT initCompositionEvent(BSTR eventType, int16 canBubble, int16 cancelable, IHTMLWindow2* viewArg, BSTR data, BSTR locale) mut => VT.[Friend]initCompositionEvent(&this, eventType, canBubble, cancelable, viewArg, data, locale);

	public HRESULT get_locale(BSTR* p) mut => VT.[Friend]get_locale(&this, p);
}

[CRepr]struct DispDOMCompositionEvent : IDispatch
{
	public new const Guid IID = .(0x30590078, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
	}

}

[CRepr]struct IDOMMutationEvent : IDispatch
{
	public new const Guid IID = .(0x305106da, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IDispatch** p) get_relatedNode;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_prevValue;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_newValue;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_attrName;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint16* p) get_attrChange;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR eventType, int16 canBubble, int16 cancelable, IDispatch* relatedNodeArg, BSTR prevValueArg, BSTR newValueArg, BSTR attrNameArg, uint16 attrChangeArg) initMutationEvent;
	}


	public HRESULT get_relatedNode(IDispatch** p) mut => VT.[Friend]get_relatedNode(&this, p);

	public HRESULT get_prevValue(BSTR* p) mut => VT.[Friend]get_prevValue(&this, p);

	public HRESULT get_newValue(BSTR* p) mut => VT.[Friend]get_newValue(&this, p);

	public HRESULT get_attrName(BSTR* p) mut => VT.[Friend]get_attrName(&this, p);

	public HRESULT get_attrChange(uint16* p) mut => VT.[Friend]get_attrChange(&this, p);

	public HRESULT initMutationEvent(BSTR eventType, int16 canBubble, int16 cancelable, IDispatch* relatedNodeArg, BSTR prevValueArg, BSTR newValueArg, BSTR attrNameArg, uint16 attrChangeArg) mut => VT.[Friend]initMutationEvent(&this, eventType, canBubble, cancelable, relatedNodeArg, prevValueArg, newValueArg, attrNameArg, attrChangeArg);
}

[CRepr]struct DispDOMMutationEvent : IDispatch
{
	public new const Guid IID = .(0x30590079, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
	}

}

[CRepr]struct IDOMBeforeUnloadEvent : IDispatch
{
	public new const Guid IID = .(0x30510763, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_returnValue;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_returnValue;
	}


	public HRESULT put_returnValue(VARIANT v) mut => VT.[Friend]put_returnValue(&this, v);

	public HRESULT get_returnValue(VARIANT* p) mut => VT.[Friend]get_returnValue(&this, p);
}

[CRepr]struct DispDOMBeforeUnloadEvent : IDispatch
{
	public new const Guid IID = .(0x305900a8, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
	}

}

[CRepr]struct IDOMFocusEvent : IDispatch
{
	public new const Guid IID = .(0x305106cc, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IEventTarget** p) get_relatedTarget;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR eventType, int16 canBubble, int16 cancelable, IHTMLWindow2* view, int32 detail, IEventTarget* relatedTargetArg) initFocusEvent;
	}


	public HRESULT get_relatedTarget(IEventTarget** p) mut => VT.[Friend]get_relatedTarget(&this, p);

	public HRESULT initFocusEvent(BSTR eventType, int16 canBubble, int16 cancelable, IHTMLWindow2* view, int32 detail, IEventTarget* relatedTargetArg) mut => VT.[Friend]initFocusEvent(&this, eventType, canBubble, cancelable, view, detail, relatedTargetArg);
}

[CRepr]struct DispDOMFocusEvent : IDispatch
{
	public new const Guid IID = .(0x30590071, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
	}

}

[CRepr]struct IDOMCustomEvent : IDispatch
{
	public new const Guid IID = .(0x305106de, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_detail;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR eventType, int16 canBubble, int16 cancelable, VARIANT* detail) initCustomEvent;
	}


	public HRESULT get_detail(VARIANT* p) mut => VT.[Friend]get_detail(&this, p);

	public HRESULT initCustomEvent(BSTR eventType, int16 canBubble, int16 cancelable, VARIANT* detail) mut => VT.[Friend]initCustomEvent(&this, eventType, canBubble, cancelable, detail);
}

[CRepr]struct DispDOMCustomEvent : IDispatch
{
	public new const Guid IID = .(0x3059007c, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
	}

}

[CRepr]struct ICanvasGradient : IDispatch
{
	public new const Guid IID = .(0x30510714, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, float offset, BSTR color) addColorStop;
	}


	public HRESULT addColorStop(float offset, BSTR color) mut => VT.[Friend]addColorStop(&this, offset, color);
}

[CRepr]struct ICanvasPattern : IDispatch
{
	public new const Guid IID = .(0x30510716, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
	}

}

[CRepr]struct ICanvasTextMetrics : IDispatch
{
	public new const Guid IID = .(0x30510718, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, float* p) get_width;
	}


	public HRESULT get_width(float* p) mut => VT.[Friend]get_width(&this, p);
}

[CRepr]struct ICanvasImageData : IDispatch
{
	public new const Guid IID = .(0x3051071a, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32* p) get_width;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32* p) get_height;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_data;
	}


	public HRESULT get_width(uint32* p) mut => VT.[Friend]get_width(&this, p);

	public HRESULT get_height(uint32* p) mut => VT.[Friend]get_height(&this, p);

	public HRESULT get_data(VARIANT* p) mut => VT.[Friend]get_data(&this, p);
}

[CRepr]struct ICanvasPixelArray : IDispatch
{
	public new const Guid IID = .(0x3051071c, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32* p) get_length;
	}


	public HRESULT get_length(uint32* p) mut => VT.[Friend]get_length(&this, p);
}

[CRepr]struct IHTMLCanvasElement : IDispatch
{
	public new const Guid IID = .(0x305106e4, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 v) put_width;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* p) get_width;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 v) put_height;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* p) get_height;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR contextId, ICanvasRenderingContext2D** ppContext) getContext;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR type, VARIANT jpegquality, BSTR* pUrl) toDataURL;
	}


	public HRESULT put_width(int32 v) mut => VT.[Friend]put_width(&this, v);

	public HRESULT get_width(int32* p) mut => VT.[Friend]get_width(&this, p);

	public HRESULT put_height(int32 v) mut => VT.[Friend]put_height(&this, v);

	public HRESULT get_height(int32* p) mut => VT.[Friend]get_height(&this, p);

	public HRESULT getContext(BSTR contextId, ICanvasRenderingContext2D** ppContext) mut => VT.[Friend]getContext(&this, contextId, ppContext);

	public HRESULT toDataURL(BSTR type, VARIANT jpegquality, BSTR* pUrl) mut => VT.[Friend]toDataURL(&this, type, jpegquality, pUrl);
}

[CRepr]struct ICanvasRenderingContext2D : IDispatch
{
	public new const Guid IID = .(0x305106ff, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IHTMLCanvasElement** p) get_canvas;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self) restore;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self) save;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, float angle) rotate;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, float x, float y) scale;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, float m11, float m12, float m21, float m22, float dx, float dy) setTransform;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, float m11, float m12, float m21, float m22, float dx, float dy) transform;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, float x, float y) translate;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, float v) put_globalAlpha;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, float* p) get_globalAlpha;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_globalCompositeOperation;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_globalCompositeOperation;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_fillStyle;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_fillStyle;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_strokeStyle;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_strokeStyle;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, float x0, float y0, float x1, float y1, ICanvasGradient** ppCanvasGradient) createLinearGradient;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, float x0, float y0, float r0, float x1, float y1, float r1, ICanvasGradient** ppCanvasGradient) createRadialGradient;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IDispatch* image, VARIANT repetition, ICanvasPattern** ppCanvasPattern) createPattern;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_lineCap;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_lineCap;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_lineJoin;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_lineJoin;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, float v) put_lineWidth;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, float* p) get_lineWidth;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, float v) put_miterLimit;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, float* p) get_miterLimit;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, float v) put_shadowBlur;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, float* p) get_shadowBlur;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_shadowColor;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_shadowColor;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, float v) put_shadowOffsetX;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, float* p) get_shadowOffsetX;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, float v) put_shadowOffsetY;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, float* p) get_shadowOffsetY;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, float x, float y, float w, float h) clearRect;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, float x, float y, float w, float h) fillRect;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, float x, float y, float w, float h) strokeRect;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, float x, float y, float radius, float startAngle, float endAngle, BOOL anticlockwise) arc;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, float x1, float y1, float x2, float y2, float radius) arcTo;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self) beginPath;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, float cp1x, float cp1y, float cp2x, float cp2y, float x, float y) bezierCurveTo;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self) clip;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self) closePath;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self) fill;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, float x, float y) lineTo;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, float x, float y) moveTo;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, float cpx, float cpy, float x, float y) quadraticCurveTo;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, float x, float y, float w, float h) rect;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self) stroke;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, float x, float y, int16* pResult) isPointInPath;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_font;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_font;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_textAlign;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_textAlign;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_textBaseline;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_textBaseline;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR text, float x, float y, VARIANT maxWidth) fillText;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR text, ICanvasTextMetrics** ppCanvasTextMetrics) measureText;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR text, float x, float y, VARIANT maxWidth) strokeText;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IDispatch* pSrc, VARIANT a1, VARIANT a2, VARIANT a3, VARIANT a4, VARIANT a5, VARIANT a6, VARIANT a7, VARIANT a8) drawImage;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT a1, VARIANT a2, ICanvasImageData** ppCanvasImageData) createImageData;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, float sx, float sy, float sw, float sh, ICanvasImageData** ppCanvasImageData) getImageData;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, ICanvasImageData* imagedata, float dx, float dy, VARIANT dirtyX, VARIANT dirtyY, VARIANT dirtyWidth, VARIANT dirtyHeight) putImageData;
	}


	public HRESULT get_canvas(IHTMLCanvasElement** p) mut => VT.[Friend]get_canvas(&this, p);

	public HRESULT restore() mut => VT.[Friend]restore(&this);

	public HRESULT save() mut => VT.[Friend]save(&this);

	public HRESULT rotate(float angle) mut => VT.[Friend]rotate(&this, angle);

	public HRESULT scale(float x, float y) mut => VT.[Friend]scale(&this, x, y);

	public HRESULT setTransform(float m11, float m12, float m21, float m22, float dx, float dy) mut => VT.[Friend]setTransform(&this, m11, m12, m21, m22, dx, dy);

	public HRESULT transform(float m11, float m12, float m21, float m22, float dx, float dy) mut => VT.[Friend]transform(&this, m11, m12, m21, m22, dx, dy);

	public HRESULT translate(float x, float y) mut => VT.[Friend]translate(&this, x, y);

	public HRESULT put_globalAlpha(float v) mut => VT.[Friend]put_globalAlpha(&this, v);

	public HRESULT get_globalAlpha(float* p) mut => VT.[Friend]get_globalAlpha(&this, p);

	public HRESULT put_globalCompositeOperation(BSTR v) mut => VT.[Friend]put_globalCompositeOperation(&this, v);

	public HRESULT get_globalCompositeOperation(BSTR* p) mut => VT.[Friend]get_globalCompositeOperation(&this, p);

	public HRESULT put_fillStyle(VARIANT v) mut => VT.[Friend]put_fillStyle(&this, v);

	public HRESULT get_fillStyle(VARIANT* p) mut => VT.[Friend]get_fillStyle(&this, p);

	public HRESULT put_strokeStyle(VARIANT v) mut => VT.[Friend]put_strokeStyle(&this, v);

	public HRESULT get_strokeStyle(VARIANT* p) mut => VT.[Friend]get_strokeStyle(&this, p);

	public HRESULT createLinearGradient(float x0, float y0, float x1, float y1, ICanvasGradient** ppCanvasGradient) mut => VT.[Friend]createLinearGradient(&this, x0, y0, x1, y1, ppCanvasGradient);

	public HRESULT createRadialGradient(float x0, float y0, float r0, float x1, float y1, float r1, ICanvasGradient** ppCanvasGradient) mut => VT.[Friend]createRadialGradient(&this, x0, y0, r0, x1, y1, r1, ppCanvasGradient);

	public HRESULT createPattern(IDispatch* image, VARIANT repetition, ICanvasPattern** ppCanvasPattern) mut => VT.[Friend]createPattern(&this, image, repetition, ppCanvasPattern);

	public HRESULT put_lineCap(BSTR v) mut => VT.[Friend]put_lineCap(&this, v);

	public HRESULT get_lineCap(BSTR* p) mut => VT.[Friend]get_lineCap(&this, p);

	public HRESULT put_lineJoin(BSTR v) mut => VT.[Friend]put_lineJoin(&this, v);

	public HRESULT get_lineJoin(BSTR* p) mut => VT.[Friend]get_lineJoin(&this, p);

	public HRESULT put_lineWidth(float v) mut => VT.[Friend]put_lineWidth(&this, v);

	public HRESULT get_lineWidth(float* p) mut => VT.[Friend]get_lineWidth(&this, p);

	public HRESULT put_miterLimit(float v) mut => VT.[Friend]put_miterLimit(&this, v);

	public HRESULT get_miterLimit(float* p) mut => VT.[Friend]get_miterLimit(&this, p);

	public HRESULT put_shadowBlur(float v) mut => VT.[Friend]put_shadowBlur(&this, v);

	public HRESULT get_shadowBlur(float* p) mut => VT.[Friend]get_shadowBlur(&this, p);

	public HRESULT put_shadowColor(BSTR v) mut => VT.[Friend]put_shadowColor(&this, v);

	public HRESULT get_shadowColor(BSTR* p) mut => VT.[Friend]get_shadowColor(&this, p);

	public HRESULT put_shadowOffsetX(float v) mut => VT.[Friend]put_shadowOffsetX(&this, v);

	public HRESULT get_shadowOffsetX(float* p) mut => VT.[Friend]get_shadowOffsetX(&this, p);

	public HRESULT put_shadowOffsetY(float v) mut => VT.[Friend]put_shadowOffsetY(&this, v);

	public HRESULT get_shadowOffsetY(float* p) mut => VT.[Friend]get_shadowOffsetY(&this, p);

	public HRESULT clearRect(float x, float y, float w, float h) mut => VT.[Friend]clearRect(&this, x, y, w, h);

	public HRESULT fillRect(float x, float y, float w, float h) mut => VT.[Friend]fillRect(&this, x, y, w, h);

	public HRESULT strokeRect(float x, float y, float w, float h) mut => VT.[Friend]strokeRect(&this, x, y, w, h);

	public HRESULT arc(float x, float y, float radius, float startAngle, float endAngle, BOOL anticlockwise) mut => VT.[Friend]arc(&this, x, y, radius, startAngle, endAngle, anticlockwise);

	public HRESULT arcTo(float x1, float y1, float x2, float y2, float radius) mut => VT.[Friend]arcTo(&this, x1, y1, x2, y2, radius);

	public HRESULT beginPath() mut => VT.[Friend]beginPath(&this);

	public HRESULT bezierCurveTo(float cp1x, float cp1y, float cp2x, float cp2y, float x, float y) mut => VT.[Friend]bezierCurveTo(&this, cp1x, cp1y, cp2x, cp2y, x, y);

	public HRESULT clip() mut => VT.[Friend]clip(&this);

	public HRESULT closePath() mut => VT.[Friend]closePath(&this);

	public HRESULT fill() mut => VT.[Friend]fill(&this);

	public HRESULT lineTo(float x, float y) mut => VT.[Friend]lineTo(&this, x, y);

	public HRESULT moveTo(float x, float y) mut => VT.[Friend]moveTo(&this, x, y);

	public HRESULT quadraticCurveTo(float cpx, float cpy, float x, float y) mut => VT.[Friend]quadraticCurveTo(&this, cpx, cpy, x, y);

	public HRESULT rect(float x, float y, float w, float h) mut => VT.[Friend]rect(&this, x, y, w, h);

	public HRESULT stroke() mut => VT.[Friend]stroke(&this);

	public HRESULT isPointInPath(float x, float y, int16* pResult) mut => VT.[Friend]isPointInPath(&this, x, y, pResult);

	public HRESULT put_font(BSTR v) mut => VT.[Friend]put_font(&this, v);

	public HRESULT get_font(BSTR* p) mut => VT.[Friend]get_font(&this, p);

	public HRESULT put_textAlign(BSTR v) mut => VT.[Friend]put_textAlign(&this, v);

	public HRESULT get_textAlign(BSTR* p) mut => VT.[Friend]get_textAlign(&this, p);

	public HRESULT put_textBaseline(BSTR v) mut => VT.[Friend]put_textBaseline(&this, v);

	public HRESULT get_textBaseline(BSTR* p) mut => VT.[Friend]get_textBaseline(&this, p);

	public HRESULT fillText(BSTR text, float x, float y, VARIANT maxWidth) mut => VT.[Friend]fillText(&this, text, x, y, maxWidth);

	public HRESULT measureText(BSTR text, ICanvasTextMetrics** ppCanvasTextMetrics) mut => VT.[Friend]measureText(&this, text, ppCanvasTextMetrics);

	public HRESULT strokeText(BSTR text, float x, float y, VARIANT maxWidth) mut => VT.[Friend]strokeText(&this, text, x, y, maxWidth);

	public HRESULT drawImage(IDispatch* pSrc, VARIANT a1, VARIANT a2, VARIANT a3, VARIANT a4, VARIANT a5, VARIANT a6, VARIANT a7, VARIANT a8) mut => VT.[Friend]drawImage(&this, pSrc, a1, a2, a3, a4, a5, a6, a7, a8);

	public HRESULT createImageData(VARIANT a1, VARIANT a2, ICanvasImageData** ppCanvasImageData) mut => VT.[Friend]createImageData(&this, a1, a2, ppCanvasImageData);

	public HRESULT getImageData(float sx, float sy, float sw, float sh, ICanvasImageData** ppCanvasImageData) mut => VT.[Friend]getImageData(&this, sx, sy, sw, sh, ppCanvasImageData);

	public HRESULT putImageData(ICanvasImageData* imagedata, float dx, float dy, VARIANT dirtyX, VARIANT dirtyY, VARIANT dirtyWidth, VARIANT dirtyHeight) mut => VT.[Friend]putImageData(&this, imagedata, dx, dy, dirtyX, dirtyY, dirtyWidth, dirtyHeight);
}

[CRepr]struct DispCanvasGradient : IDispatch
{
	public new const Guid IID = .(0x3059008c, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
	}

}

[CRepr]struct DispCanvasPattern : IDispatch
{
	public new const Guid IID = .(0x3059008d, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
	}

}

[CRepr]struct DispCanvasTextMetrics : IDispatch
{
	public new const Guid IID = .(0x3059008e, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
	}

}

[CRepr]struct DispCanvasImageData : IDispatch
{
	public new const Guid IID = .(0x3059008f, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
	}

}

[CRepr]struct DispCanvasRenderingContext2D : IDispatch
{
	public new const Guid IID = .(0x30590082, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
	}

}

[CRepr]struct DispHTMLCanvasElement : IDispatch
{
	public new const Guid IID = .(0x3059007b, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
	}

}

[CRepr]struct IDOMProgressEvent : IDispatch
{
	public new const Guid IID = .(0x3051071e, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16* p) get_lengthComputable;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint64* p) get_loaded;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint64* p) get_total;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR eventType, int16 canBubble, int16 cancelable, int16 lengthComputableArg, uint64 loadedArg, uint64 totalArg) initProgressEvent;
	}


	public HRESULT get_lengthComputable(int16* p) mut => VT.[Friend]get_lengthComputable(&this, p);

	public HRESULT get_loaded(uint64* p) mut => VT.[Friend]get_loaded(&this, p);

	public HRESULT get_total(uint64* p) mut => VT.[Friend]get_total(&this, p);

	public HRESULT initProgressEvent(BSTR eventType, int16 canBubble, int16 cancelable, int16 lengthComputableArg, uint64 loadedArg, uint64 totalArg) mut => VT.[Friend]initProgressEvent(&this, eventType, canBubble, cancelable, lengthComputableArg, loadedArg, totalArg);
}

[CRepr]struct DispDOMProgressEvent : IDispatch
{
	public new const Guid IID = .(0x30590091, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
	}

}

[CRepr]struct IDOMMessageEvent : IDispatch
{
	public new const Guid IID = .(0x30510720, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_data;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_origin;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IHTMLWindow2** p) get_source;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR eventType, int16 canBubble, int16 cancelable, BSTR data, BSTR origin, BSTR lastEventId, IHTMLWindow2* source) initMessageEvent;
	}


	public HRESULT get_data(BSTR* p) mut => VT.[Friend]get_data(&this, p);

	public HRESULT get_origin(BSTR* p) mut => VT.[Friend]get_origin(&this, p);

	public HRESULT get_source(IHTMLWindow2** p) mut => VT.[Friend]get_source(&this, p);

	public HRESULT initMessageEvent(BSTR eventType, int16 canBubble, int16 cancelable, BSTR data, BSTR origin, BSTR lastEventId, IHTMLWindow2* source) mut => VT.[Friend]initMessageEvent(&this, eventType, canBubble, cancelable, data, origin, lastEventId, source);
}

[CRepr]struct DispDOMMessageEvent : IDispatch
{
	public new const Guid IID = .(0x30590092, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
	}

}

[CRepr]struct IDOMSiteModeEvent : IDispatch
{
	public new const Guid IID = .(0x30510765, 0x98b6, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* p) get_buttonID;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_actionURL;
	}


	public HRESULT get_buttonID(int32* p) mut => VT.[Friend]get_buttonID(&this, p);

	public HRESULT get_actionURL(BSTR* p) mut => VT.[Friend]get_actionURL(&this, p);
}

[CRepr]struct DispDOMSiteModeEvent : IDispatch
{
	public new const Guid IID = .(0x305900a9, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
	}

}

[CRepr]struct IDOMStorageEvent : IDispatch
{
	public new const Guid IID = .(0x30510722, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_key;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_oldValue;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_newValue;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_url;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IHTMLStorage** p) get_storageArea;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR eventType, int16 canBubble, int16 cancelable, BSTR keyArg, BSTR oldValueArg, BSTR newValueArg, BSTR urlArg, IHTMLStorage* storageAreaArg) initStorageEvent;
	}


	public HRESULT get_key(BSTR* p) mut => VT.[Friend]get_key(&this, p);

	public HRESULT get_oldValue(BSTR* p) mut => VT.[Friend]get_oldValue(&this, p);

	public HRESULT get_newValue(BSTR* p) mut => VT.[Friend]get_newValue(&this, p);

	public HRESULT get_url(BSTR* p) mut => VT.[Friend]get_url(&this, p);

	public HRESULT get_storageArea(IHTMLStorage** p) mut => VT.[Friend]get_storageArea(&this, p);

	public HRESULT initStorageEvent(BSTR eventType, int16 canBubble, int16 cancelable, BSTR keyArg, BSTR oldValueArg, BSTR newValueArg, BSTR urlArg, IHTMLStorage* storageAreaArg) mut => VT.[Friend]initStorageEvent(&this, eventType, canBubble, cancelable, keyArg, oldValueArg, newValueArg, urlArg, storageAreaArg);
}

[CRepr]struct DispDOMStorageEvent : IDispatch
{
	public new const Guid IID = .(0x30590093, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
	}

}

[CRepr]struct IXMLHttpRequestEventTarget : IDispatch
{
	public new const Guid IID = .(0x30510830, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
	}

}

[CRepr]struct DispXMLHttpRequestEventTarget : IDispatch
{
	public new const Guid IID = .(0x305900e7, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
	}

}

[CRepr]struct HTMLXMLHttpRequestEvents : IDispatch
{
	public new const Guid IID = .(0x30510498, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
	}

}

[CRepr]struct IHTMLXMLHttpRequest : IDispatch
{
	public new const Guid IID = .(0x3051040a, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* p) get_readyState;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_responseBody;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_responseText;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IDispatch** p) get_responseXML;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* p) get_status;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_statusText;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_onreadystatechange;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_onreadystatechange;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self) abort;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR bstrMethod, BSTR bstrUrl, VARIANT varAsync, VARIANT varUser, VARIANT varPassword) open;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT varBody) send;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* __MIDL__IHTMLXMLHttpRequest0000) getAllResponseHeaders;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR bstrHeader, BSTR* __MIDL__IHTMLXMLHttpRequest0001) getResponseHeader;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR bstrHeader, BSTR bstrValue) setRequestHeader;
	}


	public HRESULT get_readyState(int32* p) mut => VT.[Friend]get_readyState(&this, p);

	public HRESULT get_responseBody(VARIANT* p) mut => VT.[Friend]get_responseBody(&this, p);

	public HRESULT get_responseText(BSTR* p) mut => VT.[Friend]get_responseText(&this, p);

	public HRESULT get_responseXML(IDispatch** p) mut => VT.[Friend]get_responseXML(&this, p);

	public HRESULT get_status(int32* p) mut => VT.[Friend]get_status(&this, p);

	public HRESULT get_statusText(BSTR* p) mut => VT.[Friend]get_statusText(&this, p);

	public HRESULT put_onreadystatechange(VARIANT v) mut => VT.[Friend]put_onreadystatechange(&this, v);

	public HRESULT get_onreadystatechange(VARIANT* p) mut => VT.[Friend]get_onreadystatechange(&this, p);

	public HRESULT abort() mut => VT.[Friend]abort(&this);

	public HRESULT open(BSTR bstrMethod, BSTR bstrUrl, VARIANT varAsync, VARIANT varUser, VARIANT varPassword) mut => VT.[Friend]open(&this, bstrMethod, bstrUrl, varAsync, varUser, varPassword);

	public HRESULT send(VARIANT varBody) mut => VT.[Friend]send(&this, varBody);

	public HRESULT getAllResponseHeaders(BSTR* __MIDL__IHTMLXMLHttpRequest0000) mut => VT.[Friend]getAllResponseHeaders(&this, __MIDL__IHTMLXMLHttpRequest0000);

	public HRESULT getResponseHeader(BSTR bstrHeader, BSTR* __MIDL__IHTMLXMLHttpRequest0001) mut => VT.[Friend]getResponseHeader(&this, bstrHeader, __MIDL__IHTMLXMLHttpRequest0001);

	public HRESULT setRequestHeader(BSTR bstrHeader, BSTR bstrValue) mut => VT.[Friend]setRequestHeader(&this, bstrHeader, bstrValue);
}

[CRepr]struct IHTMLXMLHttpRequest2 : IDispatch
{
	public new const Guid IID = .(0x30510482, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 v) put_timeout;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* p) get_timeout;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_ontimeout;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_ontimeout;
	}


	public HRESULT put_timeout(int32 v) mut => VT.[Friend]put_timeout(&this, v);

	public HRESULT get_timeout(int32* p) mut => VT.[Friend]get_timeout(&this, p);

	public HRESULT put_ontimeout(VARIANT v) mut => VT.[Friend]put_ontimeout(&this, v);

	public HRESULT get_ontimeout(VARIANT* p) mut => VT.[Friend]get_ontimeout(&this, p);
}

[CRepr]struct IHTMLXMLHttpRequestFactory : IDispatch
{
	public new const Guid IID = .(0x3051040c, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IHTMLXMLHttpRequest** __MIDL__IHTMLXMLHttpRequestFactory0000) create;
	}


	public HRESULT create(IHTMLXMLHttpRequest** __MIDL__IHTMLXMLHttpRequestFactory0000) mut => VT.[Friend]create(&this, __MIDL__IHTMLXMLHttpRequestFactory0000);
}

[CRepr]struct DispHTMLXMLHttpRequest : IDispatch
{
	public new const Guid IID = .(0x3050f596, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
	}

}

[CRepr]struct ISVGAngle : IDispatch
{
	public new const Guid IID = .(0x305104d3, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16 v) put_unitType;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16* p) get_unitType;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, float v) put_value;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, float* p) get_value;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, float v) put_valueInSpecifiedUnits;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, float* p) get_valueInSpecifiedUnits;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_valueAsString;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_valueAsString;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16 unitType, float valueInSpecifiedUnits) newValueSpecifiedUnits;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16 unitType) convertToSpecifiedUnits;
	}


	public HRESULT put_unitType(int16 v) mut => VT.[Friend]put_unitType(&this, v);

	public HRESULT get_unitType(int16* p) mut => VT.[Friend]get_unitType(&this, p);

	public HRESULT put_value(float v) mut => VT.[Friend]put_value(&this, v);

	public HRESULT get_value(float* p) mut => VT.[Friend]get_value(&this, p);

	public HRESULT put_valueInSpecifiedUnits(float v) mut => VT.[Friend]put_valueInSpecifiedUnits(&this, v);

	public HRESULT get_valueInSpecifiedUnits(float* p) mut => VT.[Friend]get_valueInSpecifiedUnits(&this, p);

	public HRESULT put_valueAsString(BSTR v) mut => VT.[Friend]put_valueAsString(&this, v);

	public HRESULT get_valueAsString(BSTR* p) mut => VT.[Friend]get_valueAsString(&this, p);

	public HRESULT newValueSpecifiedUnits(int16 unitType, float valueInSpecifiedUnits) mut => VT.[Friend]newValueSpecifiedUnits(&this, unitType, valueInSpecifiedUnits);

	public HRESULT convertToSpecifiedUnits(int16 unitType) mut => VT.[Friend]convertToSpecifiedUnits(&this, unitType);
}

[CRepr]struct ISVGElement : IDispatch
{
	public new const Guid IID = .(0x305104c5, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_xmlbase;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_xmlbase;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, ISVGSVGElement* v) putref_ownerSVGElement;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, ISVGSVGElement** p) get_ownerSVGElement;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, ISVGElement* v) putref_viewportElement;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, ISVGElement** p) get_viewportElement;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, ISVGAnimatedEnumeration* v) putref_focusable;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, ISVGAnimatedEnumeration** p) get_focusable;
	}


	public HRESULT put_xmlbase(BSTR v) mut => VT.[Friend]put_xmlbase(&this, v);

	public HRESULT get_xmlbase(BSTR* p) mut => VT.[Friend]get_xmlbase(&this, p);

	public HRESULT putref_ownerSVGElement(ISVGSVGElement* v) mut => VT.[Friend]putref_ownerSVGElement(&this, v);

	public HRESULT get_ownerSVGElement(ISVGSVGElement** p) mut => VT.[Friend]get_ownerSVGElement(&this, p);

	public HRESULT putref_viewportElement(ISVGElement* v) mut => VT.[Friend]putref_viewportElement(&this, v);

	public HRESULT get_viewportElement(ISVGElement** p) mut => VT.[Friend]get_viewportElement(&this, p);

	public HRESULT putref_focusable(ISVGAnimatedEnumeration* v) mut => VT.[Friend]putref_focusable(&this, v);

	public HRESULT get_focusable(ISVGAnimatedEnumeration** p) mut => VT.[Friend]get_focusable(&this, p);
}

[CRepr]struct ISVGRect : IDispatch
{
	public new const Guid IID = .(0x305104d7, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, float v) put_x;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, float* p) get_x;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, float v) put_y;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, float* p) get_y;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, float v) put_width;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, float* p) get_width;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, float v) put_height;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, float* p) get_height;
	}


	public HRESULT put_x(float v) mut => VT.[Friend]put_x(&this, v);

	public HRESULT get_x(float* p) mut => VT.[Friend]get_x(&this, p);

	public HRESULT put_y(float v) mut => VT.[Friend]put_y(&this, v);

	public HRESULT get_y(float* p) mut => VT.[Friend]get_y(&this, p);

	public HRESULT put_width(float v) mut => VT.[Friend]put_width(&this, v);

	public HRESULT get_width(float* p) mut => VT.[Friend]get_width(&this, p);

	public HRESULT put_height(float v) mut => VT.[Friend]put_height(&this, v);

	public HRESULT get_height(float* p) mut => VT.[Friend]get_height(&this, p);
}

[CRepr]struct ISVGMatrix : IDispatch
{
	public new const Guid IID = .(0x305104f6, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, float v) put_a;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, float* p) get_a;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, float v) put_b;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, float* p) get_b;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, float v) put_c;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, float* p) get_c;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, float v) put_d;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, float* p) get_d;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, float v) put_e;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, float* p) get_e;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, float v) put_f;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, float* p) get_f;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, ISVGMatrix* secondMatrix, ISVGMatrix** ppResult) multiply;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, ISVGMatrix** ppResult) inverse;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, float x, float y, ISVGMatrix** ppResult) translate;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, float scaleFactor, ISVGMatrix** ppResult) scale;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, float scaleFactorX, float scaleFactorY, ISVGMatrix** ppResult) scaleNonUniform;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, float angle, ISVGMatrix** ppResult) rotate;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, float x, float y, ISVGMatrix** ppResult) rotateFromVector;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, ISVGMatrix** ppResult) flipX;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, ISVGMatrix** ppResult) flipY;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, float angle, ISVGMatrix** ppResult) skewX;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, float angle, ISVGMatrix** ppResult) skewY;
	}


	public HRESULT put_a(float v) mut => VT.[Friend]put_a(&this, v);

	public HRESULT get_a(float* p) mut => VT.[Friend]get_a(&this, p);

	public HRESULT put_b(float v) mut => VT.[Friend]put_b(&this, v);

	public HRESULT get_b(float* p) mut => VT.[Friend]get_b(&this, p);

	public HRESULT put_c(float v) mut => VT.[Friend]put_c(&this, v);

	public HRESULT get_c(float* p) mut => VT.[Friend]get_c(&this, p);

	public HRESULT put_d(float v) mut => VT.[Friend]put_d(&this, v);

	public HRESULT get_d(float* p) mut => VT.[Friend]get_d(&this, p);

	public HRESULT put_e(float v) mut => VT.[Friend]put_e(&this, v);

	public HRESULT get_e(float* p) mut => VT.[Friend]get_e(&this, p);

	public HRESULT put_f(float v) mut => VT.[Friend]put_f(&this, v);

	public HRESULT get_f(float* p) mut => VT.[Friend]get_f(&this, p);

	public HRESULT multiply(ISVGMatrix* secondMatrix, ISVGMatrix** ppResult) mut => VT.[Friend]multiply(&this, secondMatrix, ppResult);

	public HRESULT inverse(ISVGMatrix** ppResult) mut => VT.[Friend]inverse(&this, ppResult);

	public HRESULT translate(float x, float y, ISVGMatrix** ppResult) mut => VT.[Friend]translate(&this, x, y, ppResult);

	public HRESULT scale(float scaleFactor, ISVGMatrix** ppResult) mut => VT.[Friend]scale(&this, scaleFactor, ppResult);

	public HRESULT scaleNonUniform(float scaleFactorX, float scaleFactorY, ISVGMatrix** ppResult) mut => VT.[Friend]scaleNonUniform(&this, scaleFactorX, scaleFactorY, ppResult);

	public HRESULT rotate(float angle, ISVGMatrix** ppResult) mut => VT.[Friend]rotate(&this, angle, ppResult);

	public HRESULT rotateFromVector(float x, float y, ISVGMatrix** ppResult) mut => VT.[Friend]rotateFromVector(&this, x, y, ppResult);

	public HRESULT flipX(ISVGMatrix** ppResult) mut => VT.[Friend]flipX(&this, ppResult);

	public HRESULT flipY(ISVGMatrix** ppResult) mut => VT.[Friend]flipY(&this, ppResult);

	public HRESULT skewX(float angle, ISVGMatrix** ppResult) mut => VT.[Friend]skewX(&this, angle, ppResult);

	public HRESULT skewY(float angle, ISVGMatrix** ppResult) mut => VT.[Friend]skewY(&this, angle, ppResult);
}

[CRepr]struct ISVGStringList : IDispatch
{
	public new const Guid IID = .(0x305104c8, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 v) put_numberOfItems;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* p) get_numberOfItems;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self) clear;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR newItem, BSTR* ppResult) initialize;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 index, BSTR* ppResult) getItem;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR newItem, int32 index, BSTR* ppResult) insertItemBefore;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR newItem, int32 index, BSTR* ppResult) replaceItem;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 index, BSTR* ppResult) removeItem;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR newItem, BSTR* ppResult) appendItem;
	}


	public HRESULT put_numberOfItems(int32 v) mut => VT.[Friend]put_numberOfItems(&this, v);

	public HRESULT get_numberOfItems(int32* p) mut => VT.[Friend]get_numberOfItems(&this, p);

	public HRESULT clear() mut => VT.[Friend]clear(&this);

	public HRESULT initialize(BSTR newItem, BSTR* ppResult) mut => VT.[Friend]initialize(&this, newItem, ppResult);

	public HRESULT getItem(int32 index, BSTR* ppResult) mut => VT.[Friend]getItem(&this, index, ppResult);

	public HRESULT insertItemBefore(BSTR newItem, int32 index, BSTR* ppResult) mut => VT.[Friend]insertItemBefore(&this, newItem, index, ppResult);

	public HRESULT replaceItem(BSTR newItem, int32 index, BSTR* ppResult) mut => VT.[Friend]replaceItem(&this, newItem, index, ppResult);

	public HRESULT removeItem(int32 index, BSTR* ppResult) mut => VT.[Friend]removeItem(&this, index, ppResult);

	public HRESULT appendItem(BSTR newItem, BSTR* ppResult) mut => VT.[Friend]appendItem(&this, newItem, ppResult);
}

[CRepr]struct ISVGAnimatedRect : IDispatch
{
	public new const Guid IID = .(0x305104d8, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, ISVGRect* v) putref_baseVal;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, ISVGRect** p) get_baseVal;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, ISVGRect* v) putref_animVal;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, ISVGRect** p) get_animVal;
	}


	public HRESULT putref_baseVal(ISVGRect* v) mut => VT.[Friend]putref_baseVal(&this, v);

	public HRESULT get_baseVal(ISVGRect** p) mut => VT.[Friend]get_baseVal(&this, p);

	public HRESULT putref_animVal(ISVGRect* v) mut => VT.[Friend]putref_animVal(&this, v);

	public HRESULT get_animVal(ISVGRect** p) mut => VT.[Friend]get_animVal(&this, p);
}

[CRepr]struct ISVGAnimatedString : IDispatch
{
	public new const Guid IID = .(0x305104c7, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_baseVal;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_baseVal;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_animVal;
	}


	public HRESULT put_baseVal(BSTR v) mut => VT.[Friend]put_baseVal(&this, v);

	public HRESULT get_baseVal(BSTR* p) mut => VT.[Friend]get_baseVal(&this, p);

	public HRESULT get_animVal(BSTR* p) mut => VT.[Friend]get_animVal(&this, p);
}

[CRepr]struct ISVGAnimatedBoolean : IDispatch
{
	public new const Guid IID = .(0x305104c6, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16 v) put_baseVal;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16* p) get_baseVal;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16 v) put_animVal;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16* p) get_animVal;
	}


	public HRESULT put_baseVal(int16 v) mut => VT.[Friend]put_baseVal(&this, v);

	public HRESULT get_baseVal(int16* p) mut => VT.[Friend]get_baseVal(&this, p);

	public HRESULT put_animVal(int16 v) mut => VT.[Friend]put_animVal(&this, v);

	public HRESULT get_animVal(int16* p) mut => VT.[Friend]get_animVal(&this, p);
}

[CRepr]struct ISVGAnimatedTransformList : IDispatch
{
	public new const Guid IID = .(0x305104f9, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, ISVGTransformList* v) putref_baseVal;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, ISVGTransformList** p) get_baseVal;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, ISVGTransformList* v) putref_animVal;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, ISVGTransformList** p) get_animVal;
	}


	public HRESULT putref_baseVal(ISVGTransformList* v) mut => VT.[Friend]putref_baseVal(&this, v);

	public HRESULT get_baseVal(ISVGTransformList** p) mut => VT.[Friend]get_baseVal(&this, p);

	public HRESULT putref_animVal(ISVGTransformList* v) mut => VT.[Friend]putref_animVal(&this, v);

	public HRESULT get_animVal(ISVGTransformList** p) mut => VT.[Friend]get_animVal(&this, p);
}

[CRepr]struct ISVGAnimatedPreserveAspectRatio : IDispatch
{
	public new const Guid IID = .(0x305104fb, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, ISVGPreserveAspectRatio* v) putref_baseVal;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, ISVGPreserveAspectRatio** p) get_baseVal;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, ISVGPreserveAspectRatio* v) putref_animVal;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, ISVGPreserveAspectRatio** p) get_animVal;
	}


	public HRESULT putref_baseVal(ISVGPreserveAspectRatio* v) mut => VT.[Friend]putref_baseVal(&this, v);

	public HRESULT get_baseVal(ISVGPreserveAspectRatio** p) mut => VT.[Friend]get_baseVal(&this, p);

	public HRESULT putref_animVal(ISVGPreserveAspectRatio* v) mut => VT.[Friend]putref_animVal(&this, v);

	public HRESULT get_animVal(ISVGPreserveAspectRatio** p) mut => VT.[Friend]get_animVal(&this, p);
}

[CRepr]struct ISVGStylable : IDispatch
{
	public new const Guid IID = .(0x305104da, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, ISVGAnimatedString** p) get_className;
	}


	public HRESULT get_className(ISVGAnimatedString** p) mut => VT.[Friend]get_className(&this, p);
}

[CRepr]struct ISVGLocatable : IDispatch
{
	public new const Guid IID = .(0x305104db, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, ISVGElement** p) get_nearestViewportElement;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, ISVGElement** p) get_farthestViewportElement;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, ISVGRect** ppResult) getBBox;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, ISVGMatrix** ppResult) getCTM;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, ISVGMatrix** ppResult) getScreenCTM;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, ISVGElement* pElement, ISVGMatrix** ppResult) getTransformToElement;
	}


	public HRESULT get_nearestViewportElement(ISVGElement** p) mut => VT.[Friend]get_nearestViewportElement(&this, p);

	public HRESULT get_farthestViewportElement(ISVGElement** p) mut => VT.[Friend]get_farthestViewportElement(&this, p);

	public HRESULT getBBox(ISVGRect** ppResult) mut => VT.[Friend]getBBox(&this, ppResult);

	public HRESULT getCTM(ISVGMatrix** ppResult) mut => VT.[Friend]getCTM(&this, ppResult);

	public HRESULT getScreenCTM(ISVGMatrix** ppResult) mut => VT.[Friend]getScreenCTM(&this, ppResult);

	public HRESULT getTransformToElement(ISVGElement* pElement, ISVGMatrix** ppResult) mut => VT.[Friend]getTransformToElement(&this, pElement, ppResult);
}

[CRepr]struct ISVGTransformable : IDispatch
{
	public new const Guid IID = .(0x305104dc, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, ISVGAnimatedTransformList** p) get_transform;
	}


	public HRESULT get_transform(ISVGAnimatedTransformList** p) mut => VT.[Friend]get_transform(&this, p);
}

[CRepr]struct ISVGTests : IDispatch
{
	public new const Guid IID = .(0x305104dd, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, ISVGStringList** p) get_requiredFeatures;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, ISVGStringList** p) get_requiredExtensions;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, ISVGStringList** p) get_systemLanguage;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR @extension, int16* pResult) hasExtension;
	}


	public HRESULT get_requiredFeatures(ISVGStringList** p) mut => VT.[Friend]get_requiredFeatures(&this, p);

	public HRESULT get_requiredExtensions(ISVGStringList** p) mut => VT.[Friend]get_requiredExtensions(&this, p);

	public HRESULT get_systemLanguage(ISVGStringList** p) mut => VT.[Friend]get_systemLanguage(&this, p);

	public HRESULT hasExtension(BSTR @extension, int16* pResult) mut => VT.[Friend]hasExtension(&this, @extension, pResult);
}

[CRepr]struct ISVGLangSpace : IDispatch
{
	public new const Guid IID = .(0x305104de, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_xmllang;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_xmllang;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_xmlspace;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_xmlspace;
	}


	public HRESULT put_xmllang(BSTR v) mut => VT.[Friend]put_xmllang(&this, v);

	public HRESULT get_xmllang(BSTR* p) mut => VT.[Friend]get_xmllang(&this, p);

	public HRESULT put_xmlspace(BSTR v) mut => VT.[Friend]put_xmlspace(&this, v);

	public HRESULT get_xmlspace(BSTR* p) mut => VT.[Friend]get_xmlspace(&this, p);
}

[CRepr]struct ISVGExternalResourcesRequired : IDispatch
{
	public new const Guid IID = .(0x305104df, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, ISVGAnimatedBoolean** p) get_externalResourcesRequired;
	}


	public HRESULT get_externalResourcesRequired(ISVGAnimatedBoolean** p) mut => VT.[Friend]get_externalResourcesRequired(&this, p);
}

[CRepr]struct ISVGFitToViewBox : IDispatch
{
	public new const Guid IID = .(0x305104e0, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, ISVGAnimatedRect** p) get_viewBox;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, ISVGAnimatedPreserveAspectRatio* v) putref_preserveAspectRatio;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, ISVGAnimatedPreserveAspectRatio** p) get_preserveAspectRatio;
	}


	public HRESULT get_viewBox(ISVGAnimatedRect** p) mut => VT.[Friend]get_viewBox(&this, p);

	public HRESULT putref_preserveAspectRatio(ISVGAnimatedPreserveAspectRatio* v) mut => VT.[Friend]putref_preserveAspectRatio(&this, v);

	public HRESULT get_preserveAspectRatio(ISVGAnimatedPreserveAspectRatio** p) mut => VT.[Friend]get_preserveAspectRatio(&this, p);
}

[CRepr]struct ISVGZoomAndPan : IDispatch
{
	public new const Guid IID = .(0x305104e1, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16* p) get_zoomAndPan;
	}


	public HRESULT get_zoomAndPan(int16* p) mut => VT.[Friend]get_zoomAndPan(&this, p);
}

[CRepr]struct ISVGURIReference : IDispatch
{
	public new const Guid IID = .(0x305104e3, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, ISVGAnimatedString** p) get_href;
	}


	public HRESULT get_href(ISVGAnimatedString** p) mut => VT.[Friend]get_href(&this, p);
}

[CRepr]struct ISVGAnimatedAngle : IDispatch
{
	public new const Guid IID = .(0x305104d4, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, ISVGAngle* v) putref_baseVal;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, ISVGAngle** p) get_baseVal;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, ISVGAngle* v) putref_animVal;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, ISVGAngle** p) get_animVal;
	}


	public HRESULT putref_baseVal(ISVGAngle* v) mut => VT.[Friend]putref_baseVal(&this, v);

	public HRESULT get_baseVal(ISVGAngle** p) mut => VT.[Friend]get_baseVal(&this, p);

	public HRESULT putref_animVal(ISVGAngle* v) mut => VT.[Friend]putref_animVal(&this, v);

	public HRESULT get_animVal(ISVGAngle** p) mut => VT.[Friend]get_animVal(&this, p);
}

[CRepr]struct ISVGTransformList : IDispatch
{
	public new const Guid IID = .(0x305104f8, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 v) put_numberOfItems;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* p) get_numberOfItems;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self) clear;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, ISVGTransform* newItem, ISVGTransform** ppResult) initialize;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 index, ISVGTransform** ppResult) getItem;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, ISVGTransform* newItem, int32 index, ISVGTransform** ppResult) insertItemBefore;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, ISVGTransform* newItem, int32 index, ISVGTransform** ppResult) replaceItem;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 index, ISVGTransform** ppResult) removeItem;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, ISVGTransform* newItem, ISVGTransform** ppResult) appendItem;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, ISVGMatrix* newItem, ISVGTransform** ppResult) createSVGTransformFromMatrix;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, ISVGTransform** ppResult) consolidate;
	}


	public HRESULT put_numberOfItems(int32 v) mut => VT.[Friend]put_numberOfItems(&this, v);

	public HRESULT get_numberOfItems(int32* p) mut => VT.[Friend]get_numberOfItems(&this, p);

	public HRESULT clear() mut => VT.[Friend]clear(&this);

	public HRESULT initialize(ISVGTransform* newItem, ISVGTransform** ppResult) mut => VT.[Friend]initialize(&this, newItem, ppResult);

	public HRESULT getItem(int32 index, ISVGTransform** ppResult) mut => VT.[Friend]getItem(&this, index, ppResult);

	public HRESULT insertItemBefore(ISVGTransform* newItem, int32 index, ISVGTransform** ppResult) mut => VT.[Friend]insertItemBefore(&this, newItem, index, ppResult);

	public HRESULT replaceItem(ISVGTransform* newItem, int32 index, ISVGTransform** ppResult) mut => VT.[Friend]replaceItem(&this, newItem, index, ppResult);

	public HRESULT removeItem(int32 index, ISVGTransform** ppResult) mut => VT.[Friend]removeItem(&this, index, ppResult);

	public HRESULT appendItem(ISVGTransform* newItem, ISVGTransform** ppResult) mut => VT.[Friend]appendItem(&this, newItem, ppResult);

	public HRESULT createSVGTransformFromMatrix(ISVGMatrix* newItem, ISVGTransform** ppResult) mut => VT.[Friend]createSVGTransformFromMatrix(&this, newItem, ppResult);

	public HRESULT consolidate(ISVGTransform** ppResult) mut => VT.[Friend]consolidate(&this, ppResult);
}

[CRepr]struct ISVGAnimatedEnumeration : IDispatch
{
	public new const Guid IID = .(0x305104c9, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint16 v) put_baseVal;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint16* p) get_baseVal;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint16 v) put_animVal;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint16* p) get_animVal;
	}


	public HRESULT put_baseVal(uint16 v) mut => VT.[Friend]put_baseVal(&this, v);

	public HRESULT get_baseVal(uint16* p) mut => VT.[Friend]get_baseVal(&this, p);

	public HRESULT put_animVal(uint16 v) mut => VT.[Friend]put_animVal(&this, v);

	public HRESULT get_animVal(uint16* p) mut => VT.[Friend]get_animVal(&this, p);
}

[CRepr]struct ISVGAnimatedInteger : IDispatch
{
	public new const Guid IID = .(0x305104ca, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 v) put_baseVal;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* p) get_baseVal;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 v) put_animVal;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* p) get_animVal;
	}


	public HRESULT put_baseVal(int32 v) mut => VT.[Friend]put_baseVal(&this, v);

	public HRESULT get_baseVal(int32* p) mut => VT.[Friend]get_baseVal(&this, p);

	public HRESULT put_animVal(int32 v) mut => VT.[Friend]put_animVal(&this, v);

	public HRESULT get_animVal(int32* p) mut => VT.[Friend]get_animVal(&this, p);
}

[CRepr]struct ISVGLength : IDispatch
{
	public new const Guid IID = .(0x305104cf, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16 v) put_unitType;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16* p) get_unitType;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, float v) put_value;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, float* p) get_value;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, float v) put_valueInSpecifiedUnits;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, float* p) get_valueInSpecifiedUnits;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_valueAsString;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_valueAsString;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16 unitType, float valueInSpecifiedUnits) newValueSpecifiedUnits;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16 unitType) convertToSpecifiedUnits;
	}


	public HRESULT put_unitType(int16 v) mut => VT.[Friend]put_unitType(&this, v);

	public HRESULT get_unitType(int16* p) mut => VT.[Friend]get_unitType(&this, p);

	public HRESULT put_value(float v) mut => VT.[Friend]put_value(&this, v);

	public HRESULT get_value(float* p) mut => VT.[Friend]get_value(&this, p);

	public HRESULT put_valueInSpecifiedUnits(float v) mut => VT.[Friend]put_valueInSpecifiedUnits(&this, v);

	public HRESULT get_valueInSpecifiedUnits(float* p) mut => VT.[Friend]get_valueInSpecifiedUnits(&this, p);

	public HRESULT put_valueAsString(BSTR v) mut => VT.[Friend]put_valueAsString(&this, v);

	public HRESULT get_valueAsString(BSTR* p) mut => VT.[Friend]get_valueAsString(&this, p);

	public HRESULT newValueSpecifiedUnits(int16 unitType, float valueInSpecifiedUnits) mut => VT.[Friend]newValueSpecifiedUnits(&this, unitType, valueInSpecifiedUnits);

	public HRESULT convertToSpecifiedUnits(int16 unitType) mut => VT.[Friend]convertToSpecifiedUnits(&this, unitType);
}

[CRepr]struct ISVGAnimatedLength : IDispatch
{
	public new const Guid IID = .(0x305104d0, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, ISVGLength* v) putref_baseVal;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, ISVGLength** p) get_baseVal;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, ISVGLength* v) putref_animVal;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, ISVGLength** p) get_animVal;
	}


	public HRESULT putref_baseVal(ISVGLength* v) mut => VT.[Friend]putref_baseVal(&this, v);

	public HRESULT get_baseVal(ISVGLength** p) mut => VT.[Friend]get_baseVal(&this, p);

	public HRESULT putref_animVal(ISVGLength* v) mut => VT.[Friend]putref_animVal(&this, v);

	public HRESULT get_animVal(ISVGLength** p) mut => VT.[Friend]get_animVal(&this, p);
}

[CRepr]struct ISVGLengthList : IDispatch
{
	public new const Guid IID = .(0x305104d1, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 v) put_numberOfItems;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* p) get_numberOfItems;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self) clear;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, ISVGLength* newItem, ISVGLength** ppResult) initialize;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 index, ISVGLength** ppResult) getItem;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, ISVGLength* newItem, int32 index, ISVGLength** ppResult) insertItemBefore;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, ISVGLength* newItem, int32 index, ISVGLength** ppResult) replaceItem;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 index, ISVGLength** ppResult) removeItem;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, ISVGLength* newItem, ISVGLength** ppResult) appendItem;
	}


	public HRESULT put_numberOfItems(int32 v) mut => VT.[Friend]put_numberOfItems(&this, v);

	public HRESULT get_numberOfItems(int32* p) mut => VT.[Friend]get_numberOfItems(&this, p);

	public HRESULT clear() mut => VT.[Friend]clear(&this);

	public HRESULT initialize(ISVGLength* newItem, ISVGLength** ppResult) mut => VT.[Friend]initialize(&this, newItem, ppResult);

	public HRESULT getItem(int32 index, ISVGLength** ppResult) mut => VT.[Friend]getItem(&this, index, ppResult);

	public HRESULT insertItemBefore(ISVGLength* newItem, int32 index, ISVGLength** ppResult) mut => VT.[Friend]insertItemBefore(&this, newItem, index, ppResult);

	public HRESULT replaceItem(ISVGLength* newItem, int32 index, ISVGLength** ppResult) mut => VT.[Friend]replaceItem(&this, newItem, index, ppResult);

	public HRESULT removeItem(int32 index, ISVGLength** ppResult) mut => VT.[Friend]removeItem(&this, index, ppResult);

	public HRESULT appendItem(ISVGLength* newItem, ISVGLength** ppResult) mut => VT.[Friend]appendItem(&this, newItem, ppResult);
}

[CRepr]struct ISVGAnimatedLengthList : IDispatch
{
	public new const Guid IID = .(0x305104d2, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, ISVGLengthList* v) putref_baseVal;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, ISVGLengthList** p) get_baseVal;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, ISVGLengthList* v) putref_animVal;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, ISVGLengthList** p) get_animVal;
	}


	public HRESULT putref_baseVal(ISVGLengthList* v) mut => VT.[Friend]putref_baseVal(&this, v);

	public HRESULT get_baseVal(ISVGLengthList** p) mut => VT.[Friend]get_baseVal(&this, p);

	public HRESULT putref_animVal(ISVGLengthList* v) mut => VT.[Friend]putref_animVal(&this, v);

	public HRESULT get_animVal(ISVGLengthList** p) mut => VT.[Friend]get_animVal(&this, p);
}

[CRepr]struct ISVGNumber : IDispatch
{
	public new const Guid IID = .(0x305104cb, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, float v) put_value;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, float* p) get_value;
	}


	public HRESULT put_value(float v) mut => VT.[Friend]put_value(&this, v);

	public HRESULT get_value(float* p) mut => VT.[Friend]get_value(&this, p);
}

[CRepr]struct ISVGAnimatedNumber : IDispatch
{
	public new const Guid IID = .(0x305104cc, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, float v) put_baseVal;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, float* p) get_baseVal;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, float v) put_animVal;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, float* p) get_animVal;
	}


	public HRESULT put_baseVal(float v) mut => VT.[Friend]put_baseVal(&this, v);

	public HRESULT get_baseVal(float* p) mut => VT.[Friend]get_baseVal(&this, p);

	public HRESULT put_animVal(float v) mut => VT.[Friend]put_animVal(&this, v);

	public HRESULT get_animVal(float* p) mut => VT.[Friend]get_animVal(&this, p);
}

[CRepr]struct ISVGNumberList : IDispatch
{
	public new const Guid IID = .(0x305104cd, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 v) put_numberOfItems;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* p) get_numberOfItems;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self) clear;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, ISVGNumber* newItem, ISVGNumber** ppResult) initialize;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 index, ISVGNumber** ppResult) getItem;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, ISVGNumber* newItem, int32 index, ISVGNumber** ppResult) insertItemBefore;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, ISVGNumber* newItem, int32 index, ISVGNumber** ppResult) replaceItem;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 index, ISVGNumber** ppResult) removeItem;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, ISVGNumber* newItem, ISVGNumber** ppResult) appendItem;
	}


	public HRESULT put_numberOfItems(int32 v) mut => VT.[Friend]put_numberOfItems(&this, v);

	public HRESULT get_numberOfItems(int32* p) mut => VT.[Friend]get_numberOfItems(&this, p);

	public HRESULT clear() mut => VT.[Friend]clear(&this);

	public HRESULT initialize(ISVGNumber* newItem, ISVGNumber** ppResult) mut => VT.[Friend]initialize(&this, newItem, ppResult);

	public HRESULT getItem(int32 index, ISVGNumber** ppResult) mut => VT.[Friend]getItem(&this, index, ppResult);

	public HRESULT insertItemBefore(ISVGNumber* newItem, int32 index, ISVGNumber** ppResult) mut => VT.[Friend]insertItemBefore(&this, newItem, index, ppResult);

	public HRESULT replaceItem(ISVGNumber* newItem, int32 index, ISVGNumber** ppResult) mut => VT.[Friend]replaceItem(&this, newItem, index, ppResult);

	public HRESULT removeItem(int32 index, ISVGNumber** ppResult) mut => VT.[Friend]removeItem(&this, index, ppResult);

	public HRESULT appendItem(ISVGNumber* newItem, ISVGNumber** ppResult) mut => VT.[Friend]appendItem(&this, newItem, ppResult);
}

[CRepr]struct ISVGAnimatedNumberList : IDispatch
{
	public new const Guid IID = .(0x305104ce, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, ISVGNumberList* v) putref_baseVal;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, ISVGNumberList** p) get_baseVal;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, ISVGNumberList* v) putref_animVal;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, ISVGNumberList** p) get_animVal;
	}


	public HRESULT putref_baseVal(ISVGNumberList* v) mut => VT.[Friend]putref_baseVal(&this, v);

	public HRESULT get_baseVal(ISVGNumberList** p) mut => VT.[Friend]get_baseVal(&this, p);

	public HRESULT putref_animVal(ISVGNumberList* v) mut => VT.[Friend]putref_animVal(&this, v);

	public HRESULT get_animVal(ISVGNumberList** p) mut => VT.[Friend]get_animVal(&this, p);
}

[CRepr]struct ISVGClipPathElement : IDispatch
{
	public new const Guid IID = .(0x3051052d, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, ISVGAnimatedEnumeration* v) putref_clipPathUnits;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, ISVGAnimatedEnumeration** p) get_clipPathUnits;
	}


	public HRESULT putref_clipPathUnits(ISVGAnimatedEnumeration* v) mut => VT.[Friend]putref_clipPathUnits(&this, v);

	public HRESULT get_clipPathUnits(ISVGAnimatedEnumeration** p) mut => VT.[Friend]get_clipPathUnits(&this, p);
}

[CRepr]struct DispSVGClipPathElement : IDispatch
{
	public new const Guid IID = .(0x3059003b, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
	}

}

[CRepr]struct ISVGDocument : IDispatch
{
	public new const Guid IID = .(0x305104e6, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, ISVGSVGElement** p) get_rootElement;
	}


	public HRESULT get_rootElement(ISVGSVGElement** p) mut => VT.[Friend]get_rootElement(&this, p);
}

[CRepr]struct IGetSVGDocument : IDispatch
{
	public new const Guid IID = .(0x305105ab, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IDispatch** ppSVGDocument) getSVGDocument;
	}


	public HRESULT getSVGDocument(IDispatch** ppSVGDocument) mut => VT.[Friend]getSVGDocument(&this, ppSVGDocument);
}

[CRepr]struct DispSVGElement : IDispatch
{
	public new const Guid IID = .(0x30590000, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
	}

}

[CRepr]struct IICCSVGColor : IDispatch
{
	public new const Guid IID = .(0x305104d6, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
	}

}

[CRepr]struct ISVGPaint : IDispatch
{
	public new const Guid IID = .(0x30510524, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
	}

}

[CRepr]struct ISVGPatternElement : IDispatch
{
	public new const Guid IID = .(0x3051052c, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, ISVGAnimatedEnumeration* v) putref_patternUnits;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, ISVGAnimatedEnumeration** p) get_patternUnits;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, ISVGAnimatedEnumeration* v) putref_patternContentUnits;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, ISVGAnimatedEnumeration** p) get_patternContentUnits;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, ISVGAnimatedTransformList* v) putref_patternTransform;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, ISVGAnimatedTransformList** p) get_patternTransform;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, ISVGAnimatedLength* v) putref_x;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, ISVGAnimatedLength** p) get_x;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, ISVGAnimatedLength* v) putref_y;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, ISVGAnimatedLength** p) get_y;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, ISVGAnimatedLength* v) putref_width;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, ISVGAnimatedLength** p) get_width;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, ISVGAnimatedLength* v) putref_height;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, ISVGAnimatedLength** p) get_height;
	}


	public HRESULT putref_patternUnits(ISVGAnimatedEnumeration* v) mut => VT.[Friend]putref_patternUnits(&this, v);

	public HRESULT get_patternUnits(ISVGAnimatedEnumeration** p) mut => VT.[Friend]get_patternUnits(&this, p);

	public HRESULT putref_patternContentUnits(ISVGAnimatedEnumeration* v) mut => VT.[Friend]putref_patternContentUnits(&this, v);

	public HRESULT get_patternContentUnits(ISVGAnimatedEnumeration** p) mut => VT.[Friend]get_patternContentUnits(&this, p);

	public HRESULT putref_patternTransform(ISVGAnimatedTransformList* v) mut => VT.[Friend]putref_patternTransform(&this, v);

	public HRESULT get_patternTransform(ISVGAnimatedTransformList** p) mut => VT.[Friend]get_patternTransform(&this, p);

	public HRESULT putref_x(ISVGAnimatedLength* v) mut => VT.[Friend]putref_x(&this, v);

	public HRESULT get_x(ISVGAnimatedLength** p) mut => VT.[Friend]get_x(&this, p);

	public HRESULT putref_y(ISVGAnimatedLength* v) mut => VT.[Friend]putref_y(&this, v);

	public HRESULT get_y(ISVGAnimatedLength** p) mut => VT.[Friend]get_y(&this, p);

	public HRESULT putref_width(ISVGAnimatedLength* v) mut => VT.[Friend]putref_width(&this, v);

	public HRESULT get_width(ISVGAnimatedLength** p) mut => VT.[Friend]get_width(&this, p);

	public HRESULT putref_height(ISVGAnimatedLength* v) mut => VT.[Friend]putref_height(&this, v);

	public HRESULT get_height(ISVGAnimatedLength** p) mut => VT.[Friend]get_height(&this, p);
}

[CRepr]struct DispSVGPatternElement : IDispatch
{
	public new const Guid IID = .(0x3059002c, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
	}

}

[CRepr]struct ISVGPathSeg : IDispatch
{
	public new const Guid IID = .(0x305104fc, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16 v) put_pathSegType;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16* p) get_pathSegType;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_pathSegTypeAsLetter;
	}


	public HRESULT put_pathSegType(int16 v) mut => VT.[Friend]put_pathSegType(&this, v);

	public HRESULT get_pathSegType(int16* p) mut => VT.[Friend]get_pathSegType(&this, p);

	public HRESULT get_pathSegTypeAsLetter(BSTR* p) mut => VT.[Friend]get_pathSegTypeAsLetter(&this, p);
}

[CRepr]struct ISVGPathSegArcAbs : IDispatch
{
	public new const Guid IID = .(0x30510506, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, float v) put_x;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, float* p) get_x;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, float v) put_y;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, float* p) get_y;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, float v) put_r1;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, float* p) get_r1;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, float v) put_r2;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, float* p) get_r2;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, float v) put_angle;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, float* p) get_angle;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16 v) put_largeArcFlag;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16* p) get_largeArcFlag;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16 v) put_sweepFlag;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16* p) get_sweepFlag;
	}


	public HRESULT put_x(float v) mut => VT.[Friend]put_x(&this, v);

	public HRESULT get_x(float* p) mut => VT.[Friend]get_x(&this, p);

	public HRESULT put_y(float v) mut => VT.[Friend]put_y(&this, v);

	public HRESULT get_y(float* p) mut => VT.[Friend]get_y(&this, p);

	public HRESULT put_r1(float v) mut => VT.[Friend]put_r1(&this, v);

	public HRESULT get_r1(float* p) mut => VT.[Friend]get_r1(&this, p);

	public HRESULT put_r2(float v) mut => VT.[Friend]put_r2(&this, v);

	public HRESULT get_r2(float* p) mut => VT.[Friend]get_r2(&this, p);

	public HRESULT put_angle(float v) mut => VT.[Friend]put_angle(&this, v);

	public HRESULT get_angle(float* p) mut => VT.[Friend]get_angle(&this, p);

	public HRESULT put_largeArcFlag(int16 v) mut => VT.[Friend]put_largeArcFlag(&this, v);

	public HRESULT get_largeArcFlag(int16* p) mut => VT.[Friend]get_largeArcFlag(&this, p);

	public HRESULT put_sweepFlag(int16 v) mut => VT.[Friend]put_sweepFlag(&this, v);

	public HRESULT get_sweepFlag(int16* p) mut => VT.[Friend]get_sweepFlag(&this, p);
}

[CRepr]struct ISVGPathSegArcRel : IDispatch
{
	public new const Guid IID = .(0x30510507, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, float v) put_x;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, float* p) get_x;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, float v) put_y;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, float* p) get_y;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, float v) put_r1;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, float* p) get_r1;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, float v) put_r2;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, float* p) get_r2;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, float v) put_angle;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, float* p) get_angle;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16 v) put_largeArcFlag;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16* p) get_largeArcFlag;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16 v) put_sweepFlag;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16* p) get_sweepFlag;
	}


	public HRESULT put_x(float v) mut => VT.[Friend]put_x(&this, v);

	public HRESULT get_x(float* p) mut => VT.[Friend]get_x(&this, p);

	public HRESULT put_y(float v) mut => VT.[Friend]put_y(&this, v);

	public HRESULT get_y(float* p) mut => VT.[Friend]get_y(&this, p);

	public HRESULT put_r1(float v) mut => VT.[Friend]put_r1(&this, v);

	public HRESULT get_r1(float* p) mut => VT.[Friend]get_r1(&this, p);

	public HRESULT put_r2(float v) mut => VT.[Friend]put_r2(&this, v);

	public HRESULT get_r2(float* p) mut => VT.[Friend]get_r2(&this, p);

	public HRESULT put_angle(float v) mut => VT.[Friend]put_angle(&this, v);

	public HRESULT get_angle(float* p) mut => VT.[Friend]get_angle(&this, p);

	public HRESULT put_largeArcFlag(int16 v) mut => VT.[Friend]put_largeArcFlag(&this, v);

	public HRESULT get_largeArcFlag(int16* p) mut => VT.[Friend]get_largeArcFlag(&this, p);

	public HRESULT put_sweepFlag(int16 v) mut => VT.[Friend]put_sweepFlag(&this, v);

	public HRESULT get_sweepFlag(int16* p) mut => VT.[Friend]get_sweepFlag(&this, p);
}

[CRepr]struct ISVGPathSegClosePath : IDispatch
{
	public new const Guid IID = .(0x305104fd, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
	}

}

[CRepr]struct ISVGPathSegMovetoAbs : IDispatch
{
	public new const Guid IID = .(0x305104fe, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, float v) put_x;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, float* p) get_x;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, float v) put_y;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, float* p) get_y;
	}


	public HRESULT put_x(float v) mut => VT.[Friend]put_x(&this, v);

	public HRESULT get_x(float* p) mut => VT.[Friend]get_x(&this, p);

	public HRESULT put_y(float v) mut => VT.[Friend]put_y(&this, v);

	public HRESULT get_y(float* p) mut => VT.[Friend]get_y(&this, p);
}

[CRepr]struct ISVGPathSegMovetoRel : IDispatch
{
	public new const Guid IID = .(0x305104ff, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, float v) put_x;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, float* p) get_x;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, float v) put_y;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, float* p) get_y;
	}


	public HRESULT put_x(float v) mut => VT.[Friend]put_x(&this, v);

	public HRESULT get_x(float* p) mut => VT.[Friend]get_x(&this, p);

	public HRESULT put_y(float v) mut => VT.[Friend]put_y(&this, v);

	public HRESULT get_y(float* p) mut => VT.[Friend]get_y(&this, p);
}

[CRepr]struct ISVGPathSegLinetoAbs : IDispatch
{
	public new const Guid IID = .(0x30510500, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, float v) put_x;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, float* p) get_x;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, float v) put_y;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, float* p) get_y;
	}


	public HRESULT put_x(float v) mut => VT.[Friend]put_x(&this, v);

	public HRESULT get_x(float* p) mut => VT.[Friend]get_x(&this, p);

	public HRESULT put_y(float v) mut => VT.[Friend]put_y(&this, v);

	public HRESULT get_y(float* p) mut => VT.[Friend]get_y(&this, p);
}

[CRepr]struct ISVGPathSegLinetoRel : IDispatch
{
	public new const Guid IID = .(0x30510501, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, float v) put_x;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, float* p) get_x;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, float v) put_y;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, float* p) get_y;
	}


	public HRESULT put_x(float v) mut => VT.[Friend]put_x(&this, v);

	public HRESULT get_x(float* p) mut => VT.[Friend]get_x(&this, p);

	public HRESULT put_y(float v) mut => VT.[Friend]put_y(&this, v);

	public HRESULT get_y(float* p) mut => VT.[Friend]get_y(&this, p);
}

[CRepr]struct ISVGPathSegCurvetoCubicAbs : IDispatch
{
	public new const Guid IID = .(0x30510502, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, float v) put_x;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, float* p) get_x;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, float v) put_y;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, float* p) get_y;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, float v) put_x1;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, float* p) get_x1;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, float v) put_y1;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, float* p) get_y1;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, float v) put_x2;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, float* p) get_x2;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, float v) put_y2;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, float* p) get_y2;
	}


	public HRESULT put_x(float v) mut => VT.[Friend]put_x(&this, v);

	public HRESULT get_x(float* p) mut => VT.[Friend]get_x(&this, p);

	public HRESULT put_y(float v) mut => VT.[Friend]put_y(&this, v);

	public HRESULT get_y(float* p) mut => VT.[Friend]get_y(&this, p);

	public HRESULT put_x1(float v) mut => VT.[Friend]put_x1(&this, v);

	public HRESULT get_x1(float* p) mut => VT.[Friend]get_x1(&this, p);

	public HRESULT put_y1(float v) mut => VT.[Friend]put_y1(&this, v);

	public HRESULT get_y1(float* p) mut => VT.[Friend]get_y1(&this, p);

	public HRESULT put_x2(float v) mut => VT.[Friend]put_x2(&this, v);

	public HRESULT get_x2(float* p) mut => VT.[Friend]get_x2(&this, p);

	public HRESULT put_y2(float v) mut => VT.[Friend]put_y2(&this, v);

	public HRESULT get_y2(float* p) mut => VT.[Friend]get_y2(&this, p);
}

[CRepr]struct ISVGPathSegCurvetoCubicRel : IDispatch
{
	public new const Guid IID = .(0x30510503, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, float v) put_x;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, float* p) get_x;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, float v) put_y;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, float* p) get_y;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, float v) put_x1;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, float* p) get_x1;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, float v) put_y1;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, float* p) get_y1;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, float v) put_x2;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, float* p) get_x2;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, float v) put_y2;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, float* p) get_y2;
	}


	public HRESULT put_x(float v) mut => VT.[Friend]put_x(&this, v);

	public HRESULT get_x(float* p) mut => VT.[Friend]get_x(&this, p);

	public HRESULT put_y(float v) mut => VT.[Friend]put_y(&this, v);

	public HRESULT get_y(float* p) mut => VT.[Friend]get_y(&this, p);

	public HRESULT put_x1(float v) mut => VT.[Friend]put_x1(&this, v);

	public HRESULT get_x1(float* p) mut => VT.[Friend]get_x1(&this, p);

	public HRESULT put_y1(float v) mut => VT.[Friend]put_y1(&this, v);

	public HRESULT get_y1(float* p) mut => VT.[Friend]get_y1(&this, p);

	public HRESULT put_x2(float v) mut => VT.[Friend]put_x2(&this, v);

	public HRESULT get_x2(float* p) mut => VT.[Friend]get_x2(&this, p);

	public HRESULT put_y2(float v) mut => VT.[Friend]put_y2(&this, v);

	public HRESULT get_y2(float* p) mut => VT.[Friend]get_y2(&this, p);
}

[CRepr]struct ISVGPathSegCurvetoCubicSmoothAbs : IDispatch
{
	public new const Guid IID = .(0x3051050c, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, float v) put_x;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, float* p) get_x;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, float v) put_y;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, float* p) get_y;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, float v) put_x2;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, float* p) get_x2;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, float v) put_y2;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, float* p) get_y2;
	}


	public HRESULT put_x(float v) mut => VT.[Friend]put_x(&this, v);

	public HRESULT get_x(float* p) mut => VT.[Friend]get_x(&this, p);

	public HRESULT put_y(float v) mut => VT.[Friend]put_y(&this, v);

	public HRESULT get_y(float* p) mut => VT.[Friend]get_y(&this, p);

	public HRESULT put_x2(float v) mut => VT.[Friend]put_x2(&this, v);

	public HRESULT get_x2(float* p) mut => VT.[Friend]get_x2(&this, p);

	public HRESULT put_y2(float v) mut => VT.[Friend]put_y2(&this, v);

	public HRESULT get_y2(float* p) mut => VT.[Friend]get_y2(&this, p);
}

[CRepr]struct ISVGPathSegCurvetoCubicSmoothRel : IDispatch
{
	public new const Guid IID = .(0x3051050d, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, float v) put_x;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, float* p) get_x;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, float v) put_y;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, float* p) get_y;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, float v) put_x2;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, float* p) get_x2;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, float v) put_y2;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, float* p) get_y2;
	}


	public HRESULT put_x(float v) mut => VT.[Friend]put_x(&this, v);

	public HRESULT get_x(float* p) mut => VT.[Friend]get_x(&this, p);

	public HRESULT put_y(float v) mut => VT.[Friend]put_y(&this, v);

	public HRESULT get_y(float* p) mut => VT.[Friend]get_y(&this, p);

	public HRESULT put_x2(float v) mut => VT.[Friend]put_x2(&this, v);

	public HRESULT get_x2(float* p) mut => VT.[Friend]get_x2(&this, p);

	public HRESULT put_y2(float v) mut => VT.[Friend]put_y2(&this, v);

	public HRESULT get_y2(float* p) mut => VT.[Friend]get_y2(&this, p);
}

[CRepr]struct ISVGPathSegCurvetoQuadraticAbs : IDispatch
{
	public new const Guid IID = .(0x30510504, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, float v) put_x;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, float* p) get_x;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, float v) put_y;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, float* p) get_y;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, float v) put_x1;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, float* p) get_x1;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, float v) put_y1;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, float* p) get_y1;
	}


	public HRESULT put_x(float v) mut => VT.[Friend]put_x(&this, v);

	public HRESULT get_x(float* p) mut => VT.[Friend]get_x(&this, p);

	public HRESULT put_y(float v) mut => VT.[Friend]put_y(&this, v);

	public HRESULT get_y(float* p) mut => VT.[Friend]get_y(&this, p);

	public HRESULT put_x1(float v) mut => VT.[Friend]put_x1(&this, v);

	public HRESULT get_x1(float* p) mut => VT.[Friend]get_x1(&this, p);

	public HRESULT put_y1(float v) mut => VT.[Friend]put_y1(&this, v);

	public HRESULT get_y1(float* p) mut => VT.[Friend]get_y1(&this, p);
}

[CRepr]struct ISVGPathSegCurvetoQuadraticRel : IDispatch
{
	public new const Guid IID = .(0x30510505, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, float v) put_x;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, float* p) get_x;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, float v) put_y;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, float* p) get_y;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, float v) put_x1;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, float* p) get_x1;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, float v) put_y1;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, float* p) get_y1;
	}


	public HRESULT put_x(float v) mut => VT.[Friend]put_x(&this, v);

	public HRESULT get_x(float* p) mut => VT.[Friend]get_x(&this, p);

	public HRESULT put_y(float v) mut => VT.[Friend]put_y(&this, v);

	public HRESULT get_y(float* p) mut => VT.[Friend]get_y(&this, p);

	public HRESULT put_x1(float v) mut => VT.[Friend]put_x1(&this, v);

	public HRESULT get_x1(float* p) mut => VT.[Friend]get_x1(&this, p);

	public HRESULT put_y1(float v) mut => VT.[Friend]put_y1(&this, v);

	public HRESULT get_y1(float* p) mut => VT.[Friend]get_y1(&this, p);
}

[CRepr]struct ISVGPathSegCurvetoQuadraticSmoothAbs : IDispatch
{
	public new const Guid IID = .(0x3051050e, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, float v) put_x;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, float* p) get_x;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, float v) put_y;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, float* p) get_y;
	}


	public HRESULT put_x(float v) mut => VT.[Friend]put_x(&this, v);

	public HRESULT get_x(float* p) mut => VT.[Friend]get_x(&this, p);

	public HRESULT put_y(float v) mut => VT.[Friend]put_y(&this, v);

	public HRESULT get_y(float* p) mut => VT.[Friend]get_y(&this, p);
}

[CRepr]struct ISVGPathSegCurvetoQuadraticSmoothRel : IDispatch
{
	public new const Guid IID = .(0x3051050f, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, float v) put_x;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, float* p) get_x;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, float v) put_y;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, float* p) get_y;
	}


	public HRESULT put_x(float v) mut => VT.[Friend]put_x(&this, v);

	public HRESULT get_x(float* p) mut => VT.[Friend]get_x(&this, p);

	public HRESULT put_y(float v) mut => VT.[Friend]put_y(&this, v);

	public HRESULT get_y(float* p) mut => VT.[Friend]get_y(&this, p);
}

[CRepr]struct ISVGPathSegLinetoHorizontalAbs : IDispatch
{
	public new const Guid IID = .(0x30510508, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, float v) put_x;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, float* p) get_x;
	}


	public HRESULT put_x(float v) mut => VT.[Friend]put_x(&this, v);

	public HRESULT get_x(float* p) mut => VT.[Friend]get_x(&this, p);
}

[CRepr]struct ISVGPathSegLinetoHorizontalRel : IDispatch
{
	public new const Guid IID = .(0x30510509, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, float v) put_x;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, float* p) get_x;
	}


	public HRESULT put_x(float v) mut => VT.[Friend]put_x(&this, v);

	public HRESULT get_x(float* p) mut => VT.[Friend]get_x(&this, p);
}

[CRepr]struct ISVGPathSegLinetoVerticalAbs : IDispatch
{
	public new const Guid IID = .(0x3051050a, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, float v) put_y;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, float* p) get_y;
	}


	public HRESULT put_y(float v) mut => VT.[Friend]put_y(&this, v);

	public HRESULT get_y(float* p) mut => VT.[Friend]get_y(&this, p);
}

[CRepr]struct ISVGPathSegLinetoVerticalRel : IDispatch
{
	public new const Guid IID = .(0x3051050b, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, float v) put_y;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, float* p) get_y;
	}


	public HRESULT put_y(float v) mut => VT.[Friend]put_y(&this, v);

	public HRESULT get_y(float* p) mut => VT.[Friend]get_y(&this, p);
}

[CRepr]struct DispSVGPathSegArcAbs : IDispatch
{
	public new const Guid IID = .(0x30590013, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
	}

}

[CRepr]struct DispSVGPathSegArcRel : IDispatch
{
	public new const Guid IID = .(0x30590014, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
	}

}

[CRepr]struct DispSVGPathSegClosePath : IDispatch
{
	public new const Guid IID = .(0x30590015, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
	}

}

[CRepr]struct DispSVGPathSegMovetoAbs : IDispatch
{
	public new const Guid IID = .(0x30590024, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
	}

}

[CRepr]struct DispSVGPathSegMovetoRel : IDispatch
{
	public new const Guid IID = .(0x30590025, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
	}

}

[CRepr]struct DispSVGPathSegLinetoAbs : IDispatch
{
	public new const Guid IID = .(0x3059001e, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
	}

}

[CRepr]struct DispSVGPathSegLinetoRel : IDispatch
{
	public new const Guid IID = .(0x30590021, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
	}

}

[CRepr]struct DispSVGPathSegCurvetoCubicAbs : IDispatch
{
	public new const Guid IID = .(0x30590016, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
	}

}

[CRepr]struct DispSVGPathSegCurvetoCubicRel : IDispatch
{
	public new const Guid IID = .(0x30590017, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
	}

}

[CRepr]struct DispSVGPathSegCurvetoCubicSmoothAbs : IDispatch
{
	public new const Guid IID = .(0x30590018, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
	}

}

[CRepr]struct DispSVGPathSegCurvetoCubicSmoothRel : IDispatch
{
	public new const Guid IID = .(0x30590019, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
	}

}

[CRepr]struct DispSVGPathSegCurvetoQuadraticAbs : IDispatch
{
	public new const Guid IID = .(0x3059001a, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
	}

}

[CRepr]struct DispSVGPathSegCurvetoQuadraticRel : IDispatch
{
	public new const Guid IID = .(0x3059001b, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
	}

}

[CRepr]struct DispSVGPathSegCurvetoQuadraticSmoothAbs : IDispatch
{
	public new const Guid IID = .(0x3059001c, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
	}

}

[CRepr]struct DispSVGPathSegCurvetoQuadraticSmoothRel : IDispatch
{
	public new const Guid IID = .(0x3059001d, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
	}

}

[CRepr]struct DispSVGPathSegLinetoHorizontalAbs : IDispatch
{
	public new const Guid IID = .(0x3059001f, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
	}

}

[CRepr]struct DispSVGPathSegLinetoHorizontalRel : IDispatch
{
	public new const Guid IID = .(0x30590020, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
	}

}

[CRepr]struct DispSVGPathSegLinetoVerticalAbs : IDispatch
{
	public new const Guid IID = .(0x30590022, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
	}

}

[CRepr]struct DispSVGPathSegLinetoVerticalRel : IDispatch
{
	public new const Guid IID = .(0x30590023, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
	}

}

[CRepr]struct ISVGPathSegList : IDispatch
{
	public new const Guid IID = .(0x30510510, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 v) put_numberOfItems;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* p) get_numberOfItems;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self) clear;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, ISVGPathSeg* newItem, ISVGPathSeg** ppResult) initialize;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 index, ISVGPathSeg** ppResult) getItem;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, ISVGPathSeg* newItem, int32 index, ISVGPathSeg** ppResult) insertItemBefore;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, ISVGPathSeg* newItem, int32 index, ISVGPathSeg** ppResult) replaceItem;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 index, ISVGPathSeg** ppResult) removeItem;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, ISVGPathSeg* newItem, ISVGPathSeg** ppResult) appendItem;
	}


	public HRESULT put_numberOfItems(int32 v) mut => VT.[Friend]put_numberOfItems(&this, v);

	public HRESULT get_numberOfItems(int32* p) mut => VT.[Friend]get_numberOfItems(&this, p);

	public HRESULT clear() mut => VT.[Friend]clear(&this);

	public HRESULT initialize(ISVGPathSeg* newItem, ISVGPathSeg** ppResult) mut => VT.[Friend]initialize(&this, newItem, ppResult);

	public HRESULT getItem(int32 index, ISVGPathSeg** ppResult) mut => VT.[Friend]getItem(&this, index, ppResult);

	public HRESULT insertItemBefore(ISVGPathSeg* newItem, int32 index, ISVGPathSeg** ppResult) mut => VT.[Friend]insertItemBefore(&this, newItem, index, ppResult);

	public HRESULT replaceItem(ISVGPathSeg* newItem, int32 index, ISVGPathSeg** ppResult) mut => VT.[Friend]replaceItem(&this, newItem, index, ppResult);

	public HRESULT removeItem(int32 index, ISVGPathSeg** ppResult) mut => VT.[Friend]removeItem(&this, index, ppResult);

	public HRESULT appendItem(ISVGPathSeg* newItem, ISVGPathSeg** ppResult) mut => VT.[Friend]appendItem(&this, newItem, ppResult);
}

[CRepr]struct ISVGPoint : IDispatch
{
	public new const Guid IID = .(0x305104f4, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, float v) put_x;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, float* p) get_x;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, float v) put_y;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, float* p) get_y;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, ISVGMatrix* pMatrix, ISVGPoint** ppResult) matrixTransform;
	}


	public HRESULT put_x(float v) mut => VT.[Friend]put_x(&this, v);

	public HRESULT get_x(float* p) mut => VT.[Friend]get_x(&this, p);

	public HRESULT put_y(float v) mut => VT.[Friend]put_y(&this, v);

	public HRESULT get_y(float* p) mut => VT.[Friend]get_y(&this, p);

	public HRESULT matrixTransform(ISVGMatrix* pMatrix, ISVGPoint** ppResult) mut => VT.[Friend]matrixTransform(&this, pMatrix, ppResult);
}

[CRepr]struct ISVGPointList : IDispatch
{
	public new const Guid IID = .(0x305104f5, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 v) put_numberOfItems;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* p) get_numberOfItems;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self) clear;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, ISVGPoint* pNewItem, ISVGPoint** ppResult) initialize;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 index, ISVGPoint** ppResult) getItem;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, ISVGPoint* pNewItem, int32 index, ISVGPoint** ppResult) insertItemBefore;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, ISVGPoint* pNewItem, int32 index, ISVGPoint** ppResult) replaceItem;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 index, ISVGPoint** ppResult) removeItem;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, ISVGPoint* pNewItem, ISVGPoint** ppResult) appendItem;
	}


	public HRESULT put_numberOfItems(int32 v) mut => VT.[Friend]put_numberOfItems(&this, v);

	public HRESULT get_numberOfItems(int32* p) mut => VT.[Friend]get_numberOfItems(&this, p);

	public HRESULT clear() mut => VT.[Friend]clear(&this);

	public HRESULT initialize(ISVGPoint* pNewItem, ISVGPoint** ppResult) mut => VT.[Friend]initialize(&this, pNewItem, ppResult);

	public HRESULT getItem(int32 index, ISVGPoint** ppResult) mut => VT.[Friend]getItem(&this, index, ppResult);

	public HRESULT insertItemBefore(ISVGPoint* pNewItem, int32 index, ISVGPoint** ppResult) mut => VT.[Friend]insertItemBefore(&this, pNewItem, index, ppResult);

	public HRESULT replaceItem(ISVGPoint* pNewItem, int32 index, ISVGPoint** ppResult) mut => VT.[Friend]replaceItem(&this, pNewItem, index, ppResult);

	public HRESULT removeItem(int32 index, ISVGPoint** ppResult) mut => VT.[Friend]removeItem(&this, index, ppResult);

	public HRESULT appendItem(ISVGPoint* pNewItem, ISVGPoint** ppResult) mut => VT.[Friend]appendItem(&this, pNewItem, ppResult);
}

[CRepr]struct ISVGViewSpec : IDispatch
{
	public new const Guid IID = .(0x305104e2, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
	}

}

[CRepr]struct ISVGTransform : IDispatch
{
	public new const Guid IID = .(0x305104f7, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16 v) put_type;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16* p) get_type;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, ISVGMatrix* v) putref_matrix;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, ISVGMatrix** p) get_matrix;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, float v) put_angle;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, float* p) get_angle;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, ISVGMatrix* matrix) setMatrix;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, float tx, float ty) setTranslate;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, float sx, float sy) setScale;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, float angle, float cx, float cy) setRotate;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, float angle) setSkewX;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, float angle) setSkewY;
	}


	public HRESULT put_type(int16 v) mut => VT.[Friend]put_type(&this, v);

	public HRESULT get_type(int16* p) mut => VT.[Friend]get_type(&this, p);

	public HRESULT putref_matrix(ISVGMatrix* v) mut => VT.[Friend]putref_matrix(&this, v);

	public HRESULT get_matrix(ISVGMatrix** p) mut => VT.[Friend]get_matrix(&this, p);

	public HRESULT put_angle(float v) mut => VT.[Friend]put_angle(&this, v);

	public HRESULT get_angle(float* p) mut => VT.[Friend]get_angle(&this, p);

	public HRESULT setMatrix(ISVGMatrix* matrix) mut => VT.[Friend]setMatrix(&this, matrix);

	public HRESULT setTranslate(float tx, float ty) mut => VT.[Friend]setTranslate(&this, tx, ty);

	public HRESULT setScale(float sx, float sy) mut => VT.[Friend]setScale(&this, sx, sy);

	public HRESULT setRotate(float angle, float cx, float cy) mut => VT.[Friend]setRotate(&this, angle, cx, cy);

	public HRESULT setSkewX(float angle) mut => VT.[Friend]setSkewX(&this, angle);

	public HRESULT setSkewY(float angle) mut => VT.[Friend]setSkewY(&this, angle);
}

[CRepr]struct DispSVGSVGElement : IDispatch
{
	public new const Guid IID = .(0x30590001, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
	}

}

[CRepr]struct ISVGElementInstance : IDispatch
{
	public new const Guid IID = .(0x305104ee, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, ISVGElement** p) get_correspondingElement;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, ISVGUseElement** p) get_correspondingUseElement;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, ISVGElementInstance** p) get_parentNode;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, ISVGElementInstanceList** p) get_childNodes;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, ISVGElementInstance** p) get_firstChild;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, ISVGElementInstance** p) get_lastChild;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, ISVGElementInstance** p) get_previousSibling;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, ISVGElementInstance** p) get_nextSibling;
	}


	public HRESULT get_correspondingElement(ISVGElement** p) mut => VT.[Friend]get_correspondingElement(&this, p);

	public HRESULT get_correspondingUseElement(ISVGUseElement** p) mut => VT.[Friend]get_correspondingUseElement(&this, p);

	public HRESULT get_parentNode(ISVGElementInstance** p) mut => VT.[Friend]get_parentNode(&this, p);

	public HRESULT get_childNodes(ISVGElementInstanceList** p) mut => VT.[Friend]get_childNodes(&this, p);

	public HRESULT get_firstChild(ISVGElementInstance** p) mut => VT.[Friend]get_firstChild(&this, p);

	public HRESULT get_lastChild(ISVGElementInstance** p) mut => VT.[Friend]get_lastChild(&this, p);

	public HRESULT get_previousSibling(ISVGElementInstance** p) mut => VT.[Friend]get_previousSibling(&this, p);

	public HRESULT get_nextSibling(ISVGElementInstance** p) mut => VT.[Friend]get_nextSibling(&this, p);
}

[CRepr]struct ISVGUseElement : IDispatch
{
	public new const Guid IID = .(0x305104ed, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, ISVGAnimatedLength* v) putref_x;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, ISVGAnimatedLength** p) get_x;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, ISVGAnimatedLength* v) putref_y;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, ISVGAnimatedLength** p) get_y;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, ISVGAnimatedLength* v) putref_width;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, ISVGAnimatedLength** p) get_width;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, ISVGAnimatedLength* v) putref_height;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, ISVGAnimatedLength** p) get_height;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, ISVGElementInstance* v) putref_instanceRoot;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, ISVGElementInstance** p) get_instanceRoot;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, ISVGElementInstance* v) putref_animatedInstanceRoot;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, ISVGElementInstance** p) get_animatedInstanceRoot;
	}


	public HRESULT putref_x(ISVGAnimatedLength* v) mut => VT.[Friend]putref_x(&this, v);

	public HRESULT get_x(ISVGAnimatedLength** p) mut => VT.[Friend]get_x(&this, p);

	public HRESULT putref_y(ISVGAnimatedLength* v) mut => VT.[Friend]putref_y(&this, v);

	public HRESULT get_y(ISVGAnimatedLength** p) mut => VT.[Friend]get_y(&this, p);

	public HRESULT putref_width(ISVGAnimatedLength* v) mut => VT.[Friend]putref_width(&this, v);

	public HRESULT get_width(ISVGAnimatedLength** p) mut => VT.[Friend]get_width(&this, p);

	public HRESULT putref_height(ISVGAnimatedLength* v) mut => VT.[Friend]putref_height(&this, v);

	public HRESULT get_height(ISVGAnimatedLength** p) mut => VT.[Friend]get_height(&this, p);

	public HRESULT putref_instanceRoot(ISVGElementInstance* v) mut => VT.[Friend]putref_instanceRoot(&this, v);

	public HRESULT get_instanceRoot(ISVGElementInstance** p) mut => VT.[Friend]get_instanceRoot(&this, p);

	public HRESULT putref_animatedInstanceRoot(ISVGElementInstance* v) mut => VT.[Friend]putref_animatedInstanceRoot(&this, v);

	public HRESULT get_animatedInstanceRoot(ISVGElementInstance** p) mut => VT.[Friend]get_animatedInstanceRoot(&this, p);
}

[CRepr]struct DispSVGUseElement : IDispatch
{
	public new const Guid IID = .(0x30590010, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
	}

}

[CRepr]struct IHTMLStyleSheetRulesAppliedCollection : IDispatch
{
	public new const Guid IID = .(0x305104c0, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 index, IHTMLStyleSheetRule** ppHTMLStyleSheetRule) item;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* p) get_length;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR name, IHTMLStyleSheetRule** ppRule) propertyAppliedBy;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR name, int32 index, IHTMLStyleSheetRule** ppRule) propertyAppliedTrace;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR name, int32* pLength) propertyAppliedTraceLength;
	}


	public HRESULT item(int32 index, IHTMLStyleSheetRule** ppHTMLStyleSheetRule) mut => VT.[Friend]item(&this, index, ppHTMLStyleSheetRule);

	public HRESULT get_length(int32* p) mut => VT.[Friend]get_length(&this, p);

	public HRESULT propertyAppliedBy(BSTR name, IHTMLStyleSheetRule** ppRule) mut => VT.[Friend]propertyAppliedBy(&this, name, ppRule);

	public HRESULT propertyAppliedTrace(BSTR name, int32 index, IHTMLStyleSheetRule** ppRule) mut => VT.[Friend]propertyAppliedTrace(&this, name, index, ppRule);

	public HRESULT propertyAppliedTraceLength(BSTR name, int32* pLength) mut => VT.[Friend]propertyAppliedTraceLength(&this, name, pLength);
}

[CRepr]struct IRulesApplied : IDispatch
{
	public new const Guid IID = .(0x305104bf, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IHTMLElement** p) get_element;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IHTMLStyle** p) get_inlineStyles;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IHTMLStyleSheetRulesAppliedCollection** p) get_appliedRules;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR name, int16* p) propertyIsInline;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR name, int16* p) propertyIsInheritable;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16* p) hasInheritableProperty;
	}


	public HRESULT get_element(IHTMLElement** p) mut => VT.[Friend]get_element(&this, p);

	public HRESULT get_inlineStyles(IHTMLStyle** p) mut => VT.[Friend]get_inlineStyles(&this, p);

	public HRESULT get_appliedRules(IHTMLStyleSheetRulesAppliedCollection** p) mut => VT.[Friend]get_appliedRules(&this, p);

	public HRESULT propertyIsInline(BSTR name, int16* p) mut => VT.[Friend]propertyIsInline(&this, name, p);

	public HRESULT propertyIsInheritable(BSTR name, int16* p) mut => VT.[Friend]propertyIsInheritable(&this, name, p);

	public HRESULT hasInheritableProperty(int16* p) mut => VT.[Friend]hasInheritableProperty(&this, p);
}

[CRepr]struct DispHTMLStyleSheetRulesAppliedCollection : IDispatch
{
	public new const Guid IID = .(0x3050f5a6, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
	}

}

[CRepr]struct DispRulesApplied : IDispatch
{
	public new const Guid IID = .(0x3050f5a5, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
	}

}

[CRepr]struct DispRulesAppliedCollection : IDispatch
{
	public new const Guid IID = .(0x3050f5a4, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
	}

}

[CRepr]struct DispHTMLW3CComputedStyle : IDispatch
{
	public new const Guid IID = .(0x30590070, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
	}

}

[CRepr]struct ISVGAnimatedPoints : IDispatch
{
	public new const Guid IID = .(0x30510517, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, ISVGPointList* v) putref_points;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, ISVGPointList** p) get_points;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, ISVGPointList* v) putref_animatedPoints;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, ISVGPointList** p) get_animatedPoints;
	}


	public HRESULT putref_points(ISVGPointList* v) mut => VT.[Friend]putref_points(&this, v);

	public HRESULT get_points(ISVGPointList** p) mut => VT.[Friend]get_points(&this, p);

	public HRESULT putref_animatedPoints(ISVGPointList* v) mut => VT.[Friend]putref_animatedPoints(&this, v);

	public HRESULT get_animatedPoints(ISVGPointList** p) mut => VT.[Friend]get_animatedPoints(&this, p);
}

[CRepr]struct ISVGCircleElement : IDispatch
{
	public new const Guid IID = .(0x30510514, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, ISVGAnimatedLength* v) putref_cx;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, ISVGAnimatedLength** p) get_cx;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, ISVGAnimatedLength* v) putref_cy;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, ISVGAnimatedLength** p) get_cy;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, ISVGAnimatedLength* v) putref_r;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, ISVGAnimatedLength** p) get_r;
	}


	public HRESULT putref_cx(ISVGAnimatedLength* v) mut => VT.[Friend]putref_cx(&this, v);

	public HRESULT get_cx(ISVGAnimatedLength** p) mut => VT.[Friend]get_cx(&this, p);

	public HRESULT putref_cy(ISVGAnimatedLength* v) mut => VT.[Friend]putref_cy(&this, v);

	public HRESULT get_cy(ISVGAnimatedLength** p) mut => VT.[Friend]get_cy(&this, p);

	public HRESULT putref_r(ISVGAnimatedLength* v) mut => VT.[Friend]putref_r(&this, v);

	public HRESULT get_r(ISVGAnimatedLength** p) mut => VT.[Friend]get_r(&this, p);
}

[CRepr]struct ISVGEllipseElement : IDispatch
{
	public new const Guid IID = .(0x30510515, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, ISVGAnimatedLength* v) putref_cx;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, ISVGAnimatedLength** p) get_cx;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, ISVGAnimatedLength* v) putref_cy;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, ISVGAnimatedLength** p) get_cy;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, ISVGAnimatedLength* v) putref_rx;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, ISVGAnimatedLength** p) get_rx;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, ISVGAnimatedLength* v) putref_ry;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, ISVGAnimatedLength** p) get_ry;
	}


	public HRESULT putref_cx(ISVGAnimatedLength* v) mut => VT.[Friend]putref_cx(&this, v);

	public HRESULT get_cx(ISVGAnimatedLength** p) mut => VT.[Friend]get_cx(&this, p);

	public HRESULT putref_cy(ISVGAnimatedLength* v) mut => VT.[Friend]putref_cy(&this, v);

	public HRESULT get_cy(ISVGAnimatedLength** p) mut => VT.[Friend]get_cy(&this, p);

	public HRESULT putref_rx(ISVGAnimatedLength* v) mut => VT.[Friend]putref_rx(&this, v);

	public HRESULT get_rx(ISVGAnimatedLength** p) mut => VT.[Friend]get_rx(&this, p);

	public HRESULT putref_ry(ISVGAnimatedLength* v) mut => VT.[Friend]putref_ry(&this, v);

	public HRESULT get_ry(ISVGAnimatedLength** p) mut => VT.[Friend]get_ry(&this, p);
}

[CRepr]struct ISVGLineElement : IDispatch
{
	public new const Guid IID = .(0x30510516, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, ISVGAnimatedLength* v) putref_x1;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, ISVGAnimatedLength** p) get_x1;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, ISVGAnimatedLength* v) putref_y1;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, ISVGAnimatedLength** p) get_y1;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, ISVGAnimatedLength* v) putref_x2;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, ISVGAnimatedLength** p) get_x2;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, ISVGAnimatedLength* v) putref_y2;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, ISVGAnimatedLength** p) get_y2;
	}


	public HRESULT putref_x1(ISVGAnimatedLength* v) mut => VT.[Friend]putref_x1(&this, v);

	public HRESULT get_x1(ISVGAnimatedLength** p) mut => VT.[Friend]get_x1(&this, p);

	public HRESULT putref_y1(ISVGAnimatedLength* v) mut => VT.[Friend]putref_y1(&this, v);

	public HRESULT get_y1(ISVGAnimatedLength** p) mut => VT.[Friend]get_y1(&this, p);

	public HRESULT putref_x2(ISVGAnimatedLength* v) mut => VT.[Friend]putref_x2(&this, v);

	public HRESULT get_x2(ISVGAnimatedLength** p) mut => VT.[Friend]get_x2(&this, p);

	public HRESULT putref_y2(ISVGAnimatedLength* v) mut => VT.[Friend]putref_y2(&this, v);

	public HRESULT get_y2(ISVGAnimatedLength** p) mut => VT.[Friend]get_y2(&this, p);
}

[CRepr]struct ISVGRectElement : IDispatch
{
	public new const Guid IID = .(0x30510513, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, ISVGAnimatedLength* v) putref_x;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, ISVGAnimatedLength** p) get_x;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, ISVGAnimatedLength* v) putref_y;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, ISVGAnimatedLength** p) get_y;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, ISVGAnimatedLength* v) putref_width;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, ISVGAnimatedLength** p) get_width;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, ISVGAnimatedLength* v) putref_height;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, ISVGAnimatedLength** p) get_height;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, ISVGAnimatedLength* v) putref_rx;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, ISVGAnimatedLength** p) get_rx;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, ISVGAnimatedLength* v) putref_ry;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, ISVGAnimatedLength** p) get_ry;
	}


	public HRESULT putref_x(ISVGAnimatedLength* v) mut => VT.[Friend]putref_x(&this, v);

	public HRESULT get_x(ISVGAnimatedLength** p) mut => VT.[Friend]get_x(&this, p);

	public HRESULT putref_y(ISVGAnimatedLength* v) mut => VT.[Friend]putref_y(&this, v);

	public HRESULT get_y(ISVGAnimatedLength** p) mut => VT.[Friend]get_y(&this, p);

	public HRESULT putref_width(ISVGAnimatedLength* v) mut => VT.[Friend]putref_width(&this, v);

	public HRESULT get_width(ISVGAnimatedLength** p) mut => VT.[Friend]get_width(&this, p);

	public HRESULT putref_height(ISVGAnimatedLength* v) mut => VT.[Friend]putref_height(&this, v);

	public HRESULT get_height(ISVGAnimatedLength** p) mut => VT.[Friend]get_height(&this, p);

	public HRESULT putref_rx(ISVGAnimatedLength* v) mut => VT.[Friend]putref_rx(&this, v);

	public HRESULT get_rx(ISVGAnimatedLength** p) mut => VT.[Friend]get_rx(&this, p);

	public HRESULT putref_ry(ISVGAnimatedLength* v) mut => VT.[Friend]putref_ry(&this, v);

	public HRESULT get_ry(ISVGAnimatedLength** p) mut => VT.[Friend]get_ry(&this, p);
}

[CRepr]struct ISVGPolygonElement : IDispatch
{
	public new const Guid IID = .(0x30510519, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
	}

}

[CRepr]struct ISVGPolylineElement : IDispatch
{
	public new const Guid IID = .(0x30510518, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
	}

}

[CRepr]struct DispSVGCircleElement : IDispatch
{
	public new const Guid IID = .(0x3059000a, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
	}

}

[CRepr]struct DispSVGEllipseElement : IDispatch
{
	public new const Guid IID = .(0x3059000b, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
	}

}

[CRepr]struct DispSVGLineElement : IDispatch
{
	public new const Guid IID = .(0x3059000c, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
	}

}

[CRepr]struct DispSVGRectElement : IDispatch
{
	public new const Guid IID = .(0x30590009, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
	}

}

[CRepr]struct DispSVGPolygonElement : IDispatch
{
	public new const Guid IID = .(0x3059000d, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
	}

}

[CRepr]struct DispSVGPolylineElement : IDispatch
{
	public new const Guid IID = .(0x3059000e, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
	}

}

[CRepr]struct ISVGGElement : IDispatch
{
	public new const Guid IID = .(0x305104e8, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
	}

}

[CRepr]struct DispSVGGElement : IDispatch
{
	public new const Guid IID = .(0x30590002, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
	}

}

[CRepr]struct ISVGSymbolElement : IDispatch
{
	public new const Guid IID = .(0x305104ec, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
	}

}

[CRepr]struct DispSVGSymbolElement : IDispatch
{
	public new const Guid IID = .(0x30590004, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
	}

}

[CRepr]struct ISVGDefsElement : IDispatch
{
	public new const Guid IID = .(0x305104e9, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
	}

}

[CRepr]struct DispSVGDefsElement : IDispatch
{
	public new const Guid IID = .(0x30590003, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
	}

}

[CRepr]struct ISVGAnimatedPathData : IDispatch
{
	public new const Guid IID = .(0x30510511, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, ISVGPathSegList* v) putref_pathSegList;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, ISVGPathSegList** p) get_pathSegList;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, ISVGPathSegList* v) putref_normalizedPathSegList;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, ISVGPathSegList** p) get_normalizedPathSegList;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, ISVGPathSegList* v) putref_animatedPathSegList;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, ISVGPathSegList** p) get_animatedPathSegList;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, ISVGPathSegList* v) putref_animatedNormalizedPathSegList;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, ISVGPathSegList** p) get_animatedNormalizedPathSegList;
	}


	public HRESULT putref_pathSegList(ISVGPathSegList* v) mut => VT.[Friend]putref_pathSegList(&this, v);

	public HRESULT get_pathSegList(ISVGPathSegList** p) mut => VT.[Friend]get_pathSegList(&this, p);

	public HRESULT putref_normalizedPathSegList(ISVGPathSegList* v) mut => VT.[Friend]putref_normalizedPathSegList(&this, v);

	public HRESULT get_normalizedPathSegList(ISVGPathSegList** p) mut => VT.[Friend]get_normalizedPathSegList(&this, p);

	public HRESULT putref_animatedPathSegList(ISVGPathSegList* v) mut => VT.[Friend]putref_animatedPathSegList(&this, v);

	public HRESULT get_animatedPathSegList(ISVGPathSegList** p) mut => VT.[Friend]get_animatedPathSegList(&this, p);

	public HRESULT putref_animatedNormalizedPathSegList(ISVGPathSegList* v) mut => VT.[Friend]putref_animatedNormalizedPathSegList(&this, v);

	public HRESULT get_animatedNormalizedPathSegList(ISVGPathSegList** p) mut => VT.[Friend]get_animatedNormalizedPathSegList(&this, p);
}

[CRepr]struct ISVGPathElement : IDispatch
{
	public new const Guid IID = .(0x30510512, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, ISVGAnimatedNumber* v) putref_pathLength;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, ISVGAnimatedNumber** p) get_pathLength;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, float* pfltResult) getTotalLength;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, float fltdistance, ISVGPoint** ppPointResult) getPointAtLength;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, float fltdistance, int32* plResult) getPathSegAtLength;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, ISVGPathSegClosePath** ppResult) createSVGPathSegClosePath;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, float x, float y, ISVGPathSegMovetoAbs** ppResult) createSVGPathSegMovetoAbs;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, float x, float y, ISVGPathSegMovetoRel** ppResult) createSVGPathSegMovetoRel;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, float x, float y, ISVGPathSegLinetoAbs** ppResult) createSVGPathSegLinetoAbs;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, float x, float y, ISVGPathSegLinetoRel** ppResult) createSVGPathSegLinetoRel;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, float x, float y, float x1, float y1, float x2, float y2, ISVGPathSegCurvetoCubicAbs** ppResult) createSVGPathSegCurvetoCubicAbs;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, float x, float y, float x1, float y1, float x2, float y2, ISVGPathSegCurvetoCubicRel** ppResult) createSVGPathSegCurvetoCubicRel;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, float x, float y, float x1, float y1, ISVGPathSegCurvetoQuadraticAbs** ppResult) createSVGPathSegCurvetoQuadraticAbs;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, float x, float y, float x1, float y1, ISVGPathSegCurvetoQuadraticRel** ppResult) createSVGPathSegCurvetoQuadraticRel;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, float x, float y, float r1, float r2, float angle, int16 largeArcFlag, int16 sweepFlag, ISVGPathSegArcAbs** ppResult) createSVGPathSegArcAbs;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, float x, float y, float r1, float r2, float angle, int16 largeArcFlag, int16 sweepFlag, ISVGPathSegArcRel** ppResult) createSVGPathSegArcRel;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, float x, ISVGPathSegLinetoHorizontalAbs** ppResult) createSVGPathSegLinetoHorizontalAbs;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, float x, ISVGPathSegLinetoHorizontalRel** ppResult) createSVGPathSegLinetoHorizontalRel;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, float y, ISVGPathSegLinetoVerticalAbs** ppResult) createSVGPathSegLinetoVerticalAbs;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, float y, ISVGPathSegLinetoVerticalRel** ppResult) createSVGPathSegLinetoVerticalRel;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, float x, float y, float x2, float y2, ISVGPathSegCurvetoCubicSmoothAbs** ppResult) createSVGPathSegCurvetoCubicSmoothAbs;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, float x, float y, float x2, float y2, ISVGPathSegCurvetoCubicSmoothRel** ppResult) createSVGPathSegCurvetoCubicSmoothRel;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, float x, float y, ISVGPathSegCurvetoQuadraticSmoothAbs** ppResult) createSVGPathSegCurvetoQuadraticSmoothAbs;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, float x, float y, ISVGPathSegCurvetoQuadraticSmoothRel** ppResult) createSVGPathSegCurvetoQuadraticSmoothRel;
	}


	public HRESULT putref_pathLength(ISVGAnimatedNumber* v) mut => VT.[Friend]putref_pathLength(&this, v);

	public HRESULT get_pathLength(ISVGAnimatedNumber** p) mut => VT.[Friend]get_pathLength(&this, p);

	public HRESULT getTotalLength(float* pfltResult) mut => VT.[Friend]getTotalLength(&this, pfltResult);

	public HRESULT getPointAtLength(float fltdistance, ISVGPoint** ppPointResult) mut => VT.[Friend]getPointAtLength(&this, fltdistance, ppPointResult);

	public HRESULT getPathSegAtLength(float fltdistance, int32* plResult) mut => VT.[Friend]getPathSegAtLength(&this, fltdistance, plResult);

	public HRESULT createSVGPathSegClosePath(ISVGPathSegClosePath** ppResult) mut => VT.[Friend]createSVGPathSegClosePath(&this, ppResult);

	public HRESULT createSVGPathSegMovetoAbs(float x, float y, ISVGPathSegMovetoAbs** ppResult) mut => VT.[Friend]createSVGPathSegMovetoAbs(&this, x, y, ppResult);

	public HRESULT createSVGPathSegMovetoRel(float x, float y, ISVGPathSegMovetoRel** ppResult) mut => VT.[Friend]createSVGPathSegMovetoRel(&this, x, y, ppResult);

	public HRESULT createSVGPathSegLinetoAbs(float x, float y, ISVGPathSegLinetoAbs** ppResult) mut => VT.[Friend]createSVGPathSegLinetoAbs(&this, x, y, ppResult);

	public HRESULT createSVGPathSegLinetoRel(float x, float y, ISVGPathSegLinetoRel** ppResult) mut => VT.[Friend]createSVGPathSegLinetoRel(&this, x, y, ppResult);

	public HRESULT createSVGPathSegCurvetoCubicAbs(float x, float y, float x1, float y1, float x2, float y2, ISVGPathSegCurvetoCubicAbs** ppResult) mut => VT.[Friend]createSVGPathSegCurvetoCubicAbs(&this, x, y, x1, y1, x2, y2, ppResult);

	public HRESULT createSVGPathSegCurvetoCubicRel(float x, float y, float x1, float y1, float x2, float y2, ISVGPathSegCurvetoCubicRel** ppResult) mut => VT.[Friend]createSVGPathSegCurvetoCubicRel(&this, x, y, x1, y1, x2, y2, ppResult);

	public HRESULT createSVGPathSegCurvetoQuadraticAbs(float x, float y, float x1, float y1, ISVGPathSegCurvetoQuadraticAbs** ppResult) mut => VT.[Friend]createSVGPathSegCurvetoQuadraticAbs(&this, x, y, x1, y1, ppResult);

	public HRESULT createSVGPathSegCurvetoQuadraticRel(float x, float y, float x1, float y1, ISVGPathSegCurvetoQuadraticRel** ppResult) mut => VT.[Friend]createSVGPathSegCurvetoQuadraticRel(&this, x, y, x1, y1, ppResult);

	public HRESULT createSVGPathSegArcAbs(float x, float y, float r1, float r2, float angle, int16 largeArcFlag, int16 sweepFlag, ISVGPathSegArcAbs** ppResult) mut => VT.[Friend]createSVGPathSegArcAbs(&this, x, y, r1, r2, angle, largeArcFlag, sweepFlag, ppResult);

	public HRESULT createSVGPathSegArcRel(float x, float y, float r1, float r2, float angle, int16 largeArcFlag, int16 sweepFlag, ISVGPathSegArcRel** ppResult) mut => VT.[Friend]createSVGPathSegArcRel(&this, x, y, r1, r2, angle, largeArcFlag, sweepFlag, ppResult);

	public HRESULT createSVGPathSegLinetoHorizontalAbs(float x, ISVGPathSegLinetoHorizontalAbs** ppResult) mut => VT.[Friend]createSVGPathSegLinetoHorizontalAbs(&this, x, ppResult);

	public HRESULT createSVGPathSegLinetoHorizontalRel(float x, ISVGPathSegLinetoHorizontalRel** ppResult) mut => VT.[Friend]createSVGPathSegLinetoHorizontalRel(&this, x, ppResult);

	public HRESULT createSVGPathSegLinetoVerticalAbs(float y, ISVGPathSegLinetoVerticalAbs** ppResult) mut => VT.[Friend]createSVGPathSegLinetoVerticalAbs(&this, y, ppResult);

	public HRESULT createSVGPathSegLinetoVerticalRel(float y, ISVGPathSegLinetoVerticalRel** ppResult) mut => VT.[Friend]createSVGPathSegLinetoVerticalRel(&this, y, ppResult);

	public HRESULT createSVGPathSegCurvetoCubicSmoothAbs(float x, float y, float x2, float y2, ISVGPathSegCurvetoCubicSmoothAbs** ppResult) mut => VT.[Friend]createSVGPathSegCurvetoCubicSmoothAbs(&this, x, y, x2, y2, ppResult);

	public HRESULT createSVGPathSegCurvetoCubicSmoothRel(float x, float y, float x2, float y2, ISVGPathSegCurvetoCubicSmoothRel** ppResult) mut => VT.[Friend]createSVGPathSegCurvetoCubicSmoothRel(&this, x, y, x2, y2, ppResult);

	public HRESULT createSVGPathSegCurvetoQuadraticSmoothAbs(float x, float y, ISVGPathSegCurvetoQuadraticSmoothAbs** ppResult) mut => VT.[Friend]createSVGPathSegCurvetoQuadraticSmoothAbs(&this, x, y, ppResult);

	public HRESULT createSVGPathSegCurvetoQuadraticSmoothRel(float x, float y, ISVGPathSegCurvetoQuadraticSmoothRel** ppResult) mut => VT.[Friend]createSVGPathSegCurvetoQuadraticSmoothRel(&this, x, y, ppResult);
}

[CRepr]struct DispSVGPathElement : IDispatch
{
	public new const Guid IID = .(0x30590011, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
	}

}

[CRepr]struct ISVGPreserveAspectRatio : IDispatch
{
	public new const Guid IID = .(0x305104fa, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16 v) put_align;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16* p) get_align;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16 v) put_meetOrSlice;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16* p) get_meetOrSlice;
	}


	public HRESULT put_align(int16 v) mut => VT.[Friend]put_align(&this, v);

	public HRESULT get_align(int16* p) mut => VT.[Friend]get_align(&this, p);

	public HRESULT put_meetOrSlice(int16 v) mut => VT.[Friend]put_meetOrSlice(&this, v);

	public HRESULT get_meetOrSlice(int16* p) mut => VT.[Friend]get_meetOrSlice(&this, p);
}

[CRepr]struct ISVGTextElement : IDispatch
{
	public new const Guid IID = .(0x3051051c, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
	}

}

[CRepr]struct DispSVGTextElement : IDispatch
{
	public new const Guid IID = .(0x30590037, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
	}

}

[CRepr]struct ISVGImageElement : IDispatch
{
	public new const Guid IID = .(0x305104f0, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, ISVGAnimatedLength* v) putref_x;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, ISVGAnimatedLength** p) get_x;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, ISVGAnimatedLength* v) putref_y;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, ISVGAnimatedLength** p) get_y;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, ISVGAnimatedLength* v) putref_width;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, ISVGAnimatedLength** p) get_width;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, ISVGAnimatedLength* v) putref_height;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, ISVGAnimatedLength** p) get_height;
	}


	public HRESULT putref_x(ISVGAnimatedLength* v) mut => VT.[Friend]putref_x(&this, v);

	public HRESULT get_x(ISVGAnimatedLength** p) mut => VT.[Friend]get_x(&this, p);

	public HRESULT putref_y(ISVGAnimatedLength* v) mut => VT.[Friend]putref_y(&this, v);

	public HRESULT get_y(ISVGAnimatedLength** p) mut => VT.[Friend]get_y(&this, p);

	public HRESULT putref_width(ISVGAnimatedLength* v) mut => VT.[Friend]putref_width(&this, v);

	public HRESULT get_width(ISVGAnimatedLength** p) mut => VT.[Friend]get_width(&this, p);

	public HRESULT putref_height(ISVGAnimatedLength* v) mut => VT.[Friend]putref_height(&this, v);

	public HRESULT get_height(ISVGAnimatedLength** p) mut => VT.[Friend]get_height(&this, p);
}

[CRepr]struct DispSVGImageElement : IDispatch
{
	public new const Guid IID = .(0x30590027, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
	}

}

[CRepr]struct ISVGStopElement : IDispatch
{
	public new const Guid IID = .(0x3051052b, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, ISVGAnimatedNumber* v) putref_offset;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, ISVGAnimatedNumber** p) get_offset;
	}


	public HRESULT putref_offset(ISVGAnimatedNumber* v) mut => VT.[Friend]putref_offset(&this, v);

	public HRESULT get_offset(ISVGAnimatedNumber** p) mut => VT.[Friend]get_offset(&this, p);
}

[CRepr]struct DispSVGStopElement : IDispatch
{
	public new const Guid IID = .(0x3059002d, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
	}

}

[CRepr]struct ISVGGradientElement : IDispatch
{
	public new const Guid IID = .(0x30510528, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, ISVGAnimatedEnumeration* v) putref_gradientUnits;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, ISVGAnimatedEnumeration** p) get_gradientUnits;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, ISVGAnimatedTransformList* v) putref_gradientTransform;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, ISVGAnimatedTransformList** p) get_gradientTransform;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, ISVGAnimatedEnumeration* v) putref_spreadMethod;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, ISVGAnimatedEnumeration** p) get_spreadMethod;
	}


	public HRESULT putref_gradientUnits(ISVGAnimatedEnumeration* v) mut => VT.[Friend]putref_gradientUnits(&this, v);

	public HRESULT get_gradientUnits(ISVGAnimatedEnumeration** p) mut => VT.[Friend]get_gradientUnits(&this, p);

	public HRESULT putref_gradientTransform(ISVGAnimatedTransformList* v) mut => VT.[Friend]putref_gradientTransform(&this, v);

	public HRESULT get_gradientTransform(ISVGAnimatedTransformList** p) mut => VT.[Friend]get_gradientTransform(&this, p);

	public HRESULT putref_spreadMethod(ISVGAnimatedEnumeration* v) mut => VT.[Friend]putref_spreadMethod(&this, v);

	public HRESULT get_spreadMethod(ISVGAnimatedEnumeration** p) mut => VT.[Friend]get_spreadMethod(&this, p);
}

[CRepr]struct DispSVGGradientElement : IDispatch
{
	public new const Guid IID = .(0x3059002e, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
	}

}

[CRepr]struct ISVGLinearGradientElement : IDispatch
{
	public new const Guid IID = .(0x30510529, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, ISVGAnimatedLength* v) putref_x1;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, ISVGAnimatedLength** p) get_x1;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, ISVGAnimatedLength* v) putref_y1;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, ISVGAnimatedLength** p) get_y1;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, ISVGAnimatedLength* v) putref_x2;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, ISVGAnimatedLength** p) get_x2;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, ISVGAnimatedLength* v) putref_y2;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, ISVGAnimatedLength** p) get_y2;
	}


	public HRESULT putref_x1(ISVGAnimatedLength* v) mut => VT.[Friend]putref_x1(&this, v);

	public HRESULT get_x1(ISVGAnimatedLength** p) mut => VT.[Friend]get_x1(&this, p);

	public HRESULT putref_y1(ISVGAnimatedLength* v) mut => VT.[Friend]putref_y1(&this, v);

	public HRESULT get_y1(ISVGAnimatedLength** p) mut => VT.[Friend]get_y1(&this, p);

	public HRESULT putref_x2(ISVGAnimatedLength* v) mut => VT.[Friend]putref_x2(&this, v);

	public HRESULT get_x2(ISVGAnimatedLength** p) mut => VT.[Friend]get_x2(&this, p);

	public HRESULT putref_y2(ISVGAnimatedLength* v) mut => VT.[Friend]putref_y2(&this, v);

	public HRESULT get_y2(ISVGAnimatedLength** p) mut => VT.[Friend]get_y2(&this, p);
}

[CRepr]struct DispSVGLinearGradientElement : IDispatch
{
	public new const Guid IID = .(0x3059002a, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
	}

}

[CRepr]struct ISVGRadialGradientElement : IDispatch
{
	public new const Guid IID = .(0x3051052a, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, ISVGAnimatedLength* v) putref_cx;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, ISVGAnimatedLength** p) get_cx;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, ISVGAnimatedLength* v) putref_cy;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, ISVGAnimatedLength** p) get_cy;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, ISVGAnimatedLength* v) putref_r;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, ISVGAnimatedLength** p) get_r;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, ISVGAnimatedLength* v) putref_fx;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, ISVGAnimatedLength** p) get_fx;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, ISVGAnimatedLength* v) putref_fy;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, ISVGAnimatedLength** p) get_fy;
	}


	public HRESULT putref_cx(ISVGAnimatedLength* v) mut => VT.[Friend]putref_cx(&this, v);

	public HRESULT get_cx(ISVGAnimatedLength** p) mut => VT.[Friend]get_cx(&this, p);

	public HRESULT putref_cy(ISVGAnimatedLength* v) mut => VT.[Friend]putref_cy(&this, v);

	public HRESULT get_cy(ISVGAnimatedLength** p) mut => VT.[Friend]get_cy(&this, p);

	public HRESULT putref_r(ISVGAnimatedLength* v) mut => VT.[Friend]putref_r(&this, v);

	public HRESULT get_r(ISVGAnimatedLength** p) mut => VT.[Friend]get_r(&this, p);

	public HRESULT putref_fx(ISVGAnimatedLength* v) mut => VT.[Friend]putref_fx(&this, v);

	public HRESULT get_fx(ISVGAnimatedLength** p) mut => VT.[Friend]get_fx(&this, p);

	public HRESULT putref_fy(ISVGAnimatedLength* v) mut => VT.[Friend]putref_fy(&this, v);

	public HRESULT get_fy(ISVGAnimatedLength** p) mut => VT.[Friend]get_fy(&this, p);
}

[CRepr]struct DispSVGRadialGradientElement : IDispatch
{
	public new const Guid IID = .(0x3059002b, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
	}

}

[CRepr]struct ISVGMaskElement : IDispatch
{
	public new const Guid IID = .(0x3051052e, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, ISVGAnimatedEnumeration* v) putref_maskUnits;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, ISVGAnimatedEnumeration** p) get_maskUnits;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, ISVGAnimatedEnumeration* v) putref_maskContentUnits;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, ISVGAnimatedEnumeration** p) get_maskContentUnits;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, ISVGAnimatedLength* v) putref_x;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, ISVGAnimatedLength** p) get_x;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, ISVGAnimatedLength* v) putref_y;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, ISVGAnimatedLength** p) get_y;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, ISVGAnimatedLength* v) putref_width;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, ISVGAnimatedLength** p) get_width;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, ISVGAnimatedLength* v) putref_height;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, ISVGAnimatedLength** p) get_height;
	}


	public HRESULT putref_maskUnits(ISVGAnimatedEnumeration* v) mut => VT.[Friend]putref_maskUnits(&this, v);

	public HRESULT get_maskUnits(ISVGAnimatedEnumeration** p) mut => VT.[Friend]get_maskUnits(&this, p);

	public HRESULT putref_maskContentUnits(ISVGAnimatedEnumeration* v) mut => VT.[Friend]putref_maskContentUnits(&this, v);

	public HRESULT get_maskContentUnits(ISVGAnimatedEnumeration** p) mut => VT.[Friend]get_maskContentUnits(&this, p);

	public HRESULT putref_x(ISVGAnimatedLength* v) mut => VT.[Friend]putref_x(&this, v);

	public HRESULT get_x(ISVGAnimatedLength** p) mut => VT.[Friend]get_x(&this, p);

	public HRESULT putref_y(ISVGAnimatedLength* v) mut => VT.[Friend]putref_y(&this, v);

	public HRESULT get_y(ISVGAnimatedLength** p) mut => VT.[Friend]get_y(&this, p);

	public HRESULT putref_width(ISVGAnimatedLength* v) mut => VT.[Friend]putref_width(&this, v);

	public HRESULT get_width(ISVGAnimatedLength** p) mut => VT.[Friend]get_width(&this, p);

	public HRESULT putref_height(ISVGAnimatedLength* v) mut => VT.[Friend]putref_height(&this, v);

	public HRESULT get_height(ISVGAnimatedLength** p) mut => VT.[Friend]get_height(&this, p);
}

[CRepr]struct DispSVGMaskElement : IDispatch
{
	public new const Guid IID = .(0x3059003c, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
	}

}

[CRepr]struct ISVGMarkerElement : IDispatch
{
	public new const Guid IID = .(0x30510525, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, ISVGAnimatedLength* v) putref_refX;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, ISVGAnimatedLength** p) get_refX;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, ISVGAnimatedLength* v) putref_refY;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, ISVGAnimatedLength** p) get_refY;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, ISVGAnimatedEnumeration* v) putref_markerUnits;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, ISVGAnimatedEnumeration** p) get_markerUnits;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, ISVGAnimatedLength* v) putref_markerWidth;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, ISVGAnimatedLength** p) get_markerWidth;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, ISVGAnimatedLength* v) putref_markerHeight;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, ISVGAnimatedLength** p) get_markerHeight;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, ISVGAnimatedEnumeration* v) putref_orientType;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, ISVGAnimatedEnumeration** p) get_orientType;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, ISVGAnimatedAngle* v) putref_orientAngle;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, ISVGAnimatedAngle** p) get_orientAngle;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self) setOrientToAuto;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, ISVGAngle* pSVGAngle) setOrientToAngle;
	}


	public HRESULT putref_refX(ISVGAnimatedLength* v) mut => VT.[Friend]putref_refX(&this, v);

	public HRESULT get_refX(ISVGAnimatedLength** p) mut => VT.[Friend]get_refX(&this, p);

	public HRESULT putref_refY(ISVGAnimatedLength* v) mut => VT.[Friend]putref_refY(&this, v);

	public HRESULT get_refY(ISVGAnimatedLength** p) mut => VT.[Friend]get_refY(&this, p);

	public HRESULT putref_markerUnits(ISVGAnimatedEnumeration* v) mut => VT.[Friend]putref_markerUnits(&this, v);

	public HRESULT get_markerUnits(ISVGAnimatedEnumeration** p) mut => VT.[Friend]get_markerUnits(&this, p);

	public HRESULT putref_markerWidth(ISVGAnimatedLength* v) mut => VT.[Friend]putref_markerWidth(&this, v);

	public HRESULT get_markerWidth(ISVGAnimatedLength** p) mut => VT.[Friend]get_markerWidth(&this, p);

	public HRESULT putref_markerHeight(ISVGAnimatedLength* v) mut => VT.[Friend]putref_markerHeight(&this, v);

	public HRESULT get_markerHeight(ISVGAnimatedLength** p) mut => VT.[Friend]get_markerHeight(&this, p);

	public HRESULT putref_orientType(ISVGAnimatedEnumeration* v) mut => VT.[Friend]putref_orientType(&this, v);

	public HRESULT get_orientType(ISVGAnimatedEnumeration** p) mut => VT.[Friend]get_orientType(&this, p);

	public HRESULT putref_orientAngle(ISVGAnimatedAngle* v) mut => VT.[Friend]putref_orientAngle(&this, v);

	public HRESULT get_orientAngle(ISVGAnimatedAngle** p) mut => VT.[Friend]get_orientAngle(&this, p);

	public HRESULT setOrientToAuto() mut => VT.[Friend]setOrientToAuto(&this);

	public HRESULT setOrientToAngle(ISVGAngle* pSVGAngle) mut => VT.[Friend]setOrientToAngle(&this, pSVGAngle);
}

[CRepr]struct DispSVGMarkerElement : IDispatch
{
	public new const Guid IID = .(0x30590036, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
	}

}

[CRepr]struct ISVGZoomEvent : IDispatch
{
	public new const Guid IID = .(0x3051054e, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, ISVGRect** p) get_zoomRectScreen;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, float* p) get_previousScale;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, ISVGPoint** p) get_previousTranslate;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, float* p) get_newScale;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, ISVGPoint** p) get_newTranslate;
	}


	public HRESULT get_zoomRectScreen(ISVGRect** p) mut => VT.[Friend]get_zoomRectScreen(&this, p);

	public HRESULT get_previousScale(float* p) mut => VT.[Friend]get_previousScale(&this, p);

	public HRESULT get_previousTranslate(ISVGPoint** p) mut => VT.[Friend]get_previousTranslate(&this, p);

	public HRESULT get_newScale(float* p) mut => VT.[Friend]get_newScale(&this, p);

	public HRESULT get_newTranslate(ISVGPoint** p) mut => VT.[Friend]get_newTranslate(&this, p);
}

[CRepr]struct DispSVGZoomEvent : IDispatch
{
	public new const Guid IID = .(0x30590031, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
	}

}

[CRepr]struct ISVGAElement : IDispatch
{
	public new const Guid IID = .(0x3051054b, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, ISVGAnimatedString* v) putref_target;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, ISVGAnimatedString** p) get_target;
	}


	public HRESULT putref_target(ISVGAnimatedString* v) mut => VT.[Friend]putref_target(&this, v);

	public HRESULT get_target(ISVGAnimatedString** p) mut => VT.[Friend]get_target(&this, p);
}

[CRepr]struct DispSVGAElement : IDispatch
{
	public new const Guid IID = .(0x30590033, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
	}

}

[CRepr]struct ISVGViewElement : IDispatch
{
	public new const Guid IID = .(0x3051054c, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, ISVGStringList* v) putref_viewTarget;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, ISVGStringList** p) get_viewTarget;
	}


	public HRESULT putref_viewTarget(ISVGStringList* v) mut => VT.[Friend]putref_viewTarget(&this, v);

	public HRESULT get_viewTarget(ISVGStringList** p) mut => VT.[Friend]get_viewTarget(&this, p);
}

[CRepr]struct DispSVGViewElement : IDispatch
{
	public new const Guid IID = .(0x30590034, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
	}

}

[CRepr]struct IHTMLMediaError : IDispatch
{
	public new const Guid IID = .(0x30510704, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16* p) get_code;
	}


	public HRESULT get_code(int16* p) mut => VT.[Friend]get_code(&this, p);
}

[CRepr]struct IHTMLTimeRanges : IDispatch
{
	public new const Guid IID = .(0x30510705, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* p) get_length;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 index, float* startTime) start;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 index, float* endTime) end;
	}


	public HRESULT get_length(int32* p) mut => VT.[Friend]get_length(&this, p);

	public HRESULT start(int32 index, float* startTime) mut => VT.[Friend]start(&this, index, startTime);

	public HRESULT end(int32 index, float* endTime) mut => VT.[Friend]end(&this, index, endTime);
}

[CRepr]struct IHTMLTimeRanges2 : IDispatch
{
	public new const Guid IID = .(0x3051080b, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 index, double* startTime) startDouble;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 index, double* endTime) endDouble;
	}


	public HRESULT startDouble(int32 index, double* startTime) mut => VT.[Friend]startDouble(&this, index, startTime);

	public HRESULT endDouble(int32 index, double* endTime) mut => VT.[Friend]endDouble(&this, index, endTime);
}

[CRepr]struct IHTMLMediaElement : IDispatch
{
	public new const Guid IID = .(0x30510706, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IHTMLMediaError** p) get_error;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_src;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_src;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_currentSrc;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint16* p) get_networkState;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_preload;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_preload;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IHTMLTimeRanges** p) get_buffered;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self) load;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR type, BSTR* canPlay) canPlayType;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16* p) get_seeking;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, float v) put_currentTime;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, float* p) get_currentTime;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, float* p) get_initialTime;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, float* p) get_duration;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16* p) get_paused;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, float v) put_defaultPlaybackRate;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, float* p) get_defaultPlaybackRate;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, float v) put_playbackRate;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, float* p) get_playbackRate;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IHTMLTimeRanges** p) get_played;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IHTMLTimeRanges** p) get_seekable;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16* p) get_ended;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16 v) put_autoplay;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16* p) get_autoplay;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16 v) put_loop;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16* p) get_loop;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self) play;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self) pause;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16 v) put_controls;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16* p) get_controls;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, float v) put_volume;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, float* p) get_volume;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16 v) put_muted;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16* p) get_muted;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16 v) put_autobuffer;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16* p) get_autobuffer;
	}


	public HRESULT get_error(IHTMLMediaError** p) mut => VT.[Friend]get_error(&this, p);

	public HRESULT put_src(BSTR v) mut => VT.[Friend]put_src(&this, v);

	public HRESULT get_src(BSTR* p) mut => VT.[Friend]get_src(&this, p);

	public HRESULT get_currentSrc(BSTR* p) mut => VT.[Friend]get_currentSrc(&this, p);

	public HRESULT get_networkState(uint16* p) mut => VT.[Friend]get_networkState(&this, p);

	public HRESULT put_preload(BSTR v) mut => VT.[Friend]put_preload(&this, v);

	public HRESULT get_preload(BSTR* p) mut => VT.[Friend]get_preload(&this, p);

	public HRESULT get_buffered(IHTMLTimeRanges** p) mut => VT.[Friend]get_buffered(&this, p);

	public HRESULT load() mut => VT.[Friend]load(&this);

	public HRESULT canPlayType(BSTR type, BSTR* canPlay) mut => VT.[Friend]canPlayType(&this, type, canPlay);

	public HRESULT get_seeking(int16* p) mut => VT.[Friend]get_seeking(&this, p);

	public HRESULT put_currentTime(float v) mut => VT.[Friend]put_currentTime(&this, v);

	public HRESULT get_currentTime(float* p) mut => VT.[Friend]get_currentTime(&this, p);

	public HRESULT get_initialTime(float* p) mut => VT.[Friend]get_initialTime(&this, p);

	public HRESULT get_duration(float* p) mut => VT.[Friend]get_duration(&this, p);

	public HRESULT get_paused(int16* p) mut => VT.[Friend]get_paused(&this, p);

	public HRESULT put_defaultPlaybackRate(float v) mut => VT.[Friend]put_defaultPlaybackRate(&this, v);

	public HRESULT get_defaultPlaybackRate(float* p) mut => VT.[Friend]get_defaultPlaybackRate(&this, p);

	public HRESULT put_playbackRate(float v) mut => VT.[Friend]put_playbackRate(&this, v);

	public HRESULT get_playbackRate(float* p) mut => VT.[Friend]get_playbackRate(&this, p);

	public HRESULT get_played(IHTMLTimeRanges** p) mut => VT.[Friend]get_played(&this, p);

	public HRESULT get_seekable(IHTMLTimeRanges** p) mut => VT.[Friend]get_seekable(&this, p);

	public HRESULT get_ended(int16* p) mut => VT.[Friend]get_ended(&this, p);

	public HRESULT put_autoplay(int16 v) mut => VT.[Friend]put_autoplay(&this, v);

	public HRESULT get_autoplay(int16* p) mut => VT.[Friend]get_autoplay(&this, p);

	public HRESULT put_loop(int16 v) mut => VT.[Friend]put_loop(&this, v);

	public HRESULT get_loop(int16* p) mut => VT.[Friend]get_loop(&this, p);

	public HRESULT play() mut => VT.[Friend]play(&this);

	public HRESULT pause() mut => VT.[Friend]pause(&this);

	public HRESULT put_controls(int16 v) mut => VT.[Friend]put_controls(&this, v);

	public HRESULT get_controls(int16* p) mut => VT.[Friend]get_controls(&this, p);

	public HRESULT put_volume(float v) mut => VT.[Friend]put_volume(&this, v);

	public HRESULT get_volume(float* p) mut => VT.[Friend]get_volume(&this, p);

	public HRESULT put_muted(int16 v) mut => VT.[Friend]put_muted(&this, v);

	public HRESULT get_muted(int16* p) mut => VT.[Friend]get_muted(&this, p);

	public HRESULT put_autobuffer(int16 v) mut => VT.[Friend]put_autobuffer(&this, v);

	public HRESULT get_autobuffer(int16* p) mut => VT.[Friend]get_autobuffer(&this, p);
}

[CRepr]struct IHTMLMediaElement2 : IDispatch
{
	public new const Guid IID = .(0x30510809, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, double v) put_currentTimeDouble;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, double* p) get_currentTimeDouble;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, double* p) get_initialTimeDouble;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, double* p) get_durationDouble;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, double v) put_defaultPlaybackRateDouble;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, double* p) get_defaultPlaybackRateDouble;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, double v) put_playbackRateDouble;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, double* p) get_playbackRateDouble;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, double v) put_volumeDouble;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, double* p) get_volumeDouble;
	}


	public HRESULT put_currentTimeDouble(double v) mut => VT.[Friend]put_currentTimeDouble(&this, v);

	public HRESULT get_currentTimeDouble(double* p) mut => VT.[Friend]get_currentTimeDouble(&this, p);

	public HRESULT get_initialTimeDouble(double* p) mut => VT.[Friend]get_initialTimeDouble(&this, p);

	public HRESULT get_durationDouble(double* p) mut => VT.[Friend]get_durationDouble(&this, p);

	public HRESULT put_defaultPlaybackRateDouble(double v) mut => VT.[Friend]put_defaultPlaybackRateDouble(&this, v);

	public HRESULT get_defaultPlaybackRateDouble(double* p) mut => VT.[Friend]get_defaultPlaybackRateDouble(&this, p);

	public HRESULT put_playbackRateDouble(double v) mut => VT.[Friend]put_playbackRateDouble(&this, v);

	public HRESULT get_playbackRateDouble(double* p) mut => VT.[Friend]get_playbackRateDouble(&this, p);

	public HRESULT put_volumeDouble(double v) mut => VT.[Friend]put_volumeDouble(&this, v);

	public HRESULT get_volumeDouble(double* p) mut => VT.[Friend]get_volumeDouble(&this, p);
}

[CRepr]struct IHTMLMSMediaElement : IDispatch
{
	public new const Guid IID = .(0x30510792, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16 v) put_msPlayToDisabled;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16* p) get_msPlayToDisabled;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16 v) put_msPlayToPrimary;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16* p) get_msPlayToPrimary;
	}


	public HRESULT put_msPlayToDisabled(int16 v) mut => VT.[Friend]put_msPlayToDisabled(&this, v);

	public HRESULT get_msPlayToDisabled(int16* p) mut => VT.[Friend]get_msPlayToDisabled(&this, p);

	public HRESULT put_msPlayToPrimary(int16 v) mut => VT.[Friend]put_msPlayToPrimary(&this, v);

	public HRESULT get_msPlayToPrimary(int16* p) mut => VT.[Friend]get_msPlayToPrimary(&this, p);
}

[CRepr]struct IHTMLSourceElement : IDispatch
{
	public new const Guid IID = .(0x30510707, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_src;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_src;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_type;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_type;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_media;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_media;
	}


	public HRESULT put_src(BSTR v) mut => VT.[Friend]put_src(&this, v);

	public HRESULT get_src(BSTR* p) mut => VT.[Friend]get_src(&this, p);

	public HRESULT put_type(BSTR v) mut => VT.[Friend]put_type(&this, v);

	public HRESULT get_type(BSTR* p) mut => VT.[Friend]get_type(&this, p);

	public HRESULT put_media(BSTR v) mut => VT.[Friend]put_media(&this, v);

	public HRESULT get_media(BSTR* p) mut => VT.[Friend]get_media(&this, p);
}

[CRepr]struct IHTMLAudioElement : IDispatch
{
	public new const Guid IID = .(0x30510708, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
	}

}

[CRepr]struct IHTMLVideoElement : IDispatch
{
	public new const Guid IID = .(0x30510709, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 v) put_width;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* p) get_width;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 v) put_height;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* p) get_height;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32* p) get_videoWidth;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32* p) get_videoHeight;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_poster;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_poster;
	}


	public HRESULT put_width(int32 v) mut => VT.[Friend]put_width(&this, v);

	public HRESULT get_width(int32* p) mut => VT.[Friend]get_width(&this, p);

	public HRESULT put_height(int32 v) mut => VT.[Friend]put_height(&this, v);

	public HRESULT get_height(int32* p) mut => VT.[Friend]get_height(&this, p);

	public HRESULT get_videoWidth(uint32* p) mut => VT.[Friend]get_videoWidth(&this, p);

	public HRESULT get_videoHeight(uint32* p) mut => VT.[Friend]get_videoHeight(&this, p);

	public HRESULT put_poster(BSTR v) mut => VT.[Friend]put_poster(&this, v);

	public HRESULT get_poster(BSTR* p) mut => VT.[Friend]get_poster(&this, p);
}

[CRepr]struct IHTMLAudioElementFactory : IDispatch
{
	public new const Guid IID = .(0x305107eb, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT src, IHTMLAudioElement** __MIDL__IHTMLAudioElementFactory0000) create;
	}


	public HRESULT create(VARIANT src, IHTMLAudioElement** __MIDL__IHTMLAudioElementFactory0000) mut => VT.[Friend]create(&this, src, __MIDL__IHTMLAudioElementFactory0000);
}

[CRepr]struct DispHTMLMediaError : IDispatch
{
	public new const Guid IID = .(0x30590086, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
	}

}

[CRepr]struct DispHTMLTimeRanges : IDispatch
{
	public new const Guid IID = .(0x30590087, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
	}

}

[CRepr]struct DispHTMLMediaElement : IDispatch
{
	public new const Guid IID = .(0x30590088, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
	}

}

[CRepr]struct DispHTMLSourceElement : IDispatch
{
	public new const Guid IID = .(0x30590089, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
	}

}

[CRepr]struct DispHTMLAudioElement : IDispatch
{
	public new const Guid IID = .(0x3059008a, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
	}

}

[CRepr]struct DispHTMLVideoElement : IDispatch
{
	public new const Guid IID = .(0x3059008b, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
	}

}

[CRepr]struct ISVGSwitchElement : IDispatch
{
	public new const Guid IID = .(0x305104f1, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
	}

}

[CRepr]struct DispSVGSwitchElement : IDispatch
{
	public new const Guid IID = .(0x30590030, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
	}

}

[CRepr]struct ISVGDescElement : IDispatch
{
	public new const Guid IID = .(0x305104ea, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
	}

}

[CRepr]struct DispSVGDescElement : IDispatch
{
	public new const Guid IID = .(0x30590005, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
	}

}

[CRepr]struct ISVGTitleElement : IDispatch
{
	public new const Guid IID = .(0x305104eb, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
	}

}

[CRepr]struct DispSVGTitleElement : IDispatch
{
	public new const Guid IID = .(0x30590006, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
	}

}

[CRepr]struct ISVGMetadataElement : IDispatch
{
	public new const Guid IID = .(0x30510560, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
	}

}

[CRepr]struct DispSVGMetadataElement : IDispatch
{
	public new const Guid IID = .(0x3059002f, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
	}

}

[CRepr]struct ISVGElementInstanceList : IDispatch
{
	public new const Guid IID = .(0x305104ef, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* p) get_length;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 index, ISVGElementInstance** ppResult) item;
	}


	public HRESULT get_length(int32* p) mut => VT.[Friend]get_length(&this, p);

	public HRESULT item(int32 index, ISVGElementInstance** ppResult) mut => VT.[Friend]item(&this, index, ppResult);
}

[CRepr]struct DispSVGElementInstance : IDispatch
{
	public new const Guid IID = .(0x30590007, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
	}

}

[CRepr]struct DispSVGElementInstanceList : IDispatch
{
	public new const Guid IID = .(0x30590008, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
	}

}

[CRepr]struct IDOMException : IDispatch
{
	public new const Guid IID = .(0x3051072b, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 v) put_code;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* p) get_code;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_message;
	}


	public HRESULT put_code(int32 v) mut => VT.[Friend]put_code(&this, v);

	public HRESULT get_code(int32* p) mut => VT.[Friend]get_code(&this, p);

	public HRESULT get_message(BSTR* p) mut => VT.[Friend]get_message(&this, p);
}

[CRepr]struct DispDOMException : IDispatch
{
	public new const Guid IID = .(0x30590094, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
	}

}

[CRepr]struct IRangeException : IDispatch
{
	public new const Guid IID = .(0x3051072d, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 v) put_code;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* p) get_code;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_message;
	}


	public HRESULT put_code(int32 v) mut => VT.[Friend]put_code(&this, v);

	public HRESULT get_code(int32* p) mut => VT.[Friend]get_code(&this, p);

	public HRESULT get_message(BSTR* p) mut => VT.[Friend]get_message(&this, p);
}

[CRepr]struct DispRangeException : IDispatch
{
	public new const Guid IID = .(0x30590095, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
	}

}

[CRepr]struct ISVGException : IDispatch
{
	public new const Guid IID = .(0x3051072f, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 v) put_code;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* p) get_code;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_message;
	}


	public HRESULT put_code(int32 v) mut => VT.[Friend]put_code(&this, v);

	public HRESULT get_code(int32* p) mut => VT.[Friend]get_code(&this, p);

	public HRESULT get_message(BSTR* p) mut => VT.[Friend]get_message(&this, p);
}

[CRepr]struct DispSVGException : IDispatch
{
	public new const Guid IID = .(0x30590096, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
	}

}

[CRepr]struct IEventException : IDispatch
{
	public new const Guid IID = .(0x3051073a, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 v) put_code;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* p) get_code;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_message;
	}


	public HRESULT put_code(int32 v) mut => VT.[Friend]put_code(&this, v);

	public HRESULT get_code(int32* p) mut => VT.[Friend]get_code(&this, p);

	public HRESULT get_message(BSTR* p) mut => VT.[Friend]get_message(&this, p);
}

[CRepr]struct DispEventException : IDispatch
{
	public new const Guid IID = .(0x30590099, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
	}

}

[CRepr]struct ISVGScriptElement : IDispatch
{
	public new const Guid IID = .(0x3051054d, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_type;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_type;
	}


	public HRESULT put_type(BSTR v) mut => VT.[Friend]put_type(&this, v);

	public HRESULT get_type(BSTR* p) mut => VT.[Friend]get_type(&this, p);
}

[CRepr]struct DispSVGScriptElement : IDispatch
{
	public new const Guid IID = .(0x30590039, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
	}

}

[CRepr]struct ISVGStyleElement : IDispatch
{
	public new const Guid IID = .(0x305104f3, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_type;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_type;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_media;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_media;
	}


	public HRESULT put_type(BSTR v) mut => VT.[Friend]put_type(&this, v);

	public HRESULT get_type(BSTR* p) mut => VT.[Friend]get_type(&this, p);

	public HRESULT put_media(BSTR v) mut => VT.[Friend]put_media(&this, v);

	public HRESULT get_media(BSTR* p) mut => VT.[Friend]get_media(&this, p);
}

[CRepr]struct DispSVGStyleElement : IDispatch
{
	public new const Guid IID = .(0x30590029, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
	}

}

[CRepr]struct ISVGTextContentElement : IDispatch
{
	public new const Guid IID = .(0x3051051a, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, ISVGAnimatedLength* v) putref_textLength;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, ISVGAnimatedLength** p) get_textLength;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, ISVGAnimatedEnumeration* v) putref_lengthAdjust;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, ISVGAnimatedEnumeration** p) get_lengthAdjust;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* pResult) getNumberOfChars;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, float* pResult) getComputedTextLength;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 charnum, int32 nchars, float* pResult) getSubStringLength;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 charnum, ISVGPoint** ppResult) getStartPositionOfChar;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 charnum, ISVGPoint** ppResult) getEndPositionOfChar;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 charnum, ISVGRect** ppResult) getExtentOfChar;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 charnum, float* pResult) getRotationOfChar;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, ISVGPoint* point, int32* pResult) getCharNumAtPosition;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 charnum, int32 nchars) selectSubString;
	}


	public HRESULT putref_textLength(ISVGAnimatedLength* v) mut => VT.[Friend]putref_textLength(&this, v);

	public HRESULT get_textLength(ISVGAnimatedLength** p) mut => VT.[Friend]get_textLength(&this, p);

	public HRESULT putref_lengthAdjust(ISVGAnimatedEnumeration* v) mut => VT.[Friend]putref_lengthAdjust(&this, v);

	public HRESULT get_lengthAdjust(ISVGAnimatedEnumeration** p) mut => VT.[Friend]get_lengthAdjust(&this, p);

	public HRESULT getNumberOfChars(int32* pResult) mut => VT.[Friend]getNumberOfChars(&this, pResult);

	public HRESULT getComputedTextLength(float* pResult) mut => VT.[Friend]getComputedTextLength(&this, pResult);

	public HRESULT getSubStringLength(int32 charnum, int32 nchars, float* pResult) mut => VT.[Friend]getSubStringLength(&this, charnum, nchars, pResult);

	public HRESULT getStartPositionOfChar(int32 charnum, ISVGPoint** ppResult) mut => VT.[Friend]getStartPositionOfChar(&this, charnum, ppResult);

	public HRESULT getEndPositionOfChar(int32 charnum, ISVGPoint** ppResult) mut => VT.[Friend]getEndPositionOfChar(&this, charnum, ppResult);

	public HRESULT getExtentOfChar(int32 charnum, ISVGRect** ppResult) mut => VT.[Friend]getExtentOfChar(&this, charnum, ppResult);

	public HRESULT getRotationOfChar(int32 charnum, float* pResult) mut => VT.[Friend]getRotationOfChar(&this, charnum, pResult);

	public HRESULT getCharNumAtPosition(ISVGPoint* point, int32* pResult) mut => VT.[Friend]getCharNumAtPosition(&this, point, pResult);

	public HRESULT selectSubString(int32 charnum, int32 nchars) mut => VT.[Friend]selectSubString(&this, charnum, nchars);
}

[CRepr]struct DispSVGTextContentElement : IDispatch
{
	public new const Guid IID = .(0x30590035, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
	}

}

[CRepr]struct ISVGTextPositioningElement : IDispatch
{
	public new const Guid IID = .(0x3051051b, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, ISVGAnimatedLengthList* v) putref_x;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, ISVGAnimatedLengthList** p) get_x;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, ISVGAnimatedLengthList* v) putref_y;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, ISVGAnimatedLengthList** p) get_y;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, ISVGAnimatedLengthList* v) putref_dx;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, ISVGAnimatedLengthList** p) get_dx;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, ISVGAnimatedLengthList* v) putref_dy;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, ISVGAnimatedLengthList** p) get_dy;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, ISVGAnimatedNumberList* v) putref_rotate;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, ISVGAnimatedNumberList** p) get_rotate;
	}


	public HRESULT putref_x(ISVGAnimatedLengthList* v) mut => VT.[Friend]putref_x(&this, v);

	public HRESULT get_x(ISVGAnimatedLengthList** p) mut => VT.[Friend]get_x(&this, p);

	public HRESULT putref_y(ISVGAnimatedLengthList* v) mut => VT.[Friend]putref_y(&this, v);

	public HRESULT get_y(ISVGAnimatedLengthList** p) mut => VT.[Friend]get_y(&this, p);

	public HRESULT putref_dx(ISVGAnimatedLengthList* v) mut => VT.[Friend]putref_dx(&this, v);

	public HRESULT get_dx(ISVGAnimatedLengthList** p) mut => VT.[Friend]get_dx(&this, p);

	public HRESULT putref_dy(ISVGAnimatedLengthList* v) mut => VT.[Friend]putref_dy(&this, v);

	public HRESULT get_dy(ISVGAnimatedLengthList** p) mut => VT.[Friend]get_dy(&this, p);

	public HRESULT putref_rotate(ISVGAnimatedNumberList* v) mut => VT.[Friend]putref_rotate(&this, v);

	public HRESULT get_rotate(ISVGAnimatedNumberList** p) mut => VT.[Friend]get_rotate(&this, p);
}

[CRepr]struct DispSVGTextPositioningElement : IDispatch
{
	public new const Guid IID = .(0x30590038, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
	}

}

[CRepr]struct DispDOMDocumentType : IDispatch
{
	public new const Guid IID = .(0x30590098, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
	}

}

[CRepr]struct DispNodeIterator : IDispatch
{
	public new const Guid IID = .(0x3059009c, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
	}

}

[CRepr]struct DispTreeWalker : IDispatch
{
	public new const Guid IID = .(0x3059009d, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
	}

}

[CRepr]struct DispDOMProcessingInstruction : IDispatch
{
	public new const Guid IID = .(0x3059009b, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
	}

}

[CRepr]struct IHTMLPerformanceNavigation : IDispatch
{
	public new const Guid IID = .(0x30510750, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32* p) get_type;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32* p) get_redirectCount;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* string) toString;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* pVar) toJSON;
	}


	public HRESULT get_type(uint32* p) mut => VT.[Friend]get_type(&this, p);

	public HRESULT get_redirectCount(uint32* p) mut => VT.[Friend]get_redirectCount(&this, p);

	public HRESULT toString(BSTR* string) mut => VT.[Friend]toString(&this, string);

	public HRESULT toJSON(VARIANT* pVar) mut => VT.[Friend]toJSON(&this, pVar);
}

[CRepr]struct IHTMLPerformanceTiming : IDispatch
{
	public new const Guid IID = .(0x30510752, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint64* p) get_navigationStart;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint64* p) get_unloadEventStart;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint64* p) get_unloadEventEnd;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint64* p) get_redirectStart;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint64* p) get_redirectEnd;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint64* p) get_fetchStart;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint64* p) get_domainLookupStart;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint64* p) get_domainLookupEnd;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint64* p) get_connectStart;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint64* p) get_connectEnd;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint64* p) get_requestStart;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint64* p) get_responseStart;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint64* p) get_responseEnd;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint64* p) get_domLoading;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint64* p) get_domInteractive;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint64* p) get_domContentLoadedEventStart;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint64* p) get_domContentLoadedEventEnd;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint64* p) get_domComplete;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint64* p) get_loadEventStart;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint64* p) get_loadEventEnd;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint64* p) get_msFirstPaint;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* string) toString;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* pVar) toJSON;
	}


	public HRESULT get_navigationStart(uint64* p) mut => VT.[Friend]get_navigationStart(&this, p);

	public HRESULT get_unloadEventStart(uint64* p) mut => VT.[Friend]get_unloadEventStart(&this, p);

	public HRESULT get_unloadEventEnd(uint64* p) mut => VT.[Friend]get_unloadEventEnd(&this, p);

	public HRESULT get_redirectStart(uint64* p) mut => VT.[Friend]get_redirectStart(&this, p);

	public HRESULT get_redirectEnd(uint64* p) mut => VT.[Friend]get_redirectEnd(&this, p);

	public HRESULT get_fetchStart(uint64* p) mut => VT.[Friend]get_fetchStart(&this, p);

	public HRESULT get_domainLookupStart(uint64* p) mut => VT.[Friend]get_domainLookupStart(&this, p);

	public HRESULT get_domainLookupEnd(uint64* p) mut => VT.[Friend]get_domainLookupEnd(&this, p);

	public HRESULT get_connectStart(uint64* p) mut => VT.[Friend]get_connectStart(&this, p);

	public HRESULT get_connectEnd(uint64* p) mut => VT.[Friend]get_connectEnd(&this, p);

	public HRESULT get_requestStart(uint64* p) mut => VT.[Friend]get_requestStart(&this, p);

	public HRESULT get_responseStart(uint64* p) mut => VT.[Friend]get_responseStart(&this, p);

	public HRESULT get_responseEnd(uint64* p) mut => VT.[Friend]get_responseEnd(&this, p);

	public HRESULT get_domLoading(uint64* p) mut => VT.[Friend]get_domLoading(&this, p);

	public HRESULT get_domInteractive(uint64* p) mut => VT.[Friend]get_domInteractive(&this, p);

	public HRESULT get_domContentLoadedEventStart(uint64* p) mut => VT.[Friend]get_domContentLoadedEventStart(&this, p);

	public HRESULT get_domContentLoadedEventEnd(uint64* p) mut => VT.[Friend]get_domContentLoadedEventEnd(&this, p);

	public HRESULT get_domComplete(uint64* p) mut => VT.[Friend]get_domComplete(&this, p);

	public HRESULT get_loadEventStart(uint64* p) mut => VT.[Friend]get_loadEventStart(&this, p);

	public HRESULT get_loadEventEnd(uint64* p) mut => VT.[Friend]get_loadEventEnd(&this, p);

	public HRESULT get_msFirstPaint(uint64* p) mut => VT.[Friend]get_msFirstPaint(&this, p);

	public HRESULT toString(BSTR* string) mut => VT.[Friend]toString(&this, string);

	public HRESULT toJSON(VARIANT* pVar) mut => VT.[Friend]toJSON(&this, pVar);
}

[CRepr]struct DispHTMLPerformance : IDispatch
{
	public new const Guid IID = .(0x3059009f, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
	}

}

[CRepr]struct DispHTMLPerformanceNavigation : IDispatch
{
	public new const Guid IID = .(0x305900a0, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
	}

}

[CRepr]struct DispHTMLPerformanceTiming : IDispatch
{
	public new const Guid IID = .(0x305900a1, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
	}

}

[CRepr]struct ISVGTSpanElement : IDispatch
{
	public new const Guid IID = .(0x3051051d, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
	}

}

[CRepr]struct DispSVGTSpanElement : IDispatch
{
	public new const Guid IID = .(0x3059003a, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
	}

}

[CRepr]struct ITemplatePrinter : IDispatch
{
	public new const Guid IID = .(0x3050f6b4, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR bstrTitle, int16* p) startDoc;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self) stopDoc;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self) printBlankPage;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IDispatch* pElemDisp) printPage;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16* p) ensurePrintDialogDefaults;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16* p) showPrintDialog;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16* p) showPageSetupDialog;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IUnknown* pMarkup, int16* p) printNonNative;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IUnknown* pMarkup, int16 fActiveFrame) printNonNativeFrames;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16 v) put_framesetDocument;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16* p) get_framesetDocument;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16 v) put_frameActive;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16* p) get_frameActive;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16 v) put_frameAsShown;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16* p) get_frameAsShown;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16 v) put_selection;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16* p) get_selection;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16 v) put_selectedPages;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16* p) get_selectedPages;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16 v) put_currentPage;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16* p) get_currentPage;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16 v) put_currentPageAvail;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16* p) get_currentPageAvail;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16 v) put_collate;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16* p) get_collate;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16* p) get_duplex;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint16 v) put_copies;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint16* p) get_copies;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint16 v) put_pageFrom;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint16* p) get_pageFrom;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint16 v) put_pageTo;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint16* p) get_pageTo;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16 v) put_tableOfLinks;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16* p) get_tableOfLinks;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16 v) put_allLinkedDocuments;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16* p) get_allLinkedDocuments;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_header;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_header;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_footer;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_footer;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 v) put_marginLeft;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* p) get_marginLeft;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 v) put_marginRight;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* p) get_marginRight;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 v) put_marginTop;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* p) get_marginTop;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 v) put_marginBottom;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* p) get_marginBottom;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* p) get_pageWidth;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* p) get_pageHeight;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* p) get_unprintableLeft;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* p) get_unprintableTop;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* p) get_unprintableRight;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* p) get_unprintableBottom;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* p) updatePageStatus;
	}


	public HRESULT startDoc(BSTR bstrTitle, int16* p) mut => VT.[Friend]startDoc(&this, bstrTitle, p);

	public HRESULT stopDoc() mut => VT.[Friend]stopDoc(&this);

	public HRESULT printBlankPage() mut => VT.[Friend]printBlankPage(&this);

	public HRESULT printPage(IDispatch* pElemDisp) mut => VT.[Friend]printPage(&this, pElemDisp);

	public HRESULT ensurePrintDialogDefaults(int16* p) mut => VT.[Friend]ensurePrintDialogDefaults(&this, p);

	public HRESULT showPrintDialog(int16* p) mut => VT.[Friend]showPrintDialog(&this, p);

	public HRESULT showPageSetupDialog(int16* p) mut => VT.[Friend]showPageSetupDialog(&this, p);

	public HRESULT printNonNative(IUnknown* pMarkup, int16* p) mut => VT.[Friend]printNonNative(&this, pMarkup, p);

	public HRESULT printNonNativeFrames(IUnknown* pMarkup, int16 fActiveFrame) mut => VT.[Friend]printNonNativeFrames(&this, pMarkup, fActiveFrame);

	public HRESULT put_framesetDocument(int16 v) mut => VT.[Friend]put_framesetDocument(&this, v);

	public HRESULT get_framesetDocument(int16* p) mut => VT.[Friend]get_framesetDocument(&this, p);

	public HRESULT put_frameActive(int16 v) mut => VT.[Friend]put_frameActive(&this, v);

	public HRESULT get_frameActive(int16* p) mut => VT.[Friend]get_frameActive(&this, p);

	public HRESULT put_frameAsShown(int16 v) mut => VT.[Friend]put_frameAsShown(&this, v);

	public HRESULT get_frameAsShown(int16* p) mut => VT.[Friend]get_frameAsShown(&this, p);

	public HRESULT put_selection(int16 v) mut => VT.[Friend]put_selection(&this, v);

	public HRESULT get_selection(int16* p) mut => VT.[Friend]get_selection(&this, p);

	public HRESULT put_selectedPages(int16 v) mut => VT.[Friend]put_selectedPages(&this, v);

	public HRESULT get_selectedPages(int16* p) mut => VT.[Friend]get_selectedPages(&this, p);

	public HRESULT put_currentPage(int16 v) mut => VT.[Friend]put_currentPage(&this, v);

	public HRESULT get_currentPage(int16* p) mut => VT.[Friend]get_currentPage(&this, p);

	public HRESULT put_currentPageAvail(int16 v) mut => VT.[Friend]put_currentPageAvail(&this, v);

	public HRESULT get_currentPageAvail(int16* p) mut => VT.[Friend]get_currentPageAvail(&this, p);

	public HRESULT put_collate(int16 v) mut => VT.[Friend]put_collate(&this, v);

	public HRESULT get_collate(int16* p) mut => VT.[Friend]get_collate(&this, p);

	public HRESULT get_duplex(int16* p) mut => VT.[Friend]get_duplex(&this, p);

	public HRESULT put_copies(uint16 v) mut => VT.[Friend]put_copies(&this, v);

	public HRESULT get_copies(uint16* p) mut => VT.[Friend]get_copies(&this, p);

	public HRESULT put_pageFrom(uint16 v) mut => VT.[Friend]put_pageFrom(&this, v);

	public HRESULT get_pageFrom(uint16* p) mut => VT.[Friend]get_pageFrom(&this, p);

	public HRESULT put_pageTo(uint16 v) mut => VT.[Friend]put_pageTo(&this, v);

	public HRESULT get_pageTo(uint16* p) mut => VT.[Friend]get_pageTo(&this, p);

	public HRESULT put_tableOfLinks(int16 v) mut => VT.[Friend]put_tableOfLinks(&this, v);

	public HRESULT get_tableOfLinks(int16* p) mut => VT.[Friend]get_tableOfLinks(&this, p);

	public HRESULT put_allLinkedDocuments(int16 v) mut => VT.[Friend]put_allLinkedDocuments(&this, v);

	public HRESULT get_allLinkedDocuments(int16* p) mut => VT.[Friend]get_allLinkedDocuments(&this, p);

	public HRESULT put_header(BSTR v) mut => VT.[Friend]put_header(&this, v);

	public HRESULT get_header(BSTR* p) mut => VT.[Friend]get_header(&this, p);

	public HRESULT put_footer(BSTR v) mut => VT.[Friend]put_footer(&this, v);

	public HRESULT get_footer(BSTR* p) mut => VT.[Friend]get_footer(&this, p);

	public HRESULT put_marginLeft(int32 v) mut => VT.[Friend]put_marginLeft(&this, v);

	public HRESULT get_marginLeft(int32* p) mut => VT.[Friend]get_marginLeft(&this, p);

	public HRESULT put_marginRight(int32 v) mut => VT.[Friend]put_marginRight(&this, v);

	public HRESULT get_marginRight(int32* p) mut => VT.[Friend]get_marginRight(&this, p);

	public HRESULT put_marginTop(int32 v) mut => VT.[Friend]put_marginTop(&this, v);

	public HRESULT get_marginTop(int32* p) mut => VT.[Friend]get_marginTop(&this, p);

	public HRESULT put_marginBottom(int32 v) mut => VT.[Friend]put_marginBottom(&this, v);

	public HRESULT get_marginBottom(int32* p) mut => VT.[Friend]get_marginBottom(&this, p);

	public HRESULT get_pageWidth(int32* p) mut => VT.[Friend]get_pageWidth(&this, p);

	public HRESULT get_pageHeight(int32* p) mut => VT.[Friend]get_pageHeight(&this, p);

	public HRESULT get_unprintableLeft(int32* p) mut => VT.[Friend]get_unprintableLeft(&this, p);

	public HRESULT get_unprintableTop(int32* p) mut => VT.[Friend]get_unprintableTop(&this, p);

	public HRESULT get_unprintableRight(int32* p) mut => VT.[Friend]get_unprintableRight(&this, p);

	public HRESULT get_unprintableBottom(int32* p) mut => VT.[Friend]get_unprintableBottom(&this, p);

	public HRESULT updatePageStatus(int32* p) mut => VT.[Friend]updatePageStatus(&this, p);
}

[CRepr]struct ITemplatePrinter2 : ITemplatePrinter
{
	public new const Guid IID = .(0x3050f83f, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : ITemplatePrinter.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16 v) put_selectionEnabled;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16* p) get_selectionEnabled;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16 v) put_frameActiveEnabled;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16* p) get_frameActiveEnabled;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_orientation;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_orientation;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16 v) put_usePrinterCopyCollate;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16* p) get_usePrinterCopyCollate;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR bstrProperty, VARIANT* pvar) deviceSupports;
	}


	public HRESULT put_selectionEnabled(int16 v) mut => VT.[Friend]put_selectionEnabled(&this, v);

	public HRESULT get_selectionEnabled(int16* p) mut => VT.[Friend]get_selectionEnabled(&this, p);

	public HRESULT put_frameActiveEnabled(int16 v) mut => VT.[Friend]put_frameActiveEnabled(&this, v);

	public HRESULT get_frameActiveEnabled(int16* p) mut => VT.[Friend]get_frameActiveEnabled(&this, p);

	public HRESULT put_orientation(BSTR v) mut => VT.[Friend]put_orientation(&this, v);

	public HRESULT get_orientation(BSTR* p) mut => VT.[Friend]get_orientation(&this, p);

	public HRESULT put_usePrinterCopyCollate(int16 v) mut => VT.[Friend]put_usePrinterCopyCollate(&this, v);

	public HRESULT get_usePrinterCopyCollate(int16* p) mut => VT.[Friend]get_usePrinterCopyCollate(&this, p);

	public HRESULT deviceSupports(BSTR bstrProperty, VARIANT* pvar) mut => VT.[Friend]deviceSupports(&this, bstrProperty, pvar);
}

[CRepr]struct ITemplatePrinter3 : ITemplatePrinter2
{
	public new const Guid IID = .(0x305104a3, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : ITemplatePrinter2.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_headerFooterFont;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_headerFooterFont;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IDispatch* pageRule, int32 pageWidth, int32 pageHeight, VARIANT* pMargin) getPageMarginTop;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IDispatch* pageRule, int32 pageWidth, int32 pageHeight, VARIANT* pMargin) getPageMarginRight;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IDispatch* pageRule, int32 pageWidth, int32 pageHeight, VARIANT* pMargin) getPageMarginBottom;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IDispatch* pageRule, int32 pageWidth, int32 pageHeight, VARIANT* pMargin) getPageMarginLeft;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IDispatch* pageRule, int16* pbImportant) getPageMarginTopImportant;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IDispatch* pageRule, int16* pbImportant) getPageMarginRightImportant;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IDispatch* pageRule, int16* pbImportant) getPageMarginBottomImportant;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IDispatch* pageRule, int16* pbImportant) getPageMarginLeftImportant;
	}


	public HRESULT put_headerFooterFont(BSTR v) mut => VT.[Friend]put_headerFooterFont(&this, v);

	public HRESULT get_headerFooterFont(BSTR* p) mut => VT.[Friend]get_headerFooterFont(&this, p);

	public HRESULT getPageMarginTop(IDispatch* pageRule, int32 pageWidth, int32 pageHeight, VARIANT* pMargin) mut => VT.[Friend]getPageMarginTop(&this, pageRule, pageWidth, pageHeight, pMargin);

	public HRESULT getPageMarginRight(IDispatch* pageRule, int32 pageWidth, int32 pageHeight, VARIANT* pMargin) mut => VT.[Friend]getPageMarginRight(&this, pageRule, pageWidth, pageHeight, pMargin);

	public HRESULT getPageMarginBottom(IDispatch* pageRule, int32 pageWidth, int32 pageHeight, VARIANT* pMargin) mut => VT.[Friend]getPageMarginBottom(&this, pageRule, pageWidth, pageHeight, pMargin);

	public HRESULT getPageMarginLeft(IDispatch* pageRule, int32 pageWidth, int32 pageHeight, VARIANT* pMargin) mut => VT.[Friend]getPageMarginLeft(&this, pageRule, pageWidth, pageHeight, pMargin);

	public HRESULT getPageMarginTopImportant(IDispatch* pageRule, int16* pbImportant) mut => VT.[Friend]getPageMarginTopImportant(&this, pageRule, pbImportant);

	public HRESULT getPageMarginRightImportant(IDispatch* pageRule, int16* pbImportant) mut => VT.[Friend]getPageMarginRightImportant(&this, pageRule, pbImportant);

	public HRESULT getPageMarginBottomImportant(IDispatch* pageRule, int16* pbImportant) mut => VT.[Friend]getPageMarginBottomImportant(&this, pageRule, pbImportant);

	public HRESULT getPageMarginLeftImportant(IDispatch* pageRule, int16* pbImportant) mut => VT.[Friend]getPageMarginLeftImportant(&this, pageRule, pbImportant);
}

[CRepr]struct IPrintManagerTemplatePrinter : IDispatch
{
	public new const Guid IID = .(0xf633be14, 0x9eff, 0x4c4d, 0x92, 0x9e, 0x05, 0x71, 0x7b, 0x21, 0xb3, 0xe6);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self) startPrint;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IDispatch* pElemDisp, int32 nPage) drawPreviewPage;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 nPage) setPageCount;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self) invalidatePreview;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR bstrKey, VARIANT* pvarin) getPrintTaskOptionValue;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self) endPrint;
	}


	public HRESULT startPrint() mut => VT.[Friend]startPrint(&this);

	public HRESULT drawPreviewPage(IDispatch* pElemDisp, int32 nPage) mut => VT.[Friend]drawPreviewPage(&this, pElemDisp, nPage);

	public HRESULT setPageCount(int32 nPage) mut => VT.[Friend]setPageCount(&this, nPage);

	public HRESULT invalidatePreview() mut => VT.[Friend]invalidatePreview(&this);

	public HRESULT getPrintTaskOptionValue(BSTR bstrKey, VARIANT* pvarin) mut => VT.[Friend]getPrintTaskOptionValue(&this, bstrKey, pvarin);

	public HRESULT endPrint() mut => VT.[Friend]endPrint(&this);
}

[CRepr]struct IPrintManagerTemplatePrinter2 : IPrintManagerTemplatePrinter
{
	public new const Guid IID = .(0xc6403497, 0x7493, 0x4f09, 0x80, 0x16, 0x54, 0xb0, 0x3e, 0x9b, 0xda, 0x69);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IPrintManagerTemplatePrinter.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16* p) get_showHeaderFooter;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16* p) get_shrinkToFit;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, float* p) get_percentScale;
	}


	public HRESULT get_showHeaderFooter(int16* p) mut => VT.[Friend]get_showHeaderFooter(&this, p);

	public HRESULT get_shrinkToFit(int16* p) mut => VT.[Friend]get_shrinkToFit(&this, p);

	public HRESULT get_percentScale(float* p) mut => VT.[Friend]get_percentScale(&this, p);
}

[CRepr]struct DispCPrintManagerTemplatePrinter : IDispatch
{
	public new const Guid IID = .(0x305900e9, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
	}

}

[CRepr]struct ISVGTextPathElement : IDispatch
{
	public new const Guid IID = .(0x3051051f, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, ISVGAnimatedLength* v) putref_startOffset;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, ISVGAnimatedLength** p) get_startOffset;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, ISVGAnimatedEnumeration* v) putref_method;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, ISVGAnimatedEnumeration** p) get_method;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, ISVGAnimatedEnumeration* v) putref_spacing;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, ISVGAnimatedEnumeration** p) get_spacing;
	}


	public HRESULT putref_startOffset(ISVGAnimatedLength* v) mut => VT.[Friend]putref_startOffset(&this, v);

	public HRESULT get_startOffset(ISVGAnimatedLength** p) mut => VT.[Friend]get_startOffset(&this, p);

	public HRESULT putref_method(ISVGAnimatedEnumeration* v) mut => VT.[Friend]putref_method(&this, v);

	public HRESULT get_method(ISVGAnimatedEnumeration** p) mut => VT.[Friend]get_method(&this, p);

	public HRESULT putref_spacing(ISVGAnimatedEnumeration* v) mut => VT.[Friend]putref_spacing(&this, v);

	public HRESULT get_spacing(ISVGAnimatedEnumeration** p) mut => VT.[Friend]get_spacing(&this, p);
}

[CRepr]struct DispSVGTextPathElement : IDispatch
{
	public new const Guid IID = .(0x3059003d, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
	}

}

[CRepr]struct IDOMXmlSerializer : IDispatch
{
	public new const Guid IID = .(0x3051077d, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IHTMLDOMNode* pNode, BSTR* pString) serializeToString;
	}


	public HRESULT serializeToString(IHTMLDOMNode* pNode, BSTR* pString) mut => VT.[Friend]serializeToString(&this, pNode, pString);
}

[CRepr]struct IDOMParser : IDispatch
{
	public new const Guid IID = .(0x30510781, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR xmlSource, BSTR mimeType, IHTMLDocument2** ppNode) parseFromString;
	}


	public HRESULT parseFromString(BSTR xmlSource, BSTR mimeType, IHTMLDocument2** ppNode) mut => VT.[Friend]parseFromString(&this, xmlSource, mimeType, ppNode);
}

[CRepr]struct DispXMLSerializer : IDispatch
{
	public new const Guid IID = .(0x305900ad, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
	}

}

[CRepr]struct DispDOMParser : IDispatch
{
	public new const Guid IID = .(0x305900ae, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
	}

}

[CRepr]struct IDOMXmlSerializerFactory : IDispatch
{
	public new const Guid IID = .(0x3051077f, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IDOMXmlSerializer** __MIDL__IDOMXmlSerializerFactory0000) create;
	}


	public HRESULT create(IDOMXmlSerializer** __MIDL__IDOMXmlSerializerFactory0000) mut => VT.[Friend]create(&this, __MIDL__IDOMXmlSerializerFactory0000);
}

[CRepr]struct IDOMParserFactory : IDispatch
{
	public new const Guid IID = .(0x30510783, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IDOMParser** __MIDL__IDOMParserFactory0000) create;
	}


	public HRESULT create(IDOMParser** __MIDL__IDOMParserFactory0000) mut => VT.[Friend]create(&this, __MIDL__IDOMParserFactory0000);
}

[CRepr]struct DispHTMLSemanticElement : IDispatch
{
	public new const Guid IID = .(0x305900ba, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
	}

}

[CRepr]struct IHTMLProgressElement : IDispatch
{
	public new const Guid IID = .(0x3050f2d6, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, float v) put_value;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, float* p) get_value;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, float v) put_max;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, float* p) get_max;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, float* p) get_position;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IHTMLFormElement** p) get_form;
	}


	public HRESULT put_value(float v) mut => VT.[Friend]put_value(&this, v);

	public HRESULT get_value(float* p) mut => VT.[Friend]get_value(&this, p);

	public HRESULT put_max(float v) mut => VT.[Friend]put_max(&this, v);

	public HRESULT get_max(float* p) mut => VT.[Friend]get_max(&this, p);

	public HRESULT get_position(float* p) mut => VT.[Friend]get_position(&this, p);

	public HRESULT get_form(IHTMLFormElement** p) mut => VT.[Friend]get_form(&this, p);
}

[CRepr]struct DispHTMLProgressElement : IDispatch
{
	public new const Guid IID = .(0x305900af, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
	}

}

[CRepr]struct IDOMMSTransitionEvent : IDispatch
{
	public new const Guid IID = .(0x305107b5, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_propertyName;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, float* p) get_elapsedTime;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR eventType, int16 canBubble, int16 cancelable, BSTR propertyName, float elapsedTime) initMSTransitionEvent;
	}


	public HRESULT get_propertyName(BSTR* p) mut => VT.[Friend]get_propertyName(&this, p);

	public HRESULT get_elapsedTime(float* p) mut => VT.[Friend]get_elapsedTime(&this, p);

	public HRESULT initMSTransitionEvent(BSTR eventType, int16 canBubble, int16 cancelable, BSTR propertyName, float elapsedTime) mut => VT.[Friend]initMSTransitionEvent(&this, eventType, canBubble, cancelable, propertyName, elapsedTime);
}

[CRepr]struct DispDOMMSTransitionEvent : IDispatch
{
	public new const Guid IID = .(0x305900bb, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
	}

}

[CRepr]struct IDOMMSAnimationEvent : IDispatch
{
	public new const Guid IID = .(0x305107b7, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_animationName;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, float* p) get_elapsedTime;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR eventType, int16 canBubble, int16 cancelable, BSTR animationName, float elapsedTime) initMSAnimationEvent;
	}


	public HRESULT get_animationName(BSTR* p) mut => VT.[Friend]get_animationName(&this, p);

	public HRESULT get_elapsedTime(float* p) mut => VT.[Friend]get_elapsedTime(&this, p);

	public HRESULT initMSAnimationEvent(BSTR eventType, int16 canBubble, int16 cancelable, BSTR animationName, float elapsedTime) mut => VT.[Friend]initMSAnimationEvent(&this, eventType, canBubble, cancelable, animationName, elapsedTime);
}

[CRepr]struct DispDOMMSAnimationEvent : IDispatch
{
	public new const Guid IID = .(0x305900bc, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
	}

}

[CRepr]struct IWebGeocoordinates : IDispatch
{
	public new const Guid IID = .(0x305107c7, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, double* p) get_latitude;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, double* p) get_longitude;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_altitude;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, double* p) get_accuracy;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_altitudeAccuracy;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_heading;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_speed;
	}


	public HRESULT get_latitude(double* p) mut => VT.[Friend]get_latitude(&this, p);

	public HRESULT get_longitude(double* p) mut => VT.[Friend]get_longitude(&this, p);

	public HRESULT get_altitude(VARIANT* p) mut => VT.[Friend]get_altitude(&this, p);

	public HRESULT get_accuracy(double* p) mut => VT.[Friend]get_accuracy(&this, p);

	public HRESULT get_altitudeAccuracy(VARIANT* p) mut => VT.[Friend]get_altitudeAccuracy(&this, p);

	public HRESULT get_heading(VARIANT* p) mut => VT.[Friend]get_heading(&this, p);

	public HRESULT get_speed(VARIANT* p) mut => VT.[Friend]get_speed(&this, p);
}

[CRepr]struct IWebGeopositionError : IDispatch
{
	public new const Guid IID = .(0x305107c9, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* p) get_code;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_message;
	}


	public HRESULT get_code(int32* p) mut => VT.[Friend]get_code(&this, p);

	public HRESULT get_message(BSTR* p) mut => VT.[Friend]get_message(&this, p);
}

[CRepr]struct IWebGeoposition : IDispatch
{
	public new const Guid IID = .(0x305107cd, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IWebGeocoordinates** p) get_coords;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint64* p) get_timestamp;
	}


	public HRESULT get_coords(IWebGeocoordinates** p) mut => VT.[Friend]get_coords(&this, p);

	public HRESULT get_timestamp(uint64* p) mut => VT.[Friend]get_timestamp(&this, p);
}

[CRepr]struct DispWebGeolocation : IDispatch
{
	public new const Guid IID = .(0x305900bd, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
	}

}

[CRepr]struct DispWebGeocoordinates : IDispatch
{
	public new const Guid IID = .(0x305900be, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
	}

}

[CRepr]struct DispWebGeopositionError : IDispatch
{
	public new const Guid IID = .(0x305900bf, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
	}

}

[CRepr]struct DispWebGeoposition : IDispatch
{
	public new const Guid IID = .(0x305900c1, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
	}

}

[CRepr]struct IClientCaps : IDispatch
{
	public new const Guid IID = .(0x7e8bc44d, 0xaeff, 0x11d1, 0x89, 0xc2, 0x00, 0xc0, 0x4f, 0xb6, 0xbf, 0xc4);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16* p) get_javaEnabled;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16* p) get_cookieEnabled;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_cpuClass;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_systemLanguage;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_userLanguage;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_platform;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* p) get_connectionSpeed;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16* p) get_onLine;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* p) get_colorDepth;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* p) get_bufferDepth;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* p) get_width;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* p) get_height;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* p) get_availHeight;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* p) get_availWidth;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_connectionType;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR bstrName, BSTR bstrUrl, BSTR bStrVer, int16* p) isComponentInstalled;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR bstrName, BSTR bstrUrl, BSTR* pbstrVer) getComponentVersion;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR bstrVer1, BSTR bstrVer2, int32* p) compareVersions;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR bstrName, BSTR bstrUrl, BSTR bStrVer) addComponentRequest;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16* p) doComponentRequest;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self) clearComponentRequest;
	}


	public HRESULT get_javaEnabled(int16* p) mut => VT.[Friend]get_javaEnabled(&this, p);

	public HRESULT get_cookieEnabled(int16* p) mut => VT.[Friend]get_cookieEnabled(&this, p);

	public HRESULT get_cpuClass(BSTR* p) mut => VT.[Friend]get_cpuClass(&this, p);

	public HRESULT get_systemLanguage(BSTR* p) mut => VT.[Friend]get_systemLanguage(&this, p);

	public HRESULT get_userLanguage(BSTR* p) mut => VT.[Friend]get_userLanguage(&this, p);

	public HRESULT get_platform(BSTR* p) mut => VT.[Friend]get_platform(&this, p);

	public HRESULT get_connectionSpeed(int32* p) mut => VT.[Friend]get_connectionSpeed(&this, p);

	public HRESULT get_onLine(int16* p) mut => VT.[Friend]get_onLine(&this, p);

	public HRESULT get_colorDepth(int32* p) mut => VT.[Friend]get_colorDepth(&this, p);

	public HRESULT get_bufferDepth(int32* p) mut => VT.[Friend]get_bufferDepth(&this, p);

	public HRESULT get_width(int32* p) mut => VT.[Friend]get_width(&this, p);

	public HRESULT get_height(int32* p) mut => VT.[Friend]get_height(&this, p);

	public HRESULT get_availHeight(int32* p) mut => VT.[Friend]get_availHeight(&this, p);

	public HRESULT get_availWidth(int32* p) mut => VT.[Friend]get_availWidth(&this, p);

	public HRESULT get_connectionType(BSTR* p) mut => VT.[Friend]get_connectionType(&this, p);

	public HRESULT isComponentInstalled(BSTR bstrName, BSTR bstrUrl, BSTR bStrVer, int16* p) mut => VT.[Friend]isComponentInstalled(&this, bstrName, bstrUrl, bStrVer, p);

	public HRESULT getComponentVersion(BSTR bstrName, BSTR bstrUrl, BSTR* pbstrVer) mut => VT.[Friend]getComponentVersion(&this, bstrName, bstrUrl, pbstrVer);

	public HRESULT compareVersions(BSTR bstrVer1, BSTR bstrVer2, int32* p) mut => VT.[Friend]compareVersions(&this, bstrVer1, bstrVer2, p);

	public HRESULT addComponentRequest(BSTR bstrName, BSTR bstrUrl, BSTR bStrVer) mut => VT.[Friend]addComponentRequest(&this, bstrName, bstrUrl, bStrVer);

	public HRESULT doComponentRequest(int16* p) mut => VT.[Friend]doComponentRequest(&this, p);

	public HRESULT clearComponentRequest() mut => VT.[Friend]clearComponentRequest(&this);
}

[CRepr]struct IDOMMSManipulationEvent : IDispatch
{
	public new const Guid IID = .(0x30510816, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* p) get_lastState;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* p) get_currentState;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR eventType, int16 canBubble, int16 cancelable, IHTMLWindow2* viewArg, int32 detailArg, int32 lastState, int32 currentState) initMSManipulationEvent;
	}


	public HRESULT get_lastState(int32* p) mut => VT.[Friend]get_lastState(&this, p);

	public HRESULT get_currentState(int32* p) mut => VT.[Friend]get_currentState(&this, p);

	public HRESULT initMSManipulationEvent(BSTR eventType, int16 canBubble, int16 cancelable, IHTMLWindow2* viewArg, int32 detailArg, int32 lastState, int32 currentState) mut => VT.[Friend]initMSManipulationEvent(&this, eventType, canBubble, cancelable, viewArg, detailArg, lastState, currentState);
}

[CRepr]struct DispDOMMSManipulationEvent : IDispatch
{
	public new const Guid IID = .(0x305900e1, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
	}

}

[CRepr]struct IDOMCloseEvent : IDispatch
{
	public new const Guid IID = .(0x305107ff, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16* p) get_wasClean;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR eventType, int16 canBubble, int16 cancelable, int16 wasClean, int32 code, BSTR reason) initCloseEvent;
	}


	public HRESULT get_wasClean(int16* p) mut => VT.[Friend]get_wasClean(&this, p);

	public HRESULT initCloseEvent(BSTR eventType, int16 canBubble, int16 cancelable, int16 wasClean, int32 code, BSTR reason) mut => VT.[Friend]initCloseEvent(&this, eventType, canBubble, cancelable, wasClean, code, reason);
}

[CRepr]struct DispDOMCloseEvent : IDispatch
{
	public new const Guid IID = .(0x305900dc, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
	}

}

[CRepr]struct DispApplicationCache : IDispatch
{
	public new const Guid IID = .(0x305900e4, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
	}

}

[CRepr]struct ICSSFilterSite : IUnknown
{
	public new const Guid IID = .(0x3050f3ed, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IUnknown.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IHTMLElement** Element) GetElement;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self) FireOnFilterChangeEvent;
	}


	public HRESULT GetElement(IHTMLElement** Element) mut => VT.[Friend]GetElement(&this, Element);

	public HRESULT FireOnFilterChangeEvent() mut => VT.[Friend]FireOnFilterChangeEvent(&this);
}

[CRepr]struct IMarkupPointer : IUnknown
{
	public new const Guid IID = .(0x3050f49f, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IUnknown.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IHTMLDocument2** ppDoc) OwningDoc;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, POINTER_GRAVITY* pGravity) Gravity;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, POINTER_GRAVITY Gravity) SetGravity;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BOOL* pfCling) Cling;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BOOL fCLing) SetCling;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self) Unposition;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BOOL* pfPositioned) IsPositioned;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IMarkupContainer** ppContainer) GetContainer;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IHTMLElement* pElement, ELEMENT_ADJACENCY eAdj) MoveAdjacentToElement;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IMarkupPointer* pPointer) MoveToPointer;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IMarkupContainer* pContainer, BOOL fAtStart) MoveToContainer;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BOOL fMove, MARKUP_CONTEXT_TYPE* pContext, IHTMLElement** ppElement, int32* pcch, char16* pchText) Left;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BOOL fMove, MARKUP_CONTEXT_TYPE* pContext, IHTMLElement** ppElement, int32* pcch, char16* pchText) Right;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IHTMLElement** ppElemCurrent) CurrentScope;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IMarkupPointer* pPointerThat, BOOL* pfResult) IsLeftOf;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IMarkupPointer* pPointerThat, BOOL* pfResult) IsLeftOfOrEqualTo;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IMarkupPointer* pPointerThat, BOOL* pfResult) IsRightOf;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IMarkupPointer* pPointerThat, BOOL* pfResult) IsRightOfOrEqualTo;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IMarkupPointer* pPointerThat, BOOL* pfAreEqual) IsEqualTo;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, MOVEUNIT_ACTION muAction) MoveUnit;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, PWSTR pchFindText, uint32 dwFlags, IMarkupPointer* pIEndMatch, IMarkupPointer* pIEndSearch) FindText;
	}


	public HRESULT OwningDoc(IHTMLDocument2** ppDoc) mut => VT.[Friend]OwningDoc(&this, ppDoc);

	public HRESULT Gravity(POINTER_GRAVITY* pGravity) mut => VT.[Friend]Gravity(&this, pGravity);

	public HRESULT SetGravity(POINTER_GRAVITY Gravity) mut => VT.[Friend]SetGravity(&this, Gravity);

	public HRESULT Cling(BOOL* pfCling) mut => VT.[Friend]Cling(&this, pfCling);

	public HRESULT SetCling(BOOL fCLing) mut => VT.[Friend]SetCling(&this, fCLing);

	public HRESULT Unposition() mut => VT.[Friend]Unposition(&this);

	public HRESULT IsPositioned(BOOL* pfPositioned) mut => VT.[Friend]IsPositioned(&this, pfPositioned);

	public HRESULT GetContainer(IMarkupContainer** ppContainer) mut => VT.[Friend]GetContainer(&this, ppContainer);

	public HRESULT MoveAdjacentToElement(IHTMLElement* pElement, ELEMENT_ADJACENCY eAdj) mut => VT.[Friend]MoveAdjacentToElement(&this, pElement, eAdj);

	public HRESULT MoveToPointer(IMarkupPointer* pPointer) mut => VT.[Friend]MoveToPointer(&this, pPointer);

	public HRESULT MoveToContainer(IMarkupContainer* pContainer, BOOL fAtStart) mut => VT.[Friend]MoveToContainer(&this, pContainer, fAtStart);

	public HRESULT Left(BOOL fMove, MARKUP_CONTEXT_TYPE* pContext, IHTMLElement** ppElement, int32* pcch, char16* pchText) mut => VT.[Friend]Left(&this, fMove, pContext, ppElement, pcch, pchText);

	public HRESULT Right(BOOL fMove, MARKUP_CONTEXT_TYPE* pContext, IHTMLElement** ppElement, int32* pcch, char16* pchText) mut => VT.[Friend]Right(&this, fMove, pContext, ppElement, pcch, pchText);

	public HRESULT CurrentScope(IHTMLElement** ppElemCurrent) mut => VT.[Friend]CurrentScope(&this, ppElemCurrent);

	public HRESULT IsLeftOf(IMarkupPointer* pPointerThat, BOOL* pfResult) mut => VT.[Friend]IsLeftOf(&this, pPointerThat, pfResult);

	public HRESULT IsLeftOfOrEqualTo(IMarkupPointer* pPointerThat, BOOL* pfResult) mut => VT.[Friend]IsLeftOfOrEqualTo(&this, pPointerThat, pfResult);

	public HRESULT IsRightOf(IMarkupPointer* pPointerThat, BOOL* pfResult) mut => VT.[Friend]IsRightOf(&this, pPointerThat, pfResult);

	public HRESULT IsRightOfOrEqualTo(IMarkupPointer* pPointerThat, BOOL* pfResult) mut => VT.[Friend]IsRightOfOrEqualTo(&this, pPointerThat, pfResult);

	public HRESULT IsEqualTo(IMarkupPointer* pPointerThat, BOOL* pfAreEqual) mut => VT.[Friend]IsEqualTo(&this, pPointerThat, pfAreEqual);

	public HRESULT MoveUnit(MOVEUNIT_ACTION muAction) mut => VT.[Friend]MoveUnit(&this, muAction);

	public HRESULT FindText(PWSTR pchFindText, uint32 dwFlags, IMarkupPointer* pIEndMatch, IMarkupPointer* pIEndSearch) mut => VT.[Friend]FindText(&this, pchFindText, dwFlags, pIEndMatch, pIEndSearch);
}

[CRepr]struct IMarkupContainer : IUnknown
{
	public new const Guid IID = .(0x3050f5f9, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IUnknown.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IHTMLDocument2** ppDoc) OwningDoc;
	}


	public HRESULT OwningDoc(IHTMLDocument2** ppDoc) mut => VT.[Friend]OwningDoc(&this, ppDoc);
}

[CRepr]struct IMarkupContainer2 : IMarkupContainer
{
	public new const Guid IID = .(0x3050f648, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IMarkupContainer.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IHTMLChangeSink* pChangeSink, IHTMLChangeLog** ppChangeLog, BOOL fForward, BOOL fBackward) CreateChangeLog;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IHTMLChangeSink* pChangeSink, uint32* pdwCookie) RegisterForDirtyRange;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32 dwCookie) UnRegisterForDirtyRange;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32 dwCookie, IMarkupPointer* pIPointerBegin, IMarkupPointer* pIPointerEnd) GetAndClearDirtyRange;
		protected new function [CallingConvention(.Stdcall)] int32(SelfOuter* self) GetVersionNumber;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IHTMLElement** ppElementMaster) GetMasterElement;
	}


	public HRESULT CreateChangeLog(IHTMLChangeSink* pChangeSink, IHTMLChangeLog** ppChangeLog, BOOL fForward, BOOL fBackward) mut => VT.[Friend]CreateChangeLog(&this, pChangeSink, ppChangeLog, fForward, fBackward);

	public HRESULT RegisterForDirtyRange(IHTMLChangeSink* pChangeSink, uint32* pdwCookie) mut => VT.[Friend]RegisterForDirtyRange(&this, pChangeSink, pdwCookie);

	public HRESULT UnRegisterForDirtyRange(uint32 dwCookie) mut => VT.[Friend]UnRegisterForDirtyRange(&this, dwCookie);

	public HRESULT GetAndClearDirtyRange(uint32 dwCookie, IMarkupPointer* pIPointerBegin, IMarkupPointer* pIPointerEnd) mut => VT.[Friend]GetAndClearDirtyRange(&this, dwCookie, pIPointerBegin, pIPointerEnd);

	public int32 GetVersionNumber() mut => VT.[Friend]GetVersionNumber(&this);

	public HRESULT GetMasterElement(IHTMLElement** ppElementMaster) mut => VT.[Friend]GetMasterElement(&this, ppElementMaster);
}

[CRepr]struct IHTMLChangeLog : IUnknown
{
	public new const Guid IID = .(0x3050f649, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IUnknown.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint8* pbBuffer, int32 nBufferSize, int32* pnRecordLength) GetNextChange;
	}


	public HRESULT GetNextChange(uint8* pbBuffer, int32 nBufferSize, int32* pnRecordLength) mut => VT.[Friend]GetNextChange(&this, pbBuffer, nBufferSize, pnRecordLength);
}

[CRepr]struct IHTMLChangeSink : IUnknown
{
	public new const Guid IID = .(0x3050f64a, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IUnknown.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self) Notify;
	}


	public HRESULT Notify() mut => VT.[Friend]Notify(&this);
}

[CRepr]struct ISegmentList : IUnknown
{
	public new const Guid IID = .(0x3050f605, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IUnknown.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, ISegmentListIterator** ppIIter) CreateIterator;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, SELECTION_TYPE* peType) COM_GetType;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BOOL* pfEmpty) IsEmpty;
	}


	public HRESULT CreateIterator(ISegmentListIterator** ppIIter) mut => VT.[Friend]CreateIterator(&this, ppIIter);

	public HRESULT GetType(SELECTION_TYPE* peType) mut => VT.[Friend]COM_GetType(&this, peType);

	public HRESULT IsEmpty(BOOL* pfEmpty) mut => VT.[Friend]IsEmpty(&this, pfEmpty);
}

[CRepr]struct ISegmentListIterator : IUnknown
{
	public new const Guid IID = .(0x3050f692, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IUnknown.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, ISegment** ppISegment) Current;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self) First;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self) IsDone;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self) Advance;
	}


	public HRESULT Current(ISegment** ppISegment) mut => VT.[Friend]Current(&this, ppISegment);

	public HRESULT First() mut => VT.[Friend]First(&this);

	public HRESULT IsDone() mut => VT.[Friend]IsDone(&this);

	public HRESULT Advance() mut => VT.[Friend]Advance(&this);
}

[CRepr]struct IHTMLCaret : IUnknown
{
	public new const Guid IID = .(0x3050f604, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IUnknown.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IDisplayPointer* pDispPointer, BOOL fScrollIntoView, CARET_DIRECTION eDir) MoveCaretToPointer;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IDisplayPointer* pDispPointer, BOOL fVisible, BOOL fScrollIntoView, CARET_DIRECTION eDir) MoveCaretToPointerEx;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IMarkupPointer* pIMarkupPointer) MoveMarkupPointerToCaret;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IDisplayPointer* pDispPointer) MoveDisplayPointerToCaret;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BOOL* pIsVisible) IsVisible;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BOOL fScrollIntoView) Show;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self) Hide;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, PWSTR pText, int32 lLen) InsertText;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self) ScrollIntoView;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, POINT* pPoint, BOOL fTranslate) GetLocation;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, CARET_DIRECTION* peDir) GetCaretDirection;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, CARET_DIRECTION eDir) SetCaretDirection;
	}


	public HRESULT MoveCaretToPointer(IDisplayPointer* pDispPointer, BOOL fScrollIntoView, CARET_DIRECTION eDir) mut => VT.[Friend]MoveCaretToPointer(&this, pDispPointer, fScrollIntoView, eDir);

	public HRESULT MoveCaretToPointerEx(IDisplayPointer* pDispPointer, BOOL fVisible, BOOL fScrollIntoView, CARET_DIRECTION eDir) mut => VT.[Friend]MoveCaretToPointerEx(&this, pDispPointer, fVisible, fScrollIntoView, eDir);

	public HRESULT MoveMarkupPointerToCaret(IMarkupPointer* pIMarkupPointer) mut => VT.[Friend]MoveMarkupPointerToCaret(&this, pIMarkupPointer);

	public HRESULT MoveDisplayPointerToCaret(IDisplayPointer* pDispPointer) mut => VT.[Friend]MoveDisplayPointerToCaret(&this, pDispPointer);

	public HRESULT IsVisible(BOOL* pIsVisible) mut => VT.[Friend]IsVisible(&this, pIsVisible);

	public HRESULT Show(BOOL fScrollIntoView) mut => VT.[Friend]Show(&this, fScrollIntoView);

	public HRESULT Hide() mut => VT.[Friend]Hide(&this);

	public HRESULT InsertText(PWSTR pText, int32 lLen) mut => VT.[Friend]InsertText(&this, pText, lLen);

	public HRESULT ScrollIntoView() mut => VT.[Friend]ScrollIntoView(&this);

	public HRESULT GetLocation(POINT* pPoint, BOOL fTranslate) mut => VT.[Friend]GetLocation(&this, pPoint, fTranslate);

	public HRESULT GetCaretDirection(CARET_DIRECTION* peDir) mut => VT.[Friend]GetCaretDirection(&this, peDir);

	public HRESULT SetCaretDirection(CARET_DIRECTION eDir) mut => VT.[Friend]SetCaretDirection(&this, eDir);
}

[CRepr]struct ISegment : IUnknown
{
	public new const Guid IID = .(0x3050f683, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IUnknown.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IMarkupPointer* pIStart, IMarkupPointer* pIEnd) GetPointers;
	}


	public HRESULT GetPointers(IMarkupPointer* pIStart, IMarkupPointer* pIEnd) mut => VT.[Friend]GetPointers(&this, pIStart, pIEnd);
}

[CRepr]struct IElementSegment : ISegment
{
	public new const Guid IID = .(0x3050f68f, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : ISegment.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IHTMLElement** ppIElement) GetElement;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BOOL fPrimary) SetPrimary;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BOOL* pfPrimary) IsPrimary;
	}


	public HRESULT GetElement(IHTMLElement** ppIElement) mut => VT.[Friend]GetElement(&this, ppIElement);

	public HRESULT SetPrimary(BOOL fPrimary) mut => VT.[Friend]SetPrimary(&this, fPrimary);

	public HRESULT IsPrimary(BOOL* pfPrimary) mut => VT.[Friend]IsPrimary(&this, pfPrimary);
}

[CRepr]struct IHighlightSegment : ISegment
{
	public new const Guid IID = .(0x3050f690, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : ISegment.VTable
	{
	}

}

[CRepr]struct IHighlightRenderingServices : IUnknown
{
	public new const Guid IID = .(0x3050f606, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IUnknown.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IDisplayPointer* pDispPointerStart, IDisplayPointer* pDispPointerEnd, IHTMLRenderStyle* pIRenderStyle, IHighlightSegment** ppISegment) AddSegment;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IHighlightSegment* pISegment, IDisplayPointer* pDispPointerStart, IDisplayPointer* pDispPointerEnd) MoveSegmentToPointers;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IHighlightSegment* pISegment) RemoveSegment;
	}


	public HRESULT AddSegment(IDisplayPointer* pDispPointerStart, IDisplayPointer* pDispPointerEnd, IHTMLRenderStyle* pIRenderStyle, IHighlightSegment** ppISegment) mut => VT.[Friend]AddSegment(&this, pDispPointerStart, pDispPointerEnd, pIRenderStyle, ppISegment);

	public HRESULT MoveSegmentToPointers(IHighlightSegment* pISegment, IDisplayPointer* pDispPointerStart, IDisplayPointer* pDispPointerEnd) mut => VT.[Friend]MoveSegmentToPointers(&this, pISegment, pDispPointerStart, pDispPointerEnd);

	public HRESULT RemoveSegment(IHighlightSegment* pISegment) mut => VT.[Friend]RemoveSegment(&this, pISegment);
}

[CRepr]struct ILineInfo : IUnknown
{
	public new const Guid IID = .(0x3050f7e2, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IUnknown.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* p) get_x;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* p) get_baseLine;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* p) get_textDescent;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* p) get_textHeight;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* p) get_lineDirection;
	}


	public HRESULT get_x(int32* p) mut => VT.[Friend]get_x(&this, p);

	public HRESULT get_baseLine(int32* p) mut => VT.[Friend]get_baseLine(&this, p);

	public HRESULT get_textDescent(int32* p) mut => VT.[Friend]get_textDescent(&this, p);

	public HRESULT get_textHeight(int32* p) mut => VT.[Friend]get_textHeight(&this, p);

	public HRESULT get_lineDirection(int32* p) mut => VT.[Friend]get_lineDirection(&this, p);
}

[CRepr]struct IDisplayPointer : IUnknown
{
	public new const Guid IID = .(0x3050f69e, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IUnknown.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, POINT ptPoint, COORD_SYSTEM eCoordSystem, IHTMLElement* pElementContext, uint32 dwHitTestOptions, uint32* pdwHitTestResults) MoveToPoint;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, DISPLAY_MOVEUNIT eMoveUnit, int32 lXPos) MoveUnit;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IMarkupPointer* pMarkupPointer) PositionMarkupPointer;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IDisplayPointer* pDispPointer) MoveToPointer;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, POINTER_GRAVITY eGravity) SetPointerGravity;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, POINTER_GRAVITY* peGravity) GetPointerGravity;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, DISPLAY_GRAVITY eGravity) SetDisplayGravity;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, DISPLAY_GRAVITY* peGravity) GetDisplayGravity;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BOOL* pfPositioned) IsPositioned;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self) Unposition;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IDisplayPointer* pDispPointer, BOOL* pfIsEqual) IsEqualTo;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IDisplayPointer* pDispPointer, BOOL* pfIsLeftOf) IsLeftOf;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IDisplayPointer* pDispPointer, BOOL* pfIsRightOf) IsRightOf;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BOOL* pfBOL) IsAtBOL;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IMarkupPointer* pPointer, IDisplayPointer* pDispLineContext) MoveToMarkupPointer;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self) ScrollIntoView;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, ILineInfo** ppLineInfo) GetLineInfo;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IHTMLElement** ppLayoutElement) GetFlowElement;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32* pdwBreaks) QueryBreaks;
	}


	public HRESULT MoveToPoint(POINT ptPoint, COORD_SYSTEM eCoordSystem, IHTMLElement* pElementContext, uint32 dwHitTestOptions, uint32* pdwHitTestResults) mut => VT.[Friend]MoveToPoint(&this, ptPoint, eCoordSystem, pElementContext, dwHitTestOptions, pdwHitTestResults);

	public HRESULT MoveUnit(DISPLAY_MOVEUNIT eMoveUnit, int32 lXPos) mut => VT.[Friend]MoveUnit(&this, eMoveUnit, lXPos);

	public HRESULT PositionMarkupPointer(IMarkupPointer* pMarkupPointer) mut => VT.[Friend]PositionMarkupPointer(&this, pMarkupPointer);

	public HRESULT MoveToPointer(IDisplayPointer* pDispPointer) mut => VT.[Friend]MoveToPointer(&this, pDispPointer);

	public HRESULT SetPointerGravity(POINTER_GRAVITY eGravity) mut => VT.[Friend]SetPointerGravity(&this, eGravity);

	public HRESULT GetPointerGravity(POINTER_GRAVITY* peGravity) mut => VT.[Friend]GetPointerGravity(&this, peGravity);

	public HRESULT SetDisplayGravity(DISPLAY_GRAVITY eGravity) mut => VT.[Friend]SetDisplayGravity(&this, eGravity);

	public HRESULT GetDisplayGravity(DISPLAY_GRAVITY* peGravity) mut => VT.[Friend]GetDisplayGravity(&this, peGravity);

	public HRESULT IsPositioned(BOOL* pfPositioned) mut => VT.[Friend]IsPositioned(&this, pfPositioned);

	public HRESULT Unposition() mut => VT.[Friend]Unposition(&this);

	public HRESULT IsEqualTo(IDisplayPointer* pDispPointer, BOOL* pfIsEqual) mut => VT.[Friend]IsEqualTo(&this, pDispPointer, pfIsEqual);

	public HRESULT IsLeftOf(IDisplayPointer* pDispPointer, BOOL* pfIsLeftOf) mut => VT.[Friend]IsLeftOf(&this, pDispPointer, pfIsLeftOf);

	public HRESULT IsRightOf(IDisplayPointer* pDispPointer, BOOL* pfIsRightOf) mut => VT.[Friend]IsRightOf(&this, pDispPointer, pfIsRightOf);

	public HRESULT IsAtBOL(BOOL* pfBOL) mut => VT.[Friend]IsAtBOL(&this, pfBOL);

	public HRESULT MoveToMarkupPointer(IMarkupPointer* pPointer, IDisplayPointer* pDispLineContext) mut => VT.[Friend]MoveToMarkupPointer(&this, pPointer, pDispLineContext);

	public HRESULT ScrollIntoView() mut => VT.[Friend]ScrollIntoView(&this);

	public HRESULT GetLineInfo(ILineInfo** ppLineInfo) mut => VT.[Friend]GetLineInfo(&this, ppLineInfo);

	public HRESULT GetFlowElement(IHTMLElement** ppLayoutElement) mut => VT.[Friend]GetFlowElement(&this, ppLayoutElement);

	public HRESULT QueryBreaks(uint32* pdwBreaks) mut => VT.[Friend]QueryBreaks(&this, pdwBreaks);
}

[CRepr]struct IDisplayServices : IUnknown
{
	public new const Guid IID = .(0x3050f69d, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IUnknown.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IDisplayPointer** ppDispPointer) CreateDisplayPointer;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, RECT* pRect, COORD_SYSTEM eSource, COORD_SYSTEM eDestination, IHTMLElement* pIElement) TransformRect;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, POINT* pPoint, COORD_SYSTEM eSource, COORD_SYSTEM eDestination, IHTMLElement* pIElement) TransformPoint;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IHTMLCaret** ppCaret) GetCaret;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IMarkupPointer* pPointer, IHTMLComputedStyle** ppComputedStyle) GetComputedStyle;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IHTMLElement* pIElement, RECT rect) ScrollRectIntoView;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IHTMLElement* pIElement, BOOL* pfHasFlowLayout) HasFlowLayout;
	}


	public HRESULT CreateDisplayPointer(IDisplayPointer** ppDispPointer) mut => VT.[Friend]CreateDisplayPointer(&this, ppDispPointer);

	public HRESULT TransformRect(RECT* pRect, COORD_SYSTEM eSource, COORD_SYSTEM eDestination, IHTMLElement* pIElement) mut => VT.[Friend]TransformRect(&this, pRect, eSource, eDestination, pIElement);

	public HRESULT TransformPoint(POINT* pPoint, COORD_SYSTEM eSource, COORD_SYSTEM eDestination, IHTMLElement* pIElement) mut => VT.[Friend]TransformPoint(&this, pPoint, eSource, eDestination, pIElement);

	public HRESULT GetCaret(IHTMLCaret** ppCaret) mut => VT.[Friend]GetCaret(&this, ppCaret);

	public HRESULT GetComputedStyle(IMarkupPointer* pPointer, IHTMLComputedStyle** ppComputedStyle) mut => VT.[Friend]GetComputedStyle(&this, pPointer, ppComputedStyle);

	public HRESULT ScrollRectIntoView(IHTMLElement* pIElement, RECT rect) mut => VT.[Friend]ScrollRectIntoView(&this, pIElement, rect);

	public HRESULT HasFlowLayout(IHTMLElement* pIElement, BOOL* pfHasFlowLayout) mut => VT.[Friend]HasFlowLayout(&this, pIElement, pfHasFlowLayout);
}

[CRepr]struct IHtmlDlgSafeHelper : IDispatch
{
	public new const Guid IID = .(0x3050f81a, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT initColor, VARIANT* rgbColor) choosecolordlg;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR fontName, VARIANT* charset) getCharset;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IDispatch** p) get_Fonts;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IDispatch** p) get_BlockFormats;
	}


	public HRESULT choosecolordlg(VARIANT initColor, VARIANT* rgbColor) mut => VT.[Friend]choosecolordlg(&this, initColor, rgbColor);

	public HRESULT getCharset(BSTR fontName, VARIANT* charset) mut => VT.[Friend]getCharset(&this, fontName, charset);

	public HRESULT get_Fonts(IDispatch** p) mut => VT.[Friend]get_Fonts(&this, p);

	public HRESULT get_BlockFormats(IDispatch** p) mut => VT.[Friend]get_BlockFormats(&this, p);
}

[CRepr]struct IBlockFormats : IDispatch
{
	public new const Guid IID = .(0x3050f830, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IUnknown** p) get__NewEnum;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* p) get_Count;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* pvarIndex, BSTR* pbstrBlockFormat) Item;
	}


	public HRESULT get__NewEnum(IUnknown** p) mut => VT.[Friend]get__NewEnum(&this, p);

	public HRESULT get_Count(int32* p) mut => VT.[Friend]get_Count(&this, p);

	public HRESULT Item(VARIANT* pvarIndex, BSTR* pbstrBlockFormat) mut => VT.[Friend]Item(&this, pvarIndex, pbstrBlockFormat);
}

[CRepr]struct IFontNames : IDispatch
{
	public new const Guid IID = .(0x3050f839, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IUnknown** p) get__NewEnum;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* p) get_Count;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* pvarIndex, BSTR* pbstrFontName) Item;
	}


	public HRESULT get__NewEnum(IUnknown** p) mut => VT.[Friend]get__NewEnum(&this, p);

	public HRESULT get_Count(int32* p) mut => VT.[Friend]get_Count(&this, p);

	public HRESULT Item(VARIANT* pvarIndex, BSTR* pbstrFontName) mut => VT.[Friend]Item(&this, pvarIndex, pbstrFontName);
}

[CRepr]struct ICSSFilter : IUnknown
{
	public new const Guid IID = .(0x3050f3ec, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IUnknown.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, ICSSFilterSite* pSink) SetSite;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 dispid) OnAmbientPropertyChange;
	}


	public HRESULT SetSite(ICSSFilterSite* pSink) mut => VT.[Friend]SetSite(&this, pSink);

	public HRESULT OnAmbientPropertyChange(int32 dispid) mut => VT.[Friend]OnAmbientPropertyChange(&this, dispid);
}

[CRepr]struct ISecureUrlHost : IUnknown
{
	public new const Guid IID = .(0xc81984c4, 0x74c8, 0x11d2, 0xba, 0xa9, 0x00, 0xc0, 0x4f, 0xc2, 0x04, 0x0e);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IUnknown.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BOOL* pfAllow, PWSTR pchUrlInQuestion, uint32 dwFlags) ValidateSecureUrl;
	}


	public HRESULT ValidateSecureUrl(BOOL* pfAllow, PWSTR pchUrlInQuestion, uint32 dwFlags) mut => VT.[Friend]ValidateSecureUrl(&this, pfAllow, pchUrlInQuestion, dwFlags);
}

[CRepr]struct IMarkupServices : IUnknown
{
	public new const Guid IID = .(0x3050f4a0, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IUnknown.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IMarkupPointer** ppPointer) CreateMarkupPointer;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IMarkupContainer** ppMarkupContainer) CreateMarkupContainer;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, ELEMENT_TAG_ID tagID, PWSTR pchAttributes, IHTMLElement** ppElement) CreateElement;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IHTMLElement* pElemCloneThis, IHTMLElement** ppElementTheClone) CloneElement;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IHTMLElement* pElementInsert, IMarkupPointer* pPointerStart, IMarkupPointer* pPointerFinish) InsertElement;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IHTMLElement* pElementRemove) RemoveElement;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IMarkupPointer* pPointerStart, IMarkupPointer* pPointerFinish) Remove;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IMarkupPointer* pPointerSourceStart, IMarkupPointer* pPointerSourceFinish, IMarkupPointer* pPointerTarget) Copy;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IMarkupPointer* pPointerSourceStart, IMarkupPointer* pPointerSourceFinish, IMarkupPointer* pPointerTarget) Move;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, PWSTR pchText, int32 cch, IMarkupPointer* pPointerTarget) InsertText;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, PWSTR pchHTML, uint32 dwFlags, IMarkupContainer** ppContainerResult, IMarkupPointer* ppPointerStart, IMarkupPointer* ppPointerFinish) ParseString;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int hglobalHTML, uint32 dwFlags, IMarkupContainer** ppContainerResult, IMarkupPointer* pPointerStart, IMarkupPointer* pPointerFinish) ParseGlobal;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IHTMLElement* pElement, BOOL* pfScoped) IsScopedElement;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IHTMLElement* pElement, ELEMENT_TAG_ID* ptagId) GetElementTagId;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR bstrName, ELEMENT_TAG_ID* ptagId) GetTagIDForName;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, ELEMENT_TAG_ID tagId, BSTR* pbstrName) GetNameForTagID;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IHTMLTxtRange* pIRange, IMarkupPointer* pPointerStart, IMarkupPointer* pPointerFinish) MovePointersToRange;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IMarkupPointer* pPointerStart, IMarkupPointer* pPointerFinish, IHTMLTxtRange* pIRange) MoveRangeToPointers;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, PWSTR pchTitle) BeginUndoUnit;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self) EndUndoUnit;
	}


	public HRESULT CreateMarkupPointer(IMarkupPointer** ppPointer) mut => VT.[Friend]CreateMarkupPointer(&this, ppPointer);

	public HRESULT CreateMarkupContainer(IMarkupContainer** ppMarkupContainer) mut => VT.[Friend]CreateMarkupContainer(&this, ppMarkupContainer);

	public HRESULT CreateElement(ELEMENT_TAG_ID tagID, PWSTR pchAttributes, IHTMLElement** ppElement) mut => VT.[Friend]CreateElement(&this, tagID, pchAttributes, ppElement);

	public HRESULT CloneElement(IHTMLElement* pElemCloneThis, IHTMLElement** ppElementTheClone) mut => VT.[Friend]CloneElement(&this, pElemCloneThis, ppElementTheClone);

	public HRESULT InsertElement(IHTMLElement* pElementInsert, IMarkupPointer* pPointerStart, IMarkupPointer* pPointerFinish) mut => VT.[Friend]InsertElement(&this, pElementInsert, pPointerStart, pPointerFinish);

	public HRESULT RemoveElement(IHTMLElement* pElementRemove) mut => VT.[Friend]RemoveElement(&this, pElementRemove);

	public HRESULT Remove(IMarkupPointer* pPointerStart, IMarkupPointer* pPointerFinish) mut => VT.[Friend]Remove(&this, pPointerStart, pPointerFinish);

	public HRESULT Copy(IMarkupPointer* pPointerSourceStart, IMarkupPointer* pPointerSourceFinish, IMarkupPointer* pPointerTarget) mut => VT.[Friend]Copy(&this, pPointerSourceStart, pPointerSourceFinish, pPointerTarget);

	public HRESULT Move(IMarkupPointer* pPointerSourceStart, IMarkupPointer* pPointerSourceFinish, IMarkupPointer* pPointerTarget) mut => VT.[Friend]Move(&this, pPointerSourceStart, pPointerSourceFinish, pPointerTarget);

	public HRESULT InsertText(PWSTR pchText, int32 cch, IMarkupPointer* pPointerTarget) mut => VT.[Friend]InsertText(&this, pchText, cch, pPointerTarget);

	public HRESULT ParseString(PWSTR pchHTML, uint32 dwFlags, IMarkupContainer** ppContainerResult, IMarkupPointer* ppPointerStart, IMarkupPointer* ppPointerFinish) mut => VT.[Friend]ParseString(&this, pchHTML, dwFlags, ppContainerResult, ppPointerStart, ppPointerFinish);

	public HRESULT ParseGlobal(int hglobalHTML, uint32 dwFlags, IMarkupContainer** ppContainerResult, IMarkupPointer* pPointerStart, IMarkupPointer* pPointerFinish) mut => VT.[Friend]ParseGlobal(&this, hglobalHTML, dwFlags, ppContainerResult, pPointerStart, pPointerFinish);

	public HRESULT IsScopedElement(IHTMLElement* pElement, BOOL* pfScoped) mut => VT.[Friend]IsScopedElement(&this, pElement, pfScoped);

	public HRESULT GetElementTagId(IHTMLElement* pElement, ELEMENT_TAG_ID* ptagId) mut => VT.[Friend]GetElementTagId(&this, pElement, ptagId);

	public HRESULT GetTagIDForName(BSTR bstrName, ELEMENT_TAG_ID* ptagId) mut => VT.[Friend]GetTagIDForName(&this, bstrName, ptagId);

	public HRESULT GetNameForTagID(ELEMENT_TAG_ID tagId, BSTR* pbstrName) mut => VT.[Friend]GetNameForTagID(&this, tagId, pbstrName);

	public HRESULT MovePointersToRange(IHTMLTxtRange* pIRange, IMarkupPointer* pPointerStart, IMarkupPointer* pPointerFinish) mut => VT.[Friend]MovePointersToRange(&this, pIRange, pPointerStart, pPointerFinish);

	public HRESULT MoveRangeToPointers(IMarkupPointer* pPointerStart, IMarkupPointer* pPointerFinish, IHTMLTxtRange* pIRange) mut => VT.[Friend]MoveRangeToPointers(&this, pPointerStart, pPointerFinish, pIRange);

	public HRESULT BeginUndoUnit(PWSTR pchTitle) mut => VT.[Friend]BeginUndoUnit(&this, pchTitle);

	public HRESULT EndUndoUnit() mut => VT.[Friend]EndUndoUnit(&this);
}

[CRepr]struct IMarkupServices2 : IMarkupServices
{
	public new const Guid IID = .(0x3050f682, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IMarkupServices.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int hglobalHTML, uint32 dwFlags, IMarkupContainer* pContext, IMarkupContainer** ppContainerResult, IMarkupPointer* pPointerStart, IMarkupPointer* pPointerFinish) ParseGlobalEx;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IMarkupPointer* pPointerStart, IMarkupPointer* pPointerFinish, IMarkupPointer* pPointerTarget, IMarkupPointer* pPointerStatus, IHTMLElement** ppElemFailBottom, IHTMLElement** ppElemFailTop) ValidateElements;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, ISegmentList* pSegmentList, uint32 dwFlags) SaveSegmentsToClipboard;
	}


	public HRESULT ParseGlobalEx(int hglobalHTML, uint32 dwFlags, IMarkupContainer* pContext, IMarkupContainer** ppContainerResult, IMarkupPointer* pPointerStart, IMarkupPointer* pPointerFinish) mut => VT.[Friend]ParseGlobalEx(&this, hglobalHTML, dwFlags, pContext, ppContainerResult, pPointerStart, pPointerFinish);

	public HRESULT ValidateElements(IMarkupPointer* pPointerStart, IMarkupPointer* pPointerFinish, IMarkupPointer* pPointerTarget, IMarkupPointer* pPointerStatus, IHTMLElement** ppElemFailBottom, IHTMLElement** ppElemFailTop) mut => VT.[Friend]ValidateElements(&this, pPointerStart, pPointerFinish, pPointerTarget, pPointerStatus, ppElemFailBottom, ppElemFailTop);

	public HRESULT SaveSegmentsToClipboard(ISegmentList* pSegmentList, uint32 dwFlags) mut => VT.[Friend]SaveSegmentsToClipboard(&this, pSegmentList, dwFlags);
}

[CRepr]struct IHTMLChangePlayback : IUnknown
{
	public new const Guid IID = .(0x3050f6e0, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IUnknown.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint8* pbRecord, BOOL fForward) ExecChange;
	}


	public HRESULT ExecChange(uint8* pbRecord, BOOL fForward) mut => VT.[Friend]ExecChange(&this, pbRecord, fForward);
}

[CRepr]struct IMarkupPointer2 : IMarkupPointer
{
	public new const Guid IID = .(0x3050f675, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IMarkupPointer.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BOOL* pfAtBreak) IsAtWordBreak;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* plMP) GetMarkupPosition;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IMarkupContainer* pContainer, int32 lMP) MoveToMarkupPosition;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, MOVEUNIT_ACTION muAction, IMarkupPointer* pIBoundary) MoveUnitBounded;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IMarkupPointer* pRight, BOOL* pfResult) IsInsideURL;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IHTMLElement* pIElement, BOOL fAtStart) MoveToContent;
	}


	public HRESULT IsAtWordBreak(BOOL* pfAtBreak) mut => VT.[Friend]IsAtWordBreak(&this, pfAtBreak);

	public HRESULT GetMarkupPosition(int32* plMP) mut => VT.[Friend]GetMarkupPosition(&this, plMP);

	public HRESULT MoveToMarkupPosition(IMarkupContainer* pContainer, int32 lMP) mut => VT.[Friend]MoveToMarkupPosition(&this, pContainer, lMP);

	public HRESULT MoveUnitBounded(MOVEUNIT_ACTION muAction, IMarkupPointer* pIBoundary) mut => VT.[Friend]MoveUnitBounded(&this, muAction, pIBoundary);

	public HRESULT IsInsideURL(IMarkupPointer* pRight, BOOL* pfResult) mut => VT.[Friend]IsInsideURL(&this, pRight, pfResult);

	public HRESULT MoveToContent(IHTMLElement* pIElement, BOOL fAtStart) mut => VT.[Friend]MoveToContent(&this, pIElement, fAtStart);
}

[CRepr]struct IMarkupTextFrags : IUnknown
{
	public new const Guid IID = .(0x3050f5fa, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IUnknown.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* pcFrags) GetTextFragCount;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 iFrag, BSTR* pbstrFrag, IMarkupPointer* pPointerFrag) GetTextFrag;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 iFrag) RemoveTextFrag;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 iFrag, BSTR bstrInsert, IMarkupPointer* pPointerInsert) InsertTextFrag;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IMarkupPointer* pPointerFind, int32* piFrag, BOOL* pfFragFound) FindTextFragFromMarkupPointer;
	}


	public HRESULT GetTextFragCount(int32* pcFrags) mut => VT.[Friend]GetTextFragCount(&this, pcFrags);

	public HRESULT GetTextFrag(int32 iFrag, BSTR* pbstrFrag, IMarkupPointer* pPointerFrag) mut => VT.[Friend]GetTextFrag(&this, iFrag, pbstrFrag, pPointerFrag);

	public HRESULT RemoveTextFrag(int32 iFrag) mut => VT.[Friend]RemoveTextFrag(&this, iFrag);

	public HRESULT InsertTextFrag(int32 iFrag, BSTR bstrInsert, IMarkupPointer* pPointerInsert) mut => VT.[Friend]InsertTextFrag(&this, iFrag, bstrInsert, pPointerInsert);

	public HRESULT FindTextFragFromMarkupPointer(IMarkupPointer* pPointerFind, int32* piFrag, BOOL* pfFragFound) mut => VT.[Friend]FindTextFragFromMarkupPointer(&this, pPointerFind, piFrag, pfFragFound);
}

[CRepr]struct IXMLGenericParse : IUnknown
{
	public new const Guid IID = .(0xe4e23071, 0x4d07, 0x11d2, 0xae, 0x76, 0x00, 0x80, 0xc7, 0x3b, 0xc1, 0x99);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IUnknown.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16 fDoGeneric) SetGenericParse;
	}


	public HRESULT SetGenericParse(int16 fDoGeneric) mut => VT.[Friend]SetGenericParse(&this, fDoGeneric);
}

[CRepr]struct IHTMLEditHost : IUnknown
{
	public new const Guid IID = .(0x3050f6a0, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IUnknown.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IHTMLElement* pIElement, RECT* prcNew, ELEMENT_CORNER eHandle) SnapRect;
	}


	public HRESULT SnapRect(IHTMLElement* pIElement, RECT* prcNew, ELEMENT_CORNER eHandle) mut => VT.[Friend]SnapRect(&this, pIElement, prcNew, eHandle);
}

[CRepr]struct IHTMLEditHost2 : IHTMLEditHost
{
	public new const Guid IID = .(0x3050f848, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0d);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IHTMLEditHost.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self) PreDrag;
	}


	public HRESULT PreDrag() mut => VT.[Friend]PreDrag(&this);
}

[CRepr]struct ISequenceNumber : IUnknown
{
	public new const Guid IID = .(0x3050f6c1, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IUnknown.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 nCurrent, int32* pnNew) GetSequenceNumber;
	}


	public HRESULT GetSequenceNumber(int32 nCurrent, int32* pnNew) mut => VT.[Friend]GetSequenceNumber(&this, nCurrent, pnNew);
}

[CRepr]struct IIMEServices : IUnknown
{
	public new const Guid IID = .(0x3050f6ca, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IUnknown.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IActiveIMMApp** ppActiveIMM) GetActiveIMM;
	}


	public HRESULT GetActiveIMM(IActiveIMMApp** ppActiveIMM) mut => VT.[Friend]GetActiveIMM(&this, ppActiveIMM);
}

[CRepr]struct ISelectionServicesListener : IUnknown
{
	public new const Guid IID = .(0x3050f699, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IUnknown.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self) BeginSelectionUndo;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self) EndSelectionUndo;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IMarkupPointer* pIElementStart, IMarkupPointer* pIElementEnd, IMarkupPointer* pIElementContentStart, IMarkupPointer* pIElementContentEnd) OnSelectedElementExit;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, SELECTION_TYPE eType, ISelectionServicesListener* pIListener) OnChangeType;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* pTypeDetail) GetTypeDetail;
	}


	public HRESULT BeginSelectionUndo() mut => VT.[Friend]BeginSelectionUndo(&this);

	public HRESULT EndSelectionUndo() mut => VT.[Friend]EndSelectionUndo(&this);

	public HRESULT OnSelectedElementExit(IMarkupPointer* pIElementStart, IMarkupPointer* pIElementEnd, IMarkupPointer* pIElementContentStart, IMarkupPointer* pIElementContentEnd) mut => VT.[Friend]OnSelectedElementExit(&this, pIElementStart, pIElementEnd, pIElementContentStart, pIElementContentEnd);

	public HRESULT OnChangeType(SELECTION_TYPE eType, ISelectionServicesListener* pIListener) mut => VT.[Friend]OnChangeType(&this, eType, pIListener);

	public HRESULT GetTypeDetail(BSTR* pTypeDetail) mut => VT.[Friend]GetTypeDetail(&this, pTypeDetail);
}

[CRepr]struct ISelectionServices : IUnknown
{
	public new const Guid IID = .(0x3050f684, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IUnknown.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, SELECTION_TYPE eType, ISelectionServicesListener* pIListener) SetSelectionType;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IMarkupContainer** ppIContainer) GetMarkupContainer;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IMarkupPointer* pIStart, IMarkupPointer* pIEnd, ISegment** ppISegmentAdded) AddSegment;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IHTMLElement* pIElement, IElementSegment** ppISegmentAdded) AddElementSegment;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, ISegment* pISegment) RemoveSegment;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, ISelectionServicesListener** ppISelectionServicesListener) GetSelectionServicesListener;
	}


	public HRESULT SetSelectionType(SELECTION_TYPE eType, ISelectionServicesListener* pIListener) mut => VT.[Friend]SetSelectionType(&this, eType, pIListener);

	public HRESULT GetMarkupContainer(IMarkupContainer** ppIContainer) mut => VT.[Friend]GetMarkupContainer(&this, ppIContainer);

	public HRESULT AddSegment(IMarkupPointer* pIStart, IMarkupPointer* pIEnd, ISegment** ppISegmentAdded) mut => VT.[Friend]AddSegment(&this, pIStart, pIEnd, ppISegmentAdded);

	public HRESULT AddElementSegment(IHTMLElement* pIElement, IElementSegment** ppISegmentAdded) mut => VT.[Friend]AddElementSegment(&this, pIElement, ppISegmentAdded);

	public HRESULT RemoveSegment(ISegment* pISegment) mut => VT.[Friend]RemoveSegment(&this, pISegment);

	public HRESULT GetSelectionServicesListener(ISelectionServicesListener** ppISelectionServicesListener) mut => VT.[Friend]GetSelectionServicesListener(&this, ppISelectionServicesListener);
}

[CRepr]struct IHTMLEditDesigner : IUnknown
{
	public new const Guid IID = .(0x3050f662, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IUnknown.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 inEvtDispId, IHTMLEventObj* pIEventObj) PreHandleEvent;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 inEvtDispId, IHTMLEventObj* pIEventObj) PostHandleEvent;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 inEvtDispId, IHTMLEventObj* pIEventObj) TranslateAccelerator;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 inEvtDispId, IHTMLEventObj* pIEventObj) PostEditorEventNotify;
	}


	public HRESULT PreHandleEvent(int32 inEvtDispId, IHTMLEventObj* pIEventObj) mut => VT.[Friend]PreHandleEvent(&this, inEvtDispId, pIEventObj);

	public HRESULT PostHandleEvent(int32 inEvtDispId, IHTMLEventObj* pIEventObj) mut => VT.[Friend]PostHandleEvent(&this, inEvtDispId, pIEventObj);

	public HRESULT TranslateAccelerator(int32 inEvtDispId, IHTMLEventObj* pIEventObj) mut => VT.[Friend]TranslateAccelerator(&this, inEvtDispId, pIEventObj);

	public HRESULT PostEditorEventNotify(int32 inEvtDispId, IHTMLEventObj* pIEventObj) mut => VT.[Friend]PostEditorEventNotify(&this, inEvtDispId, pIEventObj);
}

[CRepr]struct IHTMLEditServices : IUnknown
{
	public new const Guid IID = .(0x3050f663, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IUnknown.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IHTMLEditDesigner* pIDesigner) AddDesigner;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IHTMLEditDesigner* pIDesigner) RemoveDesigner;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IMarkupContainer* pIContainer, ISelectionServices** ppSelSvc) GetSelectionServices;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IMarkupPointer* pIStartAnchor) MoveToSelectionAnchor;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IMarkupPointer* pIEndAnchor) MoveToSelectionEnd;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IMarkupPointer* pStart, IMarkupPointer* pEnd, SELECTION_TYPE eType) SelectRange;
	}


	public HRESULT AddDesigner(IHTMLEditDesigner* pIDesigner) mut => VT.[Friend]AddDesigner(&this, pIDesigner);

	public HRESULT RemoveDesigner(IHTMLEditDesigner* pIDesigner) mut => VT.[Friend]RemoveDesigner(&this, pIDesigner);

	public HRESULT GetSelectionServices(IMarkupContainer* pIContainer, ISelectionServices** ppSelSvc) mut => VT.[Friend]GetSelectionServices(&this, pIContainer, ppSelSvc);

	public HRESULT MoveToSelectionAnchor(IMarkupPointer* pIStartAnchor) mut => VT.[Friend]MoveToSelectionAnchor(&this, pIStartAnchor);

	public HRESULT MoveToSelectionEnd(IMarkupPointer* pIEndAnchor) mut => VT.[Friend]MoveToSelectionEnd(&this, pIEndAnchor);

	public HRESULT SelectRange(IMarkupPointer* pStart, IMarkupPointer* pEnd, SELECTION_TYPE eType) mut => VT.[Friend]SelectRange(&this, pStart, pEnd, eType);
}

[CRepr]struct IHTMLEditServices2 : IHTMLEditServices
{
	public new const Guid IID = .(0x3050f812, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IHTMLEditServices.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IDisplayPointer* pIStartAnchor) MoveToSelectionAnchorEx;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IDisplayPointer* pIEndAnchor) MoveToSelectionEndEx;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BOOL fReCompute) FreezeVirtualCaretPos;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BOOL fReset) UnFreezeVirtualCaretPos;
	}


	public HRESULT MoveToSelectionAnchorEx(IDisplayPointer* pIStartAnchor) mut => VT.[Friend]MoveToSelectionAnchorEx(&this, pIStartAnchor);

	public HRESULT MoveToSelectionEndEx(IDisplayPointer* pIEndAnchor) mut => VT.[Friend]MoveToSelectionEndEx(&this, pIEndAnchor);

	public HRESULT FreezeVirtualCaretPos(BOOL fReCompute) mut => VT.[Friend]FreezeVirtualCaretPos(&this, fReCompute);

	public HRESULT UnFreezeVirtualCaretPos(BOOL fReset) mut => VT.[Friend]UnFreezeVirtualCaretPos(&this, fReset);
}

[CRepr]struct IHTMLComputedStyle : IUnknown
{
	public new const Guid IID = .(0x3050f6c3, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IUnknown.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16* p) get_bold;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16* p) get_italic;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16* p) get_underline;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16* p) get_overline;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16* p) get_strikeOut;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16* p) get_subScript;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16* p) get_superScript;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16* p) get_explicitFace;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* p) get_fontWeight;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* p) get_fontSize;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int8* p) get_fontName;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16* p) get_hasBgColor;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32* p) get_textColor;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32* p) get_backgroundColor;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16* p) get_preFormatted;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16* p) get_direction;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16* p) get_blockDirection;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16* p) get_OL;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IHTMLComputedStyle* pComputedStyle, int16* pfEqual) IsEqual;
	}


	public HRESULT get_bold(int16* p) mut => VT.[Friend]get_bold(&this, p);

	public HRESULT get_italic(int16* p) mut => VT.[Friend]get_italic(&this, p);

	public HRESULT get_underline(int16* p) mut => VT.[Friend]get_underline(&this, p);

	public HRESULT get_overline(int16* p) mut => VT.[Friend]get_overline(&this, p);

	public HRESULT get_strikeOut(int16* p) mut => VT.[Friend]get_strikeOut(&this, p);

	public HRESULT get_subScript(int16* p) mut => VT.[Friend]get_subScript(&this, p);

	public HRESULT get_superScript(int16* p) mut => VT.[Friend]get_superScript(&this, p);

	public HRESULT get_explicitFace(int16* p) mut => VT.[Friend]get_explicitFace(&this, p);

	public HRESULT get_fontWeight(int32* p) mut => VT.[Friend]get_fontWeight(&this, p);

	public HRESULT get_fontSize(int32* p) mut => VT.[Friend]get_fontSize(&this, p);

	public HRESULT get_fontName(int8* p) mut => VT.[Friend]get_fontName(&this, p);

	public HRESULT get_hasBgColor(int16* p) mut => VT.[Friend]get_hasBgColor(&this, p);

	public HRESULT get_textColor(uint32* p) mut => VT.[Friend]get_textColor(&this, p);

	public HRESULT get_backgroundColor(uint32* p) mut => VT.[Friend]get_backgroundColor(&this, p);

	public HRESULT get_preFormatted(int16* p) mut => VT.[Friend]get_preFormatted(&this, p);

	public HRESULT get_direction(int16* p) mut => VT.[Friend]get_direction(&this, p);

	public HRESULT get_blockDirection(int16* p) mut => VT.[Friend]get_blockDirection(&this, p);

	public HRESULT get_OL(int16* p) mut => VT.[Friend]get_OL(&this, p);

	public HRESULT IsEqual(IHTMLComputedStyle* pComputedStyle, int16* pfEqual) mut => VT.[Friend]IsEqual(&this, pComputedStyle, pfEqual);
}

[CRepr]struct IDeveloperConsoleMessageReceiver : IUnknown
{
	public new const Guid IID = .(0x30510808, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IUnknown.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, PWSTR source, DEV_CONSOLE_MESSAGE_LEVEL level, int32 messageId, PWSTR messageText) Write;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, PWSTR source, DEV_CONSOLE_MESSAGE_LEVEL level, int32 messageId, PWSTR messageText, PWSTR fileUrl) WriteWithUrl;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, PWSTR source, DEV_CONSOLE_MESSAGE_LEVEL level, int32 messageId, PWSTR messageText, PWSTR fileUrl, uint32 line) WriteWithUrlAndLine;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, PWSTR source, DEV_CONSOLE_MESSAGE_LEVEL level, int32 messageId, PWSTR messageText, PWSTR fileUrl, uint32 line, uint32 column) WriteWithUrlLineAndColumn;
	}


	public HRESULT Write(PWSTR source, DEV_CONSOLE_MESSAGE_LEVEL level, int32 messageId, PWSTR messageText) mut => VT.[Friend]Write(&this, source, level, messageId, messageText);

	public HRESULT WriteWithUrl(PWSTR source, DEV_CONSOLE_MESSAGE_LEVEL level, int32 messageId, PWSTR messageText, PWSTR fileUrl) mut => VT.[Friend]WriteWithUrl(&this, source, level, messageId, messageText, fileUrl);

	public HRESULT WriteWithUrlAndLine(PWSTR source, DEV_CONSOLE_MESSAGE_LEVEL level, int32 messageId, PWSTR messageText, PWSTR fileUrl, uint32 line) mut => VT.[Friend]WriteWithUrlAndLine(&this, source, level, messageId, messageText, fileUrl, line);

	public HRESULT WriteWithUrlLineAndColumn(PWSTR source, DEV_CONSOLE_MESSAGE_LEVEL level, int32 messageId, PWSTR messageText, PWSTR fileUrl, uint32 line, uint32 column) mut => VT.[Friend]WriteWithUrlLineAndColumn(&this, source, level, messageId, messageText, fileUrl, line, column);
}

[CRepr]struct IScriptEventHandler : IUnknown
{
	public new const Guid IID = .(0x3051083a, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IUnknown.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* pbstrFunctionName) FunctionName;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IUnknown** ppDebugDocumentContext) DebugDocumentContext;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IDispatch** ppDispHandler) EventHandlerDispatch;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BOOL* pfUsesCapture) UsesCapture;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint64* pullCookie) Cookie;
	}


	public HRESULT FunctionName(BSTR* pbstrFunctionName) mut => VT.[Friend]FunctionName(&this, pbstrFunctionName);

	public HRESULT DebugDocumentContext(IUnknown** ppDebugDocumentContext) mut => VT.[Friend]DebugDocumentContext(&this, ppDebugDocumentContext);

	public HRESULT EventHandlerDispatch(IDispatch** ppDispHandler) mut => VT.[Friend]EventHandlerDispatch(&this, ppDispHandler);

	public HRESULT UsesCapture(BOOL* pfUsesCapture) mut => VT.[Friend]UsesCapture(&this, pfUsesCapture);

	public HRESULT Cookie(uint64* pullCookie) mut => VT.[Friend]Cookie(&this, pullCookie);
}

[CRepr]struct IDebugCallbackNotificationHandler : IUnknown
{
	public new const Guid IID = .(0x30510842, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IUnknown.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32* pCallbackMask) RequestedCallbackTypes;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IUnknown* pEvent) BeforeDispatchEvent;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IUnknown* pEvent, uint32 propagationStatus) DispatchEventComplete;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IUnknown* pEvent, IScriptEventHandler* pCallback, DOM_EVENT_PHASE eStage, uint32 propagationStatus) BeforeInvokeDomCallback;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IUnknown* pEvent, IScriptEventHandler* pCallback, DOM_EVENT_PHASE eStage, uint32 propagationStatus) InvokeDomCallbackComplete;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, SCRIPT_TIMER_TYPE eCallbackType, uint32 callbackCookie, IDispatch* pDispHandler, uint64 ullHandlerCookie, BSTR functionName, uint32 line, uint32 column, uint32 cchLength, IUnknown* pDebugDocumentContext) BeforeInvokeCallback;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, SCRIPT_TIMER_TYPE eCallbackType, uint32 callbackCookie, IDispatch* pDispHandler, uint64 ullHandlerCookie, BSTR functionName, uint32 line, uint32 column, uint32 cchLength, IUnknown* pDebugDocumentContext) InvokeCallbackComplete;
	}


	public HRESULT RequestedCallbackTypes(uint32* pCallbackMask) mut => VT.[Friend]RequestedCallbackTypes(&this, pCallbackMask);

	public HRESULT BeforeDispatchEvent(IUnknown* pEvent) mut => VT.[Friend]BeforeDispatchEvent(&this, pEvent);

	public HRESULT DispatchEventComplete(IUnknown* pEvent, uint32 propagationStatus) mut => VT.[Friend]DispatchEventComplete(&this, pEvent, propagationStatus);

	public HRESULT BeforeInvokeDomCallback(IUnknown* pEvent, IScriptEventHandler* pCallback, DOM_EVENT_PHASE eStage, uint32 propagationStatus) mut => VT.[Friend]BeforeInvokeDomCallback(&this, pEvent, pCallback, eStage, propagationStatus);

	public HRESULT InvokeDomCallbackComplete(IUnknown* pEvent, IScriptEventHandler* pCallback, DOM_EVENT_PHASE eStage, uint32 propagationStatus) mut => VT.[Friend]InvokeDomCallbackComplete(&this, pEvent, pCallback, eStage, propagationStatus);

	public HRESULT BeforeInvokeCallback(SCRIPT_TIMER_TYPE eCallbackType, uint32 callbackCookie, IDispatch* pDispHandler, uint64 ullHandlerCookie, BSTR functionName, uint32 line, uint32 column, uint32 cchLength, IUnknown* pDebugDocumentContext) mut => VT.[Friend]BeforeInvokeCallback(&this, eCallbackType, callbackCookie, pDispHandler, ullHandlerCookie, functionName, line, column, cchLength, pDebugDocumentContext);

	public HRESULT InvokeCallbackComplete(SCRIPT_TIMER_TYPE eCallbackType, uint32 callbackCookie, IDispatch* pDispHandler, uint64 ullHandlerCookie, BSTR functionName, uint32 line, uint32 column, uint32 cchLength, IUnknown* pDebugDocumentContext) mut => VT.[Friend]InvokeCallbackComplete(&this, eCallbackType, callbackCookie, pDispHandler, ullHandlerCookie, functionName, line, column, cchLength, pDebugDocumentContext);
}

[CRepr]struct IScriptEventHandlerSourceInfo : IUnknown
{
	public new const Guid IID = .(0x30510841, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IUnknown.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* pbstrFunctionName, uint32* line, uint32* column, uint32* cchLength) GetSourceInfo;
	}


	public HRESULT GetSourceInfo(BSTR* pbstrFunctionName, uint32* line, uint32* column, uint32* cchLength) mut => VT.[Friend]GetSourceInfo(&this, pbstrFunctionName, line, column, cchLength);
}

[CRepr]struct IDOMEventRegistrationCallback : IUnknown
{
	public new const Guid IID = .(0x3051083b, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IUnknown.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, PWSTR pszEventType, IScriptEventHandler* pHandler) OnDOMEventListenerAdded;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint64 ullCookie) OnDOMEventListenerRemoved;
	}


	public HRESULT OnDOMEventListenerAdded(PWSTR pszEventType, IScriptEventHandler* pHandler) mut => VT.[Friend]OnDOMEventListenerAdded(&this, pszEventType, pHandler);

	public HRESULT OnDOMEventListenerRemoved(uint64 ullCookie) mut => VT.[Friend]OnDOMEventListenerRemoved(&this, ullCookie);
}

[CRepr]struct IEventTarget2 : IUnknown
{
	public new const Guid IID = .(0x30510839, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IUnknown.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, SAFEARRAY** ppEventTypeArray) GetRegisteredEventTypes;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, PWSTR pszEventType, SAFEARRAY** ppEventHandlerArray) GetListenersForType;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IDOMEventRegistrationCallback* pCallback) RegisterForDOMEventListeners;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IDOMEventRegistrationCallback* pCallback) UnregisterForDOMEventListeners;
	}


	public HRESULT GetRegisteredEventTypes(SAFEARRAY** ppEventTypeArray) mut => VT.[Friend]GetRegisteredEventTypes(&this, ppEventTypeArray);

	public HRESULT GetListenersForType(PWSTR pszEventType, SAFEARRAY** ppEventHandlerArray) mut => VT.[Friend]GetListenersForType(&this, pszEventType, ppEventHandlerArray);

	public HRESULT RegisterForDOMEventListeners(IDOMEventRegistrationCallback* pCallback) mut => VT.[Friend]RegisterForDOMEventListeners(&this, pCallback);

	public HRESULT UnregisterForDOMEventListeners(IDOMEventRegistrationCallback* pCallback) mut => VT.[Friend]UnregisterForDOMEventListeners(&this, pCallback);
}

[CRepr]struct HTMLNamespaceEvents : IDispatch
{
	public new const Guid IID = .(0x3050f6bd, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
	}

}

[CRepr]struct IHTMLNamespace : IDispatch
{
	public new const Guid IID = .(0x3050f6bb, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_name;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_urn;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IDispatch** p) get_tagNames;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_readyState;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_onreadystatechange;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_onreadystatechange;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR bstrImplementationUrl) doImport;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR event, IDispatch* pDisp, int16* pfResult) attachEvent;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR event, IDispatch* pDisp) detachEvent;
	}


	public HRESULT get_name(BSTR* p) mut => VT.[Friend]get_name(&this, p);

	public HRESULT get_urn(BSTR* p) mut => VT.[Friend]get_urn(&this, p);

	public HRESULT get_tagNames(IDispatch** p) mut => VT.[Friend]get_tagNames(&this, p);

	public HRESULT get_readyState(VARIANT* p) mut => VT.[Friend]get_readyState(&this, p);

	public HRESULT put_onreadystatechange(VARIANT v) mut => VT.[Friend]put_onreadystatechange(&this, v);

	public HRESULT get_onreadystatechange(VARIANT* p) mut => VT.[Friend]get_onreadystatechange(&this, p);

	public HRESULT doImport(BSTR bstrImplementationUrl) mut => VT.[Friend]doImport(&this, bstrImplementationUrl);

	public HRESULT attachEvent(BSTR event, IDispatch* pDisp, int16* pfResult) mut => VT.[Friend]attachEvent(&this, event, pDisp, pfResult);

	public HRESULT detachEvent(BSTR event, IDispatch* pDisp) mut => VT.[Friend]detachEvent(&this, event, pDisp);
}

[CRepr]struct IHTMLNamespaceCollection : IDispatch
{
	public new const Guid IID = .(0x3050f6b8, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* p) get_length;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT index, IDispatch** ppNamespace) item;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR bstrNamespace, BSTR bstrUrn, VARIANT implementationUrl, IDispatch** ppNamespace) add;
	}


	public HRESULT get_length(int32* p) mut => VT.[Friend]get_length(&this, p);

	public HRESULT item(VARIANT index, IDispatch** ppNamespace) mut => VT.[Friend]item(&this, index, ppNamespace);

	public HRESULT add(BSTR bstrNamespace, BSTR bstrUrn, VARIANT implementationUrl, IDispatch** ppNamespace) mut => VT.[Friend]add(&this, bstrNamespace, bstrUrn, implementationUrl, ppNamespace);
}

[CRepr]struct DispHTMLNamespace : IDispatch
{
	public new const Guid IID = .(0x3050f54f, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
	}

}

[CRepr]struct DispHTMLNamespaceCollection : IDispatch
{
	public new const Guid IID = .(0x3050f550, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
	}

}

[CRepr]struct IHTMLPainter : IUnknown
{
	public new const Guid IID = .(0x3050f6a6, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IUnknown.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, RECT rcBounds, RECT rcUpdate, int32 lDrawFlags, HDC hdc, void* pvDrawObject) Draw;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, SIZE size) OnResize;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, HTML_PAINTER_INFO* pInfo) GetPainterInfo;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, POINT pt, BOOL* pbHit, int32* plPartID) HitTestPoint;
	}


	public HRESULT Draw(RECT rcBounds, RECT rcUpdate, int32 lDrawFlags, HDC hdc, void* pvDrawObject) mut => VT.[Friend]Draw(&this, rcBounds, rcUpdate, lDrawFlags, hdc, pvDrawObject);

	public HRESULT OnResize(SIZE size) mut => VT.[Friend]OnResize(&this, size);

	public HRESULT GetPainterInfo(HTML_PAINTER_INFO* pInfo) mut => VT.[Friend]GetPainterInfo(&this, pInfo);

	public HRESULT HitTestPoint(POINT pt, BOOL* pbHit, int32* plPartID) mut => VT.[Friend]HitTestPoint(&this, pt, pbHit, plPartID);
}

[CRepr]struct IHTMLPaintSite : IUnknown
{
	public new const Guid IID = .(0x3050f6a7, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IUnknown.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self) InvalidatePainterInfo;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, RECT* prcInvalid) InvalidateRect;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, HRGN rgnInvalid) InvalidateRegion;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 lFlags, HTML_PAINT_DRAW_INFO* pDrawInfo) GetDrawInfo;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, POINT ptGlobal, POINT* pptLocal) TransformGlobalToLocal;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, POINT ptLocal, POINT* pptGlobal) TransformLocalToGlobal;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* plCookie) GetHitTestCookie;
	}


	public HRESULT InvalidatePainterInfo() mut => VT.[Friend]InvalidatePainterInfo(&this);

	public HRESULT InvalidateRect(RECT* prcInvalid) mut => VT.[Friend]InvalidateRect(&this, prcInvalid);

	public HRESULT InvalidateRegion(HRGN rgnInvalid) mut => VT.[Friend]InvalidateRegion(&this, rgnInvalid);

	public HRESULT GetDrawInfo(int32 lFlags, HTML_PAINT_DRAW_INFO* pDrawInfo) mut => VT.[Friend]GetDrawInfo(&this, lFlags, pDrawInfo);

	public HRESULT TransformGlobalToLocal(POINT ptGlobal, POINT* pptLocal) mut => VT.[Friend]TransformGlobalToLocal(&this, ptGlobal, pptLocal);

	public HRESULT TransformLocalToGlobal(POINT ptLocal, POINT* pptGlobal) mut => VT.[Friend]TransformLocalToGlobal(&this, ptLocal, pptGlobal);

	public HRESULT GetHitTestCookie(int32* plCookie) mut => VT.[Friend]GetHitTestCookie(&this, plCookie);
}

[CRepr]struct IHTMLPainterEventInfo : IUnknown
{
	public new const Guid IID = .(0x3050f6df, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IUnknown.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* plEventInfoFlags) GetEventInfoFlags;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IHTMLElement** ppElement) GetEventTarget;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 lPartID) SetCursor;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 lPartID, BSTR* pbstrPart) StringFromPartID;
	}


	public HRESULT GetEventInfoFlags(int32* plEventInfoFlags) mut => VT.[Friend]GetEventInfoFlags(&this, plEventInfoFlags);

	public HRESULT GetEventTarget(IHTMLElement** ppElement) mut => VT.[Friend]GetEventTarget(&this, ppElement);

	public HRESULT SetCursor(int32 lPartID) mut => VT.[Friend]SetCursor(&this, lPartID);

	public HRESULT StringFromPartID(int32 lPartID, BSTR* pbstrPart) mut => VT.[Friend]StringFromPartID(&this, lPartID, pbstrPart);
}

[CRepr]struct IHTMLPainterOverlay : IUnknown
{
	public new const Guid IID = .(0x3050f7e3, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IUnknown.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, RECT rcDevice) OnMove;
	}


	public HRESULT OnMove(RECT rcDevice) mut => VT.[Friend]OnMove(&this, rcDevice);
}

[CRepr]struct IHTMLIPrintCollection : IDispatch
{
	public new const Guid IID = .(0x3050f6b5, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* p) get_length;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IUnknown** p) get__newEnum;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 index, IUnknown** ppIPrint) item;
	}


	public HRESULT get_length(int32* p) mut => VT.[Friend]get_length(&this, p);

	public HRESULT get__newEnum(IUnknown** p) mut => VT.[Friend]get__newEnum(&this, p);

	public HRESULT item(int32 index, IUnknown** ppIPrint) mut => VT.[Friend]item(&this, index, ppIPrint);
}

[CRepr]struct IEnumPrivacyRecords : IUnknown
{
	public new const Guid IID = .(0x3050f844, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IUnknown.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self) Reset;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32* pSize) GetSize;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BOOL* pState) GetPrivacyImpacted;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* pbstrUrl, BSTR* pbstrPolicyRef, int32* pdwReserved, uint32* pdwPrivacyFlags) Next;
	}


	public HRESULT Reset() mut => VT.[Friend]Reset(&this);

	public HRESULT GetSize(uint32* pSize) mut => VT.[Friend]GetSize(&this, pSize);

	public HRESULT GetPrivacyImpacted(BOOL* pState) mut => VT.[Friend]GetPrivacyImpacted(&this, pState);

	public HRESULT Next(BSTR* pbstrUrl, BSTR* pbstrPolicyRef, int32* pdwReserved, uint32* pdwPrivacyFlags) mut => VT.[Friend]Next(&this, pbstrUrl, pbstrPolicyRef, pdwReserved, pdwPrivacyFlags);
}

[CRepr]struct IWPCBlockedUrls : IUnknown
{
	public new const Guid IID = .(0x30510413, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IUnknown.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32* pdwCount) GetCount;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32 dwIdx, BSTR* pbstrUrl) GetUrl;
	}


	public HRESULT GetCount(uint32* pdwCount) mut => VT.[Friend]GetCount(&this, pdwCount);

	public HRESULT GetUrl(uint32 dwIdx, BSTR* pbstrUrl) mut => VT.[Friend]GetUrl(&this, dwIdx, pbstrUrl);
}

[CRepr]struct IHTMLDOMConstructorCollection : IDispatch
{
	public new const Guid IID = .(0x3051049c, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IDispatch** p) get_Attr;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IDispatch** p) get_BehaviorUrnsCollection;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IDispatch** p) get_BookmarkCollection;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IDispatch** p) get_CompatibleInfo;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IDispatch** p) get_CompatibleInfoCollection;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IDispatch** p) get_ControlRangeCollection;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IDispatch** p) get_CSSCurrentStyleDeclaration;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IDispatch** p) get_CSSRuleList;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IDispatch** p) get_CSSRuleStyleDeclaration;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IDispatch** p) get_CSSStyleDeclaration;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IDispatch** p) get_CSSStyleRule;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IDispatch** p) get_CSSStyleSheet;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IDispatch** p) get_DataTransfer;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IDispatch** p) get_DOMImplementation;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IDispatch** p) get_Element;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IDispatch** p) get_Event;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IDispatch** p) get_History;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IDispatch** p) get_HTCElementBehaviorDefaults;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IDispatch** p) get_HTMLAnchorElement;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IDispatch** p) get_HTMLAreaElement;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IDispatch** p) get_HTMLAreasCollection;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IDispatch** p) get_HTMLBaseElement;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IDispatch** p) get_HTMLBaseFontElement;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IDispatch** p) get_HTMLBGSoundElement;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IDispatch** p) get_HTMLBlockElement;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IDispatch** p) get_HTMLBodyElement;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IDispatch** p) get_HTMLBRElement;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IDispatch** p) get_HTMLButtonElement;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IDispatch** p) get_HTMLCollection;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IDispatch** p) get_HTMLCommentElement;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IDispatch** p) get_HTMLDDElement;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IDispatch** p) get_HTMLDivElement;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IDispatch** p) get_HTMLDocument;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IDispatch** p) get_HTMLDListElement;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IDispatch** p) get_HTMLDTElement;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IDispatch** p) get_HTMLEmbedElement;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IDispatch** p) get_HTMLFieldSetElement;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IDispatch** p) get_HTMLFontElement;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IDispatch** p) get_HTMLFormElement;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IDispatch** p) get_HTMLFrameElement;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IDispatch** p) get_HTMLFrameSetElement;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IDispatch** p) get_HTMLGenericElement;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IDispatch** p) get_HTMLHeadElement;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IDispatch** p) get_HTMLHeadingElement;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IDispatch** p) get_HTMLHRElement;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IDispatch** p) get_HTMLHtmlElement;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IDispatch** p) get_HTMLIFrameElement;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IDispatch** p) get_HTMLImageElement;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IDispatch** p) get_HTMLInputElement;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IDispatch** p) get_HTMLIsIndexElement;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IDispatch** p) get_HTMLLabelElement;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IDispatch** p) get_HTMLLegendElement;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IDispatch** p) get_HTMLLIElement;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IDispatch** p) get_HTMLLinkElement;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IDispatch** p) get_HTMLMapElement;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IDispatch** p) get_HTMLMarqueeElement;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IDispatch** p) get_HTMLMetaElement;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IDispatch** p) get_HTMLModelessDialog;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IDispatch** p) get_HTMLNamespaceInfo;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IDispatch** p) get_HTMLNamespaceInfoCollection;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IDispatch** p) get_HTMLNextIdElement;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IDispatch** p) get_HTMLNoShowElement;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IDispatch** p) get_HTMLObjectElement;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IDispatch** p) get_HTMLOListElement;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IDispatch** p) get_HTMLOptionElement;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IDispatch** p) get_HTMLParagraphElement;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IDispatch** p) get_HTMLParamElement;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IDispatch** p) get_HTMLPhraseElement;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IDispatch** p) get_HTMLPluginsCollection;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IDispatch** p) get_HTMLPopup;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IDispatch** p) get_HTMLScriptElement;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IDispatch** p) get_HTMLSelectElement;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IDispatch** p) get_HTMLSpanElement;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IDispatch** p) get_HTMLStyleElement;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IDispatch** p) get_HTMLTableCaptionElement;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IDispatch** p) get_HTMLTableCellElement;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IDispatch** p) get_HTMLTableColElement;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IDispatch** p) get_HTMLTableElement;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IDispatch** p) get_HTMLTableRowElement;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IDispatch** p) get_HTMLTableSectionElement;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IDispatch** p) get_HTMLTextAreaElement;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IDispatch** p) get_HTMLTextElement;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IDispatch** p) get_HTMLTitleElement;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IDispatch** p) get_HTMLUListElement;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IDispatch** p) get_HTMLUnknownElement;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IDispatch** p) get_Image;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IDispatch** p) get_Location;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IDispatch** p) get_NamedNodeMap;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IDispatch** p) get_Navigator;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IDispatch** p) get_NodeList;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IDispatch** p) get_Option;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IDispatch** p) get_Screen;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IDispatch** p) get_Selection;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IDispatch** p) get_StaticNodeList;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IDispatch** p) get_Storage;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IDispatch** p) get_StyleSheetList;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IDispatch** p) get_StyleSheetPage;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IDispatch** p) get_StyleSheetPageList;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IDispatch** p) get_Text;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IDispatch** p) get_TextRange;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IDispatch** p) get_TextRangeCollection;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IDispatch** p) get_TextRectangle;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IDispatch** p) get_TextRectangleList;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IDispatch** p) get_Window;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IDispatch** p) get_XDomainRequest;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IDispatch** p) get_XMLHttpRequest;
	}


	public HRESULT get_Attr(IDispatch** p) mut => VT.[Friend]get_Attr(&this, p);

	public HRESULT get_BehaviorUrnsCollection(IDispatch** p) mut => VT.[Friend]get_BehaviorUrnsCollection(&this, p);

	public HRESULT get_BookmarkCollection(IDispatch** p) mut => VT.[Friend]get_BookmarkCollection(&this, p);

	public HRESULT get_CompatibleInfo(IDispatch** p) mut => VT.[Friend]get_CompatibleInfo(&this, p);

	public HRESULT get_CompatibleInfoCollection(IDispatch** p) mut => VT.[Friend]get_CompatibleInfoCollection(&this, p);

	public HRESULT get_ControlRangeCollection(IDispatch** p) mut => VT.[Friend]get_ControlRangeCollection(&this, p);

	public HRESULT get_CSSCurrentStyleDeclaration(IDispatch** p) mut => VT.[Friend]get_CSSCurrentStyleDeclaration(&this, p);

	public HRESULT get_CSSRuleList(IDispatch** p) mut => VT.[Friend]get_CSSRuleList(&this, p);

	public HRESULT get_CSSRuleStyleDeclaration(IDispatch** p) mut => VT.[Friend]get_CSSRuleStyleDeclaration(&this, p);

	public HRESULT get_CSSStyleDeclaration(IDispatch** p) mut => VT.[Friend]get_CSSStyleDeclaration(&this, p);

	public HRESULT get_CSSStyleRule(IDispatch** p) mut => VT.[Friend]get_CSSStyleRule(&this, p);

	public HRESULT get_CSSStyleSheet(IDispatch** p) mut => VT.[Friend]get_CSSStyleSheet(&this, p);

	public HRESULT get_DataTransfer(IDispatch** p) mut => VT.[Friend]get_DataTransfer(&this, p);

	public HRESULT get_DOMImplementation(IDispatch** p) mut => VT.[Friend]get_DOMImplementation(&this, p);

	public HRESULT get_Element(IDispatch** p) mut => VT.[Friend]get_Element(&this, p);

	public HRESULT get_Event(IDispatch** p) mut => VT.[Friend]get_Event(&this, p);

	public HRESULT get_History(IDispatch** p) mut => VT.[Friend]get_History(&this, p);

	public HRESULT get_HTCElementBehaviorDefaults(IDispatch** p) mut => VT.[Friend]get_HTCElementBehaviorDefaults(&this, p);

	public HRESULT get_HTMLAnchorElement(IDispatch** p) mut => VT.[Friend]get_HTMLAnchorElement(&this, p);

	public HRESULT get_HTMLAreaElement(IDispatch** p) mut => VT.[Friend]get_HTMLAreaElement(&this, p);

	public HRESULT get_HTMLAreasCollection(IDispatch** p) mut => VT.[Friend]get_HTMLAreasCollection(&this, p);

	public HRESULT get_HTMLBaseElement(IDispatch** p) mut => VT.[Friend]get_HTMLBaseElement(&this, p);

	public HRESULT get_HTMLBaseFontElement(IDispatch** p) mut => VT.[Friend]get_HTMLBaseFontElement(&this, p);

	public HRESULT get_HTMLBGSoundElement(IDispatch** p) mut => VT.[Friend]get_HTMLBGSoundElement(&this, p);

	public HRESULT get_HTMLBlockElement(IDispatch** p) mut => VT.[Friend]get_HTMLBlockElement(&this, p);

	public HRESULT get_HTMLBodyElement(IDispatch** p) mut => VT.[Friend]get_HTMLBodyElement(&this, p);

	public HRESULT get_HTMLBRElement(IDispatch** p) mut => VT.[Friend]get_HTMLBRElement(&this, p);

	public HRESULT get_HTMLButtonElement(IDispatch** p) mut => VT.[Friend]get_HTMLButtonElement(&this, p);

	public HRESULT get_HTMLCollection(IDispatch** p) mut => VT.[Friend]get_HTMLCollection(&this, p);

	public HRESULT get_HTMLCommentElement(IDispatch** p) mut => VT.[Friend]get_HTMLCommentElement(&this, p);

	public HRESULT get_HTMLDDElement(IDispatch** p) mut => VT.[Friend]get_HTMLDDElement(&this, p);

	public HRESULT get_HTMLDivElement(IDispatch** p) mut => VT.[Friend]get_HTMLDivElement(&this, p);

	public HRESULT get_HTMLDocument(IDispatch** p) mut => VT.[Friend]get_HTMLDocument(&this, p);

	public HRESULT get_HTMLDListElement(IDispatch** p) mut => VT.[Friend]get_HTMLDListElement(&this, p);

	public HRESULT get_HTMLDTElement(IDispatch** p) mut => VT.[Friend]get_HTMLDTElement(&this, p);

	public HRESULT get_HTMLEmbedElement(IDispatch** p) mut => VT.[Friend]get_HTMLEmbedElement(&this, p);

	public HRESULT get_HTMLFieldSetElement(IDispatch** p) mut => VT.[Friend]get_HTMLFieldSetElement(&this, p);

	public HRESULT get_HTMLFontElement(IDispatch** p) mut => VT.[Friend]get_HTMLFontElement(&this, p);

	public HRESULT get_HTMLFormElement(IDispatch** p) mut => VT.[Friend]get_HTMLFormElement(&this, p);

	public HRESULT get_HTMLFrameElement(IDispatch** p) mut => VT.[Friend]get_HTMLFrameElement(&this, p);

	public HRESULT get_HTMLFrameSetElement(IDispatch** p) mut => VT.[Friend]get_HTMLFrameSetElement(&this, p);

	public HRESULT get_HTMLGenericElement(IDispatch** p) mut => VT.[Friend]get_HTMLGenericElement(&this, p);

	public HRESULT get_HTMLHeadElement(IDispatch** p) mut => VT.[Friend]get_HTMLHeadElement(&this, p);

	public HRESULT get_HTMLHeadingElement(IDispatch** p) mut => VT.[Friend]get_HTMLHeadingElement(&this, p);

	public HRESULT get_HTMLHRElement(IDispatch** p) mut => VT.[Friend]get_HTMLHRElement(&this, p);

	public HRESULT get_HTMLHtmlElement(IDispatch** p) mut => VT.[Friend]get_HTMLHtmlElement(&this, p);

	public HRESULT get_HTMLIFrameElement(IDispatch** p) mut => VT.[Friend]get_HTMLIFrameElement(&this, p);

	public HRESULT get_HTMLImageElement(IDispatch** p) mut => VT.[Friend]get_HTMLImageElement(&this, p);

	public HRESULT get_HTMLInputElement(IDispatch** p) mut => VT.[Friend]get_HTMLInputElement(&this, p);

	public HRESULT get_HTMLIsIndexElement(IDispatch** p) mut => VT.[Friend]get_HTMLIsIndexElement(&this, p);

	public HRESULT get_HTMLLabelElement(IDispatch** p) mut => VT.[Friend]get_HTMLLabelElement(&this, p);

	public HRESULT get_HTMLLegendElement(IDispatch** p) mut => VT.[Friend]get_HTMLLegendElement(&this, p);

	public HRESULT get_HTMLLIElement(IDispatch** p) mut => VT.[Friend]get_HTMLLIElement(&this, p);

	public HRESULT get_HTMLLinkElement(IDispatch** p) mut => VT.[Friend]get_HTMLLinkElement(&this, p);

	public HRESULT get_HTMLMapElement(IDispatch** p) mut => VT.[Friend]get_HTMLMapElement(&this, p);

	public HRESULT get_HTMLMarqueeElement(IDispatch** p) mut => VT.[Friend]get_HTMLMarqueeElement(&this, p);

	public HRESULT get_HTMLMetaElement(IDispatch** p) mut => VT.[Friend]get_HTMLMetaElement(&this, p);

	public HRESULT get_HTMLModelessDialog(IDispatch** p) mut => VT.[Friend]get_HTMLModelessDialog(&this, p);

	public HRESULT get_HTMLNamespaceInfo(IDispatch** p) mut => VT.[Friend]get_HTMLNamespaceInfo(&this, p);

	public HRESULT get_HTMLNamespaceInfoCollection(IDispatch** p) mut => VT.[Friend]get_HTMLNamespaceInfoCollection(&this, p);

	public HRESULT get_HTMLNextIdElement(IDispatch** p) mut => VT.[Friend]get_HTMLNextIdElement(&this, p);

	public HRESULT get_HTMLNoShowElement(IDispatch** p) mut => VT.[Friend]get_HTMLNoShowElement(&this, p);

	public HRESULT get_HTMLObjectElement(IDispatch** p) mut => VT.[Friend]get_HTMLObjectElement(&this, p);

	public HRESULT get_HTMLOListElement(IDispatch** p) mut => VT.[Friend]get_HTMLOListElement(&this, p);

	public HRESULT get_HTMLOptionElement(IDispatch** p) mut => VT.[Friend]get_HTMLOptionElement(&this, p);

	public HRESULT get_HTMLParagraphElement(IDispatch** p) mut => VT.[Friend]get_HTMLParagraphElement(&this, p);

	public HRESULT get_HTMLParamElement(IDispatch** p) mut => VT.[Friend]get_HTMLParamElement(&this, p);

	public HRESULT get_HTMLPhraseElement(IDispatch** p) mut => VT.[Friend]get_HTMLPhraseElement(&this, p);

	public HRESULT get_HTMLPluginsCollection(IDispatch** p) mut => VT.[Friend]get_HTMLPluginsCollection(&this, p);

	public HRESULT get_HTMLPopup(IDispatch** p) mut => VT.[Friend]get_HTMLPopup(&this, p);

	public HRESULT get_HTMLScriptElement(IDispatch** p) mut => VT.[Friend]get_HTMLScriptElement(&this, p);

	public HRESULT get_HTMLSelectElement(IDispatch** p) mut => VT.[Friend]get_HTMLSelectElement(&this, p);

	public HRESULT get_HTMLSpanElement(IDispatch** p) mut => VT.[Friend]get_HTMLSpanElement(&this, p);

	public HRESULT get_HTMLStyleElement(IDispatch** p) mut => VT.[Friend]get_HTMLStyleElement(&this, p);

	public HRESULT get_HTMLTableCaptionElement(IDispatch** p) mut => VT.[Friend]get_HTMLTableCaptionElement(&this, p);

	public HRESULT get_HTMLTableCellElement(IDispatch** p) mut => VT.[Friend]get_HTMLTableCellElement(&this, p);

	public HRESULT get_HTMLTableColElement(IDispatch** p) mut => VT.[Friend]get_HTMLTableColElement(&this, p);

	public HRESULT get_HTMLTableElement(IDispatch** p) mut => VT.[Friend]get_HTMLTableElement(&this, p);

	public HRESULT get_HTMLTableRowElement(IDispatch** p) mut => VT.[Friend]get_HTMLTableRowElement(&this, p);

	public HRESULT get_HTMLTableSectionElement(IDispatch** p) mut => VT.[Friend]get_HTMLTableSectionElement(&this, p);

	public HRESULT get_HTMLTextAreaElement(IDispatch** p) mut => VT.[Friend]get_HTMLTextAreaElement(&this, p);

	public HRESULT get_HTMLTextElement(IDispatch** p) mut => VT.[Friend]get_HTMLTextElement(&this, p);

	public HRESULT get_HTMLTitleElement(IDispatch** p) mut => VT.[Friend]get_HTMLTitleElement(&this, p);

	public HRESULT get_HTMLUListElement(IDispatch** p) mut => VT.[Friend]get_HTMLUListElement(&this, p);

	public HRESULT get_HTMLUnknownElement(IDispatch** p) mut => VT.[Friend]get_HTMLUnknownElement(&this, p);

	public HRESULT get_Image(IDispatch** p) mut => VT.[Friend]get_Image(&this, p);

	public HRESULT get_Location(IDispatch** p) mut => VT.[Friend]get_Location(&this, p);

	public HRESULT get_NamedNodeMap(IDispatch** p) mut => VT.[Friend]get_NamedNodeMap(&this, p);

	public HRESULT get_Navigator(IDispatch** p) mut => VT.[Friend]get_Navigator(&this, p);

	public HRESULT get_NodeList(IDispatch** p) mut => VT.[Friend]get_NodeList(&this, p);

	public HRESULT get_Option(IDispatch** p) mut => VT.[Friend]get_Option(&this, p);

	public HRESULT get_Screen(IDispatch** p) mut => VT.[Friend]get_Screen(&this, p);

	public HRESULT get_Selection(IDispatch** p) mut => VT.[Friend]get_Selection(&this, p);

	public HRESULT get_StaticNodeList(IDispatch** p) mut => VT.[Friend]get_StaticNodeList(&this, p);

	public HRESULT get_Storage(IDispatch** p) mut => VT.[Friend]get_Storage(&this, p);

	public HRESULT get_StyleSheetList(IDispatch** p) mut => VT.[Friend]get_StyleSheetList(&this, p);

	public HRESULT get_StyleSheetPage(IDispatch** p) mut => VT.[Friend]get_StyleSheetPage(&this, p);

	public HRESULT get_StyleSheetPageList(IDispatch** p) mut => VT.[Friend]get_StyleSheetPageList(&this, p);

	public HRESULT get_Text(IDispatch** p) mut => VT.[Friend]get_Text(&this, p);

	public HRESULT get_TextRange(IDispatch** p) mut => VT.[Friend]get_TextRange(&this, p);

	public HRESULT get_TextRangeCollection(IDispatch** p) mut => VT.[Friend]get_TextRangeCollection(&this, p);

	public HRESULT get_TextRectangle(IDispatch** p) mut => VT.[Friend]get_TextRectangle(&this, p);

	public HRESULT get_TextRectangleList(IDispatch** p) mut => VT.[Friend]get_TextRectangleList(&this, p);

	public HRESULT get_Window(IDispatch** p) mut => VT.[Friend]get_Window(&this, p);

	public HRESULT get_XDomainRequest(IDispatch** p) mut => VT.[Friend]get_XDomainRequest(&this, p);

	public HRESULT get_XMLHttpRequest(IDispatch** p) mut => VT.[Friend]get_XMLHttpRequest(&this, p);
}

[CRepr]struct IHTMLDialog : IDispatch
{
	public new const Guid IID = .(0x3050f216, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_dialogTop;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_dialogTop;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_dialogLeft;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_dialogLeft;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_dialogWidth;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_dialogWidth;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_dialogHeight;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_dialogHeight;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_dialogArguments;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_menuArguments;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT v) put_returnValue;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_returnValue;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self) close;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* String) toString;
	}


	public HRESULT put_dialogTop(VARIANT v) mut => VT.[Friend]put_dialogTop(&this, v);

	public HRESULT get_dialogTop(VARIANT* p) mut => VT.[Friend]get_dialogTop(&this, p);

	public HRESULT put_dialogLeft(VARIANT v) mut => VT.[Friend]put_dialogLeft(&this, v);

	public HRESULT get_dialogLeft(VARIANT* p) mut => VT.[Friend]get_dialogLeft(&this, p);

	public HRESULT put_dialogWidth(VARIANT v) mut => VT.[Friend]put_dialogWidth(&this, v);

	public HRESULT get_dialogWidth(VARIANT* p) mut => VT.[Friend]get_dialogWidth(&this, p);

	public HRESULT put_dialogHeight(VARIANT v) mut => VT.[Friend]put_dialogHeight(&this, v);

	public HRESULT get_dialogHeight(VARIANT* p) mut => VT.[Friend]get_dialogHeight(&this, p);

	public HRESULT get_dialogArguments(VARIANT* p) mut => VT.[Friend]get_dialogArguments(&this, p);

	public HRESULT get_menuArguments(VARIANT* p) mut => VT.[Friend]get_menuArguments(&this, p);

	public HRESULT put_returnValue(VARIANT v) mut => VT.[Friend]put_returnValue(&this, v);

	public HRESULT get_returnValue(VARIANT* p) mut => VT.[Friend]get_returnValue(&this, p);

	public HRESULT close() mut => VT.[Friend]close(&this);

	public HRESULT toString(BSTR* String) mut => VT.[Friend]toString(&this, String);
}

[CRepr]struct IHTMLDialog2 : IDispatch
{
	public new const Guid IID = .(0x3050f5e0, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_status;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_status;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_resizable;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_resizable;
	}


	public HRESULT put_status(BSTR v) mut => VT.[Friend]put_status(&this, v);

	public HRESULT get_status(BSTR* p) mut => VT.[Friend]get_status(&this, p);

	public HRESULT put_resizable(BSTR v) mut => VT.[Friend]put_resizable(&this, v);

	public HRESULT get_resizable(BSTR* p) mut => VT.[Friend]get_resizable(&this, p);
}

[CRepr]struct IHTMLDialog3 : IDispatch
{
	public new const Guid IID = .(0x3050f388, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_unadorned;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_unadorned;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_dialogHide;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_dialogHide;
	}


	public HRESULT put_unadorned(BSTR v) mut => VT.[Friend]put_unadorned(&this, v);

	public HRESULT get_unadorned(BSTR* p) mut => VT.[Friend]get_unadorned(&this, p);

	public HRESULT put_dialogHide(BSTR v) mut => VT.[Friend]put_dialogHide(&this, v);

	public HRESULT get_dialogHide(BSTR* p) mut => VT.[Friend]get_dialogHide(&this, p);
}

[CRepr]struct IHTMLModelessInit : IDispatch
{
	public new const Guid IID = .(0x3050f5e4, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_parameters;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* p) get_optionString;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IUnknown** p) get_moniker;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IUnknown** p) get_document;
	}


	public HRESULT get_parameters(VARIANT* p) mut => VT.[Friend]get_parameters(&this, p);

	public HRESULT get_optionString(VARIANT* p) mut => VT.[Friend]get_optionString(&this, p);

	public HRESULT get_moniker(IUnknown** p) mut => VT.[Friend]get_moniker(&this, p);

	public HRESULT get_document(IUnknown** p) mut => VT.[Friend]get_document(&this, p);
}

[CRepr]struct IHTMLPopup : IDispatch
{
	public new const Guid IID = .(0x3050f666, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 x, int32 y, int32 w, int32 h, VARIANT* pElement) show;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self) hide;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IHTMLDocument** p) get_document;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16* p) get_isOpen;
	}


	public HRESULT show(int32 x, int32 y, int32 w, int32 h, VARIANT* pElement) mut => VT.[Friend]show(&this, x, y, w, h, pElement);

	public HRESULT hide() mut => VT.[Friend]hide(&this);

	public HRESULT get_document(IHTMLDocument** p) mut => VT.[Friend]get_document(&this, p);

	public HRESULT get_isOpen(int16* p) mut => VT.[Friend]get_isOpen(&this, p);
}

[CRepr]struct DispHTMLPopup : IDispatch
{
	public new const Guid IID = .(0x3050f589, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
	}

}

[CRepr]struct IHTMLAppBehavior : IDispatch
{
	public new const Guid IID = .(0x3050f5ca, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_applicationName;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_applicationName;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_version;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_version;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_icon;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_icon;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_singleInstance;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_singleInstance;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_minimizeButton;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_minimizeButton;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_maximizeButton;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_maximizeButton;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_border;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_border;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_borderStyle;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_borderStyle;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_sysMenu;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_sysMenu;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_caption;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_caption;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_windowState;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_windowState;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_showInTaskBar;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_showInTaskBar;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_commandLine;
	}


	public HRESULT put_applicationName(BSTR v) mut => VT.[Friend]put_applicationName(&this, v);

	public HRESULT get_applicationName(BSTR* p) mut => VT.[Friend]get_applicationName(&this, p);

	public HRESULT put_version(BSTR v) mut => VT.[Friend]put_version(&this, v);

	public HRESULT get_version(BSTR* p) mut => VT.[Friend]get_version(&this, p);

	public HRESULT put_icon(BSTR v) mut => VT.[Friend]put_icon(&this, v);

	public HRESULT get_icon(BSTR* p) mut => VT.[Friend]get_icon(&this, p);

	public HRESULT put_singleInstance(BSTR v) mut => VT.[Friend]put_singleInstance(&this, v);

	public HRESULT get_singleInstance(BSTR* p) mut => VT.[Friend]get_singleInstance(&this, p);

	public HRESULT put_minimizeButton(BSTR v) mut => VT.[Friend]put_minimizeButton(&this, v);

	public HRESULT get_minimizeButton(BSTR* p) mut => VT.[Friend]get_minimizeButton(&this, p);

	public HRESULT put_maximizeButton(BSTR v) mut => VT.[Friend]put_maximizeButton(&this, v);

	public HRESULT get_maximizeButton(BSTR* p) mut => VT.[Friend]get_maximizeButton(&this, p);

	public HRESULT put_border(BSTR v) mut => VT.[Friend]put_border(&this, v);

	public HRESULT get_border(BSTR* p) mut => VT.[Friend]get_border(&this, p);

	public HRESULT put_borderStyle(BSTR v) mut => VT.[Friend]put_borderStyle(&this, v);

	public HRESULT get_borderStyle(BSTR* p) mut => VT.[Friend]get_borderStyle(&this, p);

	public HRESULT put_sysMenu(BSTR v) mut => VT.[Friend]put_sysMenu(&this, v);

	public HRESULT get_sysMenu(BSTR* p) mut => VT.[Friend]get_sysMenu(&this, p);

	public HRESULT put_caption(BSTR v) mut => VT.[Friend]put_caption(&this, v);

	public HRESULT get_caption(BSTR* p) mut => VT.[Friend]get_caption(&this, p);

	public HRESULT put_windowState(BSTR v) mut => VT.[Friend]put_windowState(&this, v);

	public HRESULT get_windowState(BSTR* p) mut => VT.[Friend]get_windowState(&this, p);

	public HRESULT put_showInTaskBar(BSTR v) mut => VT.[Friend]put_showInTaskBar(&this, v);

	public HRESULT get_showInTaskBar(BSTR* p) mut => VT.[Friend]get_showInTaskBar(&this, p);

	public HRESULT get_commandLine(BSTR* p) mut => VT.[Friend]get_commandLine(&this, p);
}

[CRepr]struct IHTMLAppBehavior2 : IDispatch
{
	public new const Guid IID = .(0x3050f5c9, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_contextMenu;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_contextMenu;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_innerBorder;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_innerBorder;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_scroll;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_scroll;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_scrollFlat;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_scrollFlat;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_selection;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_selection;
	}


	public HRESULT put_contextMenu(BSTR v) mut => VT.[Friend]put_contextMenu(&this, v);

	public HRESULT get_contextMenu(BSTR* p) mut => VT.[Friend]get_contextMenu(&this, p);

	public HRESULT put_innerBorder(BSTR v) mut => VT.[Friend]put_innerBorder(&this, v);

	public HRESULT get_innerBorder(BSTR* p) mut => VT.[Friend]get_innerBorder(&this, p);

	public HRESULT put_scroll(BSTR v) mut => VT.[Friend]put_scroll(&this, v);

	public HRESULT get_scroll(BSTR* p) mut => VT.[Friend]get_scroll(&this, p);

	public HRESULT put_scrollFlat(BSTR v) mut => VT.[Friend]put_scrollFlat(&this, v);

	public HRESULT get_scrollFlat(BSTR* p) mut => VT.[Friend]get_scrollFlat(&this, p);

	public HRESULT put_selection(BSTR v) mut => VT.[Friend]put_selection(&this, v);

	public HRESULT get_selection(BSTR* p) mut => VT.[Friend]get_selection(&this, p);
}

[CRepr]struct IHTMLAppBehavior3 : IDispatch
{
	public new const Guid IID = .(0x3050f5cd, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_navigable;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_navigable;
	}


	public HRESULT put_navigable(BSTR v) mut => VT.[Friend]put_navigable(&this, v);

	public HRESULT get_navigable(BSTR* p) mut => VT.[Friend]get_navigable(&this, p);
}

[CRepr]struct DispHTMLAppBehavior : IDispatch
{
	public new const Guid IID = .(0x3050f57c, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
	}

}

[CRepr]struct DispIHTMLInputButtonElement : IDispatch
{
	public new const Guid IID = .(0x3050f51e, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
	}

}

[CRepr]struct DispIHTMLInputTextElement : IDispatch
{
	public new const Guid IID = .(0x3050f520, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
	}

}

[CRepr]struct DispIHTMLInputFileElement : IDispatch
{
	public new const Guid IID = .(0x3050f542, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
	}

}

[CRepr]struct DispIHTMLOptionButtonElement : IDispatch
{
	public new const Guid IID = .(0x3050f509, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
	}

}

[CRepr]struct DispIHTMLInputImage : IDispatch
{
	public new const Guid IID = .(0x3050f51d, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
	}

}

[CRepr]struct IElementNamespace : IUnknown
{
	public new const Guid IID = .(0x3050f671, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IUnknown.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR bstrTagName, int32 lFlags) AddTag;
	}


	public HRESULT AddTag(BSTR bstrTagName, int32 lFlags) mut => VT.[Friend]AddTag(&this, bstrTagName, lFlags);
}

[CRepr]struct IElementNamespaceTable : IUnknown
{
	public new const Guid IID = .(0x3050f670, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IUnknown.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR bstrNamespace, BSTR bstrUrn, int32 lFlags, VARIANT* pvarFactory) AddNamespace;
	}


	public HRESULT AddNamespace(BSTR bstrNamespace, BSTR bstrUrn, int32 lFlags, VARIANT* pvarFactory) mut => VT.[Friend]AddNamespace(&this, bstrNamespace, bstrUrn, lFlags, pvarFactory);
}

[CRepr]struct IElementNamespaceFactory : IUnknown
{
	public new const Guid IID = .(0x3050f672, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IUnknown.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IElementNamespace* pNamespace) Create;
	}


	public HRESULT Create(IElementNamespace* pNamespace) mut => VT.[Friend]Create(&this, pNamespace);
}

[CRepr]struct IElementNamespaceFactory2 : IElementNamespaceFactory
{
	public new const Guid IID = .(0x3050f805, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IElementNamespaceFactory.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IElementNamespace* pNamespace, BSTR bstrImplementation) CreateWithImplementation;
	}


	public HRESULT CreateWithImplementation(IElementNamespace* pNamespace, BSTR bstrImplementation) mut => VT.[Friend]CreateWithImplementation(&this, pNamespace, bstrImplementation);
}

[CRepr]struct IElementNamespaceFactoryCallback : IUnknown
{
	public new const Guid IID = .(0x3050f7fd, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IUnknown.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR bstrNamespace, BSTR bstrTagName, BSTR bstrAttrs, IElementNamespace* pNamespace) Resolve;
	}


	public HRESULT Resolve(BSTR bstrNamespace, BSTR bstrTagName, BSTR bstrAttrs, IElementNamespace* pNamespace) mut => VT.[Friend]Resolve(&this, bstrNamespace, bstrTagName, bstrAttrs, pNamespace);
}

[CRepr]struct IElementBehaviorSiteOM2 : IElementBehaviorSiteOM
{
	public new const Guid IID = .(0x3050f659, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IElementBehaviorSiteOM.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IHTMLElementDefaults** ppDefaults) GetDefaults;
	}


	public HRESULT GetDefaults(IHTMLElementDefaults** ppDefaults) mut => VT.[Friend]GetDefaults(&this, ppDefaults);
}

[CRepr]struct IElementBehaviorCategory : IUnknown
{
	public new const Guid IID = .(0x3050f4ed, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IUnknown.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, PWSTR* ppchCategory) GetCategory;
	}


	public HRESULT GetCategory(PWSTR* ppchCategory) mut => VT.[Friend]GetCategory(&this, ppchCategory);
}

[CRepr]struct IElementBehaviorSiteCategory : IUnknown
{
	public new const Guid IID = .(0x3050f4ee, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IUnknown.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 lDirection, PWSTR pchCategory, IEnumUnknown** ppEnumerator) GetRelatedBehaviors;
	}


	public HRESULT GetRelatedBehaviors(int32 lDirection, PWSTR pchCategory, IEnumUnknown** ppEnumerator) mut => VT.[Friend]GetRelatedBehaviors(&this, lDirection, pchCategory, ppEnumerator);
}

[CRepr]struct IElementBehaviorSubmit : IUnknown
{
	public new const Guid IID = .(0x3050f646, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IUnknown.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IHTMLSubmitData* pSubmitData) GetSubmitInfo;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self) Reset;
	}


	public HRESULT GetSubmitInfo(IHTMLSubmitData* pSubmitData) mut => VT.[Friend]GetSubmitInfo(&this, pSubmitData);

	public HRESULT Reset() mut => VT.[Friend]Reset(&this);
}

[CRepr]struct IElementBehaviorFocus : IUnknown
{
	public new const Guid IID = .(0x3050f6b6, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IUnknown.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, RECT* pRect) GetFocusRect;
	}


	public HRESULT GetFocusRect(RECT* pRect) mut => VT.[Friend]GetFocusRect(&this, pRect);
}

[CRepr]struct IElementBehaviorLayout : IUnknown
{
	public new const Guid IID = .(0x3050f6ba, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IUnknown.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 dwFlags, SIZE sizeContent, POINT* pptTranslateBy, POINT* pptTopLeft, SIZE* psizeProposed) GetSize;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* plLayoutInfo) GetLayoutInfo;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 lFlags, POINT* pptTopLeft) GetPosition;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, SIZE* psizeIn, RECT* prcOut) MapSize;
	}


	public HRESULT GetSize(int32 dwFlags, SIZE sizeContent, POINT* pptTranslateBy, POINT* pptTopLeft, SIZE* psizeProposed) mut => VT.[Friend]GetSize(&this, dwFlags, sizeContent, pptTranslateBy, pptTopLeft, psizeProposed);

	public HRESULT GetLayoutInfo(int32* plLayoutInfo) mut => VT.[Friend]GetLayoutInfo(&this, plLayoutInfo);

	public HRESULT GetPosition(int32 lFlags, POINT* pptTopLeft) mut => VT.[Friend]GetPosition(&this, lFlags, pptTopLeft);

	public HRESULT MapSize(SIZE* psizeIn, RECT* prcOut) mut => VT.[Friend]MapSize(&this, psizeIn, prcOut);
}

[CRepr]struct IElementBehaviorLayout2 : IUnknown
{
	public new const Guid IID = .(0x3050f846, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IUnknown.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32* plDescent) GetTextDescent;
	}


	public HRESULT GetTextDescent(int32* plDescent) mut => VT.[Friend]GetTextDescent(&this, plDescent);
}

[CRepr]struct IElementBehaviorSiteLayout : IUnknown
{
	public new const Guid IID = .(0x3050f6b7, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IUnknown.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self) InvalidateLayoutInfo;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self) InvalidateSize;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, SIZE* psizeResolution) GetMediaResolution;
	}


	public HRESULT InvalidateLayoutInfo() mut => VT.[Friend]InvalidateLayoutInfo(&this);

	public HRESULT InvalidateSize() mut => VT.[Friend]InvalidateSize(&this);

	public HRESULT GetMediaResolution(SIZE* psizeResolution) mut => VT.[Friend]GetMediaResolution(&this, psizeResolution);
}

[CRepr]struct IElementBehaviorSiteLayout2 : IUnknown
{
	public new const Guid IID = .(0x3050f847, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IUnknown.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, LOGFONTW* plf) GetFontInfo;
	}


	public HRESULT GetFontInfo(LOGFONTW* plf) mut => VT.[Friend]GetFontInfo(&this, plf);
}

[CRepr]struct IHostBehaviorInit : IUnknown
{
	public new const Guid IID = .(0x3050f842, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IUnknown.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self) PopulateNamespaceTable;
	}


	public HRESULT PopulateNamespaceTable() mut => VT.[Friend]PopulateNamespaceTable(&this);
}

[CRepr]struct ISurfacePresenter : IUnknown
{
	public new const Guid IID = .(0x305106e2, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IUnknown.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32 uBuffer, RECT* pDirty) Present;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32 backBufferIndex, in Guid riid, void** ppBuffer) GetBuffer;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BOOL* pIsCurrent) IsCurrent;
	}


	public HRESULT Present(uint32 uBuffer, RECT* pDirty) mut => VT.[Friend]Present(&this, uBuffer, pDirty);

	public HRESULT GetBuffer(uint32 backBufferIndex, in Guid riid, void** ppBuffer) mut => VT.[Friend]GetBuffer(&this, backBufferIndex, riid, ppBuffer);

	public HRESULT IsCurrent(BOOL* pIsCurrent) mut => VT.[Friend]IsCurrent(&this, pIsCurrent);
}

[CRepr]struct IViewObjectPresentSite : IUnknown
{
	public new const Guid IID = .(0x305106e1, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IUnknown.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IUnknown* pDevice, uint32 width, uint32 height, uint32 backBufferCount, DXGI_FORMAT format, VIEW_OBJECT_ALPHA_MODE mode, ISurfacePresenter** ppQueue) CreateSurfacePresenter;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BOOL* pIsHardwareComposition) IsHardwareComposition;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VIEW_OBJECT_COMPOSITION_MODE mode) SetCompositionMode;
	}


	public HRESULT CreateSurfacePresenter(IUnknown* pDevice, uint32 width, uint32 height, uint32 backBufferCount, DXGI_FORMAT format, VIEW_OBJECT_ALPHA_MODE mode, ISurfacePresenter** ppQueue) mut => VT.[Friend]CreateSurfacePresenter(&this, pDevice, width, height, backBufferCount, format, mode, ppQueue);

	public HRESULT IsHardwareComposition(BOOL* pIsHardwareComposition) mut => VT.[Friend]IsHardwareComposition(&this, pIsHardwareComposition);

	public HRESULT SetCompositionMode(VIEW_OBJECT_COMPOSITION_MODE mode) mut => VT.[Friend]SetCompositionMode(&this, mode);
}

[CRepr]struct ICanvasPixelArrayData : IUnknown
{
	public new const Guid IID = .(0x305107f9, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IUnknown.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint8** ppBuffer, uint32* pBufferLength) GetBufferPointer;
	}


	public HRESULT GetBufferPointer(uint8** ppBuffer, uint32* pBufferLength) mut => VT.[Friend]GetBufferPointer(&this, ppBuffer, pBufferLength);
}

[CRepr]struct IViewObjectPrint : IUnknown
{
	public new const Guid IID = .(0x305106e3, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IUnknown.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IUnknown** ppPrintBitmap) GetPrintBitmap;
	}


	public HRESULT GetPrintBitmap(IUnknown** ppPrintBitmap) mut => VT.[Friend]GetPrintBitmap(&this, ppPrintBitmap);
}

[CRepr]struct IViewObjectPresentNotifySite : IViewObjectPresentSite
{
	public new const Guid IID = .(0x305107fa, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IViewObjectPresentSite.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self) RequestFrame;
	}


	public HRESULT RequestFrame() mut => VT.[Friend]RequestFrame(&this);
}

[CRepr]struct IViewObjectPresentNotify : IUnknown
{
	public new const Guid IID = .(0x305107f8, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IUnknown.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self) OnPreRender;
	}


	public HRESULT OnPreRender() mut => VT.[Friend]OnPreRender(&this);
}

[CRepr]struct ITrackingProtection : IUnknown
{
	public new const Guid IID = .(0x30510803, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IUnknown.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR bstrUrl, BOOL* pfAllowed) EvaluateUrl;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BOOL* pfEnabled) GetEnabled;
	}


	public HRESULT EvaluateUrl(BSTR bstrUrl, BOOL* pfAllowed) mut => VT.[Friend]EvaluateUrl(&this, bstrUrl, pfAllowed);

	public HRESULT GetEnabled(BOOL* pfEnabled) mut => VT.[Friend]GetEnabled(&this, pfEnabled);
}

[CRepr]struct IBFCacheable : IUnknown
{
	public new const Guid IID = .(0x30510861, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IUnknown.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self) EnterBFCache;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self) ExitBFCache;
	}


	public HRESULT EnterBFCache() mut => VT.[Friend]EnterBFCache(&this);

	public HRESULT ExitBFCache() mut => VT.[Friend]ExitBFCache(&this);
}

[CRepr]struct IDocObjectService : IUnknown
{
	public new const Guid IID = .(0x3050f801, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IUnknown.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IDispatch* pDispatch, PWSTR lpszUrl, uint32 dwFlags, PWSTR lpszFrameName, uint8* pPostData, uint32 cbPostData, PWSTR lpszHeaders, BOOL fPlayNavSound, BOOL* pfCancel) FireBeforeNavigate2;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IHTMLWindow2* pHTMLWindow2, uint32 dwFlags) FireNavigateComplete2;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self) FireDownloadBegin;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self) FireDownloadComplete;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IHTMLWindow2* pHTMLWindow, uint32 dwFlags) FireDocumentComplete;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IHTMLWindow2* pHTMLWindow) UpdateDesktopComponent;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* pbstrPendingUrl) GetPendingUrl;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IHTMLElement* pHTMLElement) ActiveElementChanged;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* pbstrSearch) GetUrlSearchComponent;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, PWSTR lpszUrl, BOOL* pfIsError) IsErrorUrl;
	}


	public HRESULT FireBeforeNavigate2(IDispatch* pDispatch, PWSTR lpszUrl, uint32 dwFlags, PWSTR lpszFrameName, uint8* pPostData, uint32 cbPostData, PWSTR lpszHeaders, BOOL fPlayNavSound, BOOL* pfCancel) mut => VT.[Friend]FireBeforeNavigate2(&this, pDispatch, lpszUrl, dwFlags, lpszFrameName, pPostData, cbPostData, lpszHeaders, fPlayNavSound, pfCancel);

	public HRESULT FireNavigateComplete2(IHTMLWindow2* pHTMLWindow2, uint32 dwFlags) mut => VT.[Friend]FireNavigateComplete2(&this, pHTMLWindow2, dwFlags);

	public HRESULT FireDownloadBegin() mut => VT.[Friend]FireDownloadBegin(&this);

	public HRESULT FireDownloadComplete() mut => VT.[Friend]FireDownloadComplete(&this);

	public HRESULT FireDocumentComplete(IHTMLWindow2* pHTMLWindow, uint32 dwFlags) mut => VT.[Friend]FireDocumentComplete(&this, pHTMLWindow, dwFlags);

	public HRESULT UpdateDesktopComponent(IHTMLWindow2* pHTMLWindow) mut => VT.[Friend]UpdateDesktopComponent(&this, pHTMLWindow);

	public HRESULT GetPendingUrl(BSTR* pbstrPendingUrl) mut => VT.[Friend]GetPendingUrl(&this, pbstrPendingUrl);

	public HRESULT ActiveElementChanged(IHTMLElement* pHTMLElement) mut => VT.[Friend]ActiveElementChanged(&this, pHTMLElement);

	public HRESULT GetUrlSearchComponent(BSTR* pbstrSearch) mut => VT.[Friend]GetUrlSearchComponent(&this, pbstrSearch);

	public HRESULT IsErrorUrl(PWSTR lpszUrl, BOOL* pfIsError) mut => VT.[Friend]IsErrorUrl(&this, lpszUrl, pfIsError);
}

[CRepr]struct IDownloadManager : IUnknown
{
	public new const Guid IID = .(0x988934a4, 0x064b, 0x11d3, 0xbb, 0x80, 0x00, 0x10, 0x4b, 0x35, 0xe7, 0xf9);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IUnknown.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IMoniker* pmk, IBindCtx* pbc, uint32 dwBindVerb, int32 grfBINDF, BINDINFO* pBindInfo, PWSTR pszHeaders, PWSTR pszRedir, uint32 uiCP) Download;
	}


	public HRESULT Download(IMoniker* pmk, IBindCtx* pbc, uint32 dwBindVerb, int32 grfBINDF, BINDINFO* pBindInfo, PWSTR pszHeaders, PWSTR pszRedir, uint32 uiCP) mut => VT.[Friend]Download(&this, pmk, pbc, dwBindVerb, grfBINDF, pBindInfo, pszHeaders, pszRedir, uiCP);
}

[CRepr]struct IExtensionValidation : IUnknown
{
	public new const Guid IID = .(0x7d33f73d, 0x8525, 0x4e0f, 0x87, 0xdb, 0x83, 0x02, 0x88, 0xba, 0xff, 0x44);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IUnknown.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, in Guid extensionGuid, PWSTR extensionModulePath, uint32 extensionFileVersionMS, uint32 extensionFileVersionLS, IHTMLDocument2* htmlDocumentTop, IHTMLDocument2* htmlDocumentSubframe, IHTMLElement* htmlElement, ExtensionValidationContexts contexts, ExtensionValidationResults* results) Validate;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, PWSTR* displayName) DisplayName;
	}


	public HRESULT Validate(in Guid extensionGuid, PWSTR extensionModulePath, uint32 extensionFileVersionMS, uint32 extensionFileVersionLS, IHTMLDocument2* htmlDocumentTop, IHTMLDocument2* htmlDocumentSubframe, IHTMLElement* htmlElement, ExtensionValidationContexts contexts, ExtensionValidationResults* results) mut => VT.[Friend]Validate(&this, extensionGuid, extensionModulePath, extensionFileVersionMS, extensionFileVersionLS, htmlDocumentTop, htmlDocumentSubframe, htmlElement, contexts, results);

	public HRESULT DisplayName(PWSTR* displayName) mut => VT.[Friend]DisplayName(&this, displayName);
}

[CRepr]struct IHomePageSetting : IUnknown
{
	public new const Guid IID = .(0xfdfc244f, 0x18fa, 0x4ff2, 0xb0, 0x8e, 0x1d, 0x61, 0x8f, 0x3f, 0xfb, 0xe4);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IUnknown.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, HWND hwnd, PWSTR homePageUri, PWSTR brandingMessage) SetHomePage;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, PWSTR uri, BOOL* isDefault) IsHomePage;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self) SetHomePageToBrowserDefault;
	}


	public HRESULT SetHomePage(HWND hwnd, PWSTR homePageUri, PWSTR brandingMessage) mut => VT.[Friend]SetHomePage(&this, hwnd, homePageUri, brandingMessage);

	public HRESULT IsHomePage(PWSTR uri, BOOL* isDefault) mut => VT.[Friend]IsHomePage(&this, uri, isDefault);

	public HRESULT SetHomePageToBrowserDefault() mut => VT.[Friend]SetHomePageToBrowserDefault(&this);
}

[CRepr]struct ITargetNotify : IUnknown
{
	public new const Guid IID = .(0x863a99a0, 0x21bc, 0x11d0, 0x82, 0xb4, 0x00, 0xa0, 0xc9, 0x0c, 0x29, 0xc5);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IUnknown.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IUnknown* pUnkDestination, uint32 cbCookie) OnCreate;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IUnknown* pUnkDestination) OnReuse;
	}


	public HRESULT OnCreate(IUnknown* pUnkDestination, uint32 cbCookie) mut => VT.[Friend]OnCreate(&this, pUnkDestination, cbCookie);

	public HRESULT OnReuse(IUnknown* pUnkDestination) mut => VT.[Friend]OnReuse(&this, pUnkDestination);
}

[CRepr]struct ITargetNotify2 : ITargetNotify
{
	public new const Guid IID = .(0x3050f6b1, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : ITargetNotify.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* pbstrOptions) GetOptionString;
	}


	public HRESULT GetOptionString(BSTR* pbstrOptions) mut => VT.[Friend]GetOptionString(&this, pbstrOptions);
}

[CRepr]struct ITargetFrame2 : IUnknown
{
	public new const Guid IID = .(0x86d52e11, 0x94a8, 0x11d0, 0x82, 0xaf, 0x00, 0xc0, 0x4f, 0xd5, 0xae, 0x38);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IUnknown.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, PWSTR pszFrameName) SetFrameName;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, PWSTR* ppszFrameName) GetFrameName;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IUnknown** ppunkParent) GetParentFrame;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, PWSTR pszFrameSrc) SetFrameSrc;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, PWSTR* ppszFrameSrc) GetFrameSrc;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IOleContainer** ppContainer) GetFramesContainer;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32 dwFlags) SetFrameOptions;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32* pdwFlags) GetFrameOptions;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32 dwWidth, uint32 dwHeight) SetFrameMargins;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32* pdwWidth, uint32* pdwHeight) GetFrameMargins;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, PWSTR pszTargetName, uint32 dwFlags, IUnknown** ppunkTargetFrame) FindFrame;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, PWSTR pszTargetName, PWSTR* ppszTargetAlias) GetTargetAlias;
	}


	public HRESULT SetFrameName(PWSTR pszFrameName) mut => VT.[Friend]SetFrameName(&this, pszFrameName);

	public HRESULT GetFrameName(PWSTR* ppszFrameName) mut => VT.[Friend]GetFrameName(&this, ppszFrameName);

	public HRESULT GetParentFrame(IUnknown** ppunkParent) mut => VT.[Friend]GetParentFrame(&this, ppunkParent);

	public HRESULT SetFrameSrc(PWSTR pszFrameSrc) mut => VT.[Friend]SetFrameSrc(&this, pszFrameSrc);

	public HRESULT GetFrameSrc(PWSTR* ppszFrameSrc) mut => VT.[Friend]GetFrameSrc(&this, ppszFrameSrc);

	public HRESULT GetFramesContainer(IOleContainer** ppContainer) mut => VT.[Friend]GetFramesContainer(&this, ppContainer);

	public HRESULT SetFrameOptions(uint32 dwFlags) mut => VT.[Friend]SetFrameOptions(&this, dwFlags);

	public HRESULT GetFrameOptions(uint32* pdwFlags) mut => VT.[Friend]GetFrameOptions(&this, pdwFlags);

	public HRESULT SetFrameMargins(uint32 dwWidth, uint32 dwHeight) mut => VT.[Friend]SetFrameMargins(&this, dwWidth, dwHeight);

	public HRESULT GetFrameMargins(uint32* pdwWidth, uint32* pdwHeight) mut => VT.[Friend]GetFrameMargins(&this, pdwWidth, pdwHeight);

	public HRESULT FindFrame(PWSTR pszTargetName, uint32 dwFlags, IUnknown** ppunkTargetFrame) mut => VT.[Friend]FindFrame(&this, pszTargetName, dwFlags, ppunkTargetFrame);

	public HRESULT GetTargetAlias(PWSTR pszTargetName, PWSTR* ppszTargetAlias) mut => VT.[Friend]GetTargetAlias(&this, pszTargetName, ppszTargetAlias);
}

[CRepr]struct ITargetContainer : IUnknown
{
	public new const Guid IID = .(0x7847ec01, 0x2bec, 0x11d0, 0x82, 0xb4, 0x00, 0xa0, 0xc9, 0x0c, 0x29, 0xc5);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IUnknown.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, PWSTR* ppszFrameSrc) GetFrameUrl;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IOleContainer** ppContainer) GetFramesContainer;
	}


	public HRESULT GetFrameUrl(PWSTR* ppszFrameSrc) mut => VT.[Friend]GetFrameUrl(&this, ppszFrameSrc);

	public HRESULT GetFramesContainer(IOleContainer** ppContainer) mut => VT.[Friend]GetFramesContainer(&this, ppContainer);
}

[CRepr]struct ITargetFrame : IUnknown
{
	public new const Guid IID = .(0xd5f78c80, 0x5252, 0x11cf, 0x90, 0xfa, 0x00, 0xaa, 0x00, 0x42, 0x10, 0x6e);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IUnknown.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, PWSTR pszFrameName) SetFrameName;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, PWSTR* ppszFrameName) GetFrameName;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IUnknown** ppunkParent) GetParentFrame;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, PWSTR pszTargetName, IUnknown* ppunkContextFrame, uint32 dwFlags, IUnknown** ppunkTargetFrame) FindFrame;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, PWSTR pszFrameSrc) SetFrameSrc;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, PWSTR* ppszFrameSrc) GetFrameSrc;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IOleContainer** ppContainer) GetFramesContainer;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32 dwFlags) SetFrameOptions;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32* pdwFlags) GetFrameOptions;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32 dwWidth, uint32 dwHeight) SetFrameMargins;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32* pdwWidth, uint32* pdwHeight) GetFrameMargins;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32 cLength, uint32* pulData) RemoteNavigate;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IUnknown* pUnkChildFrame) OnChildFrameActivate;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IUnknown* pUnkChildFrame) OnChildFrameDeactivate;
	}


	public HRESULT SetFrameName(PWSTR pszFrameName) mut => VT.[Friend]SetFrameName(&this, pszFrameName);

	public HRESULT GetFrameName(PWSTR* ppszFrameName) mut => VT.[Friend]GetFrameName(&this, ppszFrameName);

	public HRESULT GetParentFrame(IUnknown** ppunkParent) mut => VT.[Friend]GetParentFrame(&this, ppunkParent);

	public HRESULT FindFrame(PWSTR pszTargetName, IUnknown* ppunkContextFrame, uint32 dwFlags, IUnknown** ppunkTargetFrame) mut => VT.[Friend]FindFrame(&this, pszTargetName, ppunkContextFrame, dwFlags, ppunkTargetFrame);

	public HRESULT SetFrameSrc(PWSTR pszFrameSrc) mut => VT.[Friend]SetFrameSrc(&this, pszFrameSrc);

	public HRESULT GetFrameSrc(PWSTR* ppszFrameSrc) mut => VT.[Friend]GetFrameSrc(&this, ppszFrameSrc);

	public HRESULT GetFramesContainer(IOleContainer** ppContainer) mut => VT.[Friend]GetFramesContainer(&this, ppContainer);

	public HRESULT SetFrameOptions(uint32 dwFlags) mut => VT.[Friend]SetFrameOptions(&this, dwFlags);

	public HRESULT GetFrameOptions(uint32* pdwFlags) mut => VT.[Friend]GetFrameOptions(&this, pdwFlags);

	public HRESULT SetFrameMargins(uint32 dwWidth, uint32 dwHeight) mut => VT.[Friend]SetFrameMargins(&this, dwWidth, dwHeight);

	public HRESULT GetFrameMargins(uint32* pdwWidth, uint32* pdwHeight) mut => VT.[Friend]GetFrameMargins(&this, pdwWidth, pdwHeight);

	public HRESULT RemoteNavigate(uint32 cLength, uint32* pulData) mut => VT.[Friend]RemoteNavigate(&this, cLength, pulData);

	public HRESULT OnChildFrameActivate(IUnknown* pUnkChildFrame) mut => VT.[Friend]OnChildFrameActivate(&this, pUnkChildFrame);

	public HRESULT OnChildFrameDeactivate(IUnknown* pUnkChildFrame) mut => VT.[Friend]OnChildFrameDeactivate(&this, pUnkChildFrame);
}

[CRepr]struct ITargetEmbedding : IUnknown
{
	public new const Guid IID = .(0x548793c0, 0x9e74, 0x11cf, 0x96, 0x55, 0x00, 0xa0, 0xc9, 0x03, 0x49, 0x23);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IUnknown.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, ITargetFrame** ppTargetFrame) GetTargetFrame;
	}


	public HRESULT GetTargetFrame(ITargetFrame** ppTargetFrame) mut => VT.[Friend]GetTargetFrame(&this, ppTargetFrame);
}

[CRepr]struct ITargetFramePriv : IUnknown
{
	public new const Guid IID = .(0x9216e421, 0x2bf5, 0x11d0, 0x82, 0xb4, 0x00, 0xa0, 0xc9, 0x0c, 0x29, 0xc5);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IUnknown.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, PWSTR pszTargetName, uint32 dwFlags, IUnknown** ppunkTargetFrame) FindFrameDownwards;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, PWSTR pszTargetName, IUnknown* punkContextFrame, uint32 dwFlags, IUnknown** ppunkTargetFrame) FindFrameInContext;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IUnknown* pUnkChildFrame) OnChildFrameActivate;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IUnknown* pUnkChildFrame) OnChildFrameDeactivate;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32 grfHLNF, IBindCtx* pbc, IBindStatusCallback* pibsc, PWSTR pszTargetName, PWSTR pszUrl, PWSTR pszLocation) NavigateHack;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32 dwID, IUnknown** ppunkBrowser) FindBrowserByIndex;
	}


	public HRESULT FindFrameDownwards(PWSTR pszTargetName, uint32 dwFlags, IUnknown** ppunkTargetFrame) mut => VT.[Friend]FindFrameDownwards(&this, pszTargetName, dwFlags, ppunkTargetFrame);

	public HRESULT FindFrameInContext(PWSTR pszTargetName, IUnknown* punkContextFrame, uint32 dwFlags, IUnknown** ppunkTargetFrame) mut => VT.[Friend]FindFrameInContext(&this, pszTargetName, punkContextFrame, dwFlags, ppunkTargetFrame);

	public HRESULT OnChildFrameActivate(IUnknown* pUnkChildFrame) mut => VT.[Friend]OnChildFrameActivate(&this, pUnkChildFrame);

	public HRESULT OnChildFrameDeactivate(IUnknown* pUnkChildFrame) mut => VT.[Friend]OnChildFrameDeactivate(&this, pUnkChildFrame);

	public HRESULT NavigateHack(uint32 grfHLNF, IBindCtx* pbc, IBindStatusCallback* pibsc, PWSTR pszTargetName, PWSTR pszUrl, PWSTR pszLocation) mut => VT.[Friend]NavigateHack(&this, grfHLNF, pbc, pibsc, pszTargetName, pszUrl, pszLocation);

	public HRESULT FindBrowserByIndex(uint32 dwID, IUnknown** ppunkBrowser) mut => VT.[Friend]FindBrowserByIndex(&this, dwID, ppunkBrowser);
}

[CRepr]struct ITargetFramePriv2 : ITargetFramePriv
{
	public new const Guid IID = .(0xb2c867e6, 0x69d6, 0x46f2, 0xa6, 0x11, 0xde, 0xd9, 0xa4, 0xbd, 0x7f, 0xef);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : ITargetFramePriv.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32 grfHLNF, IBindCtx* pbc, IBindStatusCallback* pibsc, PWSTR pszTargetName, IUri* pUri, PWSTR pszLocation) AggregatedNavigation2;
	}


	public HRESULT AggregatedNavigation2(uint32 grfHLNF, IBindCtx* pbc, IBindStatusCallback* pibsc, PWSTR pszTargetName, IUri* pUri, PWSTR pszLocation) mut => VT.[Friend]AggregatedNavigation2(&this, grfHLNF, pbc, pibsc, pszTargetName, pUri, pszLocation);
}

[CRepr]struct ISurfacePresenterFlipBuffer : IUnknown
{
	public new const Guid IID = .(0xe43f4a08, 0x8bbc, 0x4665, 0xac, 0x92, 0xc5, 0x5c, 0xe6, 0x1f, 0xd7, 0xe7);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IUnknown.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, in Guid riid, void** ppBuffer) BeginDraw;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self) EndDraw;
	}


	public HRESULT BeginDraw(in Guid riid, void** ppBuffer) mut => VT.[Friend]BeginDraw(&this, riid, ppBuffer);

	public HRESULT EndDraw() mut => VT.[Friend]EndDraw(&this);
}

[CRepr]struct ISurfacePresenterFlip : IUnknown
{
	public new const Guid IID = .(0x30510848, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IUnknown.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self) Present;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32 backBufferIndex, in Guid riid, void** ppBuffer) GetBuffer;
	}


	public HRESULT Present() mut => VT.[Friend]Present(&this);

	public HRESULT GetBuffer(uint32 backBufferIndex, in Guid riid, void** ppBuffer) mut => VT.[Friend]GetBuffer(&this, backBufferIndex, riid, ppBuffer);
}

[CRepr]struct ISurfacePresenterFlip2 : IUnknown
{
	public new const Guid IID = .(0x30510865, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IUnknown.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, DXGI_MODE_ROTATION dxgiRotation) SetRotation;
	}


	public HRESULT SetRotation(DXGI_MODE_ROTATION dxgiRotation) mut => VT.[Friend]SetRotation(&this, dxgiRotation);
}

[CRepr]struct IViewObjectPresentFlipSite : IUnknown
{
	public new const Guid IID = .(0x30510846, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IUnknown.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IUnknown* pDevice, uint32 width, uint32 height, uint32 backBufferCount, DXGI_FORMAT format, VIEW_OBJECT_ALPHA_MODE mode, ISurfacePresenterFlip** ppSPFlip) CreateSurfacePresenterFlip;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, LUID* pLuid) GetDeviceLuid;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self) EnterFullScreen;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self) ExitFullScreen;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BOOL* pfFullScreen) IsFullScreen;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, RECT* pRect) GetBoundingRect;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, POINT* pPos, SIZE* pSize, float* pScaleX, float* pScaleY) GetMetrics;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, SIZE* pSize) GetFullScreenSize;
	}


	public HRESULT CreateSurfacePresenterFlip(IUnknown* pDevice, uint32 width, uint32 height, uint32 backBufferCount, DXGI_FORMAT format, VIEW_OBJECT_ALPHA_MODE mode, ISurfacePresenterFlip** ppSPFlip) mut => VT.[Friend]CreateSurfacePresenterFlip(&this, pDevice, width, height, backBufferCount, format, mode, ppSPFlip);

	public HRESULT GetDeviceLuid(LUID* pLuid) mut => VT.[Friend]GetDeviceLuid(&this, pLuid);

	public HRESULT EnterFullScreen() mut => VT.[Friend]EnterFullScreen(&this);

	public HRESULT ExitFullScreen() mut => VT.[Friend]ExitFullScreen(&this);

	public HRESULT IsFullScreen(BOOL* pfFullScreen) mut => VT.[Friend]IsFullScreen(&this, pfFullScreen);

	public HRESULT GetBoundingRect(RECT* pRect) mut => VT.[Friend]GetBoundingRect(&this, pRect);

	public HRESULT GetMetrics(POINT* pPos, SIZE* pSize, float* pScaleX, float* pScaleY) mut => VT.[Friend]GetMetrics(&this, pPos, pSize, pScaleX, pScaleY);

	public HRESULT GetFullScreenSize(SIZE* pSize) mut => VT.[Friend]GetFullScreenSize(&this, pSize);
}

[CRepr]struct IViewObjectPresentFlipSite2 : IUnknown
{
	public new const Guid IID = .(0xaad0cbf1, 0xe7fd, 0x4f12, 0x89, 0x02, 0xc7, 0x81, 0x32, 0xa8, 0xe0, 0x1d);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IUnknown.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, DXGI_MODE_ROTATION* pDxgiRotation) GetRotationForCurrentOutput;
	}


	public HRESULT GetRotationForCurrentOutput(DXGI_MODE_ROTATION* pDxgiRotation) mut => VT.[Friend]GetRotationForCurrentOutput(&this, pDxgiRotation);
}

[CRepr]struct IViewObjectPresentFlip : IUnknown
{
	public new const Guid IID = .(0x30510847, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IUnknown.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BOOL fRecreatePresenter) NotifyRender;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IUnknown* pBitmap) RenderObjectToBitmap;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, ISurfacePresenterFlipBuffer* pBuffer) RenderObjectToSharedBuffer;
	}


	public HRESULT NotifyRender(BOOL fRecreatePresenter) mut => VT.[Friend]NotifyRender(&this, fRecreatePresenter);

	public HRESULT RenderObjectToBitmap(IUnknown* pBitmap) mut => VT.[Friend]RenderObjectToBitmap(&this, pBitmap);

	public HRESULT RenderObjectToSharedBuffer(ISurfacePresenterFlipBuffer* pBuffer) mut => VT.[Friend]RenderObjectToSharedBuffer(&this, pBuffer);
}

[CRepr]struct IViewObjectPresentFlip2 : IUnknown
{
	public new const Guid IID = .(0x30510856, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IUnknown.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self) NotifyLeavingView;
	}


	public HRESULT NotifyLeavingView() mut => VT.[Friend]NotifyLeavingView(&this);
}

[CRepr]struct IActiveXUIHandlerSite2 : IUnknown
{
	public new const Guid IID = .(0x7e3707b2, 0xd087, 0x4542, 0xac, 0x1f, 0xa0, 0xd2, 0xfc, 0xd0, 0x80, 0xfd);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IUnknown.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint64* pullCookie) AddSuspensionExemption;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint64 ullCookie) RemoveSuspensionExemption;
	}


	public HRESULT AddSuspensionExemption(uint64* pullCookie) mut => VT.[Friend]AddSuspensionExemption(&this, pullCookie);

	public HRESULT RemoveSuspensionExemption(uint64 ullCookie) mut => VT.[Friend]RemoveSuspensionExemption(&this, ullCookie);
}

[CRepr]struct ICaretPositionProvider : IUnknown
{
	public new const Guid IID = .(0x58da43a2, 0x108e, 0x4d5b, 0x9f, 0x75, 0xe5, 0xf7, 0x4f, 0x93, 0xff, 0xf5);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IUnknown.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, POINT* pptCaret, float* pflHeight) GetCaretPosition;
	}


	public HRESULT GetCaretPosition(POINT* pptCaret, float* pflHeight) mut => VT.[Friend]GetCaretPosition(&this, pptCaret, pflHeight);
}

[CRepr]struct ITridentTouchInput : IUnknown
{
	public new const Guid IID = .(0x30510850, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IUnknown.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32 msg, WPARAM wParam, LPARAM lParam, BOOL* pfAllowManipulations) OnPointerMessage;
	}


	public HRESULT OnPointerMessage(uint32 msg, WPARAM wParam, LPARAM lParam, BOOL* pfAllowManipulations) mut => VT.[Friend]OnPointerMessage(&this, msg, wParam, lParam, pfAllowManipulations);
}

[CRepr]struct ITridentTouchInputSite : IUnknown
{
	public new const Guid IID = .(0x30510849, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IUnknown.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, styleMsTouchAction msTouchAction) SetManipulationMode;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 x, int32 y) ZoomToPoint;
	}


	public HRESULT SetManipulationMode(styleMsTouchAction msTouchAction) mut => VT.[Friend]SetManipulationMode(&this, msTouchAction);

	public HRESULT ZoomToPoint(int32 x, int32 y) mut => VT.[Friend]ZoomToPoint(&this, x, y);
}

[CRepr]struct IMediaActivityNotifySite : IUnknown
{
	public new const Guid IID = .(0x8165cfef, 0x179d, 0x46c2, 0xbc, 0x71, 0x3f, 0xa7, 0x26, 0xdc, 0x1f, 0x8d);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IUnknown.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, MediaActivityNotifyType mediaActivityType) OnMediaActivityStarted;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, MediaActivityNotifyType mediaActivityType) OnMediaActivityStopped;
	}


	public HRESULT OnMediaActivityStarted(MediaActivityNotifyType mediaActivityType) mut => VT.[Friend]OnMediaActivityStarted(&this, mediaActivityType);

	public HRESULT OnMediaActivityStopped(MediaActivityNotifyType mediaActivityType) mut => VT.[Friend]OnMediaActivityStopped(&this, mediaActivityType);
}

[CRepr]struct IAudioSessionSite : IUnknown
{
	public new const Guid IID = .(0xd7d8b684, 0xd02d, 0x4517, 0xb6, 0xb7, 0x19, 0xe3, 0xdf, 0xe2, 0x9c, 0x45);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IUnknown.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, Guid* audioSessionGuid) GetAudioSessionGuid;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, PWSTR endpointID) OnAudioStreamCreated;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, PWSTR endpointID) OnAudioStreamDestroyed;
	}


	public HRESULT GetAudioSessionGuid(Guid* audioSessionGuid) mut => VT.[Friend]GetAudioSessionGuid(&this, audioSessionGuid);

	public HRESULT OnAudioStreamCreated(PWSTR endpointID) mut => VT.[Friend]OnAudioStreamCreated(&this, endpointID);

	public HRESULT OnAudioStreamDestroyed(PWSTR endpointID) mut => VT.[Friend]OnAudioStreamDestroyed(&this, endpointID);
}

[CRepr]struct IPrintTaskRequestHandler : IUnknown
{
	public new const Guid IID = .(0x191cd340, 0xcf36, 0x44ff, 0xbd, 0x53, 0xd1, 0xb7, 0x01, 0x79, 0x9d, 0x9b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IUnknown.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IInspectable* pPrintTaskRequest) HandlePrintTaskRequest;
	}


	public HRESULT HandlePrintTaskRequest(IInspectable* pPrintTaskRequest) mut => VT.[Friend]HandlePrintTaskRequest(&this, pPrintTaskRequest);
}

[CRepr]struct IPrintTaskRequestFactory : IUnknown
{
	public new const Guid IID = .(0xbb516745, 0x8c34, 0x4f8b, 0x96, 0x05, 0x68, 0x4d, 0xcb, 0x14, 0x4b, 0xe5);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IUnknown.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IPrintTaskRequestHandler* pPrintTaskRequestHandler) CreatePrintTaskRequest;
	}


	public HRESULT CreatePrintTaskRequest(IPrintTaskRequestHandler* pPrintTaskRequestHandler) mut => VT.[Friend]CreatePrintTaskRequest(&this, pPrintTaskRequestHandler);
}

[CRepr]struct IScrollableContextMenu : IUnknown
{
	public new const Guid IID = .(0x30510854, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IUnknown.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, PWSTR itemText, uint32 cmdID) AddItem;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 x, int32 y, uint32* cmdID) ShowModal;
	}


	public HRESULT AddItem(PWSTR itemText, uint32 cmdID) mut => VT.[Friend]AddItem(&this, itemText, cmdID);

	public HRESULT ShowModal(int32 x, int32 y, uint32* cmdID) mut => VT.[Friend]ShowModal(&this, x, y, cmdID);
}

[CRepr]struct IScrollableContextMenu2 : IScrollableContextMenu
{
	public new const Guid IID = .(0xf77e9056, 0x8674, 0x4936, 0x92, 0x4c, 0x0e, 0x4a, 0x06, 0xfa, 0x63, 0x4a);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IScrollableContextMenu.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self) AddSeparator;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, SCROLLABLECONTEXTMENU_PLACEMENT scmp) SetPlacement;
	}


	public HRESULT AddSeparator() mut => VT.[Friend]AddSeparator(&this);

	public HRESULT SetPlacement(SCROLLABLECONTEXTMENU_PLACEMENT scmp) mut => VT.[Friend]SetPlacement(&this, scmp);
}

[CRepr]struct IActiveXUIHandlerSite : IUnknown
{
	public new const Guid IID = .(0x30510853, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IUnknown.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IScrollableContextMenu** scrollableContextMenu) CreateScrollableContextMenu;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IUnknown* filePicker, BOOL allowMultipleSelections, IUnknown** result) PickFileAndGetResult;
	}


	public HRESULT CreateScrollableContextMenu(IScrollableContextMenu** scrollableContextMenu) mut => VT.[Friend]CreateScrollableContextMenu(&this, scrollableContextMenu);

	public HRESULT PickFileAndGetResult(IUnknown* filePicker, BOOL allowMultipleSelections, IUnknown** result) mut => VT.[Friend]PickFileAndGetResult(&this, filePicker, allowMultipleSelections, result);
}

[CRepr]struct IActiveXUIHandlerSite3 : IUnknown
{
	public new const Guid IID = .(0x7904009a, 0x1238, 0x47f4, 0x90, 0x1c, 0x87, 0x13, 0x75, 0xc3, 0x46, 0x08);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IUnknown.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, HWND hwnd, PWSTR text, PWSTR caption, uint32 type, int32* result) MessageBoxW;
	}


	public HRESULT MessageBoxW(HWND hwnd, PWSTR text, PWSTR caption, uint32 type, int32* result) mut => VT.[Friend]MessageBoxW(&this, hwnd, text, caption, type, result);
}

[CRepr]struct IEnumManagerFrames : IUnknown
{
	public new const Guid IID = .(0x3caa826a, 0x9b1f, 0x4a79, 0xbc, 0x81, 0xf0, 0x43, 0x0d, 0xed, 0x16, 0x48);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IUnknown.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32 celt, HWND** ppWindows, uint32* pceltFetched) Next;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32* pcelt) Count;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32 celt) Skip;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self) Reset;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IEnumManagerFrames** ppEnum) Clone;
	}


	public HRESULT Next(uint32 celt, HWND** ppWindows, uint32* pceltFetched) mut => VT.[Friend]Next(&this, celt, ppWindows, pceltFetched);

	public HRESULT Count(uint32* pcelt) mut => VT.[Friend]Count(&this, pcelt);

	public HRESULT Skip(uint32 celt) mut => VT.[Friend]Skip(&this, celt);

	public HRESULT Reset() mut => VT.[Friend]Reset(&this);

	public HRESULT Clone(IEnumManagerFrames** ppEnum) mut => VT.[Friend]Clone(&this, ppEnum);
}

[CRepr]struct IInternetExplorerManager : IUnknown
{
	public new const Guid IID = .(0xacc84351, 0x04ff, 0x44f9, 0xb2, 0x3f, 0x65, 0x5e, 0xd1, 0x68, 0xc6, 0xd5);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IUnknown.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32 dwConfig, PWSTR pszURL, in Guid riid, void** ppv) CreateObject;
	}


	public HRESULT CreateObject(uint32 dwConfig, PWSTR pszURL, in Guid riid, void** ppv) mut => VT.[Friend]CreateObject(&this, dwConfig, pszURL, riid, ppv);
}

[CRepr]struct IInternetExplorerManager2 : IUnknown
{
	public new const Guid IID = .(0xdfbb5136, 0x9259, 0x4895, 0xb4, 0xa7, 0xc1, 0x93, 0x44, 0x29, 0x91, 0x9a);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IUnknown.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IEnumManagerFrames** ppEnum) EnumFrameWindows;
	}


	public HRESULT EnumFrameWindows(IEnumManagerFrames** ppEnum) mut => VT.[Friend]EnumFrameWindows(&this, ppEnum);
}

[CRepr]struct IIEWebDriverSite : IDispatch
{
	public new const Guid IID = .(0xffb84444, 0x453d, 0x4fbc, 0x9f, 0x9d, 0x8d, 0xb5, 0xc4, 0x71, 0xec, 0x75);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32 operationCode, uint32 hWnd) WindowOperation;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IUnknown* pUnkWD) DetachWebdriver;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IUnknown* pUnkWD, PWSTR capName, VARIANT* capValue) GetCapabilityValue;
	}


	public HRESULT WindowOperation(uint32 operationCode, uint32 hWnd) mut => VT.[Friend]WindowOperation(&this, operationCode, hWnd);

	public HRESULT DetachWebdriver(IUnknown* pUnkWD) mut => VT.[Friend]DetachWebdriver(&this, pUnkWD);

	public HRESULT GetCapabilityValue(IUnknown* pUnkWD, PWSTR capName, VARIANT* capValue) mut => VT.[Friend]GetCapabilityValue(&this, pUnkWD, capName, capValue);
}

[CRepr]struct IIEWebDriverManager : IDispatch
{
	public new const Guid IID = .(0xbd1dc630, 0x6590, 0x4ca2, 0xa2, 0x93, 0x6b, 0xc7, 0x2b, 0x24, 0x38, 0xd8);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, PWSTR command, PWSTR* response) ExecuteCommand;
	}


	public HRESULT ExecuteCommand(PWSTR command, PWSTR* response) mut => VT.[Friend]ExecuteCommand(&this, command, response);
}

[CRepr]struct IPeerFactory : IUnknown
{
	public new const Guid IID = .(0x6663f9d3, 0xb482, 0x11d1, 0x89, 0xc6, 0x00, 0xc0, 0x4f, 0xb6, 0xbf, 0xc4);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IUnknown.VTable
	{
	}

}

[CRepr]struct IHomePage : IDispatch
{
	public new const Guid IID = .(0x766bf2af, 0xd650, 0x11d1, 0x98, 0x11, 0x00, 0xc0, 0x4f, 0xc3, 0x1d, 0x2e);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self) navigateHomePage;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR bstrURL) setHomePage;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR bstrURL, int16* p) isHomePage;
	}


	public HRESULT navigateHomePage() mut => VT.[Friend]navigateHomePage(&this);

	public HRESULT setHomePage(BSTR bstrURL) mut => VT.[Friend]setHomePage(&this, bstrURL);

	public HRESULT isHomePage(BSTR bstrURL, int16* p) mut => VT.[Friend]isHomePage(&this, bstrURL, p);
}

[CRepr]struct IIntelliForms : IDispatch
{
	public new const Guid IID = .(0x9b9f68e6, 0x1aaa, 0x11d2, 0xbc, 0xa5, 0x00, 0xc0, 0x4f, 0xd9, 0x29, 0xdb);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16* pVal) get_enabled;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16 bVal) put_enabled;
	}


	public HRESULT get_enabled(int16* pVal) mut => VT.[Friend]get_enabled(&this, pVal);

	public HRESULT put_enabled(int16 bVal) mut => VT.[Friend]put_enabled(&this, bVal);
}

[CRepr]struct Iwfolders : IDispatch
{
	public new const Guid IID = .(0xbae31f98, 0x1b81, 0x11d2, 0xa9, 0x7a, 0x00, 0xc0, 0x4f, 0x8e, 0xcb, 0x02);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR bstrUrl, BSTR* pbstrRetVal) navigate;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR bstrUrl, BSTR bstrTargetFrame, BSTR* pbstrRetVal) navigateFrame;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR bstrUrl, BSTR bstrTargetFrame, uint32 dwhwnd, IUnknown* pwb) navigateNoSite;
	}


	public HRESULT navigate(BSTR bstrUrl, BSTR* pbstrRetVal) mut => VT.[Friend]navigate(&this, bstrUrl, pbstrRetVal);

	public HRESULT navigateFrame(BSTR bstrUrl, BSTR bstrTargetFrame, BSTR* pbstrRetVal) mut => VT.[Friend]navigateFrame(&this, bstrUrl, bstrTargetFrame, pbstrRetVal);

	public HRESULT navigateNoSite(BSTR bstrUrl, BSTR bstrTargetFrame, uint32 dwhwnd, IUnknown* pwb) mut => VT.[Friend]navigateNoSite(&this, bstrUrl, bstrTargetFrame, dwhwnd, pwb);
}

[CRepr]struct IAnchorClick : IDispatch
{
	public new const Guid IID = .(0x13d5413b, 0x33b9, 0x11d2, 0x95, 0xa7, 0x00, 0xc0, 0x4f, 0x8e, 0xcb, 0x02);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self) ProcOnClick;
	}


	public HRESULT ProcOnClick() mut => VT.[Friend]ProcOnClick(&this);
}

[CRepr]struct IHTMLUserDataOM : IDispatch
{
	public new const Guid IID = .(0x3050f48f, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IDispatch** p) get_XMLDocument;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR strName) save;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR strName) load;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR name, VARIANT* pValue) getAttribute;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR name, VARIANT value) setAttribute;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR name) removeAttribute;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR bstr) put_expires;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* pbstr) get_expires;
	}


	public HRESULT get_XMLDocument(IDispatch** p) mut => VT.[Friend]get_XMLDocument(&this, p);

	public HRESULT save(BSTR strName) mut => VT.[Friend]save(&this, strName);

	public HRESULT load(BSTR strName) mut => VT.[Friend]load(&this, strName);

	public HRESULT getAttribute(BSTR name, VARIANT* pValue) mut => VT.[Friend]getAttribute(&this, name, pValue);

	public HRESULT setAttribute(BSTR name, VARIANT value) mut => VT.[Friend]setAttribute(&this, name, value);

	public HRESULT removeAttribute(BSTR name) mut => VT.[Friend]removeAttribute(&this, name);

	public HRESULT put_expires(BSTR bstr) mut => VT.[Friend]put_expires(&this, bstr);

	public HRESULT get_expires(BSTR* pbstr) mut => VT.[Friend]get_expires(&this, pbstr);
}

[CRepr]struct IHTMLPersistDataOM : IDispatch
{
	public new const Guid IID = .(0x3050f4c0, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IDispatch** p) get_XMLDocument;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR name, VARIANT* pValue) getAttribute;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR name, VARIANT value) setAttribute;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR name) removeAttribute;
	}


	public HRESULT get_XMLDocument(IDispatch** p) mut => VT.[Friend]get_XMLDocument(&this, p);

	public HRESULT getAttribute(BSTR name, VARIANT* pValue) mut => VT.[Friend]getAttribute(&this, name, pValue);

	public HRESULT setAttribute(BSTR name, VARIANT value) mut => VT.[Friend]setAttribute(&this, name, value);

	public HRESULT removeAttribute(BSTR name) mut => VT.[Friend]removeAttribute(&this, name);
}

[CRepr]struct IHTMLPersistData : IUnknown
{
	public new const Guid IID = .(0x3050f4c5, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IUnknown.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IUnknown* pUnk, int32 lType, int16* fContinueBroacast) save;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IUnknown* pUnk, int32 lType, int16* fDoDefault) load;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 lType, int16* pfSupportsType) queryType;
	}


	public HRESULT save(IUnknown* pUnk, int32 lType, int16* fContinueBroacast) mut => VT.[Friend]save(&this, pUnk, lType, fContinueBroacast);

	public HRESULT load(IUnknown* pUnk, int32 lType, int16* fDoDefault) mut => VT.[Friend]load(&this, pUnk, lType, fDoDefault);

	public HRESULT queryType(int32 lType, int16* pfSupportsType) mut => VT.[Friend]queryType(&this, lType, pfSupportsType);
}

[CRepr]struct IDownloadBehavior : IDispatch
{
	public new const Guid IID = .(0x3050f5bd, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR bstrUrl, IDispatch* pdispCallback) startDownload;
	}


	public HRESULT startDownload(BSTR bstrUrl, IDispatch* pdispCallback) mut => VT.[Friend]startDownload(&this, bstrUrl, pdispCallback);
}

[CRepr]struct ILayoutRect : IDispatch
{
	public new const Guid IID = .(0x3050f665, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR bstrElementId) put_nextRect;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* pbstrElementId) get_nextRect;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT varContentSrc) put_contentSrc;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* pvarContentSrc) get_contentSrc;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16 v) put_honorPageBreaks;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16* p) get_honorPageBreaks;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16 v) put_honorPageRules;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16* p) get_honorPageRules;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IDispatch* pElem) put_nextRectElement;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IDispatch** ppElem) get_nextRectElement;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IDispatch** pDoc) get_contentDocument;
	}


	public HRESULT put_nextRect(BSTR bstrElementId) mut => VT.[Friend]put_nextRect(&this, bstrElementId);

	public HRESULT get_nextRect(BSTR* pbstrElementId) mut => VT.[Friend]get_nextRect(&this, pbstrElementId);

	public HRESULT put_contentSrc(VARIANT varContentSrc) mut => VT.[Friend]put_contentSrc(&this, varContentSrc);

	public HRESULT get_contentSrc(VARIANT* pvarContentSrc) mut => VT.[Friend]get_contentSrc(&this, pvarContentSrc);

	public HRESULT put_honorPageBreaks(int16 v) mut => VT.[Friend]put_honorPageBreaks(&this, v);

	public HRESULT get_honorPageBreaks(int16* p) mut => VT.[Friend]get_honorPageBreaks(&this, p);

	public HRESULT put_honorPageRules(int16 v) mut => VT.[Friend]put_honorPageRules(&this, v);

	public HRESULT get_honorPageRules(int16* p) mut => VT.[Friend]get_honorPageRules(&this, p);

	public HRESULT put_nextRectElement(IDispatch* pElem) mut => VT.[Friend]put_nextRectElement(&this, pElem);

	public HRESULT get_nextRectElement(IDispatch** ppElem) mut => VT.[Friend]get_nextRectElement(&this, ppElem);

	public HRESULT get_contentDocument(IDispatch** pDoc) mut => VT.[Friend]get_contentDocument(&this, pDoc);
}

[CRepr]struct IDeviceRect : IDispatch
{
	public new const Guid IID = .(0x3050f6d5, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
	}

}

[CRepr]struct IHeaderFooter : IDispatch
{
	public new const Guid IID = .(0x3050f6ce, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDispatch.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_htmlHead;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_htmlFoot;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_textHead;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_textHead;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_textFoot;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_textFoot;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32 v) put_page;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32* p) get_page;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32 v) put_pageTotal;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32* p) get_pageTotal;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_URL;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_URL;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_title;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_title;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_dateShort;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_dateShort;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_dateLong;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_dateLong;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_timeShort;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_timeShort;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_timeLong;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_timeLong;
	}


	public HRESULT get_htmlHead(BSTR* p) mut => VT.[Friend]get_htmlHead(&this, p);

	public HRESULT get_htmlFoot(BSTR* p) mut => VT.[Friend]get_htmlFoot(&this, p);

	public HRESULT put_textHead(BSTR v) mut => VT.[Friend]put_textHead(&this, v);

	public HRESULT get_textHead(BSTR* p) mut => VT.[Friend]get_textHead(&this, p);

	public HRESULT put_textFoot(BSTR v) mut => VT.[Friend]put_textFoot(&this, v);

	public HRESULT get_textFoot(BSTR* p) mut => VT.[Friend]get_textFoot(&this, p);

	public HRESULT put_page(uint32 v) mut => VT.[Friend]put_page(&this, v);

	public HRESULT get_page(uint32* p) mut => VT.[Friend]get_page(&this, p);

	public HRESULT put_pageTotal(uint32 v) mut => VT.[Friend]put_pageTotal(&this, v);

	public HRESULT get_pageTotal(uint32* p) mut => VT.[Friend]get_pageTotal(&this, p);

	public HRESULT put_URL(BSTR v) mut => VT.[Friend]put_URL(&this, v);

	public HRESULT get_URL(BSTR* p) mut => VT.[Friend]get_URL(&this, p);

	public HRESULT put_title(BSTR v) mut => VT.[Friend]put_title(&this, v);

	public HRESULT get_title(BSTR* p) mut => VT.[Friend]get_title(&this, p);

	public HRESULT put_dateShort(BSTR v) mut => VT.[Friend]put_dateShort(&this, v);

	public HRESULT get_dateShort(BSTR* p) mut => VT.[Friend]get_dateShort(&this, p);

	public HRESULT put_dateLong(BSTR v) mut => VT.[Friend]put_dateLong(&this, v);

	public HRESULT get_dateLong(BSTR* p) mut => VT.[Friend]get_dateLong(&this, p);

	public HRESULT put_timeShort(BSTR v) mut => VT.[Friend]put_timeShort(&this, v);

	public HRESULT get_timeShort(BSTR* p) mut => VT.[Friend]get_timeShort(&this, p);

	public HRESULT put_timeLong(BSTR v) mut => VT.[Friend]put_timeLong(&this, v);

	public HRESULT get_timeLong(BSTR* p) mut => VT.[Friend]get_timeLong(&this, p);
}

[CRepr]struct IHeaderFooter2 : IHeaderFooter
{
	public new const Guid IID = .(0x305104a5, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IHeaderFooter.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR v) put_font;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* p) get_font;
	}


	public HRESULT put_font(BSTR v) mut => VT.[Friend]put_font(&this, v);

	public HRESULT get_font(BSTR* p) mut => VT.[Friend]get_font(&this, p);
}

[CRepr]struct IHostDialogHelper : IUnknown
{
	public new const Guid IID = .(0x53dec138, 0xa51e, 0x11d2, 0x86, 0x1e, 0x00, 0xc0, 0x4f, 0xa3, 0x5c, 0x89);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IUnknown.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, HWND hwndParent, IMoniker* pMk, VARIANT* pvarArgIn, PWSTR pchOptions, VARIANT* pvarArgOut, IUnknown* punkHost) ShowHTMLDialog;
	}


	public HRESULT ShowHTMLDialog(HWND hwndParent, IMoniker* pMk, VARIANT* pvarArgIn, PWSTR pchOptions, VARIANT* pvarArgOut, IUnknown* punkHost) mut => VT.[Friend]ShowHTMLDialog(&this, hwndParent, pMk, pvarArgIn, pchOptions, pvarArgOut, punkHost);
}

[CRepr]struct IDocHostUIHandler : IUnknown
{
	public new const Guid IID = .(0xbd3f23c0, 0xd43e, 0x11cf, 0x89, 0x3b, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x1a);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IUnknown.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32 dwID, POINT* ppt, IUnknown* pcmdtReserved, IDispatch* pdispReserved) ShowContextMenu;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, DOCHOSTUIINFO* pInfo) GetHostInfo;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32 dwID, IOleInPlaceActiveObject* pActiveObject, IOleCommandTarget* pCommandTarget, IOleInPlaceFrame* pFrame, IOleInPlaceUIWindow* pDoc) ShowUI;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self) HideUI;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self) UpdateUI;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BOOL fEnable) EnableModeless;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BOOL fActivate) OnDocWindowActivate;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BOOL fActivate) OnFrameWindowActivate;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, RECT* prcBorder, IOleInPlaceUIWindow* pUIWindow, BOOL fRameWindow) ResizeBorder;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, MSG* lpMsg, in Guid pguidCmdGroup, uint32 nCmdID) TranslateAccelerator;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, PWSTR* pchKey, uint32 dw) GetOptionKeyPath;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IDropTarget* pDropTarget, IDropTarget** ppDropTarget) GetDropTarget;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IDispatch** ppDispatch) GetExternal;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32 dwTranslate, PWSTR pchURLIn, PWSTR* ppchURLOut) TranslateUrl;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IDataObject* pDO, IDataObject** ppDORet) FilterDataObject;
	}


	public HRESULT ShowContextMenu(uint32 dwID, POINT* ppt, IUnknown* pcmdtReserved, IDispatch* pdispReserved) mut => VT.[Friend]ShowContextMenu(&this, dwID, ppt, pcmdtReserved, pdispReserved);

	public HRESULT GetHostInfo(DOCHOSTUIINFO* pInfo) mut => VT.[Friend]GetHostInfo(&this, pInfo);

	public HRESULT ShowUI(uint32 dwID, IOleInPlaceActiveObject* pActiveObject, IOleCommandTarget* pCommandTarget, IOleInPlaceFrame* pFrame, IOleInPlaceUIWindow* pDoc) mut => VT.[Friend]ShowUI(&this, dwID, pActiveObject, pCommandTarget, pFrame, pDoc);

	public HRESULT HideUI() mut => VT.[Friend]HideUI(&this);

	public HRESULT UpdateUI() mut => VT.[Friend]UpdateUI(&this);

	public HRESULT EnableModeless(BOOL fEnable) mut => VT.[Friend]EnableModeless(&this, fEnable);

	public HRESULT OnDocWindowActivate(BOOL fActivate) mut => VT.[Friend]OnDocWindowActivate(&this, fActivate);

	public HRESULT OnFrameWindowActivate(BOOL fActivate) mut => VT.[Friend]OnFrameWindowActivate(&this, fActivate);

	public HRESULT ResizeBorder(RECT* prcBorder, IOleInPlaceUIWindow* pUIWindow, BOOL fRameWindow) mut => VT.[Friend]ResizeBorder(&this, prcBorder, pUIWindow, fRameWindow);

	public HRESULT TranslateAccelerator(MSG* lpMsg, in Guid pguidCmdGroup, uint32 nCmdID) mut => VT.[Friend]TranslateAccelerator(&this, lpMsg, pguidCmdGroup, nCmdID);

	public HRESULT GetOptionKeyPath(PWSTR* pchKey, uint32 dw) mut => VT.[Friend]GetOptionKeyPath(&this, pchKey, dw);

	public HRESULT GetDropTarget(IDropTarget* pDropTarget, IDropTarget** ppDropTarget) mut => VT.[Friend]GetDropTarget(&this, pDropTarget, ppDropTarget);

	public HRESULT GetExternal(IDispatch** ppDispatch) mut => VT.[Friend]GetExternal(&this, ppDispatch);

	public HRESULT TranslateUrl(uint32 dwTranslate, PWSTR pchURLIn, PWSTR* ppchURLOut) mut => VT.[Friend]TranslateUrl(&this, dwTranslate, pchURLIn, ppchURLOut);

	public HRESULT FilterDataObject(IDataObject* pDO, IDataObject** ppDORet) mut => VT.[Friend]FilterDataObject(&this, pDO, ppDORet);
}

[CRepr]struct IDocHostUIHandler2 : IDocHostUIHandler
{
	public new const Guid IID = .(0x3050f6d0, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IDocHostUIHandler.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, PWSTR* pchKey, uint32 dw) GetOverrideKeyPath;
	}


	public HRESULT GetOverrideKeyPath(PWSTR* pchKey, uint32 dw) mut => VT.[Friend]GetOverrideKeyPath(&this, pchKey, dw);
}

[CRepr]struct ICustomDoc : IUnknown
{
	public new const Guid IID = .(0x3050f3f0, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IUnknown.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IDocHostUIHandler* pUIHandler) SetUIHandler;
	}


	public HRESULT SetUIHandler(IDocHostUIHandler* pUIHandler) mut => VT.[Friend]SetUIHandler(&this, pUIHandler);
}

[CRepr]struct IDocHostShowUI : IUnknown
{
	public new const Guid IID = .(0xc4d244b0, 0xd43e, 0x11cf, 0x89, 0x3b, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x1a);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IUnknown.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, HWND hwnd, PWSTR lpstrText, PWSTR lpstrCaption, uint32 dwType, PWSTR lpstrHelpFile, uint32 dwHelpContext, LRESULT* plResult) ShowMessage;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, HWND hwnd, PWSTR pszHelpFile, uint32 uCommand, uint32 dwData, POINT ptMouse, IDispatch* pDispatchObjectHit) ShowHelp;
	}


	public HRESULT ShowMessage(HWND hwnd, PWSTR lpstrText, PWSTR lpstrCaption, uint32 dwType, PWSTR lpstrHelpFile, uint32 dwHelpContext, LRESULT* plResult) mut => VT.[Friend]ShowMessage(&this, hwnd, lpstrText, lpstrCaption, dwType, lpstrHelpFile, dwHelpContext, plResult);

	public HRESULT ShowHelp(HWND hwnd, PWSTR pszHelpFile, uint32 uCommand, uint32 dwData, POINT ptMouse, IDispatch* pDispatchObjectHit) mut => VT.[Friend]ShowHelp(&this, hwnd, pszHelpFile, uCommand, dwData, ptMouse, pDispatchObjectHit);
}

[CRepr]struct IClassFactoryEx : IClassFactory
{
	public new const Guid IID = .(0x342d1ea0, 0xae25, 0x11d1, 0x89, 0xc5, 0x00, 0x60, 0x08, 0xc3, 0xfb, 0xfc);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IClassFactory.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IUnknown* punkContext, IUnknown* punkOuter, in Guid riid, void** ppv) CreateInstanceWithContext;
	}


	public HRESULT CreateInstanceWithContext(IUnknown* punkContext, IUnknown* punkOuter, in Guid riid, void** ppv) mut => VT.[Friend]CreateInstanceWithContext(&this, punkContext, punkOuter, riid, ppv);
}

[CRepr]struct IHTMLOMWindowServices : IUnknown
{
	public new const Guid IID = .(0x3050f5fc, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IUnknown.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 x, int32 y) moveTo;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 x, int32 y) moveBy;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 x, int32 y) resizeTo;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 x, int32 y) resizeBy;
	}


	public HRESULT moveTo(int32 x, int32 y) mut => VT.[Friend]moveTo(&this, x, y);

	public HRESULT moveBy(int32 x, int32 y) mut => VT.[Friend]moveBy(&this, x, y);

	public HRESULT resizeTo(int32 x, int32 y) mut => VT.[Friend]resizeTo(&this, x, y);

	public HRESULT resizeBy(int32 x, int32 y) mut => VT.[Friend]resizeBy(&this, x, y);
}

[CRepr]struct IDiagnosticsScriptEngineSite : IUnknown
{
	public new const Guid IID = .(0x30510858, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IUnknown.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, PWSTR* pszData, uint32 ulDataCount) OnMessage;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IActiveScriptError* pScriptError) OnScriptError;
	}


	public HRESULT OnMessage(PWSTR* pszData, uint32 ulDataCount) mut => VT.[Friend]OnMessage(&this, pszData, ulDataCount);

	public HRESULT OnScriptError(IActiveScriptError* pScriptError) mut => VT.[Friend]OnScriptError(&this, pScriptError);
}

[CRepr]struct IDiagnosticsScriptEngine : IUnknown
{
	public new const Guid IID = .(0x30510859, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IUnknown.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, PWSTR pszScript, PWSTR pszScriptName) EvaluateScript;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, PWSTR* pszNames, PWSTR* pszValues, uint32 ulPropertyCount) FireScriptMessageEvent;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self) Detach;
	}


	public HRESULT EvaluateScript(PWSTR pszScript, PWSTR pszScriptName) mut => VT.[Friend]EvaluateScript(&this, pszScript, pszScriptName);

	public HRESULT FireScriptMessageEvent(PWSTR* pszNames, PWSTR* pszValues, uint32 ulPropertyCount) mut => VT.[Friend]FireScriptMessageEvent(&this, pszNames, pszValues, ulPropertyCount);

	public HRESULT Detach() mut => VT.[Friend]Detach(&this);
}

[CRepr]struct IDiagnosticsScriptEngineProvider : IUnknown
{
	public new const Guid IID = .(0x3051085a, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IUnknown.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IDiagnosticsScriptEngineSite* pScriptSite, BOOL fDebuggingEnabled, uint32 ulProcessId, IDiagnosticsScriptEngine** ppEngine) CreateDiagnosticsScriptEngine;
	}


	public HRESULT CreateDiagnosticsScriptEngine(IDiagnosticsScriptEngineSite* pScriptSite, BOOL fDebuggingEnabled, uint32 ulProcessId, IDiagnosticsScriptEngine** ppEngine) mut => VT.[Friend]CreateDiagnosticsScriptEngine(&this, pScriptSite, fDebuggingEnabled, ulProcessId, ppEngine);
}

[CRepr]struct IOpenServiceActivityInput : IUnknown
{
	public new const Guid IID = .(0x75cb4db9, 0x6da0, 0x4da3, 0x83, 0xce, 0x42, 0x2b, 0x6a, 0x43, 0x33, 0x46);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IUnknown.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, PWSTR pwzVariableName, PWSTR pwzVariableType, BSTR* pbstrVariableContent) GetVariable;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, PWSTR pwzVariableName, PWSTR pwzVariableType, BOOL* pfHasVariable) HasVariable;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, OpenServiceActivityContentType* pType) COM_GetType;
	}


	public HRESULT GetVariable(PWSTR pwzVariableName, PWSTR pwzVariableType, BSTR* pbstrVariableContent) mut => VT.[Friend]GetVariable(&this, pwzVariableName, pwzVariableType, pbstrVariableContent);

	public HRESULT HasVariable(PWSTR pwzVariableName, PWSTR pwzVariableType, BOOL* pfHasVariable) mut => VT.[Friend]HasVariable(&this, pwzVariableName, pwzVariableType, pfHasVariable);

	public HRESULT GetType(OpenServiceActivityContentType* pType) mut => VT.[Friend]COM_GetType(&this, pType);
}

[CRepr]struct IOpenServiceActivityOutputContext : IUnknown
{
	public new const Guid IID = .(0xe289deab, 0xf709, 0x49a9, 0xb9, 0x9e, 0x28, 0x23, 0x64, 0x07, 0x45, 0x71);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IUnknown.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, PWSTR pwzUri, PWSTR pwzMethod, PWSTR pwzHeaders, IStream* pPostData) Navigate;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, PWSTR pwzUri, PWSTR pwzMethod, PWSTR pwzHeaders, IStream* pPostData, BOOL* pfCanNavigate) CanNavigate;
	}


	public HRESULT Navigate(PWSTR pwzUri, PWSTR pwzMethod, PWSTR pwzHeaders, IStream* pPostData) mut => VT.[Friend]Navigate(&this, pwzUri, pwzMethod, pwzHeaders, pPostData);

	public HRESULT CanNavigate(PWSTR pwzUri, PWSTR pwzMethod, PWSTR pwzHeaders, IStream* pPostData, BOOL* pfCanNavigate) mut => VT.[Friend]CanNavigate(&this, pwzUri, pwzMethod, pwzHeaders, pPostData, pfCanNavigate);
}

[CRepr]struct IOpenService : IUnknown
{
	public new const Guid IID = .(0xc2952ed1, 0x6a89, 0x4606, 0x92, 0x5f, 0x1e, 0xd8, 0xb4, 0xbe, 0x06, 0x30);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IUnknown.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BOOL* pfIsDefault) IsDefault;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BOOL fDefault, HWND hwnd) SetDefault;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* pbstrID) GetID;
	}


	public HRESULT IsDefault(BOOL* pfIsDefault) mut => VT.[Friend]IsDefault(&this, pfIsDefault);

	public HRESULT SetDefault(BOOL fDefault, HWND hwnd) mut => VT.[Friend]SetDefault(&this, fDefault, hwnd);

	public HRESULT GetID(BSTR* pbstrID) mut => VT.[Friend]GetID(&this, pbstrID);
}

[CRepr]struct IOpenServiceManager : IUnknown
{
	public new const Guid IID = .(0x5664125f, 0x4e10, 0x4e90, 0x98, 0xe4, 0xe4, 0x51, 0x3d, 0x95, 0x5a, 0x14);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IUnknown.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, PWSTR pwzServiceUrl, IOpenService** ppService) InstallService;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IOpenService* pService) UninstallService;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, PWSTR pwzID, IOpenService** ppService) GetServiceByID;
	}


	public HRESULT InstallService(PWSTR pwzServiceUrl, IOpenService** ppService) mut => VT.[Friend]InstallService(&this, pwzServiceUrl, ppService);

	public HRESULT UninstallService(IOpenService* pService) mut => VT.[Friend]UninstallService(&this, pService);

	public HRESULT GetServiceByID(PWSTR pwzID, IOpenService** ppService) mut => VT.[Friend]GetServiceByID(&this, pwzID, ppService);
}

[CRepr]struct IOpenServiceActivity : IOpenService
{
	public new const Guid IID = .(0x13645c88, 0x221a, 0x4905, 0x8e, 0xd1, 0x4f, 0x51, 0x12, 0xcf, 0xc1, 0x08);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IOpenService.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IOpenServiceActivityInput* pInput, IOpenServiceActivityOutputContext* pOutput) Execute;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IOpenServiceActivityInput* pInput, IOpenServiceActivityOutputContext* pOutput, BOOL* pfCanExecute) CanExecute;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, OpenServiceActivityContentType type, BOOL* pfCanExecute) CanExecuteType;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IOpenServiceActivityInput* pInput, IOpenServiceActivityOutputContext* pOutput) Preview;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IOpenServiceActivityInput* pInput, IOpenServiceActivityOutputContext* pOutput, BOOL* pfCanPreview) CanPreview;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, OpenServiceActivityContentType type, BOOL* pfCanPreview) CanPreviewType;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IOpenServiceActivityInput* pInput, BSTR* pbstrStatusText) GetStatusText;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* pbstrHomepageUrl) GetHomepageUrl;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* pbstrDisplayName) GetDisplayName;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* pbstrDescription) GetDescription;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* pbstrCategoryName) GetCategoryName;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* pbstrIconPath) GetIconPath;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BOOL fSmallIcon, HICON* phIcon) GetIcon;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* pbstrXmlPath) GetDescriptionFilePath;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* pbstrXmlUri) GetDownloadUrl;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* pbstrInstallUri) GetInstallUrl;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BOOL* pfIsEnabled) IsEnabled;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BOOL fEnable) SetEnabled;
	}


	public HRESULT Execute(IOpenServiceActivityInput* pInput, IOpenServiceActivityOutputContext* pOutput) mut => VT.[Friend]Execute(&this, pInput, pOutput);

	public HRESULT CanExecute(IOpenServiceActivityInput* pInput, IOpenServiceActivityOutputContext* pOutput, BOOL* pfCanExecute) mut => VT.[Friend]CanExecute(&this, pInput, pOutput, pfCanExecute);

	public HRESULT CanExecuteType(OpenServiceActivityContentType type, BOOL* pfCanExecute) mut => VT.[Friend]CanExecuteType(&this, type, pfCanExecute);

	public HRESULT Preview(IOpenServiceActivityInput* pInput, IOpenServiceActivityOutputContext* pOutput) mut => VT.[Friend]Preview(&this, pInput, pOutput);

	public HRESULT CanPreview(IOpenServiceActivityInput* pInput, IOpenServiceActivityOutputContext* pOutput, BOOL* pfCanPreview) mut => VT.[Friend]CanPreview(&this, pInput, pOutput, pfCanPreview);

	public HRESULT CanPreviewType(OpenServiceActivityContentType type, BOOL* pfCanPreview) mut => VT.[Friend]CanPreviewType(&this, type, pfCanPreview);

	public HRESULT GetStatusText(IOpenServiceActivityInput* pInput, BSTR* pbstrStatusText) mut => VT.[Friend]GetStatusText(&this, pInput, pbstrStatusText);

	public HRESULT GetHomepageUrl(BSTR* pbstrHomepageUrl) mut => VT.[Friend]GetHomepageUrl(&this, pbstrHomepageUrl);

	public HRESULT GetDisplayName(BSTR* pbstrDisplayName) mut => VT.[Friend]GetDisplayName(&this, pbstrDisplayName);

	public HRESULT GetDescription(BSTR* pbstrDescription) mut => VT.[Friend]GetDescription(&this, pbstrDescription);

	public HRESULT GetCategoryName(BSTR* pbstrCategoryName) mut => VT.[Friend]GetCategoryName(&this, pbstrCategoryName);

	public HRESULT GetIconPath(BSTR* pbstrIconPath) mut => VT.[Friend]GetIconPath(&this, pbstrIconPath);

	public HRESULT GetIcon(BOOL fSmallIcon, HICON* phIcon) mut => VT.[Friend]GetIcon(&this, fSmallIcon, phIcon);

	public HRESULT GetDescriptionFilePath(BSTR* pbstrXmlPath) mut => VT.[Friend]GetDescriptionFilePath(&this, pbstrXmlPath);

	public HRESULT GetDownloadUrl(BSTR* pbstrXmlUri) mut => VT.[Friend]GetDownloadUrl(&this, pbstrXmlUri);

	public HRESULT GetInstallUrl(BSTR* pbstrInstallUri) mut => VT.[Friend]GetInstallUrl(&this, pbstrInstallUri);

	public HRESULT IsEnabled(BOOL* pfIsEnabled) mut => VT.[Friend]IsEnabled(&this, pfIsEnabled);

	public HRESULT SetEnabled(BOOL fEnable) mut => VT.[Friend]SetEnabled(&this, fEnable);
}

[CRepr]struct IEnumOpenServiceActivity : IUnknown
{
	public new const Guid IID = .(0xa436d7d2, 0x17c3, 0x4ef4, 0xa1, 0xe8, 0x5c, 0x86, 0xfa, 0xff, 0x26, 0xc0);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IUnknown.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32 celt, IOpenServiceActivity** rgelt, uint32* pceltFetched) Next;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32 celt) Skip;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self) Reset;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IEnumOpenServiceActivity** ppenum) Clone;
	}


	public HRESULT Next(uint32 celt, IOpenServiceActivity** rgelt, uint32* pceltFetched) mut => VT.[Friend]Next(&this, celt, rgelt, pceltFetched);

	public HRESULT Skip(uint32 celt) mut => VT.[Friend]Skip(&this, celt);

	public HRESULT Reset() mut => VT.[Friend]Reset(&this);

	public HRESULT Clone(IEnumOpenServiceActivity** ppenum) mut => VT.[Friend]Clone(&this, ppenum);
}

[CRepr]struct IOpenServiceActivityCategory : IUnknown
{
	public new const Guid IID = .(0x850af9d6, 0x7309, 0x40b5, 0xbd, 0xb8, 0x78, 0x6c, 0x10, 0x6b, 0x21, 0x53);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IUnknown.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BOOL* pfHasDefaultActivity) HasDefaultActivity;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IOpenServiceActivity** ppDefaultActivity) GetDefaultActivity;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IOpenServiceActivity* pActivity, HWND hwnd) SetDefaultActivity;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* pbstrName) GetName;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IOpenServiceActivityInput* pInput, IOpenServiceActivityOutputContext* pOutput, IEnumOpenServiceActivity** ppEnumActivity) GetActivityEnumerator;
	}


	public HRESULT HasDefaultActivity(BOOL* pfHasDefaultActivity) mut => VT.[Friend]HasDefaultActivity(&this, pfHasDefaultActivity);

	public HRESULT GetDefaultActivity(IOpenServiceActivity** ppDefaultActivity) mut => VT.[Friend]GetDefaultActivity(&this, ppDefaultActivity);

	public HRESULT SetDefaultActivity(IOpenServiceActivity* pActivity, HWND hwnd) mut => VT.[Friend]SetDefaultActivity(&this, pActivity, hwnd);

	public HRESULT GetName(BSTR* pbstrName) mut => VT.[Friend]GetName(&this, pbstrName);

	public HRESULT GetActivityEnumerator(IOpenServiceActivityInput* pInput, IOpenServiceActivityOutputContext* pOutput, IEnumOpenServiceActivity** ppEnumActivity) mut => VT.[Friend]GetActivityEnumerator(&this, pInput, pOutput, ppEnumActivity);
}

[CRepr]struct IEnumOpenServiceActivityCategory : IUnknown
{
	public new const Guid IID = .(0x33627a56, 0x8c9a, 0x4430, 0x8f, 0xd1, 0xb5, 0xf5, 0xc7, 0x71, 0xaf, 0xb6);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IUnknown.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32 celt, IOpenServiceActivityCategory** rgelt, uint32* pceltFetched) Next;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32 celt) Skip;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self) Reset;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IEnumOpenServiceActivityCategory** ppenum) Clone;
	}


	public HRESULT Next(uint32 celt, IOpenServiceActivityCategory** rgelt, uint32* pceltFetched) mut => VT.[Friend]Next(&this, celt, rgelt, pceltFetched);

	public HRESULT Skip(uint32 celt) mut => VT.[Friend]Skip(&this, celt);

	public HRESULT Reset() mut => VT.[Friend]Reset(&this);

	public HRESULT Clone(IEnumOpenServiceActivityCategory** ppenum) mut => VT.[Friend]Clone(&this, ppenum);
}

[CRepr]struct IOpenServiceActivityManager : IUnknown
{
	public new const Guid IID = .(0x8a2d0a9d, 0xe920, 0x4bdc, 0xa2, 0x91, 0xd3, 0x0f, 0x65, 0x0b, 0xc4, 0xf1);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IUnknown.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, OpenServiceActivityContentType eType, IEnumOpenServiceActivityCategory** ppEnum) GetCategoryEnumerator;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, PWSTR pwzActivityID, IOpenServiceActivity** ppActivity) GetActivityByID;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, PWSTR pwzHomepage, PWSTR pwzCategory, IOpenServiceActivity** ppActivity) GetActivityByHomepageAndCategory;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32* pdwVersionCookie) GetVersionCookie;
	}


	public HRESULT GetCategoryEnumerator(OpenServiceActivityContentType eType, IEnumOpenServiceActivityCategory** ppEnum) mut => VT.[Friend]GetCategoryEnumerator(&this, eType, ppEnum);

	public HRESULT GetActivityByID(PWSTR pwzActivityID, IOpenServiceActivity** ppActivity) mut => VT.[Friend]GetActivityByID(&this, pwzActivityID, ppActivity);

	public HRESULT GetActivityByHomepageAndCategory(PWSTR pwzHomepage, PWSTR pwzCategory, IOpenServiceActivity** ppActivity) mut => VT.[Friend]GetActivityByHomepageAndCategory(&this, pwzHomepage, pwzCategory, ppActivity);

	public HRESULT GetVersionCookie(uint32* pdwVersionCookie) mut => VT.[Friend]GetVersionCookie(&this, pdwVersionCookie);
}

[CRepr]struct IPersistHistory : IPersist
{
	public new const Guid IID = .(0x91a565c1, 0xe38f, 0x11d0, 0x94, 0xbf, 0x00, 0xa0, 0xc9, 0x05, 0x5c, 0xbf);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IPersist.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IStream* pStream, IBindCtx* pbc) LoadHistory;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IStream* pStream) SaveHistory;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32 dwPositioncookie) SetPositionCookie;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32* pdwPositioncookie) GetPositionCookie;
	}


	public HRESULT LoadHistory(IStream* pStream, IBindCtx* pbc) mut => VT.[Friend]LoadHistory(&this, pStream, pbc);

	public HRESULT SaveHistory(IStream* pStream) mut => VT.[Friend]SaveHistory(&this, pStream);

	public HRESULT SetPositionCookie(uint32 dwPositioncookie) mut => VT.[Friend]SetPositionCookie(&this, dwPositioncookie);

	public HRESULT GetPositionCookie(uint32* pdwPositioncookie) mut => VT.[Friend]GetPositionCookie(&this, pdwPositioncookie);
}

[CRepr]struct IEnumSTATURL : IUnknown
{
	public new const Guid IID = .(0x3c374a42, 0xbae4, 0x11cf, 0xbf, 0x7d, 0x00, 0xaa, 0x00, 0x69, 0x46, 0xee);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IUnknown.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32 celt, STATURL* rgelt, uint32* pceltFetched) Next;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32 celt) Skip;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self) Reset;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IEnumSTATURL** ppenum) Clone;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, PWSTR poszFilter, uint32 dwFlags) SetFilter;
	}


	public HRESULT Next(uint32 celt, STATURL* rgelt, uint32* pceltFetched) mut => VT.[Friend]Next(&this, celt, rgelt, pceltFetched);

	public HRESULT Skip(uint32 celt) mut => VT.[Friend]Skip(&this, celt);

	public HRESULT Reset() mut => VT.[Friend]Reset(&this);

	public HRESULT Clone(IEnumSTATURL** ppenum) mut => VT.[Friend]Clone(&this, ppenum);

	public HRESULT SetFilter(PWSTR poszFilter, uint32 dwFlags) mut => VT.[Friend]SetFilter(&this, poszFilter, dwFlags);
}

[CRepr]struct IUrlHistoryStg : IUnknown
{
	public new const Guid IID = .(0x3c374a41, 0xbae4, 0x11cf, 0xbf, 0x7d, 0x00, 0xaa, 0x00, 0x69, 0x46, 0xee);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IUnknown.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, PWSTR pocsUrl, PWSTR pocsTitle, uint32 dwFlags) AddUrl;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, PWSTR pocsUrl, uint32 dwFlags) DeleteUrl;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, PWSTR pocsUrl, uint32 dwFlags, STATURL* lpSTATURL) QueryUrl;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, PWSTR pocsUrl, in Guid riid, void** ppvOut) BindToObject;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IEnumSTATURL** ppEnum) EnumUrls;
	}


	public HRESULT AddUrl(PWSTR pocsUrl, PWSTR pocsTitle, uint32 dwFlags) mut => VT.[Friend]AddUrl(&this, pocsUrl, pocsTitle, dwFlags);

	public HRESULT DeleteUrl(PWSTR pocsUrl, uint32 dwFlags) mut => VT.[Friend]DeleteUrl(&this, pocsUrl, dwFlags);

	public HRESULT QueryUrl(PWSTR pocsUrl, uint32 dwFlags, STATURL* lpSTATURL) mut => VT.[Friend]QueryUrl(&this, pocsUrl, dwFlags, lpSTATURL);

	public HRESULT BindToObject(PWSTR pocsUrl, in Guid riid, void** ppvOut) mut => VT.[Friend]BindToObject(&this, pocsUrl, riid, ppvOut);

	public HRESULT EnumUrls(IEnumSTATURL** ppEnum) mut => VT.[Friend]EnumUrls(&this, ppEnum);
}

[CRepr]struct IUrlHistoryStg2 : IUrlHistoryStg
{
	public new const Guid IID = .(0xafa0dc11, 0xc313, 0x11d0, 0x83, 0x1a, 0x00, 0xc0, 0x4f, 0xd5, 0xae, 0x38);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IUrlHistoryStg.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, PWSTR pocsUrl, PWSTR pocsTitle, uint32 dwFlags, BOOL fWriteHistory, IOleCommandTarget* poctNotify, IUnknown* punkISFolder) AddUrlAndNotify;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self) ClearHistory;
	}


	public HRESULT AddUrlAndNotify(PWSTR pocsUrl, PWSTR pocsTitle, uint32 dwFlags, BOOL fWriteHistory, IOleCommandTarget* poctNotify, IUnknown* punkISFolder) mut => VT.[Friend]AddUrlAndNotify(&this, pocsUrl, pocsTitle, dwFlags, fWriteHistory, poctNotify, punkISFolder);

	public HRESULT ClearHistory() mut => VT.[Friend]ClearHistory(&this);
}

[CRepr]struct IUrlHistoryNotify : IOleCommandTarget
{
	public new const Guid IID = .(0xbc40bec1, 0xc493, 0x11d0, 0x83, 0x1b, 0x00, 0xc0, 0x4f, 0xd5, 0xae, 0x38);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IOleCommandTarget.VTable
	{
	}

}

[CRepr]struct IWebBrowserEventsService : IUnknown
{
	public new const Guid IID = .(0x54a8f188, 0x9ebd, 0x4795, 0xad, 0x16, 0x9b, 0x49, 0x45, 0x11, 0x96, 0x36);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IUnknown.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int16* pfCancel) FireBeforeNavigate2Event;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self) FireNavigateComplete2Event;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self) FireDownloadBeginEvent;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self) FireDownloadCompleteEvent;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self) FireDocumentCompleteEvent;
	}


	public HRESULT FireBeforeNavigate2Event(int16* pfCancel) mut => VT.[Friend]FireBeforeNavigate2Event(&this, pfCancel);

	public HRESULT FireNavigateComplete2Event() mut => VT.[Friend]FireNavigateComplete2Event(&this);

	public HRESULT FireDownloadBeginEvent() mut => VT.[Friend]FireDownloadBeginEvent(&this);

	public HRESULT FireDownloadCompleteEvent() mut => VT.[Friend]FireDownloadCompleteEvent(&this);

	public HRESULT FireDocumentCompleteEvent() mut => VT.[Friend]FireDocumentCompleteEvent(&this);
}

[CRepr]struct IWebBrowserEventsUrlService : IUnknown
{
	public new const Guid IID = .(0x87cc5d04, 0xeafa, 0x4833, 0x98, 0x20, 0x8f, 0x98, 0x65, 0x30, 0xcc, 0x00);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IUnknown.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BSTR* pUrl) GetUrlForEvents;
	}


	public HRESULT GetUrlForEvents(BSTR* pUrl) mut => VT.[Friend]GetUrlForEvents(&this, pUrl);
}

[CRepr]struct ITimerService : IUnknown
{
	public new const Guid IID = .(0x3050f35f, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IUnknown.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, ITimer* pReferenceTimer, ITimer** ppNewTimer) CreateTimer;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, in Guid rguidName, ITimer** ppTimer) GetNamedTimer;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, in Guid rguidName, ITimer* pReferenceTimer) SetNamedTimerReference;
	}


	public HRESULT CreateTimer(ITimer* pReferenceTimer, ITimer** ppNewTimer) mut => VT.[Friend]CreateTimer(&this, pReferenceTimer, ppNewTimer);

	public HRESULT GetNamedTimer(in Guid rguidName, ITimer** ppTimer) mut => VT.[Friend]GetNamedTimer(&this, rguidName, ppTimer);

	public HRESULT SetNamedTimerReference(in Guid rguidName, ITimer* pReferenceTimer) mut => VT.[Friend]SetNamedTimerReference(&this, rguidName, pReferenceTimer);
}

[CRepr]struct ITimer : IUnknown
{
	public new const Guid IID = .(0x3050f360, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IUnknown.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT vtimeMin, VARIANT vtimeMax, VARIANT vtimeInterval, uint32 dwFlags, ITimerSink* pTimerSink, uint32* pdwCookie) Advise;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32 dwCookie) Unadvise;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BOOL fFreeze) Freeze;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT* pvtime) GetTime;
	}


	public HRESULT Advise(VARIANT vtimeMin, VARIANT vtimeMax, VARIANT vtimeInterval, uint32 dwFlags, ITimerSink* pTimerSink, uint32* pdwCookie) mut => VT.[Friend]Advise(&this, vtimeMin, vtimeMax, vtimeInterval, dwFlags, pTimerSink, pdwCookie);

	public HRESULT Unadvise(uint32 dwCookie) mut => VT.[Friend]Unadvise(&this, dwCookie);

	public HRESULT Freeze(BOOL fFreeze) mut => VT.[Friend]Freeze(&this, fFreeze);

	public HRESULT GetTime(VARIANT* pvtime) mut => VT.[Friend]GetTime(&this, pvtime);
}

[CRepr]struct ITimerEx : ITimer
{
	public new const Guid IID = .(0x30510414, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : ITimer.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32 dwMode) SetMode;
	}


	public HRESULT SetMode(uint32 dwMode) mut => VT.[Friend]SetMode(&this, dwMode);
}

[CRepr]struct ITimerSink : IUnknown
{
	public new const Guid IID = .(0x3050f361, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IUnknown.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, VARIANT vtimeAdvise) OnTimer;
	}


	public HRESULT OnTimer(VARIANT vtimeAdvise) mut => VT.[Friend]OnTimer(&this, vtimeAdvise);
}

[CRepr]struct IMapMIMEToCLSID : IUnknown
{
	public new const Guid IID = .(0xd9e89500, 0x30fa, 0x11d0, 0xb7, 0x24, 0x00, 0xaa, 0x00, 0x6c, 0x1a, 0x01);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IUnknown.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BOOL bEnable) EnableDefaultMappings;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, PWSTR pszMIMEType, Guid* pCLSID) MapMIMEToCLSID;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, PWSTR pszMIMEType, uint32 dwMapMode, in Guid clsid) SetMapping;
	}


	public HRESULT EnableDefaultMappings(BOOL bEnable) mut => VT.[Friend]EnableDefaultMappings(&this, bEnable);

	public HRESULT MapMIMEToCLSID(PWSTR pszMIMEType, Guid* pCLSID) mut => VT.[Friend]MapMIMEToCLSID(&this, pszMIMEType, pCLSID);

	public HRESULT SetMapping(PWSTR pszMIMEType, uint32 dwMapMode, in Guid clsid) mut => VT.[Friend]SetMapping(&this, pszMIMEType, dwMapMode, clsid);
}

[CRepr]struct IImageDecodeFilter : IUnknown
{
	public new const Guid IID = .(0xa3ccedf3, 0x2de2, 0x11d0, 0x86, 0xf4, 0x00, 0xa0, 0xc9, 0x13, 0xf7, 0x50);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IUnknown.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IImageDecodeEventSink* pEventSink) Initialize;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IStream* pStream) Process;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, HRESULT hrStatus) Terminate;
	}


	public HRESULT Initialize(IImageDecodeEventSink* pEventSink) mut => VT.[Friend]Initialize(&this, pEventSink);

	public HRESULT Process(IStream* pStream) mut => VT.[Friend]Process(&this, pStream);

	public HRESULT Terminate(HRESULT hrStatus) mut => VT.[Friend]Terminate(&this, hrStatus);
}

[CRepr]struct IImageDecodeEventSink : IUnknown
{
	public new const Guid IID = .(0xbaa342a0, 0x2ded, 0x11d0, 0x86, 0xf4, 0x00, 0xa0, 0xc9, 0x13, 0xf7, 0x50);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IUnknown.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, int32 nWidth, int32 nHeight, in Guid bfid, uint32 nPasses, uint32 dwHints, IUnknown** ppSurface) GetSurface;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32* pdwEvents, uint32* pnFormats, Guid** ppFormats) OnBeginDecode;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self) OnBitsComplete;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, HRESULT hrStatus) OnDecodeComplete;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self) OnPalette;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, RECT* pBounds, BOOL bComplete) OnProgress;
	}


	public HRESULT GetSurface(int32 nWidth, int32 nHeight, in Guid bfid, uint32 nPasses, uint32 dwHints, IUnknown** ppSurface) mut => VT.[Friend]GetSurface(&this, nWidth, nHeight, bfid, nPasses, dwHints, ppSurface);

	public HRESULT OnBeginDecode(uint32* pdwEvents, uint32* pnFormats, Guid** ppFormats) mut => VT.[Friend]OnBeginDecode(&this, pdwEvents, pnFormats, ppFormats);

	public HRESULT OnBitsComplete() mut => VT.[Friend]OnBitsComplete(&this);

	public HRESULT OnDecodeComplete(HRESULT hrStatus) mut => VT.[Friend]OnDecodeComplete(&this, hrStatus);

	public HRESULT OnPalette() mut => VT.[Friend]OnPalette(&this);

	public HRESULT OnProgress(RECT* pBounds, BOOL bComplete) mut => VT.[Friend]OnProgress(&this, pBounds, bComplete);
}

[CRepr]struct IImageDecodeEventSink2 : IImageDecodeEventSink
{
	public new const Guid IID = .(0x8ebd8a57, 0x8a96, 0x48c9, 0x84, 0xa6, 0x96, 0x2e, 0x2d, 0xb9, 0xc9, 0x31);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IImageDecodeEventSink.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, BOOL* pfPremultAlpha) IsAlphaPremultRequired;
	}


	public HRESULT IsAlphaPremultRequired(BOOL* pfPremultAlpha) mut => VT.[Friend]IsAlphaPremultRequired(&this, pfPremultAlpha);
}

[CRepr]struct ISniffStream : IUnknown
{
	public new const Guid IID = .(0x4ef17940, 0x30e0, 0x11d0, 0xb7, 0x24, 0x00, 0xaa, 0x00, 0x6c, 0x1a, 0x01);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IUnknown.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IStream* pStream) Init;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, void* pBuffer, uint32 nBytes, uint32* pnBytesRead) Peek;
	}


	public HRESULT Init(IStream* pStream) mut => VT.[Friend]Init(&this, pStream);

	public HRESULT Peek(void* pBuffer, uint32 nBytes, uint32* pnBytesRead) mut => VT.[Friend]Peek(&this, pBuffer, nBytes, pnBytesRead);
}

[CRepr]struct IDithererImpl : IUnknown
{
	public new const Guid IID = .(0x7c48e840, 0x3910, 0x11d0, 0x86, 0xfc, 0x00, 0xa0, 0xc9, 0x13, 0xf7, 0x50);

	public new VTable* VT { get => (.)mVT; }

	[CRepr]public struct VTable : IUnknown.VTable
	{
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, uint32 nColors, RGBQUAD* prgbColors) SetDestColorTable;
		protected new function [CallingConvention(.Stdcall)] HRESULT(SelfOuter* self, IImageDecodeEventSink* pEventSink) SetEventSink;
	}


	public HRESULT SetDestColorTable(uint32 nColors, RGBQUAD* prgbColors) mut => VT.[Friend]SetDestColorTable(&this, nColors, prgbColors);

	public HRESULT SetEventSink(IImageDecodeEventSink* pEventSink) mut => VT.[Friend]SetEventSink(&this, pEventSink);
}

#endregion

#region Functions
public static
{
	[Import("MSRATING.lib"), CLink, CallingConvention(.Stdcall)]
	public static extern HRESULT RatingEnable(HWND hwndParent, PSTR pszUsername, BOOL fEnable);

	[Import("MSRATING.lib"), CLink, CallingConvention(.Stdcall)]
	public static extern HRESULT RatingEnableW(HWND hwndParent, PWSTR pszUsername, BOOL fEnable);

	[Import("MSRATING.lib"), CLink, CallingConvention(.Stdcall)]
	public static extern HRESULT RatingCheckUserAccess(PSTR pszUsername, PSTR pszURL, PSTR pszRatingInfo, uint8* pData, uint32 cbData, void** ppRatingDetails);

	[Import("MSRATING.lib"), CLink, CallingConvention(.Stdcall)]
	public static extern HRESULT RatingCheckUserAccessW(PWSTR pszUsername, PWSTR pszURL, PWSTR pszRatingInfo, uint8* pData, uint32 cbData, void** ppRatingDetails);

	[Import("MSRATING.lib"), CLink, CallingConvention(.Stdcall)]
	public static extern HRESULT RatingAccessDeniedDialog(HWND hDlg, PSTR pszUsername, PSTR pszContentDescription, void* pRatingDetails);

	[Import("MSRATING.lib"), CLink, CallingConvention(.Stdcall)]
	public static extern HRESULT RatingAccessDeniedDialogW(HWND hDlg, PWSTR pszUsername, PWSTR pszContentDescription, void* pRatingDetails);

	[Import("MSRATING.lib"), CLink, CallingConvention(.Stdcall)]
	public static extern HRESULT RatingAccessDeniedDialog2(HWND hDlg, PSTR pszUsername, void* pRatingDetails);

	[Import("MSRATING.lib"), CLink, CallingConvention(.Stdcall)]
	public static extern HRESULT RatingAccessDeniedDialog2W(HWND hDlg, PWSTR pszUsername, void* pRatingDetails);

	[Import("MSRATING.lib"), CLink, CallingConvention(.Stdcall)]
	public static extern HRESULT RatingFreeDetails(void* pRatingDetails);

	[Import("MSRATING.lib"), CLink, CallingConvention(.Stdcall)]
	public static extern HRESULT RatingObtainCancel(HANDLE hRatingObtainQuery);

	[Import("MSRATING.lib"), CLink, CallingConvention(.Stdcall)]
	public static extern HRESULT RatingObtainQuery(PSTR pszTargetUrl, uint32 dwUserData, int fCallback, HANDLE* phRatingObtainQuery);

	[Import("MSRATING.lib"), CLink, CallingConvention(.Stdcall)]
	public static extern HRESULT RatingObtainQueryW(PWSTR pszTargetUrl, uint32 dwUserData, int fCallback, HANDLE* phRatingObtainQuery);

	[Import("MSRATING.lib"), CLink, CallingConvention(.Stdcall)]
	public static extern HRESULT RatingSetupUI(HWND hDlg, PSTR pszUsername);

	[Import("MSRATING.lib"), CLink, CallingConvention(.Stdcall)]
	public static extern HRESULT RatingSetupUIW(HWND hDlg, PWSTR pszUsername);

	[Import("MSRATING.lib"), CLink, CallingConvention(.Stdcall)]
	public static extern HRESULT RatingAddToApprovedSites(HWND hDlg, uint32 cbPasswordBlob, uint8* pbPasswordBlob, PWSTR lpszUrl, BOOL fAlwaysNever, BOOL fSitePage, BOOL fApprovedSitesEnforced);

	[Import("MSRATING.lib"), CLink, CallingConvention(.Stdcall)]
	public static extern HRESULT RatingClickedOnPRFInternal(HWND hWndOwner, HINSTANCE param1, PSTR lpszFileName, int32 nShow);

	[Import("MSRATING.lib"), CLink, CallingConvention(.Stdcall)]
	public static extern HRESULT RatingClickedOnRATInternal(HWND hWndOwner, HINSTANCE param1, PSTR lpszFileName, int32 nShow);

	[Import("MSRATING.lib"), CLink, CallingConvention(.Stdcall)]
	public static extern HRESULT RatingEnabledQuery();

	[Import("MSRATING.lib"), CLink, CallingConvention(.Stdcall)]
	public static extern HRESULT RatingInit();

	[Import("ImgUtil.lib"), CLink, CallingConvention(.Stdcall)]
	public static extern HRESULT CreateMIMEMap(IMapMIMEToCLSID** ppMap);

	[Import("ImgUtil.lib"), CLink, CallingConvention(.Stdcall)]
	public static extern HRESULT DecodeImage(IStream* pStream, IMapMIMEToCLSID* pMap, IUnknown* pEventSink);

	[Import("ImgUtil.lib"), CLink, CallingConvention(.Stdcall)]
	public static extern HRESULT SniffStream(IStream* pInStream, uint32* pnFormat, IStream** ppOutStream);

	[Import("ImgUtil.lib"), CLink, CallingConvention(.Stdcall)]
	public static extern HRESULT GetMaxMIMEIDBytes(uint32* pnMaxBytes);

	[Import("ImgUtil.lib"), CLink, CallingConvention(.Stdcall)]
	public static extern HRESULT IdentifyMIMEType(in uint8 pbBytes, uint32 nBytes, uint32* pnFormat);

	[Import("ImgUtil.lib"), CLink, CallingConvention(.Stdcall)]
	public static extern HRESULT ComputeInvCMAP(RGBQUAD* pRGBColors, uint32 nColors, uint8* pInvTable, uint32 cbTable);

	[Import("ImgUtil.lib"), CLink, CallingConvention(.Stdcall)]
	public static extern HRESULT DitherTo8(uint8* pDestBits, int32 nDestPitch, uint8* pSrcBits, int32 nSrcPitch, in Guid bfidSrc, RGBQUAD* prgbDestColors, RGBQUAD* prgbSrcColors, uint8* pbDestInvMap, int32 x, int32 y, int32 cx, int32 cy, int32 lDestTrans, int32 lSrcTrans);

	[Import("ImgUtil.lib"), CLink, CallingConvention(.Stdcall)]
	public static extern HRESULT CreateDDrawSurfaceOnDIB(HBITMAP hbmDib, IDirectDrawSurface** ppSurface);

	[Import("ImgUtil.lib"), CLink, CallingConvention(.Stdcall)]
	public static extern HRESULT DecodeImageEx(IStream* pStream, IMapMIMEToCLSID* pMap, IUnknown* pEventSink, PWSTR pszMIMETypeParam);

	[Import("SHDOCVW.lib"), CLink, CallingConvention(.Stdcall)]
	public static extern HRESULT DoPrivacyDlg(HWND hwndOwner, PWSTR pszUrl, IEnumPrivacyRecords* pPrivacyEnum, BOOL fReportAllSites);

}
#endregion
